 
<apiPackage id="flash.text"><apiName>flash.text</apiName><apiDetail/><apiClassifier id="flash.text:TextExtent"><apiName>TextExtent</apiName><shortdesc>
 The TextExtent class contains information about the extents of some
 text in a text field.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextExtent class contains information about the extents of some
 text in a text field.  Objects of this class are returned by the
 <codeph>TextFormat.getTextExtent</codeph> method.
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.text:TextExtent:TextExtent"><apiName>TextExtent</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>textFieldWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>textFieldHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>ascent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>descent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="flash.text:TextExtent:ascent"><apiName>ascent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:descent"><apiName>descent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:height"><apiName>height</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:textFieldHeight"><apiName>textFieldHeight</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:textFieldWidth"><apiName>textFieldWidth</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:width"><apiName>width</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:CSMSettings"><apiName>CSMSettings</apiName><shortdesc>
	 The CSMSettings class contains properties for use with the 
	 TextRenderer.setAdvancedAntiAliasingTable() method 
     to provide continuous stroke modulation (CSM).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Not functioning correctly. Bug report 193833
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CSMSettings class contains properties for use with the 
	 <codeph>TextRenderer.setAdvancedAntiAliasingTable()</codeph> method 
     to provide continuous stroke modulation (CSM). CSM is the continuous 
     modulation of both stroke weight and edge sharpness.
	 
     </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links><apiConstructor id="flash.text:CSMSettings:CSMSettings"><apiName>CSMSettings</apiName><shortdesc>
     Creates a new CSMSettings object which stores stroke values for custom anti-aliasing settings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The size, in pixels, for which the settings apply.
	 </apiDesc></apiParam><apiParam><apiItemName>insideCutoff</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The inside cutoff value, above which densities are set to a maximum density
	 value (such as 255).
	 </apiDesc></apiParam><apiParam><apiItemName>outsideCutoff</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The outside cutoff value, below which densities are set to zero.
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Creates a new CSMSettings object which stores stroke values for custom anti-aliasing settings. 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text:CSMSettings:fontSize"><apiName>fontSize</apiName><shortdesc>
		 The size, in pixels, for which the settings apply.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 The size, in pixels, for which the settings apply.
		 
		 <p>The <codeph>advancedAntiAliasingTable</codeph> array passed to the 
		 <codeph>setAdvancedAntiAliasingTable()</codeph> method can contain multiple
		 entries that specify CSM settings for different font sizes. Using this
		 property, you can specify the font size to which the other settings apply.
		 </p>
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:CSMSettings:insideCutoff"><apiName>insideCutoff</apiName><shortdesc>
		 The inside cutoff value, above which densities are set to a maximum density
		 value (such as 255).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 The inside cutoff value, above which densities are set to a maximum density
		 value (such as 255).
         
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:CSMSettings:outsideCutoff"><apiName>outsideCutoff</apiName><shortdesc>
		 The outside cutoff value, below which densities are set to zero.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 The outside cutoff value, below which densities are set to zero.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextColorType"><apiName>TextColorType</apiName><shortdesc>
The TextColorType class provides color values for the flash.text.TextRenderer class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextColorType class provides color values for the flash.text.TextRenderer class.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer"><linktext>flash.text.TextRenderer</linktext></link></related-links><apiValue id="flash.text:TextColorType:DARK_COLOR"><apiName>DARK_COLOR</apiName><shortdesc>
    Used in the colorType parameter in the setAdvancedAntiAliasingTable() method.</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dark</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Used in the <codeph>colorType</codeph> parameter in the <codeph>setAdvancedAntiAliasingTable()</codeph> method.
	Use the syntax <codeph>TextColorType.DARK_COLOR</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:TextColorType:LIGHT_COLOR"><apiName>LIGHT_COLOR</apiName><shortdesc>
    Used in the colorType parameter in the setAdvancedAntiAliasingTable() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>light</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Used in the <codeph>colorType</codeph> parameter in the <codeph>setAdvancedAntiAliasingTable()</codeph> method.
	Use the syntax <codeph>TextColorType.LIGHT_COLOR</codeph>.	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:GridFitType"><apiName>GridFitType</apiName><shortdesc>
The GridFitType class defines values for grid fitting in the TextField class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The GridFitType class defines values for grid fitting in the TextField class.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiValue id="flash.text:GridFitType:NONE"><apiName>NONE</apiName><shortdesc> 
	Doesn't set grid fitting.</shortdesc><prolog><author>Bob Pappas
	
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Doesn't set grid fitting. Horizontal and vertical lines 
	in the glyphs are not forced to the pixel grid. 
	This constant is used in setting the <codeph>gridFitType</codeph> property of the 
	TextField class. This is often a good setting for animation 
	or for large font sizes.
	Use the syntax <codeph>GridFitType.NONE</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/gridFitType"><linktext>flash.text.TextField.gridFitType</linktext></link></related-links></apiValue><apiValue id="flash.text:GridFitType:PIXEL"><apiName>PIXEL</apiName><shortdesc>
	Fits strong horizontal and vertical lines to the pixel grid.</shortdesc><prolog><author>Bob Pappas
	
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pixel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Fits strong horizontal and vertical lines to the pixel grid. 
	This constant is used in setting the <codeph>gridFitType</codeph> property of the 
	TextField class. This setting only works for left-justified text 
	fields and acts like the <codeph>GridFitType.SUBPIXEL</codeph> constant in static 
	text. This setting generally provides the best readability for left-aligned text.
	Use the syntax <codeph>GridFitType.PIXEL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/gridFitType"><linktext>flash.text.TextField.gridFitType</linktext></link></related-links></apiValue><apiValue id="flash.text:GridFitType:SUBPIXEL"><apiName>SUBPIXEL</apiName><shortdesc>
	Fits strong horizontal and vertical lines to the sub-pixel 
	grid on LCD monitors.</shortdesc><prolog><author>Bob Pappas
	
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subpixel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Fits strong horizontal and vertical lines to the sub-pixel 
	grid on LCD monitors. (Red, green, and blue are actual pixels on an LCD screen.)
	This is often a good setting for right-aligned or center-aligned dynamic
	text, and it is sometimes a useful tradeoff for animation vs. text quality.
	This constant is used in setting the <codeph>gridFitType</codeph> property of the 
	TextField class. 
	Use the syntax <codeph>GridFitType.SUBPIXEL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/gridFitType"><linktext>flash.text.TextField.gridFitType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:StaticText"><apiName>StaticText</apiName><shortdesc>
 This class represents StaticText objects on the display list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObject</apiBaseClassifier></apiClassifierDef><apiDesc>
 This class represents StaticText objects on the display list.
 You cannot create a StaticText object using ActionScript. Only the authoring tool
 can create a StaticText object. An attempt to create a new StaticText object generates
 an <codeph>ArgumentError</codeph>.
 
 <p>To create a reference to an existing static text field in ActionScript 3.0,
 you can iterate over the items in the display list. For example, the following snippet checks 
 to see if the display list contains a static text field and assigns the field to 
 a variable:</p>
 
 <codeblock>
 var i:uint;
 for (i = 0; i &lt; this.numChildren; i++) {
     var displayitem:DisplayObject = this.getChildAt(i);
     if (displayitem instanceof StaticText) {
         trace("a static text field is item " + i + " on the display list");
         var myFieldLabel:StaticText = StaticText(displayitem);
         trace("and contains the text: " + myFieldLabel.text);
     }
 }
 </codeblock>
 </apiDesc></apiClassifierDetail><apiValue id="flash.text:StaticText:text:get"><apiName>text</apiName><shortdesc>
     Returns the current text of the static text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Returns the current text of the static text field. The authoring tool may export multiple text field
     objects comprising the complete text. For example, for vertical text, the authoring tool will create 
     one text field per character.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextField"><apiName>TextField</apiName><shortdesc>
 The TextField class is used to create display objects for text display and input.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>The TextField class is used to create display objects for text display and input.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.display:InteractiveObject</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextField class is used to create display objects for text display and input.
 All dynamic and input text fields in a SWF file are instances of the TextField class.
 <ph outputclass="flexonly">You can use the TextField class to perform low-level text rendering.
 However, in Flex, you typically use the Label, Text, TextArea, and TextInput controls to process text.</ph>
 
 <ph outputclass="flashonly">You can give a text field an instance name in the Property inspector and
 use the methods and properties of the TextField class to manipulate it with ActionScript.
 TextField instance names are displayed in the Movie Explorer and in the Insert Target Path dialog box
 in the Actions panel.</ph>
 
 <p>To create a text field dynamically, use the <codeph>TextField()</codeph> constructor.</p>
 
 <p>The methods of the TextField class let you set, select, and manipulate text in a dynamic or input
 text field that you create during authoring or at runtime. </p>
 
 <p>ActionScript provides several ways to
 format your text at runtime. The TextFormat class lets you set character and paragraph formatting
 for TextField objects. You can apply Cascading Style Sheets (CSS) styles
 to text fields by using the <codeph>TextField.styleSheet</codeph> property and the StyleSheet class. You can use CSS to
 style built-in HTML tags, define new formatting tags, or apply styles.
 You can assign HTML formatted text, which optionally uses CSS styles, directly to a text
 field. HTML text that you assign to a text field can contain embedded
 media (movie clips, SWF files, GIF files, PNG files, and JPEG files). The text wraps around the
 embedded media in the same way that a web browser wraps text around media embedded in an HTML document. </p>
 
 <p>Flash Player supports a subset of HTML tags that you can use to format text. See the list of supported
 HTML tags in the description of the <xref href="flasht/text/TextField#htmlText">htmlText</xref> property.</p>
 
 </apiDesc><example conref="examples\TextFieldExample.as"> The following example uses the <codeph>TextFieldExample</codeph> class to 
 display a text message.  This is accomplished by using the following steps:
 <ol>
  <li>A <codeph>label</codeph> property of type TextField is created.</li>
  <li>The class constructor calls the <codeph>configureLabel()</codeph> function.</li>
  <li> The <codeph>configureLabel()</codeph> method first creates a new TextField object and assigns it to
  the <codeph>label</codeph> property, and then sets its parameters to the following:
  <ul>
      <li>Left-justify the text field.</li>
      <li>Enable the background fill.</li>
      <li>Enable the border.</li>
  </ul>
  </li>
  <li>The <codeph>configureLabel()</codeph> method creates the <codeph>format</codeph> variable  and assigns it to
  a new TextFormat instance with its parameters set to the following:
  <ul>
      <li>Font type = Verdana</li>
      <li>Font color = solid red</li>
      <li>Font size = 10</li>
      <li>Font underline = true</li>
  </ul>
  </li>
  <li>The <codeph>defaultTextFormat</codeph> property of the <codeph>label</codeph> text field 
  is set to <codeph>format</codeph>, and the <codeph>label</codeph> instance is added to the display list, 
  which initially displays a text field with no text on the stage.</li>
 
  <li>The constructor sets the text of the <codeph>label</codeph> text field to 
  <codeph>"Hello world and welcome to the show."</codeph> by calling the 
  <codeph>setLabel()</codeph> method.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFormat;


    public class TextFieldExample extends Sprite {
        private var label:TextField;
        private var labelText:String = "Hello world and welcome to the show.";

        public function TextFieldExample() {
            configureLabel();
            setLabel(labelText);
        }

        public function setLabel(str:String):void {
            label.text = str;
        }

        private function configureLabel():void {
            label = new TextField();
            label.autoSize = TextFieldAutoSize.LEFT;
            label.background = true;
            label.border = true;

            var format:TextFormat = new TextFormat();
            format.font = "Verdana";
            format.color = 0xFF0000;
            format.size = 10;
            format.underline = true;

            label.defaultTextFormat = format;
            addChild(label);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link><link href="flash.text.xml#StyleSheet"><linktext>flash.text.StyleSheet</linktext></link></related-links><adobeApiEvent id="flash.text:TextField_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
 Flash Player dispatches the textInput event when a user enters one or more 
 characters of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Flash Player dispatches the <codeph>textInput</codeph> event when a user enters one or more 
 characters of text. Various 
 text input methods can generate this event, including standard keyboards,
 input method editors (IMEs), voice or speech recognition systems, and even the act
 of pasting plain text with no formatting or style information.
 </apiDesc><example conref="examples\TextField_textInput.as"> The following example defines two TextField objects: 
 the first TextField object is an input text field, and the second TextField object
 is a dynamic text field. As you enter text characters in 
 the first text field, the <codeph>textInput</codeph> event is dispatched, the <codeph>textInputHandler()</codeph> handler is called, and the characters display in the second
 text field. When you paste a 
 block of text into the input field, the event handler copies the entire block 
 into the other field.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.*;
    import flash.events.Event;
    import flash.events.TextEvent;
    import flash.events.MouseEvent;

    public class TextInputExample extends Sprite
    {
        private var myTextBox1:TextField = new TextField();
        private var myTextBox2:TextField = new TextField();

        public function TextInputExample()
        {
            myTextBox1.type = TextFieldType.INPUT;
            myTextBox1.width = 200;
            myTextBox1.height = 20;
            myTextBox1.background = true;
            myTextBox1.border = true;
            
            myTextBox2.x=220;

            addChild(myTextBox1);
            addChild(myTextBox2);
            myTextBox1.addEventListener(TextEvent.TEXT_INPUT,textInputHandler);
        }

        public function textInputHandler(event:TextEvent):void
        {
           myTextBox2.text=event.text;
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text:TextField_flash.events.Event.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
 Dispatched by a TextField object after the user scrolls.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SCROLL</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched by a TextField object <i>after</i> the user scrolls. 
 </apiDesc><example conref="examples\TextField_scroll.as"> The following example defines two TextField objects. 
 The first TextField object has two associated event handlers. When you click the mouse 
 inside this first text field, the <codeph>mouseDown</codeph> event is dispatched, and the associated <codeph>mouseDownScroll</codeph> handler is called. The  
 <codeph>mouseDownScroll()</codeph> handler causes the field to scroll. Then, the 
 <codeph>scroll</codeph> event is dispatched, and the associated <codeph>scrollHandler()</codeph>
 handler updates the second text field to display the current scroll position.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.*;
    import flash.events.Event;
    import flash.events.TextEvent;
    import flash.events.MouseEvent;

    public class TextScrollExample extends Sprite
    {
        private var myTextBox1:TextField = new TextField();
        private var myTextBox2:TextField = new TextField();
        private var myText:String = "Hello world and welcome to the show. It's really nice to meet you. Take your coat off and stay a while. OK, show is over. Hope you had fun. You can go home now. Don't forget to tip your waiter. There are mints in the bowl by the door. Thank you. Please come again.";

        public function TextScrollExample()
        {
            myTextBox1.text = myText;
            myTextBox1.width = 200;
            myTextBox1.height = 50;
            myTextBox1.multiline = true;
            myTextBox1.wordWrap = true;
            myTextBox1.background = true;
            myTextBox1.border = true;
            
            myTextBox2.x=220;
            myTextBox2.text="scrolled to line: " + myTextBox1.scrollV;

            addChild(myTextBox1);
            addChild(myTextBox2);
            myTextBox1.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownScroll);
            myTextBox1.addEventListener(Event.SCROLL, scrollHandler);
        }

        public function mouseDownScroll(event:MouseEvent):void
        {
            myTextBox1.scrollV++;
        }
        public function scrollHandler(event:Event):void
        {
           myTextBox2.text="scrolled to line: " + myTextBox1.scrollV;
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text:TextField_flash.events.TextEvent.LINK_link"><apiName>link</apiName><shortdesc>
 Dispatched when a user clicks a hyperlink in an 
 HTML-enabled text field, where the URL begins with "event:".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.LINK</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when a user clicks a hyperlink in an 
 HTML-enabled text field, where the URL begins with "event:". The remainder of the URL after 
 "event:" is placed in the text property of the LINK event.
 <p><b>Note:</b> The default behavior, adding the text to the text field,
 occurs only when Flash Player generates the event, which in this case happens when
 a user attempts to input text. You cannot put text into a text field by sending it <codeph>textInput</codeph> 
 events.</p>
 </apiDesc><example conref="examples\TextField_event_link.as"> In the following example, the <codeph>playMP3()</codeph> function is defined. 
 A TextField object named <codeph>list</codeph> is created and populated with HTML text. 
 The text <codeph>"Track 1"</codeph> and <codeph>"Track 2"</codeph> are links inside the text field. 
 The playMP3() function is called when the user clicks either link. The name of the MP3
 file, which follows the string "event:" in the <codeph>href</codeph> attribute of the 
 HTML tag, is passed to the <codeph>linkHandler()</codeph> method as the <codeph>text</codeph>
 property of the <codeph>link</codeph> event object.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.events.TextEvent;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class TextField_event_link extends Sprite
    {
        private var myMP3:Sound;
        public function TextField_event_link() {
            myMP3 = new Sound();
            var list:TextField = new TextField();
            list.autoSize = TextFieldAutoSize.LEFT;
            list.multiline = true;
            list.htmlText = "&lt;a href=\"event:track1.mp3\"&gt;Track 1&lt;/a&gt;&lt;br&gt;";
            list.htmlText += "&lt;a href=\"event:track2.mp3\"&gt;Track 2&lt;/a&gt;&lt;br&gt;";
            addEventListener(TextEvent.LINK, linkHandler);
            addChild(list);
        }
        
        private function playMP3(mp3:String):void {
            try {    
                myMP3.load(new URLRequest(mp3));
                myMP3.play();
            }
            catch(err:Error) {
                trace(err.message);
            }
            myMP3.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        }
        
        private function linkHandler(linkEvent:TextEvent):void {
            playMP3(linkEvent.text);
        }
        
        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text:TextField_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
 Dispatched after a control value is modified, unlike 
 the textInput event, which is dispatched before the value is modified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched after a control value is modified, unlike 
 the <codeph>textInput</codeph> event, which is dispatched before the value is modified. 
 Unlike the W3C DOM Event Model version of the <codeph>change</codeph> event, which dispatches the 
 event only after the control loses focus, the ActionScript 3.0 version of the 
 <codeph>change</codeph> event is dispatched any time the control changes. For example, if a user 
 types text into a text field, a <codeph>change</codeph> event is dispatched after every keystroke.
 </apiDesc><example conref="examples\TextField_Event_changeExample.as"> In the following example, the text that the user enters (user input) is immediately copied
 (echoed) into another text field with a different text format. 
 
 <p>Two text fields are created, one for the user input and the other
 (<codeph>headingTextField</codeph>) for the copy of the user input. A TextFormat 
 object is also created and the default text format is assigned to the 
 <codeph>headingTextField</codeph> text field. When the content of the text field 
 is changed, the <codeph>changeHandler()</codeph> method is invoked, which assigns 
 the text in the <codeph>inputTextField</codeph> text field to the <codeph>headingTextField</codeph> 
 text field. (If the method was called for the <codeph>TextEvent.TEXT_INPUT</codeph> event
 instead of the <codeph>Event.CHANGE</codeph> event, the content of the user input 
 is copied only after the user has entered more text.)</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFormat;
    import flash.text.TextFormatAlign;
    import flash.events.Event;
    
    import flash.events.TextEvent;

    public class TextField_Event_changeExample extends Sprite {
        private var inputTextField:TextField = new TextField(); 
        private var headingTextField:TextField = new TextField(); 
        private var newFormat:TextFormat = new TextFormat();
         
        public function TextField_Event_changeExample() {
            headingTextField.x = 10;
            headingTextField.y = 10;
            headingTextField.height = 30;
            headingTextField.width = 400;
            headingTextField.background = true;
            headingTextField.backgroundColor = 0xF5F5DC;
            headingTextField.selectable = false;
 
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 230;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.maxChars = 40;
            inputTextField.wordWrap = true;
            inputTextField.type = TextFieldType.INPUT;

            inputTextField.addEventListener(Event.CHANGE, changeHandler);

            newFormat.bold = true;
            newFormat.size = 18;
            newFormat.color = 0xFF0000;
            newFormat.align = TextFormatAlign.CENTER;

            headingTextField.defaultTextFormat = newFormat;

            this.addChild(inputTextField);
            this.addChild(headingTextField);
        }

        private function changeHandler(e:Event):void {
            headingTextField.text = inputTextField.text;
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.text:TextField:TextField"><apiName>TextField</apiName><shortdesc>
	Creates a new TextField instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Need to add an example.
	 </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	Creates a new TextField instance. After you create the TextField instance, call the
	 <codeph>addChild()</codeph> or <codeph>addChildAt()</codeph> method of the parent
	 DisplayObjectContainer object to add the TextField instance to the display list.
     <p>The default size for a text field is 100 x 100 pixels.</p>
	 
	 
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text:TextField:appendText"><apiName>appendText</apiName><shortdesc>
	 Appends the string specified by the newText parameter to the end of the text 
	 of the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The string to append to the existing text.
	 
     </apiDesc></apiParam><apiTipTexts><apiTipText>Appends text to the end of the existing text of the TextField.
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Appends the string specified by the <codeph>newText</codeph> parameter to the end of the text 
	 of the text field. This method is more efficient than an addition assignment (<codeph>+=</codeph>) on 
     a <codeph>text</codeph> property (such as <codeph>someTextField.text += moreText</codeph>),
	 particularly for a text field that contains a significant amount of content.
     
	 </apiDesc><example conref="examples\TextField_appendTextExample.as"> The following example displays the time if it's not the weekend or the text, "It's the weekend," 
 if it is. It also counts the number of characters up to a certain position and the number of lines in the text field.
 
 <p>The <codeph>outputText</codeph> text field is set to automatically fit the text and to resize as a 
 left-justified text using <codeph>autoSize</codeph> property. The <codeph>outputText.text</codeph> property writes the first 
 line of the content and the method <codeph>appendText()</codeph> appends the rest of the content. (It is not 
 necessary to start with the <codeph>text</codeph> property. The <codeph>appendText()</codeph> method could also be 
 used to append text from the outset.) Setting the <codeph>text</codeph> property a second time will overwrite 
 the original text. Use <codeph>+=</codeph> operator to append content with the <codeph>text</codeph> property.</p>
 
 <p>The <codeph>if</codeph> statement checks if the date is Saturday (6) or Sunday (0). If it's not, the 
 <codeph>toLocaleTimeString()</codeph> method returns the local time, which is appended to the text field's content.</p> 
 
 <p>The text field's <codeph>length</codeph> property is used to read the number of characters until right 
 before the function is called, and the property <codeph>numLines</codeph> is used to count the number of lines 
 in the text field. Note that the empty lines are counted in the number of lines and the empty spaces and 
 line breaks (\n) are counted in determining the content length.</p>   
 
<codeblock>
  package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
 
    public class TextField_appendTextExample extends Sprite {
         
        public function TextField_appendTextExample() {
            var outputText:TextField = new TextField();
            var today:Date = new Date();
                
            outputText.x = 10;
            outputText.y = 10;
            outputText.background = true;
            outputText.autoSize = TextFieldAutoSize.LEFT;
 
            outputText.text = "WHAT TIME IS IT?" + "\n\n";
 
            if((today.day == 0) || (today.day == 6)) {
                outputText.appendText("It's the weekend.");
                outputText.appendText("\n\n");
           
            } else {
                outputText.appendText("The time is: ");
                outputText.appendText(today.toLocaleTimeString() + ".\n\n");  
            }

            outputText.appendText("Number of characters including line breaks and spaces so far: ");
            outputText.appendText(outputText.length.toString() + "\n");
            outputText.appendText("Number of lines in the outputText: ");
            outputText.appendText(outputText.numLines.toString());   

            this.addChild(outputText);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc>
	 Returns a rectangle that is the bounding box of the character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A rectangle with <codeph>x</codeph> and <codeph>y</codeph> minimum and maximum values
	 defining the bounding box of the character.
	 
     </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the character (for example, the first
	 position is 0, the second position is 1, and so on).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Returns a rectangle that is the bounding box of the character.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns a rectangle that is the bounding box of the character.
	 
	 </apiDesc><example conref="examples\TextField_getCharBoundariesExample.as"> In the following example the <codeph>getCharBoundaries()</codeph> method is used to mark
 (put a spotlight on) a character that is selected by the user.
 
 <p>The class defines the <codeph>spotlight</codeph> Shape object that will be used to draw a rectangle around 
 each character that is selected. When the user clicks on the <codeph>myTextField</codeph> text field, the 
 <codeph>clickHandler()</codeph> method is invoked.</p>
 
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getCharIndexAtPoint()</codeph> method gets the clicked character's 
 index based on the <codeph>localX</codeph> and <codeph>localY</codeph> coordinates of the mouse click, which is relative 
 to the containing <codeph>Sprite</codeph>. The <codeph>getCharIndexAtPoint()</codeph> method returns <codeph>-1</codeph> if 
 the point (mouse click) was not over any character. Since the text field could be larger than the text, the returned 
 integer (<codeph>index</codeph>) is checked to make sure the user has clicked on a character. The <codeph>index</codeph> integer 
 is also used by <codeph>getCharBoundaries()</codeph> to get a <codeph>Rectangle</codeph> object that holds the boundary 
 of the character. The <codeph>clear()</codeph> method clears any previously displayed <codeph>spotlight</codeph> Shape object. A 
 new rectangle the size of the character's width and height boundaries is produced at the location of the character 
 (offset from the (10, 10) coordinates) using the returned <codeph>frame</codeph> rectangle's x and y coordinates. 
 To put the spotlight on the character, the <codeph>spotlight</codeph> Shape object is filled with color yellow and the 
 opacity is set to 35 percent, so the character can be seen. Note that spaces are also considered a character.</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.geom.Rectangle;
    import flash.events.MouseEvent;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;

    public class TextField_getCharBoundariesExample extends Sprite
    {
        private var myTextField:TextField = new TextField();    
        private var spotlight:Shape = new Shape();
        
        public function TextField_getCharBoundariesExample() {
            
            myTextField.x = 10;
            myTextField.y = 10; 
            myTextField.border = true;
            myTextField.selectable = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            myTextField.text = "Selected a character from this text by clicking on it."

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            
            this.addChild(myTextField);    
            this.addChild(spotlight);
         }

        private function clickHandler (e:MouseEvent):void {
            var index:int = myTextField.getCharIndexAtPoint(e.localX, e.localY);
 
            if (index != -1) {
                 var frame:Rectangle = myTextField.getCharBoundaries(index);

                spotlight.graphics.clear();    
                spotlight.graphics.beginFill(0xFFFF00, .35);
                spotlight.graphics.drawRect((frame.x + 10), (frame.y + 10), frame.width, frame.height);            
                spotlight.graphics.endFill();
            }
        } 
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc>
	 Returns the zero-based index value of the character at the point specified by the x
	 and y parameters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The zero-based index value of the character (for example, the first position is 0,
	   the second position is 1, and so on).  Returns -1 if the point is not over any character.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The <i>x</i> coordinate of the character.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The <i>y</i> coordinate of the character.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Returns the zero-based index value of the character.
	 
 	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns the zero-based index value of the character at the point specified by the <codeph>x</codeph>
	 and <codeph>y</codeph> parameters.
	 
	 </apiDesc><example conref="examples\TextField_getCharIndexAtPointExample.as"> In the following example, when a user clicked on a character, the character is echoed
 in another text field above the text.
 
 <p>The first text field holds the text the user is going to select. In order to make sure the text 
 is clicked but not selected, <codeph>selectable</codeph> property is set to false. When the user clicks
 on the <codeph>firstTextField</codeph> text field, the <codeph>clickHandler()</codeph> method is invoked.</p>
 
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getCharIndexAtPoint()</codeph> method returns the character's 
 index based on the <codeph>localX</codeph> and <codeph>localY</codeph> coordinates of the mouse click. Since the text field 
 could be larger than the text, the return integer (<codeph>index</codeph>) is checked to make sure the user has clicked 
 on a character. (The <codeph>getCharIndexAtPoint()</codeph> method returns <codeph>-1</codeph>, if the point (mouse click) 
 was not over a character.) The mouse coordinates is used to set the coordinates of the new text field where the 
 echoed character will appear. The color of the character in the second text field is set to red. Finally 
 the text of the second field is set to the selected character, which is retrieved using the <codeph>charAt()</codeph> method. 
 Note that using the <codeph>text</codeph> property instead of the <codeph>appendText()</codeph> method will overwrite the character 
 in the second text field, instead of appending it.</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.geom.Rectangle;
    import flash.events.MouseEvent;
    import flash.text.TextFieldAutoSize;
    
    public class TextField_getCharIndexAtPointExample extends Sprite {
        private var firstTextField:TextField = new TextField();    
        private var secondTextField:TextField = new TextField();
        
        public function TextField_getCharIndexAtPointExample() {

            firstTextField.x = 100;
            firstTextField.y = 100; 
            firstTextField.width = 260;
            firstTextField.height = 20;
            firstTextField.border = true;
            firstTextField.background = true;
            firstTextField.selectable = false;
            
            firstTextField.text = "Selected a character from this text by clicking on it."

            firstTextField.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(firstTextField);    
            this.addChild(secondTextField);
         }

        private function clickHandler (e:MouseEvent):void {
            var index:int = firstTextField.getCharIndexAtPoint(e.localX, e.localY);

            if (index != -1) {
                secondTextField.x = mouseX;
                secondTextField.y =  70;
                secondTextField.border = true;
                secondTextField.selectable = false;
                secondTextField.background = true;
                secondTextField.textColor = 0xFF0000;
                secondTextField.autoSize = TextFieldAutoSize.LEFT;
                secondTextField.text = firstTextField.text.charAt(index);    
            }
        } 
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc>
	 Given a character index, returns the index of the first character in the same paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The character index specified is out of range.
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The zero-based index value of the first character in the same paragraph.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the character (for example, the first character is 0,
	 the second character is 1, and so on).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>The zero-based index value of the character.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Given a character index, returns the index of the first character in the same paragraph.
	 
	 </apiDesc><example conref="examples\TextField_getFirstCharInParagraphExample.as"> In the following example, paragraph formatting is applied to the text field content. 
 When the user clicks on a paragraph, the text of the paragraph will be aligned right and when the user 
 clicks on the paragraph again, it will return to the original (default) format (left-align).
 
 <p>In the constructor, the <codeph>myTextField</codeph> text field is set to text wrap. The <codeph>getTextFormat</codeph> 
 method returns the original format of the first character of the content of the text field, which is placed
 in the <codeph>originalFormat</codeph> TextFormat object. A new TextFormat object (<codeph>newFormat</codeph>) is 
 also defined and its <codeph>align</codeph> property is assigned to right-justified. When the user clicks
 on the text field, the <codeph>clickHandler()</codeph> method is invoked.</p>
 
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getCharIndexAtPoint()</codeph> method returns the character's 
 index based on the <codeph>localX</codeph> and <codeph>localY</codeph> coordinates of the mouse click. The first <codeph>if</codeph>
 statement checks to see if the use has clicked on a character. Using the <codeph>clickIndex</codeph> integer returned by the 
 <codeph>getCharIndexAtPoint()</codeph> method, the <codeph>getFirstCharInParagraph()</codeph> method returns the index of the 
 first character in the paragraph the user has clicked. The index of the last character in the paragraph is
 determined by adding the length of the paragraph (using <codeph>getParagraphLength()</codeph> method) to the index of the first 
 character in the paragraph, minus the last character (<codeph>\n</codeph>). The second <codeph>if</codeph> statement
 checks the format of the first character in the paragraph. If its alignment value is the same as the 
 original format (left-justified), the new format is applied to all the characters in the paragraph. 
 Otherwise, the format of the paragraph is set back to the original format. Alignment, along with formatting 
 like indent, bullet, tab stop, left and right margin are formats that are meant for paragraphs. 
 Note that once word wrap or line break is used, the formatting will only apply to the first line of the 
 paragraph if <codeph>endIndex</codeph> argument is not defined for the <codeph>setTextFormat()</codeph> method.</p>
     
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.text.TextFormat;
    import flash.text.TextFormatAlign;

    public class TextField_getFirstCharInParagraphExample extends Sprite
    {
        private var myTextField:TextField = new TextField();
        private var originalFormat:TextFormat = new TextFormat();
        private var newFormat:TextFormat = new TextFormat(); 
        
        public function TextField_getFirstCharInParagraphExample() {
            myTextField.x = 10;
            myTextField.y = 10; 
            myTextField.border = true;
            myTextField.wordWrap = true;
            myTextField.width = 300;
            myTextField.height = 300; 
            myTextField.background = true;
             
            myTextField.appendText("The TextField class is used to create display objects for "
                        + "text display and input. All dynamic and input text fields in a SWF file " 
                        + "are instances of the TextField class. You can use the TextField class "
                        + "to perform low-level text rendering. However, in Flex, you typically use "
                        + "the Label, Text, TextArea, and TextInput controls to process text. "  
                        + "You can give a text field an instance name in the Property inspector "
                        + "and use the methods and properties of the TextField class to manipulate it with ActionScript. "
                        + "TextField instance names are displayed in the Movie Explorer and in the Insert "
                        + "Target Path dialog box in the Actions panel.\n\n"  
                        + "To create a text field dynamically, use the TextField constructor.\n\n"
                        + "The methods of the TextField class let you set, select, and manipulate "  
                        + "text in a dynamic or input text field that you create during authoring or at runtime.\n\n");

            originalFormat = myTextField.getTextFormat(0);

            newFormat.align = TextFormatAlign.RIGHT;

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
  
            this.addChild(myTextField);
        }

        private function clickHandler(e:MouseEvent):void {
            var clickIndex:int = myTextField.getCharIndexAtPoint(e.localX, e.localY);
                  
            if(clickIndex != -1) {
                var paragraphFirstIndex:int = myTextField.getFirstCharInParagraph(clickIndex);
                var paragraphEndIndex:int = paragraphFirstIndex + ((myTextField.getParagraphLength(clickIndex) - 1));
            
                if (myTextField.getTextFormat(paragraphFirstIndex).align == originalFormat.align) {
                     myTextField.setTextFormat(newFormat, paragraphFirstIndex, paragraphEndIndex);
                }else {
                     myTextField.setTextFormat(originalFormat, paragraphFirstIndex, paragraphEndIndex);
                }
            } 
        }
    }
}
 
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getImageReference"><apiName>getImageReference</apiName><shortdesc>
	 Returns a DisplayObject reference for the given id, for an image or SWF file
	 that has been added to an HTML-formatted text field by using an &amp;lt;img&amp;gt; tag.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The display object corresponding to the image or SWF file with the matching <codeph>id</codeph> 
	 attribute in the <codeph>&lt;img&gt;</codeph> tag of the text field. For media loaded from an external source, 
	 this object is a Loader object, and, once loaded, the media object is a child of that Loader object. For media 
	 embedded in the SWF file, it is the loaded object. If no <codeph>&lt;img&gt;</codeph> tag with 
	 the matching <codeph>id</codeph> exists, the method returns <codeph>null</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The <codeph>id</codeph> to match (in the <codeph>id</codeph> attribute of the 
	 <codeph>&lt;img&gt;</codeph> tag). 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns a DisplayObject reference for the given <codeph>id</codeph>, for an image or SWF file
	 that has been added to an HTML-formatted text field by using an <codeph>&lt;img&gt;</codeph> tag.
	 The <codeph>&lt;img&gt;</codeph> tag is in the following format:
	 
	 <p><pre><codeph>	&lt;img src = 'filename.jpg' id = 'instanceName' &gt;</codeph></pre></p>
	 
	 </apiDesc><example conref="examples\TextField_getImageReferenceExample.as"> In the following example, when the text field is clicked, the image in the field is set to 25 percent opacity and
 it rotates 90 degrees from its original rotation. The image will continue to rotate with each subsequent click.
 
 <p>The image (<codeph>image.jpg</codeph>) is included via the HTML. (Here it is assumed that an image file is in the same 
 directory as the SWF file.) An <codeph>id</codeph> attribute needs to be defined for the <codeph>img</codeph> tag in order 
 to access the image using <codeph>getImageReference()</codeph> method. The <codeph>htmlText</codeph> property is used to include 
 HTML-formatted string content. When the user clicks on the <codeph>myTextField</codeph> text field, the <codeph>clickHandler()</codeph> 
 method is invoked.</p> 
 
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getImageReference()</codeph> method returns a reference to 
 the image as a <codeph>DisplayObject</codeph>. This reference can be used to manipulate the image, like any <codeph>DisplayObject</codeph>
 object. Here, the <codeph>alpha</codeph> (transparency) and <codeph>rotation</codeph> properties are set. The <codeph>transform</codeph> 
 property can also be used to access the display object's matrix, color transform, and pixel bounds. Note also that 
 <codeph>flash.display.DisplayObject</codeph> needs to be imported.</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.display.DisplayObject;
    
    import flash.text.TextFieldAutoSize;
    
    public class TextField_getImageReferenceExample extends Sprite
    {
        private var myTextField:TextField = new TextField();
        
        public function TextField_getImageReferenceExample()
        {
            var myText1:String = "&lt;p&gt;Here is an image we want to mainpulate: &lt;img src='image.jpg' id='testimage'&gt;&lt;/p&gt;";

            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 250;
            myTextField.height = 250;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.border = true;
            myTextField.multiline = true;

            myTextField.htmlText = myText1;
            
            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            
            this.addChild(myTextField);
        }
 
        private function clickHandler(e:MouseEvent):void {
            var imageRef:DisplayObject = myTextField.getImageReference("testimage");
 
            imageRef.rotation += 90;
            imageRef.x = 125;
            imageRef.y = 125;
            imageRef.alpha = 0.25;      
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>htmlText</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc>
	 Returns the zero-based index value of the line at the point specified by the x
	 and y parameters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The zero-based index value of the line (for example, the first line is 0, the
	         second line is 1, and so on).  Returns -1 if the point is not over any line.
 	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The <i>x</i> coordinate of the line.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The <i>y</i> coordinate of the line.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>The zero-based index value of the line at a specified point.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns the zero-based index value of the line at the point specified by the <codeph>x</codeph>
	 and <codeph>y</codeph> parameters.
	 
	 </apiDesc><example conref="examples\TextField_getLineIndexAtPointExample.as"> In the following example, when a user selects a line from the Shakespeare's sonnet, 
 it is copied (appended) into a new text field.   
 
 <p>In the constructor, the <codeph>poem</codeph> text field is set not to wrap (since it's a poem). 
 The <codeph>autoSize</codeph> property also is used to set the text to automatically fit and to have 
 it resize as a left-justified text. The <codeph>poemCopy</codeph> text field is placed under the 
 <codeph>poem</codeph> text field. When a user clicks on some line of the poem, the <codeph>clickHandler()</codeph> 
 method is invoked.</p>
 
 <p>In <codeph>clickHandler()</codeph> method, the <codeph>getLineIndexAtPoint()</codeph> method returns
 the line index of where the user has clicked based on the <codeph>localX</codeph> and <codeph>localY</codeph> 
 coordinates of the mouse click. (Since the original poem fits the size of the text field here,
 it is not necessary to check for out of range error (<codeph>RangeError</codeph>) thrown by 
 <codeph>getCharIndexAtPoint()</codeph> method.) The line index is then used to get the content of 
 the line as a string with the <codeph>getLineText()</codeph> method, which is then appended to the 
 <codeph>poemCopy</codeph> text field content. The copying can go on continuously but after a point, 
 the text will be outside of the range of the viewable <codeph>poemCopy</codeph> text field.</p>    
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.text.TextFormat;
    import flash.text.TextFieldAutoSize;

    public class TextField_getLineIndexAtPointExample extends Sprite {
        private var poem:TextField = new TextField();
        private var poemCopy:TextField = new TextField();
        
        public function TextField_getLineIndexAtPointExample() {
            poem.border = true;
            poem.autoSize = TextFieldAutoSize.LEFT;
            poem.x = 10;
            poem.wordWrap = false;

            poemCopy.height = 250;
            poemCopy.width = 270;
            poemCopy.y = 230;
            poemCopy.x = 10;
            poemCopy.background = true;
            poemCopy.border = true;
            poemCopy.wordWrap = false;
            
            poem.appendText("Let me not to the marriage of true minds\n"
                              + "Admit impediments. love is not love\n"
                              + "Which alters when it alteration finds\n"
                              + "Or bends with the remover to remove:\n"
                              + "O no! it is an ever-fixed mark\n" 
                              + "That looks on tempests and is never shaken;\n"
                              + "It is the star to every wandering bark,\n"
                              + "Whose worth's unknown, although his height be taken.\n"
                              + "Love's not Time's fool, though rosy lips and cheeks\n"
                              + "Within his bending sickle's compass come:\n"
                              + "Love alters not with his brief hours and weeks,\n"
                              + "But bears it out even to the edge of doom.\n"
                              + "If this be error and upon me proved,\n"
                              + "I never writ, nor no man ever loved.");

           poem.addEventListener(MouseEvent.CLICK, clickHandler); 

           this.addChild(poem); 
           this.addChild(poemCopy);
        }
    
        private function clickHandler(e:MouseEvent):void {
                var index:int = poem.getLineIndexAtPoint(e.localX, e.localY);
                var s:String;

                s = poem.getLineText(index);
                poemCopy.appendText(s + "\n");
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc>
	 Returns the zero-based index value of the line containing the character specified 
	 by the charIndex parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The character index specified is out of range.
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The zero-based index value of the line.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the character (for example, the first character is 0,
	 the second character is 1, and so on).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>The zero-based index value of the line containing the character that the 
	 the <codeph>charIndex</codeph> parameter specifies.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns the zero-based index value of the line containing the character specified 
	 by the <codeph>charIndex</codeph> parameter.
	 
	 </apiDesc><example conref="examples\TextField_getLineIndexOfCharExample.as"> In the following example, the <codeph>getLineIndexOfChar()</codeph> method returns
 the line numbers for the 100th and 500th characters in the text field.
 
 <p>The <codeph>myTextField</codeph> text field is defined to wrap and resize as a left-justified text. 
 The <codeph>getLineIndexOfChar()</codeph> method returns the line index for the specified character 
 indexes (100 and 500). This information is then appended after the paragraph. Note that since 
 line index begins with 0, the line index (<codeph>index</codeph>) is increased by 1 to get the line number. 
 Also if the display is resized the line number may change but the information here will stay the same 
 since the method is only invoked once.</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class TextField_getLineIndexOfCharExample extends Sprite 
    {
        public function TextField_getLineIndexOfCharExample()
        {
            var myTextField:TextField = new TextField();
            
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 200;
            myTextField.background = true;  
            myTextField.border = true;
            myTextField.wordWrap = true;
            myTextField.autoSize = TextFieldAutoSize.LEFT;

            myTextField.appendText("The TextField class is used to create display objects for "
                + "text display and input. All dynamic and input text fields in a SWF file" 
                + "are instances of the TextField class. You can use the TextField class "
                + "to perform low-level text rendering. However, in Flex, you typically use "
                + "the Label, Text, TextArea, and TextInput controls to process text. "  
                + "You can give a text field an instance name in the Property inspector "
                + "and use the methods and properties of the TextField class to manipulate it with ActionScript. "
                + "TextField instance names are displayed in the Movie Explorer and in the Insert "
                + "Target Path dialog box in the Actions panel.\n\n");

            var index:int = myTextField.getLineIndexOfChar(100);
            myTextField.appendText("100th character is in line: " +  (index + 1) + "\n");
            index = myTextField.getLineIndexOfChar(500);
            myTextField.appendText("500th character is in line: " + (index + 1));

            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineLength"><apiName>getLineLength</apiName><shortdesc>
	 Returns the number of characters in a specific text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.getLineLength, getLineLength
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The line number specified is out of range.
	 
 	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The number of characters in the line.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The line number for which you want the length.
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Returns the number of characters in a specific text line.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns the number of characters in a specific text line.
	 
	 </apiDesc><example conref="examples\TextField_getLineLengthExample.as"> In the following example, once the user selects a line, its line length (number of characters) is
 displayed in a separate text field. 
 <p>As an illustration, <codeph>myTextField</codeph> text field, which displays the text that will be counted, is set to 
 <codeph>INPUT</codeph>, meaning users can actually change the lines or add lines between the lines or at the end. 
 (There is an empty line created by using line break (<codeph>\n</codeph>) at the end of the last line.) The <codeph>countLines</codeph>
 text field, where the result of counting the line length is displayed, is set below <codeph>myTextField</codeph> 
 text field and its text is not selectable. When the user clicks on a line in the <codeph>myTextField</codeph> text field, 
 the <codeph>clickHandler()</codeph> method is invoked.</p>
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getLineIndexAtPoint()</codeph> method returns the line index of 
 where the user clicked, by using the <codeph>localX</codeph> and <codeph>localY</codeph> coordinates of the mouse click. 
 The <codeph>if</codeph> statement checks to see if the use has clicked on a character. If so, the 
 <codeph>getLineLength()</codeph> method, using the index of line, returns the number of characters in the line.
 Note that the empty lines between the lines include the second line break (<codeph>\n</codeph>) and have 
 a count of 1 character, while the line after the last line has a 0 count. Spaces also count as one character. 
 The users can write a new line or changes a line and get the character count of the line by clicking on it. 
 If text wrap is used and the screen is resized, the line index could change.</p>
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class TextField_getLineLengthExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var countLines:TextField = new TextField();  

        public function TextField_getLineLengthExample() {
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 350;
            myTextField.height = 150;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.type = TextFieldType.INPUT;
            
            myTextField.appendText("Click on the lines to count its number of characters:\n\n");
            myTextField.appendText("This is a short line.\n");
            myTextField.appendText("This is a longer line than the last line.\n\n");
            myTextField.appendText("This one is even longer than the one before. It has two sentences.\n");

            this.addChild(myTextField);

            countLines.border = true;
            countLines.x = 10;
            countLines.y = 180;
            countLines.height = 30;
            countLines.width = 200;
            countLines.background = true;
            countLines.selectable = false;

           this.addChild(countLines);    

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
        }

        private function clickHandler(e:MouseEvent):void {
            var index:int = myTextField.getLineIndexAtPoint(e.localX, e.localY);
        
            if (index != -1) {
            var lenght:int = myTextField.getLineLength(index);

            countLines.text = "Number of characters in the line is: " + lenght.toString();
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
	 Returns metrics information about a given text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.getLineMetrics, getLineMetrics
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The line number specified is out of range.
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>A TextLineMetrics object.
	 </apiDesc><apiOperationClassifier>flash.text:TextLineMetrics</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The line number for which you want metrics information.
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Returns metrics information about a given text line.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns metrics information about a given text line.
	 
	 </apiDesc><example conref="examples\TextField_getLineMetricsExample.as"> The following example displays some line metrics values for two differently formatted lines of text.
 
 <p>The text appended is two lines from the <i>Song of Myself</i> by Walt Whitman. A new TextFormat object 
 (<codeph>newFormat</codeph>) is used to set the format of the second line. The first line holds the
 default format. The <codeph>getLineMetrics()</codeph> method returns a <codeph>TextLineMetrics</codeph> 
 object for a specific line. (Line index begins with 0.) Using <codeph>metrics1</codeph> and <codeph>metrics2</codeph> 
 TextLineMetrics objects for the line one and two, respectively, the ascent, descent, height, and weight 
 value of the line are retrieved and displayed. The result numbers are converted to 
 string but not rounded. Note that this value is for the line and not a specific character. It 
 reflects the range of characters for a line. For example, if a line has different characters with 
 different height formats, the character with the highest height will determine the value. This also 
 means that if one of the character's format is changes, some of the metrics values could also change.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextLineMetrics;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.TextFormat;
 
    public class TextField_getLineMetricsExample extends Sprite {

        public function TextField_getLineMetricsExample() {
            var myTextField:TextField = new TextField();
            var newFormat:TextFormat = new TextFormat(); 

            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.wordWrap = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            myTextField.appendText("A child said What is the grass? fetching it to me with full hands;\n");
            myTextField.appendText("How could I answer the child? I do not know what it is any more than he.\n\n");

            newFormat.size = 14;
            newFormat.font = "Arial";
            newFormat.italic = true;
            myTextField.setTextFormat(newFormat, 67, 139);
               
            var metrics1:TextLineMetrics = myTextField.getLineMetrics(0);
             
            myTextField.appendText("Metrics ascent for the line 1 is: " + metrics1.ascent.toString() + "\n");
            myTextField.appendText("Metrics descent is: " + metrics1.descent.toString() + "\n");
            myTextField.appendText("Metrics height is: " + metrics1.height.toString() + "\n"); 
            myTextField.appendText("Metrics width is: " + metrics1.width.toString() + "\n\n");

            var metrics2:TextLineMetrics = myTextField.getLineMetrics(1);
             
            myTextField.appendText("Metrics ascent for the line 2 is: " + metrics2.ascent.toString() + "\n");
            myTextField.appendText("Metrics descent is: " + metrics2.descent.toString() + "\n");
            myTextField.appendText("Metrics height is: " + metrics2.height.toString() + "\n"); 
            myTextField.appendText("Metrics width is: " + metrics2.width.toString() + "\n");

            addChild(myTextField);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>flash.text.TextLineMetrics</linktext></link><link href="flash.text.xml#TextLineMetrics"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc>
	 Returns the character index of the first character in the line that 
	 the lineIndex parameter specifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The line number specified is out of range.
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The zero-based index value of the first character in the line.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the line (for example, the first line is 0,
	 the second line is 1, and so on).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>The zero-based index value of the first character in the line.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns the character index of the first character in the line that 
	 the <codeph>lineIndex</codeph> parameter specifies.
	 
	 </apiDesc><example conref="examples\TextField_getLineOffsetExample.as"> The following example checks for the first character of the line 4, which 
 will change if the screen (and the text field) is resized.
 
 <p>The <codeph>myTextField</codeph> text field is set to word wrap. The <codeph>countField</codeph> 
 text field will display the first character of line 4. When the user clicks on the <codeph>myTextField</codeph> 
 text field, the <codeph>clickHandler()</codeph> method is invoked.</p>
 
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getLineOffset()</codeph> method returns 
 the index of the first character in the line index 3, which is the fourth line of the text. 
 (First line has a 0 index.) The <codeph>charAt()</codeph> method is used to get the character 
 using the index of the first character of the fourth line. The <codeph>countField</codeph> text field 
 content is updated with this information using the <codeph>text</codeph> property of the 
 <codeph>countField</codeph> text field. Using the <codeph>countField.text</codeph> property means that 
 each time after the click the content of the <codeph>countField</codeph> text field will be overwritten. 
 If the user resizes the display, the content will wrap and the first character of the line 4 could 
 change. By clicking again on the <codeph>myTextField</codeph> field, the content of <codeph>countField</codeph> 
 text field is updated with the new first character for the fourth line.</p>    
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;

    public class TextField_getLineOffsetExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var countField:TextField = new TextField();
        
        public function TextField_getLineOffsetExample() {
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 150;
            myTextField.height = 300;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.wordWrap = true;

            countField.height = 20;
            countField.width = 200;
            countField.x = 10;
            countField.y = 320;
            countField.selectable = false;
            
            myTextField.appendText("The TextField class is used to create display objects for "
                        + "text display and input. All dynamic and input text fields in a SWF file " 
                        + "are instances of the TextField class. You can use the TextField class "
                        + "to perform low-level text rendering. However, in Flex, you typically use "
                        + "the Label, Text, TextArea, and TextInput controls to process text. "  
                        + "You can give a text field an instance name in the Property inspector "
                        + "and use the methods and properties of the TextField class to manipulate it with ActionScript.");

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
        
            this.addChild(myTextField);
            this.addChild(countField);
        }
    
            private function clickHandler(e:MouseEvent):void {
                var c:String;
                var index:int;
                
                index = myTextField.getLineOffset(3);
                c = myTextField.text.charAt(index);
                countField.text = "The first character of line 4 is: " + c;
            }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineText"><apiName>getLineText</apiName><shortdesc>
	 Returns the text of the line specified by the lineIndex parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The line number specified is out of range.
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The text string contained in the specified line.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the line (for example, the first line is 0,
	 the second line is 1, and so on).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>The text string contained in the specified line.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns the text of the line specified by the <codeph>lineIndex</codeph> parameter.
	 
	 </apiDesc><example conref="examples\TextField_getLineTextExample.as"> In the following example, the line numbers of all the instances of the word "love" used in Shakespeare's 
 sonnet are found and displayed.
 
 <p>The <codeph>poem</codeph> text field is set to fit automatically the text and to resize as a left-justified text.
 The <codeph>wordWrap</codeph> property is set to <codeph>false</codeph>, so the lines of the poem would not wrap, though 
 normally when using the <codeph>autoSize</codeph> property, this should not be a problem. The <codeph>for</codeph> loop iterates through the lines 
 of the sonnet using the property <codeph>numLines</codeph> of the text field. The <codeph>getLineText()</codeph> method 
 returns the content of the line as a string. (Note that the <codeph>numLines</codeph> property returns the number 
 of lines starting with line 1, while for the <codeph>getLineText()</codeph> method the line number begins with 0.) 
 Using the regular expression pattern (<codeph>/love/i</codeph>), the <codeph>if</codeph> statement looks for any substring 
 of the word in upper or lowercase. If the pattern is found, the <codeph>search</codeph> method returns the index of 
 the first matching substring, otherwise it returns <codeph>-1</codeph> (if there is no match). The line number where 
 "love" was found (<codeph>(i + 1)</codeph>) is then placed in the string <codeph>lineResult</codeph>. The string method converts 
 the number argument (<codeph>(i + 1)</codeph>) to a string as long as there is another argument that is a string (" "). 
 The line result of the search will include lines with the words "loved" or "Love's." If the string "Love was found in lines:" 
 was appended before the <codeph>for</codeph> loop, the word "Love" in this line would also have been included.</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
 
    public class TextField_getLineTextExample extends Sprite {
           
        public function TextField_getLineTextExample() {
           var poem:TextField = new TextField();
           var lineResult:String = ""; 
           var pattern:RegExp = /love/i;

            poem.x = 10;
            poem.y = 10;
            poem.background = true;
            poem.wordWrap = false;
            poem.autoSize = TextFieldAutoSize.LEFT;
            
            poem.text = "Let me not to the marriage of true minds\n"
                              + "Admit impediments. love is not love\n"
                              + "Which alters when it alteration finds\n"
                              + "Or bends with the remover to remove:\n"
                              + "O no! it is an ever-fixed mark\n" 
                              + "That looks on tempests and is never shaken;\n"
                              + "It is the star to every wandering bark,\n"
                              + "Whose worth's unknown, although his height be taken.\n"
                              + "Love's not Time's fool, though rosy lips and cheeks\n"
                              + "Within his bending sickle's compass come:\n"
                              + "Love alters not with his brief hours and weeks,\n"
                              + "But bears it out even to the edge of doom.\n"
                              + "If this be error and upon me proved,\n"
                              + "I never writ, nor no man ever loved.\n\n";

            for (var i:int = 0; i &lt; poem.numLines; i++) {

                var s:String = poem.getLineText(i);
                        
                if(s.search(pattern) != -1) {
                    lineResult += (i + 1) + " ";
                }
            }

            poem.appendText("Love was found in lines: " + lineResult);
             
            this.addChild(poem);                      
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc>
	 Given a character index, returns the length of the paragraph containing the given character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The character index specified is out of range.
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns the number of characters in the paragraph.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the character (for example, the first character is 0,
	 the second character is 1, and so on).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>The zero-based index value of the character.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Given a character index, returns the length of the paragraph containing the given character.
	 The length is relative to the first character in the paragraph (as returned by
	 <codeph>getFirstCharInParagraph()</codeph>), not to the character index passed in.
	 
	 </apiDesc><example conref="examples\TextField_getParagraphLengthExample.as"> In the following example, when a user selects a paragraph, the paragraph's length and number
 of "s" characters in the paragraph are displayed in a separate text field.
 
 <p>The <codeph>myTextField</codeph> text field displays the paragraphs that the user will select. 
 When the user click on the text field, the <codeph>MouseEvent.CLICK</codeph> event is dispatched, and 
 the <codeph>clickHandler()</codeph> method is called. The paragraph length and number of "s" characters 
 will appear in <codeph>countField</codeph> text field, which is placed below <codeph>myTextField</codeph> text field.</p> 
 
 <p>In the <codeph>clickHandler()</codeph> method, the <codeph>getCharIndexAtPoint()</codeph> method returns the character's 
 index based on the <codeph>localX</codeph> and <codeph>localY</codeph> coordinates of the mouse click. The first <codeph>if</codeph> 
 statement checks to see if the use has clicked on a character. The <codeph>getFirstCharInParagraph()</codeph> method, 
 uses this index to return the index of the first character in the same paragraph. The paragraph length returned by 
 <codeph>getParagraphLength()</codeph> method is used with the index of the first character in the paragraph to determine the 
 index for the end of the paragraph. A <codeph>for</codeph> loop iterates through the paragraph looking for the number of "s" 
 characters.</p>  
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;

    public class TextField_getParagraphLengthExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var countField:TextField = new TextField();

        public function TextField_getParagraphLengthExample() {
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.wordWrap = true;
            myTextField.width = 300;
            myTextField.height = 280;
            
            myTextField.appendText("The TextField class is used to create display objects for "
                        + "text display and input. All dynamic and input text fields in a SWF file" 
                        + "are instances of the TextField class. You can use the TextField class "
                        + "to perform low-level text rendering. However, in Flex, you typically use "
                        + "the Label, Text, TextArea, and TextInput controls to process text. "  
                        + "You can give a text field an instance name in the Property inspector "
                        + "and use the methods and properties of the TextField class to manipulate it with ActionScript. "
                        + "TextField instance names are displayed in the Movie Explorer and in the Insert "
                        + "Target Path dialog box in the Actions panel.\n\n"  
                        + "To create a text field dynamically, use the TextField() constructor.\n\n"
                        + "The methods of the TextField class let you set, select, and manipulate "  
                        + "text in a dynamic or input text field that you create during authoring or at runtime.");

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            
            countField.x = 10;
            countField.y = 300;
            countField.height = 50;
            countField.width = 250;
            countField.background = true;
            countField.selectable = false;

            this.addChild(myTextField);
            this.addChild(countField);
        }

        private function clickHandler(e:MouseEvent):void {
            var index:int = myTextField.getCharIndexAtPoint(e.localX, e.localY);
            
            if(index != -1) {
                var beginParag:int = myTextField.getFirstCharInParagraph(index);
                var paragLength:int = myTextField.getParagraphLength(index);
                var endParag:int = beginParag + paragLength;
                var sCount:uint = 0;

                for (var i:int = beginParag; i &lt;= endParag; i++) {
                    if ((myTextField.text.charAt(i) == "s") || (myTextField.text.charAt(i) == "S")) {
                        sCount++; 
                    }

                countField.text = "Paragraph length is: " + paragLength.toString() + "\n" 
                        + "Number of 's' characters in the paragraph: " + sCount.toString();
                }
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextField/getFirstCharInParagraph()"><linktext>flash.text.TextField.getFirstCharInParagraph()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc>
	 Returns a TextFormat object that contains formatting information for the range of text that the
	 beginIndex and endIndex parameters specify.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.getTextFormat, getTextFormat
	 
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>beginIndex</codeph> or <codeph>endIndex</codeph> specified is out of range.
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The TextFormat object that represents the formatting properties for the specified text.
	 
	 </apiDesc><apiOperationClassifier>flash.text:TextFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>Optional; an integer that specifies the starting location of a range of text within the text field.
	 
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>Optional; an integer that specifies the position of the first character after the desired
     text span. As designed, if you specify <codeph>beginIndex</codeph> and <codeph>endIndex</codeph> values, 
     the text from <codeph>beginIndex</codeph> to <codeph>endIndex-1</codeph> is read. 
	 
 	 </apiDesc></apiParam><apiTipTexts><apiTipText>Returns a TextFormat object.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Returns a TextFormat object that contains formatting information for the range of text that the
	 <codeph>beginIndex</codeph> and <codeph>endIndex</codeph> parameters specify. Only properties 
	 that are common to the entire text specified are set in the resulting TextFormat object. 
	 Any property that is <i>mixed</i>, meaning that it has different values
     at different points in the text, has a value of <codeph>null</codeph>.
	 
	 <p>If you do not specify
	 values for these parameters, this method is applied to all the text in the text field.  </p>
	 
	 <p>The following table describes three possible usages:</p>
	 
	 <adobetable class="innertable">
	   
	   
	 	 
	   
	 <tgroup cols="2"><thead><row><entry>Usage</entry><entry>Description</entry></row></thead><tbody><row>
	     <entry><codeph>my_textField.getTextFormat()</codeph></entry>
	 	   <entry>Returns a TextFormat object containing formatting information for all text in a text field.
	 Only properties that are common to all text in the text field are set in the resulting TextFormat
	 object. Any property that is <i>mixed</i>, meaning that it has different values at different
     points in the text, has a value of <codeph>null</codeph>.</entry>
	   </row><row>
	     <entry><codeph>my_textField.getTextFormat(beginIndex:Number)</codeph></entry>
	     <entry>Returns a TextFormat object containing a copy of the text format of the character at the
	 <codeph>beginIndex</codeph> position.</entry>
	   </row><row>
	     <entry><codeph>my_textField.getTextFormat(beginIndex:Number,endIndex:Number)</codeph></entry>
	     <entry>Returns a TextFormat object containing formatting information for the span of
	 text from <codeph>beginIndex</codeph> to <codeph>endIndex-1</codeph>. Only properties that are common
	 to all of the text in the specified range are set in the resulting TextFormat object. Any property
	 that is mixed (that is, has different values at different points in the range) has its value set to <codeph>null</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example>Please see the <xref href="TextField.html#getFirstCharInParagraph()">getFirstCharInParagraph()</xref> or 
     <xref href="TextField.html#setTextFormat()">setTextFormat()</xref> method example for illustrations of how 
     to use the <codeph>getTextFormat()</codeph> method. 
	 </example></apiOperationDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link><link href="flash.text.xml#TextField/defaultTextFormat"><linktext>flash.text.TextField.defaultTextFormat</linktext></link><link href="flash.text.xml#TextField/setTextFormat()"><linktext>flash.text.TextField.setTextFormat()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Returns true if an embedded font is available with the specified fontName and fontStyle
	 where Font.fontType is flash.text.FontType.EMBEDDED.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>The <codeph>fontStyle</codeph> specified is not a member of <codeph>flash.text.FontStyle</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if a compatible embedded font is available, otherwise <codeph>false</codeph>.
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The name of the embedded font to check.
	 </apiDesc></apiParam><apiParam><apiItemName>fontStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Specifies the font style to check.  Use <codeph>flash.text.FontStyle</codeph>
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns true if an embedded font is available with the specified <codeph>fontName</codeph> and <codeph>fontStyle</codeph>
	 where <codeph>Font.fontType</codeph> is <codeph>flash.text.FontType.EMBEDDED</codeph>.  Starting with Flash Player 10,
	 two kinds of embedded fonts can appear in a SWF file.  Normal embedded fonts are only used with 
	 TextField objects.
	 CFF embedded fonts are only used with the flash.text.engine classes.  The two types are distinguished by the 
	 <codeph>fontType</codeph> property of the <codeph>Font</codeph> class, as returned by the <codeph>enumerateFonts()</codeph> function.
	 
	 <p>TextField cannot use a font of type <codeph>EMBEDDED_CFF</codeph>. If <codeph>embedFonts</codeph> is set to <codeph>true</codeph> 
	 and the only font available at run time with the specified name and style is of type <codeph>EMBEDDED_CFF</codeph>, 
	 Flash Player fails to render the text, as if no embedded font were available with the specified name and style.</p>
	 
	 <p>If both <codeph>EMBEDDED</codeph> and <codeph>EMBEDDED_CFF</codeph> fonts are available with the same name and style, the <codeph>EMBEDDED</codeph>
	 font is selected and text renders with the <codeph>EMBEDDED</codeph> font.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc>
	 Replaces the current selection with the contents of the value parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.replaceSelectedText, replaceSelectedText
 	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>This method cannot be used on a text field with a style sheet.
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The string to replace the currently selected text.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Replaces the current selection with the contents of the value parameter.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Replaces the current selection with the contents of the <codeph>value</codeph> parameter.
	 The text is inserted at the position of the current selection, using the current default character
	 format and default paragraph format. The text is not treated as HTML.
	 
	 <p>You can use the <codeph>replaceSelectedText()</codeph> method to insert and delete text without disrupting
	 the character and paragraph formatting of the rest of the text.</p>
     <p><b>Note:</b> This method does not work if a style sheet is applied to the text field.</p>
     
	 
	 </apiDesc><example conref="examples\TextField_replaceSelectedTextExample.as"> In the following example, the user erases some text from the first text field
 by selecting it and replaces a selected text in the second text field with "NEW TEXT" string.
 
 <p>Two different TextField objects are created and event listeners are added for the 
 <codeph>MouseEvent.MOUSE_UP</codeph> events. Mouse up occurs when the user releases the mouse, 
 an event that normally happens after a selection of text is made. Note that the default 
 setting for a text field is for its text to be selected.</p>
 
 <p>In the <codeph>mouseHandler1()</codeph> method, when a user release a mouse in the 
 <codeph>myTextField1</codeph> text field, the text is erased by replacing it with an empty 
 string. This can continue until all the text is erased. In the <codeph>mouseHandler2()</codeph> 
 method, when a user selects some text in <codeph>myTextField2</codeph> text field, properties 
 <codeph>selectionBeginIndex</codeph> and <codeph>selectionEndIndex</codeph> are checked to see if 
 any character was selected. (The <codeph>selectionBeginIndex</codeph> and <codeph>selectionEndIndex</codeph> 
 properties don't have the same value if some text were selected.) The selected text is then replaced 
 with "NEW TEXT" string. This can continue until all the original text of the second text field is 
 replaced with the "NEW TEXT" string.</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;    
    import flash.events.MouseEvent;

    public class TextField_replaceSelectedTextExample extends Sprite {
        private var myTextField1:TextField = new TextField();
        private var myTextField2:TextField = new TextField();
        
        public function TextField_replaceSelectedTextExample() {
            myTextField1.x = 10;
            myTextField1.width = 300;
            myTextField1.height = 50; 
            myTextField1.background = true; 
            myTextField1.border = true;
            myTextField1.text = "Select the text you want to remove from the line.";
            
            myTextField2.x = 10;
            myTextField2.y = 60;
            myTextField2.width = 300;
            myTextField2.height = 50;
            myTextField2.background = true;
            myTextField2.border = true;
            myTextField2.text = "Select the text you want to replace with NEW TEXT.";
            
            myTextField1.addEventListener(MouseEvent.MOUSE_UP, mouseHandler1);
            myTextField2.addEventListener(MouseEvent.MOUSE_UP, mouseHandler2);
            
            this.addChild(myTextField1);
            this.addChild(myTextField2);
        }
        
        private function mouseHandler1(e:MouseEvent):void {
            myTextField1.replaceSelectedText("");
        }

        private function mouseHandler2(e:MouseEvent):void {
            if(myTextField2.selectionBeginIndex != myTextField2.selectionEndIndex) {
                myTextField2.replaceSelectedText("NEW TEXT");    
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:replaceText"><apiName>replaceText</apiName><shortdesc>
	 Replaces the range of characters that the beginIndex and
	 endIndex parameters specify with the contents
     of the newText parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
 	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>This method cannot be used on a text field with a style sheet.
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the start position of the replacement range.
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index position of the first character after the desired
     text span.
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The text to use to replace the specified range of characters.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Replaces a range of characters.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Replaces the range of characters that the <codeph>beginIndex</codeph> and
	 <codeph>endIndex</codeph> parameters specify with the contents
     of the <codeph>newText</codeph> parameter. As designed, the text from 
     <codeph>beginIndex</codeph> to <codeph>endIndex-1</codeph> is replaced.  
     <p><b>Note:</b> This method does not work if a style sheet is applied to the text field.</p>
     
	 </apiDesc><example conref="examples\TextField_replaceTextExample.as"> The following example uses the <codeph>replaceText()</codeph> method to delete, replace and insert 
 some text into a text field.
 
 <p>The <codeph>outputText</codeph> text field is set to automatically fit the text and to resize as a left-justified text. 
 With the first <codeph>replaceText()</codeph> method call, the first line ("This is the wrong heading") 
 is replaced with "THIS IS THE HEADING FOR EVERYONE." With the second method call, the text "CORRECT" 
 is inserted between "THE" and "HEADING." With the third method call, the words "FOR EVERYONE" are deleted. 
 Note that with each call to the method <codeph>appendText()</codeph>, the current text's begin and end index 
 are changed. Here, only the final text (after the changes have been made) will display.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    
    public class TextField_replaceTextExample extends Sprite {

        public function TextField_replaceTextExample() {
            var outputText:TextField = new TextField();

            outputText.x = 10;
            outputText.y = 10;
            outputText.background = true;
            outputText.autoSize = TextFieldAutoSize.LEFT;
            
            outputText.appendText("This is the wrong heading");
            outputText.appendText("\n\n"); 
            outputText.appendText("This is the body of the text.");

            outputText.replaceText(0, 25, "THIS IS THE HEADING FOR EVERYONE");

            outputText.replaceText(12, 12, "CORRECT ");
            
            outputText.replaceText(27, 40, "");
            
           this.addChild(outputText);
         }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:setSelection"><apiName>setSelection</apiName><shortdesc>
	 Sets as selected the text designated by the index values of the
	 first and last characters, which are specified with the beginIndex
	 and endIndex parameters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Need to add an example.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the first character in the selection
	 (for example, the first character is 0, the second character is 1, and so on).
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the last character in the selection.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Sets a new text selection.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Sets as selected the text designated by the index values of the
	 first and last characters, which are specified with the <codeph>beginIndex</codeph>
	 and <codeph>endIndex</codeph> parameters. If the two parameter values are the same,
	 this method sets the insertion point, as if you set the 
	 <codeph>caretIndex</codeph> property.
	 
	 </apiDesc><example conref="examples\TextField_setSelectionExample.as"> In the following example, when the user clicks anywhere in the text field a predefined range 
 of text will be selected (highlighting the words "TEXT IN ALL CAPS").
 
 <p>Two event listeners for the <codeph>myTextField</codeph> text field respond to the user's mouse clicks or mouse up events.
 Mouse up will occur when the user releases the mouse, an event that normally happens after a selection of text is made. 
 Note that the default setting for a text field is for its text to be selected. When some text is clicked, 
 <codeph>clickHandler()</codeph> method is invoked. When some text is selected and the mouse is released, 
 <codeph>mouseUpHandler()</codeph> method is invoked.</p>
 
 <p>In both <codeph>clickHandler()</codeph> and <codeph>mouseUpHandler()</codeph> methods, the <codeph>setSelection()</codeph> method
 sets only the characters between indexes 54 and 70 (TEXT IN ALL CAPS) to be selected.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    
    public class TextField_setSelectionExample extends Sprite
    {
        private var myTextField:TextField = new TextField();

        public function TextField_setSelectionExample() {
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.text = "No matter where you click on this text field only the TEXT IN ALL CAPS is selected.";

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            myTextField.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            this.addChild(myTextField);
        }

        private function clickHandler(event:MouseEvent):void {
            myTextField.setSelection(54, 70);
        }

        private function mouseUpHandler(event:MouseEvent):void {
            myTextField.setSelection(54, 70);
        }

    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc>
	 Applies the text formatting that the format parameter specifies to the specified text in a text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.setTextFormat, setTextFormat
 	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>This method cannot be used on a text field with a style sheet.
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>beginIndex</codeph> or <codeph>endIndex</codeph> specified is out of range.
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flash.text:TextFormat</apiOperationClassifier><apiDesc>A TextFormat object that contains character and paragraph formatting information.
	 
     </apiDesc></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>Optional; an integer that specifies the zero-based index position specifying the 
     first character of the desired range of text.
	 
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>Optional; an integer that specifies the first character after the desired text span.
     As designed, if you specify <codeph>beginIndex</codeph> and <codeph>endIndex</codeph> values, 
     the text from <codeph>beginIndex</codeph> to <codeph>endIndex-1</codeph> is updated.  
	 
	 <p>
	 <adobetable class="innertable">
	   
	   
	  
	   
	   
	 
	 <tgroup cols="2"><thead><row><entry>Usage</entry><entry>Description</entry></row></thead><tbody><row>
	     <entry><codeph>my_textField.setTextFormat(textFormat:TextFormat)</codeph></entry>
	 
	     <entry>Applies the properties of <codeph>textFormat</codeph> to all text in the text
	 field.</entry>
	   </row><row>
	 
	 <entry><codeph>my_textField.setTextFormat(textFormat:TextFormat, beginIndex:int)</codeph></entry>
	 
	     <entry>Applies the properties of <codeph>textFormat</codeph> to the text starting with the
	 <codeph>beginIndex</codeph> position.</entry>
	   </row><row>
	     <entry><codeph>my_textField.setTextFormat(textFormat:TextFormat, beginIndex:int,
	 						endIndex:int)</codeph></entry>
	 	   <entry>Applies the properties of the <codeph>textFormat</codeph> parameter to the span of
	 text from the <codeph>beginIndex</codeph> position to the <codeph>endIndex-1</codeph> position.</entry>
	   </row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p>Notice that any text inserted manually by the user, or replaced by the
	 <codeph>replaceSelectedText()</codeph> method, receives the default text field formatting for new
	 text, and not the formatting specified for the text insertion point. To set a text field's
	 default formatting for new text, use the <codeph>defaultTextFormat</codeph> property.</p>
	 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Applies text formatting.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Applies the text formatting that the <codeph>format</codeph> parameter specifies to the specified text in a text field.
	 The value of <codeph>format</codeph> must be a TextFormat object that specifies the
	 desired text formatting changes. Only the non-null properties of <codeph>format</codeph> are applied
	 to the text field. Any property of <codeph>format</codeph> that is set to <codeph>null</codeph> is not
	 applied. By default, all of the properties of a newly created TextFormat object are set to <codeph>null</codeph>.
     <p><b>Note:</b> This method does not work if a style sheet is applied to the text field.</p>
     
	 <p>The <codeph>setTextFormat()</codeph> method changes the text formatting applied to a range of
	 characters or to the entire body of text in a text field. To apply the properties of format to all text in the text
	 field, do not specify values for <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>. To apply the 
	 properties of the format to a range of text, specify values for the <codeph>beginIndex</codeph> and 
	 the <codeph>endIndex</codeph> parameters. You can use the <codeph>length</codeph> property to determine 
	 the index values.</p>
	 
	 <p>The two types of formatting information in a TextFormat object are
	 character level formatting and paragraph level formatting.
	 Each character in a text field can have its own character formatting
	 settings, such as font name, font size, bold, and italic.</p>
	 
	 <p>For paragraphs, the first character of the paragraph is examined for the paragraph formatting
	 settings for the entire paragraph. Examples of paragraph formatting settings are left margin,
	 right margin, and indentation.</p>
	 
	 <p>Any text inserted manually by the user, or replaced by the
	 <codeph>replaceSelectedText()</codeph> method, receives the default text field formatting for new text,
	 and not the formatting specified for the text insertion point. To set the default
	 formatting for new text, use <codeph>defaultTextFormat</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextField_setTextFormatExample.as"> In the following example, when the text is clicked, a defined range of text, "TEXT IN ALL CAPS," switches
 format between the default text format and the new format.
 
 <p>An event listener for the <codeph>myTextField</codeph> text field is added to respond to the mouse clicks by invoking
 the <codeph>clickHandler()</codeph> method. In the <codeph>clickHandler()</codeph> method, the <codeph>getTextFormat()</codeph> 
 method returns the current format of a character (index 55) from the intended range of the text, which is then placed 
 in the <codeph>currentTextFormat</codeph> TextFormat object. The <codeph>if</codeph> statement checks the <codeph>currentTextFormat</codeph> 
 text format to see if the character in the range is using the new format (font point is set to 18). If not, the new format changes 
 the size to 18 point, color to red, and applies underline and italics to the range of text between 54-70 (TEXT IN ALL CAPS). 
 If the character in the range is using the new format, the format of the range is set back to the default (original) 
 format of the text field.</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFormat;  
    import flash.text.TextFieldAutoSize;  
    import flash.events.MouseEvent;

    public class TextField_setTextFormatExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var newFormat:TextFormat = new TextFormat();
        
        public function TextField_setTextFormatExample() {
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.selectable = false;
            myTextField.background = true;
            myTextField.text = "No matter where you click on this text field only the TEXT IN ALL CAPS changes format.";

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);

            newFormat.color = 0xFF0000;
            newFormat.size = 18;
            newFormat.underline = true;
            newFormat.italic = true;
                
            this.addChild(myTextField);
        }

        private function clickHandler(event:MouseEvent):void {
            var currentTextFormat:TextFormat = myTextField.getTextFormat(55);
            
            if(currentTextFormat.size != 18) {
                myTextField.setTextFormat(newFormat, 54, 70);
            }
            else {
                myTextField.setTextFormat(myTextField.defaultTextFormat);
            }    
        }    
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link><link href="flash.text.xml#TextField/defaultTextFormat"><linktext>flash.text.TextField.defaultTextFormat</linktext></link></related-links></apiOperation><apiValue id="flash.text:TextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc>
	When set to true and the text field is not in focus, Flash Player highlights the 
	selection in the text field in gray.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField object, built-in class
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
    
	</apiDefaultValue></apiValueDef><apiDesc>
	When set to <codeph>true</codeph> and the text field is not in focus, Flash Player highlights the 
	selection in the text field in gray. When set to <codeph>false</codeph> and the text field is not in
	focus, Flash Player does not highlight the selection in the text field.
	
    </apiDesc><example conref="examples\TextField_alwaysShowSelection.as"> Compile and run the following file. When you run the file, drag to select text 
 in each of the two text fields, and notice the difference in selection highlighting when you 
 select text in the two text fields (changing focus):
<codeblock>

    package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_alwaysShowSelection extends Sprite {
        public function TextField_alwaysShowSelection() {
            var label1:TextField = createCustomTextField(0, 20, 200, 20);
            label1.text = "This text is selected.";
            label1.setSelection(0, 9);
            label1.alwaysShowSelection = true;

            var label2:TextField = createCustomTextField(0, 50, 200, 20);
            label2.text = "Drag to select some of this text.";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x; result.y = y;
            result.width = width; result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc>
	 The type of anti-aliasing used for this text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>This example creates two text fields and applies advanced anti-aliasing to the first one
	 only.  It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 10, 10, 300, 30);
	 my_text1.text = "This text uses advanced anti-aliasing.";
	 my_text1.antiAliasType = "advanced";
	 my_text1.border = true;
	 my_text1.embedFonts = true;
	 my_text1.setTextFormat(my_format);
	 
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 10, 50, 300, 30);
	 my_text2.text = "This text uses normal anti-aliasing."
	 my_text2.antiAliasType = "normal";
	 my_text2.border = true;
	 my_text2.embedFonts = true;
	 my_text2.setTextFormat(my_format);
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>The type of anti-aliasing used.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The type of anti-aliasing used for this text field. Use <codeph>flash.text.AntiAliasType</codeph>
	 constants for this property. You can control this setting only if the font is
	 embedded (with the <codeph>embedFonts</codeph> property set to <codeph>true</codeph>). 
	 The default setting is <codeph>flash.text.AntiAliasType.NORMAL</codeph>.
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>flash.text.AntiAliasType.NORMAL</codeph></entry>
	 	<entry>Applies the regular text anti-aliasing. This value matches the type of anti-aliasing that
	 	    Flash Player 7 and earlier versions used.</entry>
	   </row><row>
	   	<entry><codeph>flash.text.AntiAliasType.ADVANCED</codeph></entry>
	 	<entry>Applies advanced anti-aliasing, which makes text more legible. (This feature became
	 	    available in Flash Player 8.) Advanced anti-aliasing allows for high-quality rendering
	 	    of font faces at small sizes. It is best used with applications
	 	    with a lot of small text. Advanced anti-aliasing is not recommended for
	 	    fonts that are larger than 48 points.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link><link href="flash.text.xml#TextField/embedFonts"><linktext>flash.text.TextField.embedFonts</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:autoSize:get"><apiName>autoSize</apiName><shortdesc>
	 Controls automatic sizing and alignment of text fields.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.autoSize, autoSize
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>The <codeph>autoSize</codeph> specified is not a member of flash.text.TextFieldAutoSize.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>Controls automatic sizing and alignment of text fields.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Controls automatic sizing and alignment of text fields.
	 Acceptable values for the <codeph>TextFieldAutoSize</codeph> constants: <codeph>TextFieldAutoSize.NONE</codeph> (the default),
	 <codeph>TextFieldAutoSize.LEFT</codeph>, <codeph>TextFieldAutoSize.RIGHT</codeph>, and <codeph>TextFieldAutoSize.CENTER</codeph>.
	 
	 <p>If <codeph>autoSize</codeph> is set to <codeph>TextFieldAutoSize.NONE</codeph> (the default) no resizing occurs.</p>
	 
	 <p>If <codeph>autoSize</codeph> is set to <codeph>TextFieldAutoSize.LEFT</codeph>, the text is
	 treated as left-justified text, meaning that the left margin of the text field remains fixed and any
	 resizing of a single line of the text field is on the right margin. If the text includes a line break
	 (for example, <codeph>"\n"</codeph> or <codeph>"\r"</codeph>), the bottom is also resized to fit the next
	 line of text. If <codeph>wordWrap</codeph> is also set to <codeph>true</codeph>, only the bottom
	 of the text field is resized and the right side remains fixed.</p>
	 
	 <p>If <codeph>autoSize</codeph> is set to <codeph>TextFieldAutoSize.RIGHT</codeph>, the text is treated as
	 right-justified text, meaning that the right margin of the text field remains fixed and any resizing
	 of a single line of the text field is on the left margin. If the text includes a line break
	 (for example, <codeph>"\n" or "\r")</codeph>, the bottom is also resized to fit the next
	 line of text. If <codeph>wordWrap</codeph> is also set to <codeph>true</codeph>, only the bottom
	 of the text field is resized and the left side remains fixed.</p>
	 
	 <p>If <codeph>autoSize</codeph> is set to <codeph>TextFieldAutoSize.CENTER</codeph>, the text is treated as
	 center-justified text, meaning that any resizing of a single line of the text field is equally distributed
	 to both the right and left margins. If the text includes a line break (for example, <codeph>"\n"</codeph> or 
	 <codeph>"\r"</codeph>), the bottom is also resized to fit the next line of text. If <codeph>wordWrap</codeph> is also
	 set to <codeph>true</codeph>, only the bottom of the text field is resized and the left and
	 right sides remain fixed.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFieldAutoSize"><linktext>flash.text.TextFieldAutoSize</linktext></link><link href="flash.text.xml#TextField/autoSize"><linktext>flash.text.TextField.autoSize</linktext></link><link href="flash.text.xml#TextField/wordWrap"><linktext>flash.text.TextField.wordWrap</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:background:get"><apiName>background</apiName><shortdesc>
	 Specifies whether the text field has a background fill.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.background, background
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue></apiValueDef><apiDesc>
	 Specifies whether the text field has a background fill. If <codeph>true</codeph>, the text field has a
	 background fill. If <codeph>false</codeph>, the text field has no background fill.
	 Use the <codeph>backgroundColor</codeph> property to set the background color of a text field.
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/backgroundColor"><linktext>flash.text.TextField.backgroundColor</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
	 The color of the text field background.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.backgroundColor, backgroundColor, background Color
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 The color of the text field background. The default value is <codeph>0xFFFFFF</codeph> (white). 
	 This property can be retrieved or set, even if there currently is no background, but the 
	 color is visible only if the text field has the <codeph>background</codeph> property set to 
	 <codeph>true</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/background"><linktext>flash.text.TextField.background</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:border:get"><apiName>border</apiName><shortdesc>
	 Specifies whether the text field has a border.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.border, border
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue></apiValueDef><apiDesc>
	 Specifies whether the text field has a border. If <codeph>true</codeph>, the text field has a border.
	 If <codeph>false</codeph>, the text field has no border. Use the <codeph>borderColor</codeph> property 
	 to set the border color.
     
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/borderColor"><linktext>flash.text.TextField.borderColor</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:borderColor:get"><apiName>borderColor</apiName><shortdesc>
	 The color of the text field border.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.borderColor, borderColor
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 The color of the text field border. The default value is <codeph>0x000000</codeph> (black). 
	 This property can be retrieved or set, even if there currently is no border, but the 
	 color is visible only if the text field has the <codeph>border</codeph> property set to 
	 <codeph>true</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/border"><linktext>flash.text.TextField.border</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc>
	 An integer (1-based index) that indicates the bottommost line that is currently visible in
	 the specified text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.bottomScrollV, bottomScrollV
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>An integer that indicates the bottommost line in a text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 An integer (1-based index) that indicates the bottommost line that is currently visible in
	 the specified text field. Think of the text field as a window onto a block of text.
	 The <codeph>scrollV</codeph> property is the 1-based index of the topmost visible line
	 in the window.
	 
	 <p>All the text between the lines indicated by <codeph>scrollV</codeph> and <codeph>bottomScrollV</codeph>
	 is currently visible in the text field.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollV"><linktext>flash.text.TextField.scrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
	 The index of the insertion point (caret) position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>Returns the zero-based index value of the blinking insertion point.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The index of the insertion point (caret) position. If no insertion point is displayed,
     the value is the position the insertion point would be if you restored focus to the field (typically where the 
     insertion point last was, or 0 if the field has not had focus).
	 
	 <p>Selection span indexes are zero-based (for example, the first position is 0,
	 the second position is 1, and so on).</p>
	 
	 
	 </apiDesc><example conref="examples\TextField_caretIndex.as"> In this example, a TextField instance is created and populated with text.
 An event listener is assigned so that when the user clicks on the TextField, the
 <codeph>printCursorPosition</codeph> method is called. In that case, the values of the
 <codeph>caretIndex</codeph>, <codeph>selectionBeginIndex</codeph>, and
 <codeph>selectionEndIndex</codeph> properties are output.
 
 <p>Run this example and try clicking in the TextField to select text. Then click in the field without
 selecting text. When you click in the text without making a selection, the
 <codeph>caretIndex</codeph> property indicates where the insertion point occurs, and the <codeph>selectionBeginIndex</codeph>
 and <codeph>selectionEndIndex</codeph> properties equal the <codeph>caretIndex</codeph> property value.</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_caretIndex extends Sprite {
        public function TextField_caretIndex() {
            var tf:TextField = createCustomTextField(10, 10, 100, 100);
            tf.wordWrap = true;
            tf.type = TextFieldType.INPUT;
            tf.text = "Click in this text field. Compare the difference between clicking without selecting versus clicking and selecting text.";
            tf.addEventListener(MouseEvent.CLICK, printCursorPosition);
        }

        private function printCursorPosition(event:MouseEvent):void {
            var tf:TextField = TextField(event.target);
            trace("caretIndex:", tf.caretIndex);
            trace("selectionBeginIndex:", tf.selectionBeginIndex);
            trace("selectionEndIndex:", tf.selectionEndIndex);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
	 A Boolean value that specifies whether extra white space (spaces, line breaks, and so on)
	 in a text field with HTML text is removed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>textfield, text, HTML
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>A Boolean value that specifies whether extra white space is removed in a text field
	 with HTML text.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 A Boolean value that specifies whether extra white space (spaces, line breaks, and so on)
	 in a text field with HTML text is removed. The default value is <codeph>false</codeph>.
	 The <codeph>condenseWhite</codeph> property only affects text set with
	 the <codeph>htmlText</codeph> property, not the <codeph>text</codeph> property. If you set 
	 text with the <codeph>text</codeph> property, <codeph>condenseWhite</codeph> is ignored.
	 
	 <p>If <codeph>condenseWhite</codeph> is set to <codeph>true</codeph>, use standard HTML commands such as
	 <codeph>&lt;BR&gt;</codeph> and <codeph>&lt;P&gt;</codeph> to place line breaks in the text field.</p>
	 
	 <p>Set the <codeph>condenseWhite</codeph> property before setting the <codeph>htmlText</codeph> property.</p>
	 
	 
	 </apiDesc><example conref="examples\TextField_condenseWhite.as"> The following shows the difference between setting the <codeph>condenseWhite</codeph> 
 setting to <codeph>false</codeph> and setting it to <codeph>true</codeph>:
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_condenseWhite extends Sprite {
        public function TextField_condenseWhite() {
            var tf1:TextField = createCustomTextField(0, 0, 200, 50);
            tf1.condenseWhite = false;
            tf1.htmlText = "keep    on\n\ttruckin'";
            
            var tf2:TextField = createCustomTextField(0, 120, 200, 50);
            tf2.condenseWhite = true;
            tf2.htmlText = "keep    on\n\ttruckin'";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc>
	 Specifies the format applied to newly inserted text, such as text entered by a user or text inserted with the 
	 replaceSelectedText() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.defaultTextFormat, defaultTextFormat
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text:TextFormat</apiValueClassifier><apiException><apiDesc>This method cannot be used on a text field with a style sheet.
	  
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiTipTexts><apiTipText>Specifies the text format for newly inserted text.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Specifies the format applied to newly inserted text, such as text entered by a user or text inserted with the 
	 <codeph>replaceSelectedText()</codeph> method.
	 
	 <p><b>Note:</b> When selecting characters to be replaced with <codeph>setSelection()</codeph> and
	 <codeph>replaceSelectedText()</codeph>, the <codeph>defaultTextFormat</codeph> will be applied only if the 
	 text has been selected up to and including the last character. Here is an example:</p>
	 <pre>
	 var my_txt:TextField new TextField();
	 my_txt.text = "Flash Macintosh version";
	 var my_fmt:TextFormat = new TextFormat();
	 my_fmt.color = 0xFF0000;
	 my_txt.defaultTextFormat = my_fmt;
	 my_txt.setSelection(6,15); // partial text selected - defaultTextFormat not applied
	 my_txt.setSelection(6,23); // text selected to end - defaultTextFormat applied
	 my_txt.replaceSelectedText("Windows version");
	 </pre>
	 
	 <p>When you access the <codeph>defaultTextFormat</codeph> property, the returned TextFormat object has all
	 of its properties defined. No property is <codeph>null</codeph>.</p>
     <p><b>Note:</b> You can't set this property if a style sheet is applied to the text field.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/replaceSelectedText()"><linktext>flash.text.TextField.replaceSelectedText()</linktext></link><link href="flash.text.xml#TextField/getTextFormat()"><linktext>flash.text.TextField.getTextFormat()</linktext></link><link href="flash.text.xml#TextField/setTextFormat()"><linktext>flash.text.TextField.setTextFormat()</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc>
	 Specifies whether the text field is a password text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.password, password
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue><apiTipTexts><apiTipText>Specifies whether input characters are hidden.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Specifies whether the text field is a password text field. If the value of this property is <codeph>true</codeph>,
	 the text field is treated as a password text field and hides the input characters using asterisks instead of the
	 actual characters. If <codeph>false</codeph>, the text field is not treated as a password text field. When password mode
	 is enabled, the Cut and Copy commands and their corresponding keyboard shortcuts will
	 not function.  This security mechanism prevents an unscrupulous user from using the shortcuts to discover
	 a password on an unattended computer.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc>
	 Specifies whether to render by using embedded font outlines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.embedFonts, embedFonts
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue><apiTipTexts><apiTipText>Renders the text field with font outlines or device fonts.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Specifies whether to render by using embedded font outlines. 
	 If <codeph>false</codeph>, Flash Player renders the text field by using
	 device fonts.
	 
	 <p>If you set the <codeph>embedFonts</codeph> property to <codeph>true</codeph> for a text field, 
	 you must specify a font for that text by using the <codeph>font</codeph> property of 
	 a TextFormat object applied to the text field.
	 If the specified font is not embedded in the SWF file, the text is not displayed.</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#Font/enumerateFonts()"><linktext>Font.enumerateFonts()</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc>
	 The type of grid fitting used for this text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>This example shows three text fields that use the
	 different <code>flash.text.GridFitType</code> settings.  It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 9.5, 10, 400, 100);
	 my_text1.text = "this.gridFitType = none";
	 my_text1.embedFonts = true;
	 my_text1.antiAliasType = "advanced";
	 my_text1.gridFitType = "none";
	 my_text1.setTextFormat(my_format);
	 
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 9.5, 40, 400, 100);
	 my_text2.text = "this.gridFitType = advanced";
	 my_text2.embedFonts = true;
	 my_text2.antiAliasType = "advanced";
	 my_text2.gridFitType = "pixel";
	 my_text2.setTextFormat(my_format);
	 
	 var my_text3:TextField = this.createTextField("my_text3", this.getNextHighestDepth(), 9.5, 70, 400, 100);
	 my_text3.text = "this.gridFitType = subpixel";
	 my_text3.embedFonts = true;
	 my_text3.antiAliasType = "advanced";
	 my_text3.gridFitType = "subpixel";
	 my_text3.setTextFormat(my_format);
	 </listing>
	 
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>pixel
     
	 </apiDefaultValue><apiTipTexts><apiTipText>The type of grid fitting used.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The type of grid fitting used for this text field. This property applies only if the
	 <codeph>flash.text.AntiAliasType</codeph> property of the text field is set to <codeph>flash.text.AntiAliasType.ADVANCED</codeph>.
	 
	 <p>The type of grid fitting used determines whether Flash Player forces strong horizontal and 
	 vertical lines to fit to a pixel or subpixel grid, or not at all.</p>
	 
	 <p>For the <codeph>flash.text.GridFitType</codeph> property, you can use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	     <entry><codeph>flash.text.GridFitType.NONE</codeph></entry>
	     <entry>Specifies no grid fitting. Horizontal and vertical lines in the glyphs are not
	         forced to the pixel grid. This setting is recommended for animation or
	         for large font sizes.</entry>
	   </row><row>
	     <entry><codeph>flash.text.GridFitType.PIXEL</codeph></entry>
	     <entry>Specifies that strong horizontal and vertical lines are fit to the
	         pixel grid. This setting works only for left-aligned text fields.
	         To use this setting, the <codeph>flash.dispaly.AntiAliasType</codeph> property of the text field
	 	   must be set to <codeph>flash.text.AntiAliasType.ADVANCED</codeph>.
	 	   This setting generally provides the best legibility for
	         left-aligned text.</entry>
	   </row><row>
	     <entry><codeph>flash.text.GridFitType.SUBPIXEL</codeph></entry>
	     <entry>Specifies that strong horizontal and vertical lines are fit to the subpixel grid on
	         an LCD monitor. To use this setting, the
	         <codeph>flash.text.AntiAliasType</codeph> property of the text field must be set to
	         <codeph>flash.text.AntiAliasType.ADVANCED</codeph>. The <codeph>flash.text.GridFitType.SUBPIXEL</codeph> setting is often good
	 	   for right-aligned or centered
	         dynamic text, and it is sometimes a useful trade-off for animation versus text quality.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc><example conref="examples\TextField_gridFitType.as"> The following example shows three text fields with different 
 settings for the <codeph>gridFitType</codeph> property. When you use this example, 
 notice the difference in legibility for the first two lines. Also note the optimal use of
 <codeph>GridFitType.PIXEL</codeph> for left-aligned text and <codeph>GridFitType.SUBPIXEL</codeph>
 for right-aligned text.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.GridFitType;

    public class gridFitTypeExample extends Sprite
    {
        public function gridFitTypeExample()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Arial";
    format1.size=12;

    var tf1:TextField = createCustomTextField(0,0,format1,"NONE",TextFieldAutoSize.LEFT,GridFitType.NONE);
    
    var tf2:TextField = createCustomTextField(0,30,format1,"PIXEL",TextFieldAutoSize.LEFT,GridFitType.PIXEL);

    var tf3:TextField = createCustomTextField(300,60,format1,"SUBPIXEL",TextFieldAutoSize.RIGHT,GridFitType.SUBPIXEL);

        }
        private function createCustomTextField(x:Number,y:Number,fm:TextFormat,tl:String,tfs:String,gft:String):TextField 
        {
            var result:TextField = new TextField();
            result.x=x;
            result.y=y;
            result.embedFonts=true;
            result.antiAliasType=AntiAliasType.ADVANCED;
            result.text="This text uses a gridFitType of " + tl;
            result.autoSize=tfs;
        result.gridFitType=gft;
            result.setTextFormat(fm);
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#GridFitType"><linktext>flash.text.GridFitType</linktext></link><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:htmlText:get"><apiName>htmlText</apiName><shortdesc>
	 Contains the HTML representation of the text field contents.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.htmlText, htmlText
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>The HTML representation of the text field contents.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Contains the HTML representation of the text field contents. 
	 
	 <p>Flash Player supports the following HTML tags:</p>
	 
	 
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>
	 Tag
	 </entry><entry>
	 Description
	 </entry></row></thead><tbody><row>
	 
	 <entry>
	 Anchor tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;a&gt;</codeph> tag creates a hypertext link and supports the following attributes:
	 <ul>
	 
	 <li>
	 <codeph>target</codeph>: Specifies the name of the target window where you load the page. 
	 Options include <codeph>_self</codeph>, <codeph>_blank</codeph>, <codeph>_parent</codeph>, and 
	 <codeph>_top</codeph>. The <codeph>_self</codeph> option specifies the current frame in the current window, 
	 <codeph>_blank</codeph> specifies a new window, <codeph>_parent</codeph> specifies the parent of the 
	 current frame, and <codeph>_top</codeph> specifies the top-level frame in the current window. 
	 </li>
	 
	 <li>
	 <codeph>href</codeph>: Specifies a URL or an ActionScript <codeph>link</codeph> event.The URL can 
	 be either absolute or relative to the location of the SWF file that 
	 is loading the page. An example of an absolute reference to a URL is 
	 <codeph>http://www.adobe.com</codeph>; an example of a relative reference is 
	 <codeph>/index.html</codeph>. Absolute URLs must be prefixed with 
	 http://; otherwise, Flash Player or AIR treats them as relative URLs. 
	 
	 You can use the <codeph>link</codeph> event to cause the link to execute an ActionScript 
	 function in a SWF file instead of opening a URL. To specify a <codeph>link</codeph> event, use 
	 the event scheme instead of the http scheme in your <codeph>href</codeph> attribute. An example 
	 is <codeph>href="event:myText"</codeph> instead of <codeph>href="http://myURL"</codeph>; when the 
	 user clicks a hypertext link that contains the event scheme, the text field dispatches a 
	 <codeph>link</codeph> TextEvent with its <codeph>text</codeph> property set to "<codeph>myText</codeph>". You can then create an ActionScript 
	 function that executes whenever the link TextEvent is dispatched. 
	 
	 You can also define <codeph>a:link</codeph>, <codeph>a:hover</codeph>, and <codeph>a:active</codeph> 
	 styles for anchor tags by using style sheets.
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 Bold tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;b&gt;</codeph> tag renders text as bold. A bold typeface must be available for the font used.
	 </entry>
	 </row><row>
	 
	 <entry>
	 Break tag
	 </entry>
	 <entry>
	 The <codeph>&lt;br&gt;</codeph> tag creates a line break in the text field. Set the text field to 
	 be a multiline text field to use this tag.
	 </entry>
	 </row><row>
	 
	 <entry>
	 Font tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;font&gt;</codeph> tag specifies a font or list of fonts to display the text.The font tag 
	 supports the following attributes:
	 <ul>
	 
	 <li>
	 <codeph>color</codeph>: Only hexadecimal color (<codeph>#FFFFFF</codeph>) values are supported. 
	 </li>
	 
	 <li>
	 <codeph>face</codeph>: Specifies the name of the font to use. As shown in the following example, 
	 you can specify a list of comma-delimited font names, in which case Flash Player selects the first available 
	 font. If the specified font is not installed on the local computer system or isn't embedded in the SWF file, 
	 Flash Player selects a substitute font. 
	 </li>
	 
	 <li>
	 <codeph>size</codeph>: Specifies the size of the font. You can use absolute pixel sizes, such as 16 or 18, 
	 or relative point sizes, such as +2 or -4. 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 Image tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;img&gt;</codeph> tag lets you embed external image files (JPEG, GIF, PNG), SWF files, and 
	 movie clips inside text fields. Text automatically flows around images you embed in text fields. You 
	 must set the text field to be multiline to wrap text around an image. 
	 
	  <p>The <codeph>&lt;img&gt;</codeph> tag supports the following attributes: </p>
	 
	 <ul>
	 
	 <li>
	 <codeph>src</codeph>: Specifies the URL to an image or SWF file, or the linkage identifier for a movie clip 
	 symbol in the library. This attribute is required; all other attributes are optional. External files (JPEG, GIF, PNG, 
	 and SWF files) do not show until they are downloaded completely. 
	 </li>
	 
	 <li>
	 <codeph>width</codeph>: The width of the image, SWF file, or movie clip being inserted, in pixels. 
	 </li>
	 
	 <li>
	 <codeph>height</codeph>: The height of the image, SWF file, or movie clip being inserted, in pixels. 
	 </li>
	 
	 <li>
	 <codeph>align</codeph>: Specifies the horizontal alignment of the embedded image within the text field. 
     Valid values are <codeph>left</codeph> and <codeph>right</codeph>. The default value is <codeph>left</codeph>. 
	 </li>
	 
	 <li>
	 <codeph>hspace</codeph>: Specifies the amount of horizontal space that surrounds the image where 
	 no text appears. The default value is 8. 
	 </li>
	 
	 <li>
	 <codeph>vspace</codeph>: Specifies the amount of vertical space that surrounds the image where no 
	 text appears. The default value is 8.  
	 </li>
	 
	 <li>
	 <codeph>id</codeph>: Specifies the name for the movie clip instance (created by Flash Player) that contains 
	 the embedded image file, SWF file, or movie clip. This approach is used to control the embedded content with 
	 ActionScript. 
	 </li>
	 
	 <li>
	 <codeph>checkPolicyFile</codeph>: Specifies that Flash Player checks for a URL policy file
	 on the server associated with the image domain. If a policy file exists, SWF files in the domains
	 listed in the file can access the data of the loaded image, for example, by calling the 
	 <codeph>BitmapData.draw()</codeph> method with this image as the <codeph>source</codeph> parameter. For more information,
	 see the "Flash Player Security" chapter in <i>Programming ActionScript 3.0</i>.
	 </li>
	 
	 </ul>
	  <p>Flash displays media embedded in a text field at full size. To specify the dimensions of the media 
	 you are embedding, use the <codeph>&lt;img&gt;</codeph> tag <codeph>height</codeph> and <codeph>width</codeph> 
	 attributes. </p>
	 
	  <p>In general, an image embedded in a text field appears on the line following the 
	 <codeph>&lt;img&gt;</codeph> tag. However, when the <codeph>&lt;img&gt;</codeph> tag 
	 is the first character in the text field, the image appears on the first line of the text field. </p>
	 
	 <p>For AIR content in the application security sandbox, AIR ignores <codeph>img</codeph> tags in 
	 HTML content in ActionScript TextField objects. This is to prevent possible phishing attacks,</p>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 Italic tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;i&gt;</codeph> tag displays the tagged text in italics. An italic typeface must be available 
	 for the font used.
	 </entry>
	 </row><row>
	 
	 <entry>
	 List item tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;li&gt;</codeph> tag places a bullet in front of the text that it encloses. 
	 <b>Note:</b> Because Flash Player and AIR do not recognize ordered and unordered list tags (<codeph>&lt;ol&gt;</codeph> 
	 and <codeph>&lt;ul&gt;</codeph>, they do not modify how your list is rendered. All lists are unordered and all 
	 list items use bullets.
	 </entry>
	 </row><row>
	 
	 <entry>
	 Paragraph tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;p&gt;</codeph> tag creates a new paragraph. The text field must be set to be a multiline 
	 text field to use this tag. 
	 
	 The <codeph>&lt;p&gt;</codeph> tag supports the following attributes:
	 <ul>
	 
	 <li>
	 align: Specifies alignment of text within the paragraph; valid values are <codeph>left</codeph>, <codeph>right</codeph>, <codeph>justify</codeph>, and <codeph>center</codeph>. 
	 </li>
	 
	 <li>
	 class: Specifies a CSS style class defined by a flash.text.StyleSheet object. 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 Span tag
	 </entry>
	 
	 <entry>
	 
	 The <codeph>&lt;span&gt;</codeph> tag is available only for use with CSS text styles. It supports the 
	 following attribute:
	 
	 <ul>
	 
	 <li>
	 class: Specifies a CSS style class defined by a flash.text.StyleSheet object. 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 Text format tag
	 </entry>
	 
	 <entry>
	  <p>The <codeph>&lt;textformat&gt;</codeph> tag lets you use a subset of paragraph formatting 
	 properties of the TextFormat class within text fields, including line leading, indentation, 
	 margins, and tab stops. You can combine <codeph>&lt;textformat&gt;</codeph> tags with the 
	 built-in HTML tags. </p>
	 
	  <p>The <codeph>&lt;textformat&gt;</codeph> tag has the following attributes: </p>
	 <ul>
	 
	 <li>
	 <codeph>blockindent</codeph>: Specifies the block indentation in points; corresponds to 
	 <codeph>TextFormat.blockIndent</codeph>. 
	 </li>
	 
	 <li>
	 <codeph>indent</codeph>: Specifies the indentation from the left margin to the first character 
	 in the paragraph; corresponds to <codeph>TextFormat.indent</codeph>. Both positive and negative 
	 numbers are acceptable. 
	 </li>
	 
	 <li>
	 <codeph>leading</codeph>: Specifies the amount of leading (vertical space) between lines; 
	 corresponds to <codeph>TextFormat.leading</codeph>. Both positive and negative numbers are acceptable. 
	 </li>
	 
	 <li>
	 <codeph>leftmargin</codeph>: Specifies the left margin of the paragraph, in points; corresponds 
	 to <codeph>TextFormat.leftMargin</codeph>. 
	 </li>
	 
	 <li>
	 <codeph>rightmargin</codeph>: Specifies the right margin of the paragraph, in points; corresponds 
	 to <codeph>TextFormat.rightMargin</codeph>. 
	 </li>
	 
	 <li>
	 <codeph>tabstops</codeph>: Specifies custom tab stops as an array of non-negative integers; 
	 corresponds to <codeph>TextFormat.tabStops</codeph>. 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 Underline tag
	 </entry>
	 
	 <entry>
	 The <codeph>&lt;u&gt;</codeph> tag underlines the tagged text.
	 </entry>
	 </row></tbody></tgroup></adobetable>
	 
	 <p>Flash Player and AIR support the following HTML entities:</p>
	 
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>
	 Entity
	 </entry><entry>
	 Description
	 </entry></row></thead><tbody><row>
	 
	 <entry>
	 
	 &amp;amp;lt;	
	 
	 </entry>
	 
	 <entry>
	 
	 &lt; (less than)
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 
	 &amp;amp;gt;	
	 
	 </entry>
	 
	 <entry>
	 
	 &gt; (greater than)
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 
	 &amp;amp;amp;	
	 
	 </entry>
	 
	 <entry>
	 
	 &amp; (ampersand)
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 &amp;amp;quot;	
	 
	 </entry>
	 
	 <entry>
	 
	 " (double quotes)
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 
	 &amp;amp;apos;	
	 
	 </entry>
	 
	 <entry>
	 
	 ' (apostrophe, single quote)
	 
	 </entry>
	 
	 </row></tbody></tgroup></adobetable>
	  
	  <p>Flash Player and AIR also support explicit character codes, such as 
	  &amp;#38; (ASCII ampersand) and &amp;#x20AC; (Unicode € symbol). </p>
	 
	 </apiDesc><example conref="examples\TextField_text.as"> The following example creates a TextField called <codeph>tf1</codeph>, and assigns an
 HTML-formatted String to its <codeph>text</codeph> property. When its <codeph>htmlText</codeph> property
 is traced, the output is the HTML-formatted String, with additional tags (such as &lt;P&gt; and
 &lt;FONT&gt;) automatically added by Flash Player. When the value of the <codeph>text</codeph>
 property is traced, the unformatted string without HTML tags is displayed.
 
 <p>By way of comparison, the same steps are performed on another TextField object named
 <codeph>tf2</codeph>, with the addition that a StyleSheet object is assigned to <codeph>tf2</codeph>'s
 <codeph>styleSheet</codeph> property before its <codeph>htmlText</codeph> property is set. In that case,
 when the <codeph>htmlText</codeph> property is traced, it only includes the exact HTML text that was
 originally assigned to the <codeph>htmlText</codeph> property, showing that no additional tags were
 added by Flash Player.</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.StyleSheet;
    import flash.text.TextField;

    public class TextField_text extends Sprite {
        public function TextField_text() {
            var tf1:TextField = createCustomTextField(10, 10, 400, 22);
            tf1.htmlText = "&lt;b&gt;Lorem ipsum dolor sit amet.&lt;/b&gt;";

            // htmlText: &lt;P ALIGN="LEFT"&gt;&lt;FONT FACE="Times New Roman" SIZE="12" COLOR="#000000" LETTERSPACING="0" KERNING="0"&gt;&amp;lt;b&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/b&amp;gt;&lt;/FONT&gt;&lt;/P&gt;
            trace("htmlText: " + tf1.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf1.text);
            
            var tf2:TextField = createCustomTextField(10, 50, 400, 22);
            tf2.styleSheet = new StyleSheet();
            tf2.htmlText = "&lt;b&gt;Lorem ipsum dolor sit amet.&lt;/b&gt;";
            // htmlText: &lt;b&gt;Lorem ipsum dolor sit amet.&lt;/b&gt;
            trace("htmlText: " + tf2.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf2.text);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/text"><linktext>flash.text.TextField.text</linktext></link><link href="flash.text.xml#StyleSheet"><linktext>flash.text.StyleSheet</linktext></link><link href="flash.events.xml#TextEvent"><linktext>flash.events.TextEvent</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:length:get"><apiName>length</apiName><shortdesc>
	 The number of characters in a text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.length, length
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The number of characters in a text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The number of characters in a text field. A character such as tab (<codeph>\t</codeph>) counts as one
	 character.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:maxChars:get"><apiName>maxChars</apiName><shortdesc>
	 The maximum number of characters that the text field can contain, as entered by a user.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.maxChars, maxChars
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiDefaultValue>0
	 
	 </apiDefaultValue><apiTipTexts><apiTipText>The maximum number of characters that the text field can contain.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The maximum number of characters that the text field can contain, as entered by a user.
	 A script can insert more text than <codeph>maxChars</codeph> allows; the <codeph>maxChars</codeph> property
	 indicates only how much text a user can enter. If the value of this property is <codeph>0</codeph>,
	 a user can enter an unlimited amount of text.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc>
	 The maximum value of scrollH.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.maxScrollH, maxScrollH
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The maximum value of scrollH.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The maximum value of <codeph>scrollH</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollH"><linktext>flash.text.TextField.scrollH</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc>
	 The maximum value of scrollV.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.maxScrollV, maxScrollV
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The maximum value of <codeph>scrollV</codeph>.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The maximum value of <codeph>scrollV</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollV"><linktext>flash.text.TextField.scrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc>
	 A Boolean value that indicates whether Flash Player automatically scrolls multiline
	 text fields when the user clicks a text field and rolls the mouse wheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.mouseWheelEnabled, mouseWheelEnabled
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>Indicates whether Flash Player automatically scrolls multiline text fields.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 A Boolean value that indicates whether Flash Player automatically scrolls multiline
	 text fields when the user clicks a text field and rolls the mouse wheel.
	 By default, this value is <codeph>true</codeph>. This property is useful if you want to prevent
	 mouse wheel scrolling of text fields, or implement your own text field scrolling.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:multiline:get"><apiName>multiline</apiName><shortdesc>
	 Indicates whether field is a multiline text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.multiline, multiline
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue><apiTipTexts><apiTipText>Indicates whether the text field is a multiline text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Indicates whether field is a multiline text field. If the value is <codeph>true</codeph>,
	 the text field is multiline; if the value is <codeph>false</codeph>, the text field is a single-line
	 text field. In a field of type <codeph>TextFieldType.INPUT</codeph>, the <codeph>multiline</codeph> value
	 determines whether the <codeph>Enter</codeph> key creates a new line (a value of <codeph>false</codeph>,
	 and the <codeph>Enter</codeph> key is ignored).
	 If you paste text into a <codeph>TextField</codeph> with a <codeph>multiline</codeph> value of <codeph>false</codeph>,
	 newlines are stripped out of the text.

	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/numLines"><linktext>numLines</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:numLines:get"><apiName>numLines</apiName><shortdesc>
	 Defines the number of text lines in a multiline text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.numLines, numLines
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>Defines the number of text lines in a multiline text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Defines the number of text lines in a multiline text field. 
	 If <codeph>wordWrap</codeph> property is set to <codeph>true</codeph>,
	 the number of lines increases when text wraps.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/multiline"><linktext>multiline</linktext></link><link href="flash.text.xml#TextField/wordWrap"><linktext>wordWrap</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:restrict:get"><apiName>restrict</apiName><shortdesc>
	 Indicates the set of characters that a user can enter into the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.restrict, restrict
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>null
     
	 </apiDefaultValue><apiTipTexts><apiTipText>A set of characters that a user can enter into a text field.
	 

	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Indicates the set of characters that a user can enter into the text field. If the value of the
	 <codeph>restrict</codeph> property is <codeph>null</codeph>, you can enter any character. If the value of
	 the <codeph>restrict</codeph> property is an empty string, you cannot enter any character. If the value
	 of the <codeph>restrict</codeph> property is a string of characters, you can enter only characters in
	 the string into the text field. The string is scanned from left to right. You can specify a range by
	 using the hyphen (-) character. Only user interaction is restricted; a script can put any text into the 
	 text field. <ph outputclass="flashonly">This property does not synchronize with the Embed font options
	 in the Property inspector.</ph>
	 
	 <p>If the string begins with a caret (^) character, all characters are initially accepted and 
	 succeeding characters in the string are excluded from the set of accepted characters. If the string does 
	 not begin with a caret (^) character, no characters are initially accepted and succeeding characters in the 
	 string are included in the set of accepted characters.</p>
	 
	 <p>The following example allows only uppercase characters, spaces, and numbers to be entered into
	 a text field:</p>
	 <pre>
	 my_txt.restrict = "A-Z 0-9";
	 </pre>
	 <p>The following example includes all characters, but excludes lowercase letters:</p>
	 <pre>
	 my_txt.restrict = "^a-z";
	 </pre>
	 <p>You can use a backslash to enter a ^ or - verbatim. The accepted backslash sequences are \-, \^ or \\.
	 The backslash must be an actual character in the string, so when specified in ActionScript, a double backslash
	 must be used. For example, the following code includes only the dash (-) and caret (^):</p>
	 <pre>
	 my_txt.restrict = "\\-\\^";
	 </pre>
	 <p>The ^ can be used anywhere in the string to toggle between including characters and excluding characters.
	 The following code includes only uppercase letters, but excludes the uppercase letter Q:</p>
	 <pre>
	 my_txt.restrict = "A-Z^Q";
	 </pre>
	 <p>You can use the <codeph>\u</codeph> escape sequence to construct <codeph>restrict</codeph> strings.
	 The following code includes only the characters from ASCII 32 (space) to ASCII 126 (tilde).</p>
	 <pre>
     my_txt.restrict = "\u0020-\u007E";
	 </pre>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:scrollH:get"><apiName>scrollH</apiName><shortdesc>
	 The current horizontal scrolling position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.scrollH, scrollH
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The current horizontal scrolling position.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The current horizontal scrolling position. If the <codeph>scrollH</codeph> property is 0, the text
	 is not horizontally scrolled. This property value is an integer that represents the horizontal
	 position in pixels.
	 
	 
	 <p>The units of horizontal scrolling are pixels, whereas the units of vertical scrolling are lines.
	 Horizontal scrolling is measured in pixels because most fonts you typically use are proportionally
	 spaced; that is, the characters can have different widths. Flash Player performs vertical scrolling by
	 line because users usually want to see a complete line of text rather than a
	 partial line. Even if a line uses multiple fonts, the height of the line adjusts to fit
	 the largest font in use.</p>
	 
	 <p><b>Note: </b>The <codeph>scrollH</codeph> property is zero-based, not 1-based like 
	 the <codeph>scrollV</codeph> vertical scrolling property.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/maxScrollH"><linktext>flash.text.TextField.maxScrollH</linktext></link><link href="flash.text.xml#TextField/scrollV"><linktext>flash.text.TextField.scrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:scrollV:get"><apiName>scrollV</apiName><shortdesc>
	 The vertical position of text in a text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.scrollV, scroll
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The vertical position of text in a text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The vertical position of text in a text field. The <codeph>scrollV</codeph> property is useful for
	 directing users to a specific paragraph in a long passage, or creating scrolling text fields.
	 
	 <p>The units of vertical scrolling are lines, whereas the units of horizontal scrolling are pixels.
	 If the first line displayed is the first line in the text field, scrollV is set to 1 (not 0).
	 Horizontal scrolling is measured in pixels because most fonts are proportionally
	 spaced; that is, the characters can have different widths. Flash performs vertical scrolling by line
	 because users usually want to see a complete line of text rather than a partial line.
	 Even if there are multiple fonts on a line, the height of the line adjusts to fit the largest font in
	 use.</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollH"><linktext>flash.text.TextField.scrollH</linktext></link><link href="flash.text.xml#TextField/maxScrollV"><linktext>flash.text.TextField.maxScrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:selectable:get"><apiName>selectable</apiName><shortdesc>
	 A Boolean value that indicates whether the text field is selectable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.selectable, selectable
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>true
     
         </apiDefaultValue><apiTipTexts><apiTipText>Indicates whether the text field is selectable.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 A Boolean value that indicates whether the text field is selectable. The value <codeph>true</codeph>
	 indicates that the text is selectable. The <codeph>selectable</codeph> property controls whether
	 a text field is selectable, not whether a text field is editable. A dynamic text field can
	 be selectable even if it is not editable. If a dynamic text field is not selectable, the user
	 cannot select its text.
	 
	 <p>If <codeph>selectable</codeph> is set to <codeph>false</codeph>, the text in the text field does not
	 respond to selection commands from the mouse or keyboard, and the text cannot be copied with the
	 Copy command. If <codeph>selectable</codeph> is set to <codeph>true</codeph>, the text in the text field
	 can be selected with the mouse or keyboard, and the text can be copied with the Copy command. 
	 You can select text this way even if the text field is a dynamic text field instead of an input text field. </p>
	 
     </apiDesc><example conref="examples\TextField_selectable.as"> The following example creates two dynamic text fields: one text field with the <codeph>selectable</codeph>
 property set to <codeph>true</codeph>, and the other text field with the <codeph>selectable</codeph> property set to <codeph>false</codeph>. 
 When you use this example, try to select the text in these fields with the mouse or the keyboard.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class selectableExample extends Sprite
    {
        public function selectableExample()
        {
    var tf1:TextField = createCustomTextField(10, 10);
    tf1.text="This text can be selected";
    tf1.selectable=true;

    var tf2:TextField = createCustomTextField(10, 30);
    tf2.text="This text cannot be selected";
    tf2.selectable=false;
        }

        private function createCustomTextField(x:Number, y:Number):TextField 
       {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.autoSize=TextFieldAutoSize.LEFT;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc>
	 The zero-based character index value of the first character in the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The zero-based index value of the first character in the selection. 
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The zero-based character index value of the first character in the current selection.
	 For example, the first character is 0, the second character is 1, and so on. If no
	 text is selected, this property is the value of <codeph>caretIndex</codeph>.
	 
	 </apiDesc><example conref="examples\TextField_caretIndex.as"> In this example, a TextField instance is created and populated with text.
 An event listener is assigned so that when the user clicks on the TextField, the
 <codeph>printCursorPosition</codeph> method is called. In that case, the values of the
 <codeph>caretIndex</codeph>, <codeph>selectionBeginIndex</codeph>, and
 <codeph>selectionEndIndex</codeph> properties are output.
 
 <p>Run this example and try clicking in the TextField to select text. Then click in the field without
 selecting text. When you click in the text without making a selection, the
 <codeph>caretIndex</codeph> property indicates where the insertion point occurs, and the <codeph>selectionBeginIndex</codeph>
 and <codeph>selectionEndIndex</codeph> properties equal the <codeph>caretIndex</codeph> property value.</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_caretIndex extends Sprite {
        public function TextField_caretIndex() {
            var tf:TextField = createCustomTextField(10, 10, 100, 100);
            tf.wordWrap = true;
            tf.type = TextFieldType.INPUT;
            tf.text = "Click in this text field. Compare the difference between clicking without selecting versus clicking and selecting text.";
            tf.addEventListener(MouseEvent.CLICK, printCursorPosition);
        }

        private function printCursorPosition(event:MouseEvent):void {
            var tf:TextField = TextField(event.target);
            trace("caretIndex:", tf.caretIndex);
            trace("selectionBeginIndex:", tf.selectionBeginIndex);
            trace("selectionEndIndex:", tf.selectionEndIndex);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc>
	 The zero-based character index value of the last character in the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>The zero-based index value of the last character in the selection.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The zero-based character index value of the last character in the current selection.
     For example, the first character is 0, the second character is 1, and so on. If no
     text is selected, this property is the value of <codeph>caretIndex</codeph>.
	 
	 </apiDesc><example conref="examples\TextField_caretIndex.as"> In this example, a TextField instance is created and populated with text.
 An event listener is assigned so that when the user clicks on the TextField, the
 <codeph>printCursorPosition</codeph> method is called. In that case, the values of the
 <codeph>caretIndex</codeph>, <codeph>selectionBeginIndex</codeph>, and
 <codeph>selectionEndIndex</codeph> properties are output.
 
 <p>Run this example and try clicking in the TextField to select text. Then click in the field without
 selecting text. When you click in the text without making a selection, the
 <codeph>caretIndex</codeph> property indicates where the insertion point occurs, and the <codeph>selectionBeginIndex</codeph>
 and <codeph>selectionEndIndex</codeph> properties equal the <codeph>caretIndex</codeph> property value.</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_caretIndex extends Sprite {
        public function TextField_caretIndex() {
            var tf:TextField = createCustomTextField(10, 10, 100, 100);
            tf.wordWrap = true;
            tf.type = TextFieldType.INPUT;
            tf.text = "Click in this text field. Compare the difference between clicking without selecting versus clicking and selecting text.";
            tf.addEventListener(MouseEvent.CLICK, printCursorPosition);
        }

        private function printCursorPosition(event:MouseEvent):void {
            var tf:TextField = TextField(event.target);
            trace("caretIndex:", tf.caretIndex);
            trace("selectionBeginIndex:", tf.selectionBeginIndex);
            trace("selectionEndIndex:", tf.selectionEndIndex);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:sharpness:get"><apiName>sharpness</apiName><shortdesc>
	 The sharpness of the glyph edges in this text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>This example creates three text fields with
	 <code>sharpness</code> set to <code>400</code>, <code>0</code>, and <code>-400</code>.
	 It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 10, 10, 400, 100);
	 my_text1.text = "This text has sharpness set to 400."
	 my_text1.embedFonts = true;
	 my_text1.antiAliasType = "advanced";
	 my_text1.gridFitType = "pixel";
	 my_text1.sharpness = 400;
	 my_text1.setTextFormat(my_format);
         
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 10, 40, 400, 100);
	 my_text2.text = "This text has sharpness set to 0."
	 my_text2.embedFonts = true;
	 my_text2.antiAliasType = "advanced";
	 my_text2.gridFitType = "pixel";
	 my_text2.sharpness = 0;
	 my_text2.setTextFormat(my_format);
	 
	 var my_text3:TextField = this.createTextField("my_text3", this.getNextHighestDepth(), 10, 70, 400, 100);
	 my_text3.text = "This text has sharpness set to -400."
	 my_text3.embedFonts = true;
	 my_text3.antiAliasType = "advanced";
	 my_text3.gridFitType = "pixel";
	 my_text3.sharpness = -400;
	 my_text3.setTextFormat(my_format);
	 </listing>
	 
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiDefaultValue>0
     
         </apiDefaultValue><apiTipTexts><apiTipText>The sharpness of the glyph edges.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The sharpness of the glyph edges in this text field. This property applies
	 only if the <codeph>flash.text.AntiAliasType</codeph> property of the text field is set to
	 <codeph>flash.text.AntiAliasType.ADVANCED</codeph>. The range for
	 <codeph>sharpness</codeph> is a number from -400 to 400. If you attempt to set
	 <codeph>sharpness</codeph> to a value outside that range, Flash sets the property to
	 the nearest value in the range (either -400 or 400).
	 
	 </apiDesc><example conref="examples\TextField_sharpness.as"> The following example shows the effect of changing the <codeph>sharpness</codeph>
 property for a TextField object. You need to embed the font, and set the 
 <codeph>antiAliasType</codeph> property to <codeph>ADVANCED</codeph>.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.GridFitType;
    import flash.text.TextFormat;

    public class sharpnessExample extends Sprite
    {
        public function sharpnessExample()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Arial";
    format1.size=24;
    var lTxt:String = "The quick brown fox";

    var tf1:TextField=createCustomTextField(0,lTxt,format1,-400);
    var tf2:TextField=createCustomTextField(30,lTxt,format1,0);
    var tf3:TextField=createCustomTextField(60,lTxt,format1,400);
        }

        private function createCustomTextField(y:Number,fldTxt:String,format:TextFormat,fldSharpness:Number):TextField 
       {
            var result:TextField = new TextField();
            result.y=y;
            result.text=fldTxt;
            result.embedFonts=true;
            result.autoSize=TextFieldAutoSize.LEFT;
            result.antiAliasType=AntiAliasType.ADVANCED;
            result.gridFitType=GridFitType.PIXEL;
            result.sharpness=fldSharpness;
            result..setTextFormat(format);
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc>
	 Attaches a style sheet to the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, StyleSheet, style sheet, stylesheet
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text:StyleSheet</apiValueClassifier><apiTipTexts><apiTipText>Attaches a style sheet to the text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Attaches a style sheet to the text field. For information on creating style sheets, see the StyleSheet class
	 and <i>Programming ActionScript 3.0</i>.
	 
	 <p>You can change the style sheet associated with a text field at any time. If you change
	 the style sheet in use, the text field is redrawn with the new style sheet. 
	 You can set the style sheet to <codeph>null</codeph> or <codeph>undefined</codeph> 
     to remove the style sheet. If the style sheet in use is removed, the text field is redrawn without a style sheet. </p>
     <p><b>Note:</b> If the style sheet is removed, the contents of both <codeph>TextField.text</codeph> and <codeph>
     TextField.htmlText</codeph> change to incorporate the formatting previously applied by the style sheet. To preserve
     the original <codeph>TextField.htmlText</codeph> contents without the formatting, save the value in a variable before
     removing the style sheet.</p>
	 
     </apiDesc><example conref="examples\TextField_styleSheet.as"> The following example defines a simple StyleSheet object 
 and assigns it to a text field with HTML content. Set the 
 <codeph>stylesheet</codeph> property before setting the content.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.StyleSheet;

    public class TextStylesheetExample extends Sprite {
        var myLabel:TextField = new TextField();
        var labelText:String = "Hello world.";
        var newStyle:StyleSheet = new StyleSheet();

        public function TextStylesheetExample()
       {
            var styleObj:Object = new Object();
            styleObj.fontWeight = "bold";
            styleObj.color = "#660066";
            newStyle.setStyle(".defStyle", styleObj);

            myLabel.styleSheet=newStyle;
            myLabel.htmlText=labelText;
            addChild(myLabel);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#StyleSheet"><linktext>flash.text.StyleSheet</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:text:get"><apiName>text</apiName><shortdesc>
	 A string that is the current text in the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.text, text
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>A string that is the current text in the text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 A string that is the current text in the text field. Lines are separated by the carriage
	 return character (<codeph>'\r'</codeph>, ASCII 13). This property contains unformatted text in the text
	 field, without HTML tags.
	 
	 <p>To get the text in HTML form, use the <codeph>htmlText</codeph> property.</p>
	 
	 </apiDesc><example conref="examples\TextField_text.as"> The following example creates a TextField called <codeph>tf1</codeph>, and assigns an
 HTML-formatted String to its <codeph>text</codeph> property. When its <codeph>htmlText</codeph> property
 is traced, the output is the HTML-formatted String, with additional tags (such as &lt;P&gt; and
 &lt;FONT&gt;) automatically added by Flash Player. When the value of the <codeph>text</codeph>
 property is traced, the unformatted string without HTML tags is displayed.
 
 <p>By way of comparison, the same steps are performed on another TextField object named
 <codeph>tf2</codeph>, with the addition that a StyleSheet object is assigned to <codeph>tf2</codeph>'s
 <codeph>styleSheet</codeph> property before its <codeph>htmlText</codeph> property is set. In that case,
 when the <codeph>htmlText</codeph> property is traced, it only includes the exact HTML text that was
 originally assigned to the <codeph>htmlText</codeph> property, showing that no additional tags were
 added by Flash Player.</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.StyleSheet;
    import flash.text.TextField;

    public class TextField_text extends Sprite {
        public function TextField_text() {
            var tf1:TextField = createCustomTextField(10, 10, 400, 22);
            tf1.htmlText = "&lt;b&gt;Lorem ipsum dolor sit amet.&lt;/b&gt;";

            // htmlText: &lt;P ALIGN="LEFT"&gt;&lt;FONT FACE="Times New Roman" SIZE="12" COLOR="#000000" LETTERSPACING="0" KERNING="0"&gt;&amp;lt;b&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/b&amp;gt;&lt;/FONT&gt;&lt;/P&gt;
            trace("htmlText: " + tf1.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf1.text);
            
            var tf2:TextField = createCustomTextField(10, 50, 400, 22);
            tf2.styleSheet = new StyleSheet();
            tf2.htmlText = "&lt;b&gt;Lorem ipsum dolor sit amet.&lt;/b&gt;";
            // htmlText: &lt;b&gt;Lorem ipsum dolor sit amet.&lt;/b&gt;
            trace("htmlText: " + tf2.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf2.text);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:textColor:get"><apiName>textColor</apiName><shortdesc>
	 The color of the text in a text field, in hexadecimal format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.textColor, textColor
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiDefaultValue>0 (0x000000)
	 </apiDefaultValue><apiTipTexts><apiTipText>The color of the text in a text field, in hexadecimal format.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The color of the text in a text field, in hexadecimal format.
	 The hexadecimal color system uses six digits to represent
	 color values. Each digit has 16 possible values or characters. The characters range from
	 0-9 and then A-F. For example, black is <codeph>0x000000</codeph>; white is
	 <codeph>0xFFFFFF</codeph>.
	 
     </apiDesc><example conref="examples\TextField_textColor.as"> The following ActionScript creates a TextField object and changes its
 <codeph>textColor</codeph> property to red (<codeph>0xFF0000</codeph>).
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_textColor extends Sprite {
        public function TextField_textColor() {
            var tf:TextField = createCustomTextField(10, 10, 100, 300);
            tf.text = "This will be red text";
            tf.textColor = 0xFF0000;            
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text:TextField:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 The height of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.textHeight, textHeight
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>The height of the text in pixels.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The height of the text in pixels.
	 
	 </apiDesc><example conref="examples\TextField_textHeight.as"> The following example creates a TextField object and assigns text to it.
 The <codeph>trace</codeph> statements display the values of the <codeph>textWidth</codeph> and
 <codeph>textHeight</codeph> properties. For comparison, the <codeph>width</codeph> and <codeph>height</codeph>
 properties are also displayed. (Note that the values you see for <codeph>textHeight</codeph> and <codeph>textWidth</codeph> might
 vary depending on the font that is used on your machine).
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_textHeight extends Sprite {
        public function TextField_textHeight() {
            var tf:TextField = createCustomTextField(10, 10, 100, 150);
            tf.text = "Sample text";
            
            trace("textWidth: " + tf.textWidth); // textWidth: 55.75
            trace("textHeight: " + tf.textHeight); // textHeight: 13.450000000000001
            trace("width: " + tf.width); // width: 100
            trace("height: " + tf.height); // height: 150
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.border = true;
            result.background = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/textWidth"><linktext>flash.text.TextField.textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 The width of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.textWidth, textWidth
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>The width of the text in pixels.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The width of the text in pixels.
	 
	 </apiDesc><example conref="examples\TextField_textHeight.as"> The following example creates a TextField object and assigns text to it.
 The <codeph>trace</codeph> statements display the values of the <codeph>textWidth</codeph> and
 <codeph>textHeight</codeph> properties. For comparison, the <codeph>width</codeph> and <codeph>height</codeph>
 properties are also displayed. (Note that the values you see for <codeph>textHeight</codeph> and <codeph>textWidth</codeph> might
 vary depending on the font that is used on your machine).
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_textHeight extends Sprite {
        public function TextField_textHeight() {
            var tf:TextField = createCustomTextField(10, 10, 100, 150);
            tf.text = "Sample text";
            
            trace("textWidth: " + tf.textWidth); // textWidth: 55.75
            trace("textHeight: " + tf.textHeight); // textHeight: 13.450000000000001
            trace("width: " + tf.width); // width: 100
            trace("height: " + tf.height); // height: 150
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.border = true;
            result.background = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/textHeight"><linktext>flash.text.TextField.textHeight</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:thickness:get"><apiName>thickness</apiName><shortdesc>
	 The thickness of the glyph edges in this text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>This example creates two text fields and applies a <code>thickness</code> of -200 to one
	 and 200 to the other.  It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 10, 10, 300, 30);
	 my_text1.text = "thickness = 200";
	 my_text1.antiAliasType = "advanced";
	 my_text1.border = true;
	 my_text1.thickness = 200;
	 my_text1.embedFonts = true;
	 my_text1.setTextFormat(my_format);
	 
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 10, 50, 300, 30);
	 my_text2.text = "thickness = -200."
	 my_text2.antiAliasType = "advanced";
	 my_text2.thickness = -200;
	 my_text2.border = true;
	 my_text2.embedFonts = true;
	 my_text2.setTextFormat(my_format);
	 </listing>
     
         </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiDefaultValue>0
     
	 </apiDefaultValue><apiTipTexts><apiTipText>The thickness of the glyph edges.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The thickness of the glyph edges in this text field. This property applies only
	 when <codeph>flash.text.AntiAliasType</codeph> is set to <codeph>flash.text.AntiAliasType.ADVANCED</codeph>.
	 
	 <p>The range for <codeph>thickness</codeph> is a number from -200 to 200. If you attempt to
	 set <codeph>thickness</codeph> to a value outside that range, the property is set to the
	 nearest value in the range (either -200 or 200).</p>
	 
     </apiDesc><example conref="examples\TextField_thickness.as"> The following example shows the effect of changing the <codeph>thickness</codeph> 
 property for a TextField object. You need to embed the font, and set the <codeph>antiAliasType</codeph> 
 property to <codeph>ADVANCED</codeph>.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.GridFitType;
    import flash.text.TextFormat;

    public class thicknessExample extends Sprite
    {
        public function thicknessExample()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Arial";
    format1.size=24;
    var lTxt:String = "The quick brown fox";

    var tf1:TextField=createCustomTextField(0,lTxt,format1,-200);
    var tf2:TextField=createCustomTextField(30,lTxt,format1,0);
    var tf3:TextField=createCustomTextField(60,lTxt,format1,200);
        }

        private function createCustomTextField(y:Number,fldTxt:String,format:TextFormat,fldThickness:Number):TextField 
       {
            var result:TextField = new TextField();
            result.y=y;
            result.text=fldTxt;
            result.embedFonts=true;
            result.autoSize=TextFieldAutoSize.LEFT;
            result.antiAliasType=AntiAliasType.ADVANCED;
            result.gridFitType=GridFitType.PIXEL;
            result.thickness=fldThickness;
            result.setTextFormat(format);
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:type:get"><apiName>type</apiName><shortdesc>
	 The type of the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.type, type
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>The <codeph>type</codeph> specified is not a member of flash.text.TextFieldType.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>dynamic
     
	 </apiDefaultValue><apiTipTexts><apiTipText>The type of the text field.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 The type of the text field.
	 Either one of the following TextFieldType constants: <codeph>TextFieldType.DYNAMIC</codeph>,
	 which specifies a dynamic text field, which a user cannot edit, or <codeph>TextFieldType.INPUT</codeph>,
	 which specifies an input text field, which a user can edit.
	 
     </apiDesc><example conref="examples\TextField_type.as"> The following example creates two text fields: <codeph>tfDynamic</codeph> and
 <codeph>tfInput</codeph>. Text is entered into both text fields. However,
 <codeph>tfDynamic</codeph> has its <codeph>type</codeph> property set to
 <codeph>TextFieldType.DYNAMIC</codeph>, and <codeph>tfInput</codeph> has its
 <codeph>type</codeph> property set to <codeph>TextFieldType.INPUT</codeph>, so the user can
 modify the text in <codeph>tfInput</codeph> but can only view the text in <codeph>tfDynamic</codeph>.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_type extends Sprite {
        public function TextField_type() {
            var tfDynamic:TextField = createCustomTextField(10, 10, 100, 20);
            tfDynamic.type = TextFieldType.DYNAMIC;
            tfDynamic.text = "hello";

            var tfInput:TextField = createCustomTextField(10, 45, 100, 20);
            tfInput.type = TextFieldType.INPUT;
            tfInput.text = "world";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.background = true;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextFieldType"><linktext>flash.text.TextFieldType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:useRichTextClipboard:set"><apiName>useRichTextClipboard</apiName><shortdesc>
	 Specifies whether to copy and paste the text formatting along with the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies whether to copy and paste the text formatting along with the text. When set to <codeph>true</codeph>,
     Flash Player copies and pastes formatting (such as alignment, bold, and italics) when you copy and paste between text fields. Both the origin and destination text fields for the copy and paste procedure must have
	 <codeph>useRichTextClipboard</codeph> set to <codeph>true</codeph>. The default value
	 is <codeph>false</codeph>.
	 
	 </apiDesc><example conref="examples\TextField_useRichTextClipboard.as"> This example creates an input text field (<codeph>tf1</codeph>) and two dynamic 
 text fields (<codeph>tf2</codeph> and <codeph>tf3</codeph>). 
 The code assigns each dynamic text field a TextFormat object (Courier Bold font).
 The <codeph>tf2</codeph> text field has <codeph>useRichTextClipboard</codeph> property set to 
 <codeph>false</codeph>. The <codeph>tf3</codeph> text field has the  
 <codeph>useRichTextClipboard</codeph> property set to <codeph>true</codeph>.
 When you copy the text from the <codeph>tf2</codeph> text field
 and paste it into the <codeph>tf1</codeph> text field, the pasted text does not include 
 the formatting. When you copy the text from the <codeph>tf3</codeph> text field (which has 
 <codeph>useRichTextClipboard</codeph> set to <codeph>true</codeph>) and paste it into the 
 <codeph>tf1</codeph> text field, the pasted text includes the formatting.
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFormat;

    public class useRichTextClipboard extends Sprite
    {
        public function useRichTextClipboard()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Courier";
    format1.bold=true;

    var tf1:TextField = createCustomTextField(10, 10, 200, 20);
    tf1.type=TextFieldType.INPUT;
    tf1.useRichTextClipboard=true;

    var tf2:TextField = createCustomTextField(220, 10, 200, 20);
    tf2.text="1.Text loses format";
    tf2.setTextFormat(format1);
    tf2.useRichTextClipboard=false;

    var tf3:TextField = createCustomTextField(220, 50, 200, 20);
    tf3.text="2.Text includes format";
    tf3.setTextFormat(format1);
    tf3.useRichTextClipboard=true;
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField 
       {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.background = true;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text:TextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc>
	 A Boolean value that indicates whether the text field has word wrap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.wordWrap, wordWrap
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>Indicates whether the text field has word wrap.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 A Boolean value that indicates whether the text field has word wrap. If the value of
	 <codeph>wordWrap</codeph> is <codeph>true</codeph>, the text field has word wrap;
	 if the value is <codeph>false</codeph>, the text field does not have word wrap. The default
	 value is <codeph>false</codeph>.
	 
	 </apiDesc><example conref="examples\TextField_wordWrap.as"> This example demonstrates the difference between setting the <codeph>wordWrap</codeph>
 property to <codeph>true</codeph> and setting it to <codeph>false</codeph>. Two TextField instances are
 created whose contents are too large for their widths. The <codeph>wordWrap</codeph> property of
 the first (named <codeph>tfWrap</codeph>) is set to <codeph>true</codeph>; it is set to <codeph>false</codeph>
 for the second (<codeph>tfNoWrap</codeph>).
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_wordWrap extends Sprite {
        public function TextField_wordWrap() {
            var tfWrap:TextField = createCustomTextField(10, 10, 100, 100);
            tfWrap.wordWrap = true;
            tfWrap.text = "(wordWrap = true):\nThis is very long text that will certainly extend beyond the width of this text field";

            var tfNoWrap:TextField = createCustomTextField(10, 150, 100, 100);
            tfNoWrap.wordWrap = false;
            tfNoWrap.text = "(wordWrap = false):\nThis is very long text that will certainly extend beyond the width of this text field";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.background = true;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextFormat"><apiName>TextFormat</apiName><shortdesc>
 The TextFormat class represents character formatting information.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Insure the above example is correct and meets example standards
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Creates text formatting for text fields.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextFormat class represents character formatting information.  Use the TextFormat class
 to create specific text formatting for text fields. You can apply text formatting
 to both static and dynamic text fields. The properties of the TextFormat class apply to device and
 embedded fonts. However, for embedded fonts, bold and italic text actually require specific fonts. If you
 want to display bold or italic text with an embedded font, you need to embed the bold and italic variations
 of that font.
 
 <p> You must use the constructor <codeph>new TextFormat()</codeph> to create a TextFormat object
 before setting its properties. 
 When you apply a TextFormat object to a text field using the <codeph>TextField.defaultTextFormat</codeph> property
 or the <codeph>TextField.setTextFormat()</codeph> method, only its defined properties are applied. Use 
 the <codeph>TextField.defaultTextFormat</codeph> property to apply formatting BEFORE you add text to the <codeph>TextField</codeph>, 
 and the <codeph>setTextFormat()</codeph> method to add formatting AFTER you add text to the <codeph>TextField</codeph>.
 The TextFormat properties are <codeph>null</codeph> by default 
 because if you don't provide values for the properties, Flash Player uses its own default formatting.
 The default formatting that Flash Player uses for each property (if property's value is <codeph>null</codeph>)
 is as follows:</p>
 
 <adobetable class="innertable">
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <tgroup cols="1"><tbody><row><entry>align = "left"</entry></row><row><entry>blockIndent = 0</entry></row><row><entry>bold = false</entry></row><row><entry>bullet = false</entry></row><row><entry>color = 0x000000</entry></row><row><entry>font = "Times New Roman" (default font is Times on Mac OS X)</entry></row><row><entry>indent = 0</entry></row><row><entry>italic = false</entry></row><row><entry>kerning = false</entry></row><row><entry>leading = 0</entry></row><row><entry>leftMargin = 0</entry></row><row><entry>letterSpacing = 0</entry></row><row><entry>rightMargin = 0</entry></row><row><entry>size = 12</entry></row><row><entry>tabStops = [] (empty array)</entry></row><row><entry>target = "" (empty string)</entry></row><row><entry>underline = false</entry></row><row><entry>url = "" (empty string)</entry></row></tbody></tgroup></adobetable>
 
 <p>The default formatting for each property is also described in each property description.</p>
 
 </apiDesc><example conref="examples\TextFormatExample.as"> The following example creates the TextFieldExample class to display a text message with
 the default location (x = 0, y = 0).  This is accomplished using the following steps:
 <ol>
  <li>A property <codeph>label</codeph> of type TextField is created.</li>
  <li>The class constructor calls the function <codeph>configureLabel()</codeph></li>
  <li>The <codeph>configureLabel()</codeph> function first creates a new TextField object and assigns it to 
  <codeph>label</codeph> then sets its parameters to
  <ul>
      <li>Left-justify the text field</li>
      <li>Enable the background fill</li>
      <li>Enable the border.</li>
  </ul>
  </li>
  <li>Next, <codeph>configureLable()</codeph> creates the local variable, <codeph>format</codeph>, and assigns it to 
  a new TextFormat instance with its parameters set to:
  <ul>
      <li>Font type = Verdana</li>
      <li>Font Color = solid red</li>
      <li>Font size = 10</li>
      <li>Font underline = true.</li>
  </ul>
  </li>
  <li>The label's <codeph>defaultTextFormat</codeph> property is set to <codeph>format</codeph>, and the
  <codeph>label</codeph> instance is added to the display list, which initially displays a text field with
  no text (as tiny box with a white background) on the stage.</li>
  <li>Finally (back in the constructor), the label's text is then set to display "Hello 
  World and welcome to the show", at coordinates x = 0, y = 0 by calling <codeph>setLabel()</codeph>.</li>
 </ol>
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFormat;


    public class TextFormatExample extends Sprite {
        private var label:TextField;

        public function TextFormatExample() {
            configureLabel();
            setLabel("Hello World and welcome to the show");
        }

        public function setLabel(str:String):void {
            label.text = str;
        }

        private function configureLabel():void {
            label = new TextField();
            label.autoSize = TextFieldAutoSize.LEFT;
            label.background = true;
            label.border = true;

            var format:TextFormat = new TextFormat();
            format.font = "Verdana";
            format.color = 0xFF0000;
            format.size = 10;
            format.underline = true;

            label.defaultTextFormat = format;
            addChild(label);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/setTextFormat()"><linktext>flash.text.TextField.setTextFormat()</linktext></link><link href="flash.text.xml#TextField/defaultTextFormat"><linktext>flash.text.TextField.defaultTextFormat</linktext></link><link href="flash.text.xml#TextField/getTextFormat()"><linktext>flash.text.TextField.getTextFormat()</linktext></link></related-links><apiConstructor id="flash.text:TextFormat:TextFormat"><apiName>TextFormat</apiName><shortdesc>
 	 Creates a TextFormat object with the specified properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat
 	 
 	 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>font</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>The name of a font for text as a string.
 	 </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>An integer that indicates the size in pixels.
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>The color of text using this text format. A number containing three 8-bit RGB
	 components; for example, 0xFF0000 is red, and 0x00FF00 is green.
 	 </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>A Boolean value that indicates whether the text is boldface.
 	 </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>A Boolean value that indicates whether the text is italicized.
 	 </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>A Boolean value that indicates whether the text is underlined.
 	 </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>The URL to which the text in this text format hyperlinks. If <codeph>url</codeph> is
	 an empty string, the text does not have a hyperlink.
 	 </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>The target window where the hyperlink is displayed. If the target window is an empty
	 string, the text is displayed in the default target window <codeph>_self</codeph>. If the 
	 <codeph>url</codeph> parameter is set to an empty string or to the value <codeph>null</codeph>, you can get or
	 set this property, but the property will have no effect.
 	 </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>The alignment of the paragraph, as a TextFormatAlign value.
 	 </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Indicates the left margin of the paragraph, in pixels.
 	 </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Indicates the right margin of the paragraph, in pixels.
 	 </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>An integer that indicates the indentation from the left margin to the first character
	 in the paragraph.
 	 </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>A number that indicates the amount of leading vertical space between lines.
 	 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Creates a TextFormat object with the specified properties. You can then change the
 	 properties of the TextFormat object to change the formatting of text fields.
	 
 	 <p>Any parameter may be set to <codeph>null</codeph> to indicate that it is not defined. All of the
	 parameters are optional; any omitted parameters are treated as <codeph>null</codeph>.</p>
  	 
 	 </apiDesc><example conref="examples\TextFormat_constructorExample.as"> In the following example, a user can select different text formatting
 options from a list that is applied to the content of another text field. If the user 
 clicks on the text field's content, the formatting reverts to the default (original) format.
 
 <p>The <codeph>formatTextField</codeph> text field lists all the TextField class property options 
 (with the exception of <codeph>kerning</codeph>) in a separate line. When a user clicks a  
 line in the <codeph>formatTextField</codeph> text field, the <codeph>formatTextFieldClickHandler()</codeph>
 method is triggered.</p> 
 
 <p>The <codeph>formatTextFieldClickHandler()</codeph> method calls the <codeph>TextField.getLineIndexAtPoint()</codeph>
 method to get the index of the line that was clicked, and then calls the <codeph>TextField.getLineText()</codeph>
 method to get the content of the line. The switch statement checks the content of the line and sets
 a property of the <codeph>newformat</codeph> TextFormat object accordingly. The <codeph>setTextFormat()</codeph> 
 method then sets the text format of the <codeph>contentTextField</codeph> text field to the new format. By clicking 
 different <codeph>formatTextField</codeph> lines, a user can apply a different formatting 
 to the <codeph>contentTextField</codeph> text field. (The tab setting is an array that defines 
 a separate tab stop for each tab in the line.) If the <codeph>url</codeph> or <codeph>target</codeph> line 
 is selected, the user must click the <codeph>contentTextField</codeph> text field to activate the link 
 and display the content of the target URL (Flex home page). The default value of the <codeph>target</codeph> 
 property is "_self", which means that the content is displayed in the current window if the user 
 selects the <codeph>url</codeph> line. For the <codeph>target</codeph> property to work, a URL must be 
  set already in the <codeph>url</codeph> property.</p>
 
 <p>If a user clicks the <codeph>contentTextField</codeph> text field, the <codeph>contentTextFieldClickHandler()</codeph>
 method is triggered, which sets the field's format and the <codeph>newFormat</codeph> TextFormat
 object to the default (original) format of the text field. This clears all the formatting changes 
 that the user made.</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.text.TextFormatAlign;
    
    public class TextFormat_constructorExample extends Sprite {
        private var contentTextField:TextField = new TextField();
        private var formatTextField:TextField = new TextField();
        private var newFormat:TextFormat = new TextFormat();
        
        public function TextFormat_constructorExample() {
            contentTextField.x = 10;
            contentTextField.y = 10;
            contentTextField.background = true;
            contentTextField.border = true;
            contentTextField.multiline = true;
            contentTextField.wordWrap = true;
            contentTextField.selectable = false;
            contentTextField.width = 250;
            contentTextField.height = 120; 
  
            contentTextField.htmlText = "&lt;p&gt;The TextFormat class represents character formatting "
                + "information. Use the TextFormat class to create specific text formatting "
                + "for text fields." + 
                " &lt;/p&gt;&lt;br&gt;" + "\tTab One" + "\tTab Two&lt;br&gt;";
              
            formatTextField.x = 10;
            formatTextField.y = 140;
            formatTextField.background = true;
            formatTextField.border = true;
            formatTextField.autoSize = TextFieldAutoSize.LEFT;
            
            formatTextField.text = "align: right\n" + "blockIndent: 10 pixels\n" + "bold:\n" + "bullet:\n" + "color: red\n"
                                + "font: Arial\n" + "indent: 20 pixels\n" + "italic:\n" + "leading: 5 spaces\n" 
                                + "leftMargin: 20 pixels\n" + "letterSpacing: 4 pixels\n" + "rightMargin: 20 pixels\n" 
                                + "size: 16 point\n" + "target: new window\n" + "tabStops: 50 and 150 pixel\n" 
                                + "underline:\n" + "url: Adobe Flex page\n";

            formatTextField.addEventListener(MouseEvent.CLICK, formatTextFieldClickHandler);
            
            contentTextField.addEventListener(MouseEvent.CLICK, contentTextFieldClickHandler);
            
            this.addChild(contentTextField);
            this.addChild(formatTextField);
        }

        private function formatTextFieldClickHandler(e:MouseEvent):void {
                var value:String= "";
                var i:uint = 0;
                var index:int = formatTextField.getLineIndexAtPoint(e.localX, e.localY);
                var line:String = formatTextField.getLineText(index);;

                line = line.substr(0, (line.indexOf(":")));

                switch(line) {
                    case "align":
                        newFormat.align = TextFormatAlign.RIGHT;
                        break;
                    case "blockIndent":
                        newFormat.blockIndent = 10;
                        break;
                    case "bold":
                        newFormat.bold = true;
                        break;
                    case "bullet":
                        newFormat.bullet = true;
                        break;
                    case "color":
                        newFormat.color = 0xFF0000;        
                        break;
                    case "font":
                        newFormat.font = "Arial";
                        break;
                    case "indent":
                        newFormat.indent = 20;
                        break;
                    case "italic":
                        newFormat.italic = true;
                        break;
                    case "leading":
                        newFormat.leading = 5;
                        break;
                    case "leftMargin":
                        newFormat.leftMargin = 20;
                        break;
                    case "letterSpacing":
                        newFormat.letterSpacing = 4;
                        break;
                    case "rightMargin":
                        newFormat.rightMargin = 20;
                        break;
                    case "size":
                        newFormat.size = 16;
                        break;
                    case "tabStops":                
                        newFormat.tabStops = [50, 150];
                        break;
                    case "target":
                        newFormat.url = "http://www.adobe.com/products/flex/";    
                        newFormat.target = "_blank";
                        break;    
                    case "underline":
                        newFormat.underline = true;
                        break;
                    case "url":
                        newFormat.url = "http://www.adobe.com/products/flex/";    
                        break;
                }    

                contentTextField.setTextFormat(newFormat);
        }

        private function contentTextFieldClickHandler(e:MouseEvent):void {
            contentTextField.setTextFormat(contentTextField.defaultTextFormat);
            newFormat = contentTextField.defaultTextFormat;
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.text:TextFormat:align:get"><apiName>align</apiName><shortdesc>
	 Indicates the alignment of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.align, align
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>The <codeph>align</codeph> specified is not a member of flash.text.TextFormatAlign.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>TextFormatAlign.LEFT
	 
	 </apiDefaultValue></apiValueDef><apiDesc>
	 Indicates the alignment of the paragraph. Valid values are TextFormatAlign constants.
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextFormatAlign"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormat:blockIndent:get"><apiName>blockIndent</apiName><shortdesc>
	 Indicates the block indentation in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.blockIndent, blockIndent
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates the block indentation in pixels. Block indentation is applied to
	 an entire block of text; that is, to all lines of the text. In contrast, normal indentation 
	 (<codeph>TextFormat.indent</codeph>) affects only the first line of each paragraph. 
	 If this property is <codeph>null</codeph>, the TextFormat object does not specify block indentation
	 (block indentation is 0).
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
 	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:bold:get"><apiName>bold</apiName><shortdesc>
	 Specifies whether the text is boldface.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.bold, bold
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies whether the text is boldface. The default value is <codeph>null</codeph>,
	 which means no boldface is used.
	 If the value is <codeph>true</codeph>, then
	 the text is boldface.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:bullet:get"><apiName>bullet</apiName><shortdesc>
	 Indicates that the text is part of a bulleted list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.bullet, bullet
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates that the text is part of a bulleted list. In a bulleted
	 list, each paragraph of text is indented. To the left of the first line of each paragraph, a bullet
	 symbol is displayed. The default value is <codeph>null</codeph>, which means no bulleted list   
	 is used.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:color:get"><apiName>color</apiName><shortdesc>
	 Indicates the color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.color, color
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates the color of the text. A number containing three 8-bit RGB components; for example,
	 0xFF0000 is red, and 0x00FF00 is green. The default value is <codeph>null</codeph>,
	 which means that Flash Player uses the color black (0x000000).
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:font:get"><apiName>font</apiName><shortdesc>
	 The name of the font for text in this text format, as a string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.font, font
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 The name of the font for text in this text format, as a string. The default value is
	 <codeph>null</codeph>, which means that Flash Player uses Times New Roman font for the text.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:indent:get"><apiName>indent</apiName><shortdesc>
	 Indicates the indentation from the left
	 margin to the first character in the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.indent, indent
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates the indentation from the left
	 margin to the first character in the paragraph. The default value is <codeph>null</codeph>, which
	 indicates that no indentation is used.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/blockIndent"><linktext>flash.text.TextFormat.blockIndent</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormat:italic:get"><apiName>italic</apiName><shortdesc>
	 Indicates whether text in this text format is italicized.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.italic, italic
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates whether text in this text format is italicized. The default
	 value is <codeph>null</codeph>, which means no italics are used.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 A Boolean value that indicates whether kerning is enabled (true) 
	 or disabled (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><internal>Add better description and example.
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 A Boolean value that indicates whether kerning is enabled (<codeph>true</codeph>) 
	 or disabled (<codeph>false</codeph>). Kerning adjusts the pixels between certain character pairs to improve readability, and 
	 should be used only when necessary, such as with headings in large fonts. Kerning is 
	 supported for embedded fonts only.
	 
	 <p>Certain fonts such as Verdana and monospaced fonts, 
     such as Courier New,  do not support kerning.</p>
	 
	 <p>The default value is <codeph>null</codeph>, which means that kerning is not enabled.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:leading:get"><apiName>leading</apiName><shortdesc>
	 An integer representing the amount of vertical space (called leading)
	 between lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.leading, leading
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 An integer representing the amount of vertical space (called <i>leading</i>)
	 between lines. The default value is <codeph>null</codeph>, which indicates that the
	 amount of leading used is 0.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:leftMargin:get"><apiName>leftMargin</apiName><shortdesc>
	 The left margin of the paragraph, in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.leftMargin, leftMargin
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 The left margin of the paragraph, in pixels. The default value is <codeph>null</codeph>, which
	 indicates that the left margin is 0 pixels.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     A number representing the amount of space that is uniformly distributed between all characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><internal>Add better description and example.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
     A number representing the amount of space that is uniformly distributed between all characters.
	 The value specifies the number of pixels that are added to the advance after each character.
	 The default value is <codeph>null</codeph>, which means that 0 pixels of letter spacing is used.
     You can use decimal values such as <codeph>1.75</codeph>.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:rightMargin:get"><apiName>rightMargin</apiName><shortdesc>
	 The right margin of the paragraph, in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.rightMargin, rightMargin
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 The right margin of the paragraph, in pixels. The default value is <codeph>null</codeph>,
	 which indicates that the right margin is 0 pixels.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:size:get"><apiName>size</apiName><shortdesc>
	 The size in pixels of text in this text format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.size, size
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 The size in pixels of text in this text format. The default value is <codeph>null</codeph>, which
	 means that a size of 12 is used.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 Specifies custom tab stops as an array of non-negative integers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.tabStops, tabStops
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies custom tab stops as an array of non-negative integers. Each tab stop is
	 specified in pixels. If custom tab stops are not specified (<codeph>null</codeph>), the default tab
	 stop is 4 (average character width).
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:target:get"><apiName>target</apiName><shortdesc>
	 Indicates the target window where the hyperlink is displayed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.target, target
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates the target window where the hyperlink is displayed. If the target window is an
	 empty string, the text is displayed in the default target window <codeph>_self</codeph>. You can choose
	 a custom name or one of the following four names: <codeph>_self</codeph> specifies the current frame in
	 the current window, <codeph>_blank</codeph> specifies a new window, <codeph>_parent</codeph> specifies the
	 parent of the current frame, and <codeph>_top</codeph> specifies the top-level frame in the current
	 window. If the <codeph>TextFormat.url</codeph> property is an empty string or <codeph>null</codeph>, 
	 you can get or set this property, but the property will have no effect.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/url"><linktext>flash.text.TextFormat.url</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormat:underline:get"><apiName>underline</apiName><shortdesc>
	 Indicates whether the text that uses this text format is underlined (true)
	 or not (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.underline, underline
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates whether the text that uses this text format is underlined (<codeph>true</codeph>)
	 or not (<codeph>false</codeph>). This underlining is similar to that produced by the
	 <codeph>&lt;U&gt;</codeph> tag, but the latter is not true underlining, because it does not skip
	 descenders correctly. The default value is <codeph>null</codeph>, which indicates that underlining
	 is not used.
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:url:get"><apiName>url</apiName><shortdesc>
	 Indicates the target URL for the text in this text format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.url, url
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates the target URL for the text in this text format. If the <codeph>url</codeph>
	 property is an empty string, the text does not have a hyperlink. The default value is <codeph>null</codeph>,
	 which indicates that the text does not have a hyperlink.
	 <p><b>Note:</b> The text with the assigned text format must be set with the <codeph>htmlText</codeph>
	 property for the hyperlink to work.</p>
	 
	 </apiDesc><example>Please see the <xref href="TextFormat.html#TextFormat()">TextFormat() constructor</xref> example 
     for an illustration of how to use this property. 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextDisplayMode"><apiName>TextDisplayMode</apiName><shortdesc>
 The TextDisplayMode class contains values that control the subpixel anti-aliasing of the advanced anti-aliasing system.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextDisplayMode class contains values that control the subpixel anti-aliasing of the advanced anti-aliasing system. 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer/displayMode"><linktext>flash.text.TextRenderer.displayMode</linktext></link></related-links><apiValue id="flash.text:TextDisplayMode:CRT"><apiName>CRT</apiName><shortdesc>
	 Forces Flash Player to display grayscale anti-aliasing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>crt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Forces Flash Player to display grayscale anti-aliasing. While this setting 
	 avoids text coloring, some users may think it appears blurry.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextDisplayMode:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	 Allows Flash Player to choose LCD or CRT mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Allows Flash Player to choose LCD or CRT mode.	
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextDisplayMode:LCD"><apiName>LCD</apiName><shortdesc> 
	 Forces Flash Player to use LCD subpixel anti-aliasing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lcd</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	 Forces Flash Player to use LCD subpixel anti-aliasing. Depending on the font and
	 the hardware, this setting can result in much higher resolution text or text coloring.
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:AntiAliasType"><apiName>AntiAliasType</apiName><shortdesc>
The AntiAliasType class provides values for anti-aliasing in the flash.text.TextField class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The AntiAliasType class provides values for anti-aliasing in the flash.text.TextField class.
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiValue id="flash.text:AntiAliasType:ADVANCED"><apiName>ADVANCED</apiName><shortdesc>
	Sets anti-aliasing to advanced anti-aliasing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>advanced</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Sets anti-aliasing to advanced anti-aliasing. Advanced anti-aliasing 
	allows font faces to be rendered at very high quality at small sizes. It is best used
	with applications that have a lot of small text. Advanced anti-aliasing is not recommended
	for very large fonts (larger than 48 points).
	This constant is used for the <codeph>antiAliasType</codeph> property in the TextField 
	class.
	Use the syntax <codeph>AntiAliasType.ADVANCED</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:AntiAliasType:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	Sets anti-aliasing to the anti-aliasing that is used in Flash Player 7 and earlier.</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Sets anti-aliasing to the anti-aliasing that is used in Flash Player 7 and earlier.
	This setting is recommended for applications that do not have a lot of text.
	This constant is used for the <codeph>antiAliasType</codeph> property in the TextField 
	class.
	Use the syntax <codeph>AntiAliasType.NORMAL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:FontType"><apiName>FontType</apiName><shortdesc>
	 The FontType class contains the enumerated constants "embedded"
	 and "device" for the fontType property of the Font class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The FontType class contains the enumerated constants <codeph>"embedded"</codeph>
	 and <codeph>"device"</codeph> for the <codeph>fontType</codeph> property of the Font class. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#Font/fontType"><linktext>flash.text.Font.fontType</linktext></link></related-links><apiValue id="flash.text:FontType:DEVICE"><apiName>DEVICE</apiName><shortdesc>
		 Indicates that this is a device font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates that this is a device font.
		 The SWF file renders fonts with those installed on the system.
		 
		 <p>Using device fonts results in a smaller movie size, because font data
		 is not included in the file. Device fonts are often a good choice for 
		 displaying text at small point sizes, because anti-aliased text can be blurry
		 at small sizes. Device fonts are also a good choice for large blocks of text,
		 such as scrolling text.</p>
		 
		 <p>Text fields that use device fonts may not be displayed the same across different
		 systems and platforms, because they are rendered with fonts installed on the system.
		 For the same reason, device fonts are not anti-aliased and may appear jagged at
		 large point sizes.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/embedFonts"><linktext>TextField.embedFonts</linktext></link><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links></apiValue><apiValue id="flash.text:FontType:EMBEDDED"><apiName>EMBEDDED</apiName><shortdesc>
		 Indicates that this is an embedded font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embedded</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates that this is an embedded font.
		 Font outlines are embedded in the published SWF file.
		 
		 <p>Text fields that use embedded fonts are always displayed
		 in the chosen font, whether or not that font is installed
		 on the playback system. Also, text fields that use embedded fonts 
		 are always anti-aliased (smoothed). You
		 can select the amount of anti-aliasing you want by using the 
		 <codeph>TextField.antiAliasType property</codeph>.</p>
		 
		 <p>One drawback to embedded fonts is that they increase the size of the SWF file.</p>
		 
		 <p>Fonts of type <codeph>EMBEDDED</codeph> can only be used by TextField.
		 If flash.text.engine classes are directed to use such a font they will fall back to device fonts.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/embedFonts"><linktext>TextField.embedFonts</linktext></link></related-links></apiValue><apiValue id="flash.text:FontType:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc>
		 Indicates that this is an embedded CFF font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates that this is an embedded CFF font.
		 Font outlines and a subset of OpenType tables are embedded in the published SWF file.
		 
		 <p>Text that uses embedded CFF fonts is always displayed
		 in the chosen font, whether or not that font is installed
		 on the playback system. Also, text that uses embedded CFF fonts 
		 is always anti-aliased (smoothed) by Flash Player. You
		 can select the rendering mode and hinting for an embedded CFF font using the 
		 <codeph>flash.text.engine.FontDescription.renderingMode</codeph> and 
		 <codeph>flash.text.engine.FontDescription.cffHinting</codeph> properties.</p>
		 
		 <p>One drawback to embedded CFF fonts is that they increase the size of the SWF file.
		 However, embedded CFF fonts are typically 20% to 30% smaller than regular embedded fonts.</p>
		 
		 <p>Fonts of type <codeph>EMBEDDED_CFF</codeph> can only be used by the flash.text.engine classes.
		 A TextField directed to use such a font will fail to render.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextFormatAlign"><apiName>TextFormatAlign</apiName><shortdesc>
 The TextFormatAlign class provides values for text alignment in the TextFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextFormatAlign class provides values for text alignment in the TextFormat class.
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link></related-links><apiValue id="flash.text:TextFormatAlign:CENTER"><apiName>CENTER</apiName><shortdesc>
	 Constant; centers the text in the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Constant; centers the text in the text field.
	 Use the syntax <codeph>TextFormatAlign.CENTER</codeph>.
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormatAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc>
	 Constant; justifies text within the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Constant; justifies text within the text field. 
	 Use the syntax <codeph>TextFormatAlign.JUSTIFY</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormatAlign:LEFT"><apiName>LEFT</apiName><shortdesc>
	 Constant; aligns text to the left within the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Constant; aligns text to the left within the text field.
	 Use the syntax <codeph>TextFormatAlign.LEFT</codeph>.
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormatAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	 Constant; aligns text to the right within the text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Constant; aligns text to the right within the text field.
	 Use the syntax <codeph>TextFormatAlign.RIGHT</codeph>.
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:Font"><apiName>Font</apiName><shortdesc>
 The Font class is used to manage embedded fonts in SWF files.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The Font class is used to manage embedded fonts in SWF files. Embedded fonts
 are represented as a subclass of the Font class. The Font class is currently useful only to 
 find out information about embedded fonts; you cannot alter a font by
 using this class.
 
 You cannot use the Font class to load external fonts, or to create an instance 
 of a Font object by itself. Use the Font class as an abstract base class.
 
 </apiDesc></apiClassifierDetail><apiOperation id="flash.text:Font:enumerateFonts"><apiName>enumerateFonts</apiName><shortdesc> 
    Specifies whether to provide a list of the currently available embedded fonts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>A list of available fonts as an array of Font objects.
	</apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>enumerateDeviceFonts</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether you want to limit the list to only the currently available embedded fonts. 
        If this is set to <codeph>true</codeph> then a list of all fonts, both device fonts and embedded fonts, is returned.
        If this is set to <codeph>false</codeph> then only a list of embedded fonts is returned.
        </apiDesc></apiParam></apiOperationDef><apiDesc> 
    Specifies whether to provide a list of the currently available embedded fonts.
        </apiDesc><example conref="examples\Font.enumerateFonts.1.as"> This example first calls the static method <codeph>Font.enumerateFonts()</codeph>
 to get a list of all device and embedded fonts. Then it sorts the resulting Array of Font objects 
 by the <codeph>fontName</codeph> property.
 
 <p>Next the example shows how to call the <codeph>Font.enumerateFonts()</codeph> method with the
 <codeph>enumerateDeviceFonts</codeph> parameter set to false. The resulting Array only includes 
 embedded Font objects. (If you run this code within an application that does not contain
 any embedded fonts, the <codeph>embeddedFonts</codeph> array will be empty.)</p>
<codeblock>
 
import flash.text.Font;

var allFonts:Array = Font.enumerateFonts(true);
allFonts.sortOn("fontName", Array.CASEINSENSITIVE);

var embeddedFonts:Array = Font.enumerateFonts(false);
embeddedFonts.sortOn("fontName", Array.CASEINSENSITIVE);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:Font:hasGlyphs"><apiName>hasGlyphs</apiName><shortdesc> 
        Specifies whether a provided string can be displayed using the currently assigned font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of <codeph>true</codeph> if the specified string can be fully displayed using this font.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The string to test against the current font.
        </apiDesc></apiParam></apiOperationDef><apiDesc> 
        Specifies whether a provided string can be displayed using the currently assigned font.
        </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text:Font:registerFont"><apiName>registerFont</apiName><shortdesc> 
	Registers a font class in the global font list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>font</apiItemName><apiOperationClassifier>Class</apiOperationClassifier><apiDesc>The class you want to add to the global font list.
	</apiDesc></apiParam></apiOperationDef><apiDesc> 
	Registers a font class in the global font list.
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text:Font:fontName:get"><apiName>fontName</apiName><shortdesc> 
	The name of an embedded font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	The name of an embedded font. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:Font:fontStyle:get"><apiName>fontStyle</apiName><shortdesc> 
	The style of the font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	The style of the font. This value can be any of the values defined in the FontStyle class.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#FontStyle"><linktext>flash.text.FontStyle</linktext></link></related-links></apiValue><apiValue id="flash.text:Font:fontType:get"><apiName>fontType</apiName><shortdesc> 
	The type of the font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	The type of the font. This value can be any of the constants defined in the FontType class.
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#FontType"><linktext>flash.text.FontType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextRenderer"><apiName>TextRenderer</apiName><shortdesc>
 The TextRenderer class provides functionality for the advanced anti-aliasing capability of  
 embedded fonts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>-- Class sample changed due to bug 193833
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>Controls the anti-aliasing of embedded fonts.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextRenderer class provides functionality for the advanced anti-aliasing capability of  
 embedded fonts. Advanced anti-aliasing allows font faces to render at very high quality at 
 small sizes. Use advanced anti-aliasing with applications that have a lot of small text. Adobe does not recommend using advanced 
 anti-aliasing for very large fonts (larger than 48 points).
 Advanced anti-aliasing is available in Flash Player 8 and later only.
 
 <p>To set advanced anti-aliasing on a text field, set the <codeph>antiAliasType</codeph> property of
 the TextField instance.</p>
 
 <p>Advanced anti-aliasing provides continuous stroke modulation (CSM), which is continuous 
 modulation of both stroke weight and edge sharpness. As an advanced feature, you can 
 use the <codeph>setAdvancedAntiAliasingTable()</codeph> method to define settings for specific
 typefaces and font sizes.</p>
 
 </apiDesc><example conref="examples\TextRendererExample2.as"> The following example creates the TextRendererExample class
 to demonstrate visual examples of advanced anti-aliasing settings with small
 and large font sizes. Before testing this example, you will need to embed a
 font.
 If you are using Flex, embed a font in the following manner:
 <ol>
    <li>Place the Georgia font, named georgia.ttf in the same directory as this AS file.</li>
    <li>Add the following lines directly underneath the class definition:</li>
    <li><codeph>[Embed(source="georgia.ttf", fontFamily="Georgia")]</codeph></li>
    <li><codeph>private var embeddedFont:String;</codeph></li>
 </ol>
 If you are using Flash, embed a font in the following manner:
 <ol>
     <li>Place a text field on the stage and select it.</li>
     <li>In the Property Inspector, set that text field's font to Georgia</li>
     <li>In the Property Inspector, press "Embed..." and select "All"</li>
 </ol>
 <p> <b>Notes:</b>
  <ul>
     <li>You will need to compile the SWF file with "Local playback security" set to "Access local files only".</li>
    </ul>
 </p>
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.events.*;
    import flash.text.*;
    
    public class TextRendererExample2 extends Sprite {

        private var gutter:int = 10;

        public function TextRendererExample2() {
            createTextField(8,AntiAliasType.NORMAL);
            createTextField(8,AntiAliasType.ADVANCED);
            createTextField(24,AntiAliasType.NORMAL);
            createTextField(24,AntiAliasType.ADVANCED);
        }
            
        private function createTextField(fontSize:Number,antiAliasType:String):TextField {
            var tf:TextField = new TextField();
            tf.embedFonts = true;
            tf.autoSize = TextFieldAutoSize.LEFT;
            tf.antiAliasType = antiAliasType;
            tf.defaultTextFormat = getTextFormat(fontSize);
            tf.selectable = false;
            tf.mouseEnabled = true;
            tf.text = "The quick brown fox jumped over the lazy dog.";
            if(numChildren &gt; 0) {
                var sibling:DisplayObject = getChildAt(numChildren - 1);
                tf.y = sibling.y + sibling.height + gutter;
            }
            addChild(tf);
            return tf;
        }
        
        private function getTextFormat(fontSize:Number):TextFormat {
            var format:TextFormat = new TextFormat();
            format.size = fontSize;
            format.font = "Georgia";
            return format;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link></related-links><apiOperation id="flash.text:TextRenderer:setAdvancedAntiAliasingTable"><apiName>setAdvancedAntiAliasingTable</apiName><shortdesc>
	 Sets a custom continuous stroke modulation (CSM) lookup table for a font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates two anti-alias entries and two text fields to 
	 illustrate them. For this example to work, the SWF file must have a shared font embedded with a linkage identifier of <code>
	 "myArial"</code>. 
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library.</li>
	 <li>Click the Library options menu in the upper-right corner of the Library.</li>
	 <li>Select New Font from the pop-up menu.</li>
	 <li>Name the font <b>myArial</b>.</li>
	 <li>Select Arial from the font pop-up menu.</li>
	 <li>Click OK.</li>
	 <li>Right-click the newly created font, and select Linkage.</li>
	 <li>Select the Export for ActionScript check box.</li>
	 <li>Click OK to accept the default identifier, myArial.</li>
	 </ol>
	 
	 <listing version="2.0">
	 import flash.text.TextRenderer;
	 
	 var antiAliasEntry_1 = {fontSize:24, insideCutoff:1.61, outsideCutoff:-3.43};
	 var antiAliasEntry_2 = {fontSize:48, insideCutoff:0.8, outsideCutoff:-0.8};
	 var arialTable:Array = new Array(antiAliasEntry_1, antiAliasEntry_2);
	 
	 var lbl_1:TextField = createLabel(0, 0, 300, 100, 24);
	 var lbl_2:TextField = createLabel(0, 100, 300, 100, 48);
	 
	 TextRenderer.setAdvancedAntiAliasingTable("Arial", "none", "dark", arialTable);
	 
	 function createLabel(x:Number, y:Number, width:Number, height:Number, fontSize:Number):TextField {
	 var depth:Number = this.getNextHighestDepth();
	 
	 var tmpTxt = this.createTextField("txt_" + depth, depth, x, y, width, height);
	 tmpTxt.antiAliasType = "advanced";
	 tmpTxt.gridFitType = "pixel";
	 tmpTxt.border = true;
	 tmpTxt.text = "Hello World";
	 tmpTxt.embedFonts = true;
	 tmpTxt.setTextFormat(getTextFormat(fontSize));
	 return tmpTxt;
	 }
	 
	 function getTextFormat(fontSize:Number):TextFormat {
	 	var tf:TextFormat = new TextFormat();
	 	tf.align = "center";
	 	tf.size = fontSize;
	 	tf.font = "myArial";
	 	return tf;
	 }
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The name of the font for which you are applying settings.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fontStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The font style indicated by using one of the values from 
	 the flash.text.FontStyle class.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>colorType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>This value determines whether the stroke is dark or whether it is light. 
	 Use one of the values from the flash.text.TextColorType class. 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>advancedAntiAliasingTable</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>An array of one or more CSMSettings objects 
	 for the specified font. Each object contains the following properties:
	 
	 <ul>
	 
	   <li><codeph>fontSize</codeph></li>
	   <li><codeph>insideCutOff</codeph></li>
	   <li><codeph>outsideCutOff</codeph></li>
	 
	 </ul>
	 
	 <p>The <codeph>advancedAntiAliasingTable</codeph> array can contain multiple entries 
	 that specify CSM settings for different font sizes.</p>
	 
	 <p>The <codeph>fontSize</codeph> is the size, in pixels, for which the settings apply.</p>
	 
	 <p>Advanced anti-aliasing uses adaptively sampled distance fields (ADFs) to 
	 represent the outlines that determine a glyph. Flash Player uses an outside cutoff value
	 (<codeph>outsideCutOff</codeph>), 
	 below which densities are set to zero, and an inside cutoff value (<codeph>insideCutOff</codeph>),
	 above which densities 
	 are set to a maximum density value (such as 255). Between these two cutoff values, 
	 the mapping function is a linear curve ranging from zero at the outside cutoff
	 to the maximum density at the inside cutoff.</p>
	 
	 <p>Adjusting the outside and inside cutoff values affects stroke weight and 
	 edge sharpness. The spacing between these two parameters is comparable to twice the 	
	 filter radius of classic anti-aliasing methods; a narrow spacing provides a sharper edge, 
	 while a wider spacing provides a softer, more filtered edge. When
	 the spacing is zero, the resulting density image is a bi-level bitmap. When the
	 spacing is very wide, the resulting density image has a watercolor-like edge.</p>
	 
	 <p>Typically, users prefer sharp, high-contrast edges at small point sizes, and
	 softer edges for animated text and larger point sizes. </p>
	 
	 <p>The outside cutoff typically has a negative value, and the inside cutoff typically 
	 has a positive value, and their midpoint typically lies near zero. Adjusting these 
	 parameters to shift the midpoint toward negative infinity increases the stroke 
	 weight; shifting the midpoint toward positive infinity decreases the stroke weight. 
	 Make sure that the outside cutoff value is always less than or equal to the inside cutoff value.</p>
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sets a custom continuous stroke modulation (CSM) lookup table for a font. 
	 Flash Player attempts to detect the best CSM for your font. If you are not 
	 satisfied with the CSM that the Flash Player provides, you can customize 
	 your own CSM by using the <codeph>setAdvancedAntiAliasingTable()</codeph> method.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#FontStyle"><linktext>flash.text.FontStyle</linktext></link><link href="flash.text.xml#TextColorType"><linktext>flash.text.TextColorType</linktext></link><link href="flash.text.xml#CSMSettings"><linktext>CSMSettings</linktext></link></related-links></apiOperation><apiValue id="flash.text:TextRenderer:displayMode:get"><apiName>displayMode</apiName><shortdesc> 
	 Controls the rendering of advanced anti-aliased text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>"default"
	 </apiDefaultValue></apiValueDef><apiDesc> 
	 Controls the rendering of advanced anti-aliased text. The visual quality of text is very subjective, and while
	 Flash Player tries to use the best settings for various conditions, designers may choose a different
	 look or feel for their text. Also, using <codeph>displayMode</codeph> allows a designer to override Flash 
	 Player's subpixel choice and create visual consistency independent of the user's hardware. Use the values in the TextDisplayMode class to set this property.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextDisplayMode"><linktext>TextDisplayMode class</linktext></link></related-links></apiValue><apiValue id="flash.text:TextRenderer:maxLevel:get"><apiName>maxLevel</apiName><shortdesc>
	 The adaptively sampled distance fields (ADFs) quality level for advanced anti-aliasing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example specifies the <code>maxLevel</code> value for the entire
	 SWF file, and then displays a text field with the value set. For the 
	 text in this example to display correctly, there must be a font symbol available with
	 a linkage identifier of <code>"CustomFont"</code>. 
	 <listing version="2.0">
	 import flash.text.TextRenderer;
	 TextRenderer.maxLevel = 3;
	 
	 var txtFormat:TextFormat = new TextFormat();
	 txtFormat.font = "CustomFont";
	 txtFormat.size = 64;
	 
	 var label:TextField = this.createTextField("label", this.getNextHighestDepth(), 10, 10, 500, 100);
	 label.setNewTextFormat(txtFormat);
	 label.text = "Hello World";
	 label.embedFonts = true;
	 trace("TextRenderer.maxLevel: " + TextRenderer.maxLevel);
	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiDefaultValue>4
	 </apiDefaultValue></apiValueDef><apiDesc>
	 The adaptively sampled distance fields (ADFs) quality level for advanced anti-aliasing. The only acceptable values are 
	 3, 4, and 7. 
	 
	 <p>Advanced anti-aliasing uses ADFs to 
	 represent the outlines that determine a glyph. The higher the quality, the more 
	 cache space is required for ADF structures. A value of <codeph>3</codeph> takes the least amount 
	 of memory and provides the lowest quality. Larger fonts require more cache space; 
	 at a font size of 64 pixels, the quality level increases from <codeph>3</codeph> to <codeph>4</codeph> or 
	 from <codeph>4</codeph> to <codeph>7</codeph> unless, the level is already set to <codeph>7</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextLineMetrics"><apiName>TextLineMetrics</apiName><shortdesc>
 The TextLineMetrics class contains information about the text position and measurements of a
 line of text within a text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Contains information about the text position and measurements of a line of text in a text field.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextLineMetrics class contains information about the text position and measurements of a
 <i>line of text</i> within a text field. All measurements are in pixels. Objects of this class are returned by the
 <codeph>flash.text.TextField.getLineMetrics()</codeph> method.
 <p>For measurements related to the text field containing the line of text (for example, the "Text Field height" measurement in the diagram), see flash.text.TextField. </p>
 
 <p>The following diagram indicates the points and measurements of a text field and the line of text the field contains:</p>
 <p>
 <adobeimage alt="An image illustrating text metrics" href="../../images/text-metrics.jpg"/></p>
 
 </apiDesc><example conref="examples\TextLineMetricsExample.as"> The following example creates the classes TextLineMetricsExample and 
 LineMetricsReader to print out a message in the Flash Player via an XML object.  This
 is accomplished using the following steps:
 <ol>
  <li>Create a property called <codeph>label</codeph> of type TextField.</li>
  <li>The constructor calls <codeph>configureAssets()</codeph>, which does the following:
  <ul>
      <li>Sets the stage's alignment to top-left and no scale.</li>
      <li>Creates a new TextField object named <codeph>label</codeph>.</li>
      <li>Enables <codeph>label</codeph>'s background and sets the color to white.</li>
      <li>Allows <codeph>label</codeph>'s text to span multiple lines with automatic word wrapping.</li>
      <li>Assigns the result of a call to <codeph>getLabelText()</codeph> to the <codeph>text</codeph> property 
      of <codeph>label</codeph>.  The <codeph>getLabelText()</codeph> method creates a variable of type XML and assigns
      it to an XML node named <codeph>body</codeph>, which is populated with a long sentence.</li>
      <li>Adds <codeph>label</codeph> to the display list using <codeph>addChild()</codeph>.</li>
  </ul>
  </li>
  <li>A method that listens for <codeph>resize</codeph> events performed on the stage is then added called
  <codeph>resizeHandler()</codeph>.  Every time the Flash Player window size is changed, a <codeph>RESIZE</codeph>
  event is dispatched and the following happens: 
  <ul>
      <li><codeph>draw()</codeph> is called to ensure that <codeph>label</codeph> appears in the center of the 
      stage and surrounded by a 10-pixel buffer.</li>
      <li><codeph>setTimeout()</codeph> then executes <codeph>showMetrics()</codeph> after a short delay.  The
      delay is added because the line metrics are not updated until after the <codeph>RESIZE</codeph> event has 
      completed and the stage has fully re-drawn.</li>
      <li><codeph>showMetrics()</codeph> assigns a TextLineMetrics variable named <codeph>metrics</codeph> to
      the result of a call to <codeph>getLineMetrics()</codeph> and this variable is then passed to 
      a new instance of a LineMetricsReader instance named <codeph>reader</codeph>.  The two
      variables are then used within calls to <codeph>trace()</codeph> to print out the first (and only) 
      line of <codeph>label</codeph> and information provided by the LineMetricsReader instance through its
      <codeph>toString()</codeph> method.</li>
  </ul>
  </li>
  <li>The constructor forces a single dispatch of the <codeph>resize</codeph> event to force
  <codeph>label</codeph> to be drawn correctly when the SWF file is first loaded.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.*;
    import flash.text.TextField;
    import flash.text.TextLineMetrics;
    import flash.utils.setTimeout;

    public class TextLineMetricsExample extends Sprite {
        private var gutter:int = 10;
        private var label:TextField;

        public function TextLineMetricsExample() {
            configureAssets();
            configureListeners();
            resizeHandler(new Event(Event.RESIZE));
        }

        private function showMetrics():void {
            var metrics:TextLineMetrics = label.getLineMetrics(0);
            var reader:LineMetricsReader = new LineMetricsReader(metrics);
            trace("lineText: " + label.getLineText(0));
            trace("metrics: " + reader);
        }

        private function configureAssets():void {
            stage.align = StageAlign.TOP_LEFT;
            stage.scaleMode = StageScaleMode.NO_SCALE;

            label = new TextField();
            label.background = true;
            label.backgroundColor = 0xFFFFFF;
            label.multiline = true;
            label.wordWrap = true;
            label.text = getLabelText();
            addChild(label);
        }

        private function configureListeners():void {
            stage.addEventListener(Event.RESIZE, resizeHandler);
        }

        private function resizeHandler(event:Event):void {
            draw();
            setTimeout(showMetrics, 100);
        }

        private function draw():void {
            label.x = gutter;
            label.y = gutter;
            label.width = stage.stageWidth - (gutter * 2);
            label.height = stage.stageHeight - (gutter * 2);
        }

        private function getLabelText():String {
            var text:XML = &lt;body&gt;The Flex product line enables developers to build rich Internet applications that blend the responsiveness of desktop software, the cross-platform reach of the web, and the expressiveness of the Flash Platform.&lt;/body&gt;
            return text.toString();
        }
    }
}

import flash.text.TextLineMetrics;

class LineMetricsReader {
    private var metrics:TextLineMetrics;

    public function LineMetricsReader(metrics:TextLineMetrics) {
        this.metrics = metrics;
    }

    public function toString():String {
        return "[TextLineMetrics ascent:" + metrics.ascent
            + ", descent:" + metrics.descent
            + ", leading:" + metrics.leading
            + ", width:" + metrics.width
            + ", height:" + metrics.height
            + ", x:" + metrics.x
            + "]";
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiConstructor id="flash.text:TextLineMetrics:TextLineMetrics"><apiName>TextLineMetrics</apiName><shortdesc>
	 Creates a TextLineMetrics object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The left position of the first character in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The width of the text of the selected lines (not necessarily the complete text) in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The height of the text of the selected lines (not necessarily the complete text) in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>ascent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The length from the baseline to the top of the line height in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>descent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The length from the baseline to the bottom depth of the line in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The measurement of the vertical distance between the lines of text.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Contains information about the text position and measurements of a line of text in a text field.
  	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates a TextLineMetrics object.  The TextLineMetrics object contains information about 
	 the text metrics of a line of text in a text field.  Objects of this class are returned by the
	 <codeph>flash.text.TextField.getLineMetrics()</codeph> method.
	 <p>See the diagram in the overview for this class for the properties in context.</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link><link href="flash.text.xml#TextField/getLineMetrics()"><linktext>flash.text.TextField.getLineMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text:TextLineMetrics:ascent"><apiName>ascent</apiName><shortdesc>
	 The ascent value of the text is the length from the baseline to the top of the line height in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>including accents? is it really the line or the font itself?
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The ascent value of the text is the length from the baseline to the top of the line height in pixels. See the 
	 "Ascent" measurement in the overview diagram for this class.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:descent"><apiName>descent</apiName><shortdesc>
	 The descent value of the text is the length from the baseline to the bottom depth of the line in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>is it really the line? or the font itself?
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The descent value of the text is the length from the baseline to the bottom depth of the line in pixels. 
	 See the "Descent" measurement in the overview diagram for this class.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:height"><apiName>height</apiName><shortdesc>
	 The height value of the text of the selected lines (not necessarily the complete text) in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The height value of the text of the selected lines (not necessarily the complete text) in pixels. The height of the
	 text line does not include the gutter height. See the "Line height" measurement in the overview diagram 
	 for this class.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:leading"><apiName>leading</apiName><shortdesc>
	 The leading value is the measurement of the vertical distance between the lines of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The leading value is the measurement of the vertical distance between the lines of text.
	 See the "Leading" measurement in the overview diagram for this class.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:width"><apiName>width</apiName><shortdesc>
	 The width value is the width of the text of the selected lines (not necessarily the complete text) in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The width value is the width of the text of the selected lines (not necessarily the complete text) in pixels. The width of the
	 text line is not the same as the width of the text field. The width of the text line is relative to the 
	 text field width, minus the gutter width of 4 pixels (2 pixels on each side). See the "Text Line width" 
	 measurement in the overview diagram for this class.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:x"><apiName>x</apiName><shortdesc>
	 The x value is the left position of the first character in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The x value is the left position of the first character in pixels. This value includes the margin,
	 indent (if any), and gutter widths. See the "Text Line x-position" in the overview diagram for this class.
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:StyleSheet"><apiName>StyleSheet</apiName><shortdesc>
 The StyleSheet class lets you create a StyleSheet object that contains text 
 formatting rules for font size, color, and other styles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, StyleSheet class, built-in class, style sheet, stylesheet
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>Lets you create a StyleSheet object.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 The StyleSheet class lets you create a StyleSheet object that contains text 
 formatting rules for font size, color, and other styles. You can then apply 
 styles defined by a style sheet to a TextField object that contains HTML- or 
 XML-formatted text. The text in the TextField object is automatically 
 formatted according to the tag styles defined by the StyleSheet object. 
 You can use text styles to define new formatting tags, redefine built-in HTML 
 tags, or create style classes that you can apply to certain HTML tags.
 
 <p>To apply styles to a TextField object, assign the StyleSheet
 object to a TextField object's <codeph>styleSheet</codeph> property.</p>
 <p><b>Note:</b> A text field with a style sheet is not editable. In other words, a text field with the <codeph>type</codeph> property set to <codeph>TextFieldType.INPUT</codeph> applies the StyleSheet to the default text for the text field, but the content will no longer be editable by the user. Consider using the TextFormat class to assign styles to input text fields.</p> 
 
 <p>Flash Player supports a subset of properties in the original CSS1 specification 
 (<xref href="http://www.w3.org/TR/REC-CSS1" scope="external">www.w3.org/TR/REC-CSS1</xref>). 
 The following table shows the supported Cascading Style Sheet (CSS) properties and values, as well as their corresponding 
 ActionScript property names. (Each ActionScript property name is derived from the corresponding 
 CSS property name; if the name contains a hyphen, the hyphen is omitted and the subsequent character is capitalized.)</p>
 
 <adobetable class="innertable">
 
   
 
   
 
   
 
   
 
   
 
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
 <tgroup cols="3"><thead><row><entry>CSS property</entry><entry>ActionScript property</entry><entry>Usage and supported values</entry></row></thead><tbody><row>
     <entry><codeph>color</codeph></entry>
     <entry><codeph>color</codeph></entry>
     <entry>Only hexadecimal color values are supported. Named colors (such as <codeph>blue</codeph>) 
  are not supported. Colors are written in the following format: <codeph>#FF0000</codeph>.</entry>
   </row><row>
     <entry><codeph>display</codeph></entry>
     <entry><codeph>display</codeph></entry>
     <entry>Supported values are <codeph>inline</codeph>, <codeph>block</codeph>, and <codeph>none</codeph>.</entry>
   </row><row>
     <entry><codeph>font-family</codeph></entry>
     <entry><codeph>fontFamily</codeph></entry>
     <entry>A comma-separated list of fonts to use, in descending order of desirability. Any font 
 	family name can be used. If you specify a generic font name, it is converted to an 
 	appropriate device font. The following font conversions are available: <codeph>mono</codeph> is 
 	converted to <codeph>_typewriter</codeph>, <codeph>sans-serif</codeph> is converted to 
 	<codeph>_sans</codeph>, and <codeph>serif</codeph> is converted to <codeph>_serif</codeph>.</entry>
   </row><row>
     <entry><codeph>font-size</codeph></entry>
     <entry><codeph>fontSize</codeph> </entry>
     <entry>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points 
 	are equivalent.</entry>
   </row><row>
     <entry><codeph>font-style</codeph></entry>
     <entry><codeph>fontStyle</codeph></entry>
     <entry>Recognized values are <codeph>normal</codeph> and <codeph>italic</codeph>.</entry>
   </row><row>
     <entry><codeph>font-weight</codeph></entry>
     <entry><codeph>fontWeight</codeph></entry>
     <entry>Recognized values are <codeph>normal</codeph> and <codeph>bold</codeph>.</entry>
   </row><row>
     <entry><codeph>kerning</codeph></entry>
     <entry><codeph>kerning</codeph></entry>
     <entry>Recognized values are <codeph>true</codeph> and <codeph>false</codeph>. 
 	Kerning is supported for embedded fonts only. Certain fonts, such as Courier New, do not support kerning. 
 	The kerning property is only supported in SWF files created in Windows, not in SWF files created on the 
 	Macintosh. However, these SWF files can be played in non-Windows versions of Flash Player and the kerning 
 	still applies.</entry>
   </row><row>
     <entry><codeph>leading</codeph></entry>
     <entry><codeph>leading</codeph></entry>
     <entry>The amount of space that is uniformly distributed between lines. The value specifies the 
 	number of pixels that are added after each line. A negative value condenses the space 
 	between lines. Only the numeric part of the value is used. Units (px, pt) are not parsed; 
 	pixels and points are equivalent.</entry>
   </row><row>
     <entry><codeph>letter-spacing</codeph></entry>
     <entry><codeph>letterSpacing</codeph></entry>
     <entry>The amount of space that is uniformly distributed between characters. 
 	The value specifies the number of pixels that are added after each 
 	character. A negative value condenses the space between characters. Only the numeric part of the 
 	value is used. Units (px, pt) are not parsed; pixels and points are equivalent.</entry>
   </row><row>
     <entry><codeph>margin-left</codeph></entry>
     <entry><codeph>marginLeft</codeph></entry>
     <entry>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and points 
 	are equivalent. </entry>
   </row><row>
     <entry><codeph>margin-right</codeph></entry>
     <entry><codeph>marginRight</codeph></entry>
     <entry>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and 
 	points are equivalent.</entry>
   </row><row>
     <entry><codeph>text-align</codeph></entry>
     <entry><codeph>textAlign</codeph></entry>
     <entry>Recognized values are <codeph>left</codeph>, <codeph>center</codeph>, <codeph>right</codeph>, and 
 	<codeph>justify</codeph>.</entry>
   </row><row>
     <entry><codeph>text-decoration</codeph></entry>
     <entry><codeph>textDecoration</codeph></entry>
     <entry>Recognized values are <codeph>none</codeph> and <codeph>underline</codeph>.</entry>
   </row><row>
     <entry><codeph>text-indent</codeph></entry>
     <entry><codeph>textIndent</codeph></entry>
     <entry>Only the numeric part of the value is used. Units (px, pt) are not parsed; pixels and 
 	points are equivalent. </entry>
   </row></tbody></tgroup></adobetable> 
 
 <p><ph outputclass="flexonly">You can use the StyleSheet class to perform low-level text rendering.
 However, in Flex, you typically use the Label, Text, TextArea, and TextInput controls to process text.</ph></p>
 
 
 </apiDesc><example conref="examples\StyleSheetExample.as"> The following example creates a new style sheet and assigns bold
 and red font treatments to the heading style.
<codeblock>
 
package {
    import flash.display.Sprite;
    import flash.text.StyleSheet;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class StyleSheetExample extends Sprite {

        public function StyleSheetExample() {
            var style:StyleSheet = new StyleSheet();

            var heading:Object = new Object();
            heading.fontWeight = "bold";
            heading.color = "#FF0000";

            var body:Object = new Object();
            body.fontStyle = "italic";

            style.setStyle(".heading", heading);
            style.setStyle("body", body);

            var label:TextField = new TextField();
            label.styleSheet = style;
            label.htmlText = "&lt;body&gt;&lt;span class='heading'&gt;Hello &lt;/span&gt;World...&lt;/body&gt;";
            addChild(label);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiConstructor id="flash.text:StyleSheet:StyleSheet"><apiName>StyleSheet</apiName><shortdesc>
	 Creates a new StyleSheet object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet, constructor
	 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Creates a new StyleSheet object.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#StyleSheet/getStyle()"><linktext>flash.text.StyleSheet.getStyle()</linktext></link></related-links></apiConstructor><apiOperation id="flash.text:StyleSheet:clear"><apiName>clear</apiName><shortdesc>
	 Removes all styles from the style sheet object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.clear, clear
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Removes all styles from the style sheet object.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text:StyleSheet:getStyle"><apiName>getStyle</apiName><shortdesc> 
	 Returns a copy of the style object associated with the style named styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.getStyle, getStyle
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An object.
	 
	 </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>A string that specifies the name of the style to retrieve.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Returns a copy of the style object associated with the style named <codeph>styleName</codeph>. 
	 If there is no style object associated with <codeph>styleName</codeph>, 
	 <codeph>null</codeph> is returned.
	 
	 </apiDesc><example>Please see the <xref href="StyleSheet.html#parseCSS()">parseCSS()</xref> or <xref href="StyleSheet.html#transform()">transform()</xref> 
     method's example for illustrations of how to use the <codeph>getStyle()</codeph> method. 
	 </example></apiOperationDetail><related-links><link href="flash.text.xml#StyleSheet/setStyle()"><linktext>flash.text.StyleSheet.setStyle()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:StyleSheet:parseCSS"><apiName>parseCSS</apiName><shortdesc>
	 Parses the CSS in CSSText and loads the style sheet with it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.parseCSS, parseCSS
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>CSSText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The CSS text to parse (a string).
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Parses the CSS in cssText and loads the StyleSheet with it.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Parses the CSS in <codeph>CSSText</codeph> and loads the style sheet with it. If a style in
	 <codeph>CSSText</codeph> is already in <codeph>styleSheet</codeph>, the properties in
	 <codeph>styleSheet</codeph> are retained, and only the ones in <codeph>CSSText</codeph>
	 are added or changed in <codeph>styleSheet</codeph>.
	 
	 <p>To extend the native CSS parsing capability, you can override this method by creating a subclass
	 of the StyleSheet class.</p>
	 
	 </apiDesc><example conref="examples\StyleSheet_parseCSSExample.as"> In the following example, when a user clicks on the text file,
 CSS styles, loaded from a file, are applied to the content.
 
 <p>In the constructor, a multiline text field is created and its content is
 set to an HTML-formatted string. (The HTML heading and span tags are 
 not rendered before CSS style is applied.) A <codeph>URLRequest</codeph> 
 object is created to identify the location of the CSS file; for this example, the CSS file  
 is in the same directory as the SWF file. The file is loaded with a <codeph>URLLoader</codeph> 
 object. There are two event listeners added for the <codeph>loader</codeph> URLLoader object.
 If an IO error occurs, the <codeph>errorHandler()</codeph> method is invoked, which displays 
 an error message in the text field. After all the data is received and placed in the data 
 property of the <codeph>loader</codeph> URLLoader object, the <codeph>loaderCompleteHandler()</codeph> 
 method is invoked. This method parses the CSS styles from the data loaded from the file and 
 fills the <codeph>sheet</codeph> StyleSheet object with the style definitions.</p>
 
 <p>When the user clicks on the text field, the <codeph>clickHandler()</codeph> method is called. 
 The if statement in the <codeph>clickHandler()</codeph> method checks to make sure the file loading 
 was finished before applying the style sheet to the text field. In order for the style sheet to 
 take effect, the <codeph>htmlText</codeph> property must be reassigned with the content after the 
 style sheet is assigned to the text field. The CSS <codeph>font-family</codeph> and the <codeph>color</codeph> 
 property values for the heading tag also are appended to the content of the text field. (The values 
 of these properties will be "undefined" if style sheet values are not in effect.)</p> 
 
 <p>The following is an example of a content of the CSS file that can be used with this example.
 Before running this example, create a text file, copy the following CSS content into it,  
 then save it with the file name <codeph>test.css</codeph> and place it in the same directory as the SWF file.</p>
 
 <pre>
   p {
      font-family: Times New Roman, Times, _serif;
      font-size: 14;
       font-Style: italic;
        margin-left: 10;  
   }
   h1 {
      font-family: Arial, Helvetica, _sans;
      font-size: 20;
      font-weight: bold;
   }
   .bluetext {
      color: #0000CC;
   }
 </pre>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.StyleSheet;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.IOErrorEvent;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class StyleSheet_parseCSSExample extends Sprite {
        private var loader:URLLoader = new URLLoader();
        private var field:TextField = new TextField();
        private var exampleText:String = "&lt;h1&gt;This is a headline&lt;/h1&gt;"
                    + "&lt;p&gt;This is a line of text. &lt;span class='bluetext'&gt;" 
                    + "This line of text is colored blue.&lt;/span&gt;&lt;/p&gt;";
        private var sheet:StyleSheet = new StyleSheet();
        private var cssReady:Boolean = false;

        public function StyleSheet_parseCSSExample() {
            field.x = 10;
            field.y = 10;
            field.background = true;
            field.multiline = true;
            field.autoSize = TextFieldAutoSize.LEFT;
            field.htmlText = exampleText;

            field.addEventListener(MouseEvent.CLICK, clickHandler);
            
            addChild(field);
            
            var req:URLRequest = new URLRequest("test.css");
            loader.load(req);

            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);
        }

        public function errorHandler(e:IOErrorEvent):void {
            field.htmlText = "Couldn't load the style sheet file.";
        }

        public function loaderCompleteHandler(event:Event):void {
            sheet.parseCSS(loader.data);
            cssReady = true;
        }

        public function clickHandler(e:MouseEvent):void {

            if (cssReady) {
                field.styleSheet = sheet;
                field.htmlText = exampleText;
                
                var style:Object = sheet.getStyle("h1");
                field.htmlText += "&lt;p&gt;Headline font-family is: " + style.fontFamily + "&lt;/p&gt;";
                field.htmlText += "&lt;p&gt;Headline color is: " + style.color + "&lt;/p&gt;";  

            } else {
                field.htmlText = "Couldn't apply the CSS styles.";
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:StyleSheet:setStyle"><apiName>setStyle</apiName><shortdesc>
	 Adds a new style with the specified name to the style sheet object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>The following example adds a style named <code>emphasized</code> to the 
	 StyleSheet <code>myStyleSheet</code>. The style includes two style properties: <code>color</code> 
	 and <code>fontWeight</code>. The style object is defined with the <code>{}</code> operator.
	 <pre><code>
	 myStyleSheet.setStyle("emphasized", {color:&#39;#000000&#39;,fontWeight:&#39;bold&#39;});
	 </code></pre>
	 
	 <p>You could also create a style object using an instance of the Object class, and 
	 then pass that object (<code>styleObj</code>) as 
	 the <code>style</code> parameter, as the next example shows:</p>
	 <listing version="2.0">
	 import TextField.StyleSheet;
	 var my_styleSheet:StyleSheet = new StyleSheet();
	 
	 var styleObj:Object = new Object();
	 styleObj.color = "#000000";
	 styleObj.fontWeight = "bold";
	 my_styleSheet.setStyle("emphasized", styleObj);
	 delete styleObj;
	 
	 var styleNames_array:Array = my_styleSheet.getStyleNames();
	 for (var i=0;i&lt;styleNames_array.length;i++) {
	 	var styleName:String = styleNames_array[i];
	 	var thisStyle:Object = my_styleSheet.getStyle(styleName);
	 	trace(styleName);
	 	for (var prop in thisStyle) {
	 		trace("\t"+prop+": "+thisStyle[prop]);
	 	}
	 	trace("");
	 }
	 </listing>
	 <p><span class="flashonly">The following information appears in the Output 
	 panel:</span><span class="flexonly">The following information writes to the 
	 log file:</span></p>
	 <pre><code>
	 emphasized
	   fontWeight: bold
	   color: #000000
	 </code></pre>
	 
	 <p><strong>Note: </strong>Because Flash Player creates a copy of the style object
	 you pass to <code>setStyle()</code>, the <code> delete styleObj</code> command in the 
	 code example reduces memory usage by deleting the original style object passed to 
	 <code>setStyle()</code>.</p>
	 
	 </oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>A string that specifies the name of the style to add to the style sheet.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>styleObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>An object that describes the style, or <codeph>null</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Adds a new style with the specified name to the style sheet object. 
	 If the named style does not already exist in the style sheet, it is added. 
	 If the named style already exists in the style sheet, it is replaced. 
	 If the <codeph>styleObject</codeph> parameter is <codeph>null</codeph>, the named style is removed.
	 
	 <p>Flash Player creates a copy of the style object that you pass to this method.</p>
	 
	 <p>For a list of supported styles, see the table in the description for the StyleSheet class.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text:StyleSheet:transform"><apiName>transform</apiName><shortdesc>
	 Extends the CSS parsing capability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.transform, transform
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A TextFormat object containing the result of the mapping of CSS rules 
	 to text format properties.
	 
	 </apiDesc><apiOperationClassifier>flash.text:TextFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>formatObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>An object that describes the style, containing style rules as properties of the object,
	 or <codeph>null</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Extends the CSS parsing capability. Advanced developers can override this method by extending the
	 StyleSheet class. 
	 
	 </apiDesc><example conref="examples\StyleSheet_transformExample.as"> This example uses the <codeph>transform()</codeph> method to apply a style 
 from a CSS file to a TextFormat object for a text field.
 
 <p>CSS styles are used usually to format HTML content. However, 
 by using <codeph>transform()</codeph> method of a StyleSheet object, specific
 CSS styles can be assigned to a TextFormat object and then applied to any text field.</p> 
 
 <p>The <codeph>URLRequest</codeph> and <codeph>URLLoader</codeph> objects are used to 
 load the CSS file. An event listener is added for the <codeph>Event.COMPLETE</codeph> 
 event, which occurs after all the data is received and placed in the data property of the 
 <codeph>loader</codeph> URLLoader object. The <codeph>loaderCompleteHandler()</codeph> method 
 then parses the CSS from the data loaded from the file and fills the <codeph>sheet</codeph> 
 StyleSheet object with the styles. The <codeph>getStyle()</codeph> method of the style sheet 
 retrieves the HTML paragraph styles, which are then assigned to the <codeph>cssFormat</codeph> 
 TextFormat object by using style sheet's <codeph>transform()</codeph> method. Finally, the default text 
 format of the <codeph>inputField</codeph> text field is set to the new <codeph>cssFormat</codeph> text format.</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.StyleSheet;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.text.TextFieldType;
    import flash.events.IOErrorEvent;
    import flash.events.Event;

    public class StyleSheet_transformExample extends Sprite {
        private var loader:URLLoader = new URLLoader();
        private var inputField:TextField = new TextField();
        private var sheet:StyleSheet = new StyleSheet();

        public function StyleSheet_transformExample() {
            inputField.x = 10;
            inputField.y = 10;
            inputField.background = true;
            inputField.width = 300;
            inputField.height = 200;
            inputField.wordWrap = true;
            inputField.multiline = true;    
            inputField.type = TextFieldType.INPUT;

            addChild(inputField);
            
            var req:URLRequest = new URLRequest("test.css");
            loader.load(req);

            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);
        }

        public function errorHandler(e:IOErrorEvent):void {
            inputField.htmlText = "Couldn't load the style sheet file.";
        }

        public function loaderCompleteHandler(event:Event):void {
            var cssFormat:TextFormat = new TextFormat();
            sheet.parseCSS(loader.data);
            var style:Object = sheet.getStyle("p");
            cssFormat = sheet.transform(style);
            inputField.defaultTextFormat = cssFormat;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiValue id="flash.text:StyleSheet:styleNames:get"><apiName>styleNames</apiName><shortdesc>
	 An array that contains the names (as strings) of all of the styles registered
	 in this style sheet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.getStyleNames, getStyleNames
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier><apiTipTexts><apiTipText>Returns the names of all the styles registered in this StyleSheet.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 An array that contains the names (as strings) of all of the styles registered
	 in this style sheet.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextSnapshot"><apiName>TextSnapshot</apiName><shortdesc> 
 TextSnapshot objects let you work with static text in a movie clip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
 TextSnapshot objects let you work with static text in a movie clip. You can use them, for example, 
 to lay out text with greater precision than that allowed by dynamic text, but still access the text
 in a read-only way.
 
 <p>You don't use a constructor to create a TextSnapshot object; it is returned by 
 <codeph>flash.display.DisplayObjectContainer.textSnapshot</codeph> property.</p>
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObjectContainer/textSnapshot"><linktext>flash.display.DisplayObjectContainer.textSnapshot</linktext></link></related-links><apiOperation id="flash.text:TextSnapshot:findText"><apiName>findText</apiName><shortdesc>
	 Searches the specified TextSnapshot object and returns the position of the first 
	 occurrence of textToFind found at or after beginIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.findText, findText
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The zero-based index position of the first occurrence of the specified text, or -1.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Specifies the starting point to search for the specified text.	 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>textToFind</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Specifies the text to search for. If you specify a string literal instead of a
	 variable of type String, enclose the string in quotation marks.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>caseSensitive</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Specifies whether the text must match the case of the string in 
	 <codeph>textToFind</codeph>. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Searches the specified TextSnapshot object and returns the position of the first 
	 occurrence of <codeph>textToFind</codeph> found at or after <codeph>beginIndex</codeph>. If 
	 <codeph>textToFind</codeph> is not found, the method returns <codeph>-1</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/getText()"><linktext>flash.text.TextSnapshot.getText()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getSelected"><apiName>getSelected</apiName><shortdesc>
	 Returns a Boolean value that specifies whether a TextSnapshot object contains selected text in 
	 the specified range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.getSelected, getSelected
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean value that indicates whether at least one character in the given range has been 
	 selected by the corresponding <codeph>setSelected()</codeph> method (<codeph>true</codeph>); otherwise, 
	 <codeph>false</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Indicates the position of the first character to be examined. 
	 Valid values for <codeph>beginIndex</codeph> are <codeph>0</codeph> through 
	 <codeph>TextSnapshot.charCount - 1</codeph>. If <codeph>beginIndex</codeph> is a negative value, 
	 <codeph>0</codeph> is used.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>A value that is one greater than the index of the last character to be examined. Valid values 
	 for <codeph>endIndex</codeph> are <codeph>0</codeph> through <codeph>charCount</codeph>. 
	 The character indexed by the <codeph>endIndex</codeph> parameter is not included in the extracted
	 string. If this parameter is omitted, <codeph>charCount</codeph> is used. If this value is less than
	 or equal to the value of <codeph>beginIndex</codeph>, <codeph>beginIndex + 1</codeph> is used.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns a Boolean value that specifies whether a TextSnapshot object contains selected text in 
	 the specified range. 
	 
	 <p>To search all characters, pass a value of <codeph>0</codeph> for <codeph>start</codeph>, and 
	 <codeph>charCount</codeph> (or any very large number) for <codeph>end</codeph>. 
	 To search a single character, pass the <codeph>end</codeph> parameter a value that is one greater 
	 than the <codeph>start</codeph> parameter.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/charCount"><linktext>flash.text.TextSnapshot.charCount</linktext></link><link href="flash.text.xml#TextSnapshot/getText()"><linktext>flash.text.TextSnapshot.getText()</linktext></link><link href="flash.text.xml#TextSnapshot/getSelectedText()"><linktext>flash.text.TextSnapshot.getSelectedText()</linktext></link><link href="flash.text.xml#TextSnapshot/setSelected()"><linktext>flash.text.TextSnapshot.setSelected()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getSelectedText"><apiName>getSelectedText</apiName><shortdesc>
	 Returns a string that contains all the characters specified by the corresponding 
	 setSelected() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.getSelectedText, getSelectedText
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A string that contains all the characters specified by the 
	 corresponding <codeph>setSelected()</codeph> command.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>includeLineEndings</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>An optional Boolean value that specifies 
	 whether newline characters are inserted into the returned string where 
	 appropriate. The default value is <codeph>false</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns a string that contains all the characters specified by the corresponding 
	 <codeph>setSelected()</codeph> method. If no characters are specified (by the 
	 <codeph>setSelected()</codeph> method), an empty string is returned.
	 
	 <p>If you pass <codeph>true</codeph> for <codeph>includeLineEndings</codeph>, 
	 newline characters are inserted in the return string, and 
	 the return string might be longer than the input range. If 
	 <codeph>includeLineEndings</codeph> is <codeph>false</codeph> or omitted, the method returns 
	 the selected text without adding any characters.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/getSelected()"><linktext>flash.text.TextSnapshot.getSelected()</linktext></link><link href="flash.text.xml#TextSnapshot/setSelected()"><linktext>flash.text.TextSnapshot.setSelected()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getText"><apiName>getText</apiName><shortdesc>
	 Returns a string that contains all the characters specified by the beginIndex
	 and endIndex parameters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.getText, getText
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A string containing the characters in the specified range, or an empty string if no 
	 characters are found in the specified range.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Indicates the position of the first character to be included in the
	 returned string. Valid values for <codeph>beginIndex</codeph> are<codeph>0</codeph> through 
	 <codeph>charCount - 1</codeph>. If <codeph>beginIndex</codeph> is a negative value, 
	 <codeph>0</codeph> is used.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>A value that is one greater than the index of the last character to be examined. Valid values
	 for <codeph>endIndex</codeph> are <codeph>0</codeph> through <codeph>charCount</codeph>. The character 
	 indexed by the <codeph>endIndex</codeph> parameter is not included in the extracted string. If this
	 parameter is omitted, <codeph>charCount</codeph> is used. If this value is less than or 
	 equal to the value of <codeph>beginIndex</codeph>, <codeph>beginIndex + 1</codeph> is used.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>includeLineEndings</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>An optional Boolean value that specifies whether newline characters 
	 are inserted (<codeph>true</codeph>) or are not inserted (<codeph>false</codeph>) into the returned string. 
	 The default value is <codeph>false</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns a string that contains all the characters specified by the <codeph>beginIndex</codeph>
	 and <codeph>endIndex</codeph> parameters. If no characters are selected, an empty string is 
	 returned. 
	 
	 <p>To return all characters, pass a value of <codeph>0</codeph> for <codeph>beginIndex</codeph> and <codeph>
	 charCount</codeph> (or any very large number) for <codeph>endIndex</codeph>. 
	 To return a single character, pass a value of <codeph>beginIndex + 1</codeph> for <codeph>endIndex</codeph>. </p>
	 
	 <p>If you pass a value of <codeph>true</codeph> for <codeph>includeLineEndings</codeph>, 
	 newline characters are inserted in the string returned where deemed appropriate. In this case,
	 the return string might be longer than the input range. If <codeph>includeLineEndings</codeph>
	 is <codeph>false</codeph> or omitted, the selected text is returned without any characters added.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/charCount"><linktext>flash.text.TextSnapshot.charCount</linktext></link><link href="flash.text.xml#TextSnapshot/getSelectedText()"><linktext>flash.text.TextSnapshot.getSelectedText()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getTextRunInfo"><apiName>getTextRunInfo</apiName><shortdesc>
	 Returns an array of objects that contains information about a run of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An array of objects in which each object contains information about a specific character 
	 in the range of characters specified by the <codeph>beginIndex</codeph> and <codeph>endIndex</codeph> parameters.
	 Each object contains the following eleven properties:
	 <ul>
	 
	  	<li><codeph>indexInRun</codeph>—A zero-based integer index of the character
	 		(relative to the entire string rather than the selected run of text).</li>
	 
	  	<li><codeph>selected</codeph>—A Boolean value that indicates whether the character is selected
	 		<codeph>true</codeph>; <codeph>false</codeph> otherwise.</li>
	 
	  	<li><codeph>font</codeph>—The name of the character's font.</li>
	 
	  	<li><codeph>color</codeph>—The combined alpha and color value of the character. 
	 		The first two hexadecimal digits represent the alpha value, and the remaining digits
	 		represent the color value.</li>
	 
	  	<li><codeph>height</codeph>—The height of the character, in pixels.</li>
	 
	  	<li><codeph>matrix_a</codeph>, <codeph>matrix_b</codeph>, <codeph>matrix_c</codeph>, 
	 	<codeph>matrix_d</codeph>, <codeph>matrix_tx</codeph>, and <codeph>matrix_ty</codeph>—
	 		The values of a matrix that define the geometric transformation on the character. 
	 	Normal, upright text always has a matrix of the form 
	 	<codeph>[1 0 0 1 x y]</codeph>, where <codeph>x</codeph> and <codeph>y</codeph> 
	 	are the position of the character within the parent movie clip, regardless of the height of 
	 	the text. The matrix is in the parent movie clip coordinate system, and 
	 	does not include any transformations that may be on that movie clip itself (or its parent). </li>
	 
	 	<li><codeph>corner0x</codeph>, <codeph>corner0y</codeph>, <codeph>corner1x</codeph>, <codeph>corner1y</codeph>, 
	 		<codeph>corner2x</codeph>, <codeph>corner2y</codeph>, <codeph>corner3x</codeph>, 
	 		and <codeph>corner3y</codeph>—The corners of the bounding box of 
	 		the character, based on the coordinate system of the parent movie clip. 
	 		These values are only available if the font used by the character is embedded in the
	 		SWF file.</li>
	 
	 </ul>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The index value of the first character in a range of characters in a TextSnapshot
	 object.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The index value of the last character in a range of characters in a TextSnapshot 
	 object.
	 
 	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns an array of objects that contains information about a run of text. Each object corresponds
	 to one character in the range of characters specified by the two method parameters. 
	 
	 <p><b>Note: </b> Using the <codeph>getTextRunInfo()</codeph> method for a large range of text can
	 return a large object. Adobe recommends limiting the text range defined by the 
	 <codeph>beginIndex</codeph> and <codeph>endIndex</codeph> parameters. </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix"><linktext>Matrix class</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:hitTestTextNearPos"><apiName>hitTestTextNearPos</apiName><shortdesc>
	 Lets you determine which character within a TextSnapshot object is on or near the specified 
	 x, y coordinates of the movie clip containing the text in the TextSnapshot object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.hitTestTextNearPos, hitTestTextNearPos
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A number representing the index value of the character that is nearest to the specified
	 <codeph>x</codeph>, <codeph>y</codeph> coordinate. Returns 
	 <codeph>-1</codeph> if no character is found, or if the font doesn't contain character metric information.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>A number that represents the <codeph>x</codeph> coordinate of the movie clip containing the
	 text.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>A number that represents the <codeph>y</codeph> coordinate of the movie clip containing the
	 text.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>maxDistance</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>An optional number that represents the maximum distance from 
	 <codeph>x</codeph>, <codeph>y</codeph> that can be searched for 
	 text. The distance is measured from the center point of each character. The 
	 default value is <codeph>0</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Lets you determine which character within a TextSnapshot object is on or near the specified 
	 <codeph>x</codeph>, <codeph>y</codeph> coordinates of the movie clip containing the text in the TextSnapshot object.
	 
	 <p>If you omit or pass a value of <codeph>0</codeph> for <codeph>maxDistance</codeph>, the location specified 
	 by the <codeph>x</codeph>, <codeph>y</codeph> coordinates must lie inside the bounding box of the TextSnapshot object. 
	 </p>
	 
	 <p>This method works correctly only with fonts that include character metric information; however, 
	 by default, the Flash authoring tool does not include this information for static text fields. 
	 <ph outputclass="flashonly">Therefore, 
	 the method might return <codeph>-1</codeph> instead of an index value. To ensure that an index 
	 value is returned, you can force the Flash authoring tool to include the character metric 
	 information for a font. To do this, add a dynamic text field that uses that font, select 
	 Character Options for that dynamic text field, and then specify that font outlines should be 
	 embedded for at least one character. (It doesn't matter which characters you specify, nor 
	 whether they are the characters used in the static text fields.)</ph></p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject/x"><linktext>flash.display.DisplayObject.x</linktext></link><link href="flash.display.xml#DisplayObject/y"><linktext>flash.display.DisplayObject.y</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:setSelectColor"><apiName>setSelectColor</apiName><shortdesc>
	 Specifies the color to use when highlighting characters that have been selected with the 
	 setSelected() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.setSelectColor, setSelectColor
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hexColor</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0xFFFF00</apiData><apiDesc>The color used for the border placed around characters that have been selected by the 
	 corresponding <codeph>setSelected()</codeph> command, expressed in hexadecimal 
	 format (0x<i>RRGGBB</i>).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Specifies the color to use when highlighting characters that have been selected with the <codeph>
	 setSelected()</codeph> method. The color is always opaque; you can't specify a 
	 transparency value.
	 
	 <p>This method works correctly only with fonts that include character metric information; however, 
	 by default, the Flash authoring tool does not include this information for static text fields. 
	 Therefore, the method might return <codeph>-1</codeph> instead of an index value.<ph outputclass="flashonly"> To 
	 ensure that an index value is returned, you can force the Flash authoring tool to include the 
	 character metric information for a font. To do this, add a dynamic text field that uses that 
	 font, select Character Options for that dynamic text field, and then specify that font outlines 
	 should be embedded for at least one character. (It doesn't matter which characters you 
	 specify, nor if they are the characters used in the static text fields.)</ph></p>	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/setSelected()"><linktext>flash.text.TextSnapshot.setSelected()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:setSelected"><apiName>setSelected</apiName><shortdesc>
	 Specifies a range of characters in a TextSnapshot object to be selected or deselected.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.setSelected, setSelected
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Indicates the position of the first character to select. 
	 Valid values for <codeph>beginIndex</codeph> are <codeph>0</codeph> through <codeph>charCount - 1</codeph>. 
	 If <codeph>beginIndex</codeph> is a negative value, <codeph>0</codeph> is used.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>An integer that is 1+ the index of the last character to be 
	 examined. Valid values for <codeph>end</codeph> are <codeph>0</codeph> through <codeph>charCount</codeph>. 
	 The character indexed by the <codeph>end</codeph> parameter is not included in the extracted 
	 string. If you omit this parameter, <codeph>TextSnapshot.charCount</codeph> is used. If the 
	 value of <codeph>beginIndex</codeph> is less than or equal to the value of <codeph>endIndex</codeph>, 
	 <codeph>beginIndex + 1</codeph> is used.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>select</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>A Boolean value that specifies whether the text should be selected (<codeph>true</codeph>)
	 or deselected (<codeph>false</codeph>).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Specifies a range of characters in a TextSnapshot object to be selected or deselected. 
	 Characters that are selected are drawn with a colored rectangle behind them, matching the 
	 bounding box of the character. The color of the bounding box is defined by 
	 <codeph>setSelectColor()</codeph>.
	 
	 <p>To select or deselect all characters, pass a value of <codeph>0</codeph> for <codeph>beginIndex</codeph> and 
	 <codeph>charCount</codeph> (or any very large number) for <codeph>endIndex</codeph>. To 
	 specify a single character, pass a value of <codeph>start + 1</codeph> for <codeph>endIndex</codeph>. </p>
	 
	 <p>Because characters are individually marked as selected, you can call this method multiple 
	 times to select multiple characters; that is, using this method does not deselect other 
	 characters that have been set by this method.</p>
	 
	 <p>The colored rectangle that indicates a selection is displayed only for fonts that include
	 character metric information; by default, Flash does not include this information for static 
	 text fields. In some cases, this behavior means that text that is selected won't appear to be
	 selected onscreen.<ph outputclass="flashonly"> To ensure that all selected text appears to be 
	 selected, you can force the Flash authoring tool to include the character metric information
	 for a font. To do this, add a dynamic text field that uses that font, select Character Options
	 for that dynamic text field, and then specify that font outlines should be embedded for at least
	 one character. It doesn't matter which characters you specify, nor even if they are the 
	 characters used in the static text fields in question.</ph></p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/charCount"><linktext>flash.text.TextSnapshot.charCount</linktext></link><link href="flash.text.xml#TextSnapshot/setSelectColor()"><linktext>flash.text.TextSnapshot.setSelectColor()</linktext></link></related-links></apiOperation><apiValue id="flash.text:TextSnapshot:charCount:get"><apiName>charCount</apiName><shortdesc>
	 The number of characters in a TextSnapshot object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.charCount, charCount, count
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 The number of characters in a TextSnapshot object.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextSnapshot/getText()"><linktext>flash.text.TextSnapshot.getText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextFieldAutoSize"><apiName>TextFieldAutoSize</apiName><shortdesc>
The TextFieldAutoSize class is an enumeration of constant values used in setting the autoSize 
property of the TextField class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextFieldAutoSize class is an enumeration of constant values used in setting the <codeph>autoSize</codeph> 
property of the TextField class. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/autoSize"><linktext>flash.text.TextField.autoSize</linktext></link></related-links><apiValue id="flash.text:TextFieldAutoSize:CENTER"><apiName>CENTER</apiName><shortdesc> 
	Specifies that the text is to be treated as center-justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the text is to be treated as center-justified text.
	Any resizing of a single line of a text field is equally distributed
	to both the right and left sides. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldAutoSize:LEFT"><apiName>LEFT</apiName><shortdesc> 
	Specifies that the text is to be treated as left-justified text, 
	meaning that the left side of the text field remains fixed and any 
	resizing of a single line is on the right side.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the text is to be treated as left-justified text, 
	meaning that the left side of the text field remains fixed and any 
	resizing of a single line is on the right side. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldAutoSize:NONE"><apiName>NONE</apiName><shortdesc> 
	
	Specifies that no resizing is to occur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	
	Specifies that no resizing is to occur.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldAutoSize:RIGHT"><apiName>RIGHT</apiName><shortdesc> 
	Specifies that the text is to be treated as right-justified text, 
	meaning that the right side of the text field remains fixed and any 
	resizing of a single line is on the left side.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the text is to be treated as right-justified text, 
	meaning that the right side of the text field remains fixed and any 
	resizing of a single line is on the left side. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:FontStyle"><apiName>FontStyle</apiName><shortdesc>
The FontStyle class provides values for the TextRenderer class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The FontStyle class provides values for the TextRenderer class.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer"><linktext>flash.text.TextRenderer</linktext></link></related-links><apiValue id="flash.text:FontStyle:BOLD"><apiName>BOLD</apiName><shortdesc>
    Defines the bold style of a font for the fontStyle parameter in the setAdvancedAntiAliasingTable() method.</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the bold style of a font for the <codeph>fontStyle</codeph> parameter in the <codeph>setAdvancedAntiAliasingTable()</codeph> method. Use the syntax <codeph>FontStyle.BOLD</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:FontStyle:BOLD_ITALIC"><apiName>BOLD_ITALIC</apiName><shortdesc>
    Defines the combined bold and italic style of a font for the fontStyle parameter in the setAdvancedAntiAliasingTable() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>boldItalic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the combined bold and italic style of a font for the <codeph>fontStyle</codeph> parameter in the <codeph>setAdvancedAntiAliasingTable()</codeph> method. Use the syntax <codeph>FontStyle.BOLD_ITALIC</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:FontStyle:ITALIC"><apiName>ITALIC</apiName><shortdesc>
    Defines the italic style of a font for the fontStyle parameter in the setAdvancedAntiAliasingTable() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the italic style of a font for the <codeph>fontStyle</codeph> parameter in the <codeph>setAdvancedAntiAliasingTable()</codeph> method. Use the syntax <codeph>FontStyle.ITALIC</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:FontStyle:REGULAR"><apiName>REGULAR</apiName><shortdesc>
    Defines the plain style of a font for the fontStyle parameter in the setAdvancedAntiAliasingTable() method.</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>regular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the plain style of a font for the <codeph>fontStyle</codeph> parameter in the <codeph>setAdvancedAntiAliasingTable()</codeph> method. Use the syntax <codeph>FontStyle.REGULAR</codeph>. 
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextFieldType"><apiName>TextFieldType</apiName><shortdesc>
The TextFieldType class is an enumeration of constant values used in setting the type property 
of the TextField class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextFieldType class is an enumeration of constant values used in setting the <codeph>type</codeph> property 
of the TextField class. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/type"><linktext>flash.text.TextField.type</linktext></link></related-links><apiValue id="flash.text:TextFieldType:DYNAMIC"><apiName>DYNAMIC</apiName><shortdesc> 
	Used to specify a dynamic TextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dynamic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify a <codeph>dynamic</codeph> TextField. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldType:INPUT"><apiName>INPUT</apiName><shortdesc> 
	Used to specify an input TextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>input</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify an <codeph>input</codeph> TextField. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>