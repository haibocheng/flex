<?xml version="1.0"?>
<apiPackage id="flash.accessibility"><apiName>flash.accessibility</apiName><apiDetail/><apiClassifier id="flash.accessibility:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Cette classe autorise les communications entre un composant et un logiciel de lecture d'écran. Les lecteurs d’écran servent à traduire le contenu de l’écran en message vocal synthétisé ou en braille pour les utilisateurs mal-voyants.
 
 <p/>
 
 <p> <i/></p>
 
 <p><xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx"/></p>
 
 <p/>
 
 <p>  <i/></p>
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
	 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  
	 
	 </apiDesc></apiConstructorDetail><related-links><link href=""><linktext/></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction"><apiName>accDoDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p/>
	 
	 <p><codeph/> <codeph/><codeph/></p>
	 
	 </apiDesc><example> 
	 <codeblock rev="3.0">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation"><apiName>accLocation</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph/><codeph/><codeph/>
	 
	 
	 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph/><codeph/>
	 
	 <p><codeph/>  </p>
	 
	 <p> <codeph/> <codeph/></p>	
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/><codeph/><codeph/><codeph/>  <codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect"><apiName>accSelect</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selFlag</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>  
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 
	 <p><codeph/> </p>
	 
	 <p><codeph/><codeph/>  <codeph/></p>
	 
	 <p><codeph/><codeph/> <codeph/><codeph/> </p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/> <codeph/> <codeph/> <codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p></li>
	 </ul>
	 
	 <p><codeph/><codeph/><codeph/> <codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/></p>
	 <p><codeph/><i/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray"><apiName>getChildIDArray</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 <p>  </p>
	 
	 <p>  <i/> </p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction"><apiName>get_accDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc> 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p> </p>
	 
	 <p><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus"><apiName>get_accFocus</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName"><apiName>get_accName</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><codeph/><codeph/></p>
	 
	 <p><codeph/></p>
	 
	 <p>  <codeph/>  </p>
	 
	 <p><codeph/>  <codeph/> </p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><b/><codeph/><codeph/> <codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><b/><codeph/><codeph/> <codeph/></p>
     	 </li>
     	 <li><p><b/><codeph/><codeph/> <codeph/><codeph/><codeph/></p>
     	 </li>
	 </ul>
     	 <p> <codeph/><codeph/> </p>
     	 
     	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="flash.accessibility.xml#AccessibilityProperties"><linktext>flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name"><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole"><apiName>get_accRole</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	  
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2143"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> 
	  
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	  	 
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accRole(childID:uint):uint
	 {
	 	if (childID == 0)
	 		return role;
	 		
	 	return ROLE_SYSTEM_LISTITEM;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#roles"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection"><apiName>get_accSelection</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState"><apiName>get_accState</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2144"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> <codeph/> 
	 
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><xref href="../../accessibilityImplementationConstants.html"/> <codeph/></p>
	 
	 <p/>
	 
	 <p> </p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#states"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue"><apiName>get_accValue</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	  
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p> <codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example><codeph/>
	 
	 <codeblock rev="3.0">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno"><apiName>errno</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	  <codeph/>  <codeph/>
	 
	 </apiDesc></apiValueDetail><related-links><link href="../../accessibilityImplementationConstants.html"><linktext/></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub"><apiName>stub</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	   
	 
	 <p><codeph/></p> 
	 
	 </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.accessibility:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
 La classe AccessibilityProperties vous permet de contrôler la présentation des objets Flash aux outils d’aide à l’accessibilité, tels que les lecteurs d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe AccessibilityProperties vous permet de contrôler la présentation des objets Flash aux outils d’aide à l’accessibilité, tels que les lecteurs d’écran.
 
 <p>Vous pouvez joindre un objet AccessibilityProperties à tout objet à afficher. Cependant, Flash Player ne lira votre objet AccessibilityProperties que pour certains types d’objet : les fichiers SWF complets (représentés par <codeph>DisplayObject.root</codeph>), les objets conteneur (<codeph>DisplayObjectContainer</codeph> et les sous-classes), les boutons (<codeph>SimpleButton</codeph> et les sous-classes) et le texte (<codeph>TextField</codeph> et les sous-classes).</p>
 
 <p>La propriété <codeph>name</codeph> de ces objets est la plus importante à indiquer car les outils d’aide à l’accessibilité fournissent le nom des objets aux utilisateurs comme principal moyen de navigation. Ne confondez pas <codeph>AccessibilityProperties.name</codeph> et <codeph>DisplayObject.name</codeph> ; il s’agit de deux propriétés distinctes et sans rapport entre elles. La propriété <codeph>AccessibilityProperties.name</codeph> est le nom qui est lu à haute voix par l’outil d’aide à l’accessibilité, alors que <codeph>DisplayObject.name</codeph> est un nom de variable visible uniquement dans le code ActionScript.</p>
 
 <p product="flash">Les propriétés des objets <codeph>AccessibilityProperties</codeph> remplacent les paramètres correspondant du panneau Accessibilité pendant la programmation.</p>
 
 <p>Pour savoir si Flash Player s’exécute dans un environnement qui prend en charge les fonctions d’accessibilité, utilisez la propriété <codeph>Capabilities.hasAccessibility</codeph>. Si vous modifiez des objets AccessibilityProperties, vous devez appeler la méthode <codeph>Accessibility.updateProperties()</codeph> pour que les modifications deviennent effectives.</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as"> L’exemple suivant utilise les classes <codeph>AccessibilityExample</codeph>, <codeph>CustomAccessibleButton</codeph>, <codeph>CustomSimpleButton</codeph> et <codeph>ButtonDisplayState</codeph> pour créer un menu d’accessibilité qui fonctionne avec les lecteurs d’écran les plus courants. Voici les principales fonctionnalités de la classe <codeph>AccessibilityProperties</codeph> :
 
 <ol TYPE="1">
    <li> Appelez <codeph>configureAssets</codeph>, qui crée un bouton personnalisé et définit son intitulé et sa description. Voici les valeurs que le lecteur d’écran envoie à l’utilisateur final.</li>        
    <li>Appelez <codeph>setTimeOut()</codeph> pour vous assurer que Flash Player dispose de suffisamment de temps pour détecter le lecteur d’écran avant de mettre les propriétés à jour.</li>
    </ol>
 
 <p><b>Remarque :</b> appelez <codeph>setTimeout()</codeph> avant de vérifier <codeph>Accessibility.active</codeph>. pour accorder à Flash Player les 2 secondes dont il a besoin pour se connecter à un lecteur d’écran, le cas échéant. Si vous ne laissez pas suffisamment de temps au lecteur, l’appel de <codeph>setTimeout</codeph> risque de renvoyer la valeur <codeph>false</codeph> même lorsqu’un lecteur d’écran est disponible.</p>
 
 <p>L’exemple suivant ne traite la méthode <codeph>Accessibility.updateProperties()</codeph> que si l’appel à <codeph>Accessibility.active</codeph> renvoie la valeur <codeph>true</codeph>. Cette situation ne se produit que lorsque Flash Player est déjà connecté à un lecteur d’écran actif. Si la méthode <codeph>updateProperties</codeph> est appelée sans lecteur d’écran actif, elle émet une exception <codeph>IllegalOperationError</codeph>.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex"><linktext>flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
	 Crée un nouvel objet AccessibilityProperties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Crée un nouvel objet AccessibilityProperties.
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description"><apiName>description</apiName><shortdesc>
	 Fournit une description de cet objet d’affichage dans la présentation accessible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Fournit une description de cet objet d’affichage dans la présentation accessible. Si vous avez beaucoup d’informations à mentionner à propos de l’objet, choisissez un nom concis et gardez le reste pour la propriété <codeph>description</codeph>. S’applique aux fichiers SWF entiers, aux conteneurs, aux boutons et au texte. La valeur par défaut est une chaîne vide.
     <p product="flash">Correspond au champ Description du panneau Accessibilité.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple"><apiName>forceSimple</apiName><shortdesc>
	 Si la valeur est true, Flash Player exclut les objets enfant contenus dans cet objet d’affichage de la présentation accessible.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Si la valeur est <codeph>true</codeph>, Flash Player exclut les objets enfant contenus dans cet objet d’affichage de la présentation accessible. La valeur par défaut est <codeph>false</codeph>. S’applique aux fichiers SWF entiers et aux conteneurs.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name"><apiName>name</apiName><shortdesc>
	 Affecte un nom à cet objet d’affichage dans la présentation accessible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Affecte un nom à cet objet d’affichage dans la présentation accessible. S’applique aux fichiers SWF entiers, aux conteneurs, aux boutons et au texte. Ne confondez pas avec la propriété <codeph>DisplayObject.name</codeph>, qui n’a aucun rapport. La valeur par défaut est une chaîne vide.
     <p product="flash">Correspond au champ Nom du panneau Accessibilité.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling"><apiName>noAutoLabeling</apiName><shortdesc>
	 Si la valeur est true, le système d’étiquetage automatique par défaut de Flash Player est désactivé.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Si la valeur est <codeph>true</codeph>, le système d’étiquetage automatique par défaut de Flash Player est désactivé. Avec l’étiquetage automatique, les objets texte placés dans les boutons sont traités comme des noms de bouton, et ceux qui sont placés à côté des champs de texte sont traités comme des noms de champ de texte. La valeur par défaut est <codeph>false</codeph>. S’applique aux fichiers SWF entiers uniquement.
     <p>La valeur de la propriété <codeph>noAutoLabeling</codeph> est ignorée, sauf si vous la spécifiez avant la première lecture de votre fichier SWF par une aide d’accessibilité. Si vous envisagez de définir <codeph>noAutoLabeling</codeph> sur <codeph>true</codeph>, faites-le aussi tôt que possible dans votre code.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut"><apiName>shortcut</apiName><shortdesc>
	 Indique un raccourci clavier associé à l’objet d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Indique un raccourci clavier associé à l’objet d’affichage. Ne spécifiez cette chaîne que pour les contrôles de l’interface utilisateur que vous avez associés à une touche de raccourci. S’applique aux conteneurs, aux boutons et au texte. La valeur par défaut est une chaîne vide.
	 
	 <p><b>Remarque </b>: l’affectation de cette propriété n’affecte pas automatiquement la combinaison de touches spécifiée à cet objet ; pour ce faire, vous devez utiliser vous-même un écouteur d’événements <codeph>KeyboardEvent</codeph>.</p>
	 
	 <p>La syntaxe de cette chaîne utilise des noms longs pour les touches de modification et le signe plus(+) pour signaler une combinaison de touches. Ctrl+F, Ctrl+Maj+Z sont des exemples de chaînes valides.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent"><apiName>silent</apiName><shortdesc>
	 Si la valeur est true, l’objet d’affichage est exclu de la présentation accessible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Si la valeur est <codeph>true</codeph>, l’objet d’affichage est exclu de la présentation accessible. La valeur par défaut est <codeph>false</codeph>. S’applique aux fichiers SWF entiers, aux conteneurs, aux boutons et au texte.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.accessibility:Accessibility"><apiName>Accessibility</apiName><shortdesc>
 La classe Accessibility gère les communications avec les logiciels de lecture d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe Accessibility gère les communications avec les logiciels de lecture d’écran. Les logiciels de lecture d’écran offrent une technologie d’assistance conçue spécialement pour les utilisateurs malvoyants : ils fournissent une version sonore du contenu de l’écran. Les méthodes de la classe Accessibility sont statiques : ainsi, vous n’avez pas besoin de créer d’occurrence de la classe pour utiliser ses méthodes.
 
 <p>Pour récupérer et définir les propriétés disponibles pour un certain objet, tel qu’un bouton, un clip ou un champ de texte, utilisez la propriété <codeph>DisplayObject.accessibilityProperties</codeph>. Pour savoir si Flash Player s’exécute dans un environnement qui prend en charge les fonctions d’accessibilité, utilisez la propriété <codeph>Capabilities.hasAccessibility</codeph>. </p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as"> L’exemple suivant utilise les classes <codeph>AccessibilityExample</codeph>, <codeph>CustomAccessibleButton</codeph>, <codeph>CustomSimpleButton</codeph> et <codeph>ButtonDisplayState</codeph> pour créer un menu d’accessibilité qui fonctionne avec la plupart des lecteurs d’écran. L’exemple exécute les tâches suivantes :
 <ol>
    <li>Il recherche la propriété <codeph>Accessibility.active</codeph> pour déterminer si un lecteur d’écran est actif actuellement et si Flash Player communique avec lui.</li>
    <li>Si la propriété <codeph>active</codeph> renvoie la valeur <codeph>true</codeph>, l’exemple appelle la méthode <codeph>updateProperties()</codeph> pour appliquer les modifications d’accessibilité apportées aux boutons dans cet exemple.</li>
    <li>L’exemple appelle la méthode <codeph>flash.utils.setTimeout()</codeph> en indiquant que la méthode de fermeture <codeph>updateAccessibility()</codeph> doit être appelée dans 2 secondes.</li>
 </ol>
 
 <p><b>Remarque : </b> appelez <codeph>setTimeout()</codeph> avant de vérifier que <codeph>Accessibility.active</codeph> accorde à Flash Player les 2 secondes dont il a besoin pour se connecter à un lecteur d’écran, le cas échéant. Si vous ne laissez pas suffisamment de temps au lecteur, l’appel de <codeph>setTimeout</codeph> risque de renvoyer la valeur <codeph>false</codeph> même lorsqu’un lecteur d’écran est disponible.
 </p>
 <p>L’exemple suivant ne traite la méthode <codeph>Accessibility.updateProperties()</codeph> que si l’appel à <codeph>Accessibility.active</codeph> renvoie la valeur <codeph>true</codeph>. Cette situation ne se produit que lorsque Flash Player est déjà connecté à un lecteur d’écran actif. Si la méthode <codeph>updateProperties</codeph> est appelée sans lecteur d’écran actif, elle émet une exception <codeph>IllegalOperationError</codeph>.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:sendEvent"><apiName>sendEvent</apiName><shortdesc>
	 
	 </shortdesc><prolog><asCustoms><nonHTML>A Boolean value indicating whether the event is one of the standard event types
	 that can be generated from an HTML form. When set to true, this parameter helps prevent
	 some problems that may occur with screen readers that interpret Flash content as part of
	 the HTML page. The default value is false.
	 </nonHTML></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiDesc>
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc> <codeph/>
	 </apiDesc></apiParam><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc> 
	 </apiDesc></apiParam><apiParam><apiItemName>nonHTML</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
	 
	   <codeph/><codeph/>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation"><linktext/></link><link href="" invalidHref="mx.accessibility.AccImpl.xml"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:Accessibility:updateProperties"><apiName>updateProperties</apiName><shortdesc>
	Indique à Flash Player d’appliquer toute modification de l’accessibilité effectuée à l’aide de la propriété DisplayObject.accessibilityProperties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>L’accessibilité n’est pas prise en charge par cette version de Flash Player. N’appelez pas la méthode <codeph>Accessibility.updateProperties()</codeph> si la valeur de la propriété <codeph>flash.system.Capabilities.hasAccessibility</codeph> est <codeph>false</codeph>.
	
	
	</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Indique à Flash Player d’appliquer toute modification de l’accessibilité effectuée à l’aide de la propriété <codeph>DisplayObject.accessibilityProperties</codeph>. Vous devez appeler cette méthode pour que vos modifications soient activées. 
	
	<p>Si vous modifiez les propriétés d’accessibilité de plusieurs objets, un seul appel de la méthode <codeph>Accessibility.updateProperties()</codeph> est nécessaire ; plusieurs appels risquent de réduire les performances et de provoquer des erreurs dans le logiciel de lecture d’écran.</p>
	
	<p/>
	<pre>
	if (my_displayObj.accProps == undefined ) {
	  my_displayObj.accProps = new Object();
	}
	my_displayObj.accProps.name = "Photo of Mount Rushmore";
	Accessibility.updateProperties();
	</pre>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get"><apiName>active</apiName><shortdesc>
	Indique si un lecteur d’écran est actuellement actif et si Flash Player communique avec lui.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si un lecteur d’écran est actuellement actif et si Flash Player communique avec lui. 
	
	<p><b/><sup/><codeph/> Ce comportement est dû à un mécanisme de communication asynchrone entre Flash et les clients équipés de l’accessibilité. Vous pouvez contourner cette restriction en respectant un délai de une à deux secondes, après avoir chargé votre document, avant d’appeler cette méthode.</p>
	
	Pour savoir si Flash Player s’exécute dans un environnement qui prend en charge les lecteurs d’écran, utilisez la propriété <codeph>Capabilities.hasAccessibility</codeph>. 
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>