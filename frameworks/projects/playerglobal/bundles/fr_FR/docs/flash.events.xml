<?xml version="1.0"?>
<apiPackage id="flash.events"><apiName>flash.events</apiName><apiDetail/><apiClassifier id="flash.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
 Un objet KeyboardEvent est distribué à la suite d’une saisie utilisateur via un clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements Keyboard.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet KeyboardEvent est distribué à la suite d’une saisie utilisateur via un clavier. Il existe deux types d’événements clavier : <codeph>KeyboardEvent.KEY_DOWN</codeph> et <codeph>KeyboardEvent.KEY_UP</codeph>
 
 <p>Les correspondances entre les touches et des caractères spécifiques sont fonction du périphérique et du système d’exploitation de l’utilisateur. Choisissez donc le type d’événement TextEvent pour traiter les saisies de caractères.</p>
 
 <p>Pour écouter globalement les événements de touche, écoutez, sur la scène, la phase de capture et la phase cible ou la phase de propagation vers le haut (bubbling).</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as"> L’exemple suivant utilise la classe <codeph>KeyboardEventExample</codeph> pour montrer les événements clavier et leurs fonctions d’écouteur. L’exemple exécute les tâches suivantes :
 <ol>
  <li>Il créé une nouvelle occurrence de Sprite nommée <codeph>child</codeph>.</li>
     <li>Il déclare les propriétés à utiliser pour paramétrer la taille et la couleur d’arrière-plan d’un carré.</li>
     <li>A l’aide des méthodes de Sprite, il trace un carré bleu clair qui apparaît sur la scène aux coordonnées par défaut (0,0) en appelant à méthode <codeph>addChild()</codeph>.</li>
     <li>Il ajoute un événement mouse et deux écouteurs d’événements de type keyboard :
     <ul>
      <li><codeph>click</codeph>/<codeph>clickHandler</codeph> qui est distribué lorsque vous cliquez sur le carré pour définir le focus sur le sprite <codeph>child</codeph> de façon à ce qu’il puisse écouter des événements keyboard.</li>
         <li><codeph>keyDown</codeph> / <codeph>keyDownHandler</codeph> distribué à chaque appui de l’utilisateur sur une touche. La méthode d’abonné imprime des informations sur l’événement à l’aide de l’instruction <codeph>trace()</codeph>.</li>
         <li><codeph>keyUp</codeph> / <codeph>keyUpHandler</codeph> distribué chaque fois que l’utilisateur relâche une touche.</li>
     </ul></li>
 </ol>
 
 <p>Lorsque vous testez cet exemple, vous devez cliquer sur le carré d’abord pour que les événements keyboard fonctionnent.</p>
 <p product="flash">De plus, si vous utilisez la commande Test Movie dans Flash, l’interface de programmation peut répondre à certaines touches au lieu des écouteurs d’événements associés au sprite enfant.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation"><linktext>KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown"><apiName>keyDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp"><apiName>keyUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations spécifiques sur les événements clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles : <codeph>KeyboardEvent.KEY_DOWN</codeph> et <codeph>KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé.
	</apiDesc></apiParam><apiParam><apiItemName>charCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Valeur du code de caractère associé à la touche enfoncée ou relâchée. Les valeurs renvoyées sont des valeurs du clavier anglais. Par exemple, si vous appuyez sur Maj+3, la propriété <codeph>Keyboard.charCode()</codeph> renvoie # sur un clavier japonais, ce qui correspond à ce qu’elle renvoie sur un clavier anglais.
	</apiDesc></apiParam><apiParam><apiItemName>keyCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Valeur de code correspondant à la touche enfoncée ou relâchée.
	</apiDesc></apiParam><apiParam><apiItemName>keyLocationValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Emplacement de la touche sur le clavier.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Sur Windows, indique si la touche Ctrl est activée. Sur Mac, indique si la touche Ctrl ou la touche Commande est activée.
	</apiDesc></apiParam><apiParam><apiItemName>altKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche de modification Alt est activée (Windows uniquement).
	</apiDesc></apiParam><apiParam><apiItemName>shiftKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche de modification Maj est activée.
	</apiDesc></apiParam><apiParam><apiItemName>controlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Contrôle et activée sous Mac, et si la touche Ctrl ou Contrôle est activée sous Windows et Linux.
	</apiDesc></apiParam><apiParam><apiItemName>commandKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Commande est activée (Mac uniquement).
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets KeyboardEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event contenant des informations spécifiques sur les événements clavier. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode"><linktext>Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet KeyboardEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet KeyboardEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet KeyboardEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet KeyboardEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet KeyboardEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet KeyboardEvent. La chaîne est écrite au format suivant :
	<p><codeph>[KeyboardEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> ... shiftKey=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Indique que l’affichage doit être rendu à la fin du traitement de cet événement, si la liste d’affichage a été modifiée
	
	</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Indique que l’affichage doit être rendu à la fin du traitement de cet événement, si la liste d’affichage a été modifiée
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN"><apiName>KEY_DOWN</apiName><shortdesc>
	La constante ScreenMouseEvent.MOUSE_DOWN définit la valeur de la propriété type d’un objet événement keyDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>KeyboardEvent.KEY_DOWN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>keyDown</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> dans AIR, <codeph>false</codeph> dans Flash Player ; dans AIR, l’annulation de cet événement empêche l’insertion du caractère dans un champ de texte.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Valeur du code de caractère associé à la touche enfoncée ou relâchée.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sous Mac si la touche Commande est activée. Autrement, <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> sous Windows et Linux si la touche Ctrl est activée. <codeph>true</codeph> sous Mac si la touche Contrôle est activée. Autrement, <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows et Linux si la touche Ctrl est activée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Valeur de code correspondant à la touche enfoncée ou relâchée.</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>Emplacement de la touche sur le clavier.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject possédant le focus. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP"><apiName>KEY_UP</apiName><shortdesc>
	La constante KeyboardEvent.KEY_UP définit la valeur de la propriété type d’un objet événement keyDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>KeyboardEvent.KEY_UP</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>keyDown</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Contient la valeur du code de caractère associé à la touche enfoncée ou relâchée.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sous Mac si la touche Commande est activée. Autrement, <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> sous Windows et Linux si la touche Ctrl est activée. <codeph>true</codeph> sous Mac si la touche Contrôle est activée. Autrement, <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sur Windows si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Valeur de code correspondant à la touche enfoncée ou relâchée.</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>Emplacement de la touche sur le clavier.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject possédant le focus. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
	Indique si la touche Alt est activée (true) ou non (false) sur Windows ; indique si la touche Option est activée sur Mac OS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche Alt est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>) sur Windows ; indique si la touche Option est activée sur Mac OS.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
	Contient la valeur du code de caractère associé à la touche enfoncée ou relâchée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Contient la valeur du code de caractère associé à la touche enfoncée ou relâchée. Les valeurs renvoyées sont celles du clavier anglais. Si vous appuyez sur Maj + 3, par exemple, la méthode <codeph>charCode</codeph> renvoie # sur un clavier japonais, comme sur un clavier anglais.
	<p><b>Remarque : </b> Lorsqu’un éditeur IME (Input Method Editor) est en cours d’exécution, les codes de caractères renvoyés par <codeph>charCode</codeph> sont incorrects.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Indique si la touche Command est activée (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche Command est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Pris en charge pour Mac OS uniquement. Sur Mac OS, la propriété <codeph>commandKey</codeph> a la même valeur que la propriété <codeph>ctrlKey</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Indique si la touche Ctrl est activée (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche Ctrl est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Sous Windows et Linux, cette propriété est également true lorsque la touche Ctrl est activée.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	Sous Windows et Linux, indique si la touche Ctrl est activée (true) ou non (false) ; sous Mac OS, indique si la touche Ctrl ou Commande est activée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Sous Windows et Linux, indique si la touche Ctrl est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>) ; sous Mac OS, indique si la touche Ctrl ou Commande est activée.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	Valeur de code correspondant à la touche enfoncée ou relâchée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Valeur de code correspondant à la touche enfoncée ou relâchée.
	<p><b>Remarque : </b> lorsqu’un éditeur IME (Input Method Editor) est en cours d’exécution, les codes de caractères renvoyés par <codeph>keyCode</codeph> sont incorrects.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
	Emplacement de la touche sur le clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Emplacement de la touche sur le clavier. Cette propriété vous permet de différencier des touches qui figurent plusieurs fois sur un clavier. Sa valeur vous permet par exemple de faire la différence entre les touches Maj de gauche et de droite : <codeph>KeyLocation.LEFT</codeph> représente la touche de gauche et <codeph>KeyLocation.RIGHT</codeph> celle de droite. Vous pouvez aussi, par exemple distinguer les touches numériques du clavier standard (<codeph>KeyLocation.STANDARD</codeph>) de celles du pavé numérique (<codeph>KeyLocation.NUM_PAD</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Indique si la touche Maj de modification est activée (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche de modification Maj est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
 Un objet NativeWindow déclenche des événements de la classe NativeWindowDisplayStateEvent lorsque l’état de l’affichage de la fenêtre change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event pour des événements NativeWindow qui changent l’état d’affichage de la fenêtre.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet NativeWindow déclenche des événements de la classe NativeWindowDisplayStateEvent lorsque l’état de l’affichage de la fenêtre change. Il existe deux types d’événement : 
 <ul>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange"><apiName>displayStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging"><apiName>displayStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
    Crée un objet Event à l’aide d’informations spécifiques relatives aux événements d’état d’affichage de la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles :
    <ul>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé.
    </apiDesc></apiParam><apiParam><apiItemName>beforeDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Propriété <codeph>displayState</codeph> avant le changement.
    </apiDesc></apiParam><apiParam><apiItemName>afterDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Propriété <codeph>displayState</codeph> après le changement. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Crée un objet Event à l’aide d’informations spécifiques relatives aux événements d’état d’affichage de la fenêtre. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone"><apiName>clone</apiName><shortdesc>
    Crée une copie de l’objet NativeWindowDisplayStateEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet NativeWindowDisplayStateEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Crée une copie de l’objet NativeWindowDisplayStateEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString"><apiName>toString</apiName><shortdesc>
    Renvoie une chaîne répertoriant toutes les propriétés de l’objet NativeWindowDisplayStateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet NativeWindowDisplayStateEvent.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Renvoie une chaîne répertoriant toutes les propriétés de l’objet NativeWindowDisplayStateEvent. La chaîne présente le format suivant :
    <p><codeph>[NativeWindowDisplayStateEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> beforeDisplayState=<i>valeur</i> afterDisplayState=<i>valeur</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE"><apiName>DISPLAY_STATE_CHANGE</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement displayStateChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>displayStateChange</codeph>. Les propriétés de cet événement sont les suivantes :
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>Ancien état d’affichage de la fenêtre.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>Nouvel état d’affichage de la fenêtre.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence NativeWindow qui vient de changer d’état. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; Il n’existe aucun comportement par défaut à annuler.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING"><apiName>DISPLAY_STATE_CHANGING</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement displayStateChanging.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChanging</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>displayStateChanging</codeph>. Les propriétés de cet événement sont les suivantes :
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>Etat d’affichage de la fenêtre avant le changement en attente.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>Etat d’affichage de la fenêtre après le changement en attente.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence NativeWindow qui vient de changer d’état. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de l’événement empêche la modification.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get"><apiName>afterDisplayState</apiName><shortdesc>
     L’état d’affichage de NativeWindow après le changement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     L’état d’affichage de NativeWindow après le changement.  
     
     <p>Si l’événement est <codeph>displayStateChanging</codeph>, l’état de l’affichage n’a pas encore changé ;<codeph>afterDisplayState</codeph> indique le nouvel état de l’affichage si l’événement n’est pas annulé. Si l’événement est <codeph>displayStateChanged</codeph>, <codeph>afterDisplayState</codeph> indique la valeur en cours.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get"><apiName>beforeDisplayState</apiName><shortdesc>
     L’état d’affichage de NativeWindow avant le changement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     L’état d’affichage de NativeWindow avant le changement.  
     
     <p>Si l’événement est <codeph>displayStateChanging</codeph>, l’état de l’affichage n’a pas encore changé ; <codeph>beforeDisplayState</codeph> reflète l’état actuel de l’affichage de la fenêtre. Si l’événement est <codeph>displayStateChanged</codeph>, <codeph>beforeDisplayState</codeph> indique la valeur précédente.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
L’objet Stage distribue un objet FullScreenEvent chaque fois que la scène passe en mode d’affichage plein écran ou quitte ce mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements FullScreenEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
L’objet Stage distribue un objet FullScreenEvent chaque fois que la scène passe en mode d’affichage plein écran ou quitte ce mode. Il n’existe qu’un seul type d’événement <codeph>fullScreen</codeph> : <codeph>FullScreenEvent.FULL_SCREEN</codeph>.

</apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier>flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations sur les événements fullScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement <codeph>fullScreen</codeph> : <codeph>FullScreenEvent.FULL_SCREEN</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>fullScreen</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si le périphérique est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>activating</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur d’objets FullScreenEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet événement contenant des informations sur les événements <codeph>fullScreen</codeph>. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
    </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN"><linktext>FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet FullScreenEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet FullScreenEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet FullScreenEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet FullScreenEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet FullScreenEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet FullScreenEvent. Le format utilisé est le suivant :
	<p><codeph>[FullScreenEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> activating=<i>valeur</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN"><apiName>FULL_SCREEN</apiName><shortdesc>
	La constante FullScreenEvent.FULL_SCREEN définit la valeur de la propriété type de l’objet événement fullScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>FullScreenEvent.FULL_SCREEN</codeph> définit la valeur de la propriété <codeph>type</codeph> de l’objet événement <codeph>fullScreen</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>fullScreen</codeph></entry><entry><codeph>true</codeph> si l’état d’affichage est en plein écran ou <codeph>false</codeph> s’il est normal.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Stage.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get"><apiName>fullScreen</apiName><shortdesc>
	Indique si l’objet Stage est en mode plein écran (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si l’objet Stage est en mode plein écran (<codeph>true</codeph>) ou non (<codeph>false</codeph>).
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
 Un objet Timer distribue des objets TimerEvent chaque fois que l’objet Timer atteint l’intervalle spécifié par la propriété Timer.delay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements Timer.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet Timer distribue des objets TimerEvent chaque fois que l’objet Timer atteint l’intervalle spécifié par la propriété <codeph>Timer.delay</codeph>.
 
 </apiDesc><example conref="examples\TimerEventExample.as"> L’exemple suivant utilise la classe TimerExample pour montrer comment une méthode d’écouteur <codeph>timerHandler()</codeph> peut être instanciée et définie pour écouter la distribution d’un nouveau TimerEvent, celle-ci survenant lorsque la méthode <codeph>start()</codeph> de Timer est appelée.  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#Timer"><linktext>flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer"><apiName>timer</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
	Crée un objet Event à l’aide d’informations spécifiques relatives aux événements timer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event se propage vers le haut. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets TimerEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event à l’aide d’informations spécifiques relatives aux événements <codeph>timer</codeph>. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet TimerEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet TimerEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet TimerEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet TimerEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet TimerEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet TimerEvent. La chaîne est écrite au format suivant :
	<p><codeph>[TimerEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i>]</codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Demande à Flash Player ou au moteur d’exécution AIR d’effectuer un rendu à la fin du traitement de cet événement, si la liste d’affichage a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Demande à <ph platform="actionscript">Flash Player ou</ph> au moteur d’exécution AIR d’effectuer un rendu à la fin du traitement de cet événement, si la liste d’affichage a été modifiée.
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as"> L’exemple suivant illustre la méthode <codeph>TimerEvent.updateAfterEvent()</codeph>.   
<codeblock>
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER"><apiName>TIMER</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement timer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timer</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>timer</codeph>.
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Timer dont le délai imparti s’est écoulé.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE"><apiName>TIMER_COMPLETE</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement timerComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timerComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>timerComplete</codeph>.
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet Timer qui a terminé ses requêtes.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
Un objet IOErrorEvent est distribué lorsqu’une erreur provoque un échec d’une opération send ou load.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements IOErrorEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Un objet IOErrorEvent est distribué lorsqu’une erreur provoque un échec d’une opération send ou load.

<p>Vous pouvez rechercher des événements error qui n’ont pas d’écouteurs en utilisant la version débogueur de Flash Player ou l’application de débogage du lanceur AIR. La chaîne définie par le paramètre <codeph>text</codeph> du constructeur IOErrorEvent s’affiche. Il n’existe qu’un seul type d’événement d’erreur d’entrée/sortie : <codeph>IOErrorEvent.IO_ERROR</codeph>. </p>

</apiDesc><example conref="examples\IOErrorEventExample.as"> L’exemple suivant utilise la classe <codeph>IOErrorEventExample</codeph> pour montrer comment l’objet événement error est distribué en cas de tentative de chargement d’un fichier non existant. L’exemple exécute les tâches suivantes :
 <ol>
    <li>Le constructeur de classe crée une nouvelle occurrence de l’objet URLLoader et l’affecte à la variable <codeph>loader</codeph>.</li>
    <li>L’occurrence URLLoader instancie un écouteur d’événements de type <codeph>ioError</codeph>, associé à une méthode d’abonné <codeph>ioErrorHandler()</codeph>, qui imprime simplement des informations sur l’événement à l’aide de l’instruction <codeph>trace()</codeph>.</li>
    <li>Le constructeur crée ensuite une nouvelle occurrence d’objet URLRequest, <codeph>request</codeph>, en transmettant <codeph>MissingFile.xml</codeph> de manière à faire connaître le nom et l’emplacement du fichier manquant.</li>
    <li>La variable <codeph>request</codeph> est ensuite transmis à <codeph>loader.load()</codeph>, qui tente de charger le fichier manquant. Le fichier n’existant pas, le gestionnaire d’événements distribue un événement <codeph>ioError</codeph>.</li>
 </ol>
 
 <p> <b>Remarques :</b>
 <ul>
     <li>Vous devrez compiler le fichier SWF en définissant « Sécurité de lecture locale » sur « Accès aux fichiers locaux uniquement ».</li>
     <li>Assurez-vous que aucun fichier nommé « MissingFile.xml » ne se situe au même niveau que votre fichier SWF. </li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations spécifiques sur les événements ioError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement d’erreur d’entrée/sortie : <codeph>IOErrorEvent.IO_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Texte à afficher en tant que message d’erreur. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>text</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Un numéro de référence à associer à l’erreur spécifique (pris en charge uniquement par Adobe AIR). 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets IOErrorEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet événement contenant des informations spécifiques sur les événements <codeph>ioError</codeph>. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet IOErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet IOErrorEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet IOErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet IOErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet IOErrorEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet IOErrorEvent. La chaîne est écrite au format suivant :
	<p><codeph>[IOErrorEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> text=<i>valeur</i> errorID=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement ioError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>ioError</codeph>.
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>Un numéro de référence associé à l’erreur spécifique (AIR uniquement).</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet réseau sur lequel l’erreur d’entrée/sortie s’est produite.</entry></row><row><entry><codeph>text</codeph></entry><entry>Texte à afficher en tant que message d’erreur. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
Un objet NetConnection, NetStream ou SharedObject distribue des objets NetStatusEvent lorsqu’il signale son état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements NetStatusEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Un objet NetConnection, NetStream ou SharedObject distribue des objets NetStatusEvent lorsqu’il signale son état. Il n’existe qu’un seul type d’événement status : <codeph>NetStatusEvent.NET_STATUS</codeph>.

</apiDesc><example conref="examples\NetStatusEventExample.as"> L’exemple suivant utilise un objet Video avec les classes NetConnection et NetStream pour charger et lire un fichier FLV.
 <p>Dans cet exemple, la méthode <codeph>netStatusHandler</codeph> est enregistrée en tant qu’écouteur de l’événement NetStatusEvent <codeph>NetConnection.netStatus</codeph>. Lorsque l’état (réussite ou échec) de la tentative de <codeph>NetConnection.connect()</codeph> est connu, l’événement <codeph>netStatus</codeph> déclenche cette méthode. Si la tentative de connexion à l’objet NetConnection aboutit (en d’autres termes, si la propriété <codeph>info</codeph> de l’objet NetStatusEvent distribué par l’événement <codeph>netStatus</codeph> possède une propriété <codeph>code</codeph> indiquant un succès), le code crée les objets Video et NetStream et appelle les méthodes <codeph>Video.attachNetStream()</codeph> et <codeph>NetStream.play()</codeph>.</p>
 
 <p><b>Remarque :</b> pour exécuter cet exemple, vous devez disposer d’un fichier FLV dont le nom et l’emplacement correspondent à la variable transmise à <codeph>videoURL</codeph> ; dans ce cas, un fichier FLV nommé Video.flv et situé dans le même répertoire que le fichier SWF.</p>
<codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject"><linktext>flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus"><apiName>netStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
	Crée un objet événement contenant des informations sur les événements netStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement status : <codeph>NetStatusEvent.NET_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet contenant des propriétés décrivant son état. Les écouteurs d’événement peuvent accéder à cet objet par le biais de la propriété <codeph>info</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets NetStatusEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet événement contenant des informations sur les événements <codeph>netStatus</codeph>. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet NetStatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet NetStatusEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet NetStatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet NetStatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet NetStatusEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet NetStatusEvent. La chaîne est écrite au format suivant :
	<p><codeph>[NetStatusEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> info=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS"><apiName>NET_STATUS</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement netStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>netStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>netStatus</codeph>.
  	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>info</codeph></entry><entry>Objet associé à des propriétés décrivant son état ou indiquant une erreur.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet NetConnection ou NetStream publiant son état. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get"><apiName>info</apiName><shortdesc>
	 Objet associé à des propriétés décrivant son état ou indiquant une erreur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Objet associé à des propriétés décrivant son état ou indiquant une erreur.
	 
	 <p>L’objet d’informations peut avoir une propriété <codeph>code</codeph> contenant une chaîne représentant un événement spécifique ou une propriété <codeph>level</codeph> contenant une chaîne <codeph>"status"</codeph> ou <codeph>"error"</codeph>. </p>
	 
	 <p>L’objet d’informations peut également être différent. Les propriétés <codeph>code</codeph> et <codeph>level</codeph> peuvent ne pas fonctionner pour certaines implémentations et certains serveurs peuvent envoyer des objets différents. </p>
	 
	 <p>Les connexions P2P envoient des messages à un objet <codeph>NetConnection</codeph> avec un paramètre <codeph>stream</codeph> dans l’objet d’informations désignant le <codeph>NetStream</codeph> que le message concerne. <ph product="flex">Par exemple, Flex Data Services envoie des objets Message qui causent des erreurs de forçage de type si vous tentez d’accéder au <codeph>code</codeph> ou à la propriété <codeph>level</codeph>.</ph></p> 
	 
	 <p>Le tableau suivant répertorie les valeurs possibles des propriétés <codeph>code</codeph> et <codeph>level</codeph>.</p>
 <adobetable class="innertable">
  
 
 

  
   
  
  
    
  
  
  
  
  
  
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<tgroup cols="3"><thead><row><entry>Propriété du code</entry><entry>Propriété de niveau</entry><entry>Signification</entry></row></thead><tbody><row>
     <entry><codeph>"NetStream.Buffer.Empty"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>Les données ne sont pas reçues suffisamment rapidement pour remplir le tampon. Le flux de données est interrompu tant que la mémoire tampon n’est pas rechargée : une fois l’opération terminée, un message <codeph>NetStream.Buffer.Full</codeph> est envoyé et la lecture du flux continu reprend.</entry>
 </row><row>
     <entry><codeph>"NetStream.Buffer.Full"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>La mémoire tampon est pleine et la lecture du flux continu commence.</entry>
</row><row>
    <entry><codeph>"NetStream.Buffer.Flush"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Le flux de données est terminé et le tampon restant va être vidé.</entry>
  </row><row>
    <entry><codeph>"NetStream.Failed"</codeph> </entry>
    <entry>« error »</entry>
    <entry>Flash Media Server uniquement. Une erreur s’est produite pour une raison autre que celles énumérées dans d’autres codes d’événement.
    </entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La publication a abouti.</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.BadName"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Tentative de publication d’un flux continu qui est en cours de publication par une autre personne.</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Idle"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La publication du flux est inactive et ne transmet pas de données.</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpublish.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>L’opération d’annulation de la publication a abouti.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La lecture a repris.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La lecture s’est arrêtée.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Une erreur est survenue pendant la lecture, pour une autre raison que celles énumérées dans ce tableau, par exemple l’abonné n’a pas d’accès en lecture.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.StreamNotFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Le fichier FLV transmis à la méthode <codeph>play()</codeph> est introuvable.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Reset"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Causé par une réinitialisation de la liste de lecture.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.PublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La publication initiale dans un flux continu est envoyée à tous les abonnés.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.UnpublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Une annulation de la publication dans un flux continu est envoyée à tous les abonnés.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.InsufficientBW"</codeph> </entry>
    <entry>« warning »</entry>
    <entry>Flash Media Server uniquement. Le client ne dispose pas de suffisamment de bande passante pour lire les données à la vitesse normale. </entry>
  </row><row>
    <entry><codeph>"NetStream.Play.FileStructureInvalid"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>L’application détecte une structure de fichiers non valide et n’essaie pas de lire ce type de fichier. Pour AIR et Flash Player 9.0.115.0 et versions ultérieures.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.NoSupportedTrackFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>L’application ne détecte aucune piste prise en charge (vidéo, audio ou données) et n’essaie pas de lire le fichier. Pour AIR et Flash Player 9.0.115.0 et versions ultérieures.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Flash Media Server uniquement. Le flux transite vers un autre après un basculement du flux de débit. Ce code indique un événement de réussite pour que l’appel de <codeph>NetStream.play2()</codeph> initie un basculement du flux. Si le basculement est un échec, le serveur envoie à la place un événement <codeph>NetStream.Play.Failed</codeph>. Pour Flash Player 10 et les versions ultérieures. </entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Flash Media Server 3.5 et versions ultérieures uniquement. Suite au changement de débit du flux continu, le serveur a reçu une commande de transition vers un autre flux continu. Ce code indique un événement de réussite pour que l’appel de <codeph>NetStream.play2()</codeph> initie un basculement du flux. Si le basculement est un échec, le serveur envoie à la place un événement <codeph>NetStream.Play.Failed</codeph>. Si le changement du flux se produit, un événement <codeph>onPlayStatus</codeph> dont le code est « NetStream.Play.TransitionComplete » est distribué. Pour Flash Player 10 et les versions ultérieures. </entry>
  </row><row>
    <entry><codeph>"NetStream.Pause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Le flux continu est en pause.</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Le flux continu a repris.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>L’enregistrement a commencé.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.NoAccess"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Il s’est produit une tentative d’enregistrement d’un flux continu dont la lecture n’est pas terminée, ou le client ne dispose pas de droits d’accès.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>L’enregistrement s’est arrêté.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Une tentative d’enregistrement d’un flux continu a échoué.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>La recherche a échoué. Cette erreur se produit s’il est impossible d’effectuer des recherches dans le flux continu.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.InvalidTime"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Pour une vidéo chargée avec un chargement progressif, l’utilisateur a tenté de rechercher ou de lire au-delà des données vidéo déjà chargées, ou après la fin de la vidéo lorsque le fichier a été totalement chargé. La propriété <codeph>message.details</codeph> contient un code de temps qui indique la dernière position valide de recherche utilisateur.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>L’opération de recherche est terminée.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.BadVersion"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Paquet codé dans un format non identifié.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>La méthode <codeph>NetConnection.call</codeph> n’a pas pu appeler la méthode ou la commande côté serveur.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Prohibited"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Une opération AMF (Action Message Format) est bloquée pour des raisons de sécurité. Soit l’URL AMF n’est pas dans le même domaine que le fichier contenant le code appelant la méthode <codeph>NetConnection.call()</codeph>, soit le serveur AMF n’a pas de fichier de régulation qui approuve le domaine du fichier contenant le code appelant la méthode <codeph>NetConnection.call()</codeph>. 
	</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La fermeture de la connexion a abouti.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>La tentative de connexion a échoué.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La tentative de connexion a abouti.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>La tentative de connexion n’avait pas accès à l’application.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La connexion P2P a bien été fermée. La propriété <codeph>info.stream</codeph> indique le flux qui a été fermé.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Echec de la tentative de connexion P2P. La propriété <codeph>info.stream</codeph> désigne le flux qui a échoué.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>La tentative de connexion P2P a réussi. La propriété <codeph>info.stream</codeph> désigne le flux qui a réussi.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>La tentative de connexion P2P ne disposait pas des autorisations nécessaires pour accéder à l’autre homologue. La propriété <codeph>info.stream</codeph> désigne le flux qui a été rejeté.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.AppShutdown"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>L’application spécifiée se ferme.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.InvalidApp"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Le nom d’application spécifié lors de la connexion n’est pas valide.</entry>
  </row><row>
    <entry><codeph>"SharedObject.Flush.Success"</codeph></entry>
  	<entry><codeph>"status"</codeph></entry>
  	<entry>L’état « en attente » est résolu et l’appel <codeph>SharedObject.flush()</codeph> a abouti.</entry>
  </row><row> 
    <entry><codeph>"SharedObject.Flush.Failed"</codeph></entry>
 	<entry><codeph>"error"</codeph></entry>
  	<entry>L’état « en attente » est résolu, mais l’appel <codeph>SharedObject.flush()</codeph> a échoué.</entry>
  </row><row>
    <entry><codeph>"SharedObject.BadPersistence"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>Un objet partagé doté d’indicateurs de persistance a été demandé, mais la requête ne peut pas être accordée car l’objet a déjà été créé avec d’autres indicateurs.</entry> 
  </row><row>
    <entry><codeph>"SharedObject.UriMismatch"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>Une tentative de connexion à un objet NetConnection ne possédant pas la même URI (URL) que l’objet partagé a été effectuée.</entry> 
</row></tbody></tgroup></adobetable>
	<p>Si vous recevez systématiquement des erreurs concernant la mémoire tampon, tentez de modifier celle-ci à l’aide de la propriété <codeph>NetStream.bufferTime</codeph>.</p>

	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>Classe NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>Classe NetStream</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
 Un objet MouseEvent est distribué dans le flux d’événements lorsque des événements mouse ont lieu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements de souris.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet MouseEvent est distribué dans le flux d’événements lorsque des événements mouse ont lieu. En règle générale, un événement de souris est généré par un périphérique d’entrée utilisateur, souris ou trackball (boule roulante) qui fonctionne avec un pointeur. 
 
 <p>Lorsque des nœuds imbriqués sont utilisés, les événements de souris ciblent le dernier des nœuds imbriqués visible dans la liste d’affichage. Ce nœud est appelé <i>target node</i>. Pour qu’un ancêtre de nœud cible soit averti d’un événement de souris, utilisez <codeph>EventDispatcher.addEventListener()</codeph> sur l’ancêtre en définissant le paramètre <codeph>type</codeph> sur l’événement de souris à détecter.</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as"> L’exemple suivant utilise les classes <codeph>MouseEventExample</codeph> et <codeph>ChildSprite</codeph> pour montrer comment les événements de souris sont distribués à l’aide d’une image simple. Cet exemple exécute les tâches suivantes :
 <ol>
    <li>L’exemple déclare les propriétés de la taille (100x100 pixels) et de la couleur d’arrière-plan (orange) à utiliser pour tracer le carré.</li>
     <li>Le constructeur crée un nouvel objet ChildSprite <codeph>child</codeph>. Son constructeur dessine tout d’abord un carré orange de 100x100 pixels aux coordonnées (0,0) en appelant sa méthode <codeph>draw()</codeph> et en ajoutant ensuite sept écouteurs/abonnés d’événements.
     <ul>
         <li><codeph>click</codeph> / <codeph>clickHandler()</codeph> : Distribué lorsque l’utilisateur clique une fois dans le carré avec le bouton gauche de sa souris.</li>
         <li><codeph>doubleClick</codeph> / <codeph>doubleClickHandler()</codeph> : Distribué lorsque l’utilisateur double-clique dans le carré avec le bouton gauche de sa souris.</li>
         <li><codeph>mouseDown</codeph> / <codeph>mouseDownHandler()</codeph> : Lorsque l’utilisateur clique sur l’objet ChildSprite (le carré orange), un message <codeph>trace()</codeph> est imprimé à l’écran, puis <codeph>ChildSprite.draw()</codeph> est appelé, pour dessiner un carré jaune foncé à la place du carré bleu clair dessiné par <codeph>mouseOverHandler()</codeph>. La méthode <codeph>mouseDownHandler()</codeph> ajoute également un écouteur d’événements <codeph>mouseMove</codeph> et l’abonné <codeph>mouseMoveHandler()</codeph> (décrit ci-dessous), qui traite les déplacements de la souris. La méthode <codeph>startDrag()</codeph> est ensuite appelée et permet de faire glisser l’objet Sprite.</li>
         <li><codeph>mouseOut</codeph> / <codeph>mouseOutHandler()</codeph> : Distribué chaque fois que le pointeur quitte la zone du carré. La méthode <codeph>draw()</codeph> est appelée pour réinitialiser la taille et la couleur normales du carré.</li>
         <li><codeph>mouseOver</codeph> / <codeph>mouseOverHandler()</codeph> : Distribué lorsque le pointeur de la souris survole le carré. Cette méthode redessine le carré avec une taille plus importante et une couleur d’arrière-plan jaune foncé.</li>
         <li><codeph>mouseUp</codeph> / <codeph>mouseUpHandler()</codeph> : Lorsque l’utilisateur relâche le bouton de sa souris, l’écouteur d’événements <codeph>mouseMove</codeph> est supprimé et <codeph>stopDrag</codeph> est appelé, ce qui fige le carré en place.</li> 
      <li><codeph>mouseMove</codeph>/<codeph>mouseMoveHandler()</codeph> : Appelés dans le cadre de la fonction <codeph>mouseDownHandler()</codeph> et distribués lorsque l’utilisateur appuie sur le bouton gauche de la souris et fait glisser le carré.</li>
         <li><codeph>mouseWheel</codeph> / <codeph>mouseWheelHandler()</codeph> : Distribué lorsque l’utilisateur fait tourner la molette de sa souris dans le carré.</li>
 </ul></li>
    <li>L’occurrence ChildSprite <codeph>child</codeph> est ensuite ajoutée à la liste d’affichage par le biais de <codeph>addChild()</codeph>, qui redessine rapidement le carré orange.</li>
 </ol> 
 
 <p><b>Remarques :</b></p>
 <ul>
     <li>la classe <codeph>MouseEventExample</codeph> doit être la racine du document.</li>
    <li>Certaines des méthodes d’événements énumérées ci-dessus déclarent une variable locale <codeph>sprite</codeph>, qui affecte <codeph>event.target</codeph> au type Sprite.</li>
 </ul>
<codeblock>
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu"><apiName>contextMenu</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick"><apiName>doubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick"><apiName>middleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown"><apiName>middleMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp"><apiName>middleMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> L’exemple suivant est un programme de dessin simple. L’utilisateur peut dessiner sur l’objet Sprite principal ou sur un plus petit objet Sprite rectangulaire. 
   
 <p>Dans le constructeur, un objet Sprite <codeph>innerRect</codeph> de rectangle est créé et le style de ligne est défini sur vert. Le style de ligne pour dessiner sur le conteneur Sprite <codeph>MouseEvent_MOUSE_MOVEExample</codeph> est défini sur rouge. Des écouteurs d’événement séparés pour les événements <codeph>MouseEvent.MOUSE_UP</codeph> et <codeph>MouseEvent.MOUSE_DOWN</codeph> sont ajoutés pour l’objet Sprite principal de l’application et l’objet Sprite <codeph>innerRect</codeph>. Dans les deux cas, les méthodes de l’écouteur d’événement mouse down déplacent la position de dessin actuelle sur l’emplacement du pointeur de la souris et ajoutent un écouteur pour l’événement <codeph>MouseEvent.MOUSE_MOVE</codeph>. Lorsque le pointeur de la souris est déplacé, les méthodes de l’écouteur d’événements invoquées suivent le pointeur et tracent une ligne à l’aide de la méthode <codeph>graphics.LineTo()</codeph> (<b>remarque :</b> l’objet Sprite <codeph>innerRect</codeph> masque les lignes rouges de l’objet Sprite principal tracées derrière le rectangle). Lorsque l’événement <codeph>MouseEvent.MOUSE_UP</codeph> a lieu, l’écouteur pour l’événement <codeph>MOUSE_MOVE</codeph> est supprimé et le dessin est arrêté.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut"><apiName>mouseOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver"><apiName>mouseOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel"><apiName>mouseWheel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown"><apiName>RightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut"><apiName>rollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver"><apiName>rollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
     Crée un objet Event contenant des informations sur les événements de souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles : <codeph>MouseEvent.CLICK</codeph>, <codeph>MouseEvent.DOUBLE_CLICK</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_MOVE</codeph>, <codeph>MouseEvent.MOUSE_OUT</codeph>, <codeph>MouseEvent.MOUSE_OVER</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph>, <codeph>MouseEvent.MIDDLE_CLICK</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_DOWN</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_UP</codeph>, <codeph>MouseEvent.RIGHT_CLICK</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_DOWN</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_UP</codeph>, <codeph>MouseEvent.MOUSE_WHEEL</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph> et <codeph>MouseEvent.ROLL_OVER</codeph>. 
	 
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé.
	 </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.
	 </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.
	 </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Occurrence complémentaire d’InteractiveObject affectée par l’événement. Lorsqu’un événement <codeph>mouseOut</codeph> se produit par exemple, <codeph>relatedObject</codeph> représente l’objet de la liste d’affichage sur lequel pointe actuellement le périphérique de pointage.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Sous Windows ou Linux, indique si la touche Ctrl est activée. Sous Mac, indique si la touche Ctrl ou la touche Commande est activée.
     </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Alt est activée (Windows ou Linux uniquement).
	 </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Maj est activée.
	 </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si l’utilisateur appuie sur le bouton principal de la souris.
	 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Indique le nombre de lignes qui doivent défiler chaque fois que l’utilisateur fait tourner la molette de sa souris d’un cran. Une valeur delta positive indique un défilement vers le haut ; une valeur négative un défilement vers le bas. Les valeurs types sont comprises entre 1 et 3 ; une rotation plus rapide peut générer des valeurs supérieures. Ce paramètre s’utilise uniquement avec l’événement <codeph>MouseEvent.mouseWheel</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(AIR uniquement) Indique si la touche Commande est activée (Mac uniquement). Ce paramètre est utilisé uniquement pour les événements <codeph>MouseEvent.click</codeph>, <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph> et <codeph>MouseEvent.doubleClick</codeph>. Ce paramètre est destiné à Adobe AIR uniquement ; ne le définissez pas pour le contenu Flash Player. 
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(AIR uniquement) Indique si la touche Contrôle ou Ctrl est activée (Mac uniquement). Ce paramètre est utilisé uniquement pour les événements <codeph>MouseEvent.click</codeph>, <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph> et <codeph>MouseEvent.doubleClick</codeph>. Ce paramètre est destiné à Adobe AIR uniquement ; ne le définissez pas pour le contenu Flash Player. 
	</apiDesc></apiParam><apiParam><apiItemName>clickCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>(AIR uniquement) Indique si l’événement mouse fait partie d’une séquence multi-clic. Ce paramètre équivaut à zéro pour tous les événements mouse autres que <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightMouseDown</codeph> et <codeph>MouseEvent.rightMouseUp</codeph>. L’écoute de clics simples, doubles ou de séquences multi-clic est possible avec le paramètre <codeph>clickCount</codeph>. Ce paramètre est destiné à Adobe AIR uniquement ; ne le définissez pas pour le contenu Flash Player. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets MouseEvent.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Crée un objet Event contenant des informations sur les événements de souris. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet MouseEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet MouseEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet MouseEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet MouseEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet MouseEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet MouseEvent. La chaîne est écrite au format suivant :
	<p><codeph>[MouseEvent type=<i>value</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> ... delta=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Demande à Flash Player ou à Adobe AIR d’effectuer un rendu à la fin du traitement de cet événement, si la liste d’affichage a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Demande à Flash Player ou à Adobe AIR d’effectuer un rendu à la fin du traitement de cet événement, si la liste d’affichage a été modifiée.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement click.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>click</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU"><apiName>CONTEXT_MENU</apiName><shortdesc>
	La constante MouseEvent.CONTEXT_MENU définit la valeur de la propriété type d’un objet événement contextMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contextMenu</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>MouseEvent.CONTEXT_MENU</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>contextMenu</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton droit de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK"><apiName>DOUBLE_CLICK</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement doubleClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>doubleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>doubleClick. </codeph> La propriété <codeph>doubleClickEnabled</codeph> doit être <codeph>true</codeph> pour qu’un objet puisse générer l’événement <codeph>doubleClick</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK"><apiName>MIDDLE_CLICK</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement middleClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>middleClick</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN"><apiName>MIDDLE_MOUSE_DOWN</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement middleMouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>middleMouseDown</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton central de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP"><apiName>MIDDLE_MOUSE_UP</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement middleMouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>middleMouseUp</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton central de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseDown</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows et Linux si la touche Ctrl est activée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Consultez l’exemple de la constante <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> pour une illustration de l’utilisation de cette constante. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseMove.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseMove</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> L’exemple suivant est un programme de dessin simple. L’utilisateur peut dessiner sur l’objet Sprite principal ou sur un plus petit objet Sprite rectangulaire. 
   
 <p>Dans le constructeur, un objet Sprite <codeph>innerRect</codeph> de rectangle est créé et le style de ligne est défini sur vert. Le style de ligne pour dessiner sur le conteneur Sprite <codeph>MouseEvent_MOUSE_MOVEExample</codeph> est défini sur rouge. Des écouteurs d’événement séparés pour les événements <codeph>MouseEvent.MOUSE_UP</codeph> et <codeph>MouseEvent.MOUSE_DOWN</codeph> sont ajoutés pour l’objet Sprite principal de l’application et l’objet Sprite <codeph>innerRect</codeph>. Dans les deux cas, les méthodes de l’écouteur d’événement mouse down déplacent la position de dessin actuelle sur l’emplacement du pointeur de la souris et ajoutent un écouteur pour l’événement <codeph>MouseEvent.MOUSE_MOVE</codeph>. Lorsque le pointeur de la souris est déplacé, les méthodes de l’écouteur d’événements invoquées suivent le pointeur et tracent une ligne à l’aide de la méthode <codeph>graphics.LineTo()</codeph> (<b>remarque :</b> l’objet Sprite <codeph>innerRect</codeph> masque les lignes rouges de l’objet Sprite principal tracées derrière le rectangle). Lorsque l’événement <codeph>MouseEvent.MOUSE_UP</codeph> a lieu, l’écouteur pour l’événement <codeph>MOUSE_MOVE</codeph> est supprimé et le dessin est arrêté.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT"><apiName>MOUSE_OUT</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseOut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseOut</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Objet de la liste d’affichage sur lequel pointe actuellement le périphérique de pointage.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER"><apiName>MOUSE_OVER</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseOver</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Objet de la liste d’affichage sur lequel pointait le périphérique de pointage.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseUp</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Consultez l’exemple de la constante <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> pour une illustration de l’utilisation de cette constante. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL"><apiName>MOUSE_WHEEL</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseWheel</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>delta</codeph></entry><entry>Nombre de lignes représenté par chaque cran de la molette de la souris.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement rightClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rightClick</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement rightMouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rightMouseDown</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement rightMouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rightMouseUp</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton droit de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Décompte du nombre de clics souris pour indiquer si l’événement fait partie d’une séquence multi-clic.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement rollOut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rollOut</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Objet de la liste d’affichage sur lequel pointe actuellement le périphérique de pointage.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement rollOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rollOver</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> si la touche Alt est activée (Windows ou Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Objet de la liste d’affichage sur lequel pointait le périphérique de pointage.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject sous le périphérique de pointage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
    Indique si la touche Alt est active (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    Indique si la touche Alt est active (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Pris en charge uniquement pour les systèmes d’exploitation Windows et Linux.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get"><apiName>buttonDown</apiName><shortdesc>
	Indique si l’utilisateur appuie (true) ou non (false) sur le bouton principal de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si l’utilisateur appuie (<codeph>true</codeph>) ou non (<codeph>false</codeph>) sur le bouton principal de la souris.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get"><apiName>clickCount</apiName><shortdesc>
	Indique si l’événement mouse down fait partie d’une séquence multi-clic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Indique si l’événement mouse down fait partie d’une séquence multi-clic. Ce paramètre équivaut à zéro pour tous les événements mouse autres que <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightMouseDown</codeph> et <codeph>MouseEvent.rightMouseUp</codeph>. L’écoute de clics simples, doubles ou de séquences multi-clic est possible avec le paramètre <codeph>clickCount</codeph>. Par exemple, un <codeph>MouseEvent.mouseDown</codeph> et <codeph>MouseEvent.mouseUp</codeph> initial a un <codeph>clickCount</codeph> de 1, et le second <codeph>MouseEvent.mouseDown</codeph> et <codeph>MouseEvent.mouseUp</codeph> dans une séquence double-clic a un <codeph>clickCount</codeph> de 2. Si la souris se déplace suffisamment ou que la séquence multi clic est interrompue, pour une raison ou pour une autre, le <codeph>MouseEvent.mouseDown</codeph> suivant a un clickCount de 1. L’événement doubleClick continue à se déclencher comme prévu.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Indique si la touche Commande est activée (Mac uniquement). La valeur de la propriété commandKey a la même valeur que la propriété ctrlKey sur le Mac.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche Commande est activée (Mac uniquement).  
	
	<p>La valeur de la propriété <codeph>commandKey</codeph> a la même valeur que la propriété <codeph>ctrlKey</codeph> sur le Mac. Toujours false sous Windows ou Linux.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Indique si la touche Contrôle et activée sous Mac et si la touche Ctrl est activée sous Windows ou Linux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche Contrôle et activée sous Mac et si la touche Ctrl est activée sous Windows ou Linux.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	Sous Windows ou Linux, indique si la touche Ctrl est activée (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Sous Windows ou Linux, indique si la touche Ctrl est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Sous Macintosh, indique si la touche Contrôle ou la touche Commande est activée.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get"><apiName>delta</apiName><shortdesc>
	Indique le nombre de lignes qui doivent défiler chaque fois que l’utilisateur fait tourner la molette de sa souris d’un cran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Indique le nombre de lignes qui doivent défiler chaque fois que l’utilisateur fait tourner la molette de sa souris d’un cran. Une valeur delta positive indique un défilement vers le haut ; une valeur négative un défilement vers le bas. Les valeurs types sont comprises entre 1 et 3 ; une rotation plus rapide peut générer des valeurs supérieures. Ce paramètre dépend du périphérique et du système d’exploitation et est généralement configurable par l’utilisateur. Cette propriété s’applique uniquement à l’événement <codeph>MouseEvent.mouseWheel</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 Si la valeur est true, la propriété relatedObject est définie sur null pour des raisons liées aux sandbox de sécurité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Si la valeur est <codeph>true</codeph>, la propriété <codeph>relatedObject</codeph> est définie sur <codeph>null</codeph> pour des raisons liées aux sandbox de sécurité. Si la valeur nominale de <codeph>relatedObject</codeph> est une référence à un DisplayObject se trouvant dans un autre sandbox, <codeph>relatedObject</codeph> est défini sur <codeph>null</codeph>, à moins qu’il existe une autorisation dans les deux sens dans les limites de ce sandbox. L’autorisation est établie en appelant la méthode <codeph>Security.allowDomain()</codeph> à partir d’un fichier SWF ou en fournissant un fichier de régulation depuis le serveur d’un fichier image, puis en définissant la propriété <codeph>LoaderContext.checkPolicyFile</codeph> lors du chargement de l’image.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/relatedObject"><linktext>MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get"><apiName>localX</apiName><shortdesc>
	Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.
	
	</apiDesc><example>Consultez l’exemple de la constante <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> pour une illustration de l’utilisation de cette propriété.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get"><apiName>localY</apiName><shortdesc>
	Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.
	
	</apiDesc><example>Consultez l’exemple de la constante <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> pour une illustration de l’utilisation de cette propriété.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	Référence à un objet de la liste d’affichage qui est associé à l’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Référence à un objet de la liste d’affichage qui est associé à l’événement. Lorsqu’un événement <codeph>mouseOut</codeph> se produit par exemple, <codeph>relatedObject</codeph> représente l’objet de la liste d’affichage sur lequel pointe actuellement le périphérique de pointage. Cette propriété s’applique aux événements <codeph>mouseOut</codeph>, <codeph>mouseOver</codeph>, <codeph>rollOut</codeph> et <codeph>rollOver</codeph>.
	<p>La valeur de cette propriété peut être <codeph>null</codeph> dans deux cas : s’il n’existe aucun objet associé ou s’il existe un objet associé se trouvant dans un sandbox de sécurité auquel vous n’avez pas accès. Pour savoir dans quel cas vous vous trouvez, utilisez la propriété <codeph>isRelatedObjectInaccessible()</codeph>.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible"><linktext>MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Indique si la touche Maj est activée (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche Maj est activée (<codeph>true</codeph>) ou non (<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get"><apiName>stageX</apiName><shortdesc>
	Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène. Cette propriété est calculée lorsque la propriété <codeph>localX</codeph> est définie.
	
	</apiDesc><example>Consultez l’exemple de la constante <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> pour une illustration de l’utilisation de cette propriété. 
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get"><apiName>stageY</apiName><shortdesc>
	Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées globales de la scène. Cette propriété est calculée lorsque la propriété <codeph>localY</codeph> est définie.
	
	</apiDesc><example>Consultez l’exemple de la constante <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> pour une illustration de l’utilisation de cette propriété.
	</example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
	
	Un objet NetStream distribue un objet DRMStatusEvent lorsque la lecture du contenu protégé à l’aide de la gestion des droits numériques (DRM, digital rights management) commence (lorsque le bon est vérifié, et lorsque l’utilisateur est authentifié et autorisé à afficher le contenu).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event pour des objets activés DRM.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	
	Un objet NetStream distribue un objet DRMStatusEvent lorsque la lecture du contenu protégé à l’aide de la gestion des droits numériques (DRM, digital rights management) commence (lorsque le bon est vérifié, et lorsque l’utilisateur est authentifié et autorisé à afficher le contenu). L’objet DRMStatusEvent contient des informations liées au bon (si le contenu peut être disponible hors ligne ou lorsque le bon expire et que le contenu ne peut plus être affiché, par exemple). L’application peut utiliser ces données pour informer l’utilisateur de l’état de sa régulation et de ses autorisations.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS"><linktext>DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
 	    Crée un objet Event contenant des informations spécifiques sur les événements DRM status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent, constructor
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement DRMAuthenticate : <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
		</apiDesc></apiParam><apiParam><apiItemName>inPolicies</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>L’objet custom qui contient des propriétés DRM personnalisées.  		
		</apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Contexte de l’événement.   		
		</apiDesc></apiParam><apiParam><apiItemName>inAvailableOffline</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si le contenu peut être affiché hors ligne.
		</apiDesc></apiParam><apiParam><apiItemName>inAnonymous</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si le contenu est accessible à des utilisateurs anonymes.
		</apiDesc></apiParam><apiParam><apiItemName>inVoucherEndDate</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>La date d’expiration du bon du contenu, exprimée sous la forme d’une valeur d’epoch.
		</apiDesc></apiParam><apiParam><apiItemName>inOfflineLeasePeriod</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Le nombre de jours qu’il reste à l’utilisateur pour afficher le contenu hors ligne.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inVoucher</apiItemName><apiOperationClassifier>flash.net.drm:DRMVoucher</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inLocal</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Crée un objet Event contenant des informations spécifiques sur les événements DRM status. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone"><apiName>clone</apiName><shortdesc>
		Crée une copie de l’objet DRMStatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet DRMStatusEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Crée une copie de l’objet DRMStatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString"><apiName>toString</apiName><shortdesc>
		Renvoie une chaîne répertoriant toutes les propriétés de l’objet DRMStatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Une chaîne contenant toutes les propriétés de l’objet DRMStatusEvent.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Renvoie une chaîne répertoriant toutes les propriétés de l’objet DRMStatusEvent. 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS"><apiName>DRM_STATUS</apiName><shortdesc>
		La constante DRMStatusEvent.DRM_STATUS définit la valeur de la propriété type d’un objet de l’événement drmStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		La constante <codeph>DRMStatusEvent.DRM_STATUS</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>drmStatus</codeph>. 
		
		
		<p>Les propriétés de cet événement sont les suivantes :</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>detail</codeph></entry><entry>Une chaîne expliquant le contexte de l’événement status.</entry></row><row><entry><codeph>isAnonymous</codeph></entry><entry>Indique si le contenu protégé avec le chiffrement DRM est disponible sans que l’utilisateur doive fournir des informations d’identification d’authentification.</entry></row><row><entry><codeph>isAvailableOffline</codeph></entry><entry>Indique si le contenu protégé avec le chiffrement DRM est disponible hors ligne.</entry></row><row><entry><codeph>offlineLeasePeriod</codeph></entry><entry>Le nombre de jours qu’il reste pour afficher le contenu hors ligne.</entry></row><row><entry><codeph>policies</codeph></entry><entry>Un objet custom de l’événement DRM status.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NetStream.</entry></row><row><entry><codeph>voucherEndDate</codeph></entry><entry>La date absolue d’expiration du bon à laquelle le contenu ne peut plus être affiché par les utilisateurs</entry></row><row><entry><codeph>contentData</codeph></entry><entry>DRMContentData pour le contenu</entry></row><row><entry><codeph>voucher</codeph></entry><entry>L’objet DRMVoucher pour le contenu.</entry></row><row><entry><codeph>isLocal</codeph></entry><entry>Indique si le contenu est enregistré sur le système de fichiers local</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get"><apiName>detail</apiName><shortdesc>
		Une chaîne expliquant le contexte de l’événement status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Une chaîne expliquant le contexte de l’événement status.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get"><apiName>isAnonymous</apiName><shortdesc>
		Indique si le contenu, protégé par le chiffrement DRM (digital rights management : gestion des droits numériques) est disponible sans que l’utilisateur doive fournir des informations d’identification d’authentification, auquel cas la valeur est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Indique si le contenu, protégé par le chiffrement DRM (digital rights management : gestion des droits numériques) est disponible sans que l’utilisateur doive fournir des informations d’identification d’authentification, auquel cas la valeur est <codeph>true</codeph>. Autrement, la valeur est <codeph>false</codeph> et un utilisateur doit fournir un nom d’utilisateur et un mot de passe correspondant à ceux connus et attendus par le fournisseur de contenu. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get"><apiName>isAvailableOffline</apiName><shortdesc>
		Indique si le contenu, protégé par le chiffrement DRM (digital rights management : gestion des droits numériques), est disponible hors ligne, auquel cas la valeur est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Indique si le contenu, protégé par le chiffrement DRM (digital rights management : gestion des droits numériques), est disponible hors ligne, auquel cas la valeur est <codeph>true</codeph>. Sinon, elle correspond à <codeph>false</codeph>.
		<p>
		Pour que le contenu protégé numériquement soit disponible hors ligne, son bon doit être mis en mémoire cache sur la machine locale de l’utilisateur (l’application décide où stocker le contenu localement pour qu’il soit disponible hors ligne).
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get"><apiName>offlineLeasePeriod</apiName><shortdesc>
		Le nombre de jours qu’il reste pour afficher le contenu hors ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		Le nombre de jours qu’il reste pour afficher le contenu hors ligne.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get"><apiName>policies</apiName><shortdesc>
		Un objet custom de l’événement DRM status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		Un objet custom de l’événement DRM status.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get"><apiName>voucherEndDate</apiName><shortdesc>
		La date absolue d’expiration du bon à laquelle le contenu ne peut plus être affiché par les utilisateurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
		La date absolue d’expiration du bon à laquelle le contenu ne peut plus être affiché par les utilisateurs. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 Un objet DRMContentData contenant les informations nécessaires pour obtenir un voucher permettant de visualiser le contenu protégé par DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 Un objet DRMContentData contenant les informations nécessaires pour obtenir un voucher permettant de visualiser le contenu protégé par DRM.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:set"><apiName>isLocal</apiName><shortdesc>
		 Indique si le voucher est mis en cache dans le magasin de vouchers local.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Indique si le voucher est mis en cache dans le magasin de vouchers local.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:set"><apiName>voucher</apiName><shortdesc>
		 Un objet DRMVoucher pour le contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc>
		 Un objet DRMVoucher pour le contenu.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Un objet distribue un événement AsyncErrorEvent lorsqu’une exception est renvoyée par le code asynchrone natif (LocalConnection, NetConnection, SharedObject ou NetStream).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements AsyncErrorEvent.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	Un objet distribue un événement AsyncErrorEvent lorsqu’une exception est renvoyée par le code asynchrone natif (LocalConnection, NetConnection<ph platform="actionscript">, SharedObject</ph> ou NetStream). Il n’existe qu’un seul type d’événement d’erreur asynchrone : <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph>.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR"><linktext>ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Crée un objet AsyncErrorEvent contenant des informations sur les événements AsyncError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement d’erreur : <codeph>ErrorEvent.ERROR</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event se propage vers le haut. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée. <ph platform="javascript">Cette propriété s’applique pour afficher des objets dans le contenu SWF, qui utilisent l’architecture d’affichage ActionScript 3.0.</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Texte à afficher en tant que message d’erreur. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>text</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier><apiData>null</apiData><apiDesc>Exception qui s’est produite. Si une erreur est définie, la propriété <codeph>errorId</codeph> de l’événement est définie à partir de la propriété <codeph>errorId</codeph> de l’erreur.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets AsyncErrorEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet AsyncErrorEvent contenant des informations sur les événements AsyncError. Les objets AsyncErrorEvent sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet AsyncErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet AsyncErrorEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet AsyncErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet AsyncErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet AsyncErrorEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet AsyncErrorEvent. La chaîne est écrite au format suivant :
	<p><codeph>[AsyncErrorEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> ... error=<i>valeur</i> errorID=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR"><apiName>ASYNC_ERROR</apiName><shortdesc>
	La constante AsyncErrorEvent.ASYNC_ERROR définit la valeur de la propriété type d’un objet événement asyncError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>asyncError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>asyncError</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph><ph platform="javascript"> Cette propriété s’applique à des objets d’affichage ActionScript 3.0 (dans des fichiers SWF).</ph></entry> </row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler. <ph platform="javascript">Cette propriété s’applique à des objets d’affichage dans le contenu SWF, qui utilisent l’architecture d’affichage ActionScript 3.0.</ph></entry> </row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements. <ph platform="javascript">Cette propriété s’applique à des objets d’affichage dans le contenu SWF, qui utilisent l’architecture d’affichage ActionScript 3.0.</ph></entry> </row><row><entry><codeph>target</codeph></entry> <entry>L’objet distribuant l’événement.</entry> </row><row><entry><codeph>error</codeph></entry><entry>Erreur qui a déclenché l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error"><apiName>error</apiName><shortdesc>
	Exception qui a été renvoyée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Error</apiValueClassifier></apiValueDef><apiDesc>
	Exception qui a été renvoyée.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
 Un objet distribue un objet StatusEvent lorsqu’un périphérique, tel qu’une caméra, un microphone ou un objet de type LocalConnection publie son état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements StatusEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet distribue un objet StatusEvent lorsqu’un périphérique, tel qu’une caméra, un microphone ou un objet de type LocalConnection publie son état. Il n’existe qu’un seul type d’événement status : <codeph>StatusEvent.STATUS</codeph> :
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link><link href="air.net.xml#ServiceMonitor"><linktext>air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
	 Crée un objet Event contenant des informations sur les événements status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement status : <codeph>StatusEvent.STATUS</codeph> :
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	 </apiDesc></apiParam><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Description de l’état de l’objet. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>code</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Catégorie du message, telle que <codeph>"status"</codeph>, <codeph>"warning"</codeph> ou <codeph>"error"</codeph>. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>level</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets StatusEvent.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Crée un objet Event contenant des informations sur les événements status. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#StatusEvent/STATUS"><linktext>STATUT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie de l’objet StatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet StatusEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie de l’objet StatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString"><apiName>toString</apiName><shortdesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet StatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet StatusEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet StatusEvent. La chaîne est écrite au format suivant :
	 <p><codeph>[StatusEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> code=<i>valeur</i> level=<i>valeur</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS"><apiName>STATUS</apiName><shortdesc>
     Définit la valeur de la propriété type d’un objet événement status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>status</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>status</codeph>.
	 <p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>code</codeph></entry><entry>Description de l’état de l’objet.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>level</codeph></entry><entry>Catégorie du message, telle que <codeph>"status"</codeph>, <codeph>"warning"</codeph> ou <codeph>"error"</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet publiant son état.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get"><apiName>code</apiName><shortdesc>
	 Description de l’état de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Description de l’état de l’objet.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get"><apiName>level</apiName><shortdesc>
 	 Catégorie du message, telle que « status », « warning » ou « error ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 	 Catégorie du message, telle que <codeph>"status"</codeph>, <codeph>"warning"</codeph> ou <codeph>"error"</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
	 DRMManager distribue un objet DRMAuthenticationErrorEvent lorsqu’un appel de la méthode authenticate() de l’objet DRMManager échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DRMManager distribue un objet DRMAuthenticationErrorEvent lorsqu’un appel de la méthode <codeph>authenticate()</codeph> de l’objet DRMManager échoue.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
		 Crée une nouvelle occurrence d’un objet DRMAuthenticationErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>La chaîne de type de l’événement
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Si l’événement propage vers le haut la liste d’affichage
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Si l’événement peut être annulé
		 </apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>La description de l’erreur
		 </apiDesc></apiParam><apiParam><apiItemName>inErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>L’ID du type d’erreur général
		 </apiDesc></apiParam><apiParam><apiItemName>inSubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>L’ID indiquant l’erreur spécifique dans son type
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>L’URL du serveur auquel l’utilisateur s’est connecté
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Le domaine authentifié sur le serveur auquel l’utilisateur s’est connecté
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Crée une nouvelle occurrence d’un objet DRMAuthenticationErrorEvent.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR"><apiName>AUTHENTICATION_ERROR</apiName><shortdesc>
		 La constante de type chaîne à utiliser pour l’événement d’erreur d’authentification dans le paramètre type lors de l’ajout et de la suppression d’écouteurs d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>AuthenticationError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 La constante de type chaîne à utiliser pour l’événement d’erreur d’authentification dans le paramètre type lors de l’ajout et de la suppression d’écouteurs d’événement.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:set"><apiName>subErrorID</apiName><shortdesc>
		 Un code d’erreur plus détaillé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 Un code d’erreur plus détaillé.
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:IEventDispatcher"><apiName>IEventDispatcher</apiName><shortdesc>
L’interface IEventDispatcher définit des méthodes d’ajout ou de suppression d’écouteurs d’événement, vérifie si des types spécifiques d’écouteurs d’événement sont enregistrés et distribue des événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
L’interface IEventDispatcher définit des méthodes d’ajout ou de suppression d’écouteurs d’événements, vérifie si des types spécifiques d’écouteurs d’événements sont enregistrés et distribue des événements.

<p>Les cibles d’événement constituent une part importante du modèle d’événement de Flash<sup>®</sup> Player et d’Adobe AIR. La cible de l’événement détermine le flux d’événements dans la hiérarchie de la liste d’affichage. Lorsqu’un événement, tel qu’un clic de souris ou une pression sur une touche, se produit, un objet événement est distribué dans le flux d’événements, à partir de la racine de la liste d’affichage. L’objet événement effectue un aller-retour jusqu’à la cible de l’événement, divisé de manière conceptuelle en trois phases : La phase de capture correspond au trajet de la racine jusqu’au dernier nœud précédant le nœud de la cible de l’événement, la phase cible concerne uniquement le nœud de la cible de l’événement, tandis que la phase de propagation vers le haut (bubbling) comprend tous les nœuds rencontrés sur le trajet de retour à la racine de la liste d’affichage.</p>

<p>En règle générale, pour qu’une classe définie par l’utilisateur acquière des fonctions de distribution, le plus simple consiste à étendre EventDispatcher. Si cela est impossible (autrement dit, si cette classe étend déjà une autre classe), vous pouvez implémenter l’interface IEventDispatcher, créer un membre EventDispatcher et écrire des raccrochements simples pour acheminer les appels vers la classe EventDispatcher regroupée.</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as"> L’exemple suivant utilise les classes IEventDispatcherExample et DecoratedDispatcher pour montrer comment la classe IEventDispatcher peut être implémentée et utilisée. L’exemple effectue cette opération en implémentant chaque méthode de DecoratedDispatcher de la même manière que pour EventDispatcher. A l’intérieur du constructeur de IEventDispatcherExample, une nouvelle occurrence (appelée <codeph>decorDispatcher</codeph>) de la classe DecoratedDispatcher est construite et la variable <codeph>decorDispatcher</codeph> est utilisée pour appeler <codeph>addEventListener()</codeph> avec l’événement personnalisé <codeph>doSomething</codeph>, traité alors par <codeph>didSomething()</codeph>, qui imprime une ligne de texte à l’aide de <codeph>trace()</codeph>.
<codeblock> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace(">> didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Enregistre un objet écouteur d’événement auprès d’un objet EventDispatcher afin que l’écouteur soit averti d’un événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Fonction d’auditeur qui traite l’événement. Cette fonction doit accepter un objet Event comme seul paramètre et ne doit rien renvoyer, comme dans l’exemple ci-dessous :
	<p><codeph>function(evt:Event):void</codeph></p>
	Le nom de cette fonction n’a aucune importance.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’écouteur est actif pendant la phase de capture ou pendant les phases cible et de propagation vers le haut. Si la propriété <codeph>useCapture</codeph> est définie sur <codeph>true</codeph>, l’écouteur traite l’événement uniquement pendant la phase de capture et non pendant les phases cible et de propagation vers le haut. Si la propriété <codeph>useCapture</codeph> est définie sur <codeph>false</codeph>, l’écouteur traite l’événement uniquement pendant les phases cible et de propagation vers le haut. Pour écouter l’événement dans les trois phases, appelez <codeph>addEventListener()</codeph> à deux reprises, une première fois avec la propriété <codeph>useCapture</codeph> définie sur <codeph>true</codeph>, puis une nouvelle fois avec <codeph>useCapture</codeph> définie sur <codeph>false</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Niveau de priorité de l’écouteur d’événement. La priorité est désignée par un entier de 32 bits. Plus le nombre est élevé, plus la priorité est élevée. Tous les écouteurs de priorité <i>n</i> sont traités avant les écouteurs de priorité <i>n-1</i>. Les écouteurs dont la priorité est identique sont traités dans l’ordre où ils ont été ajoutés. La priorité par défaut est 0. 
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si la référence à l’écouteur est forte ou faible. Une référence forte (valeur par défaut) empêche le nettoyage de votre écouteur, Cela n’est pas le cas avec une référence faible. <p>Les fonctions de membres de niveau classe n’étant pas soumises au nettoyage, vous pouvez définir <codeph>useWeakReference</codeph> sur <codeph>true</codeph> pour ces fonctions. Si vous définissez <codeph>useWeakReference</codeph> sur <codeph>true</codeph> pour un écouteur correspondant à une fonction imbriquée interne, la fonction sera nettoyée et ne sera donc pas permanente. Si vous créez des références à la fonction interne (enregistrée dans une autre variable), celle-ci n’est pas nettoyée et reste permanente.</p>
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Enregistre un objet écouteur d’événement auprès d’un objet EventDispatcher afin que l’écouteur soit averti d’un événement. Vous pouvez enregistrer les écouteurs d’événement dans tous les nœuds de la liste d’affichage pour un type spécifique d’événement, de phase et de priorité.
	<p>Après l’enregistrement d’un écouteur d’événement, vous ne pouvez plus modifier sa priorité par d’autres appels de <codeph>addEventListener()</codeph>. Pour modifier la priorité d’un écouteur, vous devez d’abord appeler <codeph>removeEventListener()</codeph>. Vous pouvez ensuite réenregistrer l’écouteur avec le nouveau niveau de priorité.</p>
	<p>Après l’enregistrement de l’écouteur, tous les futurs appels de <codeph>addEventListener()</codeph> avec une valeur <codeph>type</codeph> ou <codeph>useCapture</codeph> différente entraîneront la création d’un autre enregistrement d’écouteur. Si, par exemple, vous enregistrez un écouteur dans lequel la propriété <codeph>useCapture</codeph> est définie sur <codeph>true</codeph>, il écoute uniquement pendant la phase de capture. Si vous appelez <codeph>addEventListener()</codeph> à l’aide du même objet écouteur, mais en définissant <codeph>useCapture</codeph> sur <codeph>false</codeph>, vous obtenez deux écouteurs distincts : l’un qui écoute pendant la phase de capture et l’autre qui écoute pendant les phases cible et de propagation vers le haut.</p>
	<p>Il est impossible d’enregistrer un écouteur d’événement uniquement pour la phase cible ou la phase de propagation vers le haut. Ces deux phases sont associées pendant l’enregistrement car la propagation vers le haut s’applique uniquement aux ancêtres du nœud cible.</p>
	<p>Si vous n’avez plus besoin d’un écouteur d’événement, supprimez-le en appelant <codeph>EventDispatcher.removeEventListener()</codeph>, pour éviter tout problème de mémoire. Les objets associés à des écouteurs d’événement enregistrés ne sont pas automatiquement supprimés de la mémoire, car le nettoyeur de mémoire n’efface pas les objets auxquels il est toujours fait référence.</p>
	<p>Lors de la copie d’une occurrence d’EventDispatcher, les écouteurs d’événement qui lui sont associés ne sont pas pris en compte (si le nouveau nœud nécessite un écouteur d’événement, vous devez associer celui-ci après la création du nœud). Toutefois, si vous déplacez une occurrence d’EventDispatcher, les écouteurs d’événement qui lui sont associés la suivent.</p>
	<p>Si un écouteur d’événement est enregistré sur un nœud alors qu’un événement est en cours de traitement sur ce nœud, l’écouteur n’est pas déclenché pendant la phase actuelle, mais il peut l’être pendant une phase ultérieure du flux d’événements, telle que la phase de propagation vers le haut.</p>
	<p>Si un écouteur d’événement est supprimé d’un nœud sur lequel un événement est en cours de traitement, il est cependant déclenché par les actions en cours. Une fois supprimé, l’écouteur d’événement n’est plus jamais appelé (à moins d’être réenregistré à des fins de traitement ultérieur). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Distribue un événement dans le flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, sauf si la méthode <codeph>preventDefault()</codeph> est appelée sur l’événement, auquel cas la valeur <codeph>false</codeph> est renvoyée.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>Objet d’événement distribué dans le flux d’événements.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Distribue un événement dans le flux d’événements. La cible de l’événement est l’objet EventDispatcher sur lequel la méthode <codeph>dispatchEvent()</codeph> est appelée.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Vérifie si des écouteurs sont enregistrés auprès de l’objet EventDispatcher pour un type spécifique d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur <codeph>true</codeph> est renvoyée si un écouteur du type spécifié est enregistré. La valeur <codeph>false</codeph> est renvoyée dans tous les autres cas.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Vérifie si des écouteurs sont enregistrés auprès de l’objet EventDispatcher pour un type spécifique d’événement. Vous pouvez ainsi déterminer précisément où un objet EventDispatcher a modifié la gestion d’un type d’événement dans la hiérarchie du flux d’événements. Pour savoir si un type d’événement spécifique déclenche réellement un écouteur d’événement, utilisez <codeph>IEventDispatcher.willTrigger()</codeph>.
	<p>La différence entre les méthodes <codeph>hasEventListener()</codeph> et <codeph>willTrigger()</codeph> est la suivante : <codeph>hasEventListener()</codeph> examine uniquement l’objet auquel elle appartient, tandis que <codeph>willTrigger()</codeph> recherche dans la totalité du flux d’événements l’événement spécifié par le paramètre <codeph>type</codeph>.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#IEventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Supprime un écouteur de l’objet EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Objet écouteur à supprimer.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’écouteur a été enregistré pendant la phase de capture ou pendant les phases cible et de propagation vers le haut. Si l’écouteur a été enregistré pendant la phase de capture et pendant les phases cible et de propagation vers le haut, il est nécessaire d’appeler <codeph>removeEventListener()</codeph> à deux reprises pour le supprimer : une première fois en définissant <codeph>useCapture</codeph> sur <codeph>true</codeph>, puis une seconde fois avec la propriété <codeph>useCapture</codeph> définie sur <codeph>false</codeph>. 
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Supprime un écouteur de l’objet EventDispatcher. Si aucun écouteur correspondant n’est enregistré auprès de l’objet EventDispatcher, l’appel de cette méthode n’a aucun effet.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Vérifie si un écouteur d’événement est enregistré auprès de cet objet EventDispatcher ou de ses ancêtres pour le type d’événement spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si un écouteur du type spécifié est enregistré, <codeph>false</codeph> dans tous les autres cas.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Vérifie si un écouteur d’événement est enregistré auprès de cet objet EventDispatcher ou de ses ancêtres pour le type d’événement spécifié. Cette méthode renvoie <codeph>true</codeph> si un écouteur d’événement est déclenché pendant toute phase du flux d’événements lorsqu’un événement du type spécifié est distribué à cet objet EventDispatcher ou à l’un de ses descendants.
	<p>La différence entre les méthodes <codeph>hasEventListener()</codeph> et <codeph>willTrigger()</codeph> est la suivante : <codeph>hasEventListener()</codeph> examine uniquement l’objet auquel elle appartient, tandis que <codeph>willTrigger()</codeph> recherche dans la totalité du flux d’événements l’événement spécifié par le paramètre <codeph>type</codeph>.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
	Un objet HTMLLoader distribue un objet HTMLUncaughtScriptExceptionEvent lorsqu’une exception JavaScript est renvoyée et qu’elle n’est pas gérée avec une instruction catch.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	Un objet HTMLLoader distribue un objet HTMLUncaughtScriptExceptionEvent lorsqu’une exception JavaScript est renvoyée et qu’elle n’est pas gérée avec une instruction <codeph>catch</codeph>.
	
	</apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
		Crée un objet HTMLUncaughtScriptExceptionEvent à transmettre en tant que paramètre aux écouteurs d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>exceptionValue</apiItemName><apiType value=""/><apiDesc>Lorsqu’un processus JavaScript renvoie une exception uncaught, <codeph>exceptionValue</codeph> est le résultat de l’évaluation de l’expression dans l’instruction throw ayant entraîné l’exception uncaught. La propriété <codeph>exceptionValue</codeph> peut être une valeur primitive, une référence à un objet JavaScript ou une référence à un objet ActionScript.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Crée un objet HTMLUncaughtScriptExceptionEvent à transmettre en tant que paramètre aux écouteurs d’événements.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone"><apiName>clone</apiName><shortdesc>
		 
		Crée une copie de l’objet HTMLUncaughtScriptExceptionEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Copie de l’objet HTMLUncaughtScriptExceptionEvent.
		
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		Crée une copie de l’objet HTMLUncaughtScriptExceptionEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION"><apiName>UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc>
		La constante HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION définit la valeur de la propriété type d’un objet événement uncaughtScriptException.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncaughtScriptException</apiData><apiType value=""/></apiValueDef><apiDesc>
		La constante <codeph>HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>uncaughtScriptException</codeph>.
		
		 
		 <p>Les propriétés de cet événement sont les suivantes :</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>exceptionValue</codeph></entry><entry>Le résultat de l’évaluation de l’expression dans l’instruction <codeph>throw</codeph> ayant résulté dans l’exception uncaught.</entry></row><row><entry><codeph>stackTrace</codeph></entry><entry>Un tableau d’objets qui représentent la trace de pile au moment de l’exécution de l’instruction <codeph>throw</codeph> ayant résulté dans l’exception uncaught.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet HTMLLoader.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue"><apiName>exceptionValue</apiName><shortdesc>
	Le résultat de l’évaluation de l’expression dans l’instruction throw ayant résulté dans l’exception uncaught.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	Le résultat de l’évaluation de l’expression dans l’instruction throw ayant résulté dans l’exception uncaught. La propriété <codeph>exceptionValue</codeph> peut être une valeur primitive, une référence à un objet JavaScript ou une référence à un objet ActionScript.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get"><apiName>stackTrace</apiName><shortdesc>
	Un tableau d’objets qui représentent la trace de pile au moment de l’exécution de l’instruction throw ayant résulté dans l’exception uncaught.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	Un tableau d’objets qui représentent la trace de pile au moment de l’exécution de l’instruction throw ayant résulté dans l’exception uncaught. Chaque objet dans le tableau possède trois propriétés :
	
	<ul>
	
		<li><codeph>sourceURL</codeph> (une chaîne) : l’URL du script du bloc d’activation d’appel.</li>
	
		<li><codeph>line</codeph> (un numéro) : le numéro de ligne dans la ressource <codeph>sourceURL</codeph> du bloc d’activation d’appel.</li>
	
		<li><codeph>functionName</codeph> (une chaîne) : le nom de la fonction pour le bloc d’activation d’appel.</li>
	
	</ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
 Une occurrence de SQLErrorEvent est distribuée par une occurrence de SQLConnection ou de SQLStatement lorsqu’une erreur se produit pendant l’exécution d’une opération de base de données en mode asynchrone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Une occurrence de SQLErrorEvent est distribuée par une occurrence de SQLConnection ou de SQLStatement lorsqu’une erreur se produit pendant l’exécution d’une opération de base de données en mode asynchrone. L’occurrence SQLErrorEvent qui est transmise en tant qu’objet événement aux écouteurs fournit l’accès aux informations relatives à la cause de l’erreur et de l’opération tentée.
 
 <p>Les détails spécifiques de l’échec figurent sur l’objet SQLError dans la propriété <codeph>error</codeph> de l’occurrence SQLErrorEvent.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
     Crée un objet SQLErrorEvent à transmettre en tant qu’argument aux écouteurs d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Le type d’événement, accessible dans la propriété <codeph>type</codeph>. SQLErrorEvent définit un type d’événement, l’événement <codeph>error</codeph>, représenté par la constante <codeph>SQLErrorEvent.ERROR</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet événement prend part à la phase de propagation vers le haut (bubbling) du flux d’événements. La valeur par défaut est <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. La valeur par défaut est <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier><apiData>null</apiData><apiDesc>L’objet SQLError qui contient les détails de l’erreur.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Utilisé pour créer un objet SQLErrorEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Crée un objet SQLErrorEvent à transmettre en tant qu’argument aux écouteurs d’événement.
     
     </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.errors.SQLError;.xml"><linktext>flash.errors.SQLError;</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR"><linktext>ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie de l’objet SQLErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet SQLErrorEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie de l’objet SQLErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet SQLErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet SQLErrorEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet SQLErrorEvent. La chaîne est écrite au format suivant :
	 
	 <p><codeph>[SQLErrorEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> error=<i>valeur</i>]</codeph></p>
	 
	 <p>La valeur de l’erreur a le format suivant : <codeph>SQLError : <i>message value</i> code=<i>valeur</i> operation=<i>valeur</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
     La constante SQLErrorEvent.ERROR définit la valeur de la propriété type d’un événement error distribué lorsqu’un appel à une méthode d’une occurrence SQLConnection ou SQLStatement se termine avec une erreur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLErrorEvent.ERROR</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un événement error distribué lorsqu’un appel à une méthode d’une occurrence SQLConnection ou SQLStatement se termine avec une erreur. L’événement <codeph>error</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>error</codeph></entry><entry>Objet SQLError contenant des informations sur le type d’erreur ayant eu lieu et l’opération ayant provoqué l’erreur.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection ou SQLStatement signalant l’erreur.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get"><apiName>error</apiName><shortdesc>
     Un objet SQLError contenant des informations détaillées sur la cause de l’erreur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc>
     Un objet SQLError contenant des informations détaillées sur la cause de l’erreur.
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
Un objet distribue un objet ErrorEvent lorsqu’une erreur provoque l’échec d’une opération réseau.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements ErrorEvent.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Un objet distribue un objet ErrorEvent lorsqu’une erreur provoque l’échec d’une opération réseau. Il n’existe qu’un seul type d’événement <codeph>error</codeph> : <codeph>ErrorEvent.ERROR</codeph>.

<p>La classe ErrorEvent sert également de classe de base pour les classes AsyncErrorEvent, IOErrorEvent, SecurityErrorEvent et SQLErrorEvent.</p>

<p>Vous pouvez rechercher des événements <codeph>error</codeph> qui n’ont pas d’écouteurs en utilisant la version <ph platform="actionscript">débogueur de Flash Player ou l’application</ph> de débogage du lanceur AIR. L’application de débogage du lanceur AIR<ph platform="actionscript"> ou la version débogueur de Flash Player</ph> affiche ces événements sous forme de chaînes (définies par le paramètre <codeph>text</codeph> du constructeur ErrorEvent).</p>

</apiDesc><example conref="examples\ErrorEventExample.as"> L’exemple suivant démontre l’utilisation d’un seul gestionnaire d’erreur (<codeph>errorHandler()</codeph>) capturant plusieurs types d’événements error. S’il existe un événement <codeph>ioError</codeph>, le gestionnaire tente un chargement à partir du réseau, qui envoie ensuite un objet <codeph>securityError</codeph>.
 
 <p><b>Remarque : </b> cet exemple ne fonctionne pas si un fichier nommé MissingFile.xml se trouve dans le même répertoire que votre fichier SWF.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations sur les événements d’erreur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement d’erreur : <codeph>ErrorEvent.ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event se propage vers le haut. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Texte à afficher en tant que message d’erreur. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>text</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Un numéro de référence à associer à l’erreur spécifique (pris en charge uniquement par Adobe AIR).
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets ErrorEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event contenant des informations sur les événements d’erreur. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet ErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet ErrorEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet ErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet ErrorEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ErrorEvent. La chaîne est écrite au format suivant :
	<p><codeph>[ErrorEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> text=<i>valeur</i> errorID=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>error</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet qui subit l’échec de l’opération réseau.</entry></row><row><entry><codeph>text</codeph></entry><entry>Texte à afficher en tant que message d’erreur. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get"><apiName>errorID</apiName><shortdesc>
	Contient le numéro de référence associé à l’erreur spécifique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Contient le numéro de référence associé à l’erreur spécifique. Pour un objet ErrorEvent personnalisé, ce nombre correspond à la valeur du paramètre <codeph>id</codeph> fourni dans le constructeur. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
 Un objet ProgressEvent est distribué lorsqu’une opération load a commencé ou qu’un socket a reçu des données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements ProgressEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet ProgressEvent est distribué lorsqu’une opération load a commencé ou qu’un socket a reçu des données. En règle générale, ces événements sont générés lors du chargement dans une application de fichiers SWF, d’images ou de données. Il existe deux types de d’événements progress : <codeph>ProgressEvent.PROGRESS</codeph> et <codeph>ProgressEvent.SOCKET_DATA</codeph>.
 
 </apiDesc><example conref="examples\ProgressEventExample.as"> L’exemple suivant utilise la classe <codeph>ProgressEventExample</codeph> pour montrer comment les différents écouteurs d’événements sont utilisés lors du téléchargement d’un fichier. L’exemple exécute les tâches suivantes :
 <ol>
  <li>Les propriétés <codeph>downloadURL</codeph> et <codeph>fileName</codeph> sont créées, et indiquent l’emplacement et le nom du fichier téléchargé.</li>
  <li>Dans le constructeur <codeph>ProgressEventExample</codeph>, un nouvel objet FileReference nommé <codeph>file</codeph> est créé, puis transmis à la méthode <codeph>configureListeners()</codeph>.</li>
  <li>Les propriétés <codeph>downloadURL</codeph> et <codeph>fileName</codeph> sont ensuite transmises à la méthode <codeph>file.download()</codeph>, qui demande l’emplacement de téléchargement du fichier.</li>
  <li>La méthode <codeph>configureListeners()</codeph> ajoute sept écouteurs d’événements et leurs méthodes d’abonnés associées :
  <ol outputclass="A">
      <li><codeph>cancel</codeph> / <codeph>cancelHandler()</codeph> est distribué si le téléchargement du fichier est annulé.</li> 
      <li><codeph>complete</codeph> / <codeph>complereHandler()</codeph> est distribué lorsque le téléchargement du fichier est terminé.</li> 
      <li><codeph>ioError</codeph> / <codeph>ioErrorHandler()</codeph> est distribué si le fichier téléchargé n’est pas disponible ou accessible.</li> 
      <li><codeph>open</codeph> / <codeph>openHandler()</codeph> est distribué lorsque l’opération de téléchargement démarre.</li> 
      <li><codeph>progress</codeph> / <codeph>progressHandler()</codeph> est distribué lorsque l’opération de téléchargement commence, puis lorsqu’elle se termine.</li> 
      <li><codeph>securityError</codeph> / <codeph>securityErrorHandler</codeph> est distribué si le paramètre de sécurité de lecture locale ne correspond pas au type d’accès aux données du fichier téléchargé (local versus réseau) ; voir les remarques ci-dessous.</li> 
      <li><codeph>select</codeph> / <codeph>selectHandler()</codeph> est distribué lorsque l’objet de téléchargement est sélectionné.</li> 
  </ol>
  </li>
 </ol>
 <p> <b>Remarques :</b>
 <ul>
  <li>Vous devrez compiler le fichier SWF en définissant « Sécurité de lecture locale » sur « Accès au réseau uniquement ».</li>
  <li>Cet exemple requiert un fichier nommé SomeFile.pdf.</li> 
  <li>Cet exemple couvre tous les événements disponibles pour l’objet FileReference. Cependant, la plupart des situations n’en nécessite qu’un sous-ensemble.</li>
 </ul>
 </p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.filesystem.xml"><linktext>classe FileStream</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>Classe LoaderInfo</linktext></link><link href="flash.net.xml#Socket"><linktext>Classe Socket</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData"><apiName>socketData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations sur les événements progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles :<codeph>ProgressEvent.PROGRESS</codeph> et <codeph>ProgressEvent.SOCKET_DATA</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé. 
	</apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Nombre d’éléments ou d’octets chargés lors du traitement de l’événement par l’écouteur.
	</apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Nombre total d’éléments ou d’octets qui seront chargés si le processus de chargement aboutit.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur d’objets <codeph>ProgressEvent</codeph>.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event contenant des informations sur les événements progress. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet ProgressEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet ProgressEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet ProgressEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ProgressEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet <codeph>ProgressEvent</codeph>.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ProgressEvent. La chaîne est écrite au format suivant :
	<p><codeph>[ProgressEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> bytesLoaded=<i>valeur</i> bytesTotal=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>progress</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Nombre d’éléments ou d’octets chargés lors du traitement de l’événement par l’écouteur.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Nombre total d’éléments ou d’octets qui seront chargés si le processus de chargement aboutit.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet indiquant la progression. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA"><apiName>SOCKET_DATA</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement socketData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>socketData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>socketData</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	     
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’événement.</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Nombre d’éléments ou d’octets chargés lors du traitement de l’événement par l’écouteur.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>0 ; cette propriété n’est pas utilisée par les objets événement <codeph>socketData</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Socket indiquant la progression.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	Nombre d’éléments ou d’octets chargés lors du traitement de l’événement par l’écouteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Nombre d’éléments ou d’octets chargés lors du traitement de l’événement par l’écouteur.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	Nombre total d’éléments ou d’octets qui seront chargés si le processus de chargement aboutit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Nombre total d’éléments ou d’octets chargés si le processus de chargement aboutit. Si l’événement progress est distribué/associé à un objet Socket, le bytesTotal est toujours 0 à moins qu’une valeur soit spécifiée dans le paramètre bytesTotal du constructeur. Le nombre réel d’octets renvoyé n’est pas défini et dépend du développeur de l’application.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
	 Un événement ShaderEvent est déclenché lorsqu’une opération de shader est lancée par un ShaderJob qui se termine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Un événement ShaderEvent est déclenché lorsqu’une opération de shader est lancée par un ShaderJob qui se termine.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#ShaderJob"><linktext>flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
		 Crée un objet ShaderEvent à transmettre aux écouteurs d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Le type d’événement, accessible dans la propriété <codeph>type</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. La valeur par défaut est <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé. La valeur par défaut est <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bitmap</apiItemName><apiOperationClassifier>flash.display:BitmapData</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet BitmapData contenant le résultat de l’opération terminée (ou <codeph>null</codeph> si la cible n’était pas un objet BitmapData).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>array</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet ByteArray contenant le résultat de l’opération terminée (ou <codeph>null</codeph> si la cible n’était pas un objet ByteArray).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vector</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>L’occurrence de Vector.&lt;Number> contenant le résultat de l’opération terminée (ou <codeph>null</codeph> si la cible n’était pas une occurrence de Vector.&lt;Number>).
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Crée un objet ShaderEvent à transmettre aux écouteurs d’événement.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone"><apiName>clone</apiName><shortdesc>
		 Crée une copie de l’objet ShaderEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet ShaderEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Crée une copie de l’objet ShaderEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString"><apiName>toString</apiName><shortdesc>
		 Renvoie une chaîne répertoriant toutes les propriétés de l’objet ShaderEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet ShaderEvent.
		 
		 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Renvoie une chaîne répertoriant toutes les propriétés de l’objet ShaderEvent. La chaîne est écrite au format suivant :
		 
		 <p><codeph>[ShaderEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> eventPhase=<i>valeur</i> bitmapData=<i>valeur</i> byteArray=<i>valeur</i> vector=<i>valeur</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
		 Définit la valeur de la propriété type d’un objet événement complete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>complete</codeph>.
		 
		 <p>Les propriétés de cet événement sont les suivantes :</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		      
		  <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bitmapData</codeph></entry><entry>Objet BitmapData contenant le résultat de l’opération terminée (ou <codeph>null</codeph> si la cible n’était pas un objet BitmapData).</entry></row><row><entry><codeph>byteArray</codeph></entry><entry>Objet ByteArray contenant le résultat de l’opération terminée (ou <codeph>null</codeph> si la cible n’était pas un objet ByteArray).</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet ShaderJob signalant la fin de l’opération.</entry></row><row><entry><codeph>vector</codeph></entry><entry>L’occurrence de Vector.&lt;Number> contenant le résultat de l’opération terminée (ou <codeph>null</codeph> si la cible n’était pas une occurrence de Vector.&lt;Number>).</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get"><apiName>bitmapData</apiName><shortdesc>
		 Objet BitmapData transmis à la méthode ShaderJob.start().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc>
		 Objet BitmapData transmis à la méthode <codeph>ShaderJob.start()</codeph>. Si une occurrence de ByteArray ou de Vector&lt;Number> a été transmise à la méthode <codeph>start()</codeph>, cette propriété est <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get"><apiName>byteArray</apiName><shortdesc>
		 
		 Objet ByteArray transmis à la méthode ShaderJob.start().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Objet ByteArray transmis à la méthode <codeph>ShaderJob.start()</codeph>. Si un objet BitmapData ou un objet Vector.&lt;Number> a été transmis à la méthode <codeph>start()</codeph>, cette propriété est <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get"><apiName>vector</apiName><shortdesc>
		 
         Objet Vector.&amp;lt;Number&amp;gt; transmi à la méthode ShaderJob.start().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
		 
         Objet Vector.&lt;Number> transmis à la méthode <codeph>ShaderJob.start()</codeph>. Si un objet BitmapData ou ByteArray a été transmis à la méthode <codeph>start()</codeph>, cette propriété est <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
 Les événements de déplacement natifs sont distribués par les objets interactifs impliqués dans une opération de glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Les événements de déplacement natifs sont distribués par les objets interactifs impliqués dans une opération de glisser-déposer.
 
 <p>L’objet déclencheur distribue :</p> 
 <ul>
    <li><codeph>nativeDragStart</codeph> — Lorsque l’opération de glissement commence.</li>
    <li><codeph>nativeDragUpdate</codeph> — Lorsque l’opération de glissement est en cours.</li>
    <li><codeph>nativeDragComplete</codeph> — Lorsque l’utilisateur relâche l’élément glissé (que l’opération déposer ait été acceptée ou non).</li>
 </ul>
 
 <p>L’objet déclencheur est l’objet interactif transmis à l’objet NativeDragManager dans l’appel à <codeph>NativeDragManager.doDrag()</codeph> qui a commencé l’opération de glissement.</p>
 
 <p>Les objets interactifs de cible potentielle distribuent :</p>
 <ul>
    <li><codeph>nativeDragEnter</codeph> — Lorsque l’opération glisser passe dans la limite de l’objet.</li>
    <li><codeph>nativeDragOver</codeph> — Lorsque l’opération glisser reste dans la limite de l’objet.</li>
    <li><codeph>nativeDragExit</codeph> — Lorsque l’opération glisser quitte la limite de l’objet.</li>
    <li><codeph>nativeDragDrop</codeph> — Lorsque l’utilisateur relâche l’élément glissé sur l’objet et que ce dernier a accepté l’opération déposer par un précédent appel à <codeph>NativeDragManager.acceptDragDrop()</codeph>.</li>
 </ul>
 
 <p>Généralement, le gestionnaire de l’événement <codeph>nativeDragEnter</codeph> ou <codeph>nativeDragOver</codeph> évalue les données glissées et les actions glisser autorisées pour déterminer si un objet interactif peut accepter l’opération de dépôt. Pour spécifier qu’un objet interactif est une cible éligible, le gestionnaire d’événement doit appeler la fonction <codeph>NativeDragManager.acceptDrop()</codeph>, en transmettant une référence à l’objet. Si l’utilisateur relâche le bouton de sa souris sur l’objet désigné, ce dernier devient la cible de dépôt et déclenche l’événement <codeph>nativeDragDrop</codeph>.</p>
 
 <p>Tout objet de type InteractiveObject peut être un initiateur d’opération de glissement ou la cible d’une opération de dépôt.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#NativeDragManager"><linktext>flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject"><linktext>flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete"><apiName>nativeDragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop"><apiName>nativeDragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter"><apiName>nativeDragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit"><apiName>nativeDragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver"><apiName>nativeDragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart"><apiName>nativeDragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate"><apiName>nativeDragUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
    Crée un événement Event avec des informations spécifiques concernant des événements natifs drag-and-drop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles : <codeph>NativeDragEvent.NATIVE_DRAG_START</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_ENTER</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_OVER</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_EXIT</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_DROP</codeph> et <codeph>NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>.
	
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Indique si l’objet Event peut être annulé.
	</apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Coordonnée horizontale à laquelle l’événement s’est produit par rapport au sprite conteneur.
	</apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Coordonnée verticale à laquelle l’événement s’est produit par rapport au sprite conteneur.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>L’objet d’affichage interactif connexe. 
    </apiDesc></apiParam><apiParam><apiItemName>clipboard</apiItemName><apiOperationClassifier>flash.desktop:Clipboard</apiOperationClassifier><apiData>null</apiData><apiDesc>L’objet Clipboard contenant les données à transférer.
    </apiDesc></apiParam><apiParam><apiItemName>allowedActions</apiItemName><apiOperationClassifier>flash.desktop:NativeDragOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet NativeDragOptions définissant les actions autorisées (déplacer, copier et lier).
    </apiDesc></apiParam><apiParam><apiItemName>dropAction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Action en cours.
    
 	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Ctrl est activée.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Alt est activée.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Maj est activée.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Commande est activée.
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Crée un événement Event avec des informations spécifiques concernant des événements natifs glisser-déposer.
    
	<p>Les objets Event sont transmis en tant que paramètres aux écouteurs d’événement. La distribution d’un événement de glissement natif ne déclenche pas le comportement associé.</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de cet objet NativeDragEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet NativeDragEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de cet objet NativeDragEvent.
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString"><apiName>toString</apiName><shortdesc>
	 Formate les propriétés de cet objet NativeDragEvent sous la forme d’une chaîne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Les propriétés de cet objet NativeDragEvent sous la forme d’une chaîne.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Formate les propriétés de cet objet NativeDragEvent sous la forme d’une chaîne.
	 
	 <p>La chaîne est écrite au format suivant :</p>
	 <p><codeph>[NativeDragEvent type=valeur bubbles=valeur cancelable=valeur ... commandKey=valeur]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE"><apiName>NATIVE_DRAG_COMPLETE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE définit la valeur de la propriété type d’un objet événement nativeDragComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragComplete</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. </entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP"><apiName>NATIVE_DRAG_DROP</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_DROP définit la valeur de la propriété type d’un objet événement nativeDragDrop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragDrop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_DROP définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragDrop</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de cet événement annule l’opération de déplacement.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. Le presse-papiers peut être lu même si l’objet distribuant cet événement ne se trouve pas dans le même domaine de sécurité que l’initiateur.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER"><apiName>NATIVE_DRAG_ENTER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_ENTER définit la valeur de la propriété type d’un objet événement nativeDragEnter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragEnter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_ENTER définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragEnter</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. Le presse-papiers ne peut être lu que si l’objet distribuant cet événement se trouve dans le même domaine de sécurité que l’initiateur.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT"><apiName>NATIVE_DRAG_EXIT</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_EXIT définit la valeur de la propriété type d’un objet événement nativeDragExit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragExit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_EXIT définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragExit</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. Le presse-papiers ne peut être lu que si l’objet distribuant cet événement se trouve dans le même domaine de sécurité que l’initiateur.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER"><apiName>NATIVE_DRAG_OVER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_OVER définit la valeur de la propriété type d’un objet événement nativeDragOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_OVER définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragOver</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de cet événement annule l’opération de déplacement.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. Le presse-papiers ne peut être lu que si l’objet distribuant cet événement se trouve dans le même domaine de sécurité que l’initiateur.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START"><apiName>NATIVE_DRAG_START</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_START définit la valeur de la propriété type d’un objet événement nativeDragStart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragStart</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_START définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragStart</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de cet événement annule l’opération de déplacement.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. </entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE"><apiName>NATIVE_DRAG_UPDATE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE définit la valeur de la propriété type d’un objet événement nativeDragUpdate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragUpdate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>nativeDragUpdate</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>L’objet NativeDragOptions spécifiant les actions liées à cette opération glisser.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>L’objet Clipboard contenant les données glissées. </entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Action choisie par la cible de dépôt (ou <codeph>none</codeph> si aucune action n’est définie).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions"><apiName>allowedActions</apiName><shortdesc>
	Objet NativeDragOptions spécifiant les actions autorisées par l’objet d’affichage ayant déclenché cette opération de déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc>
	Objet NativeDragOptions spécifiant les actions autorisées par l’objet d’affichage ayant déclenché cette opération de déplacement.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard"><apiName>clipboard</apiName><shortdesc>
	 Objet Clipboard contenant les données dans cette opération de déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc>
	 Objet Clipboard contenant les données dans cette opération de déplacement.
	 
	 <p>Si l’objet qui déclenche l’événement n’est pas dans le même domaine de sécurité que l’objet déclencheur, le presse-papiers peut uniquement être lu dans le gestionnaire pour un événement <codeph>nativeDragDrop</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction"><apiName>dropAction</apiName><shortdesc>
	Action en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Action en cours. Dans l’événement <codeph>nativeDragComplete</codeph>, la propriété <codeph>dropAction</codeph> signale l’action finale. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
	 DRMManager distribue un objet DRMAuthenticationCompleteEvent lorsqu’un appel de la méthode authenticate() de l’objet DRMManager aboutit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DRMManager distribue un objet DRMAuthenticationCompleteEvent lorsqu’un appel de la méthode <codeph>authenticate()</codeph> de l’objet DRMManager aboutit.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
		 Crée une nouvelle occurrence d’un objet DRMAuthenticationCompleteEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>La chaîne de type de l’événement
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Si l’événement propage vers le haut la liste d’affichage
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Si l’événement peut être annulé
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>L’URL du serveur auquel l’utilisateur s’est connecté
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Le domaine authentifié sur le serveur auquel l’utilisateur s’est connecté
		 </apiDesc></apiParam><apiParam><apiItemName>inToken</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Le symbole d’authentification
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Crée une nouvelle occurrence d’un objet DRMAuthenticationCompleteEvent.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone"><apiName>clone</apiName><shortdesc> 
	 Duplique une occurrence d’une sous-classe Event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet Event identique à l’original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
	 Duplique une occurrence d’une sous-classe Event.
	 
     <p>Renvoie un nouvel objet Event, qui est une copie de l’occurrence d’origine de l’objet Event. En règle générale, vous n’appelez pas <codeph>clone()</codeph>. La classe EventDispatcher l’appelle automatiquement lorsque vous redistribuez un événement, en d’autres termes, lorsque vous appelez <codeph>dispatchEvent(event)</codeph> à partir du gestionnaire qui gère <codeph>event</codeph>.</p>
	 
	 <p>Le nouvel objet Event comprend toutes les propriétés de l’objet d’origine.</p> 
	 
	 <p platform="actionscript">Lorsque vous créez une classe Event personnalisée, vous devez bloquer la méthode <codeph>Event.clone()</codeph> héritée afin qu’elle duplique les propriétés de votre classe personnalisée. Si vous ne définissez pas toutes les propriétés que vous ajoutez à votre sous-classe Event, elles ne posséderont pas les valeurs correctes lorsque les écouteurs gèreront l’événement redistribué.</p>
	 
	 <p platform="actionscript">Dans cet exemple, <codeph>PingEvent</codeph> est une sous-classe de <codeph>Event</codeph> et implémente donc sa propre version de <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE"><apiName>AUTHENTICATION_COMPLETE</apiName><shortdesc>
		 La constante de type chaîne à utiliser pour l’événement de finalisation de l’authentification dans le paramètre type lors de l’ajout et de la suppression d’écouteurs d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>authenticationComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 La constante de type chaîne à utiliser pour l’événement de finalisation de l’authentification dans le paramètre type lors de l’ajout et de la suppression d’écouteurs d’événement.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:set"><apiName>domain</apiName><shortdesc>
		 Le domaine de contenu du serveur de droits multimédias.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Le domaine de contenu du serveur de droits multimédias (pas le nom d’un domaine Internet ou de réseau).
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:set"><apiName>serverURL</apiName><shortdesc>
		 L’URL du serveur de droits multimédias.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 L’URL du serveur de droits multimédias.
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:set"><apiName>token</apiName><shortdesc>
		 Le symbole d’authentification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 Le symbole d’authentification.
		 
		 <p>L’authentification est automatiquement ajoutée à la mémoire cache de la session du DRMManager. Vous pouvez enregistrer le symbole et l’utiliser pour authentifier l’utilisateur lors d’une prochaine session. Réutilisez un symbole avec la méthode <codeph>setAuthenticationToken()</codeph> du DRMManager. Le serveur qui génère le symbole en détermine l’expiration et d’autres propriétés.</p>
		   
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()"><linktext>flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
 Un objet IMEEvent est distribué lorsque l’utilisateur saisit du texte à l’aide d’un IME.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements IMEEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet IMEEvent est distribué lorsque l’utilisateur saisit du texte à l’aide d’un IME. Les IME sont généralement utilisés pour saisir du texte dans des langues qui utilisent des idéogrammes à la place des lettres, tels que le japonais, le chinois et le coréen. Il n’existe qu’un seul événement IME : <codeph>IMEEvent.IME_COMPOSITION</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
	 Crée un objet Event à l’aide d’informations spécifiques relatives aux événements IME.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul événement IME : <codeph>IMEEvent.IME_COMPOSITION</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Chaîne de lecture émanant de l’IME. Il s’agit de la chaîne d’origine tapée par l’utilisateur, avant qu’il ne sélectionne des candidats. La chaîne de composition finale est transmise à l’objet disposant du focus clavier dans un événement <codeph>TextEvent.TEXT_INPUT</codeph>. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>text</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets IME.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Crée un objet Event à l’aide d’informations spécifiques relatives aux événements IME. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie de l’objet IMEEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet IMEEvent dont les propriétés ont la même valeur que celles de l’objet d’origine. 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie de l’objet IMEEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString"><apiName>toString</apiName><shortdesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet IMEEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet IMEEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet IMEEvent. La chaîne est écrite au format suivant :
	 <p><codeph>[IMEEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> text=<i>valeur</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION"><apiName>IME_COMPOSITION</apiName><shortdesc>
	 Définit la valeur de la propriété type d’un objet événement imeComposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeComposition</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>imeComposition</codeph>. 
	 <p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet IME.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DataEvent"><apiName>DataEvent</apiName><shortdesc>
Un objet distribue un objet DataEvent à la fin du chargement des données brutes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements DataEvent.

</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Un objet distribue un objet DataEvent à la fin du chargement des données brutes. Il existe deux types d’événements data : 
<ul><li><codeph>DataEvent.DATA</codeph> : distribué lorsque des données sont envoyées ou reçues.</li>
<li><codeph>DataEvent.UPLOAD_COMPLETE_DATA</codeph> : distribué lorsque les données sont envoyées et que le serveur a répondu.</li></ul>

</apiDesc><example conref="examples\DataEventExample.as"> L’exemple suivant crée un objet XMLSocket et le connecte à un serveur socket s’exécutant sur le port 8080 de <codeph>yourDomain</codeph>. Un écouteur d’événement est associé à l’objet XMLSocket qui écoute les événements <codeph>data</codeph>, distribués à chaque réception de données brutes.
 
 <p> <b>Remarques :</b> 
 <ul>
    <li>pour générer un événement <codeph>securityError</codeph> dans cet exemple, vous devez compiler le fichier SWF en définissant « Sécurité de lecture locale » sur « Accès au réseau uniquement ».</li>
    <li>Vous devez disposer d’un serveur s’exécutant sur le domaine [<codeph>yourDomain</codeph>] avec le port 8080.</li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent"><apiName>DataEvent</apiName><shortdesc>
	Crée un objet événement contenant des informations sur les événements data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement data : <codeph>DataEvent.DATA</codeph> :
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Les données brutes chargées dans Flash Player ou Adobe AIR. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>data</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets DataEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet événement contenant des informations sur les événements data. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA"><linktext>DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet DataEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet DataEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet DataEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet DataEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet DataEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet DataEvent. La chaîne est écrite au format suivant :
	<p><codeph>[DataEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> data=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA"><apiName>DATA</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>data</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>data</codeph>.  
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>data</codeph></entry><entry>Les données brutes chargées dans Flash Player ou Adobe AIR. </entry></row><row><entry><codeph>target</codeph></entry><entry>Objet XMLSocket recevant les données.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA"><apiName>UPLOAD_COMPLETE_DATA</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement uploadCompleteData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uploadCompleteData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>uploadCompleteData</codeph>.
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>data</codeph></entry><entry>Les données brutes sont renvoyées par le serveur après le chargement réussi d’un fichier.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet FileReference qui reçoit les données après un chargement réussi.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get"><apiName>data</apiName><shortdesc>
	Les données brutes chargées dans Flash Player ou Adobe AIR. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Les données brutes chargées dans Flash Player ou Adobe AIR. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
Un objet distribue un objet SecurityErrorEvent pour signaler l’occurrence d’une erreur de sécurité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements SecurityErrorEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Un objet distribue un objet SecurityErrorEvent pour signaler l’occurrence d’une erreur de sécurité. En règle générale, les erreurs de sécurité signalées via cette classe émanent d’opérations asynchrones, telles qu’un chargement de données, dans lesquelles les violations de la sécurité ne se manifestent pas nécessairement immédiatement. Votre écouteur d’événement peut accéder à la propriété <codeph>text</codeph> de l’objet pour déterminer le type d’opération tentée et les éventuelles URL concernées. En l’absence d’écouteurs d’événements, <ph platform="actionscript">la version débogueur de Flash Player</ph> ou l’application de débogage du lanceur AIR affiche automatiquement un message d’erreur renfermant le contenu de la propriété <codeph>text</codeph>. Il n’existe qu’un seul type d’événement d’erreur de sécurité : <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.

<p>Les événements d’erreur de sécurité sont distribués en dernier pour tout objet cible. Par conséquent, les autres événements, en particulier ceux d’erreur générique, ne sont pas distribués pour un objet cible lié à une erreur de sécurité.</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as"> L’exemple suivant utilise la classe <codeph>SecurityErrorEventExample</codeph> pour montrer comment une méthode d’écouteur <codeph>securityErrorHandler()</codeph> peut être instanciée et définie pour écouter les événements <codeph>securityError</codeph> à distribuer. Cet événement se produit lorsqu’un emplacement <codeph>URLRequest</codeph> n’est pas exactement dans le même domaine que le fichier SWF appelant, et que le domaine demandé ne dispose pas d’une autorisation d’accès interdomaines via un fichier de régulation interdomaines.
 <p>Pour créer un objet <codeph>SecurityErrorEvent</codeph>, remplacez <codeph>http://www.[yourdomain].com</codeph> par un chemin qui ne dispose pas d’un accès interdomaines.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>Classe Security</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError"><apiName>securityError</apiName><prolog><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations sur les événements d’erreur de sécurité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement d’erreur : <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Texte à afficher en tant que message d’erreur. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>text</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Numéro de référence à associer à l’erreur spécifique. 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets SecurityErrorEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event contenant des informations sur les événements d’erreur de sécurité. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet SecurityErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet SecurityErrorEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet SecurityErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet SecurityErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet SecurityErrorEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet SecurityErrorEvent. La chaîne est écrite au format suivant :
	<p><codeph>[securityErrorEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> text=<i>valeur</i> errorID=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc>
	La constante SecurityErrorEvent.SECURITY_ERROR définit la valeur de la propriété type d’un objet événement securityError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>securityError</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet réseau signalant l’erreur de sécurité</entry></row><row><entry><codeph>text</codeph></entry><entry>Texte à afficher en tant que message d’erreur. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
 Un objet distribue un objet TextEvent lorsqu’un utilisateur saisit du texte dans un champ de texte ou clique sur un lien hypertexte dans une zone de texte de type HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements TextEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet distribue un objet TextEvent lorsqu’un utilisateur saisit du texte dans un champ de texte ou clique sur un lien hypertexte dans une zone de texte de type HTML. Il existe deux types d’événements texte : <codeph>TextEvent.LINK</codeph> et <codeph>TextEvent.TEXT_INPUT</codeph>.
 
 </apiDesc><example conref="examples\TextEventExample.as"> L’exemple suivant utilise la classe TextEventExample pour créer des champs de texte et écouter divers événements texte sur ces derniers. L’exemple exécute les tâches suivantes :
 <ol>
     <li>L’exemple déclare les constantes de deux URL à utiliser ultérieurement.</li>
    <li>L’exemple déclare les deux variables de type TextField à utiliser ultérieurement.</li>
     <li>Le constructeur de classe appelle les deux méthodes suivantes :
     <ul>
       <li><codeph>init()</codeph> initialise les objets TextField et leur ajoute des écouteurs d’événement.</li>
       <li><codeph>draw()</codeph> ajoute des objets TextFields dans la liste d’affichage et affecte le texte à afficher.</li>
  </ul></li>
     <li>Les écouteurs <codeph>linkHandler()</codeph> et <codeph>textInputHandler()</codeph> réagissent aux événements en fonction de leur type. La méthode <codeph>linkHandler()</codeph> ouvre un navigateur Web lorsque aucun n’est ouvert et navigue jusqu’à l’adresse URL sur laquelle l’utilisateur a cliqué. La méthode <codeph>textInputHandler()</codeph> affiche simplement des informations chaque fois que l’utilisateur appuie sur une touche dans le champ de texte associé.</li>
 </ol>
 
 <p><b>Remarque : </b> le domaine de cet exemple est fictif et <codeph>[yourDomain]</codeph> doit être remplacé par votre propre nom de domaine.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br />";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'>";
            link += "&lt;u>";
            link += "&lt;b>";
            link += "&lt;a href='event:" + url + "'>" + text + "&lt;/a>";
            link += "&lt;/b>";
            link += "&lt;/u>";
            link += "&lt;/font>";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace(">> ============================");
            trace(">> e.text: " + e.text);
            trace(">> textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link"><apiName>link</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as"> Dans cet exemple, lorsqu’un utilisateur clique sur un lien hypertexte dans un texte HTML, il déclenche un événement text. Selon le lien, l’utilisateur est envoyé vers un site Web désigné en fonction du système d’exploitation ou un cercle est dessiné selon le rayon sélectionné par l’utilisateur. 
   
 <p>Un champ de texte est créé et son contenu est défini sur une chaîne formatée en HTML à l’aide de la propriété <codeph>htmlText</codeph>. Les liens sont soulignés pour faciliter l’identification par l’utilisateur (Adobe Flash Player change le pointeur de la souris une fois que le pointeur a survolé le lien uniquement). Pour s’assurer qu’un clic de souris de l’utilisateur va bien invoquer une méthode ActionScript, l’URL du lien commence par la chaîne <codeph>"event:"</codeph> et un écouteur est ajouté pour l’événement <codeph>TextEvent.LINK</codeph>.</p> 
 
 <p>La méthode <codeph>linkHandler()</codeph>, déclenchée après que l’utilisateur a cliqué sur un lien, gère tous les événements de lien pour le champ de texte. La première instruction if vérifie la propriété <codeph>text</codeph> de l’événement, qui contient le reste de l’URL derrière la chaîne <codeph>"event:"</codeph>. Si l’utilisateur a cliqué sur le lien pour le système d’exploitation, le nom du système d’exploitation actuel de l’utilisateur, récupéré dans la propriété <codeph>Capabilities.os</codeph> du système, est utilisé pour envoyer l’utilisateur vers le site Web désigné. Dans le cas contraire, la taille du rayon sélectionnée, transmise par la propriété <codeph>text</codeph> de l’événement, est utilisée pour dessiner un cercle sous le champ de texte. A chaque clic de l’utilisateur sur le lien du rayon, le cercle dessiné précédemment est effacé et un nouveau cercle rouge est dessiné avec la taille du rayon sélectionnée.</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput"><apiName>textInput</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as"> L’exemple suivant guide l’utilisateur dans la création d’une clé de combinaison spéciale (similaire à un mot de passe). Cette clé de combinaison contient sept caractères alphanumériques, dont le deuxième et le cinquième sont numériques.
 
 <p>Trois champs de texte pour les instructions préliminaires, l’entrée de l’utilisateur et les messages d’avertissement (erreur) sont créés. Un écouteur d’événement est ajouté pour répondre à la saisie de l’utilisateur en déclenchant la méthode <codeph>textInputHandler()</codeph>. A chaque saisie de l’utilisateur, un événement <codeph>TextEvent.TEXT_INPUT</codeph> est distribué. </p>
 <p><b>Remarque :</b> les événements sont déclenchés lorsqu’un utilisateur saisit des caractères de texte et non en réponse à toute touche du clavier, telle que la touche Retour arrière. Pour capturer tous les événements keyboard, utilisez un écouteur pour l’événement <codeph>KeyboardEvent</codeph>.</p>
 
 <p>La méthode <codeph>textInputHandler()</codeph> contrôle et gère l’entrée de l’utilisateur. La méthode <codeph>preventDefault()</codeph> est utilisée pour empêcher Adobe Flash Player d’afficher immédiatement le texte dans le champ de saisie. L’application est chargée de mettre le champ à jour. Pour annuler la suppression ou la modification de l’utilisateur des caractères déjà saisis (la chaîne <codeph>result</codeph>), le contenu du champ de texte est réaffecté à la chaîne <codeph>result</codeph> lorsque l’utilisateur fait une nouvelle saisie. Egalement, pour que l’utilisateur soit toujours confronté au même comportement, la méthode <codeph>setSelection()</codeph> place le point d’insertion (un caret) après le dernier caractère sélectionné dans le champ de texte.</p>
 
 <p>La première instruction if de la méthode <codeph>textInputHandler()</codeph> vérifie le second et le cinquième caractères de la clé de combinaison saisie, qui doivent être numériques. Si l’entrée de l’utilisateur est correcte, la méthode <codeph>updateCombination()</codeph> est appelée et la chaîne de la clé de combinaison (<codeph>result</codeph>) est ajoutée à l’entrée de l’utilisateur. La méthode <codeph>updateCombination()</codeph> déplace également le point d’insertion après le caractère sélectionné. Une fois que les sept caractères sont saisis, la dernière instruction if dans la méthode <codeph>textInputHandler()</codeph> change le type du champ de texte <codeph>inputTextField</codeph> de <codeph>INPUT</codeph> à <codeph>DYNAMIC</codeph>, ce qui signifie que l’utilisateur ne peut plus saisir ni changer de caractères.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 Crée un objet Event contenant des informations sur les événements texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Les valeurs possibles sont les suivantes : <codeph>TextEvent.LINK</codeph> et <codeph>TextEvent.TEXT_INPUT</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Caractères de texte entrés par l’utilisateur. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>text</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets TextEvent.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Crée un objet Event contenant des informations sur les événements texte. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie de l’objet TextEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet TextEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie de l’objet TextEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString"><apiName>toString</apiName><shortdesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet TextEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet TextEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet TextEvent. La chaîne est écrite au format suivant :
	 <p><codeph>[TextEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> text=<i>valeur</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK"><apiName>LINK</apiName><shortdesc>
     Définit la valeur de la propriété type d’un objet événement link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>link</codeph>.
	 
	 <p>Les propriétés de cet événement sont les suivantes :</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Champ de texte contenant l’hyperlien sur lequel l’utilisateur a cliqué. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row><row><entry><codeph>text</codeph></entry><entry>Reste de l’URL après « event: »</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as"> Dans cet exemple, lorsqu’un utilisateur clique sur un lien hypertexte dans un texte HTML, il déclenche un événement text. Selon le lien, l’utilisateur est envoyé vers un site Web désigné en fonction du système d’exploitation ou un cercle est dessiné selon le rayon sélectionné par l’utilisateur. 
   
 <p>Un champ de texte est créé et son contenu est défini sur une chaîne formatée en HTML à l’aide de la propriété <codeph>htmlText</codeph>. Les liens sont soulignés pour faciliter l’identification par l’utilisateur (Adobe Flash Player change le pointeur de la souris une fois que le pointeur a survolé le lien uniquement). Pour s’assurer qu’un clic de souris de l’utilisateur va bien invoquer une méthode ActionScript, l’URL du lien commence par la chaîne <codeph>"event:"</codeph> et un écouteur est ajouté pour l’événement <codeph>TextEvent.LINK</codeph>.</p> 
 
 <p>La méthode <codeph>linkHandler()</codeph>, déclenchée après que l’utilisateur a cliqué sur un lien, gère tous les événements de lien pour le champ de texte. La première instruction if vérifie la propriété <codeph>text</codeph> de l’événement, qui contient le reste de l’URL derrière la chaîne <codeph>"event:"</codeph>. Si l’utilisateur a cliqué sur le lien pour le système d’exploitation, le nom du système d’exploitation actuel de l’utilisateur, récupéré dans la propriété <codeph>Capabilities.os</codeph> du système, est utilisé pour envoyer l’utilisateur vers le site Web désigné. Dans le cas contraire, la taille du rayon sélectionnée, transmise par la propriété <codeph>text</codeph> de l’événement, est utilisée pour dessiner un cercle sous le champ de texte. A chaque clic de l’utilisateur sur le lien du rayon, le cercle dessiné précédemment est effacé et un nouveau cercle rouge est dessiné avec la taille du rayon sélectionnée.</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT"><apiName>TEXT_INPUT</apiName><shortdesc>
     Définit la valeur de la propriété type d’un objet événement textInput.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>textInput</codeph>.
     <p><b>Remarque :</b> cet événement n’est pas distribué pour les touches Supprimer ou Retour arrière. </p>     
	 <p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; appelez la méthode <codeph>preventDefault()</codeph> pour annuler le comportement par défaut.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Champ de texte dans lequel sont entrés des caractères. La cible ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row><row><entry><codeph>text</codeph></entry><entry>Caractère ou série de caractères entré par l’utilisateur.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as"> L’exemple suivant guide l’utilisateur dans la création d’une clé de combinaison spéciale (similaire à un mot de passe). Cette clé de combinaison contient sept caractères alphanumériques, dont le deuxième et le cinquième sont numériques.
 
 <p>Trois champs de texte pour les instructions préliminaires, l’entrée de l’utilisateur et les messages d’avertissement (erreur) sont créés. Un écouteur d’événement est ajouté pour répondre à la saisie de l’utilisateur en déclenchant la méthode <codeph>textInputHandler()</codeph>. A chaque saisie de l’utilisateur, un événement <codeph>TextEvent.TEXT_INPUT</codeph> est distribué. </p>
 <p><b>Remarque :</b> les événements sont déclenchés lorsqu’un utilisateur saisit des caractères de texte et non en réponse à toute touche du clavier, telle que la touche Retour arrière. Pour capturer tous les événements keyboard, utilisez un écouteur pour l’événement <codeph>KeyboardEvent</codeph>.</p>
 
 <p>La méthode <codeph>textInputHandler()</codeph> contrôle et gère l’entrée de l’utilisateur. La méthode <codeph>preventDefault()</codeph> est utilisée pour empêcher Adobe Flash Player d’afficher immédiatement le texte dans le champ de saisie. L’application est chargée de mettre le champ à jour. Pour annuler la suppression ou la modification de l’utilisateur des caractères déjà saisis (la chaîne <codeph>result</codeph>), le contenu du champ de texte est réaffecté à la chaîne <codeph>result</codeph> lorsque l’utilisateur fait une nouvelle saisie. Egalement, pour que l’utilisateur soit toujours confronté au même comportement, la méthode <codeph>setSelection()</codeph> place le point d’insertion (un caret) après le dernier caractère sélectionné dans le champ de texte.</p>
 
 <p>La première instruction if de la méthode <codeph>textInputHandler()</codeph> vérifie le second et le cinquième caractères de la clé de combinaison saisie, qui doivent être numériques. Si l’entrée de l’utilisateur est correcte, la méthode <codeph>updateCombination()</codeph> est appelée et la chaîne de la clé de combinaison (<codeph>result</codeph>) est ajoutée à l’entrée de l’utilisateur. La méthode <codeph>updateCombination()</codeph> déplace également le point d’insertion après le caractère sélectionné. Une fois que les sept caractères sont saisis, la dernière instruction if dans la méthode <codeph>textInputHandler()</codeph> change le type du champ de texte <codeph>inputTextField</codeph> de <codeph>INPUT</codeph> à <codeph>DYNAMIC</codeph>, ce qui signifie que l’utilisateur ne peut plus saisir ni changer de caractères.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get"><apiName>text</apiName><shortdesc>
	 Dans le cas d’un événement textInput, caractère ou suite de caractères entré par l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Dans le cas d’un événement <codeph>textInput</codeph>, caractère ou suite de caractères entré par l’utilisateur. Dans le cas d’un événement <codeph>link</codeph>, texte de l’attribut <codeph>event</codeph> de l’attribut <codeph>href</codeph> de la balise <codeph>&lt;a></codeph>.
	 
	 </apiDesc><example>Le code suivant montre que l’événement <codeph>link</codeph> est distribué lorsque l’utilisateur clique sur un lien hypertexte :
	 
	<codeblock>
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'>Click Me.&lt;/a>";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:Event"><apiName>Event</apiName><shortdesc>
 La classe Event est utilisée comme classe de base pour la création des objets Event, transmis aux écouteurs d’événement en tant que paramètres lorsqu’un événement se produit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Classe de base des objets Event.
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe Event est utilisée comme classe de base pour la création des objets événement, transmis aux écouteurs d’événement en tant que paramètres lorsqu’un événement se produit.
 
 <p>Les propriétés de la classe Event contiennent des informations de base sur un événement, indiquant, par exemple son type ou si son comportement par défaut peut être annulé. Pour la plupart des événements, tels ceux représentés par les constantes de la classe Event, ces informations de base sont suffisantes. Pour d’autres événements, cependant, des informations détaillées sont nécessaires. <ph platform="actionscript">Les événements associés à un clic de souris, par exemple, doivent comprendre des informations supplémentaires sur l’emplacement de l’événement clic et les touches enfoncées, le cas échéant, pendant ce dernier. Vous pouvez transmettre des informations supplémentaires de ce type aux écouteurs d’événements en étendant la classe Event comme le fait la classe MouseEvent, par exemple. ActionScript 3.0</ph><ph platform="javascript">L’API Adobe<sup>®</sup> AIR™</ph> définit plusieurs sous-classes Event destinées aux événements courants qui nécessitent des informations supplémentaires. Les événements associés aux sous-classes Event sont décrits dans la documentation de chaque classe.</p>
 
 <p>Il est possible d’utiliser les méthodes de la classe Event dans les fonctions d’écouteur d’événement pour définir le comportement de l’objet événement. Certains événements sont associés à un comportement par défaut.<ph platform="actionscript"> Par exemple, l’événement <codeph>doubleClick</codeph> dont le comportement par défaut met en évidence le mot qui se trouve sous le pointeur de la souris au moment où l’événement se produit.</ph> <ph platform="javascript">Par exemple, l’événement <codeph>closing</codeph> distribué par un objet NativeWindow a un comportement par défaut associé qui ferme la fenêtre.</ph>Votre écouteur d’événements peut annuler ce comportement en appelant la méthode <codeph>preventDefault()</codeph>. <ph platform="actionscript">Vous pouvez également faire en sorte que l’écouteur d’événement actuel soit le dernier à traiter un événement en appelant la méthode <codeph>stopPropagation()</codeph> ou <codeph>stopImmediatePropagation()</codeph>.</ph></p>
 
 <p platform="javascript"><b>Remarque :</b> certaines constantes de cette classe sont utilisées pour définir la propriété <codeph>type</codeph> pour des événements qui sont distribués par la liste d’affichage ActionScript 3.0, utilisés dans le contenu SWF. Cependant, certaines constantes de cette classe sont utilisées pour définir la propriété <codeph>type</codeph> pour des événements qui ne sont <i>pas</i> liés à la liste d’affichage ActionScript 3.0 et qui sont utiles dans le code JavaScript exécuté dans le moteur d’exécution AIR.</p>
 
 </apiDesc><example conref="examples\EventExample.as"> L’exemple suivant utilise la classe <codeph>EventExample</codeph> et la classe personnalisée <codeph>Square</codeph> pour montrer comment gérer un événement qui peut se propager vers le haut (bubbling).
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace(">> stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace(">> --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace(">> 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace(">> 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace(">> --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace(">> 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as"> L’exemple suivant crée une démonstration interactive de la différence entre les événements <codeph>ADDED</codeph> et <codeph>ADDED_TO_STAGE</codeph>, ainsi que de la différence entre les événements <codeph>REMOVED</codeph> et <codeph>REMOVED_FROM_STAGE</codeph>. Le fait de cliquer sur un sprite entraîne sa suppression de la scène et la suppression de tout ce qu’il contient. Par exemple, le fait de cliquer sur le sprite le plus grand entraîne le déclenchement d’un événement <codeph>REMOVED</codeph> ainsi que de trois événements <codeph>REMOVED_FROM_STAGE</codeph>.
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate"><apiName>activate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added"><apiName>added</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage"><apiName>addedToStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel"><apiName>cancel</apiName><prolog><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing"><apiName>closing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COPY</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut"><apiName>cut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CUT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate"><apiName>deactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying"><apiName>displaying</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame"><apiName>enterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting"><apiName>exiting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame"><apiName>exitFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed"><apiName>frameConstructed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>événement htmlBoundsChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>événement htmlDOMInitialize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>événement htmlRender</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3"><apiName>id3</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ID3</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init"><apiName>init</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:INIT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>événement locationChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave"><apiName>mouseLeave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange"><apiName>networkChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste"><apiName>paste</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed"><apiName>removed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage"><apiName>removedFromStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render"><apiName>render</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll"><apiName>selectAll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange"><apiName>tabChildrenChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange"><apiName>tabEnabledChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange"><apiName>tabIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event"><apiName>Event</apiName><shortdesc>
     Crée un objet Event à transmettre en tant que paramètre aux écouteurs d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement, accessible en tant que <codeph>Event.type</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. La valeur par défaut est <codeph>false</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé. La valeur par défaut est <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Utilisé pour créer un objet Event.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Crée un objet Event à transmettre en tant que paramètre aux écouteurs d’événements.
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone"><apiName>clone</apiName><shortdesc>
	 Duplique une occurrence d’une sous-classe Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvel objet Event identique à l’original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Duplique une occurrence d’une sous-classe Event.
	 
     <p>Renvoie un nouvel objet Event, qui est une copie de l’occurrence d’origine de l’objet Event. En règle générale, vous n’appelez pas <codeph>clone()</codeph>. La classe EventDispatcher l’appelle automatiquement lorsque vous redistribuez un événement, en d’autres termes, lorsque vous appelez <codeph>dispatchEvent(event)</codeph> à partir du gestionnaire qui gère <codeph>event</codeph>.</p>
	 
	 <p>Le nouvel objet Event comprend toutes les propriétés de l’objet d’origine.</p> 
	 
	 <p platform="actionscript">Lorsque vous créez une classe Event personnalisée, vous devez bloquer la méthode <codeph>Event.clone()</codeph> héritée afin qu’elle duplique les propriétés de votre classe personnalisée. Si vous ne définissez pas toutes les propriétés que vous ajoutez à votre sous-classe Event, elles ne posséderont pas les valeurs correctes lorsque les écouteurs gèreront l’événement redistribué.</p>
	 
	 <p platform="actionscript">Dans cet exemple, <codeph>PingEvent</codeph> est une sous-classe de <codeph>Event</codeph> et implémente donc sa propre version de <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString"><apiName>formatToString</apiName><shortdesc>
	 Fonction d’un utilitaire permettant d’implémenter la méthode toString() dans des classes Event ActionScript 3.0 personnalisées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nom de votre classe Event personnalisée et valeur de chaîne de votre paramètre <codeph>...arguments</codeph>.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>className</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Nom de votre classe Event personnalisée. <ph platform="actionscript">Dans l’exemple précédent, le paramètre <codeph>className</codeph> est <codeph>PingEvent</codeph>.</ph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>Propriétés de la classe Event<ph platform="actionscript"> et propriétés que vous ajoutez à votre classe Event personnalisée. Dans l’exemple précédent, le paramètre <codeph>...arguments</codeph> comprend <codeph>type</codeph>, <codeph>bubbles</codeph>, <codeph>cancelable</codeph>, <codeph>eventPhase</codeph> et <codeph>URL</codeph></ph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Fonction d’un utilitaire permettant d’implémenter la méthode <codeph>toString()</codeph> dans des classes Event ActionScript 3.0 personnalisées. <ph platform="actionscript">Le blocage de la méthode <codeph>toString()</codeph> est recommandé, mais n’est pas obligatoire.</ph>
	 
	 <pre platform="actionscript">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 <p platform="javascript">Cette méthode est utilisée dans la création de classes ActionScript 3.0 à utiliser dans le contenu SWF.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented"><apiName>isDefaultPrevented</apiName><shortdesc>
	Vérifie si la méthode preventDefault() a été appelée pour l’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Si <codeph>preventDefault()</codeph> a été appelée, la valeur <codeph>true</codeph> est renvoyée ; dans le cas contraire, <codeph>false</codeph> est renvoyée.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Vérifie si la méthode <codeph>preventDefault()</codeph> a été appelée pour l’événement. Si la méthode <codeph>preventDefault()</codeph> a été appelée, la valeur <codeph>true</codeph> est renvoyée ; dans le cas contraire, <codeph>false</codeph> est renvoyée.
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
	Annule le comportement par défaut d’un événement si cette opération est possible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Annule le comportement par défaut d’un événement si cette opération est possible.
	
	<p>De nombreux événements sont associés à des comportements exécutés par défaut. <ph platform="actionscript">Par exemple, si un utilisateur tape un caractère dans un champ de texte, le comportement par défaut consiste à afficher le caractère dans le champ de texte. Etant donné que le comportement par défaut de l’événement <codeph>TextEvent.TEXT_INPUT</codeph> peut être annulé, vous pouvez utiliser la méthode <codeph>preventDefault()</codeph> pour bloquer l’affichage du caractère.</ph> <ph platform="javascript">Par exemple, si un utilisateur clique sur la zone de fermeture d’une fenêtre, le comportement par défaut consiste à fermer la fenêtre. Etant donné que le comportement par défaut de l’événement <codeph>closing</codeph> peut être annulé, vous pouvez utiliser la méthode <codeph>preventDefault()</codeph> pour bloquer la fermeture de la fenêtre.</ph>
	</p>
	
    <p platform="actionscript">Certains comportements par défaut ne peuvent pas être annulés, tel celui associé à l’événement <codeph>Event.REMOVED</codeph>, généré chaque fois que Flash Player est sur le point de supprimer un objet d’affichage dans la liste d’affichage. Le comportement par défaut (suppression de l’élément) ne pouvant pas être annulé, la méthode <codeph>preventDefault()</codeph> n’a aucun effet sur ce comportement par défaut. </p>
	
	<p>Vous pouvez utiliser la propriété <codeph>Event.cancelable</codeph> pour vérifier s’il est possible d’annuler le comportement par défaut associé à un événement spécifique. Si la valeur de <codeph>Event.cancelable</codeph> est <codeph>true</codeph>, <codeph>preventDefault()</codeph> peut être utilisé pour annuler l’événement ; dans le cas contraire, <codeph>preventDefault()</codeph> n’a aucun effet.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/isDefaultPrevented()"><linktext>flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable"><linktext>Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation"><apiName>stopImmediatePropagation</apiName><shortdesc>
	Bloque le traitement des écouteurs d’événement dans le nœud actuel et les suivants dans le flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Bloque le traitement des écouteurs d’événement dans le nœud actuel et les suivants dans le flux d’événements. <ph platform="actionscript">Cette méthode entre en vigueur immédiatement et affecte les écouteurs d’événements dans le nœud actuel. En revanche, la méthode <codeph>stopPropagation()</codeph> n’entre en vigueur qu’au terme du traitement de tous les écouteurs d’événements du nœud actuel.</ph>
	
	<p platform="actionscript"><b>Remarque : </b> cette méthode n’annule pas le comportement associé à cet événement. Pour plus d’informations sur cette fonctionnalité, voir <codeph>preventDefault()</codeph>.</p>
	
	<p platform="javascript">Le flux d’événements est défini pour des objets d’affichage dans le contenu SWF, qui utilisent le modèle d’objet d’affichage ActionScript 3.0.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopPropagation()"><linktext>flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation"><apiName>stopPropagation</apiName><shortdesc>
	Bloque le traitement des écouteurs d’événement dans les nœuds qui suivent le nœud actuel dans le flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Bloque le traitement des écouteurs d’événement dans les nœuds qui suivent le nœud actuel dans le flux d’événements. <ph platform="actionscript">Cette méthode n’a aucune incidence sur les écouteurs d’événements du nœud actuel (<codeph>currentTarget</codeph>). En revanche, la méthode <codeph>stopImmediatePropagation()</codeph> bloque le traitement des écouteurs d’événement dans le nœud actuel et les suivants. D’autres appels de cette méthode sont sans effet. Cette méthode peut être appelée lors de toute phase du flux d’événements.</ph>
	
	<p platform="actionscript"><b>Remarque : </b> cette méthode n’annule pas le comportement associé à cet événement. Pour plus d’informations sur cette fonctionnalité, voir <codeph>preventDefault()</codeph>.</p>
	
	<p platform="javascript">Le flux d’événements est défini pour des objets d’affichage dans le contenu SWF, qui utilisent le modèle d’objet d’affichage ActionScript 3.0.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopImmediatePropagation()"><linktext>flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet Event.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet Event. La chaîne est écrite au format suivant :
	<p><codeph>[Event type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE"><apiName>ACTIVATE</apiName><shortdesc>
	La constante ACTIVATE définit la valeur de la propriété type d’un objet événement activate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ACTIVATE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>activate</codeph>. 
	<p><b>Remarque :</b> cet événement n’a ni « phase de capture », ni « phase de propagation », ce qui signifie que des écouteurs d’événement doivent être ajoutés directement aux cibles potentielles, que la cible soit dans la liste d’affichage ou non.</p>
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence de DisplayObject à laquelle est associé un écouteur pour l’événement <codeph>activate</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED"><apiName>ADDED</apiName><shortdesc>
	La constante Event.ADDED définit la valeur de la propriété type d’un objet événement added.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>added</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.ADDED</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>added</codeph>. 
	
	<p platform="javascript">L’événement <codeph>added</codeph> s’applique à la liste d’affichage ActionScript 3.0 et ne concerne pas le code JavaScript.</p>
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence de DisplayObject ajoutée à la liste d’affichage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE"><apiName>ADDED_TO_STAGE</apiName><shortdesc>
	La constante Event.ADDED_TO_STAGE définit la valeur de la propriété type d’un objet d’événement addedToStage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addedToStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante<codeph> Event.ADDED_TO_STAGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet d’événement <codeph>addedToStage</codeph>. 
	
	<p platform="javascript">L’événement <codeph>addedToStage</codeph> s’applique à la liste d’affichage ActionScript 3.0 et ne concerne pas le code JavaScript.</p>
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence de DisplayObject ajoutée sur la scène à la liste d’affichage, directement ou par l’intermédiaire d’une arborescence secondaire qui contient l’occurrence DisplayObject. Si l’occurrence DisplayObject est ajoutée directement, l’événement <codeph>added</codeph> se produit avant cet événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL"><apiName>CANCEL</apiName><shortdesc>
	La constante Event.CANCEL définit la valeur de la propriété type d’un objet événement cancel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.CANCEL</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>cancel</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Référence à l’objet pour lequel l’opération est annulée.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	La constante Event.CHANGE définit la valeur de la propriété type de l’objet d’événement change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante<codeph> Event.CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> de l’objet d’événement <codeph>change</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet dont la valeur a été modifiée. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR"><apiName>CLEAR</apiName><shortdesc>
	La constante Event.CLEAR définit la valeur de la propriété type d’un objet événement clear.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clear</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.CLEAR</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>clear</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence InteractiveObject à laquelle est associé un écouteur pour l’événement <codeph>clear</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Remarque :</b> les objets TextField ne distribuent <i>pas</i> les événements <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Les objets TextField incluent toujours les commandes Couper, Copier, Coller, Effacer et Sélectionner tout dans le menu contextuel. Vous ne pouvez pas supprimer ces commandes du menu contextuel pour les objets TextField. Pour les objets TextField, la sélection de ces commandes (ou leurs équivalents clavier) ne génère pas d’événement <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Toutefois, les autres classes qui étendent la classe InteractiveObject, y compris les composants intégrés avec FTE (Flash Text Engine), peuvent distribuer ces événements. </p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	La constante Event.CLOSE définit la valeur de la propriété type d’un objet événement close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.CLOSE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>close</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet dont la connexion a été fermée.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING"><apiName>CLOSING</apiName><shortdesc>
	La constante Event.CLOSING définit la valeur de la propriété type d’un objet événement closing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>closing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.CLOSING</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>closing</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de cet objet événement arrête l’opération close.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet dont la connexion va être fermée.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	La constante Event.COMPLETE définit la valeur de la propriété type d’un objet événement complete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.COMPLETE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>complete</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet réseau dont le chargement est terminé. 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT"><apiName>CONNECT</apiName><shortdesc>
	La constante Event.CONNECT définit la valeur de la propriété type d’un objet événement connect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.CONNECT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>connect</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Socket ou XMLSocket qui a établi une connexion réseau.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY"><apiName>COPY</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet d’événement copy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet d’événement <codeph>copy</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence InteractiveObject à laquelle est associé un écouteur pour l’événement <codeph>copy</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Remarque :</b> les objets TextField ne distribuent <i>pas</i> les événements <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Les objets TextField incluent toujours les commandes Couper, Copier, Coller, Effacer et Sélectionner tout dans le menu contextuel. Vous ne pouvez pas supprimer ces commandes du menu contextuel pour les objets TextField. Pour les objets TextField, la sélection de ces commandes (ou leurs équivalents clavier) ne génère pas d’événement <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Toutefois, les autres classes qui étendent la classe InteractiveObject, y compris les composants intégrés avec FTE (Flash Text Engine), peuvent distribuer ces événements. </p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT"><apiName>CUT</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet d’événement cut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet d’événement <codeph>cut</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence InteractiveObject à laquelle est associé un écouteur pour l’événement <codeph>cut</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Remarque :</b> les objets TextField ne distribuent <i>pas</i> les événements <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Les objets TextField incluent toujours les commandes Couper, Copier, Coller, Effacer et Sélectionner tout dans le menu contextuel. Vous ne pouvez pas supprimer ces commandes du menu contextuel pour les objets TextField. Pour les objets TextField, la sélection de ces commandes (ou leurs équivalents clavier) ne génère pas d’événement <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Toutefois, les autres classes qui étendent la classe InteractiveObject, y compris les composants intégrés avec FTE (Flash Text Engine), peuvent distribuer ces événements. </p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE"><apiName>DEACTIVATE</apiName><shortdesc>
	La constante Event.DEACTIVATE définit la valeur de la propriété type d’un objet événement deactivate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.DEACTIVATE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>deactivate</codeph>. 
	<p><b>Remarque :</b> cet événement n’a ni « phase de capture », ni « phase de propagation », ce qui signifie que des écouteurs d’événement doivent être ajoutés directement aux cibles potentielles, que la cible soit dans la liste d’affichage ou non.</p>
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence DisplayObject à laquelle est associé un écouteur pour l’événement <codeph>deactivate.</codeph></entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING"><apiName>DISPLAYING</apiName><shortdesc>
	 La constante Event.DISPLAYING définit la valeur de la propriété type d’un objet événement displaying.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displaying</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 La constante <codeph>Event.DISPLAYING</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>displaying</codeph>. 
	 <p><b>Remarque :</b> cet événement ne passe pas par une « phase de capture » et est distribué directement à la cible, que cette dernière soit dans la liste d’affichage ou non.</p>
	 <p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	  <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet sur le point d’être affiché.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
	La constante Event.ENTER_FRAME définit la valeur de la propriété type d’un objet événement enterFrame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.ENTER_FRAME</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>enterFrame</codeph>. 
	<p><b>Remarque :</b> cet événement n’a ni « phase de capture », ni « phase de propagation », ce qui signifie que des écouteurs d’événement doivent être ajoutés directement aux cibles potentielles, que la cible soit dans la liste d’affichage ou non.</p>
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence DisplayObject à laquelle est associé un écouteur pour l’événement <codeph>enterFrame</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING"><apiName>EXITING</apiName><shortdesc>
	La constante Event.EXITING définit la valeur de la propriété type de l’objet d’événement exiting.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exiting</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante<codeph> Event.EXITING</codeph> définit la valeur de la propriété <codeph>type</codeph> de l’objet d’événement <codeph>exiting</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de cet objet événement arrête l’opération exit.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet NativeApplication.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME"><apiName>EXIT_FRAME</apiName><shortdesc>
	La constante Event.EXIT_FRAME définit la valeur de la propriété type d’un objet événement exitFrame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.EXIT_FRAME</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>exitFrame</codeph>. 
	<p><b>Remarque :</b> cet événement n’a ni « phase de capture », ni « phase de propagation », ce qui signifie que des écouteurs d’événement doivent être ajoutés directement aux cibles potentielles, que la cible soit dans la liste d’affichage ou non.</p>
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence DisplayObject à laquelle est associé un écouteur pour l’événement <codeph>enterFrame</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED"><apiName>FRAME_CONSTRUCTED</apiName><shortdesc>
	La constante Event.FRAME_CONSTRUCTED définit la valeur de la propriété type d’un objet événement frameConstructed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>frameConstructed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.FRAME_CONSTRUCTED</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>frameConstructed</codeph>. 
	
	<p><b>Remarque :</b> cet événement n’a ni « phase de capture », ni « phase de propagation », ce qui signifie que des écouteurs d’événement doivent être ajoutés directement aux cibles potentielles, que la cible soit dans la liste d’affichage ou non.</p>
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence DisplayObject à laquelle est associé un écouteur pour l’événement <codeph>frameConstructed</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN"><apiName>FULLSCREEN</apiName><shortdesc>
	La constante Event.FULL_SCREEN définit la valeur de la propriété type d’un objet événement fullScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.FULL_SCREEN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>fullScreen</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Stage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE"><apiName>HTML_BOUNDS_CHANGE</apiName><shortdesc>
	La constante Event.HTML_BOUNDS_CHANGE définit la valeur de la propriété type d’un objet événement htmlBoundsChange.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlBoundsChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.HTML_BOUNDS_CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>htmlBoundsChange</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>événement htmlBoundsChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE"><apiName>HTML_DOM_INITIALIZE</apiName><shortdesc>
	La constante Event.HTML_DOM_INITIALIZE définit la valeur de la propriété type d’un objet événement htmlDOMInitialize.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlDOMInitialize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.HTML_DOM_INITIALIZE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>htmlDOMInitialize</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>événement htmlDOMInitialize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER"><apiName>HTML_RENDER</apiName><shortdesc>
	La constante Event.HTML_RENDER définit la valeur de la propriété type d’un objet événement htmlRender.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlRender</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.HTML_RENDER</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>htmlRender</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>événement htmlRender</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3"><apiName>ID3</apiName><shortdesc>
	La constante Event.ID3 définit la valeur de la propriété type d’un objet événement id3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id3</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.ID3</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>id3</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet son chargeant le fichier MP3 pour lequel les données ID3 sont maintenant disponibles. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT"><apiName>INIT</apiName><shortdesc>
	La constante Event.INIT définit la valeur de la propriété type d’un objet événement init.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>init</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.INIT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>init</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet LoaderInfo associé au fichier SWF en cours de chargement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE"><apiName>LOCATION_CHANGE</apiName><shortdesc>
	La constante Event.LOCATION_CHANGE définit la valeur de la propriété type d’un objet événement locationChange.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>locationChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.LOCATION_CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>locationChange</codeph>.
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>événement locationChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE"><apiName>MOUSE_LEAVE</apiName><shortdesc>
	La constante Event.MOUSE_LEAVE définit la valeur de la propriété type d’un objet événement mouseLeave.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseLeave</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.MOUSE_LEAVE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseLeave</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Stage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE"><apiName>NETWORK_CHANGE</apiName><shortdesc>
	La constante Event.NETWORK_CHANGE définit la valeur de la propriété type d’un objet événement networkChange.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>networkChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.NETWORK_CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>networkChange</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN"><apiName>OPEN</apiName><shortdesc>
	La constante Event.OPEN définit la valeur de la propriété type d’un objet événement open.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.OPEN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>open</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet réseau qui a ouvert une connexion. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE"><apiName>PASTE</apiName><shortdesc>
	La constante Event.PASTE définit la valeur de la propriété type d’un objet événement paste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paste</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.PASTE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>paste</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence InteractiveObject à laquelle est associé un écouteur pour l’événement <codeph>paste</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Remarque :</b> les objets TextField ne distribuent <i>pas</i> les événements <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Les objets TextField incluent toujours les commandes Couper, Copier, Coller, Effacer et Sélectionner tout dans le menu contextuel. Vous ne pouvez pas supprimer ces commandes du menu contextuel pour les objets TextField. Pour les objets TextField, la sélection de ces commandes (ou leurs équivalents clavier) ne génère pas d’événement <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Toutefois, les autres classes qui étendent la classe InteractiveObject, y compris les composants intégrés avec FTE (Flash Text Engine), peuvent distribuer ces événements. </p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED"><apiName>REMOVED</apiName><shortdesc>
	La constante Event.REMOVED définit la valeur de la propriété type d’un objet événement removed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.REMOVED</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>removed</codeph>. 
	
	<p platform="javascript">L’événement <codeph>removed</codeph> s’applique à la liste d’affichage ActionScript 3.0 et ne concerne pas le code JavaScript.</p>
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence de DisplayObject à supprimer de la liste d’affichage. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE"><apiName>REMOVED_FROM_STAGE</apiName><shortdesc>
	La constante Event.REMOVED_FROM_STAGE définit la valeur de la propriété type d’un objet événement removedFromStage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removedFromStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.REMOVED_FROM_STAGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>removedFromStage</codeph>. 
	
	<p platform="javascript">L’événement <codeph>removedFromStage</codeph> s’applique à la liste d’affichage ActionScript 3.0 et ne concerne pas le code JavaScript.</p>
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence de DisplayObject retirée de la liste d’affichage de la scène, directement ou par l’intermédiaire d’une arborescence secondaire qui contient l’occurrence DisplayObject. Si l’occurrence DisplayObject est retirée directement, l’événement <codeph>removed</codeph> se produit avant cet événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER"><apiName>RENDER</apiName><shortdesc>
	La constante Event.RENDER définit la valeur de la propriété type d’un objet événement render.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.RENDER</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>render</codeph>. 
	<p><b>Remarque :</b> cet événement n’a ni « phase de capture », ni « phase de propagation », ce qui signifie que des écouteurs d’événement doivent être ajoutés directement aux cibles potentielles, que la cible soit dans la liste d’affichage ou non.</p>
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; le comportement par défaut ne peut pas être annulé.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence DisplayObject à laquelle est associé un écouteur pour l’événement <codeph>render</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	La constante Event.RESIZE définit la valeur de la propriété type d’un objet événement resize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.RESIZE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>resize</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Stage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	La constante Event.SCROLL définit la valeur de la propriété type d’un objet événement scroll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.SCROLL</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>scroll</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet Textfield que l’utilisateur a fait défiler. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT"><apiName>SELECT</apiName><shortdesc>
	La constante Event.SELECT définit la valeur de la propriété type d’un objet événement select.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.SELECT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>select</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet sur lequel un élément a été sélectionné.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc>
	La constante Event.SELECT_ALL définit la valeur de la propriété type d’un objet événement selectAll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.SELECT_ALL</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>selectAll</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toute occurrence InteractiveObject à laquelle est associé un écouteur pour l’événement <codeph>selectAll</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Remarque :</b> les objets TextField ne distribuent <i>pas</i> les événements <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Les objets TextField incluent toujours les commandes Couper, Copier, Coller, Effacer et Sélectionner tout dans le menu contextuel. Vous ne pouvez pas supprimer ces commandes du menu contextuel pour les objets TextField. Pour les objets TextField, la sélection de ces commandes (ou leurs équivalents clavier) ne génère pas d’événement <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> ou <codeph>selectAll</codeph>. Toutefois, les autres classes qui étendent la classe InteractiveObject, y compris les composants intégrés avec FTE (Flash Text Engine), peuvent distribuer ces événements. </p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE"><apiName>SOUND_COMPLETE</apiName><shortdesc>
	La constante Event.SOUND_COMPLETE définit la valeur de la propriété type d’un objet événement soundComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>soundComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.SOUND_COMPLETE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>soundComplete</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet SoundChannel dont la lecture d’un son est terminée.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE"><apiName>TAB_CHILDREN_CHANGE</apiName><shortdesc>
	La constante Event.TAB_CHILDREN_CHANGE définit la valeur de la propriété type d’un objet événement tabChildrenChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabChildrenChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.TAB_CHILDREN_CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>tabChildrenChange</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet dont l’indicateur tabChildren a changé. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE"><apiName>TAB_ENABLED_CHANGE</apiName><shortdesc>
	La constante Event.TAB_ENABLED_CHANGE définit la valeur de la propriété type d’un objet événement tabEnabledChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabEnabledChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.TAB_ENABLED_CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>tabEnabledChange</codeph>. 
	
	<p platform="javascript">L’événement <codeph>tabEnabledChange</codeph> s’applique à la liste d’affichage ActionScript 3.0 et ne concerne pas le code JavaScript.</p>
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet InteractiveObject dont l’indicateur tabEnabled a changé. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE"><apiName>TAB_INDEX_CHANGE</apiName><shortdesc>
	La constante Event.TAB_INDEX_CHANGE définit la valeur de la propriété type d’un objet événement tabIndexChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabIndexChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.TAB_INDEX_CHANGE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>tabIndexChange</codeph>. 
	
	<p platform="javascript">L’événement <codeph>tabIndexChange</codeph> s’applique à la liste d’affichage ActionScript 3.0 et ne concerne pas le code JavaScript.</p>
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet dont l’indicateur tabIndex a changé. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
	La constante Event.UNLOAD définit la valeur de la propriété type d’un objet événement unload.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.UNLOAD</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>unload</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet LoaderInfo associé au fichier SWF en cours de déchargement ou de remplacement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE"><apiName>USER_IDLE</apiName><shortdesc>
	La constante Event.USER_IDLE définit la valeur de la propriété type d’un objet événement userIdle.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userIdle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.USER_IDLE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>userIdle</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT"><apiName>USER_PRESENT</apiName><shortdesc>
	La constante Event.USER_PRESENT définit la valeur de la propriété type d’un objet événement userPresent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userPresent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>Event.USER_PRESENT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>userPresent</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
	Indique si un événement peut se propager vers le haut (bubbling).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si un événement peut se propager vers le haut (bubbling). Si l’événement peut se propager vers le haut, cette valeur correspond à<codeph>true</codeph> ; dans tous les autres cas, elle correspond à <codeph>false</codeph>.
	
	<p platform="javascript">La propagation vers le haut (bubbling) d’événements est définie pour des objets d’affichage dans le contenu SWF, qui utilisent le modèle d’objet d’affichage ActionScript 3.0. La propriété <codeph>bubbles</codeph> ne concerne que le code ActionScript 3.0.</p>
	
	<p platform="actionscript">Lorsqu’un événement se produit, il se propage dans les trois phases du flux d’événements : La phase de capture, qui va du haut de la hiérarchie de la liste d’affichage au nœud précédant le nœud cible ; la phase cible, qui concerne uniquement le nœud cible ; la phase de propagation vers le haut (bubbling), 	qui remonte la hiérarchie de la liste d’affichage, en partant du nœud suivant le nœud cible.</p>
	
	<p platform="actionscript">Certains événements, tels que <codeph>activate</codeph> et <codeph>unload</codeph>, n’ont pas phase de propagation vers le haut. La propriété <codeph>bubbles</codeph> possède la valeur <codeph>false</codeph> pour les événements sans phase de propagation vers le haut (bubbling).</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
	Indique si le comportement associé à l’événement peut être évité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si le comportement associé à l’événement peut être évité. Si tel est le cas, cette valeur correspond à <codeph>true</codeph> ; dans tous les autres cas, elle correspond à <codeph>false</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
	L’objet qui traite activement l’objet Event avec un écouteur d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	L’objet qui traite activement l’objet Event avec un écouteur d’événements. Si un utilisateur clique sur un bouton OK par exemple, le nœud cible pourrait correspondre au nœud contenant ce bouton ou à l’un de ses ancêtres qui est associé à un écouteur d’événement pour cet événement.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
	Phase actuelle du flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Phase actuelle du flux d’événements. Cette propriété peut contenir les valeurs numériques suivantes :
	<ul>
	    <li> Phase de capture (<codeph>EventPhase.CAPTURING_PHASE</codeph>).</li>
	    <li> Phase cible (<codeph>EventPhase.AT_TARGET</codeph>).</li>
	    <li> Phase de propagation vers le haut (bubbling) (<codeph>EventPhase.BUBBLING_PHASE</codeph>).</li></ul>
	
	<p platform="javascript">Le flux d’événements est défini pour des objets d’affichage dans le contenu SWF, qui utilisent le modèle d’objet d’affichage ActionScript 3.0. La propriété <codeph>eventPhase</codeph> ne concerne que le code ActionScript 3.0.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get"><apiName>target</apiName><shortdesc>
	Cible de l’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	Cible de l’événement. Cette propriété contient le nœud cible. Si un utilisateur clique sur un bouton OK par exemple, le nœud cible correspond au nœud de la liste d’affichage qui contient ce bouton.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get"><apiName>type</apiName><shortdesc>
	Type d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Type d’événement. Le type respecte la casse.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc> 
  Distribué lorsque le lecteur demande de nouvelles données audio.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Distribué lorsque le lecteur demande de nouvelles données audio. 
 
  <p>Utilisez cet événement pour gérer le son généré dynamiquement. Dans cet environnement, l’objet Sound ne contient pas vraiment de données audio. Il agit en fait en tant que socket pour les données audio qui lui sont distribuées en continu par l’intermédiaire de la fonction que vous affectez à cet événement. </p>
 
  <p>Dans votre fonction, vous utilisez la méthode <codeph>ByteArray.writeFloat()</codeph> pour écrire dans un objet ByteArray (<codeph>event.data</codeph>) contenant les données échantillonnées que vous souhaitez lire.</p>
 
  <p>Lorsque vous appelez la méthode <codeph>Sound.play()</codeph>, le lecteur commence par appeler votre gestionnaire d’événement, en demandant des tranches de données contenant des échantillons audio. Le lecteur continue à envoyer des événements pendant la lecture du son jusqu’à ce que vous cessiez de fournir des données ou jusqu’à ce que la méthode <codeph>SoundChannel.stop()</codeph> soit appelée.</p>
 
  <p>La période d’attente de l’événement varie selon les plates-formes et peut encore changer dans les futures versions de Flash Player. Plutôt que de vous appuyer sur une période d’attente spécifique, calculez-la. Pour calculer cette attente dans ActionScript, utilisez la formule : <codeph>((SampleDataEvent.position/44.1) - SoundChannelObject.position)</codeph>.</p>
 
  <p>Fournissez entre 2 048 et 8 192 échantillons dans un objet <codeph>SampleDataEvent</codeph>. Pour de meilleures performances, fournissez autant d’échantillons que possible. Moins vous fournissez d’échantillons, plus il est probable que des bruits parasites se feront entendre pendant la lecture. Ce comportement varie selon les plates-formes et peut se produire dans diverses situations, par exemple lors du redimensionnement du navigateur. Vous pouvez écrire du code qui fonctionne sur une plateforme lorsque vous fournissez uniquement 2 048 échantillons, mais ce même code peut ne pas fonctionner s’il s’exécute sur une autre plateforme. S’il vous faut le plus court délai d’attente possible, envisagez de permettre à l’utilisateur de sélectionner la quantité de données.</p>
 
  <p>Si vous fournissez moins de 2 048 échantillons, Flash Player lit les échantillons restants, puis interrompt la lecture comme s’il avait atteint la fin du fichier son, en générant un événement SoundComplete.</p>
 
  <p>Vous pouvez également utiliser la méthode <codeph>Sound.extract()</codeph> pour extraire les données d’un objet Sound, que vous pouvez ensuite écrire dans le flux dynamique pour la lecture.  </p>
 
  <p>Lorsque vous utilisez cet événement avec un objet Sound, les seules autres méthodes Sound activées sont <codeph>Sound.extract()</codeph> et <codeph>Sound.play()</codeph>. L’appel à d’autres méthodes ou propriétés résulte en une exception d’appel non valide. Tous les méthodes et propriétés de l’objet SoundChannel sont toujours activées.</p>
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as"> L’exemple suivant lit une onde sinusoïdale simple.
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc>
		Crée un objet événement contenant des informations sur les événements de données audio.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Cette valeur est : <codeph>Event.SAMPLE_DATA</codeph>.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. 
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé. 
		</apiDesc></apiParam><apiParam><apiItemName>theposition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Position des données dans le flux audio.
		</apiDesc></apiParam><apiParam><apiItemName>thedata</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Tableau d’octets de données.
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Crée un objet événement contenant des informations sur les événements de données audio. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événement. 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone"><apiName>clone</apiName><shortdesc>
		Crée une copie de l’objet SampleDataEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet SampleDataEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Crée une copie de l’objet SampleDataEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString"><apiName>toString</apiName><shortdesc>
		Renvoie une chaîne contenant toutes les propriétés de l’objet SampleDataEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne contenant toutes les propriétés de l’objet <codeph>SampleDataEvent</codeph>.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Renvoie une chaîne contenant toutes les propriétés de l’objet SampleDataEvent. La chaîne est écrite au format suivant :
		<p><codeph>[SampleDataEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> theposition=<i>valeur</i> thedata=<i>valeur</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA"><apiName>SAMPLE_DATA</apiName><shortdesc>
		Définit la valeur de la propriété type d’un objet événement SampleDataEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sampleData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>SampleDataEvent</codeph>. 
		<p>Les propriétés de cet événement sont les suivantes :</p>
		<adobetable class="innertable">
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>position</codeph></entry><entry>Point à partir duquel les données audio sont fournies.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get"><apiName>data</apiName><shortdesc>
		Données présentes dans le flux audio.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		Données présentes dans le flux audio.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get"><apiName>position</apiName><shortdesc>
		Position des données dans le flux audio.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		Position des données dans le flux audio.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 L’objet NativeApplication d’une application AIR déclenche un événement invoke lorsque l’application est invoquée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 L’objet NativeApplication d’une application AIR déclenche un événement <codeph>invoke</codeph> lorsque l’application est invoquée. 
	 
	 <p>L’objet NativeApplication distribue toujours un événement <codeph>invoke</codeph> au démarrage d’une application, mais l’événement peut également être distribué à d’autres moments. Par exemple, une application en cours d’exécution déclenche un événement InvokeEvent supplémentaire lorsqu’un utilisateur active un fichier associé à l’application.</p>
	 
	 <p>Une seule occurrence d’une application particulière peut être démarrée. Les tentatives suivantes de démarrage de l’application entraînent le déclenchement d’un nouvel événement <codeph>invoke</codeph> par l’objet NativeApplication de l’occurrence en cours d’exécution. L’application est chargée de gérer cet événement et d’exécuter l’action appropriée, par exemple d’ouvrir une nouvelle fenêtre d’application pour afficher les données dans un fichier.</p>
	  
	 <p>Les objets InvokeEvent sont distribués par l’objet NativeApplication (<codeph>NativeApplication.nativeApplication</codeph>). Pour recevoir des événements <codeph>invoke</codeph>, appelez la méthode <codeph>addEventListener()</codeph> de l’objet NativeApplication. Lorsqu’un écouteur d’événement s’enregistre pour un événement <codeph>invoke</codeph>, il reçoit également tous les événements <codeph>InvokeEvent</codeph> ayant eu lieu avant l’enregistrement. Ces événements précédents sont déclenchés après le retour de l’appel à la méthode <codeph>addEventListener()</codeph>, mais pas nécessairement avant qu’un nouvel événement <codeph>invoke</codeph> ait pu être déclenché après l’enregistrement. Il est donc préférable de ne pas compter sur l’ordre de déclenchement.</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#BrowserInvokeEvent"><linktext>flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier>flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 La fonction de constructeur pour la classe InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type de l’événement, accessible en tant que <codeph>Event.type</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Définissez sur <codeph>false</codeph> pour un objet InvokeEvent.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Définissez sur <codeph>false</codeph> pour un objet InvokeEvent.
	 </apiDesc></apiParam><apiParam><apiItemName>dir</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiData>null</apiData><apiDesc>Le répertoire qui doit être utilisé pour résoudre des chemins relatifs dans le tableau <codeph>arguments</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>argv</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Un tableau d’arguments (chaînes) à transmettre à l’application.
	 </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>standard</apiData><apiDesc>La cause de l’événement, soit <codeph>InvokeEventReason.LOGIN</codeph>, soit <codeph>InvokeEventReason.STANDARD</codeph>. (Ce paramètre est disponible depuis la version 1.5.1 d’AIR).  
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 La fonction de constructeur pour la classe InvokeEvent.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Crée une copie de cet événement.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Copie de l’événement.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Crée une copie de cet événement.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE"><apiName>INVOKE</apiName><shortdesc>
	 La constante InvokeEvent.INVOKE définit la valeur de la propriété type de l’objet InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 La constante <codeph>InvokeEvent.INVOKE</codeph> définit la valeur de la propriété <codeph>type</codeph> de l’objet InvokeEvent.
	 
     <p>L’objet InvokeEvent possède les propriétés suivantes :</p>
 	 <adobetable class="innertable">
        
	     
	    
	    
	     
	    
	     
	        
	  <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>Tableau des arguments de chaîne transmis pendant cette invocation.</entry></row><row><entry><codeph>currentDirectory</codeph></entry><entry>Objet File représentant le répertoire à utiliser pour résoudre des chemins relatifs dans le tableau d’arguments.</entry></row><row><entry><codeph>reason</codeph></entry><entry>Un code indiquant si l’événement invoke a été distribué en raison du démarrage automatique de l’application lors de la connexion (<codeph>InvokeEventReason.LOGIN</codeph>) ou pour une autre raison (<codeph>InvokeEventReason.STANDARD</codeph>). Disponible depuis la version 1.5.1 d’AIR.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet InvokeEvent avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toujours l’objet NativeApplication.  
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 Le tableau des arguments de chaîne transmis pendant cette invocation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Le tableau des arguments de chaîne transmis pendant cette invocation. S’il s’agit d’une invocation de ligne de commande, le tableau contient les arguments de la ligne de commande <i>excluant</i> le nom du processus.
		 
		 <p><i>Remarque :</i> lorsque vous sélectionnez et ouvrez plusieurs fichiers dans Mac<sup>®</sup> OS X, AIR distribue un seul événement <codeph>invoke</codeph> contenant les noms de tous les fichiers sélectionnés dans le tableau <codeph>arguments</codeph>. Cependant, sous Windows<sup>®</sup> et Linux, AIR distribue un événement <codeph>invoke</codeph> distinct pour chaque fichier sélectionné contenant uniquement ce nom de fichier dans le tableau <codeph>arguments</codeph>.
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get"><apiName>currentDirectory</apiName><shortdesc>
		 Le répertoire qui doit être utilisé pour résoudre des chemins relatifs dans le tableau d’arguments.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
		 Répertoire qui doit être utilisé pour résoudre des chemins relatifs dans le tableau <codeph>arguments</codeph>. 
		 
		 <p>Si vous lancez une application à partir de la ligne de commande, cette propriété est généralement définie sur le répertoire de travail actuel du shell de ligne de commande à partir duquel l’application a été démarrée. Si vous lancez une application depuis le shell GUI, il s’agit généralement de la racine du système de fichiers.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get"><apiName>reason</apiName><shortdesc>
		 La raison de cet InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 La raison de cet InvokeEvent. Cette propriété indique si l’application a été lancée manuellement par l’utilisateur ou automatiquement lors de la connexion. Les valeurs possibles sont énumérées en tant que constantes dans la classe <codeph>InvokeEventReason</codeph> :
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Constante InvokeEventReason</entry><entry>Signification</entry></row></thead><tbody><row>
		 	<entry><codeph>LOGIN</codeph></entry>
		 	<entry>Démarrée automatiquement lors de la connexion.</entry>
		 
		 </row><row>
		 	<entry><codeph>STANDARD</codeph></entry>
		 	<entry>Lancée pour toute autre raison. </entry>
		 
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
L’application distribue des objets HTTPStatusEvent lorsqu’une requête réseau renvoie un code d’état HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
L’application distribue des objets HTTPStatusEvent lorsqu’une requête réseau renvoie un code d’état HTTP. 

<p>Les objets HTTPStatusEvent sont toujours envoyés avant les événements d’erreur ou d’achèvement. Un objet HTTPStatusEvent n’indique pas nécessairement une erreur. Il reflète simplement le code d’état HTTP (s’il existe) fourni par la pile réseau. <ph platform="actionscript">Certains environnements Flash Player ne peuvent pas détecter les codes d’état HTTP. Dans ce cas, le code d’état 0 est systématiquement renvoyé.</ph> </p>

<p><ph platform="actionscript">Dans Flash Player, il n’existe qu’un type d’événement HTTPStatus : <codeph>httpStatus</codeph>. </ph>Dans le moteur d’exécution AIR, un FileReference, URLLoader ou URLStream peut enregistrer pour écouter un <codeph>httpResponseStatus</codeph>, qui inclut des propriétés <codeph>responseURL</codeph> et <codeph>responseHeaders</codeph>. Ces propriétés ne sont pas définies dans un événement <codeph>httpStatus</codeph>.</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as"> L’exemple suivant tente de charger un fichier non existant depuis le répertoire Web racine http://www.[yourDomain].com, qui doit distribuer un événement <codeph>httpStatusHandler</codeph> avec l’état 404, indiquant que le fichier est introuvable. L’événement <codeph>httpStatusHandler</codeph> est traité par <codeph>httpStatusHandler()</codeph>, qui imprime simplement deux lignes d’informations sur l’événement.
 
 <p> <b>Remarques :</b> 
 <ol>
    <li>Pour générer un événement <codeph>securityError</codeph> dans cet exemple, vous devez compiler le fichier SWF en définissant « Sécurité de lecture locale » sur « Accès au réseau uniquement ».</li>
    <li>Vous devez disposer d’un serveur s’exécutant sur http://www.[yourDomain].com et qui écoute le port 80 ou vous recevrez un événement <codeph>httpStatusHandler</codeph> avec le code d’état 0 au lieu de 404.</li>
    <li>Il ne doit pas y avoir de fichier nommé MissingFile.html dans le répertoire Web racine http://www.[yourDomain].com car vous ne recevriez pas dans ce cas l’événement <codeph>httpStatusHandler</codeph> approprié.</li>
 </ol>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations sur les événements HTTPStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement HTTPStatus : <codeph>HTTPStatusEvent.HTTP_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Etat numérique. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>status</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets HTTPStatusEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event contenant des informations sur les événements HTTPStatus. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS"><linktext>HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet HTTPStatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet HTTPStatusEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet HTTPStatusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet HTTPStatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet HTTPStatusEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet HTTPStatusEvent. La chaîne est écrite au format suivant :
	<p><codeph>[HTTPStatusEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> status=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS"><apiName>HTTP_RESPONSE_STATUS</apiName><shortdesc>
	Contrairement à l’événement httpStatus, l’événement httpResponseStatus est renvoyé avant toute donnée de réponse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpResponseStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Contrairement à l’événement <codeph>httpStatus</codeph>, l’événement <codeph>httpResponseStatus</codeph> est renvoyé avant toute donnée de réponse. De plus, l’événement <codeph>httpResponseStatus</codeph> inclut des valeurs pour les propriétés <codeph>responseHeaders</codeph> et <codeph>responseURL</codeph> (qui ne sont pas définies pour un événement <codeph>httpStatus</codeph>. Notez que <codeph>httpResponseStatus</codeph> (le cas échéant) est envoyé avant (et en complément de) tout événement <codeph>complete</codeph> ou <codeph>error</codeph>. 
	
	<p>La constante <codeph>HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>httpResponseStatus</codeph>. </p>
	
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>responseURL</codeph></entry><entry>L’URL de laquelle la réponse a été renvoyée.</entry></row><row><entry><codeph>responseHeaders</codeph></entry><entry>Les en-têtes de réponse que la réponse a renvoyés, sous la forme d’un tableau d’objets URLRequestHeader.</entry></row><row><entry><codeph>status</codeph></entry><entry>Le code d’état HTTP renvoyé par le serveur.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet réseau recevant un code d’état HTTP. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS"><apiName>HTTP_STATUS</apiName><shortdesc>
	La constante HTTPStatusEvent.HTTP_STATUS définit la valeur de la propriété type d’un objet événement httpStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>HTTPStatusEvent.HTTP_STATUS</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>httpStatus</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>status</codeph></entry><entry>Le code d’état HTTP renvoyé par le serveur.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet réseau recevant un code d’état HTTP. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get"><apiName>responseHeaders</apiName><shortdesc>
	 Les en-têtes de réponse que la réponse a renvoyés, sous la forme d’un tableau d’objets URLRequestHeader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Les en-têtes de réponse que la réponse a renvoyés, sous la forme d’un tableau d’objets URLRequestHeader.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get"><apiName>responseURL</apiName><shortdesc>
	 L’URL à partir de laquelle la réponse à été renvoyée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 L’URL à partir de laquelle la réponse à été renvoyée. En cas de redirections, ceci sera différent de l’URL de requête.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get"><apiName>status</apiName><shortdesc>
	Le code d’état HTTP renvoyé par le serveur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Le code d’état HTTP renvoyé par le serveur. Par exemple, une valeur 404 indique que le serveur n’a pas détecté de correspondance pour l’URL requise. Les valeurs de code HTTP sont répertoriées dans les sections 10.4 et 10.5 de la spécification HTTP à l’adresse <xref href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">ftp://ftp.isi.edu/in-notes/rfc2616.txt</xref>.
	
	<p>Si <ph platform="actionscript">Flash Player ou </ph>AIR ne peut pas obtenir un code d’état auprès du serveur, ou s’il ne peut pas communiquer avec le serveur, la valeur 0 est transmise par défaut à votre code . <ph platform="actionscript">Une valeur 0 peut être générée dans un lecteur quelconque (par exemple, si une URL mal formée est demandée) et une valeur 0 est toujours générée par le module Flash Player lorsqu’il est exécuté dans les navigateurs suivants, qui ne transmettent pas de codes d’état HTTP au lecteur : Netscape, Mozilla, Safari, Opera et Internet Explorer pour Macintosh.</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
	 Un objet File distribue un objet FileListEvent lorsqu’un appel à la méthode getDirectoryListingAsync() d’un objet File énumère un ensemble de fichiers et de répertoires ou lorsqu’un utilisateur sélectionne des fichiers après un appel à la méthode browseForOpenMultiple().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Un objet File distribue un objet FileListEvent après des appels réussis à la méthode getDirectoryListingAsync() ou browseForOpenMultiple().
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Un objet File distribue un objet FileListEvent lorsqu’un appel à la méthode <codeph>getDirectoryListingAsync(</codeph>) d’un objet File énumère un ensemble de fichiers et de répertoires ou lorsqu’un utilisateur sélectionne des fichiers après un appel à la méthode <codeph>browseForOpenMultiple()</codeph>. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
		La fonction de constructeur pour un objet FileListEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement propage vers le haut (<codeph>false</codeph> pour un objet FileListEvent).
		
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé (<codeph>false</codeph> pour un objet FileListEvent).
		
		</apiDesc></apiParam><apiParam><apiItemName>files</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Tableau d’objets File.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Fonction constructeur pour un objet FileListEvent. 
		
		<p>Le moteur d’exécution utilise cette classe pour créer des objets FileListEvent. Vous n’utilisez pas ce constructeur directement dans votre code.</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING"><apiName>DIRECTORY_LISTING</apiName><shortdesc>
		 La constante FileListEvent.DIRECTORY_LISTING définit la valeur de la propriété type de l’objet événement pour un événement directoryListing.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoryListing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 La constante <codeph>FileListEvent.DIRECTORY_LISTING</codeph> définit la valeur de la propriété <codeph>type</codeph> de l’objet événement pour un événement <codeph>directoryListing</codeph>.
		 
		 <p>Les propriétés de cet événement sont les suivantes :</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>files</codeph></entry><entry>Un tableau d’objets File représentant les fichiers et les répertoires trouvés.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet FileListEvent.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE"><apiName>SELECT_MULTIPLE</apiName><shortdesc>
		 La constante FileListEvent.SELECT_MULTIPLE définit la valeur de la propriété type de l’objet événement pour un événement selectMultiple.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectMultiple</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 La constante <codeph>FileListEvent.SELECT_MULTIPLE</codeph> définit la valeur de la propriété <codeph>type</codeph> de l’objet événement pour un événement <codeph>selectMultiple</codeph>.
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>files</codeph></entry><entry>Un tableau d’objets File représentant les fichiers sélectionnés.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet FileListEvent.</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files"><apiName>files</apiName><shortdesc>
		 Un tableau d’objets File représentant les fichiers et les répertoires trouvés ou sélectionnés.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Tableau d’objets File représentant les fichiers et les répertoires détectés ou sélectionnés. 
		 
		 <p>Pour la méthode <codeph>File.getDirectoryListingAsync()</codeph>, il s’agit de la liste des fichiers et des répertoires trouvés au niveau de la racine du répertoire représenté par l’objet File ayant appelé la méthode. Pour la méthode <codeph>File.browseForOpenMultiple()</codeph>, il s’agit de la liste des fichiers sélectionnés par l’utilisateur.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
 Un objet NativeWindow déclenche un objet NativeWindowBoundsEvent lorsque la taille ou l’emplacement de la fenêtre change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event pour les événements NativeWindow qui changent la taille et/ou l’emplacement de la fenêtre.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet NativeWindow déclenche un objet NativeWindowBoundsEvent lorsque la taille ou l’emplacement de la fenêtre change. Il existe quatre types d’événement : 
 <ul>
     <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING"><linktext>flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE"><linktext>flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING"><linktext>flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE"><linktext>flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving"><apiName>moving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing"><apiName>resizing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
    Crée un objet Event à l’aide d’informations spécifiques relatives aux événements window bounds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles :
    <ul>
        <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Indique si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si l’objet Event peut être annulé.
    </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Indique les limites avant le changement le plus récent ou le changement en attente.
    </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Indique les limites après le changement le plus récent ou le changement en attente. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Crée un objet Event à l’aide d’informations spécifiques relatives aux événements window bounds. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone"><apiName>clone</apiName><shortdesc>
    Crée une copie de l’objet NativeWindowBoundsEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet NativeWindowBoundsEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Crée une copie de l’objet NativeWindowBoundsEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString"><apiName>toString</apiName><shortdesc>
    Renvoie une chaîne répertoriant toutes les propriétés de l’objet NativeWindowBoundsEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet NativeWindowBoundsEvent.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Renvoie une chaîne répertoriant toutes les propriétés de l’objet NativeWindowBoundsEvent. La chaîne présente le format suivant :
    <p><codeph>[NativeWindowBoundsEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> previousDisplayState=<i>valeur</i> currentDisplayState=<i>valeur</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>move. </codeph> Les propriétés de cet événement sont les suivantes :
    <adobetable class="innertable">
        
         
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Nouvelles limites de la fenêtre.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Anciennes limites de la fenêtre.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet NativeWindow qui vient de changer d’état. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; Il n’existe aucun comportement par défaut à annuler.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING"><apiName>MOVING</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement moving.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moving</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>moving</codeph>. Les propriétés de cet événement sont les suivantes :
    <adobetable class="innertable">
        
         
         
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Limites de la fenêtre après le changement en attente.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Limites de la fenêtre avant le changement en attente.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de l’événement empêche le déplacement de la fenêtre.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet NativeWindow qui vient de changer d’état.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement resize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet de l’événement <codeph>resize. </codeph> Les propriétés de cet événement sont les suivantes :
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Nouvelles limites de la fenêtre.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Anciennes limites de la fenêtre.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet NativeWindow qui vient de changer d’état. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; Il n’existe aucun comportement par défaut à annuler.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement resizing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>resizing</codeph>. Les propriétés de cet événement sont les suivantes :
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Limites de la fenêtre après le changement en attente.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Limites de la fenêtre avant le changement en attente.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet NativeWindow qui vient de changer d’état. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; l’annulation de l’événement empêche le déplacement de la fenêtre.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get"><apiName>afterBounds</apiName><shortdesc>
     Limites de la fenêtre après le changement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     Limites de la fenêtre après le changement.
       
     <p>Si l’événement est <codeph>moving</codeph> ou <codeph>resizing</codeph>, les limites n’ont pas encore changé ; <codeph>afterBounds</codeph> indique les nouvelles limites si l’événement n’est pas annulé. Si l’événement est <codeph>move</codeph> ou <codeph>resize</codeph>, <codeph>afterBounds</codeph> indique les nouvelles limites.
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get"><apiName>beforeBounds</apiName><shortdesc>
     Limites de la fenêtre avant le changement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     Limites de la fenêtre avant le changement.  
     
     <p>Si l’événement est <codeph>moving</codeph> ou <codeph>resizing</codeph>, les limites n’ont pas encore changé ; <codeph>beforeBounds</codeph> reflète les limites actuelles. Si l’événement est <codeph>move</codeph> ou <codeph>resize</codeph>, <codeph>beforeBounds</codeph> indique la valeur d’origine.
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
L’objet SystemTrayIcon déclenche des événements de type ScreenMouseEvent en réponse à l’interaction de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objet event pour des événements ScreenMouseEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
L’objet SystemTrayIcon déclenche des événements de type ScreenMouseEvent en réponse à l’interaction de la souris.

<p>L’objet ScreenMouseEvent étend la classe MouseEvent pour fournir deux propriétés supplémentaires, <codeph>screenX</codeph> et <codeph>screenY</codeph>, qui signalent les coordonnées de la souris par rapport à l’écran du bureau principal au lieu d’une fenêtre d’application ou scène.</p>
 
</apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#SystemTrayIcon"><linktext>flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown"><apiName>rightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
	Crée un objet ScreenMouseEvent contenant l’emplacement de la souris en coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>La position X du clic en coordonnées d’écran.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>La position Y du clic en coordonnées d’écran.
	</apiDesc></apiParam><apiParam><apiItemName>screenX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Définissez cette propriété sur <codeph>false</codeph> car les événements de souris d’écran ne se propagent jamais vers le haut. 
	</apiDesc></apiParam><apiParam><apiItemName>screenY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Définissez sur <codeph>false</codeph> car il n’existe aucun comportement par défaut à annuler.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Sous Windows ou Linux, indique si la touche Ctrl était enfoncée lorsque cet événement a eu lieu. Sous Mac, indique si la touche Ctrl ou Commande était enfoncée.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Définissez sur <codeph>true</codeph> pour indiquer que la touche alt était enfoncée lorsque cet événement a eu lieu.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Définissez sur <codeph>true</codeph> pour indiquer que la touche Maj était enfoncée lorsque cet événement a eu lieu.
	</apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Définissez sur <codeph>true</codeph> pour indiquer qu’un bouton de la souris était enfoncé lorsque cet événement a eu lieu.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Commande était enfoncée (Mac uniquement).
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche Ctrl ou Contrôle était enfoncée.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets ScreenMouseEvent.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet ScreenMouseEvent contenant l’emplacement de la souris en coordonnées d’écran.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet ScreenMouseEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet ScreenMouseEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet ScreenMouseEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ScreenMouseEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet ScreenMouseEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ScreenMouseEvent. La chaîne est écrite au format suivant :
	<p><codeph>[ScreenMouseEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> status=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	La constante ScreenMouseEvent.CLICK définit la valeur de la propriété type d’un objet événement click.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ScreenMouseEvent.CLICK</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>click</codeph>. 
	
	<p>Les principales propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SystemTrayIcon sous le périphérique de pointage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	La constante ScreenMouseEvent.MOUSE_DOWN définit la valeur de la propriété type d’un objet événement mouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ScreenMouseEvent.MOUSE_DOWN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseDown</codeph>. 
	
	<p>Les principales propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SystemTrayIcon sous le périphérique de pointage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	La constante ScreenMouseEvent.MOUSE_UP définit la valeur de la propriété type d’un objet événement mouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ScreenMouseEvent.MOUSE_UP</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseUp</codeph>. 
	
	<p>Les principales propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SystemTrayIcon sous le périphérique de pointage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	La constante ScreenMouseEvent.RIGHT_CLICK définit la valeur de la propriété type d’un objet événement rightClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ScreenMouseEvent.RIGHT_CLICK</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rightClick</codeph>. 
	
	<p>Les principales propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SystemTrayIcon sous le périphérique de pointage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	La constante ScreenMouseEvent.RIGHT_MOUSE_DOWN définit la valeur de la propriété type d’un objet événement rightMouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rightMouseDown</codeph>. 
	
	<p>Les principales propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SystemTrayIcon sous le périphérique de pointage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	La constante ScreenMouseEvent.RIGHT_MOUSE_UP définit la valeur de la propriété type d’un objet événement rightMouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ScreenMouseEvent.RIGHT_MOUSE_UP</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rightMouseUp</codeph>. 
	
	<p>Les principales propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> si le bouton principal de la souris est enfoncé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> sous Windows ou Linux si la touche Ctrl est enfoncée. <codeph>true</codeph> sur Mac si la touche Ctrl ou la touche Commande est activée. Sinon, la valeur <codeph>false</codeph> est renvoyée.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si la touche Maj est activée ; <codeph>false</codeph> si elle ne l’est pas.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> sur le Mac si la touche Commande est activée ; <codeph>false</codeph> si elle est désactivée. Toujours <codeph>false</codeph> sur Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> si la touche Ctrl ou Contrôle est activée ; <codeph>false</codeph> si elle est désactivée.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Coordonnée horizontale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Coordonnée verticale à laquelle l’événement s’est produit, par rapport aux coordonnées de l’écran.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SystemTrayIcon sous le périphérique de pointage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
	Position X du clic en coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	La position X du clic en coordonnées d’écran.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
	La position Y du clic en coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Position Y du clic en coordonnées d’écran.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
    Un objet NetStream distribue un objet DRMAuthenticateEvent lors d’une tentative de lecture d’un contenu chiffré par DRM (gestion des droits numériques) nécessitant les informations d’identification de l’utilisateur pour l’authentification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event pour des objets activés DRM.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
    Un objet NetStream distribue un objet DRMAuthenticateEvent lors d’une tentative de lecture d’un contenu chiffré par DRM (gestion des droits numériques) nécessitant les informations d’identification de l’utilisateur pour l’authentification. 
	<p>
	Le gestionnaire DRMAuthenticateEvent est chargé de rassembler les informations d’identification requises (nom d’utilisateur, mot de passe et type, par exemple)) et de transmettre les valeurs à la méthode <codeph>NetStream.setDRMAuthenticationCredentials()</codeph> pour l’authentification. Chaque application AIR doit fournir un mécanisme permettant d’obtenir les informations d’identification de l’utilisateur. Par exemple, l’application peut fournir à l’utilisateur une interface utilisateur simple pour entrer les valeurs de nom d’utilisateur et de mot de passe, ainsi que le type, le cas échéant.  
	</p> 
	<p>
	En cas d’échec de l’authentification utilisateur, l’application tente de nouveau l’authentification et distribue un nouvel événement DRMAuthenticateEvent pour l’objet NetStream.
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>flash.net.NetStream.setDRMAuthenticationCredentials()</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE"><linktext>DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
 	    Crée un objet Event contenant des informations spécifiques sur les événements d’authentification DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement DRMAuthenticate : <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
		</apiDesc></apiParam><apiParam><apiItemName>header</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>L’en-tête du fichier de contenu chiffré fourni par le serveur.
  		</apiDesc></apiParam><apiParam><apiItemName>userPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc> Une invite à entrer les informations de nom d’utilisateur, fournies par le serveur.
		</apiDesc></apiParam><apiParam><apiItemName>passPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Une invite à entrer les informations de mot de passe, fournies par le serveur.
		</apiDesc></apiParam><apiParam><apiItemName>urlPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Une invite pour une URL à afficher, fournie par le serveur.
		</apiDesc></apiParam><apiParam><apiItemName>authenticationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Indique si les informations d’identification fournies servent à l’authentification par rapport à un serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media) ou un serveur proxy.
		</apiDesc></apiParam><apiParam><apiItemName>netstream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiData>null</apiData><apiDesc>L’objet NetStream qui a initié cet événement.
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	    Crée un objet Event contenant des informations spécifiques sur les événements d’authentification DRM. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone"><apiName>clone</apiName><shortdesc>
		Crée une copie de l’objet DRMAuthenticateEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet DRMAuthenticateEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Crée une copie de l’objet DRMAuthenticateEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString"><apiName>toString</apiName><shortdesc>
		Renvoie une chaîne répertoriant toutes les propriétés de l’objet DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Une chaîne répertoriant toutes les propriétés de l’objet DRMAuthenticateEvent.
		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Renvoie une chaîne répertoriant toutes les propriétés de l’objet DRMAuthenticateEvent. La chaîne est écrite au format suivant : 
     	<p><codeph>[DRMAuthenticateEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> eventPhase=<i>valeur</i> header=<i>valeur</i> usernamePrompt=<i>valeur</i> passwordPrompt=<i>valeur</i> urlPrompt=<i>valeur</i>] authenticationType=<i>valeur</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM"><apiName>AUTHENTICATION_TYPE_DRM</apiName><shortdesc>
		La constante DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM définit la valeur de la propriété authenticationType d’un objet événement DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drm</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		La constante <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph> définit la valeur de la propriété <codeph>authenticationType</codeph> d’un objet événement DRMAuthenticateEvent. 
		
		<p>Les propriétés de cet événement sont les suivantes :</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Indique si les informations d’identification fournies servent à l’authentification par rapport à un serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media) ou un serveur proxy.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>en-tête</codeph></entry><entry>L’en-tête du fichier de contenu chiffré fourni par le serveur.</entry></row><row><entry><codeph>netStream</codeph></entry><entry>L’objet NetStream qui a initié cet événement.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Une invite à entrer les informations de mot de passe, fournies par le serveur.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NetStream.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Une invite pour une URL à afficher, fournie par le serveur.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Une invite à entrer les informations de nom d’utilisateur, fournies par le serveur.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY"><apiName>AUTHENTICATION_TYPE_PROXY</apiName><shortdesc>
		La constante DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY définit la valeur de la propriété authenticationType d’un objet événement DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proxy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		La constante <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph> définit la valeur de la propriété <codeph>authenticationType</codeph> d’un objet événement DRMAuthenticateEvent. 
		
		<p>Les propriétés de cet événement sont les suivantes :</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Indique si les informations d’identification fournies servent à l’authentification par rapport à un serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media) ou un serveur proxy.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>en-tête</codeph></entry><entry>L’en-tête du fichier de contenu chiffré fourni par le serveur.</entry></row><row><entry><codeph>netStream</codeph></entry><entry>L’objet NetStream qui a initié cet événement.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Une invite à entrer les informations de mot de passe, fournies par le serveur.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NetStream.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Une invite pour une URL à afficher, fournie par le serveur.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Une invite à entrer les informations de nom d’utilisateur, fournies par le serveur.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE"><apiName>DRM_AUTHENTICATE</apiName><shortdesc>
		La constante DRMAuthenticateEvent.DRM_AUTHENTICATE définit la valeur de la propriété type d’un objet événement DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmAuthenticate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		La constante <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement DRMAuthenticateEvent. 
		
		<p>Les propriétés de cet événement sont les suivantes :</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Indique si les informations d’identification fournies servent à l’authentification par rapport à un serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media) ou un serveur proxy.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> il n'existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>en-tête</codeph></entry><entry>L’en-tête du fichier de contenu chiffré fourni par le serveur.</entry></row><row><entry><codeph>netStream</codeph></entry><entry>L’objet NetStream qui a initié cet événement.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Une invite à entrer les informations de mot de passe, fournies par le serveur.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NetStream.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Une invite pour une URL à afficher, fournie par le serveur.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Une invite à entrer les informations de nom d’utilisateur, fournies par le serveur.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get"><apiName>authenticationType</apiName><shortdesc>
		Indique si les informations d’identification fournies servent à l’authentification par rapport au serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media) ou un serveur proxy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Indique si les informations d’identification fournies servent à l’authentification par rapport au serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media) ou un serveur proxy. Par exemple, l’option <codeph>"proxy"</codeph> permet à l’application d’authentifier par rapport à un serveur proxy si une entreprise exige cette étape avant que l’utilisateur puisse accéder à Internet. A moins qu’une authentification anonyme soit utilisée, après l’authentification proxy, l’utilisateur doit encore authentifier par rapport à FMRMS afin d’obtenir le bon et lire le contenu. Vous pouvez utiliser <codeph>setDRMAuthenticationcredentials()</codeph> une deuxième fois, avec l’option <codeph>"drm"</codeph>, pour authentifier par rapport à FMRMS.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get"><apiName>header</apiName><shortdesc>
		L’en-tête du fichier de contenu chiffré fourni par le serveur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		L’en-tête du fichier de contenu chiffré fourni par le serveur. Il contient des informations sur le contexte du contenu chiffré.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get"><apiName>netstream</apiName><shortdesc>
		L’objet NetStream qui a initié cet événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc>
		L’objet NetStream qui a initié cet événement.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get"><apiName>passwordPrompt</apiName><shortdesc>
		Une invite à entrer les informations de mot de passe, fournies par le serveur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Une invite à entrer les informations de mot de passe, fournies par le serveur. La chaîne peut inclure des instructions pour le type de mot de passe requis.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get"><apiName>urlPrompt</apiName><shortdesc>
		Une invite pour une chaîne d’URL, fournie par le serveur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Une invite pour une chaîne d’URL, fournie par le serveur. La chaîne peut fournir l’emplacement auquel le nom d’utilisateur et le mot de passe sont envoyés.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get"><apiName>usernamePrompt</apiName><shortdesc>
		Une invite à entrer les informations de nom d’utilisateur, fournies par le serveur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Une invite à entrer les informations de nom d’utilisateur, fournies par le serveur. La chaîne peut inclure des instructions pour le type de nom d’utilisateur requis. Par exemple, un fournisseur de contenu peut exiger une adresse électronique comme nom d’utilisateur.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
 Un objet InteractiveObject distribue un objet ContextMenuEvent lorsque l’utilisateur ouvre le menu contextuel ou interagit avec lui.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements ContextMenuEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet InteractiveObject distribue un objet ContextMenuEvent lorsque l’utilisateur ouvre le menu contextuel ou interagit avec lui. Il existe deux types d’événements ContextMenuEvent :
 <ul>
   <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
   <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as"> L’exemple suivant utilise la classe <codeph>ContextMenuEventExample</codeph> pour supprimer les éléments de menu contextuel par défaut de la scène et ajouter un nouvel élément de menu qui change la couleur d’un carré sur la scène. L’exemple exécute les tâches suivantes :
 
 <ol>
     <li>La propriété <codeph>myContextMenu</codeph> est déclarée, puis affectée à un nouvel objet ContextMenu et la propriété <codeph>redRectangle</codeph> (de type Sprite) est déclarée.</li>
     <li>La méthode <codeph>removeDefaultItems()</codeph> est appelée. Cette méthode supprime tous les éléments de menu intégrés à l’exception de Print.</li>
 
     <li>La méthode <codeph>addCustomMenuItems()</codeph> est appelée. Cette méthode place un élément de menu <codeph>Reverse Colors</codeph> dans le tableau <codeph>defaultItems</codeph> à l’aide de la méthode <codeph>push()</codeph> de Array. Un écouteur d’événements <codeph>menuItemSelect</codeph> est ajouté à l’objet ContextMenuItem et la méthode associée est appelée <codeph>menuItemSelectHandler()</codeph>. Cette méthode imprime certaines instructions <codeph>trace()</codeph> chaque fois que l’initiateur sélectionne Reverse Colors dans le menu contextuel. Le carré rouge devient noir et le texte noir devient rouge.</li>
 
     <li>Dans le constructeur, un écouteur d’événements <codeph>menuSelect</codeph> est ajouté, de même que la méthode associée <codeph>menuSelectHandler()</codeph>, qui imprime simplement trois instructions <codeph>trace()</codeph> chaque fois qu’un élément du menu contextuel est sélectionné.</li>
 
 <li>Le constructeur appelle <codeph>addChildren()</codeph>, qui dessine un carré rouge et l’ajoute dans la liste d’affichage, cette dernière l’affichant immédiatement.</li>
 
     <li>Enfin, la propriété <codeph>myContextMenu</codeph> est affectée ou menu contextuel de la propriété <codeph>redRectangle</codeph>, de sorte que le menu contextuel personnalisé ne s’affiche que lorsque le pointeur de la souris survole le carré.</li>
 </ol>
<codeblock>
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.ui.xml#ContextMenu"><linktext>Classe ContextMenu</linktext></link><link href="flash.ui.xml#ContextMenuItem"><linktext>Classe ContextMenuItem</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect"><apiName>menuItemSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect"><apiName>menuSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
	Crée un objet Event contenant des informations spécifiques sur les événements de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles :
	<ul>
	    <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
	    <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
	</ul>
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	</apiDesc></apiParam><apiParam><apiItemName>mouseTarget</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet de la liste d’affichage sur lequel l’utilisateur a cliqué du bouton droit de la souris pour afficher le menu contextuel. Il peut s’agir de l’objet <codeph>contextMenuOwner</codeph> ou de l’un de ses descendants dans la liste d’affichage.
	</apiDesc></apiParam><apiParam><apiItemName>contextMenuOwner</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet de la liste d’affichage auquel le menu est associé. Il peut s’agir de l’objet <codeph>mouseTarget</codeph> ou de l’un de ses ancêtres dans la liste d’affichage.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux événements ContextMenuEvent.
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet Event contenant des informations spécifiques sur les événements de menu. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT"><linktext>ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet ContextMenuEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet ContextMenuEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet ContextMenuEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ContextMenuEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet ContextMenuEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ContextMenuEvent. La chaîne est écrite au format suivant :
	<p><codeph>[ContextMenuEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> ... contextMenuOwner=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT"><apiName>MENU_ITEM_SELECT</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement menuItemSelect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuItemSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>menuItemSelect</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
		<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>Objet de la liste d’affichage auquel le menu est associé.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>Objet de la liste d’affichage sur lequel l’utilisateur a cliqué du bouton droit de la souris pour afficher le menu contextuel.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet ContextMenuItem qui a été sélectionné. La cible ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT"><apiName>MENU_SELECT</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement menuSelect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>menuSelect</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>Objet de la liste d’affichage auquel le menu est associé.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>Objet de la liste d’affichage sur lequel l’utilisateur a cliqué du bouton droit de la souris pour afficher le menu contextuel.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet ContextMenu sur le point d’être affiché. La cible ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get"><apiName>contextMenuOwner</apiName><shortdesc>
	Objet de la liste d’affichage auquel le menu est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Objet de la liste d’affichage auquel le menu est associé. Il peut s’agir de la cible de la souris (<codeph>mouseTarget</codeph>) ou de l’un de ses ancêtres dans la liste d’affichage.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get"><apiName>isMouseTargetInaccessible</apiName><shortdesc>
	 Indique si la propriété mouseTarget a été définie sur null pour des raisons de sécurité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Indique si la propriété <codeph>mouseTarget</codeph> a été définie sur <codeph>null</codeph> pour des raisons de sécurité. Si la valeur nominale de <codeph>menuTarget</codeph> est une référence à un <codeph>DisplayObject</codeph> se trouvant dans un autre sandbox de sécurité, <codeph>menuTarget</codeph> est défini sur <codeph>null</codeph>, à moins qu’il existe une autorisation dans les deux sens dans les limites de ce sandbox. L’autorisation est établie en appelant la méthode <codeph>Security.allowDomain()</codeph> à partir d’un fichier SWF ou en fournissant un fichier de régulation depuis le serveur d’un fichier image, puis en définissant l’indicateur <codeph>LoaderContext.checkPolicyFile</codeph> lors du chargement de l’image.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/mouseTarget"><linktext>ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get"><apiName>mouseTarget</apiName><shortdesc>
	Objet de la liste d’affichage sur lequel l’utilisateur a cliqué du bouton droit de la souris pour afficher le menu contextuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Objet de la liste d’affichage sur lequel l’utilisateur a cliqué du bouton droit de la souris pour afficher le menu contextuel. Il peut s’agir de l’objet de la liste d’affichage auquel le menu est associé (<codeph>contextMenuOwner</codeph>) ou de l’un de ses descendants dans la liste d’affichage.
	<p>La valeur de cette propriété peut être <codeph>null</codeph> dans deux cas : d’une part s’il n’existe aucune cible de la souris, notamment lorsque vous placez la souris sur un élément de l’arrière-plan ; d’autre part lorsqu’il existe une cible de la souris mais que celle-ci se trouve dans un sandbox de sécurité auquel vous n’avez pas accès. Pour savoir dans quel cas vous vous trouvez, utilisez la propriété <codeph>isMouseTargetInaccessible()</codeph>.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible"><linktext>ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
 Adobe AIR distribue des objets SQLEvent lorsque l’une des opérations effectuées par une occurrence SQLConnection ou SQLStatement se termine correctement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Adobe AIR distribue des objets SQLEvent lorsque l’une des opérations effectuées par une occurrence SQLConnection ou SQLStatement se termine correctement.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
     Crée un objet SQLEvent à transmettre en tant que paramètre aux écouteurs d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Le type d’événement, accessible dans la propriété <codeph>type</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. La valeur par défaut est <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé. La valeur par défaut est <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Utilisé pour créer un objet SQLEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Crée un objet SQLEvent à transmettre en tant que paramètre aux écouteurs d’événements.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie de l’objet SQLEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet SQLEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie de l’objet SQLEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     La constante SQLEvent.ANALYZE définit la valeur de la propriété type d’un objet événement analyze.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.ANALYZE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>analyze</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.analyze()</codeph> se termine correctement. L’événement <codeph>analyze</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     La constante SQLEvent.ATTACH définit la valeur de la propriété type d’un objet événement attach.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.ATTACH</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>attach</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.attach()</codeph> se termine correctement. L’événement <codeph>attach</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     La constante SQLEvent.BEGIN définit la valeur de la propriété type d’un objet événement begin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.BEGIN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>begin</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.begin()</codeph> se termine correctement. L’événement <codeph>begin</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL"><apiName>CANCEL</apiName><shortdesc>
     La constante SQLEvent.CANCEL définit la valeur de la propriété type d’un objet événement cancel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.CANCEL</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>cancel</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.cancel()</codeph> se termine correctement. L’événement <codeph>cancel</codeph> a les propriétés suivantes :
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection ou SQLStatement qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     La constante SQLEvent.CLOSE définit la valeur de la propriété type d’un objet événement close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.CLOSE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>close</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.close()</codeph> se termine correctement. L’événement <codeph>close</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     La constante SQLEvent.COMMIT définit la valeur de la propriété type d’un objet événement commit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.COMMIT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>commit</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.commit()</codeph> se termine correctement. L’événement <codeph>commit</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     La constante SQLEvent.COMPACT définit la valeur de la propriété type d’un objet événement compact.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.COMPACT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>compact</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.compact()</codeph> se termine correctement. L’événement <codeph>compact</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     La constante SQLEvent.DEANALYZE définit la valeur de la propriété type d’un objet événement deanalyze.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.DEANALYZE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>deanalyze</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.deanalyze()</codeph> se termine correctement. L’événement <codeph>deanalyze</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH"><apiName>DETACH</apiName><shortdesc>
     La constante SQLEvent.DETACH définit la valeur de la propriété type d’un objet événement detach.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.DETACH</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>detach</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.detach()</codeph> se termine correctement.
     
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
     La constante SQLEvent.OPEN définit la valeur de la propriété type d’un objet événement open.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.OPEN</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>open</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.open()</codeph> ou <codeph>SQLConnection.openAsync()</codeph>se termine correctement. L’événement <codeph>open</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     La constante SQLEvent.REENCRYPT définit la valeur de la propriété type d’un objet événement reencrypt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.REENCRYPT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>reencrypt</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.reencrypt()</codeph> aboutit. L’événement <codeph>reencrypt</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT"><apiName>RESULT</apiName><shortdesc>
     La constante SQLEvent.RESULT définit la valeur de la propriété type d’un objet événement result.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>result</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.RESULT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>result</codeph>. Déclenché lorsque la méthode <codeph>SQLStatement.execute()</codeph> ou <codeph>SQLStatement.next()</codeph> se termine avec succès. Une fois que l’événement <codeph>SQLEvent.RESULT</codeph> est distribué, la méthode <codeph>SQLStatement.getResult()</codeph> peut être appelée pour accéder aux données de résultat. L’événement <codeph>result</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLStatement qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     La constante SQLEvent.ROLLBACK définit la valeur de la propriété type d’un objet événement rollback.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.ROLLBACK</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>rollback</codeph>. Ce type d’événement est distribué lorsqu’un appel de la méthode <codeph>SQLConnection.rollback()</codeph> se termine correctement. L’événement <codeph>rollback</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     La constante SQLEvent.SCHEMA définit la valeur de la propriété type d’un objet événement schema.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLEvent.SCHEMA</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>schema</codeph>. Distribué lorsque la méthode <codeph>SQLConnection.loadSchema()</codeph> se termine correctement. Une fois que l’événement <codeph>SQLEvent.SCHEMA</codeph> est distribué, la méthode <codeph>SQLConnection.getSchemaResult()</codeph> peut être utilisée pour obtenir les informations de schéma. L’événement <codeph>schema</codeph> a les propriétés suivantes :
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection qui a effectué l’opération.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
 Un objet SQLUpdateEvent est distribué par un objet SQLConnection lorsqu’un changement de données se produit sur un tableau associé à l’occurrence SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet SQLUpdateEvent est distribué par un objet SQLConnection lorsqu’un changement de données se produit sur un tableau associé à l’occurrence SQLConnection. Un changement de données peut résulter de l’exécution d’une instruction SQL <codeph>INSERT</codeph>, <codeph>UPDATE</codeph> ou <codeph>DELETE</codeph>, soit directement soit comme conséquence d’un déclencheur qui agit en connexion avec l’exécution de l’instruction.
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as"> L’exemple suivant explique l’utilisation d’une occurrence de SQLUpdateEvent en réponse à un événement <codeph>update</codeph>.
<codeblock>

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete"><apiName>delete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert"><apiName>insert</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update"><apiName>update</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
     Crée une occurrence de SQLUpdateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Le type d’événement, accessible via la propriété <codeph>type</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet événement prend part à la phase de propagation vers le haut (bubbling) du flux d’événements. La valeur par défaut est <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. La valeur par défaut est <codeph>false</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Indique le nom du tableau dont les données ont changé.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>L’identifiant unique de la ligne insérée, supprimée ou mise à jour.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Utilisé pour créer un objet SQLUpdateEvent.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Crée une occurrence de SQLUpdateEvent.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone"><apiName>clone</apiName><shortdesc>
     Crée une copie de l’objet SQLUpdateEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet SQLUpdateEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
     
     </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     Crée une copie de l’objet SQLUpdateEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE"><apiName>DELETE</apiName><shortdesc>
     La constante SQLUpdateEvent.DELETE définit la valeur de la propriété type d’un événement delete SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLUpdateEvent.DELETE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un événement <codeph>delete</codeph> SQLConnection. L’événement <codeph>delete</codeph> a les propriétés suivantes :
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>L’identifiant unique de la ligne insérée, supprimée ou mise à jour.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection sur lequel l’opération a été effectuée.</entry></row><row><entry><codeph>table</codeph></entry><entry>Le nom du tableau sur lequel le changement a eu lieu.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT"><apiName>INSERT</apiName><shortdesc>
     La constante SQLUpdateEvent.INSERT définit la valeur de la propriété type d’un événement insert SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insert</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     La constante <codeph>SQLUpdateEvent.INSERT</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un événement <codeph>insert</codeph> SQLConnection. L’événement <codeph>insert</codeph> a les propriétés suivantes :
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>L’identifiant unique de la ligne insérée, supprimée ou mise à jour.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection sur lequel l’opération a été effectuée.</entry></row><row><entry><codeph>table</codeph></entry><entry>Le nom du tableau sur lequel le changement a eu lieu.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 La constante SQLUpdateEvent.UPDATE définit la valeur de la propriété type d’un événement update SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 La constante <codeph>SQLUpdateEvent.UPDATE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un événement <codeph>update</codeph> SQLConnection.
	 
	 <p>L’événement <codeph>update</codeph> a les propriétés suivantes :</p>
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Objet qui traite activement l’objet de l’événement avec un écouteur d’événement.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>L’identifiant unique de la ligne insérée, supprimée ou mise à jour.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet SQLConnection sur lequel l’opération a été effectuée.</entry></row><row><entry><codeph>table</codeph></entry><entry>Le nom du tableau sur lequel le changement a eu lieu.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get"><apiName>rowID</apiName><shortdesc>
     L’identifiant unique de la ligne insérée, supprimée ou mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     L’identifiant unique de la ligne insérée, supprimée ou mise à jour.
	 
	 <p>Un identifiant de ligne est utilisé pour identifier une ligne de façon unique dans un tableau au sein d’une base de données. La valeur est générée fréquemment par la base de données.</p>
	 
	 <p>L’identifiant de ligne pour une seule exécution de l’instruction SQL <codeph>INSERT</codeph> peut être obtenu via la propriété <codeph>lastInsertRowID</codeph> de l’objet SQLResult renvoyé par la méthode <codeph>getResult()</codeph> de l’objet SQLStatement (lorsqu’il est appelé une fois que SQLStatement distribue son événement <codeph>result</codeph>).</p>
	 
	 <p>Pour plus d’informations sur les clés primaires et les identifiants de ligne générés, reportez-vous aux sections « <xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref> » et « <xref href="../../localDatabaseSQLSupport.html#expressions">Expressions</xref> » à l’annexe « <xref href="../../localDatabaseSQLSupport.html">Prise en charge SQL dans les bases de données locales</xref> ».</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get"><apiName>table</apiName><shortdesc>
     Le nom du tableau dont le changement de données a provoqué la distribution de l’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Le nom du tableau dont le changement de données a provoqué la distribution de l’événement.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
	AIR distribue un objet DRMErrorEvent lorsqu’un objet NetStream rencontre une erreur DRM lorsqu’il tente de lire un fichier chiffré DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event pour des objets activés DRM.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	AIR distribue un objet DRMErrorEvent lorsqu’un objet NetStream rencontre une erreur DRM lorsqu’il tente de lire un fichier chiffré DRM. Par exemple, un objet DRMErrorEvent est distribué lorsque le fournisseur de contenu ne prend pas en charge l’application d’affichage, ou en cas d’échec de l’autorisation de l’utilisateur, probablement parce que l’utilisateur n’a pas acheté le contenu.
	<p>
	En cas d’informations utilisateur non valides, l’objet DRMAuthenticateEvent gère l’erreur par des distributions répétées jusqu’à ce que l’utilisateur entre des informations d’identification valides, ou l’application AIR refuse toute autre tentative. L’application doit écouter tout autre événement d’erreur DRM de façon à détecter, identifier et gérer les erreurs DRM.
	</p>
	<p>
	Cette classe fournit des propriétés contenant l’objet qui renvoie l’exception, le code d’erreur et, le cas échéant, un code de sous-erreur et le message textuel contenant des informations relatives à l’erreur.
	</p> 
	
	<adobetable class="innertable">
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
 	  
 	  
 	  
 	  
 	  
	<tgroup cols="4"><thead><row><entry>Code d’erreur</entry><entry>Code de sous-erreur</entry><entry>Détails de l’erreur</entry><entry>Description</entry></row></thead><tbody><row>
	    <entry><codeph>3300</codeph></entry>
	    <entry><codeph><i>Code d’erreur Adobe Policy Server</i></codeph></entry>
	    <entry>sans objet</entry>
	    <entry>L’application a détecté un bon non valide associé au contenu.</entry>
	  </row><row>
	    <entry><codeph>3301</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Echec de l’authentification utilisateur.</entry>
	  </row><row>
	    <entry><codeph>3302</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Secure Sockets Layer (SSL) n’est pas pris en charge par le serveur FMRMS (Flash Media Rights Management Server : serveur de gestion des droits de Flash Media).</entry>
	  </row><row>
	    <entry><codeph>3303</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Le contenu a expiré et n’est plus disponible pour l’affichage.</entry>
	  </row><row>
	    <entry><codeph>3304</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Echec de l’autorisation utilisateur. Ceci peut avoir lieu même si l’utilisateur est authentifié, par exemple, si l’utilisateur n’a pas acheté les droits pour afficher le contenu.</entry>
	  </row><row>
	    <entry><codeph>3305</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>URL du serveur</i></codeph></entry>
	    <entry>Connexion au serveur impossible.</entry>
	  </row><row>
	    <entry><codeph>3306</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Une mise à jour du client est nécessaire ; Flash Media Rights Management Server requiert un nouveau moteur client de gestion des droits numériques.</entry>
	  </row><row>
	    <entry><codeph>3307</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Echec de la gestion des droits numériques interne générique.</entry>
	  </row><row>
	    <entry><codeph>3308</codeph></entry>
	    <entry><codeph><i>Code d’erreur de déchiffrement détaillé</i></codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Une clé de licence incorrecte.</entry>
	  </row><row>
	    <entry><codeph>3309</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Le contenu vidéo est corrompu.</entry>
	  </row><row>
	    <entry><codeph>3310</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>publisherID</i>:<i>applicationID</i></codeph></entry>
	    <entry>L’ID de l’application d’affichage ne correspond pas à un ID valide pris en charge par le publicateur de contenu. Le fournisseur de contenu ne prend pas en charge l’application.</entry>
	  </row><row>
	    <entry><codeph>3311</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph>Min=x:max=y</codeph></entry>
	    <entry>La version de l’application ne correspond pas à celle spécifiée dans le bon.</entry>
	  </row><row>
	    <entry><codeph>3312</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Echec de la vérification du bon associé au contenu chiffré, indiquant que le contenu est peut-être corrompu.</entry>
	  </row><row>
	    <entry><codeph>3313</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Le bon associé au contenu chiffré n’a pas pu être enregistré dans Microsafe.</entry>
	  </row><row>
	    <entry><codeph>3314</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Echec de la vérification de l’intégrité de l’en-tête FLV, indiquant que le contenu est peut-être corrompu.</entry>
	  </row><row>
	    <entry><codeph>3315</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>sans objet</entry>
	    <entry>Lecture à distance du contenu protégé DRM interdite.</entry>
	  </row><row>
 	    <entry><codeph>3316</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>sans objet</entry>
 	    <entry>Module AdobeCP manquant.</entry>
 	  </row><row>
 	    <entry><codeph>3317</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>sans objet</entry>
 	    <entry>Echec du chargement du module AdobeCP.</entry>
 	  </row><row>
 	    <entry><codeph>3318</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>sans objet</entry>
 	    <entry>Version AdobeCP incompatible détectée.</entry>
 	  </row><row>
 	    <entry><codeph>3319</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>sans objet</entry>
 	    <entry>Point d’entrée de l’API d’AdobeCP manquant.</entry>
 	  </row><row>
 	    <entry><codeph>3320</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>sans objet</entry>
 	    <entry>Le module AdobeCP n’est pas authentifié. </entry>
 	  </row></tbody></tgroup></adobetable>
 	
 	</apiDesc><example conref="examples\DRMErrorEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR"><linktext>DRMErrorEvent.DRM_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError"><apiName>drmError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
 	    Crée un objet Event contenant des informations spécifiques sur les événements d’erreur DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement DRMAuthenticate : <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
		</apiDesc></apiParam><apiParam><apiItemName>inErrorDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Le cas échéant, les détails syntaxiques spécifiques de l’erreur.
  		</apiDesc></apiParam><apiParam><apiItemName>inErrorCode</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Le code d’erreur principal.
		</apiDesc></apiParam><apiParam><apiItemName>insubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>L’ID d’erreur mineure.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Crée un objet Event contenant des informations spécifiques sur les événements d’erreur DRM. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone"><apiName>clone</apiName><shortdesc>
		Crée une copie de l’objet DRMErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet DRMErrorEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Crée une copie de l’objet DRMErrorEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString"><apiName>toString</apiName><shortdesc>
		Renvoie une chaîne répertoriant toutes les propriétés de l’objet DRMErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet DRMErrorEvent.
  		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Renvoie une chaîne répertoriant toutes les propriétés de l’objet DRMErrorEvent. La chaîne est écrite au format suivant : 
     	<p><codeph>[DRMErrorEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> eventPhase=<i>valeur</i> errroID=<i>valeur</i> subErrorID=<i>valeur</i> text=<i>valeur</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR"><apiName>DRM_ERROR</apiName><shortdesc>
		La constante DRMErrorEvent.DRM_ERROR définit la valeur de la propriété type d’un objet événement drmError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		La constante <codeph>DRMErrorEvent.DRM_ERROR</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>drmError</codeph>. 
		
		<p>Les propriétés de cet événement sont les suivantes :</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>Un code d’erreur numérique correspondant au problème.</entry></row><row><entry><codeph>subErrorID</codeph></entry><entry>Un code d’erreur qui indique des informations détaillées supplémentaires sur le problème sous-jacent.</entry></row><row><entry><codeph>target</codeph></entry><entry>L’objet NetStream.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
		Un ID d’erreur qui indique des informations détaillées supplémentaires sur le problème sous-jacent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		Un ID d’erreur qui indique des informations détaillées supplémentaires sur le problème sous-jacent.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 DRMContentData pour le fichier multimédia.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 DRMContentData pour le fichier multimédia.
		 
		 <p>Vous pouvez utiliser l’objet référencé par la propriété <codeph>contentData</codeph> pour récupérer le voucher DRM associé à partir de la mémoire cache du voucher DRMManager. Les propriétés du voucher décrivent la licence proposée à l’utilisateur et peuvent expliquer les raisons pour lesquelles il est impossible d’afficher le contenu protégé par DRM.</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
La classe EventDispatcher est la classe de base pour toutes les classes runtime qui distribuent des événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe EventDispatcher est la classe de base pour toutes les classes <ph platform="javascript">runtime </ph>qui distribuent des événements. <ph platform="actionscript">La classe EventDispatcher implémente l’interface IEventDispatcher et est la classe de base de la classe DisplayObject. La classe EventDispatcher permet à tout objet de la liste d’affichage de servir de cible d’événement et, en tant que tel, d’utiliser les méthodes de l’interface IeventDispatcher.</ph>

<p platform="actionscript">Les cibles d’événement constituent une part importante du modèle d’événement de Flash<sup>®</sup> Player et d’Adobe<sup>®</sup> AIR<sup>®</sup>. La cible de l’événement détermine le flux d’événements dans la hiérarchie de la liste d’affichage. Lorsqu’un événement, tel qu’un clic de souris ou une pression sur une touche, se produit, Flash Player ou l’application AIR distribue un objet événement dans le flux d’événements, à partir de la racine de la liste d’affichage. Cet objet descend dans la liste jusqu’à ce qu’il atteigne la cible de l’événement et commence alors à remonter la liste d’affichage. Cet aller-retour jusqu’à la cible de l’événement est divisé de manière conceptuelle en trois phases : la phase de capture correspond au trajet de la racine jusqu’au dernier nœud précédant le nœud de la cible de l’événement, la phase cible concerne uniquement le nœud de la cible de l’événement, tandis que la phase de propagation vers le haut (bubbling) comprend tous les nœuds rencontrés sur le trajet de retour à la racine de la liste d’affichage.</p>

<p platform="actionscript">En règle générale, pour qu’une classe définie par l’utilisateur acquière des fonctions de distribution, le plus simple consiste à étendre EventDispatcher. Si cela est impossible (autrement dit, si cette classe étend déjà une autre classe), vous pouvez implémenter l’interface IEventDispatcher, créer un membre EventDispatcher et écrire des raccrochements simples pour acheminer les appels vers la classe EventDispatcher regroupée.</p>

<p platform="javascript">Vous pouvez enregistrer des fonctions pour gérer des événements runtime en appelant la méthode <codeph>addEventListener()</codeph> de l’objet distribuant l’événement.</p>

</apiDesc><example conref="examples\EventDispatcherExample.as"> L’exemple suivant utilise les classes <codeph>EventDispatcherExample</codeph> et <codeph>CustomDispatcher</codeph>, une sous-classe de <codeph>EventDispatcher</codeph>, pour décrire la création et la distribution d’un événement personnalisé. L’exemple exécute les tâches suivantes :
 <ol>
     <li>Le constructeur de <codeph>EventDispatcherExample</codeph> crée une variable locale <codeph>dispatcher</codeph> et l’affecte à une nouvelle occurrence de CustomDispatcher.</li>
     <li>A l’intérieur de <codeph>CustomDispatcher</codeph>, une chaîne est définie de sorte que l’événement présente le nom <codeph>action</codeph> et la méthode <codeph>doAction()</codeph> est déclarée. Lorsqu’elle est appelée, cette méthode crée l’événement <codeph>action</codeph> et le distribue à l’aide de <codeph>EventDispatcher.dispatchEvent()</codeph>.</li>
     <li>La propriété <codeph>dispatcher</codeph> est alors utilisée pour ajouter l’écouteur d’événements <codeph>action</codeph> et la méthode d’abonné associée <codeph>actionHandler()</codeph>, qui imprime simplement les informations relatives à l’événement lorsque qu’il est distribué.</li>
     <li>La méthode <codeph>doAction()</codeph> est invoquée et distribue l’événement <codeph>action</codeph>.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate"><apiName>deactivate</apiName><shortdesc>
 [Evénement de diffusion] Distribué lorsque l’application Flash Player ou AIR perd le focus du système d’exploitation et devient inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [Evénement de diffusion] Distribué lorsque l’application <ph platform="actionscript">Flash Player ou </ph>AIR perd le focus du système d’exploitation et devient inactive. Cet événement est un événement de diffusion, c’est-à-dire qu’il est distribué par tous les objets EventDispatcher pour lesquels un écouteur est enregistré pour cet événement. <ph platform="actionscript">Pour plus d’informations sur les événements de diffusion, voir la classe DisplayObject.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate"><apiName>activate</apiName><shortdesc>
 [Evénement de diffusion] Distribué lorsque l’application Flash Player obtient le focus du système d’exploitation et devient active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [Evénement de diffusion] Distribué lorsque l’application <ph platform="actionscript">Flash Player ou </ph>AIR obtient le focus du système d’exploitation et devient active. Cet événement est un événement de diffusion, c’est-à-dire qu’il est distribué par tous les objets EventDispatcher pour lesquels un écouteur est enregistré pour cet événement. <ph platform="actionscript">Pour plus d’informations sur les événements de diffusion, voir la classe DisplayObject.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	Regroupe une occurrence de la classe EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.events:IEventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet cible des événements distribués à l’objet EventDispatcher. <ph platform="actionscript">Ce paramètre s’utilise lorsque l’occurrence de EventDispatcher est regroupée par une classe qui implémente IEventDispatcher. Il permet à l’objet conteneur d’être la cible des événements. Ne vous servez pas de ce paramètre dans des cas simples pour lesquels une classe étend EventDispatcher.</ph> <ph platform="javascript">Les objets cible sont appropriés uniquement dans des objets d’affichage du contenu SWF, qui utilisent l’architecture de la liste d’affichage ActionScript 3.0.</ph>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Regroupe une occurrence de la classe EventDispatcher.
	
    <p>La classe EventDispatcher est généralement utilisée comme classe de base<ph platform="javascript"> dans le code ActionScript 3.0 utilisé dans le contenu SWF</ph>, ce qui signifie que<ph platform="actionscript"> la plupart</ph> des développeurs<ph platform="javascript"> JavaScript</ph> ne doivent pas utiliser cette fonction constructeur. <ph platform="actionscript">Toutefois, les développeurs expérimentés qui implémentent l’interface IEventDispatcher doivent l’utiliser. S’il vous est impossible d’étendre la classe EventDispatcher et que vous devez implémenter l’interface IEventDispatcher à la place, utilisez cette fonction constructeur pour regrouper une occurrence de la classe EventDispatcher.</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Enregistre un objet écouteur d’événement auprès d’un objet EventDispatcher afin que l’écouteur soit averti d’un événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Le paramètre <codeph>listener</codeph> spécifié n’est pas une fonction.
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Fonction d’écouteur qui traite l’événement. Cette fonction doit accepter un objet Event comme paramètre unique et ne rien renvoyer<ph platform="actionscript">, comme illustré ci-dessous :</ph><ph platform="javascript">.</ph>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>Le nom de cette fonction n’a aucune importance.</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">Ce paramètre s’applique aux objets d’affichage dans l’architecture de la liste d’affichage ActionScript 3.0, utilisés par le contenu SWF.</ph> <ph platform="actionscript">Détermine si l’écouteur est actif pendant la phase de capture ou pendant les phases cible et de propagation vers le haut. Si la propriété <codeph>useCapture</codeph> est définie sur <codeph>true</codeph>, l’écouteur traite l’événement uniquement pendant la phase de capture et non pendant les phases cible et de propagation vers le haut. Si la propriété <codeph>useCapture</codeph> est définie sur <codeph>false</codeph>, l’écouteur traite l’événement uniquement pendant les phases cible et de propagation vers le haut. Pour écouter l’événement dans les trois phases, appelez <codeph>addEventListener</codeph> à deux reprises, une première fois en définissant <codeph>useCapture</codeph> sur <codeph>true</codeph>, puis une nouvelle fois en définissant <codeph>useCapture</codeph> sur <codeph>false</codeph>. </ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Niveau de priorité de l’écouteur d’événement. La priorité est indiquée par un entier signé de 32 bits. Plus le nombre est élevé, plus la priorité est élevée. Tous les écouteurs dont la priorité correspond à <i>n</i> sont traités avant les écouteurs dotés de la priorité <i>n</i> -1. Les écouteurs dont la priorité est identique sont traités dans l’ordre où ils ont été ajoutés. La priorité par défaut est 0.
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si la référence à l’écouteur est forte ou faible. Une référence forte (valeur par défaut) empêche le nettoyage de votre écouteur, Cela n’est pas le cas avec une référence faible. <p>Les fonctions de membres de niveau classe n’étant pas soumises au nettoyage, vous pouvez définir <codeph>useWeakReference</codeph> sur <codeph>true</codeph> pour ces fonctions. Si vous définissez <codeph>useWeakReference</codeph> sur <codeph>true</codeph> pour un écouteur correspondant à une fonction imbriquée interne, la fonction sera nettoyée et ne sera donc pas permanente. Si vous créez des références à la fonction interne (enregistrée dans une autre variable), celle-ci n’est pas nettoyée et reste permanente.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Enregistre un objet écouteur d’événement auprès d’un objet EventDispatcher afin que l’écouteur soit averti d’un événement. <ph platform="actionscript">Vous pouvez enregistrer les écouteurs d’événement dans tous les nœuds de la liste d’affichage pour un type spécifique d’événement, de phase et de priorité.</ph>
	
	<p platform="javascript">Le code JavaScript dans le moteur d’exécution AIR utilise cette méthode pour enregistrer des écouteurs d’événements définis par les API AIR. Pour d’autres événements JavaScript (tels que l’événement <codeph>onload</codeph> de l’objet <codeph>body</codeph> DOM), vous pouvez utiliser des techniques de gestion d’événements standard, comme vous le feriez pour le contenu exécuté dans le navigateur.</p>
	
	<p>Après l’enregistrement d’un écouteur d’événement, vous ne pouvez plus modifier sa priorité par d’autres appels de <codeph>addEventListener()</codeph>. Pour modifier la priorité d’un écouteur, vous devez d’abord appeler <codeph>removeListener()</codeph>. Vous pouvez ensuite réenregistrer l’écouteur avec le nouveau niveau de priorité. </p>
	
	<p>N’oubliez pas qu’une fois l’écouteur enregistré, tous les prochains appels de <codeph>addEventListener()</codeph> avec une valeur <codeph>type</codeph> ou <codeph>useCapture</codeph> différente entraîneront la création d’un autre enregistrement d’écouteur. <ph platform="actionscript">Si, par exemple, vous enregistrez un écouteur dans lequel la propriété <codeph>useCapture</codeph> est définie sur <codeph>true</codeph>, il écoute uniquement pendant la phase de capture. Si vous appelez <codeph>addEventListener()</codeph> à l’aide du même objet écouteur, mais en définissant <codeph>useCapture</codeph> sur <codeph>false</codeph>, vous obtenez deux écouteurs distincts : l’un qui écoute pendant la phase de capture et l’autre qui écoute pendant les phases cible et de propagation vers le haut (bubbling).</ph>
	</p>
	
	<p platform="actionscript">Il est impossible d’enregistrer un écouteur d’événement uniquement pour la phase cible ou la phase de propagation vers le haut. Ces deux phases sont associées pendant l’enregistrement car la propagation vers le haut s’applique uniquement aux ancêtres du nœud cible.</p>
	
	<p>Si vous n’avez plus besoin d’un écouteur d’événements, supprimez-le en appelant <codeph>removeEventListener()</codeph>, afin d’éviter tout problème de mémoire. Les écouteurs d’événement ne sont pas automatiquement supprimés de la mémoire, car le nettoyeur de mémoire ne supprime pas l’écouteur tant que l’objet de distribution existe (à moins que le paramètre <codeph>useWeakReference</codeph> ne soit défini sur <codeph>true</codeph>).</p>
		
	<p>Lors de la copie d’une occurrence d’EventDispatcher, les écouteurs d’événement qui lui sont associés ne sont pas pris en compte (si le nouveau nœud nécessite un écouteur d’événement, vous devez associer celui-ci après la création du nœud). Toutefois, si vous déplacez une occurrence d’EventDispatcher, les écouteurs d’événement qui lui sont associés la suivent.</p>
	
	
	<p platform="actionscript">Si un écouteur d’événement est enregistré sur un nœud alors qu’un événement est en cours de traitement sur ce nœud, l’écouteur n’est pas déclenché pendant la phase actuelle, mais il peut l’être pendant une phase ultérieure du flux d’événements, telle que la phase de propagation vers le haut (bubbling).</p>
	
	<p platform="actionscript">Si un écouteur d’événement est supprimé d’un nœud sur lequel un événement est en cours de traitement, il est cependant déclenché par les actions en cours. Une fois supprimé, l’écouteur d’événement n’est plus jamais appelé (à moins d’être réenregistré à des fins de traitement ultérieur). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Distribue un événement dans le flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>La limite de récursivité relative à la distribution d’événements est atteinte.
	</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>Une valeur <codeph>true</codeph> si l’événement a bien été distribué. La valeur <codeph>false</codeph> indique un échec ou que <codeph>preventDefault()</codeph> a été appelé sur l’événement.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>Objet Event qui est distribué dans le flux d’événements. Si l’événement est redistribué, un clone est automatiquement créé. Après la distribution d’un événement, il est impossible de modifier sa propriété <codeph>target</codeph>. Pour que la redistribution fonctionne, vous devez donc créer une copie de l’événement.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Distribue un événement dans le flux d’événements. La cible de l’événement est l’objet EventDispatcher sur lequel la méthode <codeph>dispatchEvent()</codeph> est appelée.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Vérifie si des écouteurs sont enregistrés auprès de l’objet EventDispatcher pour un type spécifique d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur <codeph>true</codeph> est renvoyée si un écouteur du type spécifié est enregistré. La valeur <codeph>false</codeph> est renvoyée dans tous les autres cas.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Vérifie si des écouteurs sont enregistrés auprès de l’objet EventDispatcher pour un type spécifique d’événement. Vous pouvez ainsi déterminer précisément où un objet EventDispatcher a modifié la gestion d’un type d’événement dans la hiérarchie du flux d’événements. Pour savoir si un type d’événement spécifique déclenche réellement un écouteur d’événements, utilisez <codeph>willTrigger()</codeph>.
	
	<p>La différence entre les méthodes <codeph>hasEventListener()</codeph> et <codeph>willTrigger()</codeph> est la suivante : <codeph>hasEventListener()</codeph> examine uniquement l’objet auquel elle appartient, tandis que <codeph>willTrigger()</codeph> recherche dans la totalité du flux d’événements l’événement spécifié par le paramètre <codeph>type</codeph>. <ph platform="javascript">Le flux d’événements s’applique à la liste d’affichage ActionScript 3.0, utilisée dans le contenu SWF.</ph>
	</p>
	
	<p>Lorsque <codeph>hasEventListener()</codeph> est appelé à partir d’un objet LoaderInfo, seuls les écouteurs auxquels l’appelant a accès sont pris en compte.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#EventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Supprime un écouteur de l’objet EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Objet écouteur à supprimer.
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">Ce paramètre s’applique aux objets d’affichage dans l’architecture de la liste d’affichage ActionScript 3.0, utilisés par le contenu SWF.</ph><ph platform="actionscript">Indique si l’écouteur a été enregistré pendant la phase de capture ou pendant les phases cible et de propagation vers le haut (bubbling). Si l’écouteur a été enregistré pendant la phase de capture et pendant les phases cible et de propagation vers le haut (bubbling), il est nécessaire d’appeler <codeph>removeEventListener()</codeph> à deux reprises pour le supprimer. Appelez <codeph>useCapture()</codeph> une première fois en la définissant sur <codeph>true</codeph>, puis une seconde fois <codeph>useCapture()</codeph> en la définissant sur <codeph>false</codeph>.</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Supprime un écouteur de l’objet EventDispatcher. Si aucun écouteur correspondant n’est enregistré auprès de l’objet EventDispatcher, l’appel de cette méthode n’a aucun effet.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Vérifie si un écouteur d’événement est enregistré auprès de cet objet EventDispatcher ou de ses ancêtres pour le type d’événement spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si un écouteur du type spécifié est enregistré, <codeph>false</codeph> dans tous les autres cas.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type d’événement.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Vérifie si un écouteur d’événement est enregistré auprès de cet objet EventDispatcher ou de ses ancêtres pour le type d’événement spécifié. Cette méthode renvoie <codeph>true</codeph> si un écouteur d’événement est déclenché pendant toute phase du flux d’événements lorsqu’un événement du type spécifié est distribué à cet objet EventDispatcher ou à l’un de ses descendants.
	
	<p>La différence entre les méthodes <codeph>hasEventListener()</codeph> et <codeph>willTrigger()</codeph> est la suivante : <codeph>hasEventListener()</codeph> examine uniquement l’objet auquel elle appartient, tandis que <codeph>willTrigger()</codeph> recherche dans la totalité du flux d’événements celui qui est spécifié par le paramètre <codeph>type. </codeph> <ph platform="javascript">Le flux d’événements s’applique à la liste d’affichage ActionScript 3.0, utilisée dans le contenu SWF.</ph></p>
	
	<p>Lorsque <codeph>willTrigger()</codeph> est appelée à partir d’un objet LoaderInfo, seuls les écouteurs auxquels l’appelant a accès sont pris en compte.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:EventPhase"><apiName>EventPhase</apiName><shortdesc>
 La classe EventPhase fournit des valeurs à la propriété eventPhase de la classe Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe EventPhase fournit des valeurs à la propriété <codeph>eventPhase</codeph> de la classe Event.
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#Event"><linktext>Classe Event</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>Classe EventDispatcher</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
	Phase cible, autrement dit, deuxième phase du flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Phase cible, autrement dit, deuxième phase du flux d’événements.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
	Phase de propagation vers le haut (bubbling), autrement dit, troisième phase du flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Phase de propagation vers le haut (bubbling), autrement dit, troisième phase du flux d’événements.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
	Phase de capture, autrement dit, première phase du flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Phase de capture, autrement dit, première phase du flux d’événements.
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
 Un objet distribue un objet FocusEvent lorsque l’utilisateur déplace le focus sur un autre objet dans la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements Focus.
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet distribue un objet FocusEvent lorsque l’utilisateur déplace le focus sur un autre objet dans la liste d’affichage. Il existe quatre types d’événements Focus :
 <ul>
     <li><codeph>FocusEvent.FOCUS_IN</codeph></li>
     <li><codeph>FocusEvent.FOCUS_OUT</codeph></li>
     <li><codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph></li>
     <li><codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as"> L’exemple suivant utilise les classes <codeph>FocusEventExample</codeph> et <codeph>CustomSprite</codeph> pour montrer comment le focus peut être combiné avec les éléments dessinés sur la scène pour capturer des événements et des informations d’impression. Cet exemple exécute les tâches suivantes :
 <ol>
     <li>il déclare les propriétés <codeph>child</codeph> (de type Sprite) et <codeph>childCount</codeph> (de type uint).</li>
    <li>Une boucle <codeph>for</codeph> crée cinq carrés bleu clair aux coordonnées (0,0). Elle commence par affecter <codeph>child</codeph> à une nouvelle occurrence de CustomSprite. Chaque fois qu’un objet CustomSprite est créé, il arrive ce qui suit :
     <ul>
             <li>La propriété <codeph>size</codeph> de type uint est définie sur 50 pixels et <codeph>bgColor</codeph> est définie sur la couleur bleu clair. </li>
             <li>Les propriétés <codeph>buttonMode</codeph> et <codeph>useHandCursor</codeph> de la classe Sprite sont définies sur <codeph>true</codeph> dans le constructeur.</li>
             <li>Un écouteur d’événements de type <codeph>click</codeph> est instancié, avec l’abonné associé <codeph>clickHandler()</codeph>. La méthode d’abonné crée une variable locale <codeph>target</codeph> de type Sprite et l’affecte à chaque clic de l’utilisateur sur une zone quelconque. Le focus de la scène est ensuite attribué à <codeph>target</codeph>.</li>
             <li>La méthode <codeph>draw()</codeph> est appelée et crée un carré de 50x50 pixels via un appel aux méthodes <codeph>beginFill()</codeph>, <codeph>drawRect()</codeph> et <codeph>endFill()</codeph> de la classe Graphics et aux propriétés de l’occurrence.</li>
      </ul></li>
         <li>Dans la boucle for, la méthode <codeph>configureListeners()</codeph> est appelée et instancie trois écouteurs/abonnés d’événements :
         <ul>
             <li><codeph>focusIn</codeph> / <codeph>focusInHandler()</codeph> est distribué après l’événement <codeph>click</codeph> chaque fois que l’utilisateur clique sur un objet de liste d’affichage (champ).</li>
             <li><codeph>focusOut</codeph> / <codeph>focusOutHandler()</codeph> est distribué lorsque l’utilisateur clique sur un autre champ ou que le focus quitte la scène (par exemple, en cliquant à l’extérieur de Flash Player).</li>
             <li><codeph>keyFocusChange</codeph> / <codeph>keyFocusChangeHandler()</codeph> est distribué si l’utilisateur utilise la touche Tab ou les touches de direction gauche ou droite pour sélectionner un objet de liste d’affichage. La méthode <codeph>keyFocusChangeHandler()</codeph> piège les touches de direction droite et gauche et appelle la méthode <codeph>preventDefault()</codeph> pour les désactiver.</li>
             
      </ul></li>
     <li>Dans la boucle <codeph>for</codeph>, chaque carré est ajouté dans la liste d’affichage et affiché (tous dans la même zone) par le biais de <codeph>addChild()</codeph>.</li>
     <li>Le constructeur appelle ensuite <codeph>refreshLayout()</codeph>, qui distribue les carrés orange en haut de l’écran (y = 0) en séparant chaque carré par 5 pixels.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn"><apiName>focusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut"><apiName>focusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange"><apiName>keyFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange"><apiName>mouseFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
    Crée un objet Event à l’aide d’informations spécifiques relatives aux événements Focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Valeurs possibles : <codeph>FocusEvent.FOCUS_IN</codeph>, <codeph>FocusEvent.FOCUS_OUT</codeph>, <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> et <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph>.
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Indique l’occurrence complémentaire de InteractiveObject affectée par le déplacement du focus. Lorsqu’un événement <codeph>focusIn</codeph> se produit, par exemple, <codeph>relatedObject</codeph> représente l’occurrence d’InteractiveObject qui a perdu le focus.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si la touche de modification Maj est activée.
	</apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Indique le code de la touche utilisée pour déclencher un événement <codeph>keyFocusChange</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>none</apiData><apiDesc>Indique à partir de quelle direction l’objet interactif cible est activé. Définissez sur <codeph>FocusDirection.NONE</codeph> (la valeur par défaut) pour tous les événements autres que <codeph>focusIn</codeph>.
    
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets FocusEvent.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Crée un objet Event à l’aide d’informations spécifiques relatives aux événements Focus. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
    
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone"><apiName>clone</apiName><shortdesc>
	Crée une copie de l’objet FocusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet FocusEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Crée une copie de l’objet FocusEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet FocusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet FocusEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet FocusEvent. La chaîne est écrite au format suivant :
	<p><codeph>[FocusEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> relatedObject=<i>valeur</i> shiftKey=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN"><apiName>FOCUS_IN</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement focusIn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusIn</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>focusIn</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0 ; s’applique uniquement aux événements <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Occurrence complémentaire d’InteractiveObject affectée par le déplacement du focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph> ; s’applique uniquement aux événements <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject qui vient de recevoir le focus. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.
	</entry></row><row><entry><codeph>direction</codeph></entry><entry>La direction à partir de laquelle le focus a été attribué. Cette propriété signale la valeur du paramètre <codeph>direction</codeph> de la méthode <codeph>assignFocus()</codeph> de la scène. Si le focus a changé par d’autres moyens, la valeur est toujours <codeph>FocusDirection.NONE</codeph>. S’applique uniquement aux événements <codeph>focusIn</codeph>. Pour tous les autres événements focus, la valeur est <codeph>FocusDirection.NONE</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT"><apiName>FOCUS_OUT</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement focusOut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>focusOut</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0 ; s’applique uniquement aux événements <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Occurrence complémentaire d’InteractiveObject affectée par le déplacement du focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph> ; s’applique uniquement aux événements <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject qui vient de perdre le focus. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE"><apiName>KEY_FOCUS_CHANGE</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement keyFocusChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>keyFocusChange</codeph>. 
	
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; appelez la méthode <codeph>preventDefault()</codeph> pour annuler le comportement par défaut.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Valeur de code correspondant à la touche utilisée pour déclencher un événement <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Occurrence complémentaire d’InteractiveObject affectée par le déplacement du focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> si le modificateur de la touche Maj est activé ; <codeph>false</codeph> dans tous les autres cas.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject qui possède actuellement le focus. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE"><apiName>MOUSE_FOCUS_CHANGE</apiName><shortdesc>
	Définit la valeur de la propriété type d’un objet événement mouseFocusChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>mouseFocusChange</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> ; appelez la méthode <codeph>preventDefault()</codeph> pour annuler le comportement par défaut.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0 ; s’applique uniquement aux événements <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Occurrence complémentaire d’InteractiveObject affectée par le déplacement du focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph> ; s’applique uniquement aux événements <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Occurrence d’InteractiveObject qui possède actuellement le focus. La propriété <codeph>target</codeph> ne correspond pas toujours à l’objet de la liste d’affichage qui est associé à l’écouteur d’événement. Utilisez la propriété <codeph>currentTarget</codeph> pour accéder à l’objet de la liste d’affichage qui traite actuellement l’événement.
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get"><apiName>direction</apiName><shortdesc>
	Spécifie la direction du focus pour un événement focusIn.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Spécifie la direction du focus pour un événement <codeph>focusIn</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()"><linktext>flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 Si la valeur est true, la propriété relatedObject est définie sur null pour des raisons liées aux sandbox de sécurité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Si la valeur est <codeph>true</codeph>, la propriété <codeph>relatedObject</codeph> est définie sur <codeph>null</codeph> pour des raisons liées aux sandbox de sécurité. Si la valeur nominale de <codeph>relatedObject</codeph> est une référence à un DisplayObject se trouvant dans un autre sandbox, <codeph>relatedObject</codeph> est défini sur <codeph>null</codeph>, à moins qu’il existe une autorisation dans les deux sens dans les limites de ce sandbox. L’autorisation est établie en appelant la méthode <codeph>Security.allowDomain()</codeph> à partir d’un fichier SWF ou en fournissant un fichier de régulation depuis le serveur d’un fichier image, puis en définissant la propriété <codeph>LoaderContext.checkPolicyFile</codeph> lors du chargement de l’image.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/relatedObject"><linktext>FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	Valeur de code correspondant à la touche utilisée pour déclencher un événement keyFocusChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Valeur de code correspondant à la touche utilisée pour déclencher un événement <codeph>keyFocusChange</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	Référence à l’occurrence complémentaire d’InteractiveObject affectée par le déplacement du focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Référence à l’occurrence complémentaire d’InteractiveObject affectée par le déplacement du focus. Lorsqu’un événement <codeph>focusOut</codeph> se produit, par exemple, <codeph>relatedObject</codeph> représente l’occurrence d’InteractiveObject qui a obtenu le focus.
	<p>La valeur de cette propriété peut être <codeph>null</codeph> dans deux cas : s’il n’existe aucun objet associé ou s’il existe un objet associé se trouvant dans un sandbox de sécurité auquel vous n’avez pas accès. Pour savoir dans quel cas vous vous trouvez, utilisez la propriété <codeph>isRelatedObjectInaccessible()</codeph>.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible"><linktext>FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Indique si la touche de modification Maj est activée, auquel cas la valeur est true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si la touche de modification Maj est activée, auquel cas la valeur est <codeph>true</codeph>. Sinon, elle correspond à <codeph>false</codeph>. Cette propriété n’est utilisée que si l’événement FocusEvent est de type <codeph>keyFocusChange</codeph>.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 L’objet NativeApplication d’une application AIR distribue un événement browserInvoke lorsque l’application est invoquée à la suite de l’utilisation de la fonction d’invocation du navigateur par un fichier SWF dans le navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 L’objet NativeApplication d’une application AIR distribue un événement <codeph>browserInvoke</codeph> lorsque l’application est invoquée à la suite de l’utilisation de la fonction d’invocation du navigateur par un fichier SWF dans le navigateur. L’objet NativeApplication distribue également un événement <codeph>browserInvoke</codeph> lorsqu’un utilisateur instancie la fonction d’installation continue dans le navigateur et que le fichier SWF dans le navigateur transmet un tableau au paramètre <codeph>arguments</codeph> de la méthode <codeph>launchApplication()</codeph> du fichier air.swf (pour plus de détails, voir « Distribution, installation et exécution des applications AIR » dans le guide du développeur AIR).
	 
	 <p>L’invocation d’un navigateur n’est autorisée que si l’application spécifie les éléments suivants dans son fichier descripteur :</p>
	 
	 <codeblock>&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 <p>Si l’application n’est pas en cours d’exécution, l’objet NativeApplication distribue à la fois un événement InvokeEvent et un événement <codeph>browserInvoke</codeph> lors du démarrage depuis le navigateur. Autrement, si l’application <i>est</i> déjà en cours d’exécution, l’objet NativeApplication distribue uniquement un événement <codeph>browserInvoke</codeph> lors du démarrage depuis le navigateur. </p>
	 
	 <p> Si l’application est démarrée à la suite d’une installation continue depuis le navigateur (l’utilisateur ayant choisi de démarrer après l’installation), l’objet NativeApplication distribue un événement BrowserInvoke uniquement si des arguments ont été transmis (via le fichier SWF dans le navigateur transmettant un tableau au paramètre <codeph>arguments</codeph> de la méthode <codeph>installApplication()</codeph> du fichier air.swf). Pour plus de détails, voir « Distribution, installation et exécution des applications AIR » dans le guide du développeur AIR.</p>
	 
	 <p>A l’instar des événements <codeph>InvokeEvent</codeph>, les événements <codeph>browserInvokeEvent</codeph> sont distribués par l’objet NativeApplication (<codeph>NativeApplication.nativeApplication</codeph>). Pour recevoir des événements <codeph>browserInvoke</codeph>, appelez la méthode <codeph>addEventListener()</codeph> de l’objet NativeApplication. Lorsqu’un écouteur d’événement s’enregistre pour un événement <codeph>browserInvoke</codeph>, il reçoit également tous les événements <codeph>browserInvoke</codeph> ayant eu lieu avant l’enregistrement. Ceux-ci sont distribués après le renvoi de l’appel à <codeph>addEventListener()</codeph>, mais pas forcément avant d’autres événements <codeph>browserInvoke</codeph> qui pourraient être reçus après l’enregistrement. Ceci vous permet de gérer des événements <codeph>browserInvoke</codeph> qui ont eu lieu avant l’exécution de votre code d’initialisation (lorsque l’application a été invoquée au départ depuis le navigateur, par exemple). Si vous ajoutez un écouteur d’événement ultérieurement dans l’exécution (après l’initialisation de l’application), il continue à recevoir tous les événements <codeph>browserInvoke</codeph> qui ont eu lieu depuis le démarrage de l’application.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#InvokeEvent"><linktext>flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier>flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 La fonction de constructeur pour la classe BrowserInvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type de l’événement, accessible en tant que <codeph>Event.type</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Définissez sur <codeph>false</codeph> pour un objet BrowserInvokeEvent.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Définissez sur <codeph>false</codeph> pour un objet BrowserInvokeEvent.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>Un tableau d’arguments (chaînes) à transmettre à l’application.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>sandboxType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Le type de sandbox pour le contenu dans le navigateur.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Le domaine de sécurité pour le contenu dans le navigateur.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isHTTPS</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Indique si le contenu dans le navigateur utilise le schéma URL HTTPS ou non.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isUserEvent</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Indique si l’invocation du navigateur résultait d’un événement user.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 La fonction de constructeur pour la classe BrowserInvokeEvent. Généralement, les développeurs n’appellent pas le constructeur <codeph>BrowserInvokeEvent()</codeph> directement. Seul le moteur d’exécution doit créer un objet BrowserInvokeEvent.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Crée une copie de cet événement.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Copie de l’événement.
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Crée une copie de cet événement.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE"><apiName>BROWSER_INVOKE</apiName><shortdesc>
		 La constante BrowserInvokeEvent.BROWSER_INVOKE définit la valeur de la propriété type d’un objet BrowserInvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserInvoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 La constante <codeph>BrowserInvokeEvent.BROWSER_INVOKE</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet BrowserInvokeEvent.
		 
		 <p>L’objet BrowserInvokeEvent possède les propriétés suivantes :</p>
		 <adobetable class="innertable">
		    
		     
		    
		    
		    
		    
		     
		    
		     
		        
		  <tgroup cols="2"><thead><row><entry>Propriétés</entry><entry>Valeurs</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>Tableau des arguments de chaîne transmis pendant cette invocation.</entry></row><row><entry><codeph>sandBoxType</codeph></entry><entry>Chaîne représentant le type de sandbox pour le contenu du navigateur (<codeph>Security.APPLICATION</codeph>, <codeph>Security.LOCAL_TRUSTED</codeph>, <codeph>Security.LOCAL_WITH_FILE</codeph>, <codeph>Security.LOCAL_LOCAL_WITH_NETWORK</codeph> ou <codeph>Security.REMOTE</codeph>).</entry></row><row><entry><codeph>securityDomain</codeph></entry><entry>Une chaîne représentant le domaine de sécurité pour le contenu dans le navigateur (tel que <codeph>"www.example.com"
</codeph>).</entry></row><row><entry><codeph>isHTTPS</codeph></entry><entry>Indique si le contenu du navigateur utilise le schéma URL HTTPS (<codeph>true</codeph>) ou non (<codeph>false</codeph>)</entry></row><row><entry><codeph>isUserEvent</codeph></entry><entry>Indique si l’invocation du navigateur a résulté d’un événement user (toujours <codeph>true</codeph> dans AIR 1.0).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>N°</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; Il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indique l’objet qui traite activement l’objet InvokeEvent avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Toujours l’objet NativeApplication.  
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 Un tableau d’arguments (chaînes) à transmettre à l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Un tableau d’arguments (chaînes) à transmettre à l’application.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get"><apiName>isHTTPS</apiName><shortdesc>
		 Indique si le contenu dans le navigateur utilise le schéma URL HTTPS (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Indique si le contenu dans le navigateur utilise le schéma URL HTTPS (<codeph>true</codeph>) ou non (<codeph>false</codeph>).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get"><apiName>isUserEvent</apiName><shortdesc>
		 Indique si l’invocation du navigateur a entraîné un événement user (tel qu’un clic de souris).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Indique si l’invocation du navigateur a entraîné un événement user (tel qu’un clic de souris). Dans AIR 1.0, ceci est toujours défini sur <codeph>true</codeph> ; AIR requiert un événement user pour initier un appel à la fonction d’invocation du navigateur.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
		 Le type de sandbox pour le contenu dans le navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Le type de sandbox pour le contenu dans le navigateur. Cette valeur peut être :
		 
		 <ul>
		 
		 	<li><codeph>Security.APPLICATION</codeph> — Le contenu se trouve dans le sandbox de sécurité de l’application.</li>
		 
		 	<li><codeph>Security.LOCAL_TRUSTED</codeph> — Le contenu est dans le sandbox de sécurité local approuvé.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_FILE</codeph> — Le contenu se trouve dans le sandbox de sécurité local avec système de fichiers.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_NETWORK</codeph> — Le contenu se trouve dans le sandbox de sécurité local avec mise en réseau.</li>
		 
		 	<li><codeph>Security.REMOTE</codeph> — Le contenu se trouve dans le domaine distant (réseau)</li>
		 
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get"><apiName>securityDomain</apiName><shortdesc>
		 Le domaine de sécurité pour le contenu dans le navigateur, tel que« www.adobe.com » ou « www.example.org ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Le domaine de sécurité pour le contenu dans le navigateur, tel que <codeph>"www.adobe.com"</codeph> ou <codeph>"www.example.org"</codeph>. Cette propriété est définie uniquement pour le contenu présent dans le sandbox de sécurité distant (pour le contenu d’un domaine réseau) et non pour le contenu présent dans un sandbox de sécurité d’application ou local.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
 Un objet FileStream distribue des objets OutputProgressEvent pendant l’exécution d’opérations d’écriture de fichier asynchrones en attente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets événement pour événements output progress (pour opérations d’écriture de fichier asynchrones).
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet FileStream distribue des objets OutputProgressEvent pendant l’exécution d’opérations d’écriture de fichier asynchrones en attente. Il existe un type d’événement output progress : <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
    Crée un objet Event contenant des informations sur les événements output progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type d’événement. Il existe un seul type d’événement error : <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. 
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet événement peut être annulé. 
    </apiDesc></apiParam><apiParam><apiItemName>bytesPending</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Le nombre d’octets pas encore écrits.
    </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Le nombre total d’octets écrits ou ayant des écritures en attente.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets OutputProgressEvent.
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Crée un objet Event contenant des informations sur les événements output progress. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone"><apiName>clone</apiName><shortdesc>
    Crée une copie de l’objet OutputProgressEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet OutputProgressEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Crée une copie de l’objet OutputProgressEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString"><apiName>toString</apiName><shortdesc>
    Renvoie une chaîne répertoriant toutes les propriétés de l’objet OutputProgressEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet OutputProgressEvent.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Renvoie une chaîne répertoriant toutes les propriétés de l’objet OutputProgressEvent. La chaîne est écrite au format suivant :
    
    <p><codeph>[OutputProgressEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> eventPhase=<i>valeur</i> bytesPending=<i>valeur</i> bytesTotal=<i>valeur</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS"><apiName>OUTPUT_PROGRESS</apiName><shortdesc>
    Définit la valeur de la propriété type d’un objet événement outputProgress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outputProgress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>outputProgress</codeph>.
    
    <p>Les propriétés de cet événement sont les suivantes :</p>
    
    <adobetable class="innertable">
        
        
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesPending</codeph></entry><entry>Le nombre d’octets restant à écrire au moment où l’écouteur traite l’événement.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Nombre total d’octets finalement écrits si le processus d’écriture aboutit.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet FileStream indiquant la progression. </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get"><apiName>bytesPending</apiName><shortdesc>
    Le nombre d’octets qui ne sont pas encore écrits lorsque l’écouteur traite l’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    Le nombre d’octets qui ne sont pas encore écrits lorsque l’écouteur traite l’événement.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
    Le nombre total d’octets écrits jusqu’à présent, plus le nombre d’octets restant à écrire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    Le nombre total d’octets écrits jusqu’à présent, plus le nombre d’octets restant à écrire.
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
 Un objet SharedObject représentant un objet partagé distant distribue un objet SyncEvent lorsque l’objet partagé distant a été mis à jour par le serveur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets Event associés aux événements SyncEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet SharedObject représentant un objet partagé distant distribue un objet SyncEvent lorsque l’objet partagé distant a été mis à jour par le serveur. Il n’existe qu’un seul type d’événement <codeph>sync</codeph> : <codeph>SyncEvent.SYNC</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject"><linktext>Classe SharedObject</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync"><apiName>sync</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier>flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
	 Crée un objet événement contenant des informations sur les événements sync.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement sync : <codeph>SyncEvent.SYNC</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée. 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée.
	 </apiDesc></apiParam><apiParam><apiItemName>changeList</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Tableau d’objets décrivant la synchronisation avec l’objet SharedObject distant. Les écouteurs d’événement peuvent accéder à cet objet par le biais de la propriété <codeph>changeList</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets SyncEvent.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Crée un objet événement contenant des informations sur les événements <codeph>sync</codeph>. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SyncEvent/changeList"><linktext>changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie de l’objet SyncEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet SyncEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie de l’objet SyncEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString"><apiName>toString</apiName><shortdesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet SyncEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet SyncEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Renvoie une chaîne répertoriant toutes les propriétés de l’objet SyncEvent. La chaîne est écrite au format suivant :
	 <p><codeph>[SyncEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> list=<i>valeur</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC"><apiName>SYNC</apiName><shortdesc>
     Définit la valeur de la propriété type d’un objet événement sync.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sync</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>sync</codeph>.
	 <p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>changeList</codeph></entry><entry>Tableau associé à des propriétés décrivant son état.</entry></row><row><entry><codeph>target</codeph></entry><entry>occurrence SharedObject qui a été mise à jour par le serveur.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get"><apiName>changeList</apiName><shortdesc>
     Tableau d’objets ; chaque objet contient des propriétés qui décrivent les membres modifiés d’un objet partagé distant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     Tableau d’objets ; chaque objet contient des propriétés qui décrivent les membres modifiés d’un objet partagé distant. Les propriétés de chaque objet sont <codeph>code</codeph>, <codeph>name</codeph> et <codeph>oldValue</codeph>. 
     <p>Lorsque vous connectez d’abord un objet partagé distant permanent localement et/ou sur le serveur, toutes les propriétés de cet objet sont définies sur des chaînes vides.</p><p>Sinon, Flash définit <codeph>code</codeph> sur <codeph>"clear"</codeph> , <codeph>"success"</codeph> , <codeph>"reject"</codeph> , <codeph>"change"</codeph> ou <codeph>"delete"</codeph> . </p>
     <ul><li>La valeur <codeph>"clear"</codeph> signifie soit que vous avez réussi à vous connecter à un objet partagé distant qui n’est pas persistant sur le serveur ou sur le client, ou que toutes les propriétés de l’objet ont été supprimées, par exemple, lorsque les copies client et serveur de l’objet sont désynchronisées à un point tel que Flash Player resynchronise l’objet client avec l’objet serveur. Dans le dernier cas, <codeph>SyncEvent.SYNC</codeph> est distribué et la valeur « code » est définie sur <codeph>"change"</codeph>. </li>
     <li>La valeur <codeph>"success"</codeph> indique que le client a modifié l’objet partagé. </li>
     <li>La valeur <codeph>"reject"</codeph> signifie que le client a tenté de modifier l’objet mais qu’il a échoué ; au lieu de cela, un autre client a modifié l’objet. </li>
     <li>La valeur <codeph>"change"</codeph> signifie qu’un autre client a modifié l’objet ou que le serveur a resynchronisé l’objet. </li>
     <li>La valeur <codeph>"delete"</codeph> signifie que l’attribut a été supprimé. </li></ul>
     <p>La propriété <codeph>name</codeph> contient le nom de la propriété qui a été modifiée.</p>
     <p>La propriété <codeph>oldValue</codeph> contient l’ancienne valeur de la propriété modifiée. Ce paramètre est <codeph>null</codeph> sauf si la valeur du code est <codeph>"reject"</codeph> ou <codeph>"change"</codeph>.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>Classe NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>Classe NetStream</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
Un objet Camera ou Microphone distribue un objet ActivityEvent chaque fois qu’une caméra ou un microphone signale qu’il est devenu actif ou inactif.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Objets event associés aux événements ActivityEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Un objet Camera ou Microphone distribue un objet ActivityEvent chaque fois qu’une caméra ou un microphone signale qu’il est devenu actif ou inactif. Il n’existe qu’un seul type d’événement activity : <codeph>ActivityEvent.ACTIVITY</codeph>.

</apiDesc><example conref="examples\ActivityEventExample.as"> L’exemple suivant décrit l’utilisation de la classe ActivityEvent en associant une méthode d’écouteur d’événements nommée <codeph>activityHandler()</codeph> au microphone et en générant des informations de texte chaque fois que le microphone génère un événement <codeph>activity</codeph>.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity"><apiName>activity</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
	Crée un objet événement contenant des informations sur les événements activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Type de l’événement. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>type</codeph> héritée. Il n’existe qu’un seul type d’événement activity : <codeph>ActivityEvent.ACTIVITY</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event prend part à la phase de propagation vers le haut (bubbling) du flux d’événements. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>bubbles</codeph> héritée.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Détermine si l’objet Event peut être annulé. Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>cancelable</codeph> héritée. 
	</apiDesc></apiParam><apiParam><apiItemName>activating</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si le périphérique est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Les écouteurs d’événement peuvent accéder à cette information par le biais de la propriété <codeph>activating</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructeur associé aux objets ActivityEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Crée un objet événement contenant des informations sur les événements activity. Les objets Event sont transmis en tant que paramètres aux écouteurs d’événements.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone"><apiName>clone</apiName><shortdesc>
	Créer une copie de l’objet ActivityEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel objet ActivityEvent dont les propriétés ont la même valeur que celles de l’objet d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Créer une copie de l’objet ActivityEvent et définit la valeur de chaque propriété de sorte qu’elle corresponde à la valeur d’origine. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString"><apiName>toString</apiName><shortdesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ActivityEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne répertoriant toutes les propriétés de l’objet ActivityEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Renvoie une chaîne répertoriant toutes les propriétés de l’objet ActivityEvent. Le format utilisé est le suivant :
	<p><codeph>[ActivityEvent type=<i>valeur</i> bubbles=<i>valeur</i> cancelable=<i>valeur</i> activating=<i>valeur</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY"><apiName>ACTIVITY</apiName><shortdesc>
	La constante ActivityEvent.ACTIVITY définit la valeur de la propriété type d’un objet événement activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	La constante <codeph>ActivityEvent.ACTIVITY</codeph> définit la valeur de la propriété <codeph>type</codeph> d’un objet événement <codeph>activity</codeph>. 
	<p>Les propriétés de cet événement sont les suivantes :</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Propriété</entry><entry>Valeur</entry></row></thead><tbody><row><entry><codeph>activating</codeph></entry><entry><codeph>true</codeph> si le périphérique est activé ou <codeph>false</codeph> s’il est désactivé.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> ; il n’existe aucun comportement par défaut à annuler.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>L’objet qui traite activement l’objet Event avec un écouteur d’événements.</entry></row><row><entry><codeph>target</codeph></entry><entry>Objet commençant ou terminant une session, tel qu’un objet Camera ou Microphone.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get"><apiName>activating</apiName><shortdesc>
	Indique si le périphérique est activé (true) ou désactivé (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indique si le périphérique est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>