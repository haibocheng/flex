<?xml version="1.0"?>
<apiPackage id="flash.security"><apiName>flash.security</apiName><apiDetail/><apiClassifier id="flash.security:XMLSignatureValidator"><apiName>XMLSignatureValidator</apiName><shortdesc>
	 La classe XMLSignatureValidator vérifie si un fichier de signature XML est correctement constitué, s’il n’est pas modifié et, éventuellement, s’il est signé à l’aide d’une clé associée à un certificat numérique approuvé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 La classe XMLSignatureValidator vérifie si un fichier de signature XML est correctement constitué, s’il n’est pas modifié et, éventuellement, s’il est signé à l’aide d’une clé associée à un certificat numérique approuvé.
	 
	 <p>La classe XMLSignatureValidator implémente un sous-ensemble de la recommandation du W3C portant sur la syntaxe et le traitement de XML Signature, bien que ce dernier ne doive pas être considéré comme une implémentation normalisée. Le sous-ensemble de la recommandation pris en charge inclut les éléments suivants :</p>
	 <ul>
	  <li>Toute la syntaxe des signatures de base à l’exception de l’élément KeyInfo.</li>
	  <li>L’élément KeyInfo prend en charge uniquement l’élément X509Data.</li>
	  <li>L’élément X509Data prend en charge uniquement l’élément X509Certificate.</li>
	  <li>Algorithme de la méthode digest SHA256.</li>
	  <li>Algorithme de signature PKCS1.</li>
	  <li>Méthode de canonisation « XML canonique sans commentaires » et algorithme de transformation.</li>
	  <li>Elément Manifest dans une syntaxe de signatures supplémentaire. </li>
	 </ul>
	 
	 <p>Vous devez fournir une implémentation IURIDereferencer pour vérifier une signature XML. Cette classe d’implémentation est chargée de résoudre les URI (Uniform Resource Identifier) spécifiés dans les éléments SignedInfo du fichier de signature, puis de renvoyer les données référencées dans un objet, tel que ByteArray, qui implémente l’interface IDataInput.</p>
	 
	 <p>Pour vérifier que le certificat de signature est lié à un certificat approuvé, deux possibilités s’offrent à vous : soit la signature XML doit contenir les certificats requis pour créer la chaîne dans les éléments X509Certificate, soit vous devez fournir les certificats requis pour créer la chaîne à l’aide de la méthode <codeph>addCertificate()</codeph>.</p>
	 
	 <p><b>Pour vérifier une signature XML :</b></p>
	 <ol>
	 <li>Créez une occurrence de la classe XMLSignatureValidator.</li>
	 <li>Définissez la propriété <codeph>uriDereferencer</codeph> de l’occurrence sur une occurrence de votre classe d’implémentation IURIDereferencer.</li>
	 <li>Si vous souhaitez créer la chaîne d’approbation de certificat, fournissez des certificats codés en DER (Distinguished Encoding Rules) à l’aide de la méthode <codeph>addCertificate()</codeph>.</li>
	 <li>Appelez la méthode <codeph>verify</codeph> de l’objet XMLSignatureValidator, en transmettant la signature à vérifier.</li>
	 <li>Vérifiez la propriété <codeph>validityStatus</codeph> une fois que l’objet XMLSignatureValidator distribue un événement complete.</li>  
	 </ol>
	 
	 <p><b>A propos de l’état des signatures :</b></p>
	 <p>Une signature XML peut présenter un état « valid » (valide), « invalid » (non valide) ou « unknown » (inconnu). L’état général dépend de l’état de vérification des composants individuels du fichier de signature :</p>
	 <ul>
	 <li><codeph>digestStatus</codeph> : validité de la signature cryptographique calculée sur l’élément SignedInfo. Les valeurs possibles sont <codeph>valid</codeph>, <codeph>invalid</codeph> ou <codeph>unknown</codeph>.</li>
	 <li><codeph>identityStatus</codeph> : validité du certificat de signature. Si le certificat a expiré, a été révoqué ou altéré, l’état est <codeph>invalid</codeph>. S’il s’avère impossible de lier le certificat à un certificat racine approuvé, l’état est <codeph>unknown</codeph>. Le certificat n’est pas vérifié si le digest n’est pas valide. S’il n’est pas vérifié, l’état correspond à <codeph>unknown</codeph>.</li>
	 <li><codeph>referencesStatus</codeph> : validité des données transmises par les références dans l’élément SignedInfo du fichier de signature. Les valeurs possibles sont <codeph>valid</codeph>, <codeph>invalid</codeph> ou <codeph>unknown</codeph>. Les références ne sont pas vérifiées si le digest ou le certificat n’est pas valide. Il est également possible que la vérification des références ne soit pas effectuée, selon le paramètre de la propriété <codeph>referencesValidationSetting</codeph>. S’il n’est pas vérifié, l’état correspond à <codeph>unknown</codeph>.</li>
	 </ul>
	 <p>L’état de la signature indiqué par la propriété <codeph>validityStatus</codeph> peut être :</p>
	 <ul>
	 <li><codeph>valid</codeph> : si les propriétés <codeph>referencesStatus</codeph>, <codeph>digestStatus</codeph> et <codeph>identityStatus</codeph> sont toutes <codeph>valid</codeph>.</li>
	 <li><codeph>invalid</codeph> : si l’un des états individuels est <codeph>invalid</codeph>.</li>
	 <li><codeph>unknown</codeph> : si <codeph>referencesStatus</codeph>, <codeph>digestStatus</codeph> ou <codeph>identityStatus</codeph> est <codeph>unknown</codeph>.</li>
	 </ul>
	 
	 <p><b>Restrictions concernant la mise en forme canonique :</b></p>
	 <p>Le moteur XML d’AIR ne produit pas toujours la chaîne XML attendue lors de la mise en forme canonique d’un document XML. Pour cette raison, nous vous recommandons d’éviter d’insérer des espaces blancs entre les éléments dans les documents de signature enveloppés ou séparés et de ne pas redéfinir les espaces de nom au sein d’un document de signature. Dans les deux cas, AIR peut de ne pas recréer le document avec la même séquence de caractères que celle du document original, ce qui risque d’entraîner l’échec de la validation.</p>
	   
	 </apiDesc><example conref="examples\XMLSignatureValidatorExample.as"> L’exemple suivant charge et vérifie un fichier contenant une signature XML. Pour utiliser cet exemple, vous devez implémenter une classe IURIDereferencer appropriée afin que les signatures soient validées (en remplaçant la classe SignedMessageDereferencer utilisée dans l’exemple). Exécutez l’exemple en appelant <codeph>SignatureValidatorExample.validateSignature( signatureFile )</codeph> et en transmettant le fichier qui référence le document de signature XML à valider.
 
<codeblock>
import flash.events.Event;
import flash.filesystem.File;
import flash.filesystem.FileStream;
import flash.security.ReferencesValidationSetting;
import flash.security.XMLSignatureValidator; 

import com.example.SignedMessageDereferencer; //A custom class implementing IURIDereferencer

public class SignatureValidatorExample{ 
    private var xmlSig:XML;
    private const signatureNS:Namespace = new Namespace( "http://www.w3.org/2000/09/xmldsig#" );
    
    public static function validateSignature( signatureFile:File ):void{
        try{
            //Set up the XMLSignatureValidator
            var verifier:XMLSignatureValidator = new XMLSignatureValidator();
            verifier.addEventListener( Event.COMPLETE, verificationComplete );
            verifier.uriDereferencer = new SignedMessageDereferencer();
            verifier.referencesValidationSetting = ReferencesValidationSetting.VALID_OR_UNKNOWN_IDENTITY;
    
            //Load the signed document
            var sigFileStream:FileStream = new FileStream();
            sigFileStream.open( signatureFile, FileMode.READ );
            var xmlDoc:XML = XML( sigFileStream.readUTFBytes(sigFileStream.bytesAvailable) );
            
            //Get the last Signature element in the document
            if( xmlDoc.name().localName != "Signature" ){
                var signatureList:XMLList = xmlDoc..signatureNS::Signature;
                xmlSig = XML( signatureList[ signatureList.length()-1 ] );
            } else{
                xmlSig = xmlDoc;
            }
    
            //Validate the signature
            verifier.verify( xmlSig );
            
        }catch (e:Error){
            statusDisplay.text = "Verification error.\n" + e;
        }
    }
    
    private static function verificationComplete(event:Event):void{
        trace( "Signature Validity: " + verifier.validityStatus );
        trace( "Digest validity: " + verifier.digestStatus );
        trace( "Certificate validity: " + verifier.identityStatus );
        trace( "Data validity: " + verifier.referencesStatus );
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.security.xml#IURIDereferencer"><linktext>IURIDereferencer</linktext></link><link href="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/"><linktext>Syntaxe et traitement de XML Signature</linktext></link><link href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"><linktext>XML canonique</linktext></link><link href="http://www.ietf.org/rfc/rfc2437.txt"><linktext>PKCS #1</linktext></link></related-links><adobeApiEvent id="flash.security:XMLSignatureValidator_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
	 Distribué si la vérification s’avère impossible à cause d’erreurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Distribué si la vérification s’avère impossible à cause d’erreurs. 
	 
	 </apiDesc><example conref="examples\XMLSignatureValidator.error.1.as"> L’exemple suivant écoute l’événement error distribué par un objet XMLSignatureValidator et localise le message d’erreur :
<codeblock>
private function verificationError(event:ErrorEvent):void{
    trace("Verification error: " + event.text);                
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.security:XMLSignatureValidator_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
	 Distribué une fois la vérification terminée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Distribué une fois la vérification terminée.
	 
	 <p>Un événement <codeph>complete</codeph> n’indique pas la validité d’une signature. Vérifiez la propriété <codeph>validityStatus</codeph> de l’objet XMLSignatureValidator afin de déterminer les résultats de la vérification de la signature.</p>
	 
	 </apiDesc><example conref="examples\XMLSignatureValidator.complete.1.as"> L’exemple suivant écoute l’événement complete distribué par un objet XMLSignatureValidator et localise les résultats de la vérification :
<codeblock>
private function verificationComplete(event:Event):void{
    var validator:XMLSignatureValidator = event.target as XMLSignatureValidator;
    trace("Digest status: " + validator.digestStatus);
    trace("Identity status: " + validator.identityStatus);
    trace("Reference status: " + validator.referencesStatus);
    trace("Signature status: " + validator.validityStatus);    
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/validityStatus"><linktext>validityStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.security:XMLSignatureValidator:XMLSignatureValidator"><apiName>XMLSignatureValidator</apiName><shortdesc>
		 Crée un objet XMLSignatureValidator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Crée un objet XMLSignatureValidator.
		 
		 <p>Vous devez définir la propriété <codeph>uriDereferencer</codeph> avant d’appeler la méthode <codeph>verify()</codeph> du nouvel objet.</p>
		 
		 </apiDesc><example conref="examples\XMLSignatureValidator.constructor.1.as"> L’exemple suivant crée et définit un nouvel objet XMLSignatureValidator :
<codeblock> 
import com.example.EnvelopedDereferencer; //Your custom IURIDereferencer implementation

//Create the object
var verifier:XMLSignatureValidator = new XMLSignatureValidator();

//Provide the IURIDerferencer
verifier.uriDereferencer = new EnvelopedDereferencer(xmlDoc);

//Set validation options
verifier.referencesValidationSetting = ReferencesValidationSetting.VALID_OR_UNKNOWN_IDENTITY;
verifier.revocationCheckSetting = RevocationCheckSettings.NEVER;
verifier.useSystemTrustStore = true;

//Add listeners to handle results
verifier.addEventListener(Event.COMPLETE, verificationComplete);
verifier.addEventListener(ErrorEvent.ERROR, verificationError);
</codeblock></example></apiConstructorDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/uriDereferencer"><linktext>uriDereferencer</linktext></link></related-links></apiConstructor><apiOperation id="flash.security:XMLSignatureValidator:addCertificate"><apiName>addCertificate</apiName><shortdesc>
	   Ajoute un certificat x509 pour la création de la chaîne.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’appel a lieu lorsqu’une signature est en cours de validation.
	   
	   </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>cert</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>Objet ByteArray contenant un certificat numérique x509 codé en DER.
	   </apiDesc></apiParam><apiParam><apiItemName>trusted</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Défini sur <codeph>true</codeph> pour désigner ce certificat comme ancre de confiance.
	   </apiDesc></apiParam></apiOperationDef><apiDesc>
	   Ajoute un certificat x509 pour la création de la chaîne. 
	   
	   <p>Le certificat ajouté doit être un certificat x509 codé en DER.</p>
	   
	   <p>Si le paramètre <codeph>trusted</codeph> est défini sur <codeph>true</codeph>, le certificat est considéré comme une ancre de confiance.</p>
	   
	   <p><b>Remarque :</b> une signature XML peut inclure des certificats permettant de créer la chaîne de certificats du signataire. Par défaut, la classe XMLSignatureValidator utilise ces certificats pour la création de chaînes, et non comme racines de confiance.</p>
	   
	   </apiDesc><example conref="examples\XMLSignatureValidator.addCertificate.1.as"> L’exemple suivant charge un certificat à partir du système de fichiers et l’ajoute en tant qu’ancre de confiance.
<codeblock>
 import flash.utils.ByteArray;
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 var certificate:ByteArray = new ByteArray();
 
 var certFile:File = new File("certificate.cer");
 var certFileStream:FileStream = new FileStream();
 certFileStream.open(certFile, FileMode.READ);
 certFileStream.readBytes(certificate, 0, certFileStream.bytesAvailable);

 verifier.addCertificate(certificate, true);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.security:XMLSignatureValidator:verify"><apiName>verify</apiName><shortdesc>
		Vérifie la signature spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’appel a lieu lorsqu’une signature est en cours de validation. 
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>En cas d’erreurs, telles qu’une mauvaise constitution des fichiers XML ou la non prise en charge d’éléments dans le fichier de signature. 
		</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>signature</apiItemName><apiOperationClassifier>XML</apiOperationClassifier><apiDesc>Signature XML à vérifier.
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		Vérifie la signature spécifiée. 
		
		<p>La vérification est asynchrone. L’objet XMLSignatureValidator distribue un événement <codeph>complete</codeph> lorsque la vérification s’achève avec succès, ou si un événement <codeph>error</codeph> est émis lorsque la vérification s’avère impossible à cause d’erreurs.</p> 
		
		<p>Il est impossible d’annuler la procédure de vérification. Lorsqu’une vérification est en cours, les appels suivants à la méthode <codeph>verify()</codeph> échouent. Une fois la vérification en cours terminée, vous pouvez rappeler la méthode <codeph>verify()</codeph>.</p> 
		
		<p><b>Remarque :</b> étant donné que l’objet XMLSignatureValidator implémente uniquement un sous-ensemble de la recommandation du W3C portant sur la syntaxe et le traitement des signatures XML, toutes les signatures XML valides ne peuvent pas être vérifiées.</p>
		 
		 
		</apiDesc><example conref="examples\XMLSignatureValidator.verify.1.as"> L’exemple suivant lit un fichier contenant une signature XML et la vérifie en appelant la méthode <codeph>verify()</codeph> (dans l’exemple suivant, nous supposons que l’implémentation de IURIDereferencer est appropriée pour la signature).
<codeblock>
import flash.filesystem.File;
import flash.filesystem.FileStream;
import com.example.SignedMessageDereferencer; //Your IURIDereferencer implementation
 
const xmlSignatureNS:Namespace = new Namespace( "http://www.w3.org/2000/09/xmldsig#" );

var verifier:XMLSignatureValidator = new XMLSignatureValidator();
verifier.uriDereferencer = new SignedMessageDereferencer();

var signatureFile:File = new File( "path/to/XMLSignatureDocument.xml" );
var sigFileStream:FileStream = new FileStream();
sigFileStream.open( signatureFile, FileMode.READ );

var xmlDoc:XML = XML( sigFileStream.readUTFBytes(sigFileStream.bytesAvailable) );
var xmlSig:XML = XML( xmlDoc..xmlSignatureNS::Signature );

verifier.verify( xmlSig );
</codeblock></example></apiOperationDetail><adobeApiEvent id="flash.security:XMLSignatureValidator:verify_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Distribué lorsque la vérification s’achève avec succès.
		</apiDesc></adobeApiEventDetail><shortdesc>Distribué lorsque la vérification s’achève avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.security:XMLSignatureValidator:verify_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Distribué si une erreur se produit lors de la vérification des références. 
		</apiDesc></adobeApiEventDetail><shortdesc>Distribué si une erreur se produit lors de la vérification des références.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.security:XMLSignatureValidator:digestStatus:get"><apiName>digestStatus</apiName><shortdesc>
	    Validité de la signature cryptographique calculée sur l’élément SignedInfo.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si l’accès a lieu lorsqu’une signature est en cours de validation.
		 
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Validité de la signature cryptographique calculée sur l’élément <codeph>SignedInfo</codeph>.
	    
	    <p>Le statut est :</p>
	    <ul>
	    <li><codeph>valid</codeph> : si la signature est valide au niveau cryptographique.</li>
	    <li><codeph>invalid</codeph> : si la méthode digest a été modifiée après la signature.</li>
	    <li><codeph>unknown</codeph> : si la méthode <codeph>verify()</codeph> n’a pas été appelée.</li>
		</ul>
		
		 <p><b>Remarque :</b> si <codeph>digestStatus</codeph> est invalid, les états <codeph>identityStatus</codeph> et <codeph>referencesStatus</codeph> ne sont pas vérifiés et sont indiqués comme <codeph>unknown</codeph>.</p>
		 
		 </apiDesc><example conref="examples\XMLSignature.digestStatus.1.as"/></apiValueDetail></apiValue><apiValue id="flash.security:XMLSignatureValidator:identityStatus:get"><apiName>identityStatus</apiName><shortdesc>
	    Etat de validité du certificat de signature.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si l’accès a lieu lorsqu’une signature est en cours de validation.
 		</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Etat de validité du certificat de signature. 
	    
	    <p>Les états possibles sont les suivants :</p>
	    <ul>
	    <li><codeph>valid</codeph> : le certificat n’a pas expiré, la vérification de la révocation a été effectuée correctement et il est lié à un certificat racine approuvé.</li>
	    <li><codeph>unknown</codeph> : le certificat n’a pas expiré, la vérification de la révocation a été effectuée correctement, mais il n’est pas lié à un certificat racine approuvé. Le statut <codeph>unknown</codeph> est également signalé lorsqu’il n’a pas été vérifié, soit parce que la méthode <codeph>verify()</codeph> n’a pas été appelée, soit parce que la signature cryptographique de l’élément SignedInfo (<codeph>digestStatus</codeph>) n’est pas valide.</li>
	    <li><codeph>invalid</codeph> : le certificat a expiré ou la vérification de la révocation a échoué.</li>
	    </ul>
	    <p>Les certificats ajoutés à l’aide de la méthode <codeph>addCertificate()</codeph>, ainsi que les paramètres des propriétés <codeph>revocationCheckSetting</codeph> et <codeph>useSystemTrustStore</codeph> peuvent changer lorsqu’un certificat est considéré comme étant valide.</p>
	    
		<p><b>Remarque :</b> si <codeph>identifyStatus</codeph> est invalid, l’état <codeph>referenceStatus</codeph> n’est pas vérifié et est indiqué comme <codeph>unknown</codeph>. En outre, les références ne sont pas vérifiées si l’état <codeph>identityStatus</codeph> est unknown, à moins que la propriété <codeph>referencesValidationSetting</codeph> soit définie sur <codeph>validOrUnknownIdentity</codeph>.</p>
		
 		</apiDesc><example conref="examples\XMLSignatureValidator.identityStatus.1.as"> L’exemple suivant obtient les résultats de la vérification du certificat de signature (après qu’une signature a été vérifiée) :
<codeblock>
 import flash.security.XMLSignatureValidator;
 
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate a signature...
  
 var identityResult:String = verifier.identityStatus;
</codeblock></example></apiValueDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/addCertificate()"><linktext>addCertificate()</linktext></link><link href="flash.security.xml#XMLSignatureValidator/revocationCheckSetting"><linktext>revocationCheckSetting</linktext></link><link href="flash.security.xml#XMLSignatureValidator/useSystemTrustStore"><linktext>useSystemTrustStore</linktext></link><link href="flash.security.xml#XMLSignatureValidator/referencesValidationSetting"><linktext>referencesValidationSetting</linktext></link></related-links></apiValue><apiValue id="flash.security:XMLSignatureValidator:referencesStatus:get"><apiName>referencesStatus</apiName><shortdesc>
	    Validité des données de toutes les références dans l’élément SignedInfo.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si l’accès a lieu lorsqu’une signature est en cours de validation.
 		</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Validité des données de toutes les références dans l’élément <codeph>SignedInfo</codeph>.
	    
	    <p>Les états possibles sont les suivants :</p>
	    <ul>
	    <li><codeph>valid</codeph> : si toutes les références sont valides.</li>
	    <li><codeph>invalid</codeph> : si l’une des références n’est pas valide.</li>
	    <li><codeph>unknown</codeph> : si aucune référence n’est vérifiée. Il est possible de ne pas vérifier les références dans les cas suivants :
	    <ul> 
	    	<li>la méthode <codeph>verify()</codeph> n’a pas été appelée</li>
	    	<li>la signature cryptographique de l’élément SignedInfo (<codeph>digestStatus</codeph>) n’est pas valide</li>
	    	<li>le certificat de signature (<codeph>identityStatus</codeph>) n’est pas valide</li>
	    	<li>la propriété <codeph>referencesValidationSetting</codeph> est définie sur <codeph>validIdentity</codeph> (paramètre par défaut) et l’état <codeph>identityStatus</codeph> du certificat de signature est unknown</li>
	    	<li>la propriété <codeph>referencesValidationSetting</codeph> est définie sur <codeph>never</codeph>.</li>
	    </ul>
	    </li>
		</ul>
		
		 <p><b>Important :</b> les ressources externes ne sont pas vérifiées, à moins qu’elles ne soient référencées directement dans un élément SignedInfo au sein du document de signature. Les ressources externes désignées par une référence secondaire ne sont pas vérifiées. Par exemple, si une signature XML signe un élément manifest, seule l’intégrité de l’élément manifest est vérifiée. Les fichiers répertoriés dans le manifeste ne sont pas vérifiés.</p>
		 
		</apiDesc><example conref="examples\XMLSignatureValidator.referencesStatus.1.as"> L’exemple suivant obtient les résultats de la vérification des références dans la signature (après qu’une signature a été vérifiée) :
<codeblock>
 import flash.security.XMLSignatureValidator;
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate a signature...
  
 var dataResult:String = verifier.referencesStatus;
</codeblock></example></apiValueDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/referencesValidationSetting"><linktext>referencesValidationSetting</linktext></link></related-links></apiValue><apiValue id="flash.security:XMLSignatureValidator:referencesValidationSetting:set"><apiName>referencesValidationSetting</apiName><shortdesc>
	    Spécifie les conditions sous lesquelles les références sont vérifiées.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si le paramétrage a lieu lorsqu’une signature est en cours de validation.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>Si le paramètre <codeph>setting</codeph> contient une valeur non définie dans la classe ReferencesValidationSetting.
		 
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Spécifie les conditions sous lesquelles les références sont vérifiées.
		
		 <p>Utilisez les constantes définies dans la classe ReferencesValidationSetting pour définir cette propriété. Les paramètres sont les suivants :</p>
		 <ul>	
		 <li><codeph>ReferencesValidationSetting.VALID_IDENTITY</codeph> : vérifiez les références uniquement si le certificat de signature est valide et s’il est lié à un certificat racine approuvé. C’est la valeur par défaut.</li>
		 <li><codeph>ReferencesValidationSetting.VALID_OR_UNKNOWN_IDENTITY</codeph> : vérifiez les références si le certificat de signature est valide, même s’il n’est lié à aucun certificat racine approuvé.</li>
		 <li><codeph>ReferencesValidationSetting.NEVER</codeph> : ne vérifiez jamais les références.</li> 
		 </ul>
		 
		 <p>
		 Utilisez le paramètre par défaut, <codeph>validIdentity</codeph>, avec les signatures signées à l’aide d’un certificat commercial ou lorsque vous fournissez votre propre certificat en tant qu’ancre de confiance à l’aide de la méthode <codeph>addCertificate()</codeph>. Ce paramètre permet d’éviter de vérifier plusieurs fois la validité des références lorsque le document signé est rejeté.
		 </p>
		 <p>
		 Utilisez le paramètre <codeph>validOrUnknownIdentity</codeph> avec les signatures signées à l’aide de certificats auto-signés. Ce paramètre vous permet de vérifier que les données signées n’ont pas été altérées, mais il ne permet pas de vérifier l’identité du signataire. 
		 </p>
		 <p>
		 Utilisez le paramètre <codeph>never</codeph> pour éviter de vérifier plusieurs fois les références lorsque cette vérification n’est pas importante dans le contexte de votre application.
		 </p>
		 </apiDesc><example conref="examples\XMLSignatureValidator.referencesValidationSetting.1.as"> L’exemple suivant définit l’objet XMLSignatureValidator de façon à ce qu’il vérifie les références uniquement si le certificat de signature est lié à une ancre de confiance :
<codeblock>
 import flash.security.ReferencesValidationSetting;
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator(); 
 verifier.referencesValidationSetting = ReferencesValidationSetting.VALID_OR_UNKNOWN_IDENTITY;
</codeblock></example></apiValueDetail><related-links><link href="flash.security.xml#ReferencesValidationSetting"><linktext>ReferencesValidationSetting</linktext></link></related-links></apiValue><apiValue id="flash.security:XMLSignatureValidator:revocationCheckSetting:set"><apiName>revocationCheckSetting</apiName><shortdesc>
	    Détermine la méthode de vérification de la révocation des certificats.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si le paramétrage a lieu lorsqu’une signature est en cours de validation.
		</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Détermine la méthode de vérification de la révocation des certificats.
		
		 <p>Utilisez les constantes définies dans la classe RevocationSettings pour définir cette propriété. Les paramètres sont les suivants :</p>
		 <ul>	
		 <li><codeph>RevocationCheckSettings.NEVER</codeph> : la révocation des certificats n’est pas vérifiée.</li>
		 <li><codeph>RevocationCheckSettings.BEST_EFFORT</codeph> : la révocation des certificats est vérifiée si les informations de révocation sont disponibles et s’il est possible d’obtenir le statut de révocation. S’il s’avère impossible de déterminer le statut de révocation, le certificat n’est pas rejeté.</li>
		 <li><codeph>RevocationCheckSettings.REQUIRED_IF_AVAILABLE</codeph> : si le certificat dispose d’informations de révocation, il est nécessaire de déterminer le statut de révocation pour le valider.</li> 
		 <li><codeph>RevocationCheckSettings.ALWAYS_REQUIRED</codeph> : vérifie toujours la révocation des certificats. Les certificats ne disposant d’aucune information de révocation sont rejetés.</li>
		 </ul>
		 
		 </apiDesc><example conref="examples\XMLSignature.revocationCheckSetting.1.as"/></apiValueDetail><related-links><link href="flash.security.xml#RevocationCheckSettings"><linktext>RevocationCheckSettings</linktext></link></related-links></apiValue><apiValue id="flash.security:XMLSignatureValidator:signerCN:get"><apiName>signerCN</apiName><shortdesc>
	   Champ Nom commun du certificat de signature.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	   Champ Nom commun du certificat de signature.  
	   
	   </apiDesc><example conref="examples\XMLSignatureValidator.signerCN.1.as"> L’exemple suivant lit le nom commun du certificat de signature (après qu’une signature a été vérifiée) :
<codeblock>
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate a signature...
  
 var commonName:String = verifier.signerCN;
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.security:XMLSignatureValidator:signerDN:get"><apiName>signerDN</apiName><shortdesc>
	   Champ Nom unique du certificat de signature.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	   Champ Nom unique du certificat de signature.  
	   
	   </apiDesc><example conref="examples\XMLSignatureValidator.signerDN.1.as"> L’exemple suivant lit le nom unique du certificat de signature (après qu’une signature a été vérifiée) :
<codeblock>
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate a signature...
  
 var distinguishedName:String = verifier.signerDN;
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.security:XMLSignatureValidator:signerExtendedKeyUsages:get"><apiName>signerExtendedKeyUsages</apiName><shortdesc>
	   Tableau contenant les identificateurs d’objets de l’utilisation avancée de la clé répertoriés dans le certificat de signature.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier><apiException><apiDesc>Si l’accès a lieu lorsqu’une signature est en cours de validation.
	   
	   </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	   Tableau contenant les identificateurs d’objets de l’utilisation avancée de la clé répertoriés dans le certificat de signature.
	   
	   <p>Chaque utilisation avancée de la clé est indiquée sous forme d’identificateur d’objet numérique.</p>
	   
	   </apiDesc><example conref="examples\XMLSignatureValidator.signerExtendedKeyUsages.1.as"> L’exemple suivant lit les identificateurs d’objets de l’utilisation avancée de la clé du certificat de signature (après qu’une signature a été vérifiée) :
<codeblock>
 import flash.security.XMLSignatureValidator;
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate a signature...
  
 var extendedKeyOIDs:Array = verifier.signerExtendedKeyUsages;
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.security:XMLSignatureValidator:signerTrustSettings:get"><apiName>signerTrustSettings</apiName><shortdesc>
		Tableau contenant les paramètres d’approbation du certificat de signature.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier><apiException><apiDesc>Si l’accès a lieu lorsqu’une signature est en cours de validation.
		
		</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		Tableau contenant les paramètres d’approbation du certificat de signature.
		
		<p>Les paramètres d’approbation proviennent du système et des identificateurs d’objets incorporés dans le certificat. Les constantes des chaînes représentant les paramètres d’approbation reconnus sont définies dans la classe SignerTrustSettings.</p>
		 
		 <p>Le tableau <codeph>signerTrustSettings</codeph> d’un certificat <codeph>unknown</codeph> ou <codeph>invalid</codeph> est vide.</p>
		
		<p>La modification du tableau ne permet pas de modifier les paramètres d’approbation du certificat. </p>
		
  	    </apiDesc><example conref="examples\XMLSignatureValidator.signerTrustSettings.1.as"> L’exemple suivant lit les paramètres de confiance du certificat de signature (après qu’une signature a été vérifiée) :
<codeblock>
 import flash.security.XMLSignatureValidator;
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate a signature...
  
 var certificateTrustedFor:Array = verifier.signerTrustSettings;
</codeblock></example></apiValueDetail><related-links><link href="flash.security.xml#SignerTrustSettings"><linktext>SignerTrustSettings</linktext></link></related-links></apiValue><apiValue id="flash.security:XMLSignatureValidator:uriDereferencer:set"><apiName>uriDereferencer</apiName><shortdesc>
	     Implémentation de IURIDereferencer.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.security:IURIDereferencer</apiValueClassifier><apiException><apiDesc>Si le paramétrage a lieu lorsqu’une signature est en cours de validation.
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	     Implémentation de IURIDereferencer.
		 
		 <p>Vous devez fournir une implémentation de IURIDereferencer avant de vérifier une signature.</p>
		 
		 </apiDesc><example conref="examples\XMLSignatureValidator.uriDereferencer.1.as"> L’exemple suivant crée une occurrence de SignedMessageDereferencer, qui implémente l’interface IURIDereferencer, puis la définit comme outil de déférencement à utiliser pour la validation de la signature :
<codeblock>
 import com.example.SignedMessageDereferencer; //A custom class implementing IURIDereferencer
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator(); 
 verifier.uriDereferencer = new SignedMessageDereferencer();
</codeblock></example></apiValueDetail><related-links><link href="flash.security.xml#IURIDereferencer"><linktext>IURIDereferencer</linktext></link></related-links></apiValue><apiValue id="flash.security:XMLSignatureValidator:useSystemTrustStore:set"><apiName>useSystemTrustStore</apiName><shortdesc>
	    Indique que les certificats dans le magasin d’approbations du système sont utilisés pour la création de chaînes.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Si le paramétrage a lieu lorsqu’une signature est en cours de validation.
		 
		 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Indique que les certificats dans le magasin d’approbations du système sont utilisés pour la création de chaînes.
	    
	    <p>Si la valeur <codeph>true</codeph> est définie, les ancres de confiance dans le magasin d’approbations du système sont utilisées comme racines de confiance. Par défaut, le magasin d’approbations du système n’est pas utilisé.</p>
		
		</apiDesc><example conref="examples\XMLSignatureValidator.useSystemTrustStore.1.as"> L’exemple suivant crée une occurrence de XMLSignatureValidator et la définit de façon à utiliser le référentiel système des certificats approuvés lors de la vérification d’une signature XML :
<codeblock>
 var verifier:XMLSignatureValidator = new XMLSignatureValidator(); 
 verifier.useSystemTrustStore = true;
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.security:XMLSignatureValidator:validityStatus:get"><apiName>validityStatus</apiName><shortdesc>
	    Etat de validité d’une signature XML vérifiée.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si l’accès a lieu lorsqu’une signature est en cours de validation.
		
		</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	    Etat de validité d’une signature XML vérifiée.
	    
		<p>La signature XML est vérifiée en validant la signature cryptographique de l’élément SignedInfo, le certificat de signature et les données transmises par les références dans l’élément SignedInfo. La validité de ces éléments est indiquée individuellement par les propriétés <codeph>digestStatus</codeph>, <codeph>identityStatus()</codeph> et <codeph>referencesStatus</codeph>, respectivement.</p>
		
	    <p>Une signature XML peut présenter un état « valid » (valide), non « invalid » (non valide) ou « unknown » (inconnu). L’état général dépend de l’état de vérification des composants individuels du fichier de signature :</p>
	    <ul>
	    <li><codeph>digestStatus</codeph> : validité de la signature cryptographique calculée sur l’élément SignedInfo.</li>
	    <li><codeph>identityStatus</codeph> : validité du certificat de signature.</li>
	    <li><codeph>referencesStatus</codeph> : validité de la méthode digest des références dans l’élément de signature SignedInfo.</li>
	    </ul>
	    <p>L’état de la signature indiqué par la propriété <codeph>validityStatus</codeph> peut être :</p>
	    <ul>
	    <li><codeph>valid</codeph> : si les propriétés <codeph>referencesStatus</codeph>, <codeph>digestStatus</codeph> et <codeph>identityStatus</codeph> sont toutes <codeph>valid</codeph>.</li>
	    <li><codeph>invalid</codeph> : si l’un des états individuels est <codeph>invalid</codeph>.</li>
	    <li><codeph>unknown</codeph> : si l’un des états individuels est <codeph>unknown</codeph>.</li>
	    </ul>
		
		</apiDesc><example conref="examples\XMLSignatureValidator.validityStatus.1.as"> L’exemple suivant obtient les résultats de la validation de la signature XML 
<codeblock>
 import flash.security.XMLSignatureValidator;
 
 var verifier:XMLSignatureValidator = new XMLSignatureValidator();
 //validate the signature...
  
 var validationResult:String = verifier.validityStatus;
</codeblock></example></apiValueDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/digestStatus"><linktext>digestStatus</linktext></link><link href="flash.security.xml#XMLSignatureValidator/identityStatus"><linktext>identityStatus</linktext></link><link href="flash.security.xml#XMLSignatureValidator/referencesStatus"><linktext>referencesStatus</linktext></link><link href="flash.security.xml#SignatureStatus"><linktext>SignatureStatus</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.security:IURIDereferencer"><apiName>IURIDereferencer</apiName><shortdesc>
	IURIDereferencer définit une interface pour les objets qui résolvent les URI dans une signature XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	IURIDereferencer définit une interface pour les objets qui résolvent les URI dans une signature XML.
	 
	<p>L’implémentation IURIDereferencer est chargée de résoudre les URI spécifiés dans les éléments SignedInfo d’un fichier de signature XML, puis de renvoyer les données référencées dans un objet, tel que ByteArray, qui implémente l’interface IDataInput. <ph platform="javascript">Pour utiliser l’interface IURIDereferencer, vous devez créer une classe ActionScript qui implémente l’interface. Dans JavaScript, vous pouvez utiliser une balise <codeph>script</codeph> pour charger un fichier SWF contenant cette classe ActionScript.</ph></p>
	
	<p>L’interface dispose d’une méthode : <codeph>dereference()</codeph>. En général, l’implémentation requiert également une méthode permettant de transmettre à la méthode dereference l’objet de signature XML contenant les URI à résoudre.</p> 
	 
	 <p>L’interface IURIDereferencer est utilisée avec la classe XMLSignatureValidator.</p>
	
	</apiDesc><example conref="examples\IURIDereferencerExample.as"/></apiClassifierDetail><related-links><link href="flash.security.xml#XMLSignatureValidator"><linktext>XMLSignatureValidator</linktext></link><link href="flash.security.xml#XMLSignatureValidator/uriDereferencer"><linktext>XMLSignatureValidator.uriDereferencer</linktext></link></related-links><apiOperation id="flash.security:IURIDereferencer:flash.security:IURIDereferencer:dereference"><apiName>dereference</apiName><shortdesc>
		Résout et annule la référence de l’URI spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Données référencées par l’URI.
		</apiDesc><apiOperationClassifier>flash.utils:IDataInput</apiOperationClassifier></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>URI dont il faut annuler la référence.
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		Résout et annule la référence de l’URI spécifié.
		
		</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.security:SignerTrustSettings"><apiName>SignerTrustSettings</apiName><shortdesc>
	La classe SignerTrustSettings définit les constantes utilisées avec la propriété SignerTrustSettings d’un objet XMLSignatureValidator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	La classe SignerTrustSettings définit les constantes utilisées avec la propriété <codeph>SignerTrustSettings</codeph> d’un objet XMLSignatureValidator.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/signerTrustSettings"><linktext>XMLSignatureValidator.signerTrustSettings</linktext></link></related-links><apiValue id="flash.security:SignerTrustSettings:CODE_SIGNING"><apiName>CODE_SIGNING</apiName><shortdesc> 
	   Le certificat est approuvé pour la signature du code.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>codeSigning</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	   Le certificat est approuvé pour la signature du code. Ceci implique que le certificat soit lié à une racine approuvée, que cette racine soit approuvée pour la signature du code, et que le certificat de signature dispose de l’identificateur d’objet CodeSigning dans son extension d’utilisation avancée de la clé.
	   
	   </apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:SignerTrustSettings:PLAYLIST_SIGNING"><apiName>PLAYLIST_SIGNING</apiName><shortdesc> 
	   Le certificat est approuvé pour la signature des listes de lecture.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playlistSigning</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	   Le certificat est approuvé pour la signature des listes de lecture. Ceci implique que le certificat soit lié à une racine approuvée et dispose de l’identificateur d’objet PlaylistSigning dans son extension d’utilisation avancée de la clé.
	   
	   </apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:SignerTrustSettings:SIGNING"><apiName>SIGNING</apiName><shortdesc> 
	  Le certificat est approuvé pour la signature en général.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>signing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	  Le certificat est approuvé pour la signature en général. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.security:SignatureStatus"><apiName>SignatureStatus</apiName><shortdesc>
	La classe SignatureStatus définit les constantes utilisées par la propriété validityStatus d’un objet XMLSignatureValidator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	La classe SignatureStatus définit les constantes utilisées par la propriété <codeph>validityStatus</codeph> d’un objet XMLSignatureValidator.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/validityStatus"><linktext>XMLSignatureValidator.validityStatus</linktext></link></related-links><apiValue id="flash.security:SignatureStatus:INVALID"><apiName>INVALID</apiName><shortdesc> 
	Etat non valide.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Etat non valide.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:SignatureStatus:UNKNOWN"><apiName>UNKNOWN</apiName><shortdesc> 
	Etat inconnu.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Etat inconnu.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:SignatureStatus:VALID"><apiName>VALID</apiName><shortdesc> 
	Etat valide.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Etat valide.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.security:ReferencesValidationSetting"><apiName>ReferencesValidationSetting</apiName><shortdesc>
	La classe ReferencesValidationSetting définit les constantes utilisées par la propriété referencesValidationSetting d’un objet XMLSignatureValidator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	La classe ReferencesValidationSetting définit les constantes utilisées par la propriété <codeph>referencesValidationSetting</codeph> d’un objet XMLSignatureValidator.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/ReferencesValidationSetting"><linktext>XMLSignatureValidator.ReferencesValidationSetting</linktext></link></related-links><apiValue id="flash.security:ReferencesValidationSetting:NEVER"><apiName>NEVER</apiName><shortdesc> 
	Ne vérifiez jamais les références.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>never</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Ne vérifiez jamais les références.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:ReferencesValidationSetting:VALID_IDENTITY"><apiName>VALID_IDENTITY</apiName><shortdesc> 
	Ne vérifiez les références que si le certificat de signature est valide et approuvé.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>validIdentity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Ne vérifiez les références que si le certificat de signature est valide et approuvé.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:ReferencesValidationSetting:VALID_OR_UNKNOWN_IDENTITY"><apiName>VALID_OR_UNKNOWN_IDENTITY</apiName><shortdesc> 
	Vérifiez les références même si le certificat de signature n’est pas approuvé (c’est-à-dire s’il n’est pas lié à un certificat racine approuvé).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>validOrUnknownIdentity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Vérifiez les références même si le certificat de signature n’est pas approuvé (c’est-à-dire s’il n’est pas lié à un certificat racine approuvé).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.security:RevocationCheckSettings"><apiName>RevocationCheckSettings</apiName><shortdesc>
	La classe RevocationCheckSettings définit les constantes utilisées par la propriété revocationCheckSetting d’un objet XMLSignatureValidator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	La classe RevocationCheckSettings définit les constantes utilisées par la propriété <codeph>revocationCheckSetting</codeph> d’un objet XMLSignatureValidator.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.security.xml#XMLSignatureValidator/revocationCheckSetting"><linktext>XMLSignatureValidator.revocationCheckSetting</linktext></link></related-links><apiValue id="flash.security:RevocationCheckSettings:ALWAYS_REQUIRED"><apiName>ALWAYS_REQUIRED</apiName><shortdesc>
		Vérifie toujours la révocation des certificats.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>alwaysRequired</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Vérifie toujours la révocation des certificats. Les certificats ne disposant d’aucune information de révocation sont rejetés.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:RevocationCheckSettings:BEST_EFFORT"><apiName>BEST_EFFORT</apiName><shortdesc>
		La révocation des certificats est vérifiée si les informations de révocation sont disponibles et s’il est possible d’obtenir le statut de révocation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bestEffort</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		La révocation des certificats est vérifiée si les informations de révocation sont disponibles et s’il est possible d’obtenir le statut de révocation. S’il s’avère impossible de déterminer le statut de révocation, le certificat n’est pas rejeté.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:RevocationCheckSettings:NEVER"><apiName>NEVER</apiName><shortdesc>
		Ne vérifie pas la révocation des certificats.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>never</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Ne vérifie pas la révocation des certificats.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.security:RevocationCheckSettings:REQUIRED_IF_AVAILABLE"><apiName>REQUIRED_IF_AVAILABLE</apiName><shortdesc>
		Vérifie la révocation des certificats si le certificat comprend des informations sur la révocation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>requiredIfInfoAvailable</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Vérifie la révocation des certificats si le certificat comprend des informations sur la révocation. Si les informations sont disponibles, mais que le statut de la révocation ne peut pas être clairement déterminé, le certificat est rejeté.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>