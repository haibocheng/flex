<?xml version="1.0"?>
<apiPackage id="flash.text.engine"><apiName>flash.text.engine</apiName><apiDetail/><apiClassifier id="flash.text.engine:TextLine"><apiName>TextLine</apiName><shortdesc>
 La classe TextLine est utilisée pour afficher du texte dans la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObjectContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe TextLine est utilisée pour afficher du texte dans la liste d’affichage.
 
 <p>Il est impossible de créer un objet TextLine directement à partir du code ActionScript. Si vous appelez <codeph>new TextLine()</codeph>, une exception est renvoyée. Pour créer un objet TextLine, appelez la méthode <codeph>createTextLine()</codeph> d’un TextBlock.</p>
 
 <p>La TextLine encapsule le minimum d’informations nécessaires au rendu de son contenu. Vous pouvez récupérer d’autres informations très utiles pour l’interactivité par l’intermédiaire de méthodes décrivant les propriétés des atomes de la ligne. Le terme atome fait à la fois référence aux éléments graphiques et aux caractères (y compris aux groupes de combinaisons de caractère), entités indivisibles qui composent une ligne de texte. Il est important de noter que le lecteur ne crée pas ni ne stocke les données requises par ces méthodes avant que vous ne les appeliez. Pour ne pas surcharger la mémoire, évitez de créer des données d’atomes lorsque cela est inutile. Si les données d’atomes ne sont plus nécessaires, appelez la méthode <codeph>flushAtomData()</codeph> pour les mettre à la disposition du nettoyage.</p>
 
 <p>Les méthodes et propriétés suivantes génèrent des données d’atome lorsqu’elles n’existent pas :</p>
 <ul>
 <li><codeph>atomCount</codeph></li>
 <li><codeph>getAtomBidiLevel()</codeph></li>
 <li><codeph>getAtomBounds()</codeph></li>
 <li><codeph>getAtomCenter()</codeph></li>
 <li><codeph>getAtomIndexAtCharIndex()</codeph></li>
 <li><codeph>getAtomIndexAtPoint()</codeph></li>
 <li><codeph>getAtomGraphic()</codeph></li>
 <li><codeph>getAtomTextBlockBeginIndex()</codeph></li>
 <li><codeph>getAtomTextBlockEndIndex()</codeph></li>
 <li><codeph>getAtomTextRotation()</codeph></li>
 <li><codeph>getAtomWordBoundaryOnLeft()</codeph></li>
 </ul>
 
 
 <p>Après un déclenchement normal d’événements pour une ligne de texte, si la ligne est valide, les événements sont reproduits dans les diffuseurs d’événements spécifiés par les propriétés <codeph>eventMirror</codeph> des objets d’éléments de contenu ayant contribué à la ligne de texte. Ces objets sont enregistrés dans la propriété <codeph>TextLine.mirrorRegions</codeph>. Les événements ne sont pas reproduits si la propagation de l’événement a échoué ou a été interrompue, ou si la ligne de texte n’est pas valide.</p>
 
 <p>La mise en miroir des événements de souris est un cas à part. Etant donné que les zones miroir ne sont pas des objets d’affichage, les événements <codeph>mouseOver</codeph> et <codeph>mouseOut</codeph> sont simulés à leur place. Les événements <codeph>rollOver</codeph> et <codeph>rollOut</codeph> ne sont pas simulés. Tous les événements <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph> et <codeph>rollOut</codeph> qui se produisent naturellement (ciblés à la ligne de texte ou aux enfants de la ligne de texte) sont ignorés et ne sont donc pas mis en miroir.</p>
 
 <p>L’origine d’un objet de ligne de texte est le début de la ligne de base. Si vous ne définissez pas la position verticale (propriété <codeph>y</codeph>) d’une ligne contenant du texte latin sur une ligne de base de caractères romains, seuls les jambages du texte s’affichent sous le haut de l’objet Sprite auquel vous ajoutez la ligne de texte. Examinez le diagramme suivant :</p>
 
 <p><adobeimage alt="Lignes de base du texte" href="../../../images/TextLine.gif"/></p>
 
 <p>La classe TextLine descend de plusieurs autres classes, DisplayObjectContainer, InteractiveObject, DisplayObject et EventDispatcher, dont elle hérite les propriétés et les méthodes. Les propriétés héritées suivantes ne s’appliquent pas aux objets TextLine : </p>
 
 <ul>
 <li><codeph>contextMenu</codeph></li>
 <li><codeph>focusRect</codeph></li>
 <li><codeph>tabChildren</codeph></li>
 <li><codeph>tabEnabled</codeph></li>
 <li><codeph>tabIndex</codeph></li>
 <li><codeph>transformation</codeph></li>
 </ul>
 
 <p>Si vous tentez de définir ces propriétés, le moteur de saisie renvoie l’erreur : IllegalOperationError. Vous pouvez lire ces propriétés, mais elles contiennent toujours des valeurs par défaut.</p>
 
 </apiDesc><example conref="examples\TextLineExample.as"> Cet exemple affiche les diverses lignes de texte et étapes au travers des atomes d’un bloc de texte, en utilisant <codeph>getAtomBounds()</codeph> pour encadrer chacune d’elles.
    <ol>
        <li>Ajoutez le composant NumericStepper dans la bibliothèque.</li>
         <li>Enregistrez ce code sous le nom TextLineExample.as dans le même répertoire que votre fichier FLA.</li>
        <li>Dans la fenêtre Propriétés du fichier FLA, définissez Class sur TextLineExample.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.FontPosture;
    import flash.text.engine.FontWeight;
    import fl.controls.NumericStepper;
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public class TextLineExample extends Sprite {
        
        private var atomStepper:NumericStepper = new NumericStepper();
        private var atomDataContainer:Sprite;
        private var fontDescriptionItalic:FontDescription = new FontDescription("Arial", FontWeight.NORMAL, FontPosture.ITALIC);
        private var fontDescriptionNormal:FontDescription = new FontDescription("Arial", FontWeight.NORMAL , FontPosture.NORMAL);
        private var textBlock:TextBlock = new TextBlock();
        private var textLine:TextLine;
        
        public function TextLineExample():void {
            
            var myText:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. From the text block, " +
            "the createTextLine() method created these lines, 300 pixels wide, "  +
            "for display." ;
            
            atomStepper.minimum = 0;
            atomStepper.value = 0;
            atomStepper.width = 50;
            addChild(atomStepper);
            atomStepper.x = 20;
            atomStepper.y = 120;
            atomStepper.addEventListener(Event.CHANGE, nsChange);
            
            var directions:String = "Click up / down arrows to frame atoms in text block above.";
            
            var formatItalic:ElementFormat = new ElementFormat(fontDescriptionItalic);
            formatItalic.fontSize = 12;
            var textElement1:TextElement = new TextElement(directions, formatItalic);
            textBlock.content = textElement1;
            createLines(textBlock, 15, 160, 400, this);
            
            var formatNormal:ElementFormat = new ElementFormat(fontDescriptionNormal);
            formatNormal.fontSize = 16;
            var textElement2:TextElement = new TextElement(myText, formatNormal);
            textBlock.content = textElement2;
            createLines(textBlock, 15.0, 20.0, 300, this);
            textLine = textBlock.firstLine;
            atomStepper.maximum = textLine.atomCount - 1;
            showAtom(textLine, 0);
        }
            
        private function nsChange(event:Event):void
        {
            removeAtom(textLine);
            if (atomStepper.value == textLine.atomCount - 1)
            {
                if(textLine != textBlock.lastLine)
                {
                    textLine = textLine.nextLine;
                    atomStepper.maximum = textLine.atomCount - 1;
                    atomStepper.value = 0;
                }
            }
            showAtom(textLine, atomStepper.value);
        }
            
        private function createLines(textBlock, startX, startY, width, container)
        {
            var textLine:TextLine = textBlock.createTextLine (null, width);
            while (textLine)
            {
                textLine.x = startX;
                textLine.y = startY;
                startY += textLine.height + 2;
                container.addChild(textLine);
                textLine = textBlock.createTextLine (textLine, width);
            }
        }
            
        private function showAtom(textLine, i):void
        {
            var box:Sprite = new Sprite();
            var mcGraphics = box.graphics;
            var bounds:Rectangle = textLine.getAtomBounds(i);
            mcGraphics.lineStyle(1, 0xFF0000, 1.0);
            mcGraphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
            textLine.userData = textLine.addChild(box);
            displayAtomData(textLine,i);
        }
            
        private function displayAtomData(textLine, i)
        {
            if(atomDataContainer != null)
                removeChild(atomDataContainer);
            atomDataContainer=new Sprite();
            var format = new ElementFormat(fontDescriptionNormal);
            format.color = 0x00000FF;
            var n:int = 0;
            var nxtY:Number = 0;
            var atomInfo:String = "value of getAtomBidiLevel() is: " + textLine.getAtomBidiLevel(i)+"\n"
            +"value of getAtomCenter() is: " + textLine.getAtomCenter(i)+"\n"
            +"value of getAtomIndexAtCharIndex() is: " + textLine.getAtomIndexAtCharIndex(i)+"\n"
            +"value of getAtomTextBlockBeginIndex() is: " + textLine.getAtomTextBlockBeginIndex(i)+"\n"
            +"value of getAtomTextBlockEndIndex() is: " + textLine.getAtomTextBlockEndIndex(i)+"\n"
            +"value of getAtomTextRotation() is: " + textLine.getAtomTextRotation(i)+"\n";
            var atomtextBlock:TextBlock = new TextBlock();
            var textElement3:TextElement = new TextElement(atomInfo, format);
            atomtextBlock.content = textElement3;
            createLines(atomtextBlock,20,200,500, atomDataContainer)
            addChild(atomDataContainer);
        }
            
        private function removeAtom(textLine):void
        {
            textLine.removeChild(textLine.userData);
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links><apiOperation id="flash.text.engine:TextLine:dump"><apiName>dump</apiName><shortdesc>
	 Libère le contenu sous-jacent du TextLine sous forme de chaîne XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Libère le contenu sous-jacent du TextLine sous forme de chaîne XML. Cela peut se révéler utile lors de tests automatisés, et comprend le texte, la mise en forme et les informations de rendu. Disponible uniquement dans le débogueur Flash Player.
	 
	 <p>Pour une description du résultat, reportez-vous à la méthode TextBlock.dump().</p>
	 
	 <p><b>Remarque :</b> il est possible que le contenu et le format du résultat de cette méthode changent dans le futur. Adobe ne garantit pas la compatibilité ascendante de cette méthode.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/dump()"><linktext>TextBlock.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:flushAtomData"><apiName>flushAtomData</apiName><shortdesc>
	 Libère les données d’atomes de la ligne en vue d’un nettoyage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Libère les données d’atomes de la ligne en vue d’un nettoyage. Le terme <i>atome</i> fait référence aux entités indivisibles qui composent une ligne de texte. Le moteur de saisie génère des données d’atome lorsque vous accédez à la propriété <codeph>atomCount</codeph> ou lorsque vous appelez l’une des méthodes qui récupèrent des informations sur un atome.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>atomCount</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBidiLevel()"><linktext>getAtomBidiLevel()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBounds()"><linktext>getAtomBounds()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomCenter()"><linktext>getAtomCenter()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomGraphic()"><linktext>getAtomGraphic()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtCharIndex()"><linktext>getAtomIndexAtCharIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtPoint()"><linktext>getAtomIndexAtPoint()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockBeginIndex()"><linktext>getAtomTextBlockBeginIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockEndIndex()"><linktext>getAtomTextBlockEndIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>getAtomTextRotation()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomWordBoundaryOnLeft()"><linktext>getAtomWordBoundaryOnLeft()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBidiLevel"><apiName>getAtomBidiLevel</apiName><shortdesc>
	 Récupère le niveau bidirectionnel de l’atome au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Niveau bidirectionnel de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère le niveau bidirectionnel de l’atome au niveau de l’index spécifié. Déterminée par une combinaison de <codeph>TextBlock.bidiLevel</codeph> et des propriétés bidirectionnelles Unicode des caractères qui composent la ligne.
	 
	 <p>Par exemple, si vous commencez un bloc de texte par un texte hébreu, vous définissez <codeph>TextBlock.bidiLevel</codeph> sur 1, en définissant droite à gauche par défaut. Si le texte contient une citation en anglais (de gauche à droite), ce texte a un paramètre <codeph>AtomBidiLevel</codeph> de 2. Si le texte anglais contient une section en arabe (de droite à gauche), le paramètre <codeph>AtomBidiLevel</codeph> de ce texte passe à 3. Si le texte arabe contient un nombre (de gauche à droite), le paramètre <codeph>AtomBidiLevel</codeph> du nombre est 4. La ligne dans laquelle les atomes se terminent importe peu ; les atomes hébreux sont <codeph>AtomBidiLevel</codeph> 1, les atomes anglais sont <codeph>AtomBidiLevel</codeph> 2, les atomes arabes sont <codeph>AtomBidiLevel</codeph> 3 et les atomes de nombre sont <codeph>AtomBidiLevel</codeph> 4.</p>
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>TextBlock.bidiLevel</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBounds"><apiName>getAtomBounds</apiName><shortdesc>
	 Récupère les limites de l’atome au niveau de l’index spécifié par rapport à la ligne de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Limites de l’atome au niveau de <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère les limites de l’atome au niveau de l’index spécifié par rapport à la ligne de texte. Les limites de l’atome spécifié sont constituées de sa position horizontale (<codeph>x</codeph>) dans la ligne, de sa position verticale (<codeph>y</codeph>) dans la ligne, de sa largeur (<codeph>w</codeph>) et de sa hauteur (<codeph>h</codeph>). Toutes les valeurs sont en pixels. 
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomCenter"><apiName>getAtomCenter</apiName><shortdesc>
	 Récupère le centre de l’atome tel que mesuré le long de la ligne de base au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Centre de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère le centre de l’atome tel que mesuré le long de la ligne de base au niveau de l’index spécifié.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomGraphic"><apiName>getAtomGraphic</apiName><shortdesc>
	 Récupère le graphique de l’atome au niveau de l’index spécifié, ou null si l’atome est un caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Graphique de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère le graphique de l’atome au niveau de l’index spécifié, ou <codeph>null</codeph> si l’atome est un caractère.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtCharIndex"><apiName>getAtomIndexAtCharIndex</apiName><shortdesc>
	 Renvoie l’index de l’atome contenant le caractère spécifié par le paramètre charIndex, ou -1 si le caractère ne contribue à aucun atome dans la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de l’atome contenant le caractère au niveau de <codeph>charIndex</codeph>. Renvoie -1 si le caractère ne contribue à aucun atome dans la ligne.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro du caractère (par exemple, le premier caractère est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie l’index de l’atome contenant le caractère spécifié par le paramètre <codeph>charIndex</codeph> ou -1 si le caractère ne contribue à aucun atome dans la ligne. Le paramètre <codeph>charIndex</codeph> est relatif à l’ensemble du contenu du bloc de texte contenant la ligne.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtPoint"><apiName>getAtomIndexAtPoint</apiName><shortdesc>
	 Renvoie l’index de l’atome situé au niveau du point spécifié par les paramètres x et y, ou -1 s’il n’y a pas d’atome au niveau de ce point.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de l’atome sous le point. Renvoie -1 si le point n’est pas au-dessus d’un atome.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>stageX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Coordonnée globale <i>x</i> du point à tester.
	 </apiDesc></apiParam><apiParam><apiItemName>stageY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Coordonnée globale <i>y</i> du point à tester.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie l’index de l’atome situé au niveau du point spécifié par les paramètres <codeph>x</codeph> et <codeph>y</codeph> ou -1 s’il n’y a pas d’atome au niveau de ce point.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 <p>Cette méthode prend les coordonnées globales de sorte qu’elles puissent être aisément utilisées avec les propriétés <codeph>MouseEvent.stageX</codeph> et <codeph>MouseEvent.stageY</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockBeginIndex"><apiName>getAtomTextBlockBeginIndex</apiName><shortdesc>
	 Récupère l’index de début du bloc de texte de l’atome au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de début du bloc de texte de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère l’index de début du bloc de texte de l’atome au niveau de l’index spécifié.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockEndIndex"><apiName>getAtomTextBlockEndIndex</apiName><shortdesc>
	 Récupère l’index de fin du bloc de texte de l’atome au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de fin du bloc de texte de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère l’index de fin du bloc de texte de l’atome au niveau de l’index spécifié.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextRotation"><apiName>getAtomTextRotation</apiName><shortdesc>
	 Récupère la rotation de l’atome au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Rotation de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère la rotation de l’atome au niveau de l’index spécifié. Des constantes TextRotation sont utilisées pour cette propriété. La rotation de l’atome correspond aux rotations cumulées de l’élément et de la ligne. Il est principalement utilisé pour définir l’orientation du caret (curseur) lors de l’interaction avec le TextLine.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomWordBoundaryOnLeft"><apiName>getAtomWordBoundaryOnLeft</apiName><shortdesc>
	 Indique s’il existe ou non une limite de mot à gauche de l’atome au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index de l’atome spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Valeur booléenne qui indique s’il existe ou non une limite de mot à gauche de l’atome au niveau de <codeph>atomIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de l’atome (par exemple, le premier atome est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Indique s’il existe ou non une limite de mot à gauche de l’atome au niveau de l’index spécifié. Les limites de mot sont déterminées à partir des propriétés Unicode des caractères qui constituent la ligne.
	 
	 <p>Un appel à cette méthode oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getBaselinePosition"><apiName>getBaselinePosition</apiName><shortdesc>
	 Récupère la position de la ligne de base spécifiée par rapport au TextBlock.baselineZero.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si la <codeph>baseline</codeph> spécifiée n’appartient pas à <codeph>TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Position de la ligne de base spécifiée par rapport à <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Ligne de base pour laquelle la position doit être récupérée. Utilisez des valeurs <codeph>TextBaseline</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère la position de la ligne de base spécifiée par rapport au <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getMirrorRegion"><apiName>getMirrorRegion</apiName><shortdesc>
	 Renvoie le premier TextLineMirrorRegion de la ligne dont la propriété mirror correspond à celle spécifiée par le paramètre mirror, ou null s’il n’y a pas de correspondance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Premier <codeph>TextLineMirrorRegion</codeph> de la ligne dont la propriété <codeph>mirror</codeph> correspond à la valeur spécifiée, ou <codeph>null</codeph> s’il n’y a pas de correspondance.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLineMirrorRegion</apiOperationClassifier></apiReturn><apiParam><apiItemName>mirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiDesc>Objet miroir <codeph>EventDispatcher</codeph> à rechercher.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie le premier <codeph>TextLineMirrorRegion</codeph> de la ligne dont la propriété <codeph>mirror</codeph> correspond à celle spécifiée par le paramètre <codeph>mirror</codeph>, ou <codeph>null</codeph> s’il n’y a pas de correspondance.
	 <p>Même un seul <codeph>TextElement</codeph> peut produire plusieurs objets <codeph>TextLineMirrorRegion</codeph> sur une ou plusieurs lignes, selon les paramètres bidirectionnel et de saut de ligne. Les propriétés <codeph>nextRegion</codeph> et <codeph>previousRegion</codeph> relient toutes les zones miroir générées par un élément de texte.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextLine:MAX_LINE_WIDTH"><apiName>MAX_LINE_WIDTH</apiName><shortdesc> 
	Largeur maximale requise d’une ligne de texte, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000000</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	Largeur maximale requise d’une ligne de texte, en pixels. La méthode <codeph>TextBlock.createTextLine()</codeph> utilise cette constante comme valeur par défaut du paramètre <codeph>width</codeph>, si vous ne spécifiez pas de valeur.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:userData"><apiName>userData</apiName><shortdesc>
	 Permet à l’auteur d’associer des données arbitraires à la ligne de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Permet à l’auteur d’associer des données arbitraires à la ligne de texte. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:ascent:get"><apiName>ascent</apiName><shortdesc>
	 Spécifie le nombre de pixels séparant la ligne de base du haut des plus grands caractères de la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Spécifie le nombre de pixels séparant la ligne de base du haut des plus grands caractères de la ligne. Dans le cas d’un TextLine contenant uniquement un élément graphique, <codeph>ascent</codeph> est défini sur 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:atomCount:get"><apiName>atomCount</apiName><shortdesc>
	 Nombre d’atomes dans la ligne, correspondant au nombre d’éléments indivisibles, espaces et éléments graphiques compris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>La <codeph>validité</codeph> de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Nombre d’atomes dans la ligne, correspondant au nombre d’éléments indivisibles, espaces et éléments graphiques compris.
	 
	 <p>L’accès à cette propriété oblige le lecteur à créer les données d’atome lorsqu’elles n’existent pas encore.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:descent:get"><apiName>descent</apiName><shortdesc>
	 Spécifie le nombre de pixels séparant la ligne de base du bas des caractères descendants les plus bas de la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Spécifie le nombre de pixels séparant la ligne de base du bas des caractères descendants les plus bas de la ligne. Dans le cas d’un TextLine contenant uniquement un élément graphique, <codeph>descent</codeph> est défini sur 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:hasGraphicElement:get"><apiName>hasGraphicElement</apiName><shortdesc>
	 Indique si la ligne de texte contient des éléments graphiques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Indique si la ligne de texte contient des éléments graphiques.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:mirrorRegions:get"><apiName>mirrorRegions</apiName><shortdesc>
	 Vecteur contenant les objets TextLineMirrorRegion associés à la ligne, ou null lorsqu’il n’y en a pas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flash.text.engine:TextLineMirrorRegion"/></apiValueDef><apiDesc>
	 Vecteur contenant les objets <codeph>TextLineMirrorRegion</codeph> associés à la ligne, ou <codeph>null</codeph> lorsqu’il n’y en a pas.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:nextLine:get"><apiName>nextLine</apiName><shortdesc>
	 Prochain TextLine du TextBlock, ou null si la ligne en cours est la dernière ligne du bloc ou si sa validité est TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Prochain TextLine du TextBlock, ou <codeph>null</codeph> si la ligne en cours est la dernière ligne du bloc ou si sa validité est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/previousLine"><linktext>previousLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:previousLine:get"><apiName>previousLine</apiName><shortdesc>
	 TextLine précédent du TextBlock, ou null s’il s’agit de la première ligne du bloc ou si la validité de la ligne est TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextLine précédent du TextBlock, ou <codeph>null</codeph> s’il s’agit de la première ligne du bloc ou si la validité de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/nextLine"><linktext>nextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:rawTextLength:get"><apiName>rawTextLength</apiName><shortdesc>
	 Longueur du texte brut dans le bloc de texte devenant la ligne, y compris les caractères U+FDEF représentant des éléments graphiques et tous les espaces à droite faisant partie de la ligne mais non affichés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Longueur du texte brut dans le bloc de texte devenant la ligne, y compris les caractères U+FDEF représentant des éléments graphiques et tous les espaces à droite faisant partie de la ligne mais non affichés.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement/rawText"><linktext>TextElement.rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:specifiedWidth:get"><apiName>specifiedWidth</apiName><shortdesc>
	 Largeur spécifiée à la méthode TextBlock.createTextLine() lors de la création de la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Largeur spécifiée à la méthode <codeph>TextBlock.createTextLine()</codeph> lors de la création de la ligne. Cette valeur est très utile lorsque l’on doit décider si une modification nécessite une nouvelle séparation de la ligne.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link><link href="flash.text.engine.xml#TextLine/unjustifiedTextWidth"><linktext>unjustifiedTextWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 TextBlock contenant cette ligne de texte, ou null si la validité de la ligne est TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock contenant cette ligne de texte, ou null si la validité de la ligne est <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 Index du premier caractère de la ligne dans le texte brut du bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Index du premier caractère de la ligne dans le texte brut du bloc de texte.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 Hauteur logique de la ligne de texte, égale à ascent + descent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Hauteur logique de la ligne de texte, égale à <codeph>ascent </codeph> + <codeph>descent</codeph>. Pour obtenir la hauteur encrée, accédez à la propriété <codeph>height</codeph> héritée.
	 
	 <p>La valeur est calculée à partir de la différence entre les lignes de base qui limitent la ligne, ideo top/bottom ou ascent/descent, selon si TextBlock.baselineZero est ideo ou non. Les éléments graphiques ne sont pas pris en compte lors du calcul de ces lignes de base.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/height"><linktext>flash.display.DisplayObject.height</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 Largeur logique de la ligne de texte, correspondant à la largeur utilisée par le moteur de saisie pour positionner la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Largeur logique de la ligne de texte, correspondant à la largeur utilisée par le moteur de saisie pour positionner la ligne. Accédez à la propriété héritée <codeph>width</codeph> pour obtenir la largeur réelle du cadre de sélection de tous les pixels dessinés.
	 
	 </apiDesc><example conref="examples\TextLine_textWidthExample.as"> Cet exemple affiche une ligne une fois en posture normale et une fois en italique, et suit les valeurs des propriétés <codeph>specifiedWidth</codeph>, <codeph>textWidth</codeph> et <codeph>width</codeph> dans chaque cas. Le résultat du suivi est : 
 <ul>
         <li>specifiedWidth : 500</li>
      <li>textWidth : 268.9921875</li>
      <li>width : 269</li>
      <li>specifiedWidth : 500</li>
      <li>textWidth : 267.52734375</li>
      <li>width : 267.55</li>
 </ul>
<codeblock>
 
package {
import flash.display.Sprite;
import flash.text.engine.TextBlock;
import flash.text.engine.TextElement;
import flash.text.engine.TextLine;
import flash.text.engine.FontDescription;
import flash.text.engine.ElementFormat;
import flash.text.engine.FontPosture;

    public class TextLine_textWidthExample extends Sprite {
        
        public function TextLine_textWidthExample() {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
            var yPos:Number = 20;
            var fontDescription:FontDescription = new FontDescription();
            var textBlock:TextBlock = new TextBlock();
            fontDescription.fontPosture = FontPosture.NORMAL;
            var format:ElementFormat = new ElementFormat(fontDescription, 12);
            var textElement:TextElement = new TextElement(str, format);
            textBlock.content = textElement;
            createLine(textBlock, yPos);
            var fontDescriptionItalic = fontDescription.clone();
            fontDescriptionItalic.fontPosture = FontPosture.ITALIC;
            var formatItalic = new ElementFormat(fontDescriptionItalic, 12);
            textElement = new TextElement(str, formatItalic);
            textBlock.content = textElement;
            createLine(textBlock, yPos + 20);
        }

        private function createLine(textBlock:TextBlock, yPos:Number):void {
            var textLine:TextLine = textBlock.createTextLine (null, 500);
            trace("specifiedWidth is: " + textLine.specifiedWidth);
            trace("textWidth is: " + textLine.textWidth);
            trace("width is: " + textLine.width);
            addChild(textLine);
            textLine.x = 15;
            textLine.y = yPos;     
        }
    }
}

</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/specifiedWidth"><linktext>specifiedWidth</linktext></link><link href="flash.display.xml#DisplayObject/width"><linktext>flash.display.DisplayObject.width</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc>
	 Largeur de la ligne si elle n’était pas justifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Largeur de la ligne si elle n’était pas justifiée. Dans le cas de texte non justifié, cette valeur est identique à <codeph>textWidth</codeph>. Dans le cas de texte justifié, cette valeur correspond à ce qu’aurait été la longueur sans justification et <codeph>textWidth</codeph> représente la largeur réelle de la ligne. Par exemple, lorsque la chaîne suivante est justifiée et envoyée à <codeph>TextBlock.createTextLine()</codeph> avec une largeur de 500, sa largeur réelle est de 500 mais sa largeur non justifiée de 268.9921875.
	 
	 </apiDesc><example>Lorsque la chaîne de l’exemple suivant est justifiée et envoyée à TextBlock.createTextLine() avec une largeur de 500, elle obtient une largeur réelle de 500 mais a une largeur non justifiée de 268.9921875.
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import flash.text.engine.TextBlock;
	 import flash.text.engine.TextElement;
	 import flash.text.engine.TextLine;
	 import flash.text.engine.FontDescription;
	 import flash.text.engine.ElementFormat;
	 import flash.text.engine.SpaceJustifier;
	 import flash.text.engine.LineJustification;

	 var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
	 var fontDescription:FontDescription = new FontDescription();
	 var textBlock:TextBlock = new TextBlock();
	 var format:ElementFormat = new ElementFormat(fontDescription, 12);
	 var textElement:TextElement = new TextElement(str, format);
	 textBlock.content = textElement;
	 var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_INCLUDING_LAST);
	 textBlock.textJustifier = spaceJustifier;
	 var textLine:TextLine = textBlock.createTextLine(null, 500);
	 textLine.y = 20;

	 addChild(textLine);
	 trace("textWidth value is: " + textLine.textWidth);		// 500.00244140625
	 trace("unjustifiedTextWidth is: " + textLine.unjustifiedTextWidth); // 268.9921875
	 </codeblock>
	 
	 </example></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextLine/specifiedTextWidth"><linktext>specifiedTextWidth</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:validity:get"><apiName>validity</apiName><shortdesc>
	 Spécifie la validité actuelle de la ligne de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la valeur actuelle est <codeph>TextLineValidity.STATIC</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si la valeur actuelle est <codeph>TextLineValidity.INVALID</codeph> et que la nouvelle valeur est autre que <codeph>TextValidity.STATIC</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si la valeur actuelle est <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> et que la nouvelle valeur est <codeph>TextLineValidity.VALID</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si la nouvelle valeur est <codeph>TextLineValidity.POSSIBLY_INVALID</codeph>.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie la validité actuelle de la ligne de texte. Les valeurs valides pour cette propriété sont les membres de la classe <codeph>TextLineValidity</codeph>. Les règles de définition de cette propriété sont les suivantes :
	 
	 <p>Une ligne est considérée USER_INVALID si la validité est définie sur une chaîne quelconque, non membre de <codeph>TextLineValidity</codeph>. USER_INVALID est une abstraction utilisée ici pour représenter une telle valeur.</p>
	 
	 <p>Lorsque le contenu du TextBlock est modifié, le code du lecteur marque les lignes de texte affectées, la ligne précédente et toutes les lignes suivantes comme INVALID. La ligne précédente doit être désignée comme non valide lorsqu’une modification l’autorise à absorber une partie du contenu auparavant sur la première ligne affectée.</p>
	 
	 <p>Les lignes nouvellement séparées sont toujours VALID. Le lecteur peut faire passer les lignes suivantes de VALID à POSSIBLY_INVALID ou à INVALID. Il peut transformer les lignes POSSIBLY_INVALID en VALID si les sauts de ligne correspondent ou en INVALID dans le cas contraire.</p>
	 
	 <p>Le code de l’utilisateur peut marquer les lignes VALID en INVALID ou en USER_INVALID, et les lignes USER_INVALID en VALID. Le code de l’utilisateur ne peut pas marquer des lignes comme POSSIBLY_INVALID.</p>
	 
	 <p>Le code de l’utilisateur peut marquer n’importe quelle ligne STATIC. Dans ce cas, le membre du <codeph>bloc</codeph> devient <codeph>null</codeph>. L’opération efface également les données de l’atome de la ligne et empêche de les recréer. Tous les éléments graphiques d’une ligne de texte STATIC sont supprimés et réaparentés s’ils font partie d’une nouvelle séparation de ligne de texte du bloc de texte d’où dérive à l’origine la ligne de texte STATIC.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabStop"><apiName>TabStop</apiName><shortdesc>
 La classe TabStop représente les propriétés d’un taquet de tabulation dans un bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe TabStop représente les propriétés d’un taquet de tabulation dans un bloc de texte. Vous affectez les taquets de tabulation en tant que vecteur d’objets TabStop à la propriété <codeph>TextBlock.tabStops</codeph>.
 
 <p>La définition des propriétés d’un objet TabStop après son application à un TextBlock n’invalide pas le TextBlock.</p>
 
 </apiDesc><example conref="examples\TabStopExample.as"> Cet exemple illustre les effets de quatre paramètres d’alignement des taquets de tabulation - START, CENTER, DECIMAL et END.
<codeblock>
package {
    
    import flash.text.engine.*;
    import flash.display.Sprite;
    
    public class TabStopExample extends Sprite {
        
        public function TabStopExample():void {
            var container:Sprite = new Sprite(); 
            
            var english:ElementFormat = new ElementFormat(); 
            english.fontDescription = new FontDescription("Arial"); 
            english.fontSize = 16;
            english.locale = "en"; 
            
            var tabStops:Vector.&lt;TabStop> = new Vector.&lt;TabStop>();    
            tabStops.push(
                new TabStop(TabAlignment.START, 20),
                new TabStop(TabAlignment.CENTER, 120),
                new TabStop(TabAlignment.DECIMAL, 220, "."),
                new TabStop(TabAlignment.END, 320)
            ); 
    
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(
                "\tstart\tcenter\tdeci.mal\tend\n" +        
                "\tl\tl\t3.4\tl\n" +
                "\tlm\tlm\t234.56\tlm\n" +
                "\tlmn\tlmn\t12345678.34567\tlmn\n"
                , english); 
            textBlock.tabStops = tabStops;
            var y:Number = 60;
            var previousTextLine:TextLine = null; 
            var textLine:TextLine;
            var i:int;
            var tabOrigin:Number = 100;
            for (i = 0; i &lt; 4; i++) {
                textLine = textBlock.createTextLine(previousTextLine, 1000, 0); 
                textLine.x = 20;
                textLine.y = y; 
                
                container.addChild(textLine);     
                
                y += 25; 
                previousTextLine = textLine; 
            }
            addChild(container);        
        }
    }
}

</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>TextBlock.tabStops</linktext></link><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links><apiConstructor id="flash.text.engine:TabStop:TabStop"><apiName>TabStop</apiName><shortdesc>
	 Crée un nouveau TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Le paramètre <codeph>alignment</codeph> spécifié n’appartient pas à <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>alignment</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>start</apiData><apiDesc>Type d’alignement de tabulation de ce taquet de tabulation. Les valeurs valides de cette propriété sont les membres de la classe <codeph>TabAlignment</codeph>. La valeur par défaut est <codeph>TabAlignment.START</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Position de l’arrêt de tabulation, en pixels. La valeur par défaut est <codeph>0.0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>decimalAlignmentToken</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Symbole d’alignement à utiliser si le paramètre <codeph>alignment</codeph> est <codeph>TabAlignment.DECIMAL</codeph>. La valeur par défaut est <codeph>""</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Crée un nouveau TabStop.
     </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:TabStop:alignment:get"><apiName>alignment</apiName><shortdesc>
	 Spécifie l’alignement de tabulation de ce taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie l’alignement de tabulation de ce taquet de tabulation. Utilisez les constantes de la classe TabAlignment pour définir cette propriété.
	 
	 <p>La valeur par défaut est <codeph>TabAlignment.START</codeph>.</p>
	 
	 <p>Utilisez l’argument <codeph>lineOffset</codeph> sur <codeph>TextBlock.createTextLine()</codeph> pour ajuster les tabulations si l’origine de la ligne ne s’aligne pas sur les autres lignes partageant les mêmes taquets de tabulation.</p>
	 
	 <p>Utilisez les constantes suivantes de la classe TabAlignment pour définir la valeur de cette propriété :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TabAlignment.START</codeph></entry>
	 	<entry>La propriété <codeph>position</codeph> spécifie le nombre de pixels séparant le <i>début</i> du texte tabulé du début de la ligne de texte.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.CENTER</codeph></entry>
	 	<entry>La propriété <codeph>position</codeph> spécifie le nombre de pixels séparant le <i>centre</i> du texte tabulé du début de la ligne de texte.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.END</codeph></entry>
	 	<entry>La propriété <codeph>position</codeph> spécifie le nombre de pixels séparant la <i>fin</i> du texte tabulé du début de la ligne de texte.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.DECIMAL</codeph></entry>
	 	<entry>La propriété <codeph>position</codeph> spécifie le nombre de pixels séparant le symbole d’alignement du début de la ligne de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
	 Spécifie le symbole d’alignement à utiliser lorsque vous définissez la propriété alignment sur TabAlignment.DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Spécifie le symbole d’alignement à utiliser lorsque vous définissez la propriété <codeph>alignment</codeph> sur <codeph>TabAlignment.DECIMAL</codeph>. La valeur est une chaîne qui apparaît dans la ligne de texte.
	 
	 <p>La valeur par défaut est <codeph>""</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment/DECIMAL"><linktext>TabAlignment.DECIMAL</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:position:get"><apiName>position</apiName><shortdesc>
	 Position du taquet de tabulation, en pixels, par rapport au début de la ligne de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Si défini sur une valeur inférieure à 0.0.
   	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Position du taquet de tabulation, en pixels, par rapport au début de la ligne de texte.
	 
	 <p>La valeur par défaut est 0.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontLookup"><apiName>FontLookup</apiName><shortdesc>
La classe FontLookup est une énumération de valeurs constantes utilisées avec FontDescription.fontLookup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe FontLookup est une énumération de valeurs constantes utilisées avec <codeph>FontDescription.fontLookup</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links><apiValue id="flash.text.engine:FontLookup:DEVICE"><apiName>DEVICE</apiName><shortdesc> 
	Utilisé pour indiquer une recherche de police de périphérique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer une recherche de police de périphérique. Flash Player exploite les polices qui sont installées sur le système qui exécute le fichier SWF.
	
	<p>L’utilisation de polices de périphérique réduit la taille des fichiers d’animation, car les données relatives à la police ne figurent pas dans le fichier.</p>
	
	<p>Le texte rendu avec des polices de périphérique ne s’affiche pas toujours de la même façon sur les différents systèmes et les différentes plates-formes car Flash Player utilise les polices qui sont installées sur le système.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontLookup:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc> 
	Utilisé pour indiquer une recherche de police CFF intégrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer une recherche de police CFF intégrée. Flash Player utilise des polices vectorielles intégrées dans le fichier SWF publié.
	
	<p>Les champs texte qui recourent à des polices intégrées sont toujours affichés dans la police choisie, que cette police soit installée ou non sur le système de lecture.</p>
	
	<p>L’un des principaux désavantages des polices intégrées est qu’elles augmentent la taille du fichier SWF.</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TypographicCase"><apiName>TypographicCase</apiName><shortdesc>
La classe TypographicCase est une énumération de valeurs constantes utilisées pour définir la propriété typographicCase de la classe ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe TypographicCase est une énumération de valeurs constantes utilisées pour définir la propriété <codeph>typographicCase</codeph> de la classe ElementFormat. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/typographicCase"><linktext>ElementFormat.typographicCase</linktext></link></related-links><apiValue id="flash.text.engine:TypographicCase:CAPS"><apiName>CAPS</apiName><shortdesc> 
	Spécifie que l’espacement est ajusté pour les caractères majuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que l’espacement est ajusté pour les caractères majuscules en sortie.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:CAPS_AND_SMALL_CAPS"><apiName>CAPS_AND_SMALL_CAPS</apiName><shortdesc> 
	Spécifie que tous les caractères minuscules utilisent des glyphes de petites majuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsAndSmallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que tous les caractères minuscules utilisent des glyphes de petites majuscules en sortie.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Spécifie la casse typographique par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie la casse typographique par défaut. Les résultats dépendent de la police ; les caractères utilisent les paramètres spécifiés par le concepteur de polices sans qu’aucune fonction ne soit appliquée. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 
	Spécifie que tous les caractères utilisent des glyphes minuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que tous les caractères utilisent des glyphes minuscules en sortie.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:SMALL_CAPS"><apiName>SMALL_CAPS</apiName><shortdesc> 
	Spécifie que les caractères majuscules utilisent des glyphes de petites majuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>smallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que les caractères majuscules utilisent des glyphes de petites majuscules en sortie.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:TITLE"><apiName>TITLE</apiName><shortdesc> 
	Spécifie que les caractères majuscules utilisent des glyphes de titre en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>title</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que les caractères majuscules utilisent des glyphes de titre en sortie.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 
	Spécifie que tous les caractères utilisent des glyphes majuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que tous les caractères utilisent des glyphes majuscules en sortie.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitCase"><apiName>DigitCase</apiName><shortdesc>
La classe DigitCase est une énumération de valeurs constantes utilisées pour définir la propriété digitCase de la classe ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe DigitCase est une énumération de valeurs constantes utilisées pour définir la propriété <codeph>digitCase</codeph> de la classe ElementFormat. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitCase"><linktext>flash.text.engine.ElementFormat.digitCase</linktext></link></related-links><apiValue id="flash.text.engine:DigitCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Permet de spécifier la casse des chiffres par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier la casse des chiffres par défaut. Les résultats dépendent de la police ; les caractères utilisent les paramètres spécifiés par le concepteur de polices sans qu’aucune fonction ne soit appliquée. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:LINING"><apiName>LINING</apiName><shortdesc> 
	Permet de spécifier la casse des chiffres des lignes par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lining</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier la casse des chiffres des lignes par défaut.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:OLD_STYLE"><apiName>OLD_STYLE</apiName><shortdesc> 
	Permet de spécifier l’ancienne casse des chiffres du style.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>oldStyle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier l’ancienne casse des chiffres du style.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextElement"><apiName>TextElement</apiName><shortdesc>
 La classe TextElement représente une chaîne de texte mis en forme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe TextElement représente une chaîne de texte mis en forme. Affectez un objet TextElement à la propriété <codeph>content</codeph> d’un objet TextBlock pour créer un bloc de texte. Affectez-le à un objet GroupElement pour le combiner avec d’autres éléments de texte et graphiques en une seule unité. Utilisez la classe ElementFormat pour mettre le texte en forme.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:TextElement:TextElement"><apiName>TextElement</apiName><shortdesc>
	 Crée une nouvelle occurrence de TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Texte de l’élément. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Format de l’élément pour le texte dans l’élément. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet <codeph>EventDispatcher</codeph> qui reçoit des copies de chaque événement déclenché vers les lignes de texte créées en fonction de cet élément de contenu. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Rotation appliquée à l’élément en tant qu’unité. Utilisez les constantes <codeph>flash.text.engine.TextRotation</codeph> pour cette propriété. La valeur par défaut est <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Crée une nouvelle occurrence de TextElement. 
	 
	 </apiDesc><example conref="examples\TextElementExample.as"> L’exemple suivant crée un objet TextElement à partir d’une chaîne de texte, le met en forme à l’aide d’une taille de police de 12 et la couleur rouge (0xCC0000) et l’affecte à la propriété <codeph>content</codeph> d’un TextBlock. Il appelle la fonction createLines() pour couper le bloc de texte en lignes de 150 pixels chacune.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    
    public class TextElementExample extends Sprite {
        
        public function TextElementExample():void {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:TextElement:replaceText"><apiName>replaceText</apiName><shortdesc>
	 Remplace la plage de caractères que les paramètres beginIndex et endIndex spécifient par le contenu du paramètre newText.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>La valeur <codeph>beginIndex</codeph> ou <codeph>endIndex</codeph> est hors limite.
     	 
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro pour la position de début de la plage de remplacement.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro suivant la position de fin de la plage de remplacement.
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Texte à utiliser pour remplacer la plage de caractères spécifiée.
	  
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Remplace la plage de caractères que les paramètres <codeph>beginIndex</codeph> et <codeph>endIndex</codeph> spécifient par le contenu du paramètre <codeph>newText</codeph>. Les valeurs <codeph>beginIndex</codeph> et <codeph>endIndex</codeph> font référence au contenu en cours de <codeph>text</codeph>.
	 <p>Pour supprimer le texte, transmettez <codeph>null</codeph> pour <codeph>newText</codeph>.</p>
	 <p>Pour insérer du texte, transmettez la même valeur pour <codeph>beginIndex</codeph> et <codeph>endIndex</codeph>. Le nouveau texte est inséré avant l’index spécifié.</p>
	 <p>Pour ajouter du texte, transmettez <codeph>text.length</codeph> pour <codeph>beginIndex</codeph> et <codeph>endIndex</codeph>.</p>
	 <p>Pour définir tout le texte, transmettez 0 pour <codeph>beginIndex</codeph> et <codeph>text.length</codeph> pour <codeph>endIndex</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextElement_replaceTextExample.as"> Cet exemple appelle plusieurs fois <codeph>replaceText()</codeph> pour effectuer les opérations suivantes :
     <ul>
         <li> Insérer une chaîne au début du texte</li>
         <li> Ajouter une chaîne à la fin du texte</li>
         <li> Insérer une chaîne au milieu du texte</li>
        <li> Remplacer l’ensemble du texte par un nouveau texte</li>
    </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    
    
    public class TextElement_replaceTextExample extends Sprite {
        public function TextElement_replaceTextExample():void {
            
            var str:String = "0123456";
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 14;
            var textElement:TextElement = new TextElement(str, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textElement.replaceText(0, 0, "abc");  
            createLine(textBlock, 20);           //"abc0123456"
            textElement.replaceText(10, 10, "abc");   
            createLine(textBlock, 40);            // "abc0123456abc"
            textElement.replaceText(5, 8, "abc");
            createLine(textBlock, 60);         // "abc01abc56abc"
            textElement.replaceText(0, 13, "abc");
            createLine(textBlock, 80);            // "abc"
            textElement.replaceText(0, 3, "That's all she wrote!");
            createLine(textBlock, 100);        // "That's all she wrote" */
        }
            
        private function createLine(textBlock:TextBlock, y:Number):void {
            var textLine:TextLine = textBlock.createTextLine(null, 150);
            textLine.x = 10;
            textLine.y = y;
            addChild(textLine);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextElement:text:set"><apiName>text</apiName><shortdesc>
	 Reçoit le texte correspondant au contenu de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Reçoit le texte correspondant au contenu de l’élément.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineValidity"><apiName>TextLineValidity</apiName><shortdesc>
La classe TextLineValidity énumère les valeurs constantes utilisées lors de la définition de la propriété validity de la classe TextLine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe TextLineValidity énumère les valeurs constantes utilisées lors de la définition de la propriété <codeph>validity</codeph> de la classe TextLine. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link></related-links><apiValue id="flash.text.engine:TextLineValidity:INVALID"><apiName>INVALID</apiName><shortdesc> 
	Spécifie que la ligne n’est pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que la ligne n’est pas valide.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:POSSIBLY_INVALID"><apiName>POSSIBLY_INVALID</apiName><shortdesc> 
	Spécifie que la ligne de texte n’est peut-être pas valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>possiblyInvalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que la ligne de texte n’est peut-être pas valide. Flash Player utilise cette validité lorsqu’il refait les sauts de ligne d’un bloc de texte précédemment coupé dont le contenu n’a pas changé. Vous ne pouvez pas définir cette valeur.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:STATIC"><apiName>STATIC</apiName><shortdesc> 
	Spécifie que la ligne est statique, que la connexion entre la ligne et le bloc de texte a été coupée et que les données d’atome inutiles pour le rendu ont été effacées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>static</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que la ligne est statique, que la connexion entre la ligne et le bloc de texte a été coupée et que les données d’atome inutiles pour le rendu ont été effacées.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:VALID"><apiName>VALID</apiName><shortdesc> 
	Spécifie que la ligne de texte est valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie que la ligne de texte est valide.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontPosture"><apiName>FontPosture</apiName><shortdesc>
La classe FontPosture est une énumération de valeurs constantes utilisées avec FontDescription.fontPosture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe FontPosture est une énumération de valeurs constantes utilisées avec <codeph>FontDescription.fontPosture</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontPosture"><linktext>flash.text.engine.FontDescription.fontPosture</linktext></link></related-links><apiValue id="flash.text.engine:FontPosture:ITALIC"><apiName>ITALIC</apiName><shortdesc> 
	Utilisé pour indiquer une police italique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer une police italique.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontPosture:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Utilisé pour indiquer une police normale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer une police normale.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:JustificationStyle"><apiName>JustificationStyle</apiName><shortdesc>
La classe JustificationStyle énumère les valeurs constantes utilisées lors de la définition de la propriété justificationStyle de la classe EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe JustificationStyle énumère les valeurs constantes utilisées lors de la définition de la propriété <codeph>justificationStyle</codeph> de la classe EastAsianJustifier. Ces constantes spécifient les options de gestion des caractères kinsoku, c’est-à-dire des caractères japonais qui ne peuvent pas s’afficher au début ou à la fin d’une ligne.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/justificationStyle"><linktext>EastAsianJustifier.justificationStyle</linktext></link></related-links><apiValue id="flash.text.engine:JustificationStyle:PRIORITIZE_LEAST_ADJUSTMENT"><apiName>PRIORITIZE_LEAST_ADJUSTMENT</apiName><shortdesc> 
	Base la justification sur le développement ou la compression de la ligne, selon le résultat se rapprochant le plus de la largeur désirée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>prioritizeLeastAdjustment</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Base la justification sur le développement ou la compression de la ligne, selon le résultat se rapprochant le plus de la largeur désirée.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_IN_KINSOKU"><apiName>PUSH_IN_KINSOKU</apiName><shortdesc> 
	Base la justification sur la compression kinsoku à la fin de la ligne, ou avec un développement s’il n’y a pas de kinsoku ou si cet espace n’est pas suffisant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushInKinsoku</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Base la justification sur la compression kinsoku à la fin de la ligne, ou avec un développement s’il n’y a pas de kinsoku ou si cet espace n’est pas suffisant.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_OUT_ONLY"><apiName>PUSH_OUT_ONLY</apiName><shortdesc> 
	Base la justification sur le développement de la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushOutOnly</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Base la justification sur le développement de la ligne.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
 La classe EastAsianJustifier dispose de propriétés pour contrôler les options de justification des lignes de texte dont le contenu est essentiellement du texte d’Extrême-Orient.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe EastAsianJustifier dispose de propriétés pour contrôler les options de justification des lignes de texte dont le contenu est essentiellement du texte d’Extrême-Orient. 
 
 <p> Utilisez le constructeur <codeph>new EastAsianJustifier()</codeph> pour créer un objet EastAsianJustifier avant de définir ses propriétés. La définition des propriétés d’un objet EastAsianJustifier après son application à un TextBlock n’invalide pas le TextBlock.</p>
 
 </apiDesc><example conref="examples\EastAsianJustifierExample.as"> Cet exemple affiche un bloc de texte japonais verticalement, en utilisant les propriétés EastAsianJustifier pour justifier le texte.
<codeblock>
 
package {
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.EastAsianJustifier;
    import flash.text.engine.LineJustification;
    import flash.text.engine.TextRotation;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.display.Stage;
    import flash.display.Sprite;
    import flash.system.Capabilities;
    
    public class EastAsianJustifierExample extends Sprite {
        
        public function EastAsianJustifierExample():void {
            
            var Japanese_txt:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);
            
            var textBlock:TextBlock = new TextBlock();
            var font:FontDescription = new FontDescription();
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0xCC0000;
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_INCLUDING_LAST);
            textBlock.lineRotation = TextRotation.ROTATE_90;
            var linePosition:Number = this.stage.stageWidth - 75;
            if (Capabilities.os.search("Mac OS") > -1) 
                // set fontName: Kozuka Mincho Pro R
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R";                     
            else 
                font.fontName = "Kozuka Mincho Pro R";
            textBlock.content = new TextElement(Japanese_txt, format);
            var previousLine:TextLine = null;
                
            while (true) 
            {
                var textLine:TextLine = textBlock.createTextLine(previousLine, 320);
                if (textLine == null) 
                    break;
                textLine.y = 20;
                textLine.x = linePosition;
                linePosition -= 25;
                addChild(textLine);                
                previousLine = textLine;
            }
        }
    }
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:EastAsianJustifier:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
     Crée un objet EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>La variable <codeph>locale</codeph> spécifiée est <codeph>null</codeph> ou trop courte pour représenter une variable locale valide.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>lineJustification</codeph> spécifié n’appartient pas à <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>justifictionStyle</codeph> spécifié n’appartient pas à <codeph>JustificationStyle</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>ja</apiData><apiDesc>Variable locale permettant de déterminer les règles de justification. La valeur par défaut est <codeph>"ja"</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>allButLast</apiData><apiDesc>Type de justification des lignes du paragraphe. Utilisez les constantes <codeph>LineJustification</codeph> pour cette propriété. La valeur par défaut est <codeph>LineJustification.ALL_BUT_LAST</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>justificationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>pushInKinsoku</apiData><apiDesc>Style de justification du texte dans un bloc de texte utilisant un justificateur d’Extrême-Orient. Utilisez les constantes <codeph>JustificationStyle</codeph> pour cette propriété. La valeur par défaut est <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Crée un objet EastAsianJustifier.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:EastAsianJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie clonée de l’objet EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>In the Flash Player 10 release, this method is for internal use. In future releases,
	 users will be able to subclass this class and will then need to use this method. This class is 
	 currently stored as a live reference, but there is no way to track when its properties change.  
	 This means that when changes are made, text blocks are not invalidated, which in the current 
	 implementation can lead to player crashes.  Even from the API perspective its wrong, as the affected 
	 text lines should be marked INVALID when format changes are made, but they�re not. The solution is 
	 to use a copy-on-set model.  When the object is passed in, the player copies it, so later changes to 
	 the object that was passed in have no effect. The setter makes an internal copy of the array; the 
	 getter returns a copy of the internal copy. Operations like 
         myBlock.textJustifier.justificationStyle = JustificationStyle.PUSH_IN_KINSOKU will have no effect. 
         Users who subclass this class in the future will need to use the clone() method to 
	 implement this technique of 'locking' the format once it has been set.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Une copie de l’objet <codeph>EastAsianJustifier</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie clonée de l’objet EastAsianJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:EastAsianJustifier:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
     Spécifie le style de justification du texte dans un bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Spécifie le style de justification du texte dans un bloc de texte.
     
     <p>La valeur par défaut est <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.</p>
     
	 <p>Utilisez l’une des constantes de la classe JustificationStyle pour définir la valeur de cette propriété. Le tableau suivant présente les valeurs possibles :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph></entry>
	 	<entry>Spécifie la justification vers l’avant.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PUSH_OUT_ONLY</codeph></entry>
	 	<entry>Spécifie la justification vers l’arrière.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT</codeph></entry>
	 	<entry>Spécifie la justification là où le plus petit ajustement est prioritaire.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:RenderingMode"><apiName>RenderingMode</apiName><shortdesc>
La classe RenderingMode fournit les valeurs du mode rendu dans la classe flash.text.engine.FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe RenderingMode fournit les valeurs du mode rendu dans la classe flash.text.engine.FontDescription.
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:RenderingMode:CFF"><apiName>CFF</apiName><shortdesc>
	Définit le mode rendu sur CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cff</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit le mode rendu sur CFF. Le rendu CFF améliore la lisibilité d’un texte à l’écran. Ce paramètre est recommandé pour les applications qui comportent beaucoup de petits textes. Cette constante s’applique à la propriété <codeph>renderingMode</codeph> de la classe FontDescription. Utilisez la syntaxe <codeph>RenderingMode.CFF</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:RenderingMode:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	Définit le mode rendu sur celui qui est appliqué par Flash Player 7 et les versions antérieures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Définit le mode rendu sur celui qui est appliqué par Flash Player 7 et les versions antérieures. Ce paramètre est conseillé pour le texte animé. Cette constante s’applique à la propriété <codeph>renderingMode</codeph> de la classe FontDescription. Utilisez la syntaxe <codeph>RenderingMode.NORMAL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 La classe ElementFormat représente les informations de mise en forme pouvant être appliquées à un ContentElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe ElementFormat représente les informations de mise en forme pouvant être appliquées à un <codeph>ContentElement</codeph>. Utilisez la classe ElementFormat pour créer une mise en forme de texte spécifique pour les différentes sous-classes de ContentElement. Les propriétés de la classe ElementFormat s’appliquent aux polices de périphérique et intégrées. 
 
 <p>Un objet ElementFormat appliqué à un ContentElement dans un TextBlock n’invalide pas le TextBlock. Après avoir appliqué un objet ElementFormat à un ContentElement, sa propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>. Les propriétés d’un objet ElementFormat bloqué ne peuvent pas être modifiées. Utilisez plutôt la méthode <codeph>clone()</codeph> pour créer une copie non verrouillée de l’objet, qu’il est possible de modifier et d’affecter au ContentElement.</p>
 
 </apiDesc><example conref="examples\ElementFormatExample.as"> <p>Cet exemple crée deux objets <codeph>ElementFormat</codeph> et définit plusieurs de leurs propriétés. Il affecte ensuite le nouvel ElementFormats à un objet <codeph>TextElement</codeph>, qui a été affecté en tant que contenu d’un <codeph>TextBlock</codeph>. Notez que la modification du <codeph>ElementFormat</codeph> d’un <codeph>TextElement</codeph> n’affecte pas les TextLines créés précédemment par le TextBlock parent.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormatExample extends Sprite {
        
        public function ElementFormatExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            ef1.alpha = 100;
            ef1.kerning = flash.text.engine.Kerning.ON;
            ef1.trackingRight = 2;
            ef1.typographicCase = flash.text.engine.TypographicCase.UPPERCASE;
            ef1.alignmentBaseline = flash.text.engine.TextBaseline.DESCENT;
            ef1.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
            
            var ef2:ElementFormat = new ElementFormat(fd);
            ef2.fontSize = 30;
            ef2.color = 0xFF0000;
            ef2.alpha = 0.3;
            ef2.kerning = flash.text.engine.Kerning.OFF;
            ef2.typographicCase = flash.text.engine.TypographicCase.LOWERCASE;
            ef2.digitCase = flash.text.engine.DigitCase.OLD_STYLE;
            ef2.textRotation = flash.text.engine.TextRotation.ROTATE_180;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            line1.x = 15;
            line1.y = 30;

            tb.content.elementFormat = ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            line2.x = 15;
            line2.y = 60;
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/elementFormat"><linktext>flash.text.engine.ContentElement.elementFormat</linktext></link></related-links><apiConstructor id="flash.text.engine:ElementFormat:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 	 Crée un objet ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Le paramètre <codeph>fontSize</codeph> spécifié est inférieur à 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>textRotation</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>dominantBaseline</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>alignmentBaseline</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>kerning</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.Kerning</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>breakOpportunity</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.BreakOpportunity</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>digitCase</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.DigitCase</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>digitWidth</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.DigitWidth</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>ligatureLevel</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.LigatureLevel</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>typographicCase</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.TypographicCase</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet FontDescription identifiant la police utilisée avec cette mise en forme d’élément. La valeur par défaut est <codeph>null</codeph>. Lorsque aucune description de police n’est fournie, une description de police par défaut est construite.
	 </apiDesc></apiParam><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>La taille du texte, en pixels.
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0x000000</apiData><apiDesc>Couleur du texte. Nombre contenant trois composants RVB 8 bits ; par exemple, 0xFF0000 correspond au rouge et 0x00FF00 au vert.
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>Propriété <codeph>alpha</codeph> appliquée à tous les atomes de ligne sur la base de la mise en forme des éléments.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>rotation appliquée aux glyphes individuelles. Utilisez les constantes <codeph>flash.text.engine.TextRotation</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>dominantBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Ligne de base à laquelle les glyphes du texte s’accrochent. Utilisez les constantes <codeph>flash.text.engine.TextBaseline</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>alignmentBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>useDominantBaseline</apiData><apiDesc>Ligne de base sur la ligne conteneur à laquelle la ligne de base dominante s’accroche. Utilisez les constantes <codeph>flash.text.engine.TextBaseline</codeph> pour cette propriété. 
     </apiDesc></apiParam><apiParam><apiItemName>baselineShift</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Décalage de la ligne de base pour le texte, en pixels em.
	 </apiDesc></apiParam><apiParam><apiItemName>kerning</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>on</apiData><apiDesc>Crénage utilisé pour ce texte. Utilisez <codeph>flash.text.engine.Kerning</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingRight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Interlettrage ou crénage manuel à appliquer à droite de chaque glyphe, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingLeft</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Interlettrage ou crénage manuel à appliquer à gauche de chaque glyphe, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>Variable locale du texte.
     </apiDesc></apiParam><apiParam><apiItemName>breakOpportunity</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>Opportunité de saut de ligne appliquée à ce texte. Utilisez les constantes <codeph>flash.text.engine.BreakOpportunity</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>digitCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Casse de chiffres utilisée pour ce texte. Utilisez les constantes <codeph>flash.text.engine.DigitCase</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>digitWidth</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Largeur de chiffres utilisée pour ce texte. Utilisez les constantes <codeph>flash.text.engine.DigitWidth</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>ligatureLevel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>common</apiData><apiDesc>Niveau de ligature utilisé pour ce texte. Utilisez les constantes <codeph>flash.text.engine.LigatureLevel</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>typographicCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Casse typographique utilisée pour ce texte. Utilisez les constantes <codeph>flash.text.engine.TypographicCase</codeph> pour cette propriété. 
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Crée un objet ElementFormat.
	 
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:ElementFormat:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie non verrouillée et clonée de l’objet ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Une copie non verrouillée de l’objet <codeph>ElementFormat</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie non verrouillée et clonée de l’objet ElementFormat.
	 
     </apiDesc><example conref="examples\ElementFormat_cloneExample.as"> <p>Cet exemple crée un objet <codeph>ElementFormat</codeph> et définit la propriété <codeph>FontSize</codeph>. Un nouvel objet <codeph>TextElement</codeph> est créé (et bloqué), à l’aide d’<codeph>ElementFormat</codeph> et <codeph>TextElement</codeph> est utilisé comme contenu pour un <codeph>TextBlock</codeph>. Une ligne de texte est créée à partir du <codeph>TextBlock</codeph>.</p>
 <p>Pour modifier l’objet <codeph>ElementFormat</codeph>, vous devez tout d’abord vérifier sa propriété <codeph>locked</codeph>. Si elle est définie sur true, utilisez la méthode <codeph>clone()</codeph> pour créer une copie non verrouillée de l’objet <codeph>ElementFormat</codeph>, modifiez ses propriétés, puis associez à nouveau le nouvel objet <codeph>ElementFormat</codeph> au <codeph>TextBlock</codeph>. Lorsque les lignes sont de nouveau scindées, les nouvelles récupèrent les nouveaux paramètres de police.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormat_cloneExample extends Sprite {
        private var ef1:ElementFormat;
        private var ef2:ElementFormat;
        
        public function ElementFormat_cloneExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize=20;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            ef2 = (ef1.locked) ? ef1.clone() : ef1;    
            ef2.fontSize = 32;

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:ElementFormat:getFontMetrics"><apiName>getFontMetrics</apiName><shortdesc>
	 Renvoie un objet FontMetrics avec des propriétés qui décrivent la valeur emBox, la position et l’épaisseur du barré et du soulignement pour la police spécifiée par fontDescription et fontSize.
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet <codeph>FontMetrics</codeph> décrivant les propriétés de la police spécifiée par <codeph>fontDescription</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <p>Renvoie un objet <codeph>FontMetrics</codeph> avec des propriétés qui décrivent la valeur emBox, la position et l’épaisseur du barré et du soulignement pour la police spécifiée par <codeph>fontDescription</codeph> et <codeph>fontSize</codeph>.</p>
	 
	 </apiDesc><example conref="examples\FontMetricsExample.as"> Cet exemple crée un objet <codeph>ElementFormat</codeph> avec un <codeph>FontDescription</codeph> affecté et utilise la méthode <codeph>getFontMetrics</codeph> pour afficher les mesures de la police choisie.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontMetricsExample extends Sprite {
        
        public function FontMetricsExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            var fm1:FontMetrics = ef1.getFontMetrics();
            trace(fm1.emBox);
            trace(fm1.strikethroughOffset);
            trace(fm1.strikethroughThickness);
            trace(fm1.subscriptScale);
            trace(fm1.subscriptOffset);
            trace(fm1.superscriptScale);
            trace(fm1.superscriptOffset);
            trace(fm1.underlineOffset);
            trace(fm1.underlineThickness);
            
            
        }
    }    
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link><link href="flash.text.engine.xml#FontMetrics"><linktext>flash.text.engine.FontMetrics</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:ElementFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
	 Spécifie les lignes de base de la ligne contenant l’élément auxquelles dominantBaseline s’accroche, déterminant ainsi la position verticale de l’élément dans la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie les lignes de base de la ligne contenant l’élément auxquelles <codeph>dominantBaseline</codeph> s’accroche, déterminant ainsi la position verticale de l’élément dans la ligne. Utilisez les constantes <codeph>flash.text.engine.TextBaseline</codeph> pour cette propriété. 
	 
	 <p>Le plus grand élément de la ligne détermine les lignes de base sauf si <codeph>TextBlock.baselineFontDescription</codeph> et <codeph>TextBlock.baselineFontSize</codeph> sont définis pour un autre comportement.</p>
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la ligne de base des caractères romains de la ligne.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la ligne de base des caractères ascendants de la ligne.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la ligne de base des caractères descendants de la ligne.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la ligne de base du haut des caractères idéographiques de la ligne.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la ligne de base du centre des caractères idéographiques de la ligne.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la ligne de base du bas des caractères idéographiques de la ligne.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.USE_DOMINANT_BASELINE</codeph></entry>
	 	<entry>La <codeph>dominantBaseline</codeph> s’aligne sur la même ligne de base de la ligne.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Définit la ligne de base de l’alignement de la ligne sur celle sur laquelle s’aligne la <codeph>dominantBaseline</codeph> de l’élément graphique.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Définit la ligne de base de l’alignement de la ligne sur celle sur laquelle s’aligne la <codeph>dominantBaseline</codeph> de l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>flash.text.engine.ElementFormat.dominantBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:alpha:get"><apiName>alpha</apiName><shortdesc>
	 Permet à l’auteur de définir automatiquement la propriété alpha de tous les atomes de ligne basés sur la mise en forme d’élément sur le nombre spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Permet à l’auteur de définir automatiquement la propriété <codeph>alpha</codeph> de tous les atomes de ligne basés sur la mise en forme d’élément sur le nombre spécifié.
	 
	 <p>Indique la valeur de transparence alpha de l’objet spécifié. Les valeurs gérées sont comprises entre 0 (entièrement transparent) et 1 (entièrement opaque). La valeur par défaut est 1. Les objets d’affichage où alpha est défini sur 0 sont actifs, même s’ils sont invisibles.</p>
	 
	 <p>La valeur par défaut est <codeph>1.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Applique l’alpha spécifié à l’élément graphique. Fait une combinaison par multiplication avec tout alpha défini sur le graphique <codeph>DisplayObject</codeph> lui-même ou sur la <codeph>TextLine</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Applique l’alpha spécifié à l’élément de texte. Fait une combinaison par multiplication avec tout alpha défini sur la <codeph>TextLine</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
	 Indique le décalage de la ligne de base pour l’élément, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indique le décalage de la ligne de base pour l’élément, en pixels.
	 <p>L’élément est éloigné d’autant de la <codeph>dominantBaseline</codeph>. Le décalage étant ajouté à la position y des membres de l’élément, dans un texte qui ne pivote pas, un décalage de ligne de base positif déplace l’élément vers le bas et un décalage de ligne de base négatif déplace l’élément vers le haut.</p>
	 
	 <p>La valeur par défaut est <codeph>0.0</codeph>, ce qui signifie aucun décalage.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Eloigne le graphique de la ligne de base.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Eloigne le texte de la ligne de base.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
	 Opportunité de saut de ligne appliquée à ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.BreakOpportunity</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Opportunité de saut de ligne appliquée à ce texte. Cette propriété détermine quels caractères peuvent être utilisés pour effectuer un saut de ligne lorsque le texte est scindé en plusieurs lignes. Utilisez les constantes <codeph>flash.text.engine.BreakOpportunity</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.BreakOpportunity.AUTO</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>BreakOpportunity.AUTO</codeph></entry>
	 	<entry>Les possibilités de saut de ligne sont basées sur les propriétés des caractères Unicode standard, par exemple les séparations de mots et les tirets.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ANY</codeph></entry>
	 	<entry>Tout caractère de l’objet <codeph>ContentElement</codeph> est traité comme une possibilité de saut de ligne. Cette valeur est généralement utilisée lorsque du texte Romain est intégré dans du texte asiatique et qu’il est préférable que les sauts de ligne interviennent au milieu des mots.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.NONE</codeph></entry>
	 	<entry>Aucun caractère de la plage n’est traité comme une possibilité de saut de ligne.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ALL</codeph></entry>
	 	<entry>Tous les caractères de la plage sont traités comme des possibilités de saut de ligne. Cela est utile pour la création d’effets tels qu’un texte sur un tracé.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Détermine la possibilité de séparation entre les éléments de texte adjacents du groupe. Si l’elementFormat du groupe est <codeph>null</codeph>, le format du premier des éléments adjacents est utilisé.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine la possibilité de séparation entre les caractères de l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#BreakOpportunity"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:color:get"><apiName>color</apiName><shortdesc>
	 Indique la couleur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indique la couleur du texte. Nombre entier contenant trois composants RVB 8 bits ; par exemple, 0xFF0000 correspond au rouge et 0x00FF00 au vert. 
	 
	 <p>La valeur par défaut est <codeph>0x000000</codeph>, ce qui signifie que Flash Player utilise la couleur noire.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Définit la couleur du texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
	 Casse de chiffres utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.DigitCase</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Casse de chiffres utilisée pour ce texte. La casse des chiffres affecte le style et le positionnement des groupes de caractères numériques. Utilisez les constantes <codeph>flash.text.engine.DigitCase</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.DigitCase.DEFAULT</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitCase.DEFAULT</codeph></entry>
	 	<entry>Applique une casse de chiffres par défaut au texte.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.LINING</codeph></entry>
	 	<entry>Applique la casse de chiffres des lignes au texte.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.OLD_STYLE</codeph></entry>
	 	<entry>Applique l’ancienne casse de chiffres de style au texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine le casse des chiffres utilisée pour le texte dans l’élément.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitCase"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
	 Largeur de chiffres utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.DigitWidth</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Largeur de chiffres utilisée pour ce texte. Utilisez les constantes <codeph>flash.text.engine.DigitWidth</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.DigitWidth.DEFAULT</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitWidth.DEFAULT</codeph></entry>
	 	<entry>Applique une largeur de chiffres par défaut au texte.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.PROPORTIONAL</codeph></entry>
	 	<entry>Applique une largeur de chiffres proportionnelle au texte.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.TABULAR</codeph></entry>
	 	<entry>Applique une largeur de chiffres tabulaire au texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine l’épaisseur des chiffres utilisée pour le texte dans l’élément.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitWidth"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
	 Spécifie les lignes de base de l’élément s’accrochant à alignmentBaseline pour déterminer la position verticale de l’élément sur la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie les lignes de base de l’élément s’accrochant à <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. Utilisez les constantes <codeph>flash.text.engine.TextBaseline</codeph> pour cette propriété. 
	 
	 <p>Le contenu de l’élément détermine les lignes de base. Dans le cas d’un <codeph>TextElement</codeph>, la police et la taille de la police déterminent les lignes de base. Dans le cas d’un <codeph>ForeignElement</codeph>, la hauteur de l’élément détermine les lignes de base.</p>
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>La ligne de base des caractères romains de l’élément s’aligne avec <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>La ligne de base des caractères ascendants de l’élément s’aligne avec <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>La ligne de base des caractères descendants de l’élément s’aligne avec <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>La ligne de base du haut des caractères idéographiques de l’élément s’aligne avec <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>La ligne de base du centre des caractères idéographiques de l’élément s’aligne avec <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>La ligne de base du bas des caractères idéographiques de l’élément s’aligne avec <codeph>alignmentBaseline</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Détermine quelles lignes de base de l’élément graphique s’alignent sur le <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine quelles lignes de base de l’élément de texte s’alignent sur le <codeph>alignmentBaseline</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>flash.text.engine.ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontDescription:get"><apiName>fontDescription</apiName><shortdesc>
	 Objet qui encapsule les propriétés nécessaires pour décrire une police. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Objet qui encapsule les propriétés nécessaires pour décrire une police. 
	 
	 <p>La valeur par défaut est un objet FontDescription créé par défaut.</p>
     
	 <p>Lorsque la propriété fontDescription est définie, l’objet FontDescription fourni est bloqué : sa propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>. Il est impossible de modifier un objet FontDescription bloqué.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine la police utilisée pour le texte dans l’élément.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
	 La taille du texte, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Si défini sur une valeur inférieure à zéro.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 La taille du texte, en pixels. 
	 
	 <p>La valeur par défaut est <codeph>12.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine la taille pour le texte de l’élément, en pixels.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 Crénage utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Crénage utilisé pour ce texte. Utilisez les constantes <codeph>flash.text.engine.Kerning</codeph> pour cette propriété. Le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. Le crénage est pris en charge pour toutes les polices qui disposent de tables de crénage.
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.Kerning.ON</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>Kerning.ON</codeph></entry>
	 	<entry>Le crénage est activé.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.OFF</codeph></entry>
	 	<entry>Le crénage est désactivé.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.AUTO</codeph></entry>
	 	<entry>Le crénage n’est activé que pour les caractères appropriés à une typographie asiatique. Le crénage est appliqué entre deux caractères lorsque aucun d’eux n’est un caractère Kanji, Hiragana ou Katakana.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Détermine si le crénage est appliqué entre les éléments de texte adjacents du groupe. Si l’elementFormat du groupe est <codeph>null</codeph>, le format du premier des éléments adjacents est utilisé.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine si le crénage est appliqué entre les caractères dans l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
	 Niveau de ligature utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.LigatureLevel</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Niveau de ligature utilisé pour ce texte. Une ligature se produit lorsque plusieurs formes de lettres sont unies dans un seul glyphe. Les ligatures remplacent généralement des caractères consécutifs partageant des composants communs, par exemple les paires de lettres « fi », « fl » ou « ae ». Elles sont utilisées avec les jeux de caractères latins et non latins. Utilisez les constantes <codeph>flash.text.engine.LigatureLevel</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.LigatureLevel.COMMON</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>LigatureLevel.NONE</codeph></entry>
	 	<entry>Aucune ligature n’est créée.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.MINIMUM</codeph></entry>
	 	<entry>Des ligatures minimales sont créées.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.COMMON</codeph></entry>
	 	<entry>Des ligatures courantes sont créées.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.UNCOMMON</codeph></entry>
	 	<entry>Des ligatures rares sont créées.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.EXOTIC</codeph></entry>
	 	<entry>Des ligatures exotiques sont créées.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Détermine le niveau de ligature entre les éléments de texte adjacents du groupe. Si l’elementFormat du groupe est <codeph>null</codeph>, le format du premier des éléments adjacents est utilisé.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine le niveau de ligature entre les caractères de l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LigatureLevel"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:locale:get"><apiName>locale</apiName><shortdesc>
	 Variable locale du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Variable locale du texte. Contrôle les formes et les transformations de casse. Les identifiants locaux standards sont utilisés. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais.
	 
     <p>La valeur par défaut est <codeph>"en"</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine les transformations et les formes du texte dans l’élément.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:locked:get"><apiName>locked</apiName><shortdesc>
	 Indique si l’objet ElementFormat est bloqué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indique si l’objet ElementFormat est bloqué. Si la propriété est définie sur <codeph>true</codeph>, l’objet ElementFormat ne peut pas être modifié. Appelez <codeph>ElementFormat.clone()</codeph> pour obtenir une copie non verrouillée de l’objet ElementFormat.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Définit la rotation appliquée aux glyphes individuelles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.TextRotation</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Définit la rotation appliquée aux glyphes individuelles. Utilisez les constantes <codeph>flash.text.engine.TextRotation</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.TextRotation.AUTO</codeph>.</p>
	 
	 <p>La rotation finale des glyphes est la somme de <codeph>, ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph> et <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>ElementFormat.textRotation</codeph> est généralement utilisé pour le texte asiatique, où les caractères doivent pivoter pour s’afficher correctement verticalement, en combinant la valeur <codeph>flash.text.engine.TextRotation.AUTO</codeph> avec <codeph>TextBlock.lineRotation = flash.text.engine.ROTATE_90</codeph>.</p>
	 
	 <p>La définition de cette propriété sur des polices qui ne contiennent pas d’informations de disposition verticale risque de donner des résultats inattendus. Les polices qui contiennent une table vmtx ou VORG, telles que la police japonaise « MS Mincho », fonctionnent correctement. En effet, ces tables fournissent les données dont le moteur de disposition a besoin pour effectuer une mise en forme appropriée. Les polices comme Verdana, qui ne contiennent pas les informations nécessaires, ne fonctionnent pas correctement.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Les glyphes ne pivotent pas.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Les glyphes pivotent de 90 degrés vers la droite.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Les glyphes pivotent de 180 degrés.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Les glyphes pivotent de 270 degrés vers la droite.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 <entry>Spécifie une rotation de 90 degrés vers la gauche pour les glyphes larges et de pleine épaisseur uniquement, tels que déterminés par les propriétés Unicode du glyphe. Cette valeur est généralement utilisée avec du texte asiatique pour ne faire pivoter que les glyphes requérant une rotation. Cette rotation est uniquement appliquée au texte vertical pour orienter verticalement les caractères larges et de pleine épaisseur sans affecter les autres caractères.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine la rotation des glyphes dans l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>flash.text.engine.TextRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>flash.text.engine.ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>flash.text.engine.TextBlock.lineRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
	 Interlettrage ou crénage manuel à appliquer à gauche de chaque glyphe, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Interlettrage ou crénage manuel à appliquer à gauche de chaque glyphe, en pixels. Si <codeph>kerning</codeph> est activé, la valeur <codeph>trackingLeft</codeph> est ajoutée aux valeurs dans la table de crénage de la police. Si <codeph>kerning</codeph> est désactivé, la valeur <codeph>trackingLeft</codeph> est utilisée comme valeur de crénage manuel. Prend en charge les valeurs positives et négatives.
	 
	 <p>De façon générale, la valeur de suivi désirée est divisée entre <codeph>trackingRight</codeph> et <codeph>trackingLeft</codeph>. Autrement, dans le cas de texte combinant plusieurs directions, le suivi est double au niveau d’une limite bidirectionnelle et nul pour l’autre.</p>
	 
	 <p>La valeur par défaut est <codeph>0.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Détermine le suivi appliqué à gauche du graphique.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine le suivi appliqué à gauche des caractères dans l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Exemple :</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingLeft = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingLeft = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
	 Interlettrage ou crénage manuel à appliquer à droite de chaque glyphe, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Interlettrage ou crénage manuel à appliquer à droite de chaque glyphe, en pixels. Si <codeph>kerning</codeph> est activé, la valeur <codeph>trackingRight</codeph> est ajoutée aux valeurs dans la table de crénage de la police. Si <codeph>kerning</codeph> est désactivé, la valeur <codeph>trackingRight</codeph> est utilisée comme valeur de crénage manuel. Prend en charge les valeurs positives et négatives.
	 
	 <p>De façon générale, la valeur de suivi désirée est divisée entre <codeph>trackingRight</codeph> et <codeph>trackingLeft</codeph>. Autrement, dans le cas de texte combinant plusieurs directions, le suivi est double au niveau d’une limite bidirectionnelle et nul pour l’autre.</p>
	 
	 
	 <p>La valeur par défaut est <codeph>0.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Détermine le suivi appliqué à droite du graphique.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine le suivi appliqué à droite des caractères dans l’élément de texte.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Exemple :</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingRight = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingRight = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
	 Casse typographique utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.TypographicCase</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet ElementFormat bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Casse typographique utilisée pour ce texte. Utilisez les constantes <codeph>flash.text.engine.TypographicCase</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.TypographicCase.DEFAULT</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TypographicCase.DEFAULT</codeph></entry>
	 	<entry>Applique une casse typographique par défaut au texte.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.TITLE</codeph></entry>
	 	<entry>Spécifie que les caractères majuscules utilisent des glyphes de titre en sortie.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS</codeph></entry>
	 	<entry>Spécifie que l’espacement est ajusté pour les caractères majuscules en sortie.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.SMALL_CAPS</codeph></entry>
	 	<entry>Spécifie que les caractères majuscules utilisent des glyphes de petites majuscules en sortie.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.UPPERCASE</codeph></entry>
	 	<entry>Spécifie que tous les caractères utilisent des glyphes majuscules en sortie.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.LOWERCASE</codeph></entry>
	 	<entry>Spécifie que tous les caractères utilisent des glyphes minuscules en sortie.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS_AND_SMALL_CAPS</codeph></entry>
	 	<entry>Spécifie que les caractères minuscules utilisent des glyphes de petites majuscules en sortie.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Sous-classe</entry><entry>Effet de la définition des propriétés</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>N’a aucun effet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Détermine la casse typographique utilisée pour le texte dans l’élément.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TypographicCase"><linktext>flash.text.engine.TypographicCase</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
 La classe FontMetrics contient les informations de mesure et de décalage concernant une police.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe FontMetrics contient les informations de mesure et de décalage concernant une police. La méthode <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> renvoie les objets de cette classe.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links><apiConstructor id="flash.text.engine:FontMetrics:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
	 Crée un objet FontMetrics.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>emBox</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>Valeur emBox de la police en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Décalage d’un barré, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Epaisseur d’un barré, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Décalage d’un soulignement, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Epaisseur d’un soulignement, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Décalage d’un indice, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Echelle à appliquer à la taille d’un indice, en points.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Décalage d’un exposant, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Echelle à appliquer à la taille d’un exposant, en points.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Crée un objet FontMetrics. L’objet FontMetrics contient des informations sur les mesures d’une police dans un format d’élément. La méthode <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> renvoie les objets de cette classe.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:FontMetrics:emBox"><apiName>emBox</apiName><shortdesc>
	 La valeur emBox représente l’espace de conception de la police et est utilisée pour placer des glyphes chinoises, coréennes ou japonaises par rapport à la ligne de base des caractères romains.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur emBox représente l’espace de conception de la police et est utilisée pour placer des glyphes chinoises, coréennes ou japonaises par rapport à la ligne de base des caractères romains. Généralement un carré, dont les dimensions correspondent à la taille de la police, en points. L’origine (coordonnée 0,0) de la valeur emBox est définie sur le bord gauche et sur la ligne de base des caractères romains du rectangle. Par exemple, pour une police de 10 points, la valeur emBox peut être un rectangle [G,H,D,B] de [0, -8.8, 10, 1.2].
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughOffset"><apiName>strikethroughOffset</apiName><shortdesc>
	 La valeur strikethroughOffset est un décalage vertical suggéré à partir de la ligne de base des caractères romains pour un barré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur strikethroughOffset est un décalage vertical suggéré à partir de la ligne de base des caractères romains pour un barré.
	 
	 <p>Notez que, selon la rotation de la ligne, cette valeur est ajoutée ou soustraite à la position de la ligne pour trouver la position du barré. Dans une ligne avec <codeph>TextRotation.ROTATE_0</codeph>, <codeph>strikethrough.y = line.y + strikethroughOffset</codeph>. Dans une ligne avec <codeph>TextRotation.ROTATE_90</codeph>, <codeph>strikethrough.x = line.x - strikethroughOffset</codeph>.</p>
	 
	 <p>Lors de l’application de décorations telles que les barrés, la procédure conseillée consiste à spécifier un <codeph>eventMirror</codeph> sur le <codeph>ContentElement</codeph> devant recevoir la décoration. En réponse à l’événement <codeph>flash.events.Event.ADDED</codeph>, les <codeph>limites</codeph> de la <codeph>TextLineMirrorRegion</codeph> peuvent être utilisées en combinaison avec <codeph>strikethroughOffset</codeph> pour placer le barré.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughThickness"><apiName>strikethroughThickness</apiName><shortdesc>
	 La valeur strikethroughThickness est l’épaisseur suggérée d’un barré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur strikethroughThickness est l’épaisseur suggérée d’un barré.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptOffset"><apiName>subscriptOffset</apiName><shortdesc>
	 La valeur subscriptOffset est le décalage vertical suggéré à partir de la ligne de base des caractères romains pour un indice.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur subscriptOffset est le décalage vertical suggéré à partir de la ligne de base des caractères romains pour un indice.
	 
	 <p>La valeur subscriptOffset est utilisée avec <codeph>ElementFormat.baselineShift</codeph> pour positionner l’indice.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptScale"><apiName>subscriptScale</apiName><shortdesc>
	 La valeur subscriptScale est le facteur de mise à l’échelle suggéré à appliquer à la taille d’un indice en points.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur subscriptScale est le facteur de mise à l’échelle suggéré à appliquer à la taille d’un indice en points. Un facteur d’échelle de 1.0 signifie qu’il n’y a pas de mise à l’échelle.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptOffset"><apiName>superscriptOffset</apiName><shortdesc>
	 La valeur superscriptOffset est le décalage vertical suggéré à partir de la ligne de base des caractères romains pour un exposant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur superscriptOffset est le décalage vertical suggéré à partir de la ligne de base des caractères romains pour un exposant.
	 
	 <p>La valeur superscriptOffset est utilisée avec <codeph>ElementFormat.baselineShift</codeph> pour positionner l’exposant.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptScale"><apiName>superscriptScale</apiName><shortdesc>
	 La valeur superscriptScale est le facteur de mise à l’échelle suggéré à appliquer à la taille d’un exposant en points.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur superscriptScale est le facteur de mise à l’échelle suggéré à appliquer à la taille d’un exposant en points. Un facteur d’échelle de 1.0 signifie qu’il n’y a pas de mise à l’échelle.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineOffset"><apiName>underlineOffset</apiName><shortdesc>
	 La valeur underlineOffset est le décalage vertical suggéré à partir de la ligne de base des caractères romains d’un soulignement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur underlineOffset est le décalage vertical suggéré à partir de la ligne de base des caractères romains d’un soulignement.
	 
	 <p>Notez que, selon la rotation de la ligne, cette valeur est ajoutée ou soustraite à la position de la ligne pour trouver la position du soulignement. Dans une ligne avec <codeph>TextRotation.ROTATE_0</codeph>, <codeph>underline.y = line.y + underlineOffset</codeph>. Dans une ligne avec <codeph>TextRotation.ROTATE_90</codeph>, <codeph>underline.x = line.x - underlineOffset</codeph>.</p>
	 
	 <p>Lors de l’application de décorations telles que les soulignements, la procédure conseillée consiste à spécifier un <codeph>eventMirror</codeph> sur le <codeph>ContentElement</codeph> devant recevoir la décoration. En réponse à l’événement <codeph>flash.events.Event.ADDED</codeph>, les <codeph>limites</codeph> de la <codeph>TextLineMirrorRegion</codeph> peuvent être utilisées en combinaison avec <codeph>underlineOffset</codeph> pour placer le soulignement.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineThickness"><apiName>underlineThickness</apiName><shortdesc>
	 La valeur underlineThickness est l’épaisseur suggérée d’un soulignement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 La valeur underlineThickness est l’épaisseur suggérée d’un soulignement.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Présentation de la classe FontMetrics</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 La classe FontDescription représente les propriétés nécessaires pour décrire une police.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe FontDescription représente les propriétés nécessaires pour décrire une police. Les propriétés de la classe FontDescription s’appliquent aux polices de périphérique et intégrées. 
 
 <p>Un objet FontDescription est appliqué à un ElementFormat, qui à son tour est appliqué à un ContentElement dans un TextBlock. Après avoir appliqué un objet FontDescription à un ElementFormat, sa propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>. Les propriétés d’un objet FontDescription bloqué ne peuvent pas être modifiées. Utilisez plutôt la méthode <codeph>clone()</codeph> pour créer une copie non verrouillée de l’objet, qu’il est possible de modifier et d’affecter à ElementFormat.</p>
 
 <p><b>Remarque :</b> FTE ne prend pas en charge les polices Type 1 ou les polices bitmap, telles que Type 3, ATC, CID ou CID basées sur SFNT.</p>
 
 </apiDesc><example conref="examples\FontDescriptionExample.as"> <p>Cet exemple crée un objet <codeph>FontDescription</codeph>, lui affecte une police de périphérique, définit diverses propriétés de police et affecte le nouvel objet à un objet <codeph>ElementFormat</codeph>. D’autres mises en forme de police sont effectuées dans <codeph>ElementFormat</codeph>. Un nouvel objet <codeph>TextElement</codeph> est créé, à l’aide d’<codeph>ElementFormat</codeph> et <codeph>TextElement</codeph> est utilisé comme contenu pour un <codeph>TextBlock</codeph>. Une ligne de texte est créée à partir du <codeph>TextBlock</codeph>.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescriptionExample extends Sprite {
        
        public function FontDescriptionExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/fontDescription"><linktext>flash.text.engine.ElementFormat.fontDescription</linktext></link></related-links><apiConstructor id="flash.text.engine:FontDescription:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 	 Crée un objet FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Le paramètre <codeph>fontWeight</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>fontPosture</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.FontPosture</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>fontLookup</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.FontLookup</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>renderingMode</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.RenderingMode</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>cffHinting</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.CFFHinting</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>_serif</apiData><apiDesc>Nom de la police à utiliser, ou liste de noms de police séparés par une virgule.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Spécifie l’épaisseur de la police.
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Spécifie la posture de la police.
	 </apiDesc></apiParam><apiParam><apiItemName>fontLookup</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>device</apiData><apiDesc>Spécifie comment rechercher la police.
	 </apiDesc></apiParam><apiParam><apiItemName>renderingMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>cff</apiData><apiDesc>Mode de rendu utilisé pour ce texte. Utilisez les constantes <codeph>flash.text.engine.RenderingMode</codeph> pour cette propriété. 
	 </apiDesc></apiParam><apiParam><apiItemName>cffHinting</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>horizontalStem</apiData><apiDesc>Type de repère CFF utilisé pour ce texte. Utilisez les constantes <codeph>flash.text.engine.CFFHinting</codeph> pour cette propriété. 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Crée un objet FontDescription.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:FontDescription:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie non verrouillée et clonée de l’objet FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Une copie non verrouillée de l’objet <codeph>FontDescription</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie non verrouillée et clonée de l’objet FontDescription.
	 
     </apiDesc><example conref="examples\FontDescription_cloneExample.as"> <p>Cet exemple crée un objet <codeph>FontDescription</codeph>, lui affecte une police de périphérique, définit diverses propriétés de police et affecte le nouvel objet à un objet <codeph>ElementFormat</codeph> tout en le bloquant. Un nouvel objet <codeph>TextElement</codeph> est créé, à l’aide d’<codeph>ElementFormat</codeph> et <codeph>TextElement</codeph> est utilisé comme contenu pour un <codeph>TextBlock</codeph>. Une ligne de texte est créée à partir du <codeph>TextBlock</codeph>.</p>
 <p>Pour modifier l’objet <codeph>FontDescription</codeph>, vous devez tout d’abord vérifier sa propriété <codeph>locked</codeph>. Si elle est définie sur true, utilisez la méthode <codeph>clone()</codeph> pour créer une copie non verrouillée de <codeph>FontDescription</codeph>, modifiez ses propriétés, puis affectez-la à un nouvel objet ElementFormat. Ensuite, associez à nouveau le nouvel objet <codeph>ElementFormat</codeph> au <codeph>TextBlock</codeph>. Lorsque les lignes sont de nouveau scindées, les nouvelles récupèrent les nouveaux paramètres de police.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescription_cloneExample extends Sprite {
        private var fd:FontDescription;
        private var fd2:FontDescription;
        
        public function FontDescription_cloneExample():void {
            fd = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            fd2 = (fd.locked) ? fd.clone() : fd;    
            fd2.fontWeight = flash.text.engine.FontWeight.NORMAL;
            var ef2:ElementFormat = new ElementFormat(fd2);

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:FontDescription:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Renvoie true si une police intégrée est disponible avec les paramètres fontName, fontWeight et fontPosture spécifiés, où Font.fontType correspond à flash.text.FontType.EMBEDDED_CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Le paramètre <codeph>fontWeight</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>fontPosture</codeph> spécifié n’appartient pas à <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> si une police intégrée compatible est disponible, sinon <codeph>false</codeph>.
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Nom de la police intégrée à vérifier.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Spécifie l’épaisseur de la police. Utilisez <codeph>flash.text.engine.FontWeight</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Spécifie la posture de la police. Utilisez <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie true si une police intégrée est disponible avec les paramètres <codeph>fontName</codeph>, <codeph>fontWeight</codeph> et <codeph>fontPosture </codeph> spécifiés, où <codeph>Font.fontType</codeph> correspond à <codeph>flash.text.FontType.EMBEDDED_CFF</codeph>. Depuis Flash Player 10, un fichier SWF peut contenir deux sortes de police intégrée. Les polices intégrées normales ne sont utilisées que par les objets TextField. Les polices CFF intégrées ne sont utilisées que par les classes flash.text.engine. Les deux types sont différenciés par la propriété <codeph>fontType</codeph> de la classe <codeph>Font</codeph>, telle que renvoyée par la fonction <codeph>enumerateFonts()</codeph>.
	 
	 <p>Les classes flash.text.engine ne peuvent pas utiliser une police de type <codeph>EMBEDDED</codeph>. Si <codeph>fontLookup</codeph> est défini sur <codeph>FontLookup.EMBEDDED_CFF</codeph> et que la seule police disponible au moment de l’exécution avec le nom, l’épaisseur et la posture spécifiés est de type <codeph>EMBEDDED</codeph>, Flash Player revient à des polices de périphériques en restituant le texte glyphe par glyphe, comme si aucune police intégrée ne correspondait au nom et au style spécifiés.</p>
	 
	 <p>Si des polices <codeph>EMBEDDED</codeph> et <codeph>EMBEDDED_CFF</codeph> sont disponibles avec le même nom, la même épaisseur et la même posture, la police <codeph>EMBEDDED_CFF</codeph> est sélectionnée et le texte est restitué avec la police <codeph>EMBEDDED_CFF</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:FontDescription:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
	 Type de repère CFF utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.CFFHinting</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Type de repère CFF utilisé pour ce texte. Utilisez les constantes <codeph>flash.text.engine.CFFHinting</codeph> pour cette propriété. Cette propriété s’applique uniquement si la propriété <codeph>flash.text.engine.RenderingMode</codeph> du texte est définie sur <codeph>flash.text.engine.RenderingMode.CFF</codeph>.
	 
	 <p>Le type de repère CFF utilisé détermine si Flash Player force les épaisseurs horizontales fortes à s’aligner ou non sur une grille de sous-pixels.</p>
	 
	 <p>S’applique uniquement aux polices intégrées.</p>
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.CFFHinting.HORIZONTAL_STEM</codeph>.</p>
	 
	 <p>Pour la propriété <codeph>flash.text.engine.CFFHinting</codeph>, vous pouvez utiliser les valeurs de chaînes suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	     <entry><codeph>CFFHinting.NONE</codeph></entry>
	     <entry>Spécifie aucun repère CFF Les épaisseurs horizontales des glyphes ne sont pas alignées sur la grille de sous-pixels. Ce paramètre convient aux animations ou aux grandes polices.</entry>
	   </row><row>
	     <entry><codeph>CFFHinting.HORIZONTAL_STEM</codeph></entry>
	     <entry>Spécifie un repère CFF. Spécifie que les épaisseurs horizontales fortes sont adaptées à la grille de sous-pixels sur un écran à cristaux liquides (LCD). Pour utiliser ce paramètre, la propriété <codeph>RenderingMode</codeph> doit être définie sur <codeph>RenderingMode.CFF</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#CFFHinting"><linktext>flash.text.engine.CFFHinting</linktext></link><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontDescription:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
	 Spécifie comment la police doit être recherchée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie comment la police doit être recherchée.
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.FontLookup.DEVICE</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>FontLookup.DEVICE</codeph></entry>
	 	<entry>Flash Player recherche une police de périphérique portant le <codeph>nom</codeph> spécifié sur le système local et l’utilise pour restituer le texte.</entry>
	   </row><row>
	  <entry><codeph>FontLookup.EMBEDDED_CFF</codeph></entry>
	 	<entry>Flash Player recherche une police CFF intégrée portant le <codeph>nom</codeph> à utiliser pour restituer le texte. Seules les polices de type <codeph>flash.text.Font.fontType.EMBEDDED_CFF</codeph> sont prises en compte. Si la police CFF spécifiée n’est pas intégrée au fichier SWF, Flash Player tente d’utiliser une police de périphérique de secours pour chaque glyphe. Cette méthode est moins efficace que la sélection directe d’une police de périphérique.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontName:get"><apiName>fontName</apiName><shortdesc>
	 Nom de la police à utiliser, ou liste de noms de police séparés par une virgule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. Pour le rendu de l’élément, Flash Player sélectionne la première police disponible dans la liste. Par exemple « Arial, Helvetica, _sans » oblige le lecteur à rechercher « Arial », puis « Helvetica » si Arial est introuvable, puis _sans lorsque ces deux polices sont introuvables.
	 
	 <p>Flash prend en charge trois noms de polices de périphérique génériques : _sans (telles que Helvetica et Arial), _serif (telles que Times Roman) et _typewriter (telles que Courier). Ces noms sont associés aux polices de périphérique propres à la plateforme.</p>
	 
	 <p>La valeur par défaut est <codeph>"_serif"</codeph>.</p>
	 
	 <p>Flash Player fournit des polices de secours pour les glyphes introuvables dans la police sélectionnée. Que la police utilisée soit intégrée ou de périphérique, lorsque le glyphe à restituer y est introuvable, Flash Player tente de le restituer à l’aide d’une autre police de périphérique susceptible de le contenir.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontPosture:get"><apiName>fontPosture</apiName><shortdesc>
	 Spécifie la posture de la police.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie la posture de la police.
	 
	 <p>S’applique uniquement aux polices de périphériques.</p>
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.FontPosture.NORMAL</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>FontPosture.NORMAL</codeph></entry>
	 	<entry>Posture de police normale.</entry>
	   </row><row>
	  <entry><codeph>FontPosture.ITALIC</codeph></entry>
	 	<entry>Posture de police italique.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
	 Spécifie l’épaisseur de la police.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.FontWeight</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie l’épaisseur de la police.
	 
	 <p>S’applique uniquement aux polices de périphériques.</p>
	 
	 <p>La valeur par défaut est <codeph>flash.text.engine.FontWeight.NORMAL</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>FontWeight.NORMAL</codeph></entry>
	 	<entry>Epaisseur de police normale.</entry>
	   </row><row>
	  <entry><codeph>FontWeight.BOLD</codeph></entry>
	 	<entry>Epaisseur de police gras.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:locked:get"><apiName>locked</apiName><shortdesc>
	 Indique si l’objet FontDescription est bloqué ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indique si l’objet FontDescription est bloqué ou non. Si la propriété est définie sur <codeph>true</codeph>, l’objet FontDescription ne peut pas être modifié. Appelez <codeph>FontDescription.clone()</codeph> pour obtenir une copie non verrouillée de l’objet FontDescription.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
	 Mode de rendu utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>flash.text.engine.RenderingMode</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si elle est définie une fois l’objet FontDescription bloqué (la propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Mode de rendu utilisé pour ce texte. Utilisez les constantes <codeph>flash.text.engine.RenderingMode</codeph> pour cette propriété.  
	 
	 <p>S’applique uniquement aux polices intégrées.</p>
	 
	 <p>La valeur par défaut est<codeph>flash.text.engine.RenderingMode.CFF</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>RenderingMode.NORMAL</codeph></entry>
	 	<entry>Applique un rendu de texte normal, correspondant au type de rendu utilisé par Flash Player 7 et les versions précédentes.</entry>
	   </row><row>
	   	<entry><codeph>RenderingMode.CFF</codeph></entry>
	 	<entry>Applique un rendu CFF qui rend le texte plus lisible (cette fonctionnalité est disponible depuis Flash Player 10). Le rendu CFF permet d’obtenir la qualité du rendu des polices de petite taille.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
 La classe TextJustifier est une base abstraite de types de justificateurs que vous pouvez appliquer à un TextBlock, en particulier pour les classes EastAsianJustifier et SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe TextJustifier est une base abstraite de types de justificateurs que vous pouvez appliquer à un TextBlock, en particulier pour les classes EastAsianJustifier et SpaceJustifier.
 
 <p>Il est impossible d’instancier directement la classe TextJustifier. L’appel de <codeph>new TextJustifier()</codeph> renvoie une exception <codeph>ArgumentError</codeph>. La définition des propriétés d’un objet EastAsianJustifier ou SpaceJustifier après son application à un TextBlock n’invalide pas le TextBlock.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:TextJustifier:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
	 L’appel du constructeur TextJustifier() renvoie une exception ArgumentError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>La variable <codeph>locale</codeph> spécifiée est <codeph>null</codeph> ou trop courte pour représenter une variable locale valide.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>lineJustification</codeph> spécifié n’appartient pas à <codeph>LineJustification</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Variable locale permettant de déterminer les règles de justification. 
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Type de justification des lignes du paragraphe. Utilisez les constantes <codeph>LineJustification</codeph> pour cette propriété. 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 L’appel du constructeur <codeph>TextJustifier()</codeph> renvoie une exception <codeph>ArgumentError</codeph>. Vous <i>pouvez</i> cependant appeler des constructeurs pour les sous-classes suivantes de TextJustifier :
	 
	 <ul>
	 
	 	<li><codeph>new SpaceJustifier()</codeph></li>
	 	<li><codeph>new EastAsianJustifier()</codeph></li>
	 
	 </ul>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie clonée de l’objet TextJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Une copie de l’objet <codeph>TextJustifier</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie clonée de l’objet TextJustifier.
	 
	 <p>Les sous-classes de TextJustifier doivent remplacer cette méthode.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextJustifier:getJustifierForLocale"><apiName>getJustifierForLocale</apiName><shortdesc>
	 Construit une sous-classe TextJustifier par défaut appropriée à la variable locale spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>La variable <codeph>locale</codeph> spécifiée est <codeph>null</codeph> ou trop courte pour représenter une variable locale valide.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Référence à un objet <codeph>TextJustifier</codeph>.
     
     </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Variable locale permettant de déterminer le justificateur créé.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Construit une sous-classe TextJustifier par défaut appropriée à la variable locale spécifiée.
	 
	 <p>Si la variable locale est le chinois, le coréen ou le japonais, la méthode construit un objet EastAsianJustifier par défaut. Si ce n’est pas le cas, le moteur de saisie construit un objet SpaceJustifier par défaut.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextJustifier:lineJustification:get"><apiName>lineJustification</apiName><shortdesc>
     Spécifie la justification des lignes pour le texte d’un bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Spécifie la justification des lignes pour le texte d’un bloc de texte. 
     
     <p>Utilise les constantes suivantes définies par <codeph>LineJustification</codeph> comme valeurs valides de cette propriété :</p>
     
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>LineJustification.UNJUSTIFIED</codeph></entry>
	 	<entry>Génère des lignes non justifiées.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_BUT_LAST</codeph></entry>
	 	<entry>Génère des lignes toutes justifiées sauf la dernière.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_INCLUDING_LAST</codeph></entry>
	 	<entry>Génère des lignes toutes justifiées.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextJustifier:locale:get"><apiName>locale</apiName><shortdesc>
     Spécifie la variable locale permettant de déterminer les règles de justification du texte dans un bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>La variable <codeph>locale</codeph> spécifiée est <codeph>null</codeph> ou trop courte pour représenter une variable locale valide.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Spécifie la variable locale permettant de déterminer les règles de justification du texte dans un bloc de texte. Les identifiants locaux standards sont utilisés. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GroupElement"><apiName>GroupElement</apiName><shortdesc>
 Un objet GroupElement regroupe un ensemble d’objets TextElement, GraphicElement et d’autres objets GroupElement que vous pouvez affecter comme un tout à la propriété content d’un objet TextBlock.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Un objet GroupElement regroupe un ensemble d’objets TextElement, GraphicElement et d’autres objets GroupElement que vous pouvez affecter comme un tout à la propriété <codeph>content</codeph> d’un objet TextBlock. Un objet GroupElement peut aussi partager simplement une mise en forme commune au sein d’un autre objet GroupElement. 
 
 <p>Lorsqu’un objet GroupElement contient un autre objet GroupElement, l’objet interne conserve sa propre mise en forme (paramètres ElementFormat). Il n’hérite pas de la mise en forme de l’objet GroupElement externe.</p>
 
 <p>La plupart des propriétés de mise en forme n’affectent pas un objet GroupElement. De ce fait, il est possible de créer une ligne de texte pour un objet GroupElement avec un paramètre <codeph>elementFormat</codeph> nul. Quelques propriétés de mise en forme telles que <codeph>kerning</codeph> et <codeph>ligature</codeph> affectent la mise en forme lorsque des intersections apparaissent entre les membres du groupe. Si le groupe à une mise en forme null, la mise en forme de l’élément précédent détermine la mise en forme en présence de telles intersections.</p>
  
 </apiDesc><example conref="examples\GroupElementExample.as"> Cet exemple crée une case rouge sous la forme d’un objet GraphicElement et la combine à deux objets TextElement pour créer un objet GroupElement. Il affecte l’objet GroupElement à la propriété <codeph>content</codeph> d’un TextBlock, à partir duquel il crée trois lignes.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.ContentElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GroupElementExample extends Sprite {
        
        public function GroupElementExample():void {
            
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0, 0, 20, 20);
            redBox.graphics.endFill(); 
            
            var format:ElementFormat = new ElementFormat();
            var fontDescription:FontDescription = new FontDescription("Arial");
            format.fontSize = 16;
            format.fontDescription = fontDescription;
            
            var str1:String = "This red box is a GraphicElement ";
            var str2:String = " in the middle of two TextElements, " +
            " which together make " +
            "up a GroupElement in a TextBlock that is broken into three lines.";
            
            var textElement1:TextElement = new TextElement(str1,format);
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textElement2:TextElement = new TextElement(str2, format);
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>();
            groupVector.push(textElement1, graphicElement, textElement2);
            var groupElement = new GroupElement(groupVector);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = groupElement;
            createTextLines(textBlock);
        }
        
        private function createTextLines(textBlock:TextBlock):void 
        {
        
            var yPos = 20;
            var line_length:Number = 450;
            var textLine:TextLine = textBlock.createTextLine (null, line_length);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.height+8;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, line_length);
            }
        }
    }    
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links><apiConstructor id="flash.text.engine:GroupElement:GroupElement"><apiName>GroupElement</apiName><shortdesc>
	 Crée une nouvelle occurrence de GroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>L’<codeph>élément</codeph> spécifié contient des éléments <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>L’<codeph>élément</codeph> spécifié contient un élément qui ne correspond à aucune sous-classe connue de <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>L’<codeph>élément</codeph> spécifié contient des éléments définis en tant que <codeph>content</codeph> d’un <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>L’<codeph>élément</codeph> spécifié contient des éléments appartenant déjà à un groupe, ou qui apparaissent plusieurs fois dans les <codeph>éléments</codeph>.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>elements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiData>null</apiData><apiDesc>Vecteur d’objets ContentElement devant être contenus dans le GroupElement. Le vecteur peut être vide. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Format des éléments du groupe. La valeur par défaut est <codeph>null</codeph>. Ce format s’applique aux intersections placées entre les éléments du groupe ; ces éléments n’héritent pas du format.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet <codeph>EventDispatcher</codeph> qui reçoit des copies de chaque événement déclenché vers les lignes de texte créées en fonction de cet élément de contenu. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Rotation appliquée à l’élément en tant qu’unité. Utilisez les constantes <codeph>TextRotation</codeph> pour cette propriété. La valeur par défaut est <codeph>TextRotation.ROTATE_0</codeph>. 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Crée une nouvelle occurrence de GroupElement.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:GroupElement:getElementAt"><apiName>getElementAt</apiName><shortdesc>
	 Récupère un élément dans le groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si <codeph>index</codeph> est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Index de l’élément à récupérer.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Récupère un élément dans le groupe.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementAtCharIndex"><apiName>getElementAtCharIndex</apiName><shortdesc>
	 Renvoie l’élément contenant le caractère spécifié par le paramètre charIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si <codeph>charIndex</codeph> n’appartient pas à la plage <codeph>0 - rawText.length</codeph>.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément contenant le caractère au niveau de <codeph>charIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro du caractère dont vous recherchez l’élément. Une valeur 0 correspond au premier caractère du groupe, pas au premier caractère du TextBlock.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie l’élément contenant le caractère spécifié par le paramètre <codeph>charIndex</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
	 Renvoie l’index de l’élément spécifié par le paramètre element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de l’élément spécifié par <codeph>element</codeph> ou -1 si l’élément n’appartient pas au groupe.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiDesc>Elément du groupe dont vous souhaitez récupérer l’index.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie l’index de l’élément spécifié par le paramètre <codeph>element</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:groupElements"><apiName>groupElements</apiName><shortdesc>
	 Remplace la plage d’éléments que les paramètres beginIndex et endIndex spécifient par un nouveau GroupElement contenant ces éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si <codeph>beginIndex</codeph> ou <codeph>endIndex</codeph> est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Nouveau groupe.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:GroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de la position de départ de la plage à regrouper.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro suivant la position de fin de la plage à regrouper.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Remplace la plage d’éléments que les paramètres <codeph>beginIndex</codeph> et <codeph>endIndex</codeph> spécifient par un nouveau <codeph>GroupElement</codeph> contenant ces éléments. Comme prévu, les éléments situés entre beginIndex et endIndex-1 sont remplacés.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:mergeTextElements"><apiName>mergeTextElements</apiName><shortdesc>
	 Fusionne le texte de la plage d’éléments spécifiés par les paramètres beginIndex et endIndex dans l’élément défini par beginIndex, sans affecter la mise en forme de cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si <codeph>beginIndex</codeph> ou <codeph>endIndex</codeph> est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Si l’un des éléments de la plage spécifiée n’est pas un TextElement.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Premier élément de texte de la plage, contenant à présent l’ensemble du texte de la plage.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de la position de départ de la plage à fusionner.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro suivant la position de fin de la plage à fusionner.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Fusionne le texte de la plage d’éléments spécifiés par les paramètres <codeph>beginIndex</codeph> et <codeph>endIndex</codeph> dans l’élément défini par <codeph>beginIndex</codeph>, sans affecter la mise en forme de cet élément. Comme prévu, les éléments situés entre beginIndex et endIndex-1 sont fusionnés. Après la fusion de leur texte, les éléments compris entre beginIndex+1 et endIndex-1 son supprimés du groupe et deviennent orphelins, avec les propriétés <codeph>group</codeph> <codeph>null</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:replaceElements"><apiName>replaceElements</apiName><shortdesc>
	 Remplace la plage d’éléments que les paramètres beginIndex et endIndex spécifient par le contenu du paramètre newElements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>La valeur <codeph>beginIndex</codeph> ou <codeph>endIndex</codeph> est hors limite.
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>newElements</codeph> spécifiés contiennent des éléments <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>newElements</codeph> spécifiés contiennent <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>newElements</codeph> spécifiés contiennent des éléments qui ne correspondent pas à une sous-classe connue de <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>newElements</codeph> spécifiés contiennent des éléments définis en tant que <codeph>content</codeph> d’un <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>newElements</codeph> spécifiés contiennent des éléments appartenant déjà à un groupe, ou qui apparaissent plusieurs fois dans les <codeph>éléments</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si l’opération résulte en rotations imbriquées dans <codeph>GroupElement</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Vecteur contenant les éléments qui ont été remplacés.
	  
     </apiDesc><apiType value="Vector$flash.text.engine:ContentElement"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro pour la position de début de la plage de remplacement.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro suivant la position de fin de la plage de remplacement.
	 </apiDesc></apiParam><apiParam><apiItemName>newElements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiDesc>Eléments à utiliser pour remplacer la plage d’éléments spécifiée.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Remplace la plage d’éléments que les paramètres <codeph>beginIndex</codeph> et <codeph>endIndex</codeph> spécifient par le contenu du paramètre <codeph>newElements. </codeph> Comme prévu, les éléments situés entre beginIndex et endIndex-1 sont remplacés.
	 <p>Pour supprimer des éléments, transmettez <codeph>null</codeph> pour <codeph>newElements</codeph>.</p>
	 <p>Pour insérer un élément, transmettez la même valeur pour <codeph>beginIndex</codeph> et <codeph>endIndex</codeph>. Le nouvel élément est inséré avant l’index spécifié.</p>
	 <p>Pour ajouter un élément, transmettez <codeph>elementCount</codeph> pour <codeph>beginIndex</codeph> et <codeph>endIndex</codeph>.</p>
	 <p>Après l’opération, les éléments remplacés sont orphelins, avec des propriétés <codeph>group</codeph> <codeph>null</codeph>.</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:setElements"><apiName>setElements</apiName><shortdesc>
	 Définit les éléments du groupe sur le contenu du vecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>La <codeph>valeur</codeph> spécifiée contient des éléments <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>valeur</codeph> spécifiée contient <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>valeur</codeph> spécifiée contient des éléments qui ne correspondent pas à une sous-classe connue de <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>valeur</codeph> spécifiée contient des éléments spécifiés en tant que <codeph>content</codeph> d’un <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>La <codeph>valeur</codeph> spécifiée contient des éléments appartenant déjà à un groupe, ou qui apparaissent plusieurs fois dans la <codeph>valeur</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si l’opération résulte en rotations imbriquées dans <codeph>GroupElement</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/></apiParam></apiOperationDef><apiDesc>
	 Définit les éléments du groupe sur le contenu du vecteur.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:splitTextElement"><apiName>splitTextElement</apiName><shortdesc>
	 Divise une partie d’un TextElement du groupe en un nouveau TextElement inséré dans le groupe suivant le TextElement spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si <codeph>elementIndex</codeph> ou <codeph>charIndex</codeph> est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Si l’élément au niveau de <codeph>elementIndex</codeph> n’est pas un TextElement.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Nouvel élément de texte contenant la dernière partie de l’élément de texte d’origine.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de la position de l’élément dans le groupe.
	 </apiDesc></apiParam><apiParam><apiItemName>splitIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro du caractère dans le TextElement où se produit la division. Le caractère spécifié est le premier caractère du nouveau TextElement.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Divise une partie d’un TextElement du groupe en un nouveau TextElement inséré dans le groupe suivant le TextElement spécifié.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:ungroupElements"><apiName>ungroupElements</apiName><shortdesc>
	 Annule le regroupement des éléments d’un GroupElement imbriqué que groupIndex spécifie au sein d’un objet GroupElement externe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si <codeph>groupIndex</codeph> est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Si l’élément au niveau de <codeph>groupIndex</codeph> n’est pas un objet GroupElement.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>groupIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro de la position du groupe à diviser.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Annule le regroupement des éléments d’un GroupElement imbriqué que <codeph>groupIndex</codeph> spécifie au sein d’un objet GroupElement externe. Après l’opération, les éléments dégroupés remplacent le GroupElement imbriqué, qui devient un orphelin avec une propriété <codeph>group</codeph> <codeph>null</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:GroupElement:elementCount:get"><apiName>elementCount</apiName><shortdesc>
	 Nombre d’éléments dans le groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Nombre d’éléments dans le groupe.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ContentElement"><apiName>ContentElement</apiName><shortdesc>
 La classe ContentElement sert de classe de base pour les types d’éléments susceptibles d’apparaître dans un GroupElement, c’est-à-dire un GraphicElement, un autre GroupElement ou un TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe ContentElement sert de classe de base pour les types d’éléments susceptibles d’apparaître dans un GroupElement, c’est-à-dire un GraphicElement, un autre GroupElement ou un TextElement.
 
 <p>ContentElement est une classe de base abstraite. De ce fait, il est impossible de l’instancier directement. Appeler <codeph>new ContentElement()</codeph> renvoie une exception <codeph>ArgumentError</codeph>. </p>
 
 <p>Vous pouvez affecter un élément ContentElement à un <codeph>GroupElement</codeph> précisément ou à la propriété <codeph>content</codeph> d’un seul bloc de texte.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock/content"><linktext>TextBlock.content</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links><apiConstructor id="flash.text.engine:ContentElement:ContentElement"><apiName>ContentElement</apiName><shortdesc>
	L’appel du constructeur new ContentElement() renvoie une exception ArgumentError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Format de l’élément pour le texte dans l’élément. La valeur par défaut est <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet <codeph>EventDispatcher</codeph> qui reçoit des copies de chaque événement déclenché pour valider les lignes de texte créées en fonction de cet élément de contenu. La valeur par défaut est <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Rotation appliquée à l’élément en tant qu’unité. Utilisez les constantes <codeph>TextRotation</codeph> pour cette propriété. La valeur par défaut est <codeph>TextRotation.ROTATE_0</codeph>.
   	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	L’appel du constructeur <codeph>new ContentElement()</codeph> renvoie une exception <codeph>ArgumentError</codeph>. Vous <i>pouvez</i> cependant appeler des constructeurs pour les sous-classes suivantes de ContentElement :
	
	<ul>
	
		<li><codeph>new GraphicElement()</codeph></li>
		<li><codeph>new GroupElement()</codeph></li>
		<li><codeph>new TextElement()</codeph></li>
	
	</ul>
	
 	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.engine:ContentElement:GRAPHIC_ELEMENT"><apiName>GRAPHIC_ELEMENT</apiName><shortdesc> 
	Indique la présence d’un élément graphique dans le texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFDEF</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	Indique la présence d’un élément graphique dans le texte.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/rawText"><linktext>rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:userData"><apiName>userData</apiName><shortdesc>
	 Permet à l’auteur d’associer des données arbitraires à l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Permet à l’auteur d’associer des données arbitraires à l’élément.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:elementFormat:get"><apiName>elementFormat</apiName><shortdesc>
	 Objet ElementFormat utilisé pour l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ElementFormat</apiValueClassifier></apiValueDef><apiDesc>
	 Objet ElementFormat utilisé pour l’élément.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 <p>Lorsque la propriété elementFormat est définie, l’objet ElementFormat fourni est bloqué : sa propriété <codeph>locked</codeph> est définie sur <codeph>true</codeph>. Il est impossible de modifier un objet ElementFormat bloqué.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:eventMirror:get"><apiName>eventMirror</apiName><shortdesc>
	 Objet EventDispatcher qui reçoit des copies de chaque événement distribué pour valider les lignes de texte créées en fonction de cet élément de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 Objet <codeph>EventDispatcher</codeph> qui reçoit des copies de chaque événement distribué pour valider les lignes de texte créées en fonction de cet élément de contenu. L’objet spécifié peut être utilisé pour configurer des écouteurs pour un lien texte ou un autre morceau de texte interactif. En effet, il peut s’avérer difficile de déterminer au moment de l’exécution quelles parties des lignes résultent de tels ou tels éléments de contenu. Vous pouvez également utiliser des écouteurs pour appliquer des décorations, telles que des soulignements, dont vous ne pouvez pas déterminer les mesures après la disposition du texte. La valeur par défaut est <codeph>null</codeph>, c’est-à-dire que aucun des événements mis en miroir n’est déclenché.
	 
	 <p>Les miroirs d’événements se manifestent dans les lignes de texte sous forme d’occurrence de la classe <codeph>TextLineMirrorRegion</codeph>. Selon le traitement bidirectionnel et les sauts de ligne, une ou plusieurs zones miroir peuvent être produites.</p>
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextElement/eventMirror"><linktext>TextElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:groupElement:get"><apiName>groupElement</apiName><shortdesc>
	 Objet GroupElement contenant cet élément, ou null s’il ne fait pas partie d’un groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:GroupElement</apiValueClassifier></apiValueDef><apiDesc>
	 Objet GroupElement contenant cet élément, ou <codeph>null</codeph> s’il ne fait pas partie d’un groupe.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:rawText:get"><apiName>rawText</apiName><shortdesc>
	 Copie du texte dans l’élément, y compris les caractères U+FDEF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Copie du texte dans l’élément, y compris les caractères U+FDEF. Le caractère U+FDEF est un caractère arbitraire qui représente un élément graphique dans la chaîne.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:text:get"><apiName>text</apiName><shortdesc>
	 Copie du texte dans l’élément, caractères U+FDEF représentant les éléments graphiques dans la chaîne non compris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Copie du texte dans l’élément, caractères U+FDEF représentant les éléments graphiques dans la chaîne non compris.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextElement/text"><linktext>TextElement.text</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 TextBlock auquel appartient l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock auquel appartient l’élément.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 Index du premier caractère de cet élément dans le bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Index du premier caractère de cet élément dans le bloc de texte. Cette valeur n’est pas mise en cache mais calculée à chaque appel de cette méthode.
	 
	 <p>La valeur par défaut est -1.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Rotation à appliquer à l’élément en tant qu’unité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si la propriété est définie sur <codeph>TextRotation.AUTO</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si l’opération résulte en rotations imbriquées dans un <codeph>GroupElement</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Rotation à appliquer à l’élément en tant qu’unité. Utilisez les constantes <codeph>TextRotation</codeph> pour cette propriété. 
	 
	 <p>La valeur par défaut est <codeph>TextRotation.ROTATE_0</codeph>.</p>
	 
	 <p>La rotation finale des glyphes est la somme de ElementFormat.textRotation, ContentElement.textRotation et TextBlock.lineRotation.</p>
	 
	 <p><codeph>ContentElement.textRotation</codeph> est généralement utilisé pour créer une brève exécution de texte dont la rotation diffère de la ligne conteneur. Les exécutions TCY du texte japonais en sont un exemple. TCY est l’acronyme de Tate-Chu-Yoko et fait référence à une petite séquence de texte horizontale (généralement un nombre) dans un texte japonais vertical. Pour créer un paragraphe de texte japonais vertical contenant une séquence TCY, procédez comme suit :</p>
	 <ol>
	 <li>Définissez <codeph>TextBlock.lineRotation=TextRotation.ROTATE_90</codeph></li>
	 <li>Définissez <codeph>TextBlock.content</codeph> sur un <codeph>GroupElement</codeph>, composé de trois objets <codeph>TextElement</codeph>. Le premier de ces éléments est le texte japonais avant l’exécution TCY, le second est le texte latin de l’exécution TCY et le troisième est le texte japonais après l’exécution TCY.</li>
	 <li>Définissez la propriété <codeph>textRotation</codeph> du <codeph>TextElement</codeph> TCY sur <codeph>TextRotation.ROTATE_270</codeph>. L’élément de texte TCY pivote en tant qu’unité. Il commence par une rotation de 90 degrés héritée de la ligne. Une nouvelle rotation de 270 degrés le ramène à l’horizontale.</li>
	 </ol>
	 
	 <p>Les éléments de contenu qui ont subi une rotation ne peuvent pas être imbriqués. Dans toute hiérarchie d’éléments de contenu, quelle que soit la complexité, il n’est possible de définir la propriété <codeph>textRotation</codeph> que d’un seul élément de contenu. Les méthodes et définitions de propriétés suivantes renvoient une erreur d’argument si des rotations imbriquées sont détectées :</p>
	 <ol>
	 <li><codeph>ContentElement.textRotation</codeph></li>
	 <li><codeph>GroupElement.setElements</codeph></li>
	 <li><codeph>GroupElement.replaceElements</codeph></li>
	 </ol>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>L’élément ne pivote pas.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>L’élément pivote de 90 degrés vers la droite.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>L’élément pivote de 180 degrés.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>L’élément pivote de 270 degrés vers la droite.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Non pris en charge.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 La classe TextBlock est une usine de création d’objets TextLine, que vous pouvez restituer en les plaçant dans la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe TextBlock est une usine de création d’objets TextLine, que vous pouvez restituer en les plaçant dans la liste d’affichage.
 
 <p>La classe TextBlock est destinée à contenir un seul paragraphe car les algorithmes bidirectionnels Unicode et de saut de ligne fonctionnent sur un paragraphe à la fois. Pour les applications composées de plusieurs paragraphes de texte, utilisez un langage à balises, ou une analyse de texte, pour diviser le texte en paragraphes et créer un seul TextBlock par paragraphe.</p>
 
 <p>L’objet TextBlock stocke son contenu dans la propriété <codeph>content</codeph>, une occurrence de la classe ContentElement. Comme vous ne pouvez pas créer d’occurrence de la classe ContentElement, définissez <codeph>content</codeph> sur une occurrence de l’une de ses sous-classes : TextElement, GraphicElement ou GroupElement. Utilisez TextElement pour du contenu texte seulement, GraphicElement pour une image ou du contenu graphique et GroupElement pour du contenu combinant des objets TextElement, GraphicElement et d’autres objets GroupElement. Pour plus d’informations sur la gestion des séquences de texte mises en forme, des sous-séquences intégrées et des éléments graphiques, reportez-vous à la classe ContentElement et à ses sous-classes.</p>
 
 <p>Après avoir créé l’occurrence de TextBlock et défini la propriété <codeph>content</codeph>, appelez la méthode <codeph>createTextLine()</codeph> pour créer des lignes de texte, correspondant à des occurrences de la classe <codeph>TextLine</codeph>. </p>
 
 </apiDesc><example conref="examples\TextBlockExample.as"> Cet exemple affiche trois paragraphes TextBlock de texte japonais et anglais. Le texte japonais est converti en chaînes à partir de codes de caractères Unicode. Lorsque vous cliquez sur le bouton, l’exemple fait pivoter le texte de horizontal à vertical, ou inversement.
 <ol>
     <li>Ajoutez un composant Button à la bibliothèque.</li>
  <li>Enregistrez ce code sous le nom TextBlockExample.as dans le même répertoire que votre fichier FLA.</li>
  <li>Dans le panneau Propriétés de votre fichier FLA, définissez Class sur TextBlockExample.</li>
 </ol>

<codeblock>
package { 
    import fl.controls.Button;
     import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextRotation;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.LineJustification;
    import flash.text.engine.FontDescription;
    import flash.text.engine.EastAsianJustifier; 
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.display.Stage;
    import flash.events.MouseEvent;
    import flash.system.Capabilities;
    
    public class TextBlockExample extends Sprite {
        
        var vertical:Boolean;    
        var container:Sprite;
        var textBlocks:Vector.&lt;TextBlock>;
        var loader:Loader = new Loader();
        var directionButton:Button = new Button();
        
        public function TextBlockExample():void {
            addChild(directionButton);
            directionButton.width = 30;
            directionButton.move(50, 350);
            directionButton.addEventListener(MouseEvent.CLICK, clickHandler);
            createContent();
            createLines();
        }

        private function createEmptyBlock():TextBlock {
        
            var textBlock:TextBlock = new TextBlock();
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_BUT_LAST);
            textBlock.lineRotation = vertical? TextRotation.ROTATE_90: TextRotation.ROTATE_0;
            return textBlock;    
        }
        
        private function paragraph1(format:ElementFormat):TextBlock {
        
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;
        }

        private function paragraph2(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x30AF, 0x30ED, 0x30B9, 0x30D7, 0x30E9, 0x30C3, 0x30C8, 0x30D5, 
                0x30A9, 0x30FC, 0x30E0, 0x4E0A, 0x3067, 0x518D, 0x751F, 0x53EF, 
                0x80FD, 0x306A
            ) + 
            "Flash Video" +
            String.fromCharCode(
                0x3092, 0x914D, 0x4FE1, 0x3001, 0x653F, 0x5E9C, 0x6700, 0x65B0, 
                0x60C5, 0x5831, 0x3092, 0x3088, 0x308A, 0x591A, 0x304F, 0x306E, 
                0x56FD, 0x6C11, 0x306B, 0x9AD8, 0x54C1, 0x8CEA, 0x306A, 0x753B, 
                0x50CF, 0x3067, 0x7C21, 0x5358, 0x304B, 0x3064, 0x30EA, 0x30A2, 
                0x30EB, 0x30BF, 0x30A4, 0x30E0, 0x306B, 0x63D0, 0x4F9B, 0x3059, 
                0x308B, 0x3053, 0x3068, 0x304C, 0x53EF, 0x80FD, 0x306B, 0x306A, 
                0x308A, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;    
        }

        private function paragraph3(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(0x3010) +
            "2007" +
            String.fromCharCode(0x5E74) + "2" + String.fromCharCode(0x6708) +
            "21" +
            String.fromCharCode(0x65E5, 0x3011),
            format);
            return textBlock;    
        }

        private function createContent():void {
            
            var font:FontDescription = new FontDescription();
            if (Capabilities.os.search("Mac OS") > -1) 
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R"; // "Kozuka Mincho Pro R"                    koFont.fontName = "Adobe " + String.fromCharCode(0xBA85, 0xC870) + " Std M"; // "Adobe Myungjo Std M"
            else 
                font.fontName = "Kozuka Mincho Pro R";        
            var format:ElementFormat = new ElementFormat();
            format.fontDescription = font;
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0x000000;
            if (!vertical) 
                format.textRotation = TextRotation.ROTATE_0; 
            textBlocks = new Vector.&lt;TextBlock>();
            textBlocks.push(
                paragraph1(format),
                paragraph2(format),
                paragraph3(format)//,
            );
        }

        private function createLines():void {    
        
            if (container != null) {
                removeChild(container);
            }            
            container = new Sprite();
            container.y = 45;
            container.x = 40;
            addChild(container);
            var linePosition:Number = vertical? this.stage.stageWidth - 120: 12;
        
            for (var i:uint = 0; i &lt; textBlocks.length; i++) {
                var textBlock:TextBlock = textBlocks[i];
                var previousLine:TextLine = null;
        
                while (true) {
                    var textLine:TextLine = textBlock.createTextLine(
                        previousLine, 
                        300);
                    if (textLine == null) 
                        break;
                    if (vertical) 
                    {
                        textLine.x = linePosition;
                        linePosition -= 24;
                        directionButton.label = " -- ";
                    }
                    else 
                    {
                        textLine.y = linePosition+50;
                        linePosition += 24;
                        directionButton.label = " | ";
                    }
                    container.addChild(textLine);                
                    previousLine = textLine;
                }
                if (vertical) 
                    linePosition -= 16;
                else 
                    linePosition += 16; 
            }
        }

        private function clickHandler(event:MouseEvent):void {
            
            vertical = !vertical;
            createContent();
            createLines();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links><apiConstructor id="flash.text.engine:TextBlock:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 	 Crée un objet TextBlock
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Le <codeph>contenu</codeph> spécifié n’est pas une sous-classe connue de <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le <codeph>contenu</codeph> spécifié est déjà membre d’un groupe.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>lineRotation</codeph> spécifié n’appartient pas à <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>baselineZero</codeph> spécifié n’appartient pas à<codeph>TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>bidiLevel</codeph> spécifié est inférieur à 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>tabStops</codeph> spécifiés contiennent des éléments <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>tabStops</codeph> spécifiés ne sont pas stockés par position croissante.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le <codeph>baselineFontSize</codeph> spécifié est inférieur à 0.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Contenu du bloc de texte.
	 </apiDesc></apiParam><apiParam><apiItemName>tabStops</apiItemName><apiType value="Vector$flash.text.engine:TabStop"/><apiData>null</apiData><apiDesc>Arrêts de tabulation du texte dans le bloc de texte.
     </apiDesc></apiParam><apiParam><apiItemName>textJustifier</apiItemName><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet TextJustifier à utiliser lors de la création de la ligne pour ce bloc. Lorsque aucun justificateur n’est fourni, un justificateur par défaut est construit à partir des paramètres régionaux anglais.
     </apiDesc></apiParam><apiParam><apiItemName>lineRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Rotation appliquée aux lignes de texte générées à partir du bloc de texte en tant qu’unités.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineZero</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Spécifie quelle ligne de base est à y=0 pour toutes les lignes du bloc.
     </apiDesc></apiParam><apiParam><apiItemName>bidiLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte.
	 </apiDesc></apiParam><apiParam><apiItemName>applyNonLinearFontScaling</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Indique que vous souhaitez améliorer l’aspect de l’écran au détriment de la fidélité d’impression WYSIWYG.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Spécifie la description d’une police à partir de laquelle les lignes de base des lignes doivent dériver pour toutes les lignes du bloc.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>Spécifie la taille à utiliser avec le baselineFontDescription. Ce paramètre est ignoré si <codeph>baselineFontDescription</codeph> est <codeph>null</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Crée un objet TextBlock
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TextBlock/applyNonLinearFontScaling"><linktext>applyNonLinearFontScaling</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>baselineZero</linktext></link><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>bidiLevel</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>lineRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>tabStops</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextBlock:createTextLine"><apiName>createTextLine</apiName><shortdesc>
	 Indique au bloc de texte de créer une ligne de texte à partir de son contenu, en commençant au point spécifié par le paramètre previousLine et en faisant un saut de ligne au point spécifié par le paramètre width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si le TextLine spécifié par <codeph>previousLine</codeph> n’est pas valide.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si <codeph>width</codeph> est inférieur à zéro, sauf si <codeph>fitSomething</codeph> est true.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si <codeph>width</codeph> est supérieur à <codeph>TextLine.MAX_LINE_WIDTH</codeph>.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si un ou plusieurs éléments du contenu du bloc de texte possèdent un <codeph>ElementFormat null</codeph>.
     	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ligne de texte ou <codeph>null</codeph> si le bloc de texte est vide ou si la largeur spécifiée est inférieure à celle de l’élément suivant. Pour différencier les deux cas, vérifiez la propriété <codeph>textLineCreationResult</codeph> du bloc de texte.
     	 
     	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>previousLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiData>null</apiData><apiDesc>Spécifie la ligne précédemment coupée en deux après laquelle la séparation doit commencer. Peut être <codeph>null</codeph> lorsque la séparation est au niveau de la première ligne.
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000000</apiData><apiDesc>Spécifie la largeur désirée de la ligne, en pixels. La largeur réelle peut être inférieure.
	 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Paramètre facultatif qui spécifie la différence, en pixels, entre l’origine de la ligne et l’origine des taquets de tabulation. Ce paramètre peut être utilisé lorsque les lignes ne sont pas alignées mais, pour leurs tabulations, il est préférable qu’elles le soient. La valeur par défaut de ce paramètre est <codeph>0.0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Paramètre facultatif qui indique à Flash Player d’ajuster au moins un caractère dans la ligne de texte, quelle que soit la largeur spécifiée (même si la largeur est nulle ou négative, ce qui autrement entraîne le renvoi d’une exception).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Indique au bloc de texte de créer une ligne de texte à partir de son contenu, en commençant au point spécifié par le paramètre <codeph>previousLine</codeph> et en faisant un saut de ligne au point spécifié par le paramètre <codeph>width</codeph>. La ligne de texte est un objet TextLine, que vous pouvez ajouter à la liste d’affichage.
	 
	 <p>Insérer des sauts de ligne dans une plage de blocs de texte dans laquelle une séparation existe déjà peut modifier la validité des lignes dans et au-delà de la zone où sont situés les sauts de ligne. L’état des lignes peut passer de VALID à INVALID ou à POSSIBLY_INVALID. Si un nouveau saut de ligne s’aligne parfaitement avec un saut de ligne précédent dont l’état est POSSIBLY_INVALID, cette dernière ligne et toutes les lignes POSSIBLY_INVALID reprennent un état VALID. La validité des lignes définies sur des valeurs n’appartenant pas à <codeph>TextLineValidity</codeph> ne devient pas VALID, mais peut devenir INVALID. Vérifiez la propriété <codeph>firstInvalidLine</codeph> après chaque modification du bloc de texte pour savoir où commencer ou poursuivre les sauts de lignes de texte.</p>
	 
	 <p>Vous pouvez créer des séparations de mots artificielles en incluant le caractère Unicode ZWSP (Zero Width Space), ou espace sans chasse, dans le texte. Cela peut se révéler utile pour les langues telles que le Thaïlandais, qui requiert un dictionnaire pour les sauts de ligne corrects. Un tel dictionnaire n’est pas compris dans Flash Player.</p>
	 
	 </apiDesc><example conref="examples\TextBlock_createTextLineExample.as"> Cet exemple appelle la méthode <codeph>createTextLine()</codeph> pour créer des lignes de texte dans un bloc de texte. Pour ce faire, il effectue les tâches suivantes :
  <ul>
     <li>Il crée un objet TextElement à partir d’une chaîne et lui donne une taille de police de 20.</li> 
     <li>Il crée un objet TextBlock et lui affecte l’objet TextElement.</li>
     <li>Il appelle la méthode <codeph>createTextLine()</codeph> pour créer des lignes de 300 pixels à partir du bloc de texte.</li>
    <li>Il place chaque ligne sur la scène (<codeph>addChild()</codeph>) et définit sa position (<codeph>x</codeph> et <codeph>y</codeph>).</li>
  </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_createTextLineExample extends Sprite {
        
        public function TextBlock_createTextLineExample():void {
            
            var str:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. The createTextLine() method " +
            "then created these lines, 300 pixels wide, for display." ;
            
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 16;
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock); 
        }
        
        private function createLines(textBlock:TextBlock):void 
        {            
            var lineWidth:Number = 300;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:dump"><apiName>dump</apiName><shortdesc>
	 Libère le contenu sous-jacent du TextBlock sous forme de chaîne XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Libère le contenu sous-jacent du TextBlock sous forme de chaîne XML. Cela peut se révéler utile lors de tests automatisés, et comprend le texte, la mise en forme et les informations de rendu. Disponible uniquement dans le débogueur Flash Player.
	 
	 <p><b>Remarque :</b> le contenu et le format du résultat peuvent changer dans le futur. Adobe ne garantie pas la compatibilité ascendante pour cette méthode.</p>
	 
	 <p>Le tableau suivant décrit le résultat :</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>Balise</entry><entry>Attribut</entry><entry>Description</entry></row></thead><tbody><row><entry><codeph>&lt;block></codeph></entry><entry> </entry><entry>TextBlock</entry></row><row><entry><codeph>&lt;line</codeph></entry><entry> </entry><entry>TextLine</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>élément d’exécution en ligne de démarrage</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>élément d’exécution en ligne de limite</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>fermeture de la balise de ligne</entry></row><row><entry><codeph>&lt;run</codeph></entry><entry> </entry><entry>les éléments d’une ligne</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>élément d’exécution en ligne de démarrage</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>élément d’exécution en ligne de limite</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>fermeture de la balise d’exécution</entry></row><row><entry><codeph>&lt;inter</codeph></entry><entry> </entry><entry>élément inter</entry></row><row><entry> </entry><entry><codeph>cursor=</codeph></entry><entry>caractère cursor (index dans le texte original)</entry></row><row><entry> </entry><entry><codeph>tcb=</codeph></entry><entry>limite du cluster typographique</entry></row><row><entry> </entry><entry><codeph>wb=</codeph></entry><entry>limite de mot</entry></row><row><entry> </entry><entry><codeph>lbo=</codeph></entry><entry>possibilité de saut de ligne </entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>vrai saut de ligne</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fin d’une balise inter</entry></row><row><entry><codeph>&lt;char</codeph></entry><entry> </entry><entry>élément de caractère </entry></row><row><entry> </entry><entry><codeph>usv=</codeph></entry><entry>valeur scalaire Unicode</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fin d’une balise char</entry></row><row><entry><codeph>&lt;glyph</codeph></entry><entry> </entry><entry>élément de glyphe calculé ou de glyphe mis en forme</entry></row><row><entry> </entry><entry><codeph>font=</codeph></entry><entry>nom de police</entry></row><row><entry> </entry><entry><codeph>gid=</codeph></entry><entry>index du glyphe </entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>attached=</codeph></entry><entry>si deux éléments sont attachés</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>décalages des limites du cluster typographique interne</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>niveau bidirectionnel</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>classe d’espacement</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fin d’une balise glyph</entry></row><row><entry><codeph>&lt;fo</codeph></entry><entry> </entry><entry>élément graphique </entry></row><row><entry> </entry><entry><codeph>id=</codeph></entry><entry>id d’élément</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>limite gauche</entry></row><row><entry> </entry><entry><codeph>rb=</codeph></entry><entry>limite droite</entry></row><row><entry> </entry><entry><codeph>tb=</codeph></entry><entry>limite supérieure</entry></row><row><entry> </entry><entry><codeph>bb=</codeph></entry><entry>limite inférieure</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>décalages des limites du cluster typographique interne</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>niveau bidirectionnel</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>classe d’espacement</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fin d’une balise fo</entry></row><row><entry><codeph>&lt;embeddedRun</codeph></entry><entry> </entry><entry>exécution intégrée</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>fermeture de la balise embeddedRun </entry></row><row><entry><codeph>&lt;run></codeph></entry><entry> </entry><entry>exécution</entry></row><row><entry><codeph>&lt;/run></codeph></entry><entry> </entry><entry>fin d’une balise run </entry></row><row><entry><codeph>&lt;/embeddedRun></codeph></entry><entry> </entry><entry>fin d’une balise embeddedRun</entry></row><row><entry><codeph>&lt;carets</codeph></entry><entry> </entry><entry>les carets d’une ligne</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>élément d’exécution en ligne de démarrage</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>élément d’exécution en ligne de limite</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>fermeture de la balise carets </entry></row><row><entry><codeph>&lt;cursor></codeph></entry><entry> </entry><entry>curseur</entry></row><row><entry> </entry><entry><codeph>x=</codeph></entry><entry>position x du côté gauche </entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fin d’une balise cursor</entry></row><row><entry><codeph>&lt;cluster</codeph></entry><entry> </entry><entry>cluster</entry></row><row><entry> </entry><entry><codeph>c=</codeph></entry><entry>position centrale</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>décalage tc de démarrage</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>décalage tc de limite</entry></row><row><entry> </entry><entry><codeph>bidi</codeph></entry><entry>niveau bidirectionnel</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fin d’une balise cluster</entry></row><row><entry><codeph>&lt;/carets></codeph></entry><entry> </entry><entry>fin d’une balise carets</entry></row><row><entry><codeph>&lt;/line></codeph></entry><entry> </entry><entry>fin d’une balise line</entry></row><row><entry><codeph>&lt;/block></codeph></entry><entry> </entry><entry>fin d’une balise block</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/dump()"><linktext>TextLine.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc>
	 Recherche l’index de la prochaine limite d’atome à partir de l’index de caractère spécifié, sans inclure le caractère situé au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Le caractère <codeph>index</codeph> spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Le TextLine auquel le caractère indexé appartient n’est pas valide.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de la prochaine limite d’atome à partir de l’index de caractère spécifié.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Spécifie l’index de caractère à partir duquel la prochaine limite d’atome doit être recherchée.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Recherche l’index de la prochaine limite d’atome à partir de l’index de caractère spécifié, sans inclure le caractère situé au niveau de l’index spécifié. Les caractères situés entre les limites des atomes se combinent pour former un seul atome dans un <codeph>TextLine</codeph>, par exemple un ’e’ et un accent aigu.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc>
	 Recherche l’index de la prochaine limite de mot à partir de l’index de caractère spécifié, sans comprendre le caractère situé au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Le caractère <codeph>index</codeph> spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Le TextLine auquel le caractère indexé appartient n’est pas valide.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de la prochaine limite de mot à partir de l’index de caractère spécifié.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Spécifie l’index de caractère à partir duquel la prochaine limite de mot doit être recherchée.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Recherche l’index de la prochaine limite de mot à partir de l’index de caractère spécifié, sans comprendre le caractère situé au niveau de l’index spécifié. Les limites de mot sont déterminées à partir des propriétés Unicode des caractères.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc>
	 Recherche l’index de la limite d’atome précédente jusqu’à l’index de caractère spécifié, sans inclure le caractère situé au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Le caractère <codeph>index</codeph> spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Le TextLine auquel le caractère indexé appartient n’est pas valide.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de la limite d’atome précédente jusqu’à l’index de caractère spécifié.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Spécifie l’index de caractère à partir duquel la limite d’atome précédente doit être recherchée.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Recherche l’index de la limite d’atome précédente jusqu’à l’index de caractère spécifié, sans inclure le caractère situé au niveau de l’index spécifié. Les caractères situés entre les limites des atomes se combinent pour former un seul atome dans un <codeph>TextLine</codeph>, par exemple un ’e’ et un accent aigu.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc>
	 Recherche l’index de la précédente limite de mot jusqu’à l’index de caractère spécifié, sans comprendre le caractère situé au niveau de l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Le caractère <codeph>index</codeph> spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Le TextLine auquel le caractère indexé appartient n’est pas valide.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Index de la précédente limite de mot jusqu’à l’index de caractère spécifié.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Spécifie l’index de caractère à partir duquel la limite de mot précédente doit être recherchée.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Recherche l’index de la précédente limite de mot jusqu’à l’index de caractère spécifié, sans comprendre le caractère situé au niveau de l’index spécifié. Les limites de mot sont déterminées à partir des propriétés Unicode des caractères.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:getTextLineAtCharIndex"><apiName>getTextLineAtCharIndex</apiName><shortdesc>
	 Renvoie le TextLine contenant le caractère spécifié par le paramètre charIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Le caractère d’index spécifié est hors limites.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>TextLine contenant le caractère au niveau de <codeph>charIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Valeur d’index de base zéro du caractère (par exemple, le premier caractère est 0, le deuxième est 1, etc.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Renvoie le TextLine contenant le caractère spécifié par le paramètre <codeph>charIndex</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:releaseLines"><apiName>releaseLines</apiName><shortdesc>
	 Supprime une plage de lignes de texte de la liste des lignes conservées par le TextBlock.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si le TextLine spécifié par <codeph>firstLine</codeph> ou <codeph>lastLine</codeph> n’est pas dans la liste des lignes de texte conservées par le bloc de texte.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>firstLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Spécifie la première ligne à libérer.
	 </apiDesc></apiParam><apiParam><apiItemName>lastLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Spécifie la dernière ligne à libérer.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Supprime une plage de lignes de texte de la liste des lignes conservées par le TextBlock. Les lignes peuvent ainsi être nettoyées lorsque aucune autre référence n’existe.
	 
	 <p>Définissez sur <codeph>null</codeph> les <codeph>textBlock</codeph>, <codeph>nextLine</codeph> et <codeph>previousLine</codeph> appartenant aux lignes supprimées. Définissez sur <codeph>TextLineValidity.INVALID</codeph> la <codeph>validity</codeph> des lignes supprimées et de toutes les lignes qui les suivent dans le TextBlock.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextBlock:userData"><apiName>userData</apiName><shortdesc>
	 Permet à l’auteur d’associer des données arbitraires au bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Permet à l’auteur d’associer des données arbitraires au bloc de texte. Les données peuvent être des informations faisant référence au contenu, par exemple, une date de révision ou le nom de l’auteur, ou peuvent être des données mises en cache et requises lors du traitement.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:applyNonLinearFontScaling:get"><apiName>applyNonLinearFontScaling</apiName><shortdesc>
	 Indique que vous souhaitez améliorer l’aspect de l’écran au détriment de la fidélité d’impression WYSIWYG.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Indique que vous souhaitez améliorer l’aspect de l’écran au détriment de la fidélité d’impression WYSIWYG. Dans le cas des plates-formes et des polices qui prennent en charge le redimensionnement non linéaire, le fait de définir cette propriété sur <codeph>true</codeph> permet d’utiliser ces mesures, au détriment de la fidélité d’impression WYSIWYG, en particulier dans le cas des petites tailles en points.
	 
	 <p>La valeur par défaut est <codeph>true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontDescription:get"><apiName>baselineFontDescription</apiName><shortdesc>
	 Police utilisée pour déterminer les lignes de base de toutes les lignes créées à partir du bloc, quel que soit leur contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier></apiValueDef><apiDesc>
	 Police utilisée pour déterminer les lignes de base de toutes les lignes créées à partir du bloc, quel que soit leur contenu. Les lignes de base dépendent de la police et de sa taille.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>. Lorsque la police de la ligne de base est <codeph>null</codeph>, la taille de police de la ligne de base est ignorée et la ligne de base de toutes les lignes est basée sur la police et la taille du texte le plus large de la ligne. Lorsque vous spécifiez à la fois <codeph>baselineFontDescription</codeph> et <codeph>baselineFontSize</codeph>, ces paramètres déterminent les lignes de base de toutes les lignes du bloc de texte, indépendamment de leur contenu. Cette combinaison est plus généralement utilisée dans la typographie asiatique.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontSize:get"><apiName>baselineFontSize</apiName><shortdesc>
	 Taille de police utilisée pour calculer les lignes de base des lignes créées à partir du bloc.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>La <codeph>baselineFontSize</codeph> spécifiée est inférieure à 0.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Taille de police utilisée pour calculer les lignes de base des lignes créées à partir du bloc. Les lignes de base dépendent de la police et de sa taille.
	 
	 <p>La valeur par défaut est <codeph>12</codeph>. Lorsque la police de la ligne de base est <codeph>null</codeph>, la taille de police de la ligne de base est ignorée et la ligne de base de toutes les lignes est basée sur la police et la taille du texte le plus large de la ligne. </p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineZero:get"><apiName>baselineZero</apiName><shortdesc>
	 Spécifie quelle ligne de base est au niveau y=0 pour les lignes créées à partir de ce bloc.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>TextBaseline</codeph>.
     
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie quelle ligne de base est au niveau y=0 pour les lignes créées à partir de ce bloc. Les valeurs valides de cette propriété sont les membres de la classe <codeph>TextBaseline</codeph>. 
	 
	 <p>La valeur par défaut est <codeph>TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>Pour définir les valeurs pour cette propriété, utilisez les valeurs de chaîne suivantes :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>La ligne de base des lignes à caractères romains est située à y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>La ligne de base des lignes à caractères ascendants est située à y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>La ligne de base des lignes à caractères descendants est située à y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>La ligne de base des lignes avec haut des caractères idéographiques est située à y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>La ligne de base des lignes avec centre des caractères idéographiques est située à y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>La ligne de base des lignes avec bas des caractères idéographiques est située à y=0.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:bidiLevel:get"><apiName>bidiLevel</apiName><shortdesc>
	 Spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>Si défini sur une valeur inférieure à 0.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte. Une valeur paire signifie de gauche à droite et une valeur impaire de droite à gauche. Vous pouvez incrémenter <codeph>bidiLevel</codeph> pour indiquer le nombre de niveaux selon lequel un texte particulier est intégré par rapport aux valeurs gauche à droite ou droite à gauche.
	 
	 <p>La valeur par défaut est 0.</p>
	 
	 <p>Le fait de modifier <codeph>bidiLevel</codeph> définit la validité de toutes les lignes précédemment coupées en deux sur TextLineValidity.INVALID. Après la modification de <codeph>bidiLevel</codeph>, la propriété <codeph>firstInvalidLine</codeph> est égale à la propriété <codeph>firstLine</codeph> et vous devez créer à nouveau les sauts de toutes les lignes du TextBlock.</p>
	 
     </apiDesc><example conref="examples\TextBlock_bidiLevelExample.as"> Cet exemple montre la même chaîne de texte (ordre logique : a, b, c, alef, bet, gimel) restituée dans un premier temps alors que <codeph>bidiLevel</codeph> est pair et ensuite alors que <codeph>bidiLevel</codeph> est impair.
<codeblock>

package {
    
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_bidiLevelExample extends Sprite {
        
        public function TextBlock_bidiLevelExample():void {             
            var fontSize:Number = 36;

            var format:ElementFormat = new ElementFormat();        
            format.fontDescription = new FontDescription("Adobe Hebrew");
            format.fontSize = fontSize;
            var y:Number = 0;
            var leading:Number = fontSize * 0.2;
            var text:String = "abc" + String.fromCharCode(0x05D0, 0x05D1, 0x05D2);

            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(text, format);
                        
            // bidiLevel even
            textBlock.bidiLevel = 0;
            var textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;
            textLine.y = y;
            y += textLine.descent;
            addChild(textLine);      
            
            // bidiLevel odd
            textBlock.content = new TextElement(text, format);
            textBlock.bidiLevel = 1;
            textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;          
            textLine.y = y;
            addChild(textLine);   
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:content:get"><apiName>content</apiName><shortdesc>
	 Détient le contenu du bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>Si défini sur une valeur ne correspondant pas à une sous-classe connue de <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le <codeph>contenu</codeph> spécifié est déjà membre d’un groupe.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Détient le contenu du bloc de texte. ContentElement étant une classe de base, affectez <codeph>content</codeph> à une occurrence d’une sous-classe ContentElement : TextElement, GraphicElement ou GroupElement. Un objet TextElement contient une chaîne, un objet GraphicElement contient un objet DisplayObject et un objet GroupElement contient un objet Vector contenant un ou plusieurs objets TextElement ou GraphicElement ou d’autres objets GroupElement. Utilisez un TextElement pour un paragraphe de texte homogène, un GraphicElement pour un élément graphique et un GroupElement pour une combinaison de texte et d’éléments graphiques ou pour plusieurs occurrences de ces éléments, ainsi que d’autres objets GroupElement.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 <p>La modification de la propriété <codeph>content</codeph> change la validité de toute ligne créée précédemment en <codeph>TextLineValidity.INVALID</codeph>. Après la modification de <codeph>content</codeph>, la propriété <codeph>firstInvalidLine</codeph> est égale à la propriété <codeph>firstLine</codeph> et vous devez recréer les sauts de toutes les lignes du TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstInvalidLine:get"><apiName>firstInvalidLine</apiName><shortdesc>
	 Identifie la première ligne du bloc de texte dans laquelle TextLine.validity n’est pas égale à TextLineValidity.VALID.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Identifie la première ligne du bloc de texte dans laquelle <codeph>TextLine.validity</codeph> n’est pas égal à <codeph>TextLineValidity.VALID</codeph>.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstLine:get"><apiName>firstLine</apiName><shortdesc>
	 Premier TextLine du TextBlock, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Premier TextLine du TextBlock, le cas échéant.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lastLine:get"><apiName>lastLine</apiName><shortdesc>
	 Dernier TextLine du TextBlock, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Dernier TextLine du TextBlock, le cas échéant.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lineRotation:get"><apiName>lineRotation</apiName><shortdesc>
	 Fait pivoter les lignes de texte du bloc de texte en une seule unité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Si la propriété est définie sur une valeur n’appartenant pas à <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si la propriété est définie sur <codeph>TextRotation.AUTO</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Fait pivoter les lignes de texte du bloc de texte en une seule unité. Appelez la méthode <codeph>createTextLine()</codeph> <i>après</i> avoir défini <codeph>lineRotation</codeph> pour qu’elle prenne effet. La valeur par défaut est <codeph>TextRotation.ROTATE_0</codeph>.
	 
	 <p>La rotation finale d’un glyphe dépend des valeurs de <codeph>, de ElementFormat.textRotation</codeph>, de <codeph>ContentElement.textRotation</codeph> et de <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>TextBlock.lineRotation</codeph> est généralement utilisé pour le texte asiatique. Pour créer un paragraphe de texte japonais vertical, procédez comme suit :</p>
     <ol>
     <li>Définissez la propriété <codeph>TextBlock.lineRotation</codeph> sur <codeph>TextRotation.ROTATE_90</codeph>.</li>
     <li>Conservez la propriété <codeph>ElementFormat.textRotation</codeph> du contenu par défaut, <codeph>TextRotation.AUTO</codeph>.</li>
     </ol>
	 
	 <p>Utilisez les constantes suivantes, définies dans la classe <codeph>TextRotation</codeph>, pour définir la valeur de cette propriété :</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Les lignes ne pivotent pas.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Les lignes pivotent de 90 degrés vers la droite.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Les lignes pivotent de 180 degrés.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Les lignes pivotent de 270 degrés vers la droite.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Non pris en charge.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextBlock_lineRotationExample.as"> Cet exemple ajoute un texte japonais dans un TextBlock et définit la propriété <codeph>lineRotation</codeph> sur TextRotation.ROTATE_90 pour afficher la ligne verticalement. 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextRotation;
    import flash.text.engine.ElementFormat;
    
    public class TextBlock_lineRotationExample extends Sprite {
        
        public function TextBlock_lineRotationExample():void {
            var Japanese:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);

            var fontDescription:FontDescription = new FontDescription("MS Mincho");
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 15;
            format.fontDescription = fontDescription;
                        
            var textElement:TextElement = new TextElement(Japanese, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.lineRotation = TextRotation.ROTATE_90;

            var linePosition:Number = this.stage.stageWidth - 120;
            var previousLine:TextLine = null;
        
            while (true) {
                var textLine:TextLine = textBlock.createTextLine(
                    previousLine, 
                    300);
                if (textLine == null) 
                    break;
                textLine.y = 30;    
                textLine.x = linePosition;
                linePosition -= 24;
                addChild(textLine);                
                previousLine = textLine;
            }        
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 Spécifie les arrêts de tabulation du texte du bloc de texte, sous la forme d’un vecteur d’objets TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$flash.text.engine:TabStop"/><apiException><apiDesc>Les <codeph>tabStops</codeph> spécifiés contiennent des éléments <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Les <codeph>tabStops</codeph> spécifiés ne sont pas stockés par position croissante.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie les arrêts de tabulation du texte du bloc de texte, sous la forme d’un vecteur d’objets <codeph>TabStop</codeph>.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>, c’est-à-dire qu’aucun taquet de tabulation n’est activé. Si aucun taquet de tabulation n’est défini, le caractère de tabulation (\t) entraîne la création d’une nouvelle ligne.</p>
	 
	 <p>Lorsque la propriété <codeph>tabStops</codeph> est définie, le TextBlock effectue une copie du vecteur pour usage interne. La modification du vecteur original ou de son contenu n’a aucune incidence sur le TextBlock. Lorsque la propriété <codeph>tabStops</codeph> est interrogée, une copie du vecteur interne est renvoyée. La modification du vecteur renvoyé ou de son contenu n’a aucune incidence sur le TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textJustifier:get"><apiName>textJustifier</apiName><shortdesc>
	 Spécifie le TextJustifier à utiliser lors de la création de ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:TextJustifier</apiValueClassifier><apiException><apiDesc>Si défini sur une valeur ne correspondant pas à une sous-classe connue de <codeph>TextJustifier</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Spécifie le TextJustifier à utiliser lors de la création de ligne.
	 
	 <p>La valeur par défaut est un objet TextJustifier créé par défaut.</p>
	 
	 <p>Lorsque la propriété <codeph>textJustifier</codeph> est définie, le TextBlock effectue une copie de l’objet pour usage interne. La modification de l’objet original n’a aucune incidence sur le TextBlock. Lorsque la propriété <codeph>textJustifier</codeph> est interrogée, une copie de l’objet interne est renvoyée. Nous vous rappelons que la modification de cet objet renvoyé n’a aucune incidence sur le TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textLineCreationResult:get"><apiName>textLineCreationResult</apiName><shortdesc>
	 Indique le résultat d’une opération createTextLine().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Indique le résultat d’une opération <codeph>createTextLine()</codeph>. La modification du contenu du bloc invalide les sauts de ligne précédents et réinitialise cette propriété sur <codeph>null</codeph>.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 <p>Les valeurs de cette propriété sont les membres de <codeph>TextLineCreationResult</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Valeur de chaîne</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextLineCreationResult.SUCCESS</codeph></entry>
	 	<entry>La ligne a bien été séparée.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.COMPLETE</codeph></entry>
	 	<entry>Soit la nouvelle ligne créée s’alignait parfaitement avec les lignes suivantes qui sont passées de POSSIBLY_INVALID à VALID, soit aucune ligne n’a été créée car l’ensemble du texte du bloc a déjà été séparé.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.INSUFFICIENT_WIDTH</codeph></entry>
	 	<entry>Aucune ligne n’a été créée car le texte n’entrait pas dans la largeur spécifiée.</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLineCreationResult"><linktext>TextLineCreationResult</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineCreationResult"><apiName>TextLineCreationResult</apiName><shortdesc>
La classe TextLineCreationResult est une énumération de valeurs constantes utilisées avec TextBlock.textLineCreationResult.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe TextLineCreationResult est une énumération des valeurs constantes utilisées avec <codeph>TextBlock.textLineCreationResult</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextBlock/textLineCreationResult"><linktext>TextBlock.textLineCreationResult</linktext></link></related-links><apiValue id="flash.text.engine:TextLineCreationResult:COMPLETE"><apiName>COMPLETE</apiName><shortdesc> 
	Indique qu’aucune ligne n’a été créée car l’ensemble du texte du bloc a déjà été scindé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique qu’aucune ligne n’a été créée car l’ensemble du texte du bloc a déjà été scindé.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:EMERGENCY"><apiName>EMERGENCY</apiName><shortdesc> 
	Indique que la ligne a été créée avec une séparation d’urgence car aucune possibilité de saut n’était disponible dans la largeur spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>emergency</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique que la ligne a été créée avec une séparation d’urgence car aucune possibilité de saut n’était disponible dans la largeur spécifiée.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:INSUFFICIENT_WIDTH"><apiName>INSUFFICIENT_WIDTH</apiName><shortdesc> 
	Indique qu’aucune ligne n’a été créée car le texte n’entrait pas dans la largeur spécifiée et fitSomething n’était pas spécifié dans l’appel à createTextLine().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insufficientWidth</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique qu’aucune ligne n’a été créée car le texte n’entrait pas dans la largeur spécifiée et <codeph>fitSomething</codeph> n’était pas spécifié dans l’appel à <codeph>createTextLine()</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:SUCCESS"><apiName>SUCCESS</apiName><shortdesc> 
	Indique que la ligne a bien été scindée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>success</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique que la ligne a bien été scindée.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LigatureLevel"><apiName>LigatureLevel</apiName><shortdesc>
La classe LigatureLevel est une énumération des valeurs constantes utilisées pour définir la propriété ligatureLevel de la classe ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe LigatureLevel est une énumération des valeurs constantes utilisées pour définir la propriété <codeph>ligatureLevel</codeph> de la classe ElementFormat. Une ligature se produit lorsque plusieurs formes de lettres sont unies dans un seul glyphe. Les ligatures remplacent généralement des caractères consécutifs partageant des composants communs, par exemple les paires de lettres ’fi’, ’fl’ ou ’ae’. Elles sont utilisées avec les jeux de caractères latins et non latins. 
<p><b>Remarque :</b> lorsque vous utilisez les polices Arabic ou Syriac, <codeph>ligatureLevel</codeph> doit être défini sur MINIMUM ou une valeur supérieure.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/ligatureLevel"><linktext>flash.text.engine.ElementFormat.ligatureLevel</linktext></link></related-links><apiValue id="flash.text.engine:LigatureLevel:COMMON"><apiName>COMMON</apiName><shortdesc> 
	Permet de spécifier des ligatures courantes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>common</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier des ligatures courantes.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:EXOTIC"><apiName>EXOTIC</apiName><shortdesc> 
	Permet de spécifier des ligatures exotiques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exotic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier des ligatures exotiques.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:MINIMUM"><apiName>MINIMUM</apiName><shortdesc> 
	Permet de spécifier des ligatures minimales.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>minimum</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier des ligatures minimales.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:NONE"><apiName>NONE</apiName><shortdesc> 
	Permet de ne spécifier aucune ligature.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de ne spécifier aucune ligature.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:UNCOMMON"><apiName>UNCOMMON</apiName><shortdesc> 
	Permet de spécifier des ligatures rares.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncommon</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier des ligatures rares.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextRotation"><apiName>TextRotation</apiName><shortdesc>
La classe TextRotation énumère les valeurs constantes utilisées avec les propriétés suivantes : ElementFormat.textRotation, ContentElement.textRotation, TextBlock.lineRotation et TextLine.getAtomTextRotation().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe TextRotation énumère les valeurs constantes utilisées avec les propriétés suivantes : <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph>, <codeph>TextBlock.lineRotation</codeph> et <codeph>TextLine.getAtomTextRotation()</codeph>. 

<p>La rotation finale des glyphes est la somme de <codeph> TextBlock.lineRotation</codeph>, <codeph>ElementFormat.textRotation</codeph> et <codeph>ContentElement.textRotation</codeph>.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>TextLine.getAtomTextRotation()</linktext></link></related-links><apiValue id="flash.text.engine:TextRotation:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Spécifie une rotation de 90 degrés vers la gauche pour les glyphes larges et de pleine épaisseur uniquement, tels que déterminés par les propriétés Unicode du glyphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une rotation de 90 degrés vers la gauche pour les glyphes larges et de pleine épaisseur uniquement, tels que déterminés par les propriétés Unicode du glyphe. Cette valeur est généralement utilisée avec du texte asiatique pour ne faire pivoter que les glyphes requérant une rotation. Cette rotation est uniquement appliquée au texte vertical pour orienter verticalement les caractères larges et de pleine épaisseur sans affecter les autres caractères.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_0"><apiName>ROTATE_0</apiName><shortdesc> 
	Spécifie aucune rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate0</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie aucune rotation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_180"><apiName>ROTATE_180</apiName><shortdesc> 
	Spécifie une rotation de 180 degrés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate180</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une rotation de 180 degrés.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_270"><apiName>ROTATE_270</apiName><shortdesc> 
	Spécifie une rotation vers la droite de 270 degrés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate270</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une rotation vers la droite de 270 degrés.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_90"><apiName>ROTATE_90</apiName><shortdesc> 
	Spécifie une rotation vers la droite de 90 degrés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate90</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une rotation vers la droite de 90 degrés.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabAlignment"><apiName>TabAlignment</apiName><shortdesc>
La classe TabAlignment est une énumération de valeurs constantes que vous pouvez utiliser pour définir la propriété tabAlignment de la classe TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe TabAlignment est une énumération de valeurs constantes que vous pouvez utiliser pour définir la propriété <codeph>tabAlignment</codeph> de la classe <codeph>TabStop</codeph>. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TabStop/tabAlignment"><linktext>TabStop.tabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStop"><linktext>TextBlock.tabStop</linktext></link></related-links><apiValue id="flash.text.engine:TabAlignment:CENTER"><apiName>CENTER</apiName><shortdesc> 
	Positionne le centre du texte tabulé au niveau du taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positionne le centre du texte tabulé au niveau du taquet de tabulation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> 
	Positionne le symbole d’alignement du texte tabulé au niveau du taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positionne le symbole d’alignement du texte tabulé au niveau du taquet de tabulation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:END"><apiName>END</apiName><shortdesc> 
	Positionne la fin du texte tabulé au niveau du taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positionne la fin du texte tabulé au niveau du taquet de tabulation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:START"><apiName>START</apiName><shortdesc> 
	Positionne le début du texte tabulé au niveau du taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positionne le début du texte tabulé au niveau du taquet de tabulation.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
 La classe GraphicElement représente un élément graphique dans un objet TextBlock ou GroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe GraphicElement représente un élément graphique dans un objet TextBlock ou GroupElement. Affectez un objet GraphicElement à la propriété <codeph>content</codeph> d’un objet TextBlock pour afficher un graphique ou une image avec <codeph>TextBlock.createTextLine()</codeph>. Puis, affectez-le à un objet GroupElement pour le combiner avec d’autres éléments graphiques et de texte.
 
 </apiDesc><example conref="examples\GraphicElementExample.as"> L’exemple suivant crée un TextBlock avec un GraphicElement (case rouge) et l’affiche en ajoutant un second TextBlock contenant une légende au-dessous.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GraphicElementExample extends Sprite {
        
        public function GraphicElementExample():void {
            
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 14;
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0,0, 200, 200);
            redBox.graphics.endFill();   
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = graphicElement;
            var textLine1:TextLine = textBlock.createTextLine(null,redBox.width);
            addChild(textLine1);
            textLine1.x = 15
            textLine1.y = 215
            var str:String = "Your picture here ...";
            var textElement:TextElement = new TextElement(str, format);
            textBlock = new TextBlock();
            textBlock.content = textElement;
            var textLine2 = textBlock.createTextLine(null, 300);
            addChild(textLine2);
            textLine2.x = textLine1.x;
            textLine2.y += textLine1.y + format.fontSize;        
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:GraphicElement:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
	 Crée une occurrence de GraphicElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>graphic</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet DisplayObject qui permet de renseigner GraphicElement. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>Largeur de la zone réservée à l’élément, en pixels. La valeur par défaut est 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>Hauteur de la zone réservée à l’élément, en pixels. La valeur par défaut est 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Format d’élément de l’élément. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Objet <codeph>EventDispatcher</codeph> qui reçoit des copies de chaque événement déclenché vers les lignes de texte créées en fonction de cet élément de contenu. La valeur par défaut est <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Rotation appliquée à l’élément en tant qu’unité. Utilisez les constantes <codeph>flash.text.engine.TextRotation</codeph> pour cette propriété. La valeur par défaut est <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Crée une occurrence de GraphicElement.
	 
	 <p>Le point d’alignement du graphique s’aligne sur le coin supérieur gauche de la zone définie par <codeph>elementHeight</codeph>, <codeph>elementWidth</codeph> et <codeph>elementFormat.baselineShift</codeph>. Le graphique n’est pas mis à l’échelle en fonction de la taille de la zone. Si GraphicElement possède un <codeph>eventMirror</codeph>, les propriétés <codeph>elementWidth</codeph> et <codeph>elementHeight</codeph>, et non le graphique, déterminent la taille et la position de la zone miroir obtenue. Si un objet Loader est utilisé, il est possible que le graphique ne soit pas chargé lors de la création de la ligne de texte et des zones miroir.</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:GraphicElement:elementHeight:get"><apiName>elementHeight</apiName><shortdesc>
	 Hauteur en pixels à réserver au graphique dans la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Hauteur en pixels à réserver au graphique dans la ligne. C’est l’appelant qui effectue la mise à l’échelle du graphique.
	 
	 <p>La valeur par défaut est 15.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:elementWidth:get"><apiName>elementWidth</apiName><shortdesc>
	 Largeur en pixels à réserver au graphique dans la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Largeur en pixels à réserver au graphique dans la ligne. C’est l’appelant qui effectue la mise à l’échelle du graphique.
	 
	 <p>La valeur par défaut est 15.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc>
	 Objet DisplayObject à utiliser en tant que graphique du GraphicElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:DisplayObject</apiValueClassifier></apiValueDef><apiDesc>
	 Objet DisplayObject à utiliser en tant que graphique du GraphicElement.
	 
	 <p>La valeur par défaut est <codeph>null</codeph>.</p>
	 
	 <p>Lorsque le GraphicElement devient une partie d’une ligne de texte, le graphique est ajouté en tant qu’enfant de la ligne. La définition du graphique supprime l’ancien graphique de la ligne et ajoute le nouveau.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontWeight"><apiName>FontWeight</apiName><shortdesc>
La classe FontWeight est une énumération de valeurs constantes utilisées avec FontDescription.fontWeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe FontWeight est une énumération de valeurs constantes utilisées avec <codeph>FontDescription.fontWeight</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontWeight"><linktext>flash.text.engine.FontDescription.fontWeight</linktext></link></related-links><apiValue id="flash.text.engine:FontWeight:BOLD"><apiName>BOLD</apiName><shortdesc> 
	Utilisé pour indiquer une épaisseur de police gras.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer une épaisseur de police gras.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontWeight:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Utilisé pour indiquer une épaisseur de police normale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer une épaisseur de police normale.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBaseline"><apiName>TextBaseline</apiName><shortdesc>
La classe TextBaseline est une énumération de valeurs constantes utilisées pour définir les propriétés dominantBaseline et alignmentBaseline de la classe ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe TextBaseline est une énumération de valeurs constantes utilisées pour définir les propriétés <codeph>dominantBaseline</codeph> et <codeph>alignmentBaseline</codeph> de la classe ElementFormat. <codeph/> Examinez le cas suivant :
<p><adobeimage alt="Alignement de la ligne de base du texte" href="../../../images/textBaselines.gif"/></p>
<p>La ligne se compose de quatre objets <codeph>TextElement</codeph>, contenant respectivement ’a’, ’b’, ’cccccccc’ et ’X’. L’élément contenant ’X’ détermine les lignes de base des lignes car il s’agit du plus grand élément de la ligne. La ligne de base des caractères romains de l’élément ’X’ est alignée sur la ligne de base des caractères romains de la ligne. Le haut idéographique de l’élément ’a’ est aligné sur le haut idéographique de la ligne. Le bas idéographique de l’élément ’b’ est aligné sur le bas idéographique de la ligne. Le centre idéographique de l’élément ’cccccccc’ est aligné sur le centre idéographique de la ligne.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links><apiValue id="flash.text.engine:TextBaseline:ASCENT"><apiName>ASCENT</apiName><shortdesc> 
	Spécifie une ligne de base ascendante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une ligne de base ascendante. Dans le cas d’un élément de texte, cette valeur est déterminée par la police et sa taille en points. Dans le cas d’un élément graphique, le moteur de saisie utilise le haut géométrique de l’élément.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:DESCENT"><apiName>DESCENT</apiName><shortdesc> 
	Spécifie une ligne de base descendante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>descent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une ligne de base descendante. Dans le cas d’un élément de texte, cette valeur est déterminée par la police et sa taille en points. Dans le cas d’un élément graphique, l’élément de texte utilise le bas géométrique de l’élément.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_BOTTOM"><apiName>IDEOGRAPHIC_BOTTOM</apiName><shortdesc> 
	Spécifie une ligne de base de bas idéographique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicBottom</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une ligne de base de bas idéographique. Dans le cas d’un élément de texte, cette valeur est déterminée par la police et sa taille en points. Dans le cas d’un élément graphique, le moteur de saisie utilise le bas géométrique de l’élément.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_CENTER"><apiName>IDEOGRAPHIC_CENTER</apiName><shortdesc> 
	Spécifie une ligne de base de centre idéographique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une ligne de base de centre idéographique. Dans le cas d’un élément de texte, cette valeur est déterminée par la police et sa taille en points. Dans le cas d’un élément graphique, le moteur de saisie utilise le centre géométrique de l’élément.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_TOP"><apiName>IDEOGRAPHIC_TOP</apiName><shortdesc> 
	Spécifie une ligne de base idéographique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une ligne de base idéographique. Dans le cas d’un élément de texte, cette valeur est déterminée par la police et sa taille en points. Dans le cas d’un élément graphique, le moteur de saisie utilise le haut géométrique de l’élément.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:ROMAN"><apiName>ROMAN</apiName><shortdesc> 
	Spécifie une ligne de base de caractères romains.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>roman</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie une ligne de base de caractères romains. Dans le cas d’un élément de texte, cette valeur est déterminée par la police et sa taille en points. Dans le cas d’un élément graphique, le moteur de saisie utilise le bas géométrique de l’élément.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:USE_DOMINANT_BASELINE"><apiName>USE_DOMINANT_BASELINE</apiName><shortdesc> 
	Spécifie qu’alignmentBaseline correspond à dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>useDominantBaseline</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Spécifie qu’alignmentBaseline correspond à dominantBaseline. Utilisez cette valeur uniquement pour définir <codeph>ElementFormat.alignmentBaseline</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:BreakOpportunity"><apiName>BreakOpportunity</apiName><shortdesc>
La classe BreakOpportunity énumère les valeurs constantes que vous pouvez utiliser pour définir la propriété breakOpportunity de la classe ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe BreakOpportunity énumère les valeurs constantes que vous pouvez utiliser pour définir la propriété <codeph>breakOpportunity</codeph> de la classe ElementFormat. Cette propriété détermine quels caractères peuvent être utilisés pour effectuer un saut de ligne lorsque le texte est scindé en plusieurs lignes. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/breakOpportunity"><linktext>ElementFormat.breakOpportunity</linktext></link></related-links><apiValue id="flash.text.engine:BreakOpportunity:ALL"><apiName>ALL</apiName><shortdesc> 
	Traite tous les caractères de l’objet ContentElement comme des opportunités de saut de ligne obligatoires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Traite tous les caractères de l’objet ContentElement comme des opportunités de saut de ligne obligatoires. Vous pouvez utiliser cette option pour générer des lignes les plus courtes possibles, que vous pouvez utiliser pour créer du texte sur une ligne ou des effets semblables.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:ANY"><apiName>ANY</apiName><shortdesc> 
	Traite tous les caractères de l’objet ContentElement comme des opportunités de saut de ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Traite tous les caractères de l’objet ContentElement comme des opportunités de saut de ligne. Cette valeur est généralement utilisée lorsque du texte Romain est intégré dans du texte asiatique et qu’il est préférable que les sauts de ligne interviennent au milieu des mots.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Base les possibilités de saut de ligne sur les propriétés des caractères Unicode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Base les possibilités de saut de ligne sur les propriétés des caractères Unicode. Ce paramètre implémente les propriétés de saut de ligne Unicode définies par la norme Unicode Annexe #14. 
	</apiDesc></apiValueDetail><related-links><link href="http://unicode.org/reports/tr14/tr14-12.html"><linktext>Article sur les propriétés des sauts de ligne Unicode.</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:BreakOpportunity:NONE"><apiName>NONE</apiName><shortdesc> 
	Ne traite aucun caractère de l’objet ContentElement comme une opportunité de saut de ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Ne traite aucun caractère de l’objet ContentElement comme une opportunité de saut de ligne.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitWidth"><apiName>DigitWidth</apiName><shortdesc>
La classe DigitWidth est une énumération de valeurs constantes utilisées pour définir la propriété digitWidth de la classe ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe DigitWidth est une énumération de valeurs constantes utilisées pour définir la propriété digitWidth de la classe <codeph>ElementFormat</codeph>. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitWidth"><linktext>flash.text.engine.ElementFormat.digitWidth</linktext></link></related-links><apiValue id="flash.text.engine:DigitWidth:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Permet de spécifier la largeur par défaut des chiffres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier la largeur par défaut des chiffres. Les résultats dépendent de la police ; les caractères utilisent les paramètres spécifiés par le concepteur de polices sans qu’aucune fonction ne soit appliquée. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:PROPORTIONAL"><apiName>PROPORTIONAL</apiName><shortdesc> 
	Permet de spécifier la largeur proportionnelle des chiffres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proportional</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier la largeur proportionnelle des chiffres.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:TABULAR"><apiName>TABULAR</apiName><shortdesc> 
	Permet de spécifier la largeur tabulaire des chiffres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Permet de spécifier la largeur tabulaire des chiffres.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:Kerning"><apiName>Kerning</apiName><shortdesc>
La classe Kerning est une énumération de valeurs constantes utilisées avec ElementFormat.kerning.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe Kerning est une énumération de valeurs constantes utilisées avec <codeph>ElementFormat.kerning</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/kerning"><linktext>flash.text.engine.ElementFormat.kerning</linktext></link></related-links><apiValue id="flash.text.engine:Kerning:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Utilisé pour indiquer que le crénage n’est activé que pour les caractères appropriés à une typographie asiatique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer que le crénage n’est activé que pour les caractères appropriés à une typographie asiatique. Le crénage est appliqué entre deux caractères lorsque aucun d’eux n’est un caractère Kanji, Hiragana ou Katakana.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:OFF"><apiName>OFF</apiName><shortdesc> 
	Utilisé pour indiquer que le crénage est désactivé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer que le crénage est désactivé.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:ON"><apiName>ON</apiName><shortdesc> 
	Utilisé pour indiquer que le crénage est activé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Utilisé pour indiquer que le crénage est activé.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:CFFHinting"><apiName>CFFHinting</apiName><shortdesc>
La classe CFFHinting définit des valeurs pour les repères CFF dans la classe FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe CFFHinting définit des valeurs pour les repères CFF dans la classe FontDescription.

<p>Les repères ajustent l’affichage d’une police de contour de sorte qu’elle s’aligne sur la grille de pixels. Sur des écrans de petite taille, les repères produisent un texte clair et lisible pour les lecteurs humains.
</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:CFFHinting:HORIZONTAL_STEM"><apiName>HORIZONTAL_STEM</apiName><shortdesc>
	Adapte les épaisseurs horizontales fortes à la grille de pixels pour améliorer la lisibilité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontalStem</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Adapte les épaisseurs horizontales fortes à la grille de pixels pour améliorer la lisibilité. Cette constante permet de définir la propriété <codeph>cffHinting</codeph> de la classe FontDescription. Utilisez la syntaxe <codeph>CFFHinting.HORIZONTAL_STEM</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:CFFHinting:NONE"><apiName>NONE</apiName><shortdesc> 
	Aucun repère n’est appliqué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Aucun repère n’est appliqué. Les épaisseurs horizontales des glyphes ne sont pas alignées sur la grille de pixels. Cette constante permet de définir la propriété <codeph>cffHinting</codeph> de la classe FontDescription. Ce paramètre est conseillé pour les animations ou les grandes polices. Utilisez la syntaxe <codeph>CFFHinting.NONE</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineMirrorRegion"><apiName>TextLineMirrorRegion</apiName><shortdesc>
 La classe TextLineMirrorRegion représente une portion de ligne de texte dans laquelle des événements sont mis en miroir vers un autre diffuseur d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe TextLineMirrorRegion représente une portion de ligne de texte dans laquelle des événements sont mis en miroir vers un autre diffuseur d’événements.
 
 <p>Après un déclenchement normal d’événements pour une ligne de texte, si la ligne est valide et si la propagation d’événements n’a pas été interrompue, les événements sont redistribués aux zones miroir de la ligne.</p>
 
 <p>La mise en miroir des événements de souris est un cas à part. Etant donné que les zones miroir ne sont pas des objets d’affichage, les événements <codeph>mouseOver</codeph> et <codeph>mouseOut</codeph> sont simulés à leur place. Les événements <codeph>rollOver</codeph> et <codeph>rollOut</codeph> ne sont pas simulés. Tous les événements <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph> et <codeph>rollOut</codeph> qui se produisent naturellement (ciblés à la ligne de texte ou aux enfants de la ligne de texte) sont ignorés et ne sont donc pas mis en miroir.</p>
 
 <p>Il est impossible de créer un objet TextLineMirrorRegion directement à partir du code ActionScript. Si vous appelez <codeph>new TextLineMirrorRegion()</codeph>, une exception est renvoyée. Vous créez un objet TextLineMirrorRegion lorsque vous affecter un miroir d’événement à un objet ContentElement.</p>
 
 <p>La classe TextLineMirrorRegion ne gère pas les sous-classes.</p>
 
 </apiDesc><example conref="examples\TextLineMirrorRegionExample.as"> Cet exemple affiche un bloc de texte avec zones miroir qui deviennent rouges lorsque vous cliquez sur leur entrée.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ContentElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLineMirrorRegion;
    import flash.events.MouseEvent;
    import flash.events.EventDispatcher;
    import flash.ui.Mouse;

    public class TextLineMirrorRegionExample extends Sprite {
        
        var myEvent:EventDispatcher = new EventDispatcher();
        var fontDescription:FontDescription = new FontDescription();
        var textBlock:TextBlock = new TextBlock();

        public function TextLineMirrorRegionExample():void {
            
            fontDescription.fontWeight = "bold";
            var blackFormat:ElementFormat = new ElementFormat();
            blackFormat.fontSize = 18;
            blackFormat.color = 0x000000;
            blackFormat.fontDescription = fontDescription;
            
            var textElement1 = new TextElement("Click on different parts of me to find the ", blackFormat);
            var textElement2 = new TextElement("mirror regions",blackFormat);
            var textElement3 = new TextElement(". If I am a mirror region, I'll ",blackFormat);
            var textElement4 = new TextElement("turn red",blackFormat);
            var textElement5 = new TextElement(".",blackFormat);
            
            myEvent.addEventListener("click", clickHandler);
            myEvent.addEventListener("mouseOut", mouseOutHandler);
            myEvent.addEventListener("mouseOver", mouseOverHandler);
            
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>;
            groupVector.push(textElement1, textElement2, textElement3, textElement4, textElement5);
            var groupElement:GroupElement = new GroupElement(groupVector);
            
            textElement2.eventMirror=myEvent;
            textElement4.eventMirror=myEvent;
            
            textBlock.content = groupElement;
            createLines(textBlock);
        }
    
        private function clickHandler(event:MouseEvent):void
        {
            var redFormat:ElementFormat = new ElementFormat();
            redFormat.color = 0xCC0000;
            redFormat.fontSize = 18;
            redFormat.fontDescription = fontDescription;
            var line:TextLine = event.target as TextLine;
            var region:TextLineMirrorRegion = line.getMirrorRegion(myEvent);
            region.element.elementFormat = redFormat;
            createLines(textBlock);
        }
        
        private function mouseOverHandler(event:MouseEvent):void
        {
            Mouse.cursor = "button";
        }
        
        private function mouseOutHandler(event:MouseEvent):void
        {
            Mouse.cursor = "arrow";
        }
            
        private function createLines(textBlock:TextBlock):void 
        {
            var purgeLine:TextLine = textBlock.firstLine;
                
            while (purgeLine)
            {
                removeChild (purgeLine);
                purgeLine = purgeLine.nextLine;
            }
            var lineWidth:Number = 150;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
                
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/mirrorRegions"><linktext>TextLine.mirrorRegions</linktext></link></related-links><apiValue id="flash.text.engine:TextLineMirrorRegion:bounds:get"><apiName>bounds</apiName><shortdesc>
	 Limites de la zone miroir, par rapport à la ligne de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 Limites de la zone miroir, par rapport à la ligne de texte.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:element:get"><apiName>element</apiName><shortdesc>
	 Objet ContentElement à partir duquel la zone miroir est dérivée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>Le TextLine auquel cet élément appartient n’est pas valide.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Objet <codeph>ContentElement</codeph> à partir duquel la zone miroir est dérivée.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:mirror:get"><apiName>mirror</apiName><shortdesc>
	 Objet EventDispatcher vers lequel les événements affectant la zone miroir sont mis en miroir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 Objet <codeph>EventDispatcher</codeph> vers lequel les événements affectant la zone miroir sont mis en miroir. Cela comprend les événements de souris qui surviennent spécifiquement dans la zone miroir, et tous les autres événements ayant pour cible la ligne de texte.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:nextRegion:get"><apiName>nextRegion</apiName><shortdesc>
	 TextLineMirrorRegion suivant dans l’ensemble dérivé de l’élément de texte, ou null si la zone actuelle est la dernière zone miroir de l’ensemble.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 TextLineMirrorRegion suivant dans l’ensemble dérivé de l’élément de texte, ou <codeph>null</codeph> si la zone actuelle est la dernière zone miroir de l’ensemble. Peut être sur la même ligne ou sur une autre ligne de texte.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:previousRegion:get"><apiName>previousRegion</apiName><shortdesc>
	 TextLineMirrorRegion précédent dans l’ensemble dérivé de l’élément de texte, ou null si la zone actuelle est la première zone miroir de l’ensemble.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 TextLineMirrorRegion précédent dans l’ensemble dérivé de l’élément de texte, ou <codeph>null</codeph> si la zone actuelle est la première zone miroir de l’ensemble. Peut être sur la même ligne ou sur une autre ligne de texte.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:textLine:get"><apiName>textLine</apiName><shortdesc>
	 TextLine contenant cette zone miroir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextLine contenant cette zone miroir.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LineJustification"><apiName>LineJustification</apiName><shortdesc>
La classe LineJustification énumère les valeurs constantes utilisées lors de la définition de la propriété lineJustfication des sous-classes TextJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
La classe LineJustification énumère les valeurs constantes utilisées lors de la définition de la propriété <codeph>lineJustfication</codeph> des sous-classes TextJustifier. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/lineJustification"><linktext>EastAsianJustifier.lineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier/lineJustification"><linktext>SpaceJustifier.lineJustification</linktext></link></related-links><apiValue id="flash.text.engine:LineJustification:ALL_BUT_LAST"><apiName>ALL_BUT_LAST</apiName><shortdesc> 
	Indique au moteur de saisie de justifier toutes les lignes sauf la dernière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allButLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique au moteur de saisie de justifier toutes les lignes sauf la dernière.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:ALL_INCLUDING_LAST"><apiName>ALL_INCLUDING_LAST</apiName><shortdesc> 
	Indique au moteur de saisie de justifier toutes les lignes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allIncludingLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique au moteur de saisie de justifier toutes les lignes.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:UNJUSTIFIED"><apiName>UNJUSTIFIED</apiName><shortdesc> 
	Indique au moteur de saisie de générer des lignes non justifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unjustified</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indique au moteur de saisie de générer des lignes non justifiées.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
 La classe SpaceJustifier représente les propriétés qui contrôlent les options de justification des lignes de texte d’un bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe SpaceJustifier représente les propriétés qui contrôlent les options de justification des lignes de texte d’un bloc de texte. 
 
 <p> Utilisez le constructeur <codeph>new SpaceJustifier()</codeph> pour créer un objet SpaceJustifier avant de définir ses propriétés. La définition des propriétés d’un objet SpaceJustifier après son application à un TextBlock n’invalide pas le TextBlock.</p>
 
 </apiDesc><example conref="examples\SpaceJustifierExample.as"> L’exemple suivant utilise l’espacement des lettres et justifie tout le bloc de texte à l’exception de la dernière ligne.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.SpaceJustifier;
    import flash.text.engine.LineJustification;
    
    public class SpaceJustifierExample extends Sprite {
        
        public function SpaceJustifierExample():void {
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format);
            var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_BUT_LAST);
            spaceJustifier.letterSpacing = true;
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.textJustifier = spaceJustifier;
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:SpaceJustifier:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
     Crée un objet SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>La variable <codeph>locale</codeph> spécifiée est <codeph>null</codeph> ou trop courte pour représenter une variable locale valide.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Le paramètre <codeph>lineJustification</codeph> spécifié n’appartient pas à <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>Variable locale permettant de déterminer les règles de justification. La valeur par défaut est <codeph>"en"</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unjustified</apiData><apiDesc>Type de justification des lignes du paragraphe. Utilisez les constantes <codeph>LineJustification</codeph> pour cette propriété. La valeur par défaut est <codeph>LineJustification.UNJUSTIFIED</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>letterSpacing</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indique si l’espacement des lettres doit être utilisé lors de la justification. La valeur par défaut est <codeph>false</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Crée un objet SpaceJustifier. La classe LineJustification contient les constantes qui spécifient les types de justification de ligne que vous pouvez appliquer.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:SpaceJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Crée une copie clonée de l’objet SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>This class is currently stored as a live reference, but there is no way to track when its 
	 properties change.  This means that when changes are made, text blocks are not invalidated, which in 
	 the current implementation can lead to player crashes.  Even from the API perspective its wrong, as 
	 the affected text lines should be marked INVALID when format changes are made, but they�re not. The 
	 solution is to use a copy-on-set model.  When the object is passed in, the player copies it, so later
	 changes to the object that was passed in have no effect. The setter makes an internal copy of the 
	 array; the getter returns a copy of the internal copy. Operations like 
	 myBlock.textJustifier.spaceJustifier.letterSpacing = true will have no effect. Users who subclass 
	 this class in the future will need to use the clone() method to implement this technique of 
	 'locking' the format once it has been set.  
	 
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Une copie de l’objet <codeph>SpaceJustifier</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Crée une copie clonée de l’objet SpaceJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:SpaceJustifier:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     Indique si l’espacement des lettres doit être utilisé lors de la justification. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Indique si l’espacement des lettres doit être utilisé lors de la justification. 
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>