<?xml version="1.0"?>
<apiPackage id="__Global__"><apiName>__Global__</apiName><apiDetail/><apiClassifier id="globalClassifier:VerifyError"><apiName>VerifyError</apiName><shortdesc>
 VerifyError クラスは、不正な形式または破損した SWF ファイルが検出された場合に発生するエラーを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>VerifyError は、不正な形式または破損した SWF ファイルが検出された場合にスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 VerifyError クラスは、不正な形式または破損した SWF ファイルが検出された場合に発生するエラーを表します。 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Loader"><linktext>Loader クラス</linktext></link></related-links><apiConstructor id="VerifyError:VerifyError"><apiName>VerifyError</apiName><shortdesc>
	 新しい VerifyError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>VerifyError オブジェクトに関連付けられたメッセージです。      
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい VerifyError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:ArgumentError"><apiName>ArgumentError</apiName><shortdesc>
 ArgumentError クラスは、関数で指定された引数がその関数の定義に適合していないために発生するエラーを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>関数呼び出しで指定されたパラメーター値がその関数の定義に適合していない場合、ArgumentError がスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 ArgumentError クラスは、関数で指定された引数がその関数の定義に適合していないために発生するエラーを表します。このエラーは、例えば、不適切な数の引数、不適切な型の引数、または無効な引数を指定して関数が呼び出されたときなどに発生します。
 
 </apiDesc><example conref="examples\ArgumentErrorExample.as"> 次の例は、<codeph>ArgumentError</codeph> エラーが <codeph>try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。<codeph>println()</codeph> 関数は、1 つの引数（1 つのストリング）を受け取りますが、2 つのストリングが指定されているため、エラーがスローされます。通常、このようなエラーはコンパイラーでキャッチされる場合がありますが、<codeph>this[]</codeph> シンタックス（<codeph>try</codeph> ステートメント内）で、関数に対するコンパイラーのシンタックスチェックは迂回されています。
<codeblock>
package {
    import flash.display.Sprite;
    
    public class ArgumentErrorExample extends Sprite {
        public function ArgumentErrorExample() {
                println("Hello World");
                
                try {
                    this["println"]("Hello", "World");
                }
                catch(e:ArgumentError) {
                    trace(e);
                }
        }
        
        public function println(str:String):void {
            trace(str);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="ArgumentError:ArgumentError"><apiName>ArgumentError</apiName><shortdesc>
	 新しい ArgumentError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーに関連付けられたストリングです。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい ArgumentError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:QName"><apiName>QName</apiName><shortdesc>

QName オブジェクトは、XML エレメントの完全修飾名と属性を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>QName
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>

QName オブジェクトは、XML エレメントの完全修飾名と属性を表します。各 QName オブジェクトには、ローカル名と名前空間 URI が付けられます。名前空間 URI の値が <codeph>null</codeph> の場合、QName オブジェクトはすべての名前空間に一致します。QName コンストラクターは、別の QName オブジェクトのコピーである新しい QName オブジェクトを作成したり、Namespace オブジェクトの <codeph>uri</codeph> と QName オブジェクトの <codeph>localName</codeph> を持つ新しい QName オブジェクトを作成する場合に使用します。 
 

<p>E4X 固有のメソッドでは、QName オブジェクトとストリングを同じように使用することができます。E4X メソッドは、QName、Namespace、XML、および XMLList の各クラスにあります。これらの E4X メソッドは、ストリングを受け取ると共に、QName オブジェクトを受け取ることもできます。この互換性によって、名前空間のサポートと <codeph>XML.child()</codeph> などのメソッドの連携が行われます。 </p>

<p>XML、XMLList、Namespace などのクラスと同様、QName クラスには ECMAScript for XML（E4X）仕様（ECMA-357 Edition 2）で定義されている強力な XML 処理規格が実装されています。</p>

<p>完全修飾識別子は QName オブジェクトとして評価されます。名前空間を特定しないで XML エレメントの QName オブジェクトを指定した場合、関連付けられている QName オブジェクトの <codeph>uri</codeph> プロパティは、グローバルなデフォルトの名前空間に設定されます。名前空間を特定しないで XML 属性の QName オブジェクトを指定した場合、<codeph>uri</codeph> プロパティは空のストリングに設定されます。</p>

</apiDesc><example conref="examples\QNameExample.as"> 次の例は、QName インスタンスを作成し、それを使用して XML エレメントを選択する方法を示しています。QName を作成する 2 つの方法を示します。
 <ol>
    <li>Namespace インスタンスを作成し、それを QName コンストラクターへの入力として使用する。この方法は、<codeph>Namespace.prefix</codeph> プロパティを後で別の目的のために使用する場合に最適です。</li>
  <li>QName コンストラクター内の <codeph>uri</codeph> パラメーターに対して単純なストリング値を使用して QName インスタンスを作成する。</li>
 </ol>
 <p>
 このコードは次の処理を行います。
 </p>
 <ol>
  <li><codeph>rssXML</codeph> という名前の XML 変数を定義します。</li>
    <li>接頭辞 <codeph>dc</codeph> を使用して新しい Namespace オブジェクトを作成します。</li>
  <li>その Namespace オブジェクトとローカル名 <codeph>creator</codeph> を使用して、新しい QName オブジェクトを作成します。</li>
  <li><codeph>showDescendants()</codeph> メソッドを呼び出します。このメソッドは <codeph>XML.descendants()</codeph> メソッドを使用して、指定された QName インスタンスに一致する修飾名を持つすべての子孫エレメントを含む XMLList インスタンスを取得します。</li>
    <li><codeph>for each</codeph> ループを使用して、リスト内の各エレメントの修飾語とテキスト値を表示します。</li>
  <li><codeph>uri</codeph> パラメーターとローカル名 <codeph>date</codeph> のストリング値を使用して、別の QName オブジェクトを作成します。</li>
  <li><codeph>showDescendants()</codeph> メソッドを再び呼び出して、子孫エレメントの名前とテキスト値を表示します。</li>
 </ol>
<codeblock>
package
{
    import flash.display.Sprite;
    
    public class QNameExample extends Sprite
    {
        public function QNameExample()
        {
            var rssXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/">
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19">
                &lt;title>Test RSS&lt;/title>
                &lt;link>http://www.adobe.com/&lt;/link>
                &lt;description>This is a test RSS document.&lt;/description>
                &lt;language>en-us&lt;/language>
                &lt;items>
                  &lt;rdf:Seq>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/>
                  &lt;/rdf:Seq>
                &lt;/items>
              &lt;/channel>
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/">
                &lt;title>Flash Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flash/&lt;/link>
                &lt;description>Welcome to the Flash Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-08-08&lt;/dc:date>    
              &lt;/item>
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/">
                &lt;title>Flex Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flex/&lt;/link>
                &lt;description>Welcome to the Flex Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-10-16&lt;/dc:date>    
              &lt;/item>
            &lt;/rdf:RDF>;
            
            var dcNamespace:Namespace = new Namespace("dc", "http://purl.org/dc/elements/1.1/");
            var creatorQName:QName = new QName(dcNamespace, "creator");
            trace(creatorQName.uri); // http://purl.org/dc/elements/1.1/
            trace(creatorQName.localName); // creator
            
            showDescendants(rssXML, creatorQName);
            
            var dateQName:QName = new QName("http://purl.org/dc/elements/1.1/", "date");
            trace(dateQName.uri); // http://purl.org/dc/elements/1.1/
            trace(dateQName.localName); // date
            
            showDescendants(rssXML, dateQName);
        }
        
        public function showDescendants(xmlData:XML, qualifiedName:QName):void
        {
            var decendantList:XMLList = xmlData.descendants(qualifiedName);
            
            for each (var element:XML in decendantList)
            {
                trace(element.name()); // the fully qualified name, 
                                       // like "http://purl.org/dc/elements/1.1/::creator"
                trace(element); // the simple text value of each element, like "Adobe"
            }                
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#XML"><linktext>XML</linktext></link><link href="#XMLList"><linktext>XMLList</linktext></link><link href="#Namespace"><linktext>Namespace</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm"><linktext>ECMAScript for XML（E4X）specification（ECMA-357 edition 2）</linktext></link></related-links><apiConstructor id="QName:QName_0"><apiName>QName</apiName><shortdesc> 
    Namespace オブジェクトの URI オブジェクトと QName オブジェクトの localName を持つ QName オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>QName
    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>Namespace</apiOperationClassifier><apiDesc><codeph>uri</codeph> 値のコピー元の Namespace オブジェクトです。他のタイプのパラメーターはストリングに変換されます。
    </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>QName</apiOperationClassifier><apiDesc><codeph>localName</codeph> 値のコピー元の QName オブジェクトです。他のタイプのパラメーターはストリングに変換されます。
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc> 
    Namespace オブジェクトの URI オブジェクトと QName オブジェクトの <codeph>localName</codeph> を持つ QName オブジェクトを作成します。いずれかのパラメーターが目的のデータ型でない場合、パラメーターはストリングに変換され、新しい QName オブジェクトの該当のプロパティに割り当てられます。例えば、両方のパラメーターがストリングの場合、<codeph>uri</codeph> プロパティが最初のパラメーターに設定され、<codeph>localName</codeph> プロパティが 2 番目のパラメーターに設定された新しい QName オブジェクトが返されます。つまり、他の多くの順列と同様、次の順列がコントラクタで有効な形式となります。
<pre>
QName (uri:Namespace, localName:String);
QName (uri:String, localName: QName);
QName (uri:String, localName: String);
</pre>
    <p><codeph>null</codeph> を <codeph>uri</codeph> パラメーターに渡すと、新しい QName オブジェクトの <codeph>uri</codeph> プロパティは <codeph>null</codeph> に設定されます。
    </p>
    <p><b>注意：</b>このクラスは、2 つのコンストラクター項目を示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡されるパラメーターの型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="QName:QName_1"><apiName>QName</apiName><shortdesc> 
    別の QName オブジェクトのコピーである QName オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(pdehaan) i changed first param from "name" to "uri" as the previous naming was very confusing
    </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>qname</apiItemName><apiOperationClassifier>QName</apiOperationClassifier><apiDesc>コピーする QName オブジェクトです。他のタイプのオブジェクトはストリングに変換され、新しい QName オブジェクトの <codeph>localName</codeph> プロパティに割り当てられます。
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc> 
    別の QName オブジェクトのコピーである QName オブジェクトを作成します。コンストラクターに渡されたパラメーターが QName オブジェクトである場合、QName オブジェクトのコピーが作成されます。パラメーターが QName オブジェクトでない場合、パラメーターはストリングに変換され、新しい QName インスタンスの <codeph>localName</codeph> プロパティに割り当てられます。パラメーターが <codeph>undefined</codeph> であるか未指定の場合、<codeph>localName</codeph> プロパティが空のストリングに設定された新しい QName オブジェクトが作成されます。
    <p><b>注意：</b>このクラスは、2 つのコンストラクター項目を示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡されるパラメーターの型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="QName:AS3:toString"><apiName>toString</apiName><shortdesc>
	URI と QName オブジェクトのローカル名を "::" で区切ったストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>QName, QName.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングとしての完全修飾名です。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	URI と QName オブジェクトのローカル名を "::" で区切ったストリングを返します。
	
	<p>形式は QName オブジェクトの <codeph>uri</codeph> プロパティによって決まります。</p>
	<pre>If <codeph>uri</codeph> == "" 
		<codeph>toString</codeph> returns <codeph>localName</codeph>
	else if <codeph>uri</codeph> == null
		<codeph>toString</codeph> returns ~~::<codeph>localName</codeph> 
	else
		<codeph>toString</codeph> returns <codeph>uri</codeph>::<codeph>localName</codeph></pre>
	
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="QName:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
    QName オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>QName, QName.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>QName インスタンスのプリミティブ値です。
    
    </apiDesc><apiOperationClassifier>QName</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    QName オブジェクトを返します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="QName:localName:get"><apiName>localName</apiName><shortdesc>
	QName オブジェクトのローカル名です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>QName, QName.localName, localName
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	QName オブジェクトのローカル名です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="QName:uri:get"><apiName>uri</apiName><shortdesc>
	QName オブジェクトの URI です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>QName, QName.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	QName オブジェクトの URI です。
 	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:EvalError"><apiName>EvalError</apiName><shortdesc>
 EvalError クラスは、ユーザーコードが Function オブジェクトで eval() 関数を呼び出したとき、または new 演算子を使用しようとしたときに発生するエラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>EvalError は、コードが Function オブジェクトで eval() を呼び出そうとしたとき、または new を使用しようとしたときにスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 EvalError クラスは、ユーザーコードが Function オブジェクトで <codeph>eval()</codeph> 関数を呼び出したとき、または <codeph>new</codeph> 演算子を使用しようとしたときに発生するエラーです。Function オブジェクトでの <codeph>eval()</codeph> および <codeph>new</codeph> の呼び出しはサポートされていません。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="EvalError:EvalError"><apiName>EvalError</apiName><shortdesc>
	 新しい EvalError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーに関連付けられたストリングです。     
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい EvalError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:Math"><apiName>Math</apiName><shortdesc>
 Math クラスには、一般的な数学関数および値を表すメソッドおよび定数があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math, math object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>Math クラスは、一般的な数学定数および数学関数を定義する静的プロパティおよびメソッドから構成されるトップレベルのクラスです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Math クラスには、一般的な数学関数および値を表すメソッドおよび定数があります。 
 <p>数学定数および関数にアクセスして処理するには、このクラスのメソッドとプロパティを使用します。Math クラスのプロパティとメソッドはすべて静的であり、<codeph>Math.method(</codeph> <codeph> <i>parameter</i> </codeph> <codeph>)</codeph> または <codeph>Math.constant</codeph> というシンタックスを使用して呼び出す必要があります。ActionScript では、定数は倍精度の IEEE-754 浮動小数の最大精度で定義されます。</p>
 <p>Math クラスのいくつかのメソッドでは、ラジアン単位の角度がパラメーターとして使用されています。メソッドを呼び出す前に次の式を使用してラジアン値を計算し、計算した値をパラメーターとして指定できます。また、式の右辺全体（<codeph>degrees</codeph> には度数で角度を代入）をラジアンパラメーターとして指定することもできます。</p>
 <p>ラジアン値を計算するには、次の式を使用します。</p>
 <pre>
 radians = degrees ~~ Math.PI/180
 </pre>
 <p>ラジアンで角度を計算するには、次の式を使用します。</p>
 <pre>
 degrees = radians ~~ 180/Math.PI
 </pre>
 <p>次の例では、角度 45 度のサインを計算する式をパラメーターとして渡します。</p>
 <p><codeph>Math.sin(45 ~~ Math.PI/180)</codeph> は <codeph>Math.sin(.7854)</codeph> と同じです。</p>
 <p><b>メモ : </b>Math 関数 acos、asin、atan、atan2、cos、exp、log、pow、sin、および sqrt の結果は、CPU やオペレーティングシステムで使用されているアルゴリズムによって少し異なる値になる場合があります。Flash Player では、上述の関数を計算するときに CPU（CPU が浮動小数の計算をサポートしていない場合はオペレーティングシステム）が呼び出され、使用する CPU やオペレーティングシステムによって多少異なる結果が表示されます。
 </p>
 
 
 </apiDesc></apiClassifierDetail><apiOperation id="Math:abs"><apiName>abs</apiName><shortdesc>
  パラメーター val で指定された数値の絶対値を計算して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.abs, abs, absolute
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>指定したパラメーターの絶対値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>絶対値を返す数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定した Number の絶対値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> で指定された数値の絶対値を計算して返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:acos"><apiName>acos</apiName><shortdesc>
  パラメーター val で指定された数値のアークコサイン（逆余弦）を計算してラジアン単位で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.acos, acos, arc cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val</codeph> のアークコサインです。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>-1.0 ～ 1.0 の数値です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された Number のアークコサイン（逆余弦）をラジアン単位で返します。 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> で指定された数値のアークコサイン（逆余弦）を計算してラジアン単位で返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:asin"><apiName>asin</apiName><shortdesc>
  パラメーター val で指定された数値のアークサイン（逆正弦）を計算してラジアン単位で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.asin, asin, arc sine
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>2 で割った負のπと 2 で割った正のπの間の数値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>-1.0 ～ 1.0 の数値です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された Number パラメーターのアークサイン（逆正弦）の値をラジアン単位で返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> で指定された数値のアークサイン（逆正弦）を計算してラジアン単位で返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:atan"><apiName>atan</apiName><shortdesc>
  パラメーター val で指定された値がタンジェント（正接）の値になる角度を計算してラジアン単位で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.atan, atan, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>2 で割った負のπと 2 で割った正のπの間の数値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>角度のタンジェントを表す数値です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーター val で指定された値がタンジェント（正接）の値になる角度をラジアン単位で返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> で指定された値がタンジェント（正接）の値になる角度を計算してラジアン単位で返します。戻り値は、2 で割った負のπと 2 で割った正のπの間（-π/2 ～ π/2）の値になります。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:atan2"><apiName>atan2</apiName><shortdesc>
  y/x 座標の角度をラジアン単位で計算して返します。このとき、円の x 軸（0,0 は円の中心を示します）から反時計回りに測定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.atan2, atan2, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>数値。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ポイントの <i>y</i> 座標です。
  </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ポイントの <i>x</i> 座標です。  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>円の x 軸から反時計回りに測定した場合に、y/x 座標の角度をラジアン単位で返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  <codeph>y</codeph>/<codeph>x</codeph> 座標の角度をラジアン単位で計算して返します。このとき、円の <i>x</i> 軸（0,0 は円の中心を示します）から反時計回りに測定します。戻り値は、正のパイと負のパイの間の値になります。atan2 への第 1 パラメーターは常に <i>y</i> 座標です。
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/acos()"><linktext>Math.acos()</linktext></link><link href="#Math/asin()"><linktext>Math.asin()</linktext></link><link href="#Math/atan()"><linktext>Math.atan()</linktext></link><link href="#Math/cos()"><linktext>Math.cos()</linktext></link><link href="#Math/sin()"><linktext>Math.sin()</linktext></link><link href="#Math/tan()"><linktext>Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:ceil"><apiName>ceil</apiName><shortdesc>
  指定された数値または式を切り上げた値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.ceil, ceil, ceiling
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val</codeph> の値以上の最も近い整数です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された数値または式を切り上げた値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  指定された数値または式を切り上げた値を返します。数値の切り上げとは、その数値以上の最も近い整数にすることです。
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/floor()"><linktext>Math.floor()</linktext></link><link href="#Math/round()"><linktext>Math.round()</linktext></link></related-links></apiOperation><apiOperation id="Math:cos"><apiName>cos</apiName><shortdesc>
  ラジアン単位で指定された角度のコサイン（余弦）を計算して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.cos, cos, cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>-1.0 ～ 1.0 の数値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>angleRadians</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>角度をラジアンで表した数値です。 
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された角度のコサインを返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  ラジアン単位で指定された角度のコサイン（余弦）を計算して返します。ラジアンを計算するには、Math クラスの概要を参照してください。
  
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/acos()"><linktext>Math.acos()</linktext></link><link href="#Math/asin()"><linktext>Math.asin()</linktext></link><link href="#Math/atan()"><linktext>Math.atan()</linktext></link><link href="#Math/atan2()"><linktext>Math.atan2()</linktext></link><link href="#Math/sin()"><linktext>Math.sin()</linktext></link><link href="#Math/tan()"><linktext>Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:exp"><apiName>exp</apiName><shortdesc>
  自然対数の底（e）をパラメーター x で指定された指数で累乗した値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.exp, exp, exponent
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc><i>e</i> のパラメーター <codeph>val</codeph> による累乗です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>指数; 数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>自然対数の底（e）をパラメーター val で指定された指数で累乗した値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  自然対数の底（<i>e</i>）を、パラメーター <codeph>x</codeph> で指定された指数で累乗した値を返します。定数 <codeph>Math.E</codeph> を使用して、<i>e</i> の値を指定できます。
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/E"><linktext>Math.E</linktext></link></related-links></apiOperation><apiOperation id="Math:floor"><apiName>floor</apiName><shortdesc>
  パラメーター val で指定された数値または式を切り捨てた値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.floor, floor
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val</codeph> の値以下の最も近い整数です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーター val で指定された数値または式を切り捨てた値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> で指定された数値または式を切り捨てた値を返します。切り捨てとは、指定された数値または式以下の最も近い整数にすることです。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:log"><apiName>log</apiName><shortdesc>
  パラメーター val の自然対数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.log, log, logarithm
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val</codeph> の自然対数です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>値が 0 よりも大きい数値または式です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーター val の自然対数を返します。 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> の自然対数を返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:max"><apiName>max</apiName><shortdesc>
  val1 と val2（または 3 つ以上の値）を評価し、最大値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.max, max, maximum
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val1</codeph> と <codeph>val2</codeph>（または 3 つ以上の値）の最大値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val1</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>数値または式です。
  </apiDesc></apiParam><apiParam><apiItemName>val2</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>数値または式です。
  </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>数値または式です。<codeph>Math.max()</codeph> は複数の引数を取ることができます。
  </apiDesc></apiParam><apiTipTexts><apiTipText>val1 と val2 を評価し、大きい方の値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  <codeph>val1</codeph> と <codeph>val2</codeph>（または 3 つ以上の値）を評価し、最大値を返します。
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/min()"><linktext>Math.min()</linktext></link></related-links></apiOperation><apiOperation id="Math:min"><apiName>min</apiName><shortdesc>
  val1 と val2（または 3 つ以上の値）を評価し、最小値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.min, min, minimum
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val1</codeph> と <codeph>val2</codeph>（または 3 つ以上の値）の最小値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val1</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>数値または式です。
  </apiDesc></apiParam><apiParam><apiItemName>val2</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>数値または式です。
  </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>数値または式です。<codeph>Math.min()</codeph> は複数の引数を取ることができます。
  </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーター val1 と val2 を評価し、小さい方の値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  <codeph>val1</codeph> と <codeph>val2</codeph>（または 3 つ以上の値）を評価し、最小値を返します。
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/max()"><linktext>Math.max()</linktext></link></related-links></apiOperation><apiOperation id="Math:pow"><apiName>pow</apiName><shortdesc>
  base の power 乗を計算して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.pow, pow, power
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc><codeph>base</codeph> の値を <codeph>pow</codeph> で累乗した値です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>base</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>パラメーター <codeph>pow</codeph> の指数で累乗される数値です。
  </apiDesc></apiParam><apiParam><apiItemName>pow</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>パラメーター <codeph>base</codeph> を累乗する指数です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>val1 の val2 乗を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  <codeph>base</codeph> の <codeph>power</codeph> 乗を計算して返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:random"><apiName>random</apiName><shortdesc>
  擬似乱数 n を返します（0 &amp;lt;= n &amp;lt; 1）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.random, random
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>疑似乱数です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>疑似乱数 n を返します（0 &lt;= n &lt; 1）。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  疑似乱数 n を返します（0 &lt;= n &lt; 1）。計算には必ず非ランダムのエレメントが含まれるので、返される値は非公開の方式および疑似乱数で計算されます。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:round"><apiName>round</apiName><shortdesc>
  パラメーター val の値を最も近い整数に四捨五入し、値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.round, round
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>最も近い整数に四捨五入されたパラメーター <codeph>val</codeph> です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>四捨五入する数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーター val を最も近い整数に四捨五入した値を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  パラメーター <codeph>val</codeph> の値を最も近い整数に四捨五入し、値を返します。<codeph>val</codeph> が 2 つの最も近い整数から等距離である場合（.5 で終わる数値など）、値は次に大きな整数に切り上げられます。
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/ceil()"><linktext>Math.ceil()</linktext></link><link href="#Math/floor()"><linktext>Math.floor()</linktext></link></related-links></apiOperation><apiOperation id="Math:sin"><apiName>sin</apiName><shortdesc>
  ラジアン単位で指定された角度のサイン（正弦）を計算して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.sin, sin, sine
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>数値。指定した角度のサイン（-1.0 ～ 1.0）です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>angleRadians</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>角度をラジアンで表した数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された角度のサインを返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  ラジアン単位で指定された角度のサイン（正弦）を計算して返します。ラジアンを計算するには、Math クラスの概要を参照してください。
  
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/acos()"><linktext>Math.acos()</linktext></link><link href="#Math/asin()"><linktext>Math.asin()</linktext></link><link href="#Math/atan()"><linktext>Math.atan()</linktext></link><link href="#Math/atan2()"><linktext>Math.atan2()</linktext></link><link href="#Math/cos()"><linktext>Math.cos()</linktext></link><link href="#Math/tan()"><linktext>Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:sqrt"><apiName>sqrt</apiName><shortdesc>
  指定された数値の平方根を計算して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.sqrt, sqrt, square root 
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>val</codeph> が 0 以上の場合は数値、そうでない場合は <codeph>NaN</codeph>（非数）です。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 以上の数値または式です。 
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された数値の平方根を返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  指定された数値の平方根を計算して返します。
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:tan"><apiName>tan</apiName><shortdesc>
  指定された角度のタンジェント（正接）を計算して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.tan, tan, tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>パラメーター <codeph>angleRadians</codeph> のタンジェントです。
  
  </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>angleRadians</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>角度をラジアンで表した数値です。
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された角度のタンジェントを返します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  指定された角度のタンジェント（正接）を計算して返します。ラジアンを計算するには、Math クラスの概要を参照してください。
  
  
  </apiDesc></apiOperationDetail><related-links><link href="#Math/acos()"><linktext>Math.acos()</linktext></link><link href="#Math/asin()"><linktext>Math.asin()</linktext></link><link href="#Math/atan()"><linktext>Math.atan()</linktext></link><link href="#Math/atan2()"><linktext>Math.atan2()</linktext></link><link href="#Math/cos()"><linktext>Math.cos()</linktext></link><link href="#Math/sin()"><linktext>Math.sin()</linktext></link></related-links></apiOperation><apiValue id="Math:E"><apiName>E</apiName><shortdesc>
  自然対数の底を表す数学定数で e と表記されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.e, e
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.71828182845905</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>自然対数の底を表す数学定数で e と表記されるものです。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  自然対数の底を表す数学定数で <i>e</i> と表記されるものです。<i>e</i><codeph/> の近似値は 2.71828182845905 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN10"><apiName>LN10</apiName><shortdesc>
  10 の自然対数を表す数学定数で loge10 と表記されるものです。近似値は 2.302585092994046 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.ln10, ln10, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.302585092994046</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>10 の自然対数を表す数学定数で loge10 と表記されるものです。近似値は 2.302585092994046 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  10 の自然対数を表す数学定数で log<sub>e</sub>10 と表記されるものです。近似値は 2.302585092994046 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN2"><apiName>LN2</apiName><shortdesc>
  2 の自然対数を表す数学定数で loge2 と表記されるものです。近似値は 0.6931471805599453 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.ln2, ln2, natural logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0.6931471805599453</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>2 の自然対数を表す数学定数で loge2 と表記されるものです。近似値は 0.6931471805599453 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  2 の自然対数を表す数学定数で log<sub>e</sub>2 と表記されるものです。近似値は 0.6931471805599453 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG10E"><apiName>LOG10E</apiName><shortdesc>
  10 を底とする定数 e（Math.E）の対数を表す数学定数で log10e と表記されるものです。近似値は 0.4342944819032518 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.log10e, log10e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0.4342944819032518</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>10 を底とする定数 e の対数を表す数学定数で log10e と表記されるものです。近似値は 0.4342944819032518 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  10 を底とする定数 <i>e</i>（<codeph>Math.E</codeph>）の対数を表す数学定数で log<sub>10</sub>e と表記されるものです。近似値は 0.4342944819032518 です。 
  <p><codeph>Math.log()</codeph> メソッドは、数値の自然対数を計算します。<codeph>Math.log()</codeph> の結果に <codeph>Math.LOG10E</codeph> を乗算すると、10 を底とする対数を得ることができます。</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG2E"><apiName>LOG2E</apiName><shortdesc>
  2 を底とする定数 e の対数を表す数学定数で log2e と表記されるものです。近似値は 1.442695040888963387 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.log2e, log2e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1.442695040888963387</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>2 を底とする定数 e の対数を表す数学定数で log2e と表記されるものです。近似値は 1.442695040888963387 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  2 を底とする定数 <i>e</i> の対数を表す数学定数で log2e と表記されるものです。近似値は 1.442695040888963387 です。
  
  <p><codeph>Math.log</codeph> メソッドは、数値の自然対数を計算します。<codeph>Math.log()</codeph> の結果に <codeph>Math.LOG2E</codeph> を乗算すると、2 を底とする対数を得ることができます。</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:PI"><apiName>PI</apiName><shortdesc>
  円周と円の直径の比を表す数学定数で pi と表記されるものです。近似値は 3.141592653589793 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.pi, pi
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3.141592653589793</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>円周と円の直径の比を表す数学定数で pi と表記されるものです。近似値は 3.141592653589793 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  円周と円の直径の比を表す数学定数で pi と表記されるものです。近似値は 3.141592653589793 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT1_2"><apiName>SQRT1_2</apiName><shortdesc> 
  1/2 の平方根を表す数学定数です。近似値は 0.7071067811865476 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.sqrt1_2, sqrt1_2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0.7071067811865476</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>1/2 の平方根を表す数学定数です。近似値は 0.7071067811865476 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc> 
  1/2 の平方根を表す数学定数です。近似値は 0.7071067811865476 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT2"><apiName>SQRT2</apiName><shortdesc>
  2 の平方根を表す数学定数です。近似値は 1.4142135623730951 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>math.sqrt2, sqrt2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1.4142135623730951</apiData><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>2 の平方根を表す数学定数です。近似値は 1.4142135623730951 です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  2 の平方根を表す数学定数です。近似値は 1.4142135623730951 です。
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:Array"><apiName>Array</apiName><shortdesc>
 Array クラスを使用すると、配列にアクセスして操作することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Array, Array object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>インデックス配列にアクセスして操作することができます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Array クラスを使用すると、配列にアクセスして操作することができます。配列インデックスは 0 から始まります。つまり、配列内の最初のエレメントは <codeph>[0]</codeph>、2 番目のエレメントは <codeph>[1]</codeph>（以下同様）になります。Array オブジェクトを作成するには、<codeph>new Array()</codeph> コンストラクターを使用します。 <codeph>Array()</codeph> は関数としても呼び出すことができます。 さらに、配列アクセス（<codeph>[]</codeph>）演算子を使用すると、配列の初期化または配列のエレメントへのアクセスを行うことができます。 
 <p>配列エレメントには、数値、ストリング、オブジェクトを含む各種データ型、さらに他の配列も保存できます。インデックス付き配列を作成し、その各エレメントに異なるインデックス配列を割り当てれば、<i>多次元</i>配列を作成できます。このような配列は、テーブル内のデータの表現に使用できるので、多次元であると考えられます。</p>
 <p> 配列は<i>希薄な配列</i>です。つまり、インデックス 0 に 1 つのエレメント、インデックス 5 に別のエレメントが存在しても、この 2 つのエレメントの間のインデックス位置にはエレメントが存在しない場合があります。このような場合、1 から 4 までの位置のエレメントは未定義となります。これはエレメントが存在しないことを示しており、必ずしも値 <codeph>undefined</codeph> を持つエレメントが存在するわけではありません。</p>
 
 <p>配列では、値による代入ではなく、参照による代入が行われます。 ある配列変数に別の配列変数を代入すると、両方とも同じ配列を参照するようになります。</p>
 <codeblock>
 var oneArray:Array = new Array("a", "b", "c");
 var twoArray:Array = oneArray; // Both array variables refer to the same array.
 twoArray[0] = "z";             
 trace(oneArray);               // Output: z,b,c.
 </codeblock>
 <p><i>結合配列</i>（<i>ハッシュ</i>とも呼ばれる）の作成には Array クラスを使用しないでください。結合配列は、数値エレメントではなく名前付きエレメントを含むデータ構造です。結合配列の作成には、Object クラスを使用してください。ActionScript では Array クラスを使用して結合配列を作成できますが、結合配列で Array クラスのメソッドやプロパティは使用できません。 </p>
 <p>Array クラスを拡張してメソッドをオーバーライドまたは追加することができます。ただし、サブクラスを <codeph>dynamic</codeph> として指定する必要があります。そうしない場合、配列にデータを保管する機能が失われます。</p>
 
 </apiDesc><example conref="examples\ArrayExample.as"> 次の例では、引数がなくエレメント数 0 個の新しい Array オブジェクト <codeph>myArr</codeph> を作成します。
<codeblock>
package {
    import flash.display.Sprite;

    public class ArrayExample extends Sprite {
        public function ArrayExample() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="operators.html#array_access"><linktext>[] (array access)</linktext></link><link href="#Object"><linktext>Object クラス</linktext></link></related-links><apiConstructor id="Array:Array_0"><apiName>Array</apiName><shortdesc>
	 指定された数のエレメントを持つ配列を作成することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>引数は、0 以上の整数ではない数値です。	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiParam><apiItemName>numElements</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>配列内のエレメント数を指定する整数です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 指定された数のエレメントを持つ配列を作成することができます。パラメーターを指定しない場合は、0 個のエレメントを持つ配列が作成されます。エレメント数を指定する場合は、<codeph>numElements</codeph> 個のエレメントを持つ配列が作成されます。 
     <p><b>注意：</b>このクラスは、2 つのコンストラクターメソッド項目を示しています。コンストラクターはさまざまなタイプの引数を受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡される引数の型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
     
	 
	 </apiDesc><example conref="examples\Array_Array.as"> 次の例では、引数がなく初期のエレメント数が 0 個の Array オブジェクト <codeph>myArr</codeph> を作成します。
<codeblock>
package {
    import flash.display.Sprite;

    public class Array_Array extends Sprite {

        public function Array_Array() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example><example conref="examples\Array_Array_2.as"> 次の例では、5 個の初期エレメント（長さが 5）を持つ Array オブジェクトを作成して、1 番目のエレメントにストリング <codeph>"one"</codeph> を設定し、ストリングエレメント <codeph>"six"</codeph> を、<codeph>push()</codeph> メソッドを使用して配列の最後に追加します。
<codeblock>
package {
    import flash.display.Sprite;

    public class Array_Array_2 extends Sprite {

        public function Array_Array_2() {
            var myArr:Array = new Array(5);
            trace(myArr.length); // 5
            myArr[0] = "one";
            myArr.push("six");
            trace(myArr);         // one,,,,,six
            trace(myArr.length); // 6
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links><link href="operators.html#array_access"><linktext>[] array access</linktext></link><link href="#Array/length"><linktext>Array.length</linktext></link></related-links></apiConstructor><apiConstructor id="Array:Array_1"><apiName>Array</apiName><shortdesc>
	 指定されたエレメントを持つ配列を作成することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>引数は、0 以上の整数ではない数値です。	 
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>複数の任意の値で構成されるカンマ区切りリストです。 
	 <p><b>注意：</b>Array コンストラクターに数値パラメーターを 1 つだけ渡した場合、そのパラメーターは配列の <codeph>length</codeph> プロパティを指定するものと見なされます。</p>
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 指定されたエレメントを持つ配列を作成することができます。任意の型の値を指定することができます。配列内の最初のエレメントのインデックスまたは位置は、常に 0 です。
     <p><b>注意：</b>このクラスは、2 つのコンストラクター項目を示しています。コンストラクターはさまざまなタイプの引数を受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡される引数の型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
	 </apiDesc><example conref="examples\Array_Array_3.as"> 次の例では、初期エレメント数が 3 個の新しい Array オブジェクトを作成して、この配列にストリングエレメント <codeph>one</codeph>、<codeph>two</codeph>、<codeph>three</codeph> を設定し、その配列をストリングに変換します。
<codeblock>
package {
    import flash.display.Sprite;

    public class Array_Array_3 extends Sprite {

        public function Array_Array_3() {
            var myArr:Array = new Array("one", "two", "three");
            trace(myArr.length); // 3
            trace(myArr);          // one,two,three
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links><link href="operators.html#array_access"><linktext>[] array access</linktext></link><link href="#Array/length"><linktext>Array.length</linktext></link></related-links></apiConstructor><apiOperation id="Array:AS3:concat"><apiName>concat</apiName><shortdesc>
	 パラメーターで指定されたエレメントを配列内のエレメントと連結して、新しい配列を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.concat, concat, concatenate
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>この配列のエレメントの後にパラメーターのエレメントが続く配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>新しい配列内で連結する任意のデータ型（数値、エレメント、ストリングなど）の値です。値を渡さない場合、新しい配列は元の配列の複製になります。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーターに指定されたエレメントを連結します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 パラメーターで指定されたエレメントを配列内のエレメントと連結して、新しい配列を作成します。パラメーターで配列を指定すると、その配列のエレメントが連結されます。 
 	 
 	 </apiDesc><example conref="examples\Array.concat.1.as"> 次のコードは、4 つの Array オブジェクトを作成します。
 <ul>
   <li><codeph>numbers</codeph> 配列。数値の <codeph>1</codeph>、<codeph>2</codeph>、および<codeph>3</codeph> が含まれています。 </li>
   <li><codeph>letters</codeph> 配列。文字の <codeph>a</codeph>、<codeph>b</codeph>、および <codeph>c</codeph> が含まれています。 </li>
   <li><codeph>numbersAndLetters</codeph> 配列。<codeph>concat()</codeph> メソッドを呼び出し、配列 <codeph>[1,2,3,a,b,c]</codeph> を作成します。 </li>
   <li><codeph>lettersAndNumbers</codeph> 配列。<codeph>concat()</codeph> メソッドを呼び出し、配列 <codeph>[a,b,c,1,2,3]</codeph> を作成します。 </li>
 </ul>
<codeblock>

var numbers:Array = new Array(1, 2, 3);
var letters:Array = new Array("a", "b", "c");
var numbersAndLetters:Array = numbers.concat(letters);
var lettersAndNumbers:Array = letters.concat(numbers);

trace(numbers);       // 1,2,3
trace(letters);       // a,b,c
trace(numbersAndLetters); // 1,2,3,a,b,c
trace(lettersAndNumbers); // a,b,c,1,2,3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:every"><apiName>every</apiName><shortdesc>
	 指定された関数について false を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ブール値です。<codeph>true</codeph> を返します（指定された関数について配列内のすべてのアイテムが <codeph>true</codeph> を返す場合）。それ以外の場合は <codeph>false</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>配列内の各アイテムについて実行する関数です。この関数には、単純な比較（<codeph>item &lt; 20</codeph> など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre>function callback(item:*, index:int, array:Array):Boolean;</pre> 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>関数の <codeph>this</codeph> として使用するオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された関数について <codeph>false</codeph> を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。このメソッドを使用して、配列内のすべてのアイテムがある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。例えば、<codeph>me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash">次に、<codeph>every()</codeph> メソッドを、<codeph>myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash">
     myArray.every(myFunction, me);
     </pre>
     <p product="flash"><codeph>myFunction</codeph> は Timeline クラスのメンバーであり、<codeph>me</codeph> でオーバーライドできないため、Flash Player は例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash">
     var myFunction:Function = function(obj:Object):void {
         //your code here
     };
     myArray.every(myFunction, me);
     </pre>
     
	 </apiDesc><example conref="examples\Array_every.as"> 次の例では、2 つの配列をテストして、各配列内のすべてのアイテムが数値であるかどうかを判別します。また、テストの結果を出力します。結果は、<codeph>isNumeric</codeph> が最初の配列で <codeph>true</codeph>、2 番目の配列で <codeph>false</codeph> であることを示しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_every extends Sprite {
        public function Array_every() {
            var arr1:Array = new Array(1, 2, 4);
            var res1:Boolean = arr1.every(isNumeric);
            trace("isNumeric:", res1); // true
 
            var arr2:Array = new Array(1, 2, "ham");
            var res2:Boolean = arr2.every(isNumeric);
            trace("isNumeric:", res2); // false
        }
        private function isNumeric(element:*, index:int, arr:Array):Boolean {
            return (element is Number);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Array/some()"><linktext>Array.some()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:filter"><apiName>filter</apiName><shortdesc>
	 配列内の各アイテムについてテスト関数を実行し、指定された関数について true を返すすべてのアイテムを含む新しい配列を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元の配列内のアイテムで <codeph>true</codeph> を返したものをすべて含む新しい配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>配列内の各アイテムについて実行する関数です。この関数には、単純な比較（<codeph>item &lt; 20</codeph> など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre>    function callback(item:*, index:int, array:Array):Boolean;</pre> 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>関数の <codeph>this</codeph> として使用するオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 配列内の各アイテムについてテスト関数を実行し、指定された関数について <codeph>true</codeph> を返すすべてのアイテムを含む新しい配列を作成します。<codeph>false</codeph> を返すアイテムは、新しい配列に含められません。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。例えば、<codeph>me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash">次に、<codeph>filter()</codeph> メソッドを、<codeph>myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash"> 
     myArray.filter(myFunction, me);
     </pre>
     <p product="flash"><codeph>myFunction</codeph> は Timeline クラスのメンバーであり、<codeph>me</codeph> でオーバーライドできないため、Flash Player は例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.filter(myFunction, me);
     </pre>
     
	 </apiDesc><example conref="examples\Array.filter.as"> 次の例では、管理者であるすべての従業員の配列を作成しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_filter extends Sprite {
        public function Array_filter() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace("Employees:");
            employees.forEach(traceEmployee);
            
            var managers:Array = employees.filter(isManager);
            trace("Managers:");
            managers.forEach(traceEmployee);
        }
        private function isManager(element:*, index:int, arr:Array):Boolean {
            return (element.manager == true);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace("\t" + element.name + ((element.manager) ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Array/map()"><linktext>Array.map()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:forEach"><apiName>forEach</apiName><shortdesc>
	 配列内の各アイテムについて関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>配列内の各アイテムについて実行する関数です。この関数には、単純なコマンド（<codeph>trace()</codeph> ステートメントなど）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre>    function callback(item:*, index:int, array:Array):void;</pre> 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>関数の <codeph>this</codeph> として使用するオブジェクトです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 配列内の各アイテムについて関数を実行します。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。例えば、<codeph>me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash">次に、<codeph>forEach()</codeph> メソッドを、<codeph>myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash">
     myArray.forEach(myFunction, me);
     </pre>
     <p product="flash"><codeph>myFunction</codeph> は Timeline クラスのメンバーであり、<codeph>me</codeph> でオーバーライドできないため、Flash Player は例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.forEach(myFunction, me);
     </pre>
	 </apiDesc><example conref="examples\Array_forEach.as"> 次の例では、配列内の各アイテムについて <codeph>trace()</codeph> ステートメントを、<codeph>traceEmployee()</codeph> 関数で実行しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_forEach extends Sprite {
        public function Array_forEach() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace(employees);
            employees.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace(element.name + " (" + element.manager + ")");
        }
    }
}
</codeblock></example><example conref="examples\Array_forEach_2.as"> 次の例もまた、配列内の各アイテムについて <codeph>trace()</codeph>ステートメントを実行していますが、ここで使用する <codeph>traceEmployee()</codeph> 関数には若干の変更が加えられています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_forEach_2 extends Sprite {
        public function Array_forEach_2() {
            var employeeXML:XML = &lt;employees>
                    &lt;employee name="Steven" manager="false" />
                    &lt;employee name="Bruce" manager="true" />
                    &lt;employee name="Rob" manager="false" />
                &lt;/employees>;
            var employeesList:XMLList = employeeXML.employee;
            var employeesArray:Array = new Array();
            for each (var tempXML:XML in employeesList) {
                employeesArray.push(tempXML);
            }
            employeesArray.sortOn("@name");
            employeesArray.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:Number, arr:Array):void {
            trace(element.@name + ((element.@manager == "true") ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:indexOf"><apiName>indexOf</apiName><shortdesc>
	 厳密な等価（===）を使用して配列内のアイテムを検索し、アイテムのインデックス位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>配列内のアイテムの 0 から始まるインデックス位置です。<codeph>searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>searchElement</apiItemName><apiType value=""/><apiDesc>配列内で検索するアイテムです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>アイテムの検索を開始する配列内の場所です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 厳密な等価（<codeph>===</codeph>）を使用して配列内のアイテムを検索し、アイテムのインデックス位置を返します。
	 </apiDesc><example conref="examples\Array_indexOf.as"> 次の例では、指定された配列の位置を表示しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_indexOf extends Sprite {
        public function Array_indexOf() {
            var arr:Array = new Array(123,45,6789);
            arr.push("123-45-6789");
            arr.push("987-65-4321");
            
            var index:int = arr.indexOf("123");
            trace(index); // -1
            
            var index2:int = arr.indexOf(123);
            trace(index2); // 0
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Array/lastIndexOf()"><linktext>Array.lastIndexOf()</linktext></link><link href="operators.html#strict_equality"><linktext>=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:join"><apiName>join</apiName><shortdesc>
	 配列内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.join, join
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングに変換された配列のエレメントで構成され、指定されたパラメーターで区切られているストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>sep</apiItemName><apiType value=""/><apiData>unknown</apiData><apiDesc>返されたストリング内の配列エレメントを区切る文字またはストリングです。このパラメーターを省略すると、デフォルトのセパレーターとしてカンマが使用されます。 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>配列内のエレメントをストリングに変換します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 配列内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。ネストされた配列は、<codeph>join()</codeph> メソッドに渡されるセパレーターで区切るのではなく、常にカンマ（,）で区切ります。
	 
	 </apiDesc><example conref="examples\Array.join.1.as"> 次のコードは、Array オブジェクト<codeph>myArr</codeph> を作成し、エレメント <codeph>one</codeph>、<codeph>two</codeph>、<codeph>three</codeph> を設定します。次に <codeph>one and two and three</codeph> を含むストリングを、<codeph>join()</codeph> メソッドを使って作成します。
<codeblock>

var myArr:Array = new Array("one", "two", "three");
var myStr:String = myArr.join(" and ");
trace(myArr); // one,two,three
trace(myStr); // one and two and three
</codeblock></example><example conref="examples\Array.join.2.as"> 次のコードは、Array オブジェクト <codeph>specialChars</codeph> を作成し、エレメント <codeph>(</codeph>、<codeph>)</codeph>、<codeph>-</codeph> と空白文字を設定します。次に <codeph>(888) 867-5309</codeph> を含むストリングを作成します。次に、<codeph>for</codeph> ループを使用して、<codeph>specialChars</codeph> にリストされている各型の特殊文字を削除し、ストリング（<codeph>myStr</codeph>）を作成します。このストリングは、電話番号の数字の桁（<codeph>888675309</codeph>）のみが残されたものです。<codeph>+</codeph> などの他の文字を <codeph>specialChars</codeph> に追加することもできるので、このルーチンは国際電話番号の形式にも対応します。
<codeblock>

var phoneString:String = "(888) 867-5309";

var specialChars:Array = new Array("(", ")", "-", " ");
var myStr:String = phoneString;

var ln:uint = specialChars.length;
for(var i:uint; i &lt; ln; i++) {
    myStr = myStr.split(specialChars[i]).join("");
}

var phoneNumber:Number = new Number(myStr);

trace(phoneString); // (888) 867-5309
trace(phoneNumber); // 8888675309
</codeblock></example></apiOperationDetail><related-links><link href="#String/split()"><linktext>String.split()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
	 配列内のアイテムを、最後のアイテムから先頭に向かって検索し、厳密な等価（===）を使用して、一致したアイテムのインデックス位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>配列内のアイテムの 0 から始まるインデックス位置です。<codeph>searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>searchElement</apiItemName><apiType value=""/><apiDesc>配列内で検索するアイテムです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0x7fffffff</apiData><apiDesc>アイテムの検索を開始する配列内の場所です。デフォルトは、インデックスに許可されている最大値です。<codeph>fromIndex</codeph> を指定しない場合、配列内の最後のアイテムから検索が開始されます。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 配列内のアイテムを、最後のアイテムから先頭に向かって検索し、厳密な等価（<codeph>===</codeph>）を使用して、一致したアイテムのインデックス位置を返します。
	 </apiDesc><example conref="examples\Array_lastIndexOf.as"> 次の例では、指定された配列の位置を表示しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_lastIndexOf extends Sprite {
        public function Array_lastIndexOf() {
            var arr:Array = new Array(123,45,6789,123,984,323,123,32);
            
            var index:int = arr.indexOf(123);
            trace(index); // 0
            
            var index2:int = arr.lastIndexOf(123);
            trace(index2); // 6
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Array/indexOf()"><linktext>Array.indexOf()</linktext></link><link href="operators.html#strict_equality"><linktext>=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:map"><apiName>map</apiName><shortdesc>
     配列内の各アイテムについて関数を実行し、元の配列の各アイテムに対する関数の結果に対応するアイテムから成る新しい配列を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元の配列内の各アイテムの関数の結果が含まれる新しい配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>配列内の各アイテムについて実行する関数です。この関数には、単純なコマンド（ストリングの配列の大文字小文字の変更など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre>    function callback(item:*, index:int, array:Array):void;</pre> 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>関数の <codeph>this</codeph> として使用するオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     配列内の各アイテムについて関数を実行し、元の配列の各アイテムに対する関数の結果に対応するアイテムから成る新しい配列を作成します。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。例えば、<codeph>me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash">次に、<codeph>map()</codeph> メソッドを、<codeph>myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash">
     myArray.map(myFunction, me);
     </pre>
     <p product="flash"><codeph>myFunction</codeph> は Timeline クラスのメンバーであり、<codeph>me</codeph> でオーバーライドできないため、Flash Player は例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.map(myFunction, me);
     </pre>
	 </apiDesc><example conref="examples\Array_map.as"> 次の例では、配列内のすべてのアイテムを大文字に変更しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_map extends Sprite {
        public function Array_map() {
            var arr:Array = new Array("one", "two", "Three");
            trace(arr); // one,two,Three

            var upperArr:Array = arr.map(toUpper);
            trace(upperArr); // ONE,TWO,THREE
        }
        private function toUpper(element:*, index:int, arr:Array):String {
            return String(element).toUpperCase();
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Array/filter()"><linktext>Array.filter()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:pop"><apiName>pop</apiName><shortdesc>
	  配列の最後のエレメントを削除して、そのエレメントの値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.pop, pop
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定した配列の最後のエレメント（任意のデータ型）の値です。
	 
	 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  配列の最後のエレメントを削除して、そのエレメントの値を返します。
	 
	 </apiDesc><example conref="examples\Array.pop.1.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成し、エレメント <codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph> を設定します。次に、最後のエレメント（<codeph>c</codeph>）を、<codeph>pop()</codeph> メソッドを使って配列から削除し、String オブジェクト <codeph>letter</codeph> に割り当てます。
<codeblock>

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
var letter:String = letters.pop();
trace(letters); // a,b
trace(letter);     // c
</codeblock></example></apiOperationDetail><related-links><link href="#Array/push()"><linktext>Array.push()</linktext></link><link href="#Array/shift()"><linktext>Array.shift()</linktext></link><link href="#Array/unshift()"><linktext>Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:push"><apiName>push</apiName><shortdesc>
	 エレメントを配列の最後に追加して、追加後の配列の長さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.push, push
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>新しい配列の長さを表す整数です。
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>配列に追加される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 エレメントを配列の最後に追加して、追加後の配列の長さを返します。
	 
	 </apiDesc><example conref="examples\Array.push.1.as"> 次のコードは、空の Array オブジェクト <codeph>letters</codeph> を作成し、次にエレメント <codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph> を、<codeph>push()</codeph> メソッドを使って配列に設定します。
<codeblock>

var letters:Array = new Array();

letters.push("a");
letters.push("b");
letters.push("c");

trace(letters.toString()); // a,b,c
</codeblock></example><example conref="examples\Array.push.2.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成します。このオブジェクトには、エレメント <codeph>a</codeph> が最初から設定されています。<codeph>push()</codeph> メソッドを 1 度使用して、エレメント <codeph>b</codeph> と <codeph>c</codeph> を配列の最後に追加します。push 後は、この配列のエレメントは 3 つになります。
<codeblock>

var letters:Array = new Array("a");
var count:uint = letters.push("b", "c");

trace(letters); // a,b,c
trace(count);   // 3
</codeblock></example></apiOperationDetail><related-links><link href="#Array/pop()"><linktext>Array.pop()</linktext></link><link href="#Array/shift()"><linktext>Array.shift()</linktext></link><link href="#Array/unshift()"><linktext>Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:reverse"><apiName>reverse</apiName><shortdesc>
	  配列の並びを反転させます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.reverse, reverse
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>新しい配列です。
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  配列の並びを反転させます。
	 
	 </apiDesc><example conref="examples\Array.reverse.1.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成し、エレメント <codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph> を設定します。次に、<codeph>reverse()</codeph> メソッドを使用して、配列エレメントの順序を反転し、配列 <codeph>[c,b,a]</codeph> を作成します。
<codeblock>

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
letters.reverse();
trace(letters); // c,b,a
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:shift"><apiName>shift</apiName><shortdesc>
	 配列の最初のエレメントを削除して、そのエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.shift, shift
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>配列内の最初のエレメント（任意のデータ型）です。
	 
	 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	 配列の最初のエレメントを削除して、そのエレメントを返します。残りの配列エレメントは、元の位置 i から i-1 に移動されます。
	 
	 </apiDesc><example conref="examples\Array.shift.1.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成し、エレメント <codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph> を設定します。次に、<codeph>shift()</codeph> メソッドを使用して、1 番目のエレメント（<codeph>a</codeph>）を <codeph>letters</codeph> から削除し、それをストリング <codeph>firstLetter</codeph> に割り当てます。
<codeblock>

var letters:Array = new Array("a", "b", "c");
var firstLetter:String = letters.shift();
trace(letters);     // b,c
trace(firstLetter); // a
</codeblock></example></apiOperationDetail><related-links><link href="#Array/pop()"><linktext>Array.pop()</linktext></link><link href="#Array/push()"><linktext>Array.push()</linktext></link><link href="#Array/unshift()"><linktext>Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:slice"><apiName>slice</apiName><shortdesc>
	 元の配列から一連のエレメントを取り出して、新しい配列を返します。元の配列は変更されません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.slice, slice
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元の配列から取り出した一連のエレメントから成る配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>スライスの始点のインデックスを示す数値です。<codeph>startIndex</codeph> が負の数値の場合、始点は配列の末尾から開始します。つまり、-1 が最後のエレメントです。	
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>16777215</apiData><apiDesc>スライスの終点のインデックスを示す数値です。このパラメーターを省略すると、スライスには配列の最初から最後までのすべてのエレメントが取り込まれます。<codeph>endIndex</codeph> が負の数値の場合、終点は配列の末尾から開始します。つまり、-1 が最後のエレメントです。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>元の配列から取り出した一連のエレメントから成る新しい配列を返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 元の配列から一連のエレメントを取り出して、新しい配列を返します。元の配列は変更されません。返される配列には、<codeph>startIndex</codeph> エレメントから <codeph>endIndex</codeph> の前のエレメントまでのすべてのエレメントが含まれます。 
	 <p>パラメーターを何も渡さないと、元の配列の複製が作成されます。</p>
	 
	 </apiDesc><example conref="examples\Array.slice.1.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成し、エレメント <codeph>[a,b,c,d,e,f]</codeph> を設定します。次に、配列 <codeph>someLetters</codeph> を、<codeph>slice()</codeph> メソッドを呼び出し、エレメント 1（<codeph>b</codeph>）から エレメント 3（<codeph>d</codeph>）に対して作成します。その結果、作成される配列には <codeph>b</codeph> と <codeph>c</codeph> が設定されます。
<codeblock>

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(1,3);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // b,c
</codeblock></example><example conref="examples\Array.slice.2.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成し、エレメント <codeph>[a,b,c,d,e,f]</codeph> を設定します。次に、配列 <codeph>someLetters</codeph> を、<codeph>slice()</codeph> メソッドを呼び出し、エレメント 2（<codeph>c</codeph>）に対して作成します。その結果、作成された配列には <codeph>[c,d,e,f]</codeph> が設定されます。
<codeblock>

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // c,d,e,f
</codeblock></example><example conref="examples\Array.slice.3.as"> 次のコードは、Array オブジェクト <codeph>letters</codeph> を作成し、エレメント <codeph>[a,b,c,d,e,f]</codeph> を設定します。次に、配列 <codeph>someLetters</codeph> を、<codeph>slice()</codeph> メソッドを最後から 2 番目のエレメント <codeph>e</codeph> に対して呼び出すことにより作成します。その結果、作成される配列には <codeph>e</codeph> と <codeph>f</codeph> が設定されます。
<codeblock>

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(-2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // e,f
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:some"><apiName>some</apiName><shortdesc>
     true を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ブール値です。<codeph>true</codeph> を返します（指定された関数について配列内のいずれかのアイテムが <codeph>true</codeph> を返す場合）。それ以外の場合は <codeph>false</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>配列内の各アイテムについて実行する関数です。この関数には、単純な比較（<codeph>item &lt; 20</codeph> など）やより複雑な演算を含めることができます。また、この関数は、次のように、アイテムの値、アイテムのインデックス、および Array オブジェクトの 3 つの引数を使用して呼び出されます。
     <pre>    function callback(item:*, index:int, array:Array):Boolean;</pre> 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>関数の <codeph>this</codeph> として使用するオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>true</codeph> を返すアイテムに達するまで、配列内の各アイテムにテスト関数を実行します。このメソッドを使用して、配列内のいずれのアイテムもある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。例えば、<codeph>me</codeph> というムービークリップ内に、ある関数を作成するとします。</p>
     <pre product="flash">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash">次に、<codeph>some()</codeph> メソッドを、<codeph>myArray</codeph> という配列に対して使用するとします。</p>
     <pre product="flash">
     myArray.some(myFunction, me);
     </pre>
     <p product="flash"><codeph>myFunction</codeph> は Timeline クラスのメンバーであり、<codeph>me</codeph> でオーバーライドできないため、Flash Player は例外をスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
     <pre product="flash">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.some(myFunction, me);
     </pre>   
	 </apiDesc><example conref="examples\Array_some.as"> 次の例では、未定義の値を表示しています。
<codeblock>
package {
    import flash.display.Sprite;
    public class Array_some extends Sprite {
        public function Array_some() {
            var arr:Array = new Array();
            arr[0] = "one";
            arr[1] = "two";
            arr[3] = "four";
            var isUndef:Boolean = arr.some(isUndefined);
            if (isUndef) {
                trace("array contains undefined values: " + arr);
            } else {
                trace("array contains no undefined values.");
            }
        }
        private function isUndefined(element:*, index:int, arr:Array):Boolean {
            return (element == undefined);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Array/every()"><linktext>every()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sort"><apiName>sort</apiName><shortdesc>
	 配列内のエレメントをソートします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.sort, sort
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>戻り値は、次に示すように、渡された引数によって異なります。
	 <ul>
	   <li>値 4 または <codeph>Array.UNIQUESORT</codeph> を <codeph>sortOptions</codeph> 引数（<codeph>...args</codeph> パラメーター）に指定すると、ソート対象のエレメントに同じソートフィールドを持つものが複数ある場合、値 0 が返されます。配列は変更されません。 </li>
  	   <li>値 8 または <codeph>Array.RETURNINDEXEDARRAY</codeph> を <codeph>sortOptions</codeph> 引数（<codeph>...args</codeph> パラメーター）に指定した場合、ソート結果を反映したインデックスの数値配列が返されます。配列は変更されません。 </li>
	   <li>それ以外の場合、値は返されません。ソート順を反映するように配列が変更されます。</li>
	 </ul>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>比較関数を指定する引数と、ソート動作を決定する値です。
	 <p>このメソッドでは、<codeph>Array.sort(compareFunction, sortOptions)</codeph> というシンタックスおよび引数順を使用し、各引数は次のように定義されます。</p>
     <ul><li><codeph>compareFunction</codeph> - 配列内のエレメントのソート順を決定する比較関数。この引数はオプションです。比較関数には、比較を行うために 2 つの引数が必要です。エレメント A とエレメント B を <codeph>compareFunction</codeph> で比較した結果は、負、0 または正の値になります。
	 <ul>
	   <li>負の戻り値は、ソートの結果 A が先、B が後になることを意味します。</li>
	   <li>0 の戻り値は、ソートの結果 A と B が同じ順序になることを意味します。</li>
	   <li>正の戻り値は、ソートの結果 B が先、A が後になることを意味します。</li>
	 </ul>
	 </li>
	 <li><codeph>sortOptions</codeph> - デフォルトのソート動作を変更する数値または定義済み定数。複数指定する場合は、ビット単位の論理和（OR）<codeph>|</codeph> 演算子で区切ります。この引数はオプションです。<codeph>sortOptions</codeph> の許容値は次のとおりです。 
	  <ul>
	   <li>1 または <codeph>Array.CASEINSENSITIVE</codeph></li>
	   <li>2 または <codeph>Array.DESCENDING</codeph></li>
	   <li>4 または <codeph>Array.UNIQUESORT</codeph></li>
	   <li>8 または <codeph>Array.RETURNINDEXEDARRAY</codeph> </li>
	   <li>16 または <codeph>Array.NUMERIC</codeph></li>
	 </ul>
	 詳細については、<codeph>Array.sortOn()</codeph> メソッドを参照してください。</li>
	 </ul>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 配列内のエレメントをソートします。このメソッドは、Unicode 値に基づいてソートを実行します。（ASCII は Unicode のサブセットです。）
	 <p>デフォルトでは、<codeph>Array</codeph>.<codeph>sort()</codeph> は次のように動作します。</p>
	 <ul>
	   <li>ソートでは大文字と小文字が区別されます。<i>Z</i> は <i>a</i> よりも先になります。</li>
	   <li>昇順にソートされます。<i>a</i> は <i>b</i> よりも先になります。 </li>
	   <li>配列はソート順を反映するように変更されます。同じソートフィールドを持つ複数のエレメントは、ソート済みの配列の中で連続的かつランダムに格納されます。</li>
	   <li>データ型に関係なく、すべてのエレメントがストリングとしてソートされます。例えば、"1" は "9" よりも小さいストリング値であるため、100 は 99 よりも先になります。</li>
	 </ul>
	 <p>
	 デフォルト設定とは別の設定を使用して配列をソートする場合は、<codeph>sortOptions</codeph> 部分（<codeph>...args</codeph> パラメーター）に記述されているソートオプションのいずれかを使用するか、またはソート処理を行う独自のカスタム関数を作成できます。カスタム関数を作成する場合、<codeph>sort()</codeph> メソッドを呼び出して、カスタム関数の名前を最初の引数（<codeph>compareFunction</codeph>）として使用します。 
	 </p>
	 
	 </apiDesc><example conref="examples\Array.sort.1.as"> 次のコードは、Array オブジェクト <codeph>vegetables</codeph> を作成し、エレメント <codeph>[spinach, green pepper, cilantro, onion, avocado]</codeph> を設定します。次に、<codeph>sort()</codeph> メソッドを使用して配列をソートします。メソッドの呼び出しにはパラメーターを使用しません。その結果、<codeph>vegetables</codeph> は、アルファベット順でソートされ、<codeph>[avocado, cilantro, green pepper, onion, spinach]</codeph> のようになります。
<codeblock>

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

trace(vegetables); // spinach,green pepper,cilantro,onion,avocado
vegetables.sort();
trace(vegetables); // avocado,cilantro,green pepper,onion,spinach
</codeblock></example><example conref="examples\Array.sort.2.as"> 次のコードは、Array オブジェクト <codeph>vegetables</codeph> を作成し、エレメント <codeph>[spinach, green pepper, Cilantro, Onion, and Avocado]</codeph> を設定します。最初に、<codeph>sort()</codeph> メソッドをパラメーターなしで呼び出して配列をソートします。その結果、配列は <codeph>[Avocado,Cilantro,Onion,green pepper,spinach]</codeph> のようになります。再度、<codeph>sort()</codeph> を <codeph>vegetables</codeph> に対して呼び出します。このとき、<codeph>CASEINSENSITIVE</codeph> 定数をパラメーターとして指定します。その結果、<codeph>vegetables</codeph> は、アルファベット順でソートされ、<codeph>[Avocado, Cilantro, green pepper, Onion, spinach]</codeph> のようになります。
<codeblock>

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "Cilantro",
                 "Onion",
                 "Avocado");

vegetables.sort();
trace(vegetables); // Avocado,Cilantro,Onion,green pepper,spinach
vegetables.sort(Array.CASEINSENSITIVE);
trace(vegetables); // Avocado,Cilantro,green pepper,Onion,spinach
</codeblock></example><example conref="examples\Array.sort.3.as"> 次のコードは、空の Array オブジェクト <codeph>vegetables</codeph> を作成し、次に <codeph>push()</codeph> を 5 回呼び出して配列を設定します。各 <codeph>push()</codeph> 呼び出しで、新しい <codeph>Vegetable</codeph> オブジェクトが、<codeph>Vegetable()</codeph> コンストラクターを呼び出すことで作成されます。このコンストラクターは、String（<codeph>name</codeph>）オブジェクトと Number（<codeph>price</codeph>）オブジェクトを受け取ります。次に示す値を使用して <codeph>push()</codeph> を 5 回呼び出すことで、配列は次のように設定されます。<codeph>[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph> . <codeph>sort()</codeph> メソッドを使用してこの配列をソートします。その結果、配列は <codeph>[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph> のようになります。
<codeblock>
var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort();

trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

//The following code defines the Vegetable class
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.4.as"> 次の例は、上記の例とほとんど同じですが、<codeph>sort()</codeph> メソッドをカスタムソート関数（<codeph>sortOnPrice</codeph>）と共に使用している点が異なります。このカスタム関数は、アルファベット順ではなく価格に基づいてソートを行います。新しい関数 <codeph>getPrice()</codeph> では価格が抽出されます。
<codeblock>

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort(sortOnPrice);

trace(vegetables);
// celery:1.29, squash:1.44, lettuce:1.49, spinach:1.89, asparagus:3.99

function sortOnPrice(a:Vegetable, b:Vegetable):Number {
    var aPrice:Number = a.getPrice();
    var bPrice:Number = b.getPrice();

    if(aPrice > bPrice) {
        return 1;
    } else if(aPrice &lt; bPrice) {
        return -1;
    } else  {
        //aPrice == bPrice
        return 0;
    }
}

// The following code defines the Vegetable class and should be in a separate package.
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function getPrice():Number {
        return price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.5.as"> 次のコードは、Array オブジェクト <codeph>numbers</codeph> を作成し、エレメント <codeph>[3,5,100,34,10]</codeph> を設定します。パラメーターを指定せずに <codeph>sort()</codeph> を呼び出すと、アルファベット順にソートされるため、<codeph>[10,100,3,34,5]</codeph> のように期待しない結果になります。数値を正しくソートするには、定数 <codeph>NUMERIC</codeph> を <codeph>sort()</codeph> メソッドに渡す必要があります。この結果、<codeph>numbers</codeph> は、次のようにソートされます。<codeph>[3,5,10,34,100]</codeph> .
 <p><b>メモ : </b><codeph>sort()</codeph> 関数のデフォルトの動作では、各エンティティがストリングとして処理されます。<codeph>Array.NUMERIC</codeph> 引数は、他のデータ型を実際に Number データ型に変換するわけではありません。これは、単にソートアルゴリズムに数値を認識させるだけです。</p>
<codeblock>

var numbers:Array = new Array(3,5,100,34,10);

trace(numbers); // 3,5,100,34,10
numbers.sort();
trace(numbers); // 10,100,3,34,5
numbers.sort(Array.NUMERIC);
trace(numbers); // 3,5,10,34,100
</codeblock></example></apiOperationDetail><related-links><link href="operators.html#bitwise_OR"><linktext>| (bitwise OR)</linktext></link><link href="#Array/sortOn()"><linktext>Array.sortOn()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sortOn"><apiName>sortOn</apiName><shortdesc>
	 配列内のフィールド（複数のフィールドも可能）に基づいて、配列内のエレメントをソートします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.sortOn, sortOn
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>戻り値は、パラメーターを渡したかどうかによって異なります。
	 <ul>
	   <li>4 または <codeph>Array.UNIQUESORT</codeph> を、<codeph>options</codeph> パラメーターに指定した場合、ソート対象の複数のエレメントにまったく同じソートフィールドがあると、値 0 が返されます。配列は変更されません。 </li>
  	   <li>8 または <codeph>Array.RETURNINDEXEDARRAY</codeph> を <codeph>options</codeph> パラメーターに指定した場合、そのソート結果を反映する配列が返されます。配列は変更されません。</li>
  	   <li>これ以外の場合、何も返されず、ソート順を反映するよう配列が変更されます。</li>
	 </ul>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>fieldName</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>ソート値として使用するフィールドを示すストリング、または、先頭のエレメントが第 1 ソートフィールド、2 番目が第 2 ソートフィールド（以下同様）を表す配列です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>bitwise OR（|）</codeph>演算子によって区切られた定義済み定数の数値または名前です。これによりソート動作を変更します。<codeph>options</codeph> パラメーターには次の値を指定できます。
	 <ul>
	   <li><codeph>Array.CASEINSENSITIVE</codeph> または 1</li>
	   <li><codeph>Array.DESCENDING</codeph> または 2</li>
	   <li><codeph>Array.UNIQUESORT</codeph> または 4</li>
	   <li><codeph>Array.RETURNINDEXEDARRAY</codeph> または 8</li>
	   <li><codeph>Array.NUMERIC</codeph> または 16</li>
	 </ul>
     <p product="flash">数値形式（2）ではなく、ストリング形式のフラグ（<codeph>DESCENDING</codeph> など）を使用すると、コードヒントが有効になります。</p>
   	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 配列内のフィールド（複数のフィールドも可能）に基づいて、配列内のエレメントをソートします。配列は、次に示す特性を備えている必要があります。
	 <ul>
	   <li>インデックス付き配列を対象とします。結合配列は対象外です。</li>
 	   <li>配列の各エレメントは、プロパティがあるオブジェクトを保持するものとします。</li>
	   <li>すべてのオブジェクトには共通のプロパティが少なくとも 1 つあるものとします。このようなプロパティを<i>フィールド</i>といいます。</li>
	 </ul>
	 <p><codeph>fieldName</codeph> パラメーターを複数指定する場合、先頭のフィールドが第 1 ソートフィールド、2 番目のフィールドが第 2 ソートフィールド、（以下同様）と見なされます。ソートは Unicode 値に基づいて実行されます。（ASCII は Unicode のサブセットです。）<codeph>fieldName</codeph> パラメーターで指定されたフィールドが、比較対象のいずれのエレメントにも含まれていない場合、そのフィールドは <codeph>undefined</codeph> に設定されていると見なされます。エレメントはソート済みの配列に連続的かつランダムに格納されます。</p>
 	 <p>デフォルトでは、<codeph>Array</codeph>.<codeph>sortOn()</codeph> は次のように動作します。</p>
	 <ul>
	   <li>ソートでは大文字と小文字が区別されます。<i>Z</i> は <i>a</i> よりも先になります。</li>
	   <li>昇順にソートされます。<i>a</i> は <i>b</i> よりも先になります。 </li>
	   <li>配列はソート順を反映するように変更されます。同じソートフィールドを持つ複数のエレメントは、ソート済みの配列の中で連続的かつランダムに格納されます。</li>
	   <li>数値フィールドは、ストリングとしてソートされます。例えば、"1" は "9" よりも小さいストリング値なので、100 は 99 よりも先になります。</li>
	 </ul>
	 <p>Flash Player 7 では <codeph>options</codeph> パラメーターが追加されました。このパラメーターを使用すると、デフォルトのソート動作をオーバーライドすることができます。単純な配列（例えば、1 つのフィールドだけを持つ配列）をソートする場合、または <codeph>options</codeph> パラメーターでサポートされていないソート順序を指定する場合、<codeph>Array.sort()</codeph> を使用します。</p>
 	 <p>複数のフラグを渡すには、ビット単位の論理和（OR）（<codeph>|</codeph>）演算子で区切ります。</p>
	 <codeblock>
	 my_array.sortOn(someFieldName, Array.DESCENDING | Array.NUMERIC);
	 </codeblock>
	 <p>Flash Player 8 では、複数のフィールドでソートを行う場合に、各フィールドに対して異なるソートオプションを指定する機能が追加されました。Flash Player 8 以降では、<codeph>options</codeph> パラメーターはさまざまなソートオプションの配列を受け入れます。各ソートオプションは <codeph>fieldName</codeph> パラメーターのソートフィールドに対応します。次の例では、第 1 ソートフィールド <codeph>a</codeph> を降順で、第 2 ソートフィールド <codeph>b</codeph> を数値ソートで、第 3 ソートフィールド <codeph>c</codeph> を大文字と小文字を区別しないでソートします。</p>
	 <codeblock>
	 Array.sortOn (["a", "b", "c"], [Array.DESCENDING, Array.NUMERIC, Array.CASEINSENSITIVE]);
	 </codeblock>
	 <p><b>注意：</b><codeph>fieldName</codeph> 配列と <codeph>options</codeph> 配列のエレメントは同数である必要があります。そうでない場合、<codeph>options</codeph> 配列は無視されます。また、<codeph>Array.UNIQUESORT</codeph> オプションと <codeph>Array.RETURNINDEXEDARRAY</codeph> オプションは、配列内の 1 番目のエレメントとしてのみ使用できます。そうでない場合、これらのオプションは無視されます。</p>
	 
	 </apiDesc><example conref="examples\Array.sortOn.1.as"> 次のコードは、空の Array オブジェクト <codeph>vegetables</codeph> を作成し、次に <codeph>push()</codeph> を 5 回呼び出して配列を設定します。各 <codeph>push()</codeph> 呼び出しで、新しい <codeph>Vegetable</codeph> オブジェクトが、<codeph>Vegetable()</codeph> コンストラクターを呼び出すことで作成されます。このコンストラクターは、String（<codeph>name</codeph>）オブジェクトと Number（<codeph>price</codeph>）オブジェクトを受け取ります。次に示す値を使用して <codeph>push()</codeph> を 5 回呼び出すことで、配列は次のように設定されます。<codeph>[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph> . 次に <codeph>sortOn()</codeph> メソッドを <codeph>name</codeph> パラメーターと共に使用して、次の配列を作成します。<codeph>[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph> . 次に、price パラメーターと NUMERIC および DESCENDING 定数を使用して <codeph>sortOn()</codeph> メソッドを再度呼び出すと、次のように数値の降順でソートされた配列が作成されます。<codeph>[asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29]</codeph> .
<codeblock>

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sortOn("name");
trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

vegetables.sortOn("price", Array.NUMERIC | Array.DESCENDING);
trace(vegetables);
// asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29

class Vegetable {
    public var name:String;
    public var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sortOn.2.as"> 次のコードは、空の Array オブジェクト <codeph>records</codeph> を作成し、次に <codeph>push()</codeph> を 3 回呼び出して配列を設定します。各 <codeph>push()</codeph> 呼び出しで、ストリングの <codeph>name</codeph> と <codeph>city</codeph>、および <codeph>zip</codeph> 番号を <codeph>records</codeph> に追加します。3 つの <codeph>for</codeph> ループを使用して配列エレメントを出力します。1 番目の <codeph>for</codeph> ループでは、エレメントが追加された順に出力されます。2 番目の <codeph>for</codeph> ループの前に、<codeph>records</codeph> は、<codeph>sortOn()</codeph> メソッドを使って name、city の順でソートされます。3 番目の <codeph>for</codeph> ループでは、異なる出力が作成されます。<codeph>records</codeph> は、city、name の順で再度ソートされているためです。
<codeblock>


var records:Array = new Array();
records.push({name:"john", city:"omaha", zip:68144});
records.push({name:"john", city:"kansas city", zip:72345});
records.push({name:"bob", city:"omaha", zip:94010});

for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, omaha
// john, kansas city
// bob, omaha

trace("records.sortOn('name', 'city');");
records.sortOn(["name", "city"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// bob, omaha
// john, kansas city
// john, omaha

trace("records.sortOn('city', 'name');");
records.sortOn(["city", "name"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, kansas city
// bob, omaha
// john, omaha
</codeblock></example><example conref="examples\Array.sortOn.3.as"> 次のコードは、空の Array オブジェクト <codeph>users</codeph> を作成し、次に <codeph>push()</codeph> を 4 回呼び出して配列を設定します。各 <codeph>push()</codeph> 呼び出しで <codeph>User()</codeph> コンストラクターを使って User オブジェクトを作成し、<codeph>name</codeph> ストリング、<codeph>age</codeph> uint を各ユーザーに追加します。結果として、配列は <codeph>[Bob:3,barb:35,abcd:3,catchy:4]</codeph> のように設定されます。
 <p>次に、配列を次のようにソートします。
 <ol>
   <li>name のみでソートすると、配列は <codeph>[Bob:3,abcd:3,barb:35,catchy:4]</codeph> のようになります</li>
   <li><codeph>CASEINSENSITIVE</codeph> 定数を使って name でソートすると、配列は <codeph>[abcd:3,barb:35,Bob:3,catchy:4]</codeph> のようになります</li>
   <li><codeph>CASEINSENSITIVE</codeph> 定数と <codeph>DESCENDING</codeph> 定数を使って name でソートすると、配列は <codeph>[catchy:4,Bob:3,barb:35,abcd:3]</codeph> のようになります</li>
   <li>age のみでソートすると、配列は <codeph>[abcd:3,Bob:3,barb:35,catchy:4]</codeph> のようになります。</li>
   <li><codeph>NUMERIC</codeph> 定数を使って age でソートすると、配列は <codeph>[Bob:3,abcd:3,catchy:4,barb:35]</codeph> のようになります</li>
   <li><codeph>DESCENDING</codeph> 定数と <codeph>NUMERIC</codeph> 定数を使って age でソートすると、配列は <codeph>[barb:35,catchy:4,Bob:3,abcd:3]</codeph> のようになります</li>
 </ol>
 </p>
 <p><codeph>indices</codeph> という配列を作成し、<codeph>NUMERIC</codeph> 定数と <codeph>RETURNINDEXEDARRAY</codeph> 定数を使って age でソートした結果をその配列に割り当てます。配列は <codeph>[Bob:3,abcd:3,catchy:4,barb:35]</codeph> のように設定されます。次に、<codeph>for</codeph> ループを使って配列を出力します。</p>
<codeblock>

class User {
    public var name:String;
    public var age:Number;
    public function User(name:String, age:uint) {
        this.name = name;
        this.age = age;
    }

    public function toString():String {
        return this.name + ":" + this.age;
    }
}

var users:Array = new Array();
users.push(new User("Bob", 3));
users.push(new User("barb", 35));
users.push(new User("abcd", 3));
users.push(new User("catchy", 4));

trace(users); // Bob:3,barb:35,abcd:3,catchy:4

users.sortOn("name");
trace(users); // Bob:3,abcd:3,barb:35,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE);
trace(users); // abcd:3,barb:35,Bob:3,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE | Array.DESCENDING);
trace(users); // catchy:4,Bob:3,barb:35,abcd:3

users.sortOn("age");
trace(users); // abcd:3,Bob:3,barb:35,catchy:4

users.sortOn("age", Array.NUMERIC);
trace(users); // Bob:3,abcd:3,catchy:4,barb:35

users.sortOn("age", Array.DESCENDING | Array.NUMERIC);
trace(users); // barb:35,catchy:4,Bob:3,abcd:3

var indices:Array = users.sortOn("age", Array.NUMERIC | Array.RETURNINDEXEDARRAY);
var index:uint;
for(var i:uint = 0; i &lt; indices.length; i++) {
    index = indices[i];
    trace(users[index].name, ": " + users[index].age);
}

// Results:
// Bob : 3
// abcd : 3
// catchy : 4
// barb : 35
</codeblock></example></apiOperationDetail><related-links><link href="operators.html#bitwise_OR"><linktext>|（bitwise OR）</linktext></link><link href="#Array/sort()"><linktext>Array.sort()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:splice"><apiName>splice</apiName><shortdesc>
	 配列のエレメントを追加および削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.splice, splice
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元の配列から削除されたエレメントを含む配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>挿入または削除を開始する配列エレメントのインデックスを示す整数です。負の整数を使用すると、配列の末尾を基準として位置を指定できます。例えば、-1 は配列の最後のエレメントです。
	 </apiDesc></apiParam><apiParam><apiItemName>deleteCount</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>削除するエレメント数を示す整数です。この数には、<codeph>startIndex</codeph> パラメーターで指定するエレメントが含まれます。<codeph>deleteCount</codeph> パラメーターに値を指定しないと、配列内の <codeph>startIndex</codeph> の位置のエレメントから最後のエレメントまで、すべての値が削除されます。値として 0 を指定すると、エレメントは削除されません。 	 
	 </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc><codeph>startIndex</codeph> パラメーターで指定した配列内の位置に挿入するカンマ区切り値のオプションリストです。挿入される値が配列型の場合、配列はそのまま単一のエレメントとして挿入されます。例えば、既存の長さ 3 の配列に別の長さ 3 の配列を結合すると、結果の配列には 4 つのエレメントしかありません。ただし、このエレメントの 1 つは、長さ 3 の配列になります。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 配列のエレメントを追加および削除します。このメソッドは、コピーを作成しないで、配列を変更します。
	 <p><b>注意：</b>Array のサブクラス内でこのメソッドをオーバーライドするには、次の例に示すように、パラメーターに <codeph>...args</codeph> を使用します。</p>
	 <pre>
	 public override function splice(...args) {
	   // your statements here
	 }
	 </pre>
	 </apiDesc><example conref="examples\Array.splice.1.as"> 次のコードは、Array オブジェクト <codeph>vegetables</codeph> を作成し、エレメント <codeph>[spinach, green pepper, cilantro, onion, avocado]</codeph> を設定します。次に <codeph>splice()</codeph> メソッドを、パラメーター 2 と 2 を使用して呼び出します。これにより、<codeph>cilantro</codeph> と <codeph>onion</codeph> が <codeph>spliced</codeph> 配列に割り当てられます。<codeph>vegetables</codeph> 配列には <codeph>[spinach,green pepper,avocado]</codeph> が含まれています。再度、<codeph>splice()</codeph> メソッドを、パラメーター 1、0、<codeph>spliced</codeph> 配列を使って呼び出すと、<codeph>[cilantro,onion]</codeph> が <codeph>vegetables</codeph> の 2 番目のエレメントとして割り当てられます。
<codeblock>

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

var spliced:Array = vegetables.splice(2, 2);
trace(vegetables); // spinach,green pepper,avocado
trace(spliced);    // cilantro,onion

vegetables.splice(1, 0, spliced);
trace(vegetables); // spinach,cilantro,onion,green pepper,avocado

</codeblock></example><example conref="examples\Array.splice.2.as"> <codeph>cilantro</codeph> と <codeph>onion</codeph> がトレースされるので、<codeph>vegetables</codeph> のエレメントは 5 個あるかのように処理されますが、実際のエレメント数は 4 個で、2 番目のエレメントは 2 エレメントを含む別の配列です。<codeph>cilantro</codeph> と <codeph>onion</codeph> を個別に追加するには、次のように指定します。
<codeblock>
 
var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");
 
 var spliced:Array = vegetables.splice(2, 2);
 trace(vegetables); // spinach,green pepper,avocado
 trace(spliced);    // cilantro,onion
 
 vegetables.splice(1, 0, "cilantro", "onion");
 trace(vegetables); // spinach,cilantro,onion,green pepper,avocado
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:toLocaleString"><apiName>toLocaleString</apiName><shortdesc>
     指定された配列内のエレメントを表すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>配列エレメントのストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     指定された配列内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでの配列内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。ActionScript 3.0 実装において、このメソッドは、<codeph>Array.toString()</codeph> と同じ値を返します。
   	 
     
	 </apiDesc></apiOperationDetail><related-links><link href="#Array/toString()"><linktext>Array.toString()</linktext></link></related-links></apiOperation><apiOperation id="Array:toString"><apiName>toString</apiName><shortdesc>
	 指定された配列内のエレメントを表すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.toString, toString
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>配列エレメントのストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定された配列内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでの配列内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。カスタムセパレーターを指定するには、<codeph>Array.join()</codeph> メソッドを使用します。
   	 
	 
	 </apiDesc><example conref="examples\Array.toString.1.as"> 次のコードでは、Array を作成し、値をストリングに変換して、それらを String データ型の <codeph>vegnums</codeph> 変数に格納します。

<codeblock>

var vegetables:Array = new Array();
vegetables.push(1);
vegetables.push(2);
vegetables.push(3);
vegetables.push(4);
vegetables.push(5);
var vegnums:String = vegetables.toString();
trace(vegnums+",6");
// 1,2,3,4,5,6
</codeblock></example></apiOperationDetail><related-links><link href="#String/split()"><linktext>String.split()</linktext></link><link href="#Array/join()"><linktext>Array.join()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:unshift"><apiName>unshift</apiName><shortdesc>
     エレメントを配列の先頭に追加して、配列の新しい長さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.unshift, unshift
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>配列の新しい長さを表す整数です。
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>配列の先頭に挿入される数値、エレメント、または変数です。  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     エレメントを配列の先頭に追加して、配列の新しい長さを返します。配列内の他のエレメントは、元の位置 i から i+1 に移動されます。
	 
	 </apiDesc><example conref="examples\Array.unshift.1.as"> 次のコードは、空の Array オブジェクト <codeph>names</codeph> を作成します。ストリングの <codeph>Bill</codeph> と <codeph>Jeff</codeph> を、<codeph>push()</codeph> メソッドを使って追加し、次にストリングの <codeph>Alfred</codeph> と <codeph>Kyle</codeph> を、<codeph>names</codeph> の先頭に、<codeph>unshift()</codeph> メソッドを 2 回呼び出して追加します。
<codeblock>

var names:Array = new Array();
names.push("Bill");
names.push("Jeff");

trace(names); // Bill,Jeff

names.unshift("Alfred");
names.unshift("Kyle");

trace(names); // Kyle,Alfred,Bill,Jeff
</codeblock></example></apiOperationDetail><related-links><link href="#Array/pop()"><linktext>Array.pop()</linktext></link><link href="#Array/push()"><linktext>Array.push()</linktext></link><link href="#Array/shift()"><linktext>Array.shift()</linktext></link></related-links></apiOperation><apiValue id="Array:CASEINSENSITIVE"><apiName>CASEINSENSITIVE</apiName><shortdesc>
     Array クラスのソートメソッドに対して、大文字と小文字を区別しないソートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>x217F6
	  
	  </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Array クラスのソートメソッドに対して、大文字と小文字を区別しないソートを指定します。この定数は、<codeph>options</codeph> パラメーター（<codeph>sort()</codeph> メソッドまたは <codeph>sortOn()</codeph> メソッド）に使用できます。 
	 <p>この定数の値は 1 です。</p>
     </apiDesc></apiValueDetail><related-links><link href="#Array/sort()"><linktext>Array.sort()</linktext></link><link href="#Array/sortOn()"><linktext>Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:DESCENDING"><apiName>DESCENDING</apiName><shortdesc>
     Array クラスのソートメソッドに対して、降順でのソートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>x217F7
	  
	  </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Array クラスのソートメソッドに対して、降順でのソートを指定します。この定数は、<codeph>options</codeph> パラメーター（<codeph>sort()</codeph> メソッドまたは <codeph>sortOn()</codeph> メソッド）に使用できます。 
 	 <p>この定数の値は 2 です。</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="#Array/sort()"><linktext>Array.sort()</linktext></link><link href="#Array/sortOn()"><linktext>Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:NUMERIC"><apiName>NUMERIC</apiName><shortdesc>
     Array クラスのソートメソッドに対して、文字ストリングではなく数値によるソートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>x217F8
	  
	  </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>16</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Array クラスのソートメソッドに対して、文字ストリングではなく数値によるソートを指定します。この定数を <codeph>options</codeph> パラメーターに設定すると、<codeph>sort()</codeph> メソッドと <codeph>sortOn()</codeph> メソッドは、数字を文字ストリングとしてではなく、数値としてソートします。<codeph>NUMERIC</codeph> 定数を設定しないでソートを実行すると、各配列エレメントは文字ストリングとして処理され、Unicode 順でソートされます。 
 	 
     <p>例えば、値 <codeph>[2005, 7, 35]</codeph> の配列で、<codeph>NUMERIC</codeph> 定数を設定<b>せずに</b> <codeph>options</codeph> パラメーターを使った場合、ソート後の配列は <codeph>[2005, 35, 7]</codeph> となります。一方、<codeph>NUMERIC</codeph> 定数を設定<b>した</b>場合、ソート後の配列は <codeph>[7, 35, 2005]</codeph> となります。 </p>
 	 
 	 <p>この定数は、配列内の数値に対してのみ適用されます。<codeph>["23", "5"]</codeph> などの、数値データを含むストリングには適用されません。</p>
 	 
 	 <p>この定数の値は 16 です。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="#Array/sort()"><linktext>Array.sort()</linktext></link><link href="#Array/sortOn()"><linktext>Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:RETURNINDEXEDARRAY"><apiName>RETURNINDEXEDARRAY</apiName><shortdesc>
	 ソート結果として、配列インデックスで構成される配列を返すことを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>x217F9
	  
	  </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ソート結果として、配列インデックスで構成される配列を返すことを指定します。この定数を <codeph>options</codeph> パラメーター（<codeph>sort()</codeph> メソッドまたは <codeph>sortOn()</codeph> メソッド）に使用すると、元の配列を変更せずに、配列エレメントの複数のビューにアクセスすることができます。 
 	 <p>この定数の値は 8 です。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="#Array/sort()"><linktext>Array.sort()</linktext></link><link href="#Array/sortOn()"><linktext>Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:UNIQUESORT"><apiName>UNIQUESORT</apiName><shortdesc>
     Array クラスのソートメソッドに対して、一意性ソート要件を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>x217FA
	  
	  </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Array クラスのソートメソッドに対して、一意性ソート要件を指定します。この定数は、<codeph>options</codeph> パラメーター（<codeph>sort()</codeph> メソッドまたは <codeph>sortOn()</codeph> メソッド）に使用できます。一意性ソートオプションを指定すると、ソート対象の任意の 2 つのエレメントまたはフィールドが同じ値である場合に、ソートが終了します。 
	 <p>この定数の値は 4 です。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="#Array/sort()"><linktext>Array.sort()</linktext></link><link href="#Array/sortOn()"><linktext>Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:length:get"><apiName>length</apiName><shortdesc>
	 配列内のエレメント数を示す負でない整数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>array.length, length
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 配列内のエレメント数を示す負でない整数です。このプロパティは、新しいエレメントが配列に追加されると自動更新されます。配列エレメントに値を割り当てるとき（<codeph>my_array[index] = value</codeph> など）、<codeph>index</codeph> が数値でかつ <codeph>index+1</codeph> が <codeph>length</codeph> プロパティよりも大きい場合、<codeph>length</codeph> プロパティが <codeph>index+1</codeph> に更新されます。
   	 <p><b>注意：</b><codeph>length</codeph> プロパティに既存の長さよりも短い値を割り当てた場合、配列は切り詰められます。</p>
   	 
	 </apiDesc><example conref="examples\Array.length.1.as"> 次のコードは、Array オブジェクト <codeph>names</codeph> を作成し、ストリングエレメント <codeph>Bill</codeph> を設定します。次に、<codeph>push()</codeph> メソッドを使用して、別のストリングエレメント <codeph>Kyle</codeph> を追加します。配列の長さは、<codeph>length</codeph> プロパティで決められているエレメント 1 個（<codeph>push()</codeph> を使う前）ですが、<codeph>push()</codeph> を呼び出した後はエレメント 2 個になります。別のストリング <codeph>Jeff</codeph> を追加すると、<codeph>names</codeph> の長さは、エレメント 3 個になります。次に <codeph>shift()</codeph> メソッドを 2 回呼び出し、<codeph>Bill</codeph> と <codeph>Kyle</codeph> を削除すると、最終的に配列の <codeph>length</codeph> は 1 個になります。
<codeblock>

var names:Array = new Array("Bill");
names.push("Kyle");
trace(names.length); // 2

names.push("Jeff");
trace(names.length); // 3

names.shift();
names.shift();
trace(names.length); // 1
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:RegExp"><apiName>RegExp</apiName><shortdesc>
     
     RegExp クラスを使用すると、正規表現を処理することができます。正規表現とは、ストリング内で検索を実行したり、ストリング内のテキストを置き換えたりする場合に使用できるパターンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>RegExp
     </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     
     RegExp クラスを使用すると、正規表現を処理することができます。正規表現とは、ストリング内で検索を実行したり、ストリング内のテキストを置き換えたりする場合に使用できるパターンです。
     
     <p><codeph>new RegExp()</codeph> コンストラクターを使用するか、RegExp リテラルを変数に割り当てることによって、新しい RegExp オブジェクトを作成することができます。</p>
     
     <codeblock> var pattern1:RegExp = new RegExp("test-\\d", "i");
     var pattern2:RegExp = /test-\d/i;
     </codeblock>
     
     <p>詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「正規表現の使用」を参照してください。</p>
     
     </apiDesc><example conref="examples\RegExpExample.as"> 次の例は、正規表現を使用してストリングを解析し、渡されたストリングに基づいて新しいストリングまたはブール値を返す方法を示しています。渡されたストリング内で、<codeph>informalizeGreeting()</codeph> メソッドは、大文字小文字に関係なく <codeph>Hello</codeph> という語が見つかると、この語を単純に <codeph>Hi</codeph> に置き換えます。また、ストリング内の名前から姓を削除します。ただし、指定されたパターンに名前が一致する場合です。<codeph>validateEmail()</codeph> と <codeph>validatePhoneNumber()</codeph> メソッドは、渡されたストリングのパターンが有効な電子メールアドレスまたは特定の電話番号のパターンと一致するかどうかをチェックし、その結果に従ってブール値を返します。 
<codeblock>
package {
    import flash.display.Sprite;

    public class RegExpExample extends Sprite {        
        public function RegExpExample() {            
            var formalGreeting:String = "Hello, John Smith.";
            trace(informalizeGreeting(formalGreeting));    // Hi, John.

            var validEmail:String = "name@domain.com";
            trace(validateEmail(validEmail));        // true
            
            var invalidEmail:String = "foo";
            trace(validateEmail(invalidEmail));  // false
            
            var validPhoneNumber:String = "415-555-1212";
            trace(validatePhoneNumber(validPhoneNumber));    // true
            
            var invalidPhoneNumber:String = "312-867-530999";
            trace(validatePhoneNumber(invalidPhoneNumber));  // false
        }
        private function informalizeGreeting(str:String):String {
            var pattern:RegExp = new RegExp("hello, (\\w+) \\w+", "i");
            return str.replace(pattern, "Hi, $1");
        }
        private function validateEmail(str:String):Boolean {
            var pattern:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
        private function validatePhoneNumber(str:String):Boolean {
            var pattern:RegExp = /^\d{3}-\d{3}-\d{4}$/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#String/match()"><linktext>String.match()</linktext></link><link href="#String/replace()"><linktext>String.replace()</linktext></link><link href="#String/search()"><linktext>String.search()</linktext></link></related-links><apiConstructor id="RegExp:RegExp"><apiName>RegExp</apiName><shortdesc>
        2 つのストリングから正規表現を作成することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.attribute, attribute
        </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>re</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>正規表現のパターンです。<i>コンストラクターストリング</i>とも言います。これは正規表現のメインとなる部分です。つまり、"/" で囲まれる部分です。 
        
        <p><b>注意：</b> </p>
        
        <ul>
        
        <li>開始と末尾の "/" 文字を含めないでください。この文字は、コンストラクターを使用しないで正規表現リテラルを定義する場合にのみ使用します。例えば、次の 2 つの正規表現は同等です。
        
        <codeblock> var re1:RegExp = new RegExp("bob", "i"); 
        var re2:RegExp = /bob/i;</codeblock>
        
        </li>
        
        <li><codeph>RegExp()</codeph> コンストラクターメソッドで定義された正規表現の中で、円記号（\）から始まるメタシーケンス（任意の数字を意味する <codeph>\d</codeph> など）を使用するには、円記号を二重に入力する必要があります。例えば、次の 2 つの正規表現は同等です。
        
        <codeblock> var re1:RegExp = new RegExp("\\d+", ""); 
        var re2:RegExp = /\d/;</codeblock>
        
        <p>最初の正規表現では、円記号を二重に入力する必要があります。これは、<codeph>RegExp()</codeph> コンストラクターメソッドの最初のパラメーターがストリングであり、ストリングリテラルの中では、単一の円記号として認識されるためには二重に円記号を入力する必要があるためです。</p>
        
        </li>
        
        </ul>
        
        </apiDesc></apiParam><apiParam><apiItemName>flags</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>正規表現のモディファイアです。これには次のものが含まれます。
        
        <ul>
        
           <li> <codeph>g</codeph>  String クラスの <codeph>replace()</codeph> メソッドを使用する場合、このモディファイアを指定して、最初に一致するストリングのみでなく、一致するすべてのストリングを置き換えます。このモディファイアは、RegExp インスタンスの <codeph>global</codeph> プロパティに対応します。</li>
           <li> <codeph>i</codeph>  正規表現を大文字と小文字の区別なしで評価します。<i/>このモディファイアは、RegExp インスタンスの <codeph>ignoreCase</codeph> プロパティに対応します。</li>
           <li> <codeph>s</codeph>  ドット（<codeph>.</codeph>）文字は改行文字に一致します。この修飾子は、RegExp インスタンスの <codeph>dotall</codeph> プロパティに対応します。</li>
           <li> <codeph>m</codeph>  キャレット（<codeph>^</codeph>）文字とドル記号（<codeph>$</codeph>）は、改行文字の前<i>と</i>後に一致します。このモディファイアは、RegExp インスタンスの <codeph>multiline</codeph> プロパティに対応します。</li>
           <li> <codeph>x</codeph>  <codeph>re</codeph> ストリング内の空白文字を無視します。そのため、可読性の高いコンストラクターを作成できます。この修飾子は、RegExp インスタンスの <codeph>extended</codeph> プロパティに対応します。</li>
        
        </ul>
        
        <p><codeph>flags</codeph> ストリング内の他の文字は、すべて無視されます。 </p>
        
        </apiDesc></apiParam></apiConstructorDef><apiDesc>
        2 つのストリングから正規表現を作成することができます。1 つのストリングは正規表現のパターンを定義し、もう 1 つのストリングは正規表現で使用されるフラグを定義します。 
        
        </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="RegExp:AS3:exec"><apiName>exec</apiName><shortdesc>
         指定されたストリング str について、正規表現を検索します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.exec, exec
         </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>一致が見つからない場合は <codeph>null</codeph>、それ以外の場合は、次に示すプロパティを持つオブジェクトを返します。 
         
         <ul>
         
          <li>エレメント 0 に完全一致のサブストリングを含み、他のエレメント（1 ～ <i>n</i>）に正規表現内の括弧指定されたグループと一致するサブストリングを含む配列 </li>
         
          <li><codeph>index</codeph>  ストリング内で一致するサブストリングの文字の位置</li>
         
          <li><codeph>input</codeph>  ストリング（<codeph>str</codeph>）</li>
         
         </ul>
         
         
         </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>検索するストリングです。  
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         指定されたストリング <codeph>str</codeph> について、正規表現を検索します。 
         
         <p>正規表現に <codeph>g</codeph>（<codeph>global</codeph>）フラグが設定<i>されていない</i>場合、ストリングの先頭（インデックス位置 0）から検索が開始され、正規表現の <codeph>lastIndex</codeph> プロパティは無視されます。</p>
         
         <p>正規表現に <codeph>g</codeph>（<codeph>global</codeph>）フラグが設定<i>されている</i>場合、正規表現の <codeph>lastIndex</codeph> プロパティで指定されたインデックス位置から検索が開始されます。検索でサブストリングが一致すると、<codeph>lastIndex</codeph> プロパティは一致したサブストリングの最後の位置に変更されます。 </p>
         
         </apiDesc><example>正規表現に <codeph>g</codeph>（<codeph>global</codeph>）フラグを設定<i>しない</i>場合、<codeph>exec()</codeph> を使用して、ストリング内で最初に一致するものを検索することができます。 
         
         <codeblock>
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;   
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         trace(result);
         </codeblock>
         
         <p> <codeph>result</codeph> オブジェクトは次のように設定されます。</p>
         
         <ul>
         
          <li> <codeph>result[0]</codeph> は <codeph>"She"</codeph> に設定されます（完全一致）。 </li>
         
          <li> <codeph>result[1]</codeph> は空のストリングに設定されます（括弧指定されたグループの最初の一致）。 </li>
         
          <li> <codeph>result[2]</codeph> は <codeph>"e"</codeph> に設定されます（括弧指定されたグループの 2 番目の一致）。 </li>
         
          <li> <codeph>result.index</codeph> は 0 に設定されます。</li>
         
          <li> <codeph>result.input</codeph> は入力ストリング <codeph>"She sells seashells by the seashore"</codeph> に設定されます。</li>
         
         </ul> 
         
         
         
         <p> 次の例では、正規表現に <codeph>g</codeph>（<codeph>global</codeph>）フラグが設定<i>されている</i>ため、<codeph>exec()</codeph> を繰り返し使用して、一致するものを複数検索することができます。</p>
         
         <codeblock>
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;  
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         
         while (result != null) {
             trace ( result.index, "\t", result);
             result = myPattern.exec(str);
         }
         </codeblock>
         
         <p> このコードの出力は、次のようになります。</p>
         
         <pre><codeph>
            0      She,,e
            10     seashells,sea,ells
            27     seashore,sea,ore
         </codeph></pre>
         
         </example></apiOperationDetail><related-links><link href="#String/match()"><linktext>String.match()</linktext></link><link href="#String/search()"><linktext>String.search()</linktext></link></related-links></apiOperation><apiOperation id="RegExp:AS3:test"><apiName>test</apiName><shortdesc>
         指定されたストリング str 内に正規表現と一致するサブストリングがあるかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.test, test
          
          </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>一致が存在する場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
         
         </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>テストするストリングです。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         指定されたストリング <codeph>str</codeph> 内に正規表現と一致するサブストリングがあるかどうかをテストします。 
         
         <p>正規表現に <codeph>g</codeph>（<codeph>global</codeph>）フラグが設定<i>されていない</i>場合、ストリングの先頭（インデックス位置 0）から検索が開始され、正規表現の <codeph>lastIndex</codeph> プロパティは無視されます。</p>
         
         <p>正規表現に <codeph>g</codeph>（<codeph>global</codeph>）フラグが設定<i>されている</i>場合、正規表現の <codeph>lastIndex</codeph> プロパティで指定されたインデックス位置から検索が開始されます。検索でサブストリングが一致すると、<codeph>lastIndex</codeph> プロパティは一致したサブストリングの最後の位置に変更されます。 </p>
         
         </apiDesc><example conref="examples\RegExp.test.1.as"> 次の例では、<codeph>test()</codeph> メソッドを、<codeph>g</codeph>（<codeph>global</codeph>）フラグが設定された正規表現で使用する方法を示しています。 
<codeblock>
var re1:RegExp = /\w/g;
var str:String = "a b c";
trace (re1.lastIndex); // 0
trace (re1.test(str)); // true
trace (re1.lastIndex); // 1
trace (re1.test(str)); // true
trace (re1.lastIndex); // 3
trace (re1.test(str)); // true
trace (re1.lastIndex); // 5
trace (re1.test(str)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="RegExp:dotall:get"><apiName>dotall</apiName><shortdesc>
         正規表現パターン内のドット文字（.）と改行文字を一致させるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.dotall, dotall
          
          </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
         正規表現パターン内のドット文字（.）と改行文字を一致させるかどうかを指定します。 正規表現の作成時に <codeph>s</codeph> フラグを使用して、<codeph>dotall = true</codeph> に設定します。
         
         </apiDesc><example conref="examples\RegExp.dotall.1.as"> 次の例は、正規表現に <codeph>s</codeph>（<codeph>dotall</codeph>）フラグを設定した場合の効果を示しています。 
<codeblock>
var str:String = "&lt;p>Hello\n"
        + "again&lt;/p>"
        + "&lt;p>Hello&lt;/p>";

var pattern:RegExp = /&lt;p>.*?&lt;\/p>/;
trace(pattern.dotall) // false
trace(pattern.exec(str)); // &lt;p>Hello&lt;/p>

pattern = /&lt;p>.*?&lt;\/p>/s;
trace(pattern.dotall) // true
trace(pattern.exec(str)); 
   </codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:extended:get"><apiName>extended</apiName><shortdesc>
         正規表現に拡張モードを使用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.extended, extended
          
          </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
         正規表現に拡張モードを使用するかどうかを指定します。RegExp オブジェクトが拡張モードの場合、コンストラクターストリング内の空白文字は無視されます。これはコンストラクターの可読性を高めることを目的とします。
         
         <p>正規表現の作成時に <codeph>x</codeph> フラグを使用して、<codeph>extended = true</codeph> に設定します。 </p>
         
         </apiDesc><example conref="examples\RegExp.extended.1.as"> 次の例は、同じ正規表現をさまざまな方法で作成する方法を示しています。それぞれの方法で、xxx-xxx-xxxx、(xxx) xxx-xxxx、または (xxx) xxx-xxxx のいずれかの電話番号パターンに一致する正規表現を作成します。2 番目の正規表現では、<codeph>x</codeph> フラグが使用されているため、ストリング内の空白文字は無視されます。 
<codeblock>
var rePhonePattern1:RegExp = /\d{3}-\d{3}-\d{4}|\(\d{3}\)\s?\d{3}-\d{4}/; 
var str:String = "The phone number is (415)555-1212.";

trace(rePhonePattern1.extended) // false
trace(rePhonePattern1.exec(str)); // (415)555-1212

var rePhonePattern2:RegExp = / \d{3}-\d{3}-\d{4}  |   \( \d{3} \) \ ? \d{3}-\d{4}  /x; 
trace(rePhonePattern2.extended) // true
trace(rePhonePattern2.exec(str)); // (415)555-1212
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:global:get"><apiName>global</apiName><shortdesc>
         正規表現にグローバル照合を使用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.global, global
          
          </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
         正規表現にグローバル照合を使用するかどうかを指定します。<codeph>global == true</codeph> の場合、一致するものが 1 つ見つかった後に <codeph>lastIndex</codeph> プロパティが設定されます。次回、照合が要求されたときには、正規表現エンジンはストリングの <codeph>lastIndex</codeph> の位置から照合を開始します。正規表現の作成時に <codeph>g</codeph> フラグを使用して、<codeph>global</codeph> を <codeph>true</codeph> に設定します 
         
         </apiDesc><example conref="examples\RegExp.global.1.as"> 次の例は、<codeph>g</codeph>（<codeph>global</codeph>）フラグを <codeph>exec()</codeph> メソッドに設定した場合の効果を示しています。
<codeblock>
var pattern:RegExp = /foo\d/; 
var str:String = "foo1 foo2";
trace(pattern.global); // false
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 0
trace(pattern.exec(str)); // foo1

pattern = /foo\d/g;
trace(pattern.global); // true
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 4
trace(pattern.exec(str)); // foo2
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:ignoreCase:get"><apiName>ignoreCase</apiName><shortdesc>
         正規表現で大文字と小文字の区別を無視するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.ignoreCase, ignoreCase
         </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
         正規表現で大文字と小文字の区別を無視するかどうかを指定します。正規表現の作成時に <codeph>i</codeph> フラグを使用して、<codeph>ignoreCase = true</codeph> に設定します。 
         
         </apiDesc><example conref="examples\RegExp.ignoreCase.1.as"> 次の例は、<codeph>i</codeph>（<codeph>ignoreCase</codeph>）フラグを設定した場合の効果について示しています。
<codeblock>
var pattern:RegExp = /bob/; 
var str:String = "Bob bob";
trace(pattern.ignoreCase); // false
trace(pattern.exec(str)); // bob

pattern = /bob/i;
trace(pattern.ignoreCase); // true
trace(pattern.exec(str)); // Bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:lastIndex:get"><apiName>lastIndex</apiName><shortdesc>
         ストリング内で次回の検索を開始するインデックス位置を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.lastIndex, lastIndex
          
          </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
         ストリング内で次回の検索を開始するインデックス位置を指定します。このプロパティは、RegExp クラスの <codeph>exec()</codeph> メソッドと <codeph>test()</codeph> メソッドに影響します。ただし、String クラスの <codeph>match()</codeph> メソッド、<codeph>replace()</codeph> メソッド、および <codeph>search()</codeph> メソッドは、<codeph>lastIndex</codeph> プロパティを無視し、すべての検索をストリングの先頭から開始します。
         
         <p><codeph>exec()</codeph> メソッドまたは <codeph>test()</codeph> メソッドで一致するものが見つかり、正規表現で <codeph>g</codeph>（<codeph>global</codeph>）フラグが <codeph>true</codeph> に設定されている場合、メソッドは自動的に <codeph>lastIndex</codeph> プロパティを、最後に一致したサブストリング内の最後の文字の<i>次</i>にある文字のインデックス位置に設定します。<codeph>g</codeph>（<codeph>global</codeph>）フラグが <codeph>false</codeph> に設定されている場合、メソッドは <codeph>lastIndex</codeph> プロパティを設定しません。</p>
         
         <p><codeph>lastIndex</codeph> プロパティを設定することで、ストリング内で正規表現による検索を開始する位置を調整できます。 </p>
         
         </apiDesc><example conref="examples\RegExp.lastIndex.1.as"> 次の例は、<codeph>lastIndex</codeph> プロパティを設定した場合の効果を示しています。また、<codeph>exec()</codeph> メソッドを <codeph>g</codeph>（<codeph>global</codeph>）フラグが設定された正規表現で呼び出した後に、そのプロパティがどのように更新されるかを示しています。
<codeblock>
var pattern:RegExp = /\w\d/g; 
var str:String = "a1 b2 c3 d4";
pattern.lastIndex = 2; 
trace(pattern.exec(str)); // b2
trace(pattern.lastIndex); // 5
trace(pattern.exec(str)); // c3
trace(pattern.lastIndex); // 8
trace(pattern.exec(str)); // d4
trace(pattern.lastIndex); // 11
trace(pattern.exec(str)); // null
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:multiline:get"><apiName>multiline</apiName><shortdesc>
         m（multiline）フラグを設定するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.multiline, multiline
          
          </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
         <codeph>m</codeph>（<codeph>multiline</codeph>）フラグを設定するかどうかを指定します。設定する場合、正規表現内のキャレット（<codeph>^</codeph>）とドル記号（<codeph>$</codeph>）は改行文字の前と後に一致します。正規表現の作成時に <codeph>m</codeph> フラグを使用して、<codeph>multiline = true</codeph> に設定します。
         
         </apiDesc><example conref="examples\RegExp.multiline.1.as"> 次の例は、<codeph>m</codeph>（<codeph>multiline</codeph>）フラグを設定した場合の効果について示しています。
<codeblock>
var pattern:RegExp = /^bob/; 
var str:String = "foo\n"
                + "bob";
trace(pattern.multiline); // false
trace(pattern.exec(str)); // null

pattern = /^bob/m;
trace(pattern.multiline); // true
trace(pattern.exec(str)); // bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:source:get"><apiName>source</apiName><shortdesc>
         正規表現のパターン部分を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>RegExp, RegExp.source, source
          
          </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
         正規表現のパターン部分を指定します。
         
         </apiDesc><example conref="examples\RegExp.source.1.as"> 次のコードは、2 つの正規表現について <codeph>source</codeph> パラメーターを出力します。
<codeblock>
var re1:RegExp = /aabb/gi;
trace (re1.source); // aabb

var re2:RegExp = new RegExp("x+y*", "i");
trace(re2.source); // x+y*
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:Date"><apiName>Date</apiName><shortdesc>
 Date クラスは日時のデータを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Date object, built-in class, date 
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Date クラスは日時のデータを表します。Date クラスの 1 つのインスタンスは特定の一時点を表します。この特定の一時点について、月、日、時、秒などのプロパティを照会および変更できます。Date クラスを使用すると、世界時（グリニッジ標準時。現在の呼称は世界標準時または UTC）またはローカル時間を基準にした日付と時刻の値を取得できます。ローカル時間は、Flash Player を実行しているオペレーティングシステムに設定されているローカルタイムゾーンによって決定されます。Date クラスのメソッドは静的ではありません。メソッドを呼び出すときに指定した個々の Date オブジェクトにのみ適用されます。例外として、<codeph>Date.UTC()</codeph> メソッドと <codeph>Date.parse()</codeph> メソッドがあります。これらは静的なメソッドです。
 <p product="flash">Date クラスによる夏時間の処理方法は、オペレーティングシステムおよび Flash Player のバージョンに応じて異なります。Flash Player 6 以降では、夏時間は各オペレーティングシステムで次のように処理されます。</p>
 <ul product="flash">
 <li>Windows - Date オブジェクトの出力は夏時間に合わせて自動的に調整されます。Date オブジェクトは、夏時間が現在の地域で採用されているかどうかを確認します。夏時間が採用されている場合は、夏時間に移行する日付と時刻の基準を確認します。ただし、現在有効な夏時間の日付が過去と未来に適用されるために、夏時間の日付が異なる地域では、計算される夏時間の日付が過去の日付と食い違う場合があります。</li>
 <li>Mac OS X - Date オブジェクトの出力は夏時間に合わせて自動的に調整されます。Mac OS X では、タイムゾーン情報データベースを使用して、現在または過去の日付または時刻に夏時間の時差を適用する必要があるかどうかを決定します。</li>
 <li>Mac OS 9 - 現在の日付および時刻に夏時間の時差を適用する必要があるかどうかを判定できるだけの情報しか提供されません。したがって、Date オブジェクトは、現在の夏時間の時差が過去および将来のすべての日時に適用されると想定します。</li>
 </ul>
 <p product="flash">Flash Player 5 によるオペレーティングシステム別の夏時間の対処方法は次のとおりです。</p>
 <ul product="flash">
 <li>Windows - 夏時間に関する米国の規則が常に適用されるために、米国とは夏時間に移行する時期が異なるヨーロッパおよび他の地域では移行期間が食い違います。Flash は、現在の地域で採用されている夏時間を正しく検出します。</li>
 </ul>
 <p>Date クラスを使用するには、<codeph>new</codeph> 演算子を使用して Date インスタンスを作成します。</p>
 <p>ActionScript 3.0 は新しいアクセッサープロパティをいくつか追加しています。これらのアクセッサープロパティは、Date インスタンスにアクセスしたり、Date インスタンスを変更する多くの Date クラスメソッドの代わりに使用できます。また、ActionScript 3.0 には、ECMA-262 Edition 3 に準拠するために組み込まれている、<codeph>toString()</codeph> メソッドの新しい変形メソッド（<codeph>Date.toLocaleString()</codeph>、<codeph>Date.toTimeString()</codeph>、<codeph>Date.toLocaleTimeString()</codeph>、<codeph>Date.toDateString()</codeph>、および <codeph>Date.toLocaleDateString()</codeph>）も含まれます。</p>
 <p>相対時間または経過時間を計算するには、flash.utils パッケージに含まれる <codeph>getTimer()</codeph> メソッドを参照してください。</p>
 
 </apiDesc><example conref="examples\DateExample.as"> 次の例では、次に示す変数を割り当てる場合の <codeph>Date()</codeph> コンストラクターのさまざまな使用法を示しています。
 <ul>
   <li><codeph>myDate1</codeph> では、パラメーターを指定せずに <codeph>Date()</codeph> を呼び出します。これにより、<codeph>myDate1</codeph> には、使用しているシステムの日時に基づいた現在の日時が設定されます。 </li>
   <li><codeph>myDate2</codeph> では、<codeph>Date()</codeph> を呼び出し、パラメーターに <codeph>year</codeph>（<codeph>2000</codeph>）、month（<codeph>0</codeph> = 1 月）、<codeph>day</codeph>（<codeph>1</codeph>）を渡します。</li>
   <li><codeph>myDate3</codeph> では、<codeph>Date()</codeph> を呼び出し、パラメーターに <codeph>year</codeph>（<codeph>65</codeph> = 1965）、<codeph>month</codeph>（<codeph>2</codeph> = 3 月）、<codeph>day</codeph>（<codeph>6</codeph>）、<codeph>hour</codeph>（<codeph>9</codeph>）、<codeph>minute</codeph>（<codeph>30</codeph>）、<codeph>second</codeph>（<codeph>15</codeph>）、<codeph>millisecond</codeph> -+（<codeph>0</codeph>）を渡します。</li>
   <li><codeph>myDate4</codeph> では、<codeph>Date()</codeph> を呼び出し、1970 年 1 月 1 日 0:00:00（世界時）よりも何ミリ秒<b>前</b>（値が負であるため）なのかを表す数値を指定します。</li>
 </ul>
<codeblock>

package {
    import flash.display.Sprite;
    
    public class DateExample extends Sprite{
        public function DateExample() {
            var myDate1:Date = new Date();
            trace(myDate1); // [NOW]

            var myDate2:Date = new Date(2000, 0, 1);
            trace(myDate2); // Sat Jan 1 00:00:00 GMT-0800 2000

            var myDate3:Date = new Date(65, 2, 6, 9, 30, 15, 0);
            trace(myDate3); // Sat Mar 6 09:30:15 GMT-0800 1965

            var myDate4:Date = new Date(-14159025000);
            trace(myDate4); // Sun Jul 20 19:56:15 GMT-0700 1969
        }        
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#/getTimer()"><linktext>flash.utils.getTimer()</linktext></link></related-links><apiConstructor id="Date:Date"><apiName>Date</apiName><shortdesc>
	 指定された日時を保持する新しい Date オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>new Date, constructor, date
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>yearOrTimevalue</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>他のパラメーターが指定されている場合、この数値は年（1965 年など）を表します。それ以外の場合は時間値を表します。数値が年を表す場合、0 ～ 99 の値は 1900 ～ 1999 を表します。それ以外の場合は年を 4 桁で指定する必要があります。数値が時間値を表す（他にパラメーターが指定されない）場合は、1970 年 1 月 1 日 0:00:00 GMT を基準とする経過時間をミリ秒単位で表す値になります。負の値は 1970 年 1 月 1 日 0:00:00 GMT よりも<i>前</i>の時刻を表し、正の値はそれより後の時刻を表します。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>month</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>date</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1</apiData><apiDesc>1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>hour</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0（0 時）～ 23（午後 11 時）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>minute</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>ミリ秒の 0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 指定された日時を保持する新しい Date オブジェクトを作成します。  
	 
	 <p><codeph>Date()</codeph> コンストラクターは、日付と、ミリ秒までの時刻を指定する、最大 7 つまでパラメーター（year、month、...、millisecond）を取ります。新しく作成された Date オブジェクトに含まれる日付は、渡された引数の数とデータ型により異なります。 </p>
	 <ul>
	   <li>引数が渡されなかった場合、Date オブジェクトには現在の日時が割り当てられます。</li>
	   <li>データ型 Number の引数が 1 つ渡された場合、Date オブジェクトには、1970 年 1 月 1 日 0:00:00（GMT）からその 1 つの引数で指定されたミリ秒数後の時間値が割り当てられます。</li>
	   <li>データ型 String の引数が 1 つ渡され、このストリングに有効な日付が含まれている場合は、Date オブジェクトにはその日付に基づく時間値が割り当てられます。</li>
	   <li>複数の引数が渡された場合、Date オブジェクトには、渡された引数値が表す日付の年、月、日、時、分、秒、ミリ秒に基づく時間値が割り当てられます。</li>
	 </ul>
	 <p>Date クラスのコンストラクターにストリングを渡す場合、日付にはさまざまな形式を使用できますが、少なくとも月、日、年が含まれている必要があります。例えば、<codeph>Feb 1 2005</codeph> は有効ですが、<codeph>Feb 2005</codeph> は無効です。次に、有効な形式をいくつか示します。</p>
	 <ul>
	   <li>曜日 月 日 時:分:秒 GMT 年（例えば "Tue Feb 1 00:00:00 GMT-0800 2005"。これは <codeph>toString()</codeph> に対応します）。</li>
	   <li>曜日 月 日 年 時:分:秒 午前（AM） / 午後（PM）（例えば "Tue Feb 1 2005 12:00:00 AM"。これは <codeph>toLocaleString()</codeph> に対応します）。</li>
	   <li>曜日 月 日 年（例えば "Tue Feb 1 2005"。これは <codeph>toDateString()</codeph> に対応します）。</li>
	   <li>月/日/年（例えば "02/01/2005"）</li>
	   <li>月/年（例えば "02/2005"）</li>
	 </ul>
	 </apiDesc></apiConstructorDetail><related-links><link href="#Date/getMonth()"><linktext>getMonth()</linktext></link><link href="#Date/getDate()"><linktext>getDate()</linktext></link><link href="#Date/getFullYear()"><linktext>getFullYear()</linktext></link></related-links></apiConstructor><apiOperation id="Date:UTC"><apiName>UTC</apiName><shortdesc>
	 1970 年 1 月 1 日 0 時（世界時）からパラメーターで指定された時刻までのミリ秒数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.utc, utc, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>1970 年 1 月 1 日から指定された日時までのミリ秒数です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>year</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>年を表す 4 桁の整数（2000 など）です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>month</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>date</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1</apiData><apiDesc>1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>hour</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0（0 時）～ 23（午後 11 時）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>minute</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 1970 年 1 月 1 日 0 時（世界時）からパラメーターで指定された時刻までのミリ秒数を返します。このメソッドでは世界時を使用するのに対し、<codeph>Date</codeph> コンストラクターではローカル時間を使用します。
	 <p>このメソッドは、UTC の日付を Date クラスのコンストラクターに渡す場合に便利です。Date クラスのコンストラクターはミリ秒オフセットを引数として受け取るので、Date.UTC() メソッドを使用して UTC の日付を対応のミリ秒オフセットに変換し、このオフセットを引数として Date クラスコンストラクターに送ることができます。</p>
	 
	 </apiDesc><example conref="examples\Date.UTC.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターにローカル時間の <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>UTC()</codeph> を <codeph>setTime()</codeph> メソッド内で呼び出し、これらのパラメーターを世界時にリセットします。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);
trace(someBirthday.toString());

someBirthday.setTime(Date.UTC(1974, 10, 30, 15, 20));
trace(someBirthday.toString());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getDate"><apiName>getDate</apiName><shortdesc>
	 Date オブジェクトで指定された日付（1 ～ 31 の整数）をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getdate, getdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す日付（1 ～ 31）です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトで指定された日付（1 ～ 31 の整数）をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc><example conref="examples\Date.getDate.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>getDate()</codeph> メソッドを呼び出し、日付を取得します。
<codeblock>
package {
    import flash.display.Sprite;

    public class DateExample extends Sprite {

        public function DateExample() {
            var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
            trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
            trace(someBirthday.getDate()); // 30
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getMonth()"><linktext>getMonth()</linktext></link><link href="#Date/getFullYear()"><linktext>getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getDay"><apiName>getDay</apiName><shortdesc>
	 この Date で指定された曜日（日曜日は 0、月曜日は 1 など）をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getday, getday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す曜日の数値（0 ～ 6）です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 この <codeph>Date</codeph> で指定された曜日（日曜日は 0、月曜日は 1 など）をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc><example conref="examples\Date.getDay.1.as"> 次の例では、新しい Array オブジェクト <codeph>weekDayLabels</codeph> を作成して、エレメント <codeph>[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> を設定し、次に、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成して、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に <codeph>getDay()</codeph> メソッドを 2 回呼び出します。1 回目は日付を 6 という数値で表示し、2 回目は <codeph>weekDayLabels</codeph> を使用して曜日を表示します。
<codeblock>

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                       // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDay());            // 6
trace(weekDayLabels[someBirthday.getDay()]); // Saturday
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getFullYear"><apiName>getFullYear</apiName><shortdesc>
	 Date オブジェクトの年（2000 などの 4 桁の数字）をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getfullyear, getfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す 4 桁の年です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの年（2000 などの 4 桁の数字）をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getFullYear.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>getFullYear()</codeph> メソッドを呼び出し、4 桁の年を取得します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getHours"><apiName>getHours</apiName><shortdesc>
	 Date オブジェクトの時（0 ～ 23 の整数）部分をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.gethours, gethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す時（0 ～ 23）です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの時（0 ～ 23 の整数）部分をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。 
	 
	 </apiDesc><example conref="examples\Date.getHours.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>getHours()</codeph> メソッドと <codeph>getMinutes()</codeph> メソッドを呼び出し、時と分を 24 時間形式で取得します。最後に、ストリング <codeph>localTime</codeph> を作成し、関数 <codeph>getUSClockTime()</codeph> の呼び出し結果を割り当てます。この関数は、<codeph>getHours()</codeph> と <codeph>getMinutes()</codeph> を再度呼び出します。これにより、時間 <codeph>03:05 PM</codeph> が表示されます。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs > 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMilliseconds"><apiName>getMilliseconds</apiName><shortdesc>
	 Date オブジェクトのミリ秒（0 ～ 999 の整数）部分をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getmilliseconds, getmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトのミリ秒部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのミリ秒（0 ～ 999 の整数）部分をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getMilliseconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getMilliseconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph>now</codeph> の作成時点のミリ秒数 を取得します。
<codeblock>

var now:Date = new Date();
trace(now.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMinutes"><apiName>getMinutes</apiName><shortdesc>
	 Date オブジェクトの分（0 ～ 59 の整数）部分をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getminutes, getminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの分部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの分（0 ～ 59 の整数）部分をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getMinutes.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getMinutes()</codeph> メソッドを呼び出し、Date オブジェクト <codeph>now</codeph> の作成時点の分を取得します。
<codeblock>

var now:Date = new Date();
trace(now);
trace(now.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMonth"><apiName>getMonth</apiName><shortdesc>
	 この Date の月（1 月は 0、2 月は 1 など）部分をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getmonth, getmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの月（0 ～ 11）部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 この <codeph>Date</codeph> の月（1 月は 0、2 月は 1 など）部分をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getMonth.1.as"> 次の例では、新しい Array オブジェクト <codeph>monthLabels</codeph> を作成して、<codeph>January</codeph> から <codeph>December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい Date オブジェクト <codeph>now</codeph> を作成します。次に、<codeph>getMonth()</codeph> メソッドを 2 回呼び出します。1 回目は、Date オブジェクト作成時点の <codeph>now</codeph> の月の数値を返し、2 回目は月の名前を返します。
<codeblock>

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getSeconds"><apiName>getSeconds</apiName><shortdesc>
	 Date オブジェクトの秒（0 ～ 59 の整数）部分をローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getseconds, getseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの秒（0 ～ 59 の整数）部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの秒（0 ～ 59 の整数）部分をローカル時間で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.getSeconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getSeconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph>now</codeph> の作成時点の秒を取得します。
<codeblock>

var now:Date = new Date();
trace(now.getSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTime"><apiName>getTime</apiName><shortdesc>
	 Date オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.gettime, gettime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す 1970 年 1 月 1 日からのミリ秒数です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。このメソッドは、複数の <codeph>Date</codeph> オブジェクトを比較する際に特定の時間を表すのに使用します。
	 
	 </apiDesc><example conref="examples\Date.getTime.1.as"> 次の例では、新しい Date オブジェクト <codeph>mlk</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1929</codeph>）、<codeph>month</codeph>（<codeph>0</codeph> = 1 月）、<codeph>day</codeph>（<codeph>15</codeph>）を指定します。次に、<codeph>getTime()</codeph> メソッドを呼び出し、1970 年 1 月 1 日午前 0 時からのミリ秒数を取得します。年が 1929 に設定されているため、ミリ秒は負の値で表されます。
<codeblock>

var mlk:Date = new Date(1929, 0, 15);
trace(mlk);           // Tue Jan 15 00:00:00 GMT-0800 1929
trace(mlk.getTime()); // -1292601600000
</codeblock></example><example conref="examples\Date.getTime.2.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーター指定なしで作成し、次に、以降で作成する DateMath クラスのメソッドを使用して、元の Date オブジェクト <codeph>now</codeph> の作成時刻に時間を追加します。
 <ul>
   <li><codeph>addSeconds()</codeph>：<codeph>now</codeph> に 30 秒を追加します。</li>
   <li><codeph>addMinutes()</codeph>：<codeph>now</codeph> に 30 分を追加します。</li>
   <li><codeph>addHours()</codeph>：Date オブジェクト <codeph>now</codeph> に 6 時間を追加します。</li>
   <li><codeph>addDays()</codeph>：Date オブジェクト <codeph>now</codeph> に 30 日を追加します。</li>
   <li><codeph>addWeeks()</codeph>：<codeph>now</codeph> に 4 週間を追加します。</li>
 </ul>

<codeblock>

var now:Date = new Date();
trace(now);
trace(DateMath.addSeconds(now, 30));
trace(DateMath.addMinutes(now, 30));
trace(DateMath.addHours(now, 6));
trace(DateMath.addDays(now, 30));
trace(DateMath.addWeeks(now, 4));

class DateMath {
    public static function addWeeks(date:Date, weeks:Number):Date {
        return addDays(date, weeks*7);
    }

    public static function addDays(date:Date, days:Number):Date {
        return addHours(date, days*24);
    }

    public static function addHours(date:Date, hrs:Number):Date {
        return addMinutes(date, hrs*60);
    }

    public static function addMinutes(date:Date, mins:Number):Date {
        return addSeconds(date, mins*60);
    }

    public static function addSeconds(date:Date, secs:Number):Date {
        var mSecs:Number = secs * 1000;
        var sum:Number = mSecs + date.getTime();
        return new Date(sum);
    }
}
</codeblock> <b>注意：</b>Date 演算を実行する場合には、getTime を使用することが重要です。getTime はうるう年に対応しているので、次の疑似コードのような if 文が不要です。
 <pre>
 function addMonths(num:Number):void {
     currentMonth = currentMonth + num;
     if(currentMonth > 12) {
         currentYear++;
         currentMonth = currentMonth - 12;
     }
 }
 </pre>
</example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTimezoneOffset"><apiName>getTimezoneOffset</apiName><shortdesc>
     世界時（UTC）とコンピューターのローカル時間の差（分単位）を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.gettimezoneoffset, gettimezoneoffset, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>この分をコンピューターのローカル時間に加算すると世界時と等しくなります。コンピューターの時刻が世界時より遅い時間に設定されている場合、戻り値は負の数になります。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     世界時（UTC）とコンピューターのローカル時間の差（分単位）を返します。 
	 
	 </apiDesc><example conref="examples\Date.getTimezoneOffset.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getTimezoneOffset()</codeph> メソッドを呼び出し、<codeph>now</codeph> が作成された時刻と世界時の差（分単位）を取得します。さらに、この結果を 60 で除算して、タイムゾーンのオフセットを時間単位に変換します。
<codeblock>

var date:Date = new Date();
trace(date.getTimezoneOffset() / 60);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCDate"><apiName>getUTCDate</apiName><shortdesc>
	 Date オブジェクトの日付（1 ～ 31 の整数）を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcdate, getutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す UTC の日付（1 ～ 31）です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの日付（1 ～ 31 の整数）を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCDate.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。<codeph>getUTCDate()</codeph> メソッドを呼び出し、日付を UTC で取得します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);             // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getDate()"><linktext>getDate()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCDay"><apiName>getUTCDay</apiName><shortdesc>
	 この Date の曜日（日曜日は 0、月曜日は 1 など）を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcday, getutcday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す UTC の曜日（0 ～ 6）です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 この <codeph>Date</codeph> の曜日（日曜日は 0、月曜日は 1 など）を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCDay.1.as"> 次の例では、新しい Array オブジェクト <codeph>weekDayLabels</codeph> を作成して、エレメント <codeph>[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> を設定し、次に、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成して、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に <codeph>getUTCDay()</codeph> メソッドを 2 回呼び出します。1 回目は日付を 6 という数値で表示し、2 回目は <codeph>weekDayLabels</codeph> を使用して曜日を UTC で表示します。
<codeblock>

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDay()); // 6
trace(weekDayLabels[someBirthday.getUTCDay()]); // Saturday
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getDay()"><linktext>getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCFullYear"><apiName>getUTCFullYear</apiName><shortdesc>
	 Date オブジェクトの 4 桁の年を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcfullyear, getutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す UTC の 4 桁の年です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの 4 桁の年を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCFullYear.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>getUTCFullYear()</codeph> メソッドを呼び出し、4 桁の年を UTC で取得します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                 // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getFullYear()"><linktext>getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCHours"><apiName>getUTCHours</apiName><shortdesc>
	 Date オブジェクトの時（0 ～ 23 の整数）を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutchours, getutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す UTC の時（0 ～ 23）です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの時（0 ～ 23 の整数）を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCHours.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>getHours()</codeph> メソッドと <codeph>getMinutes()</codeph> メソッドを呼び出し、時と分を 24 時間形式で取得します。最後に、ストリング <codeph>localTime</codeph> を作成し、関数 <codeph>getUSClockTime()</codeph> の呼び出し結果を割り当てます。この関数は、<codeph>getHours()</codeph> と <codeph>getMinutes()</codeph> を再度呼び出します。これにより、時間 <codeph>03:05 PM</codeph> が表示されます。最後に、String 変数 <codeph>utcTime</codeph> を <codeph>localTime</codeph> と同様の方法で作成します。この場合、結果は同じになります。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

var utcTime:String = getUSClockTime(someBirthday.getUTCHours(), someBirthday.getUTCMinutes());
trace(utcTime);      // 11:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs > 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getHours()"><linktext>getHours()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCMilliseconds"><apiName>getUTCMilliseconds</apiName><shortdesc>
	  Date オブジェクトのミリ秒（0 ～ 999 の整数）部分を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcmilliseconds, getutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの UTC のミリ秒部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  <codeph>Date</codeph> オブジェクトのミリ秒（0 ～ 999 の整数）部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCMilliseconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getUTCMilliseconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph>now</codeph> の作成時点のミリ秒 を UTC で取得します。
<codeblock>

var now:Date = new Date();
trace(now.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMinutes"><apiName>getUTCMinutes</apiName><shortdesc>
	 Date オブジェクトの分（0 ～ 59 の整数）部分を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcminutes, getutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの UTC の分部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの分（0 ～ 59 の整数）部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCMinutes.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getUTCMinutes()</codeph> メソッドを呼び出し、Date オブジェクト <codeph>now</codeph> の作成時点の分を UTC で取得します。
<codeblock>

var now:Date = new Date();
trace(now.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMonth"><apiName>getUTCMonth</apiName><shortdesc>
	 Date オブジェクトの月（0（1 月） ～ 11（12 月））部分を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcmonth, getutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの UTC の月部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの月（0（1 月） ～ 11（12 月））部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCMonth.1.as"> 次の例では。新しい Array オブジェクト <codeph>monthLabels</codeph> を作成して、<codeph>January</codeph> から <codeph>December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい Date オブジェクト <codeph>now</codeph> を作成します。次に、<codeph>getUTCMonth()</codeph> メソッドを 2 回呼び出します。1 回目は、Date オブジェクト作成時点の <codeph>now</codeph> の月の数値を、2 回目は月の名前を UTC で返します。
<codeblock>

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(now.getUTCMonth());
trace(monthLabels[now.getUTCMonth()]);
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getMonth()"><linktext>getMonth()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCSeconds"><apiName>getUTCSeconds</apiName><shortdesc>
	 Date オブジェクトの秒（0 ～ 59 の整数）部分を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.getutcseconds, getutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの UTC の秒部分です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの秒（0 ～ 59 の整数）部分を世界時（UTC）で返します。
	 
	 </apiDesc><example conref="examples\Date.getUTCSeconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getUTCSeconds()</codeph> メソッドを呼び出し、Date オブジェクト <codeph>now</codeph> の作成時点の秒を UTC で取得します。
<codeblock>

var now:Date = new Date();
trace(now.getUTCSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:parse"><apiName>parse</apiName><shortdesc>
	 日付を表すストリングを、1970 年 1 月 1 日（UTC）から経過したミリ秒数に相当する数値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>1970 年 1 月 1 日（UTC）から経過したミリ秒数を表す数値です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>date</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc><codeph>Date.toString()</codeph> の出力形式に準じた日付のストリング表現です。<codeph>Date.toString()</codeph> の出力の日付形式は、次のとおりです。 
     <pre>
     Day Mon DD HH:MM:SS TZD YYYY
     </pre>
     <p>次に実際の使用例を示します。 </p>
     <pre>
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
     <p>タイムゾーン指定（TZD）は、常に <codeph>GMT-HHMM</codeph> または <codeph>UTC-HHMM</codeph> の形式になります。これは、グリニッジ標準時（GMT）を基準にした時間と分のオフセットを示します。なお、グリニッジ標準時は現在は世界時（UTC）とも呼ばれています。年、月、曜日は、スラッシュ（<codeph>/</codeph>）またはスペースで区切ることができますが、ダッシュ（<codeph>-</codeph>）で区切ることはできません。他にも、次のような形式がサポートされます。月、曜日、年だけというように、これらの形式の一部分を含めることもできます。</p>
     <pre>
     MM/DD/YYYY HH:MM:SS TZD
     HH:MM:SS TZD Day Mon/DD/YYYY 
     Mon DD YYYY HH:MM:SS TZD
     Day Mon DD HH:MM:SS TZD YYYY
     Day DD Mon HH:MM:SS TZD YYYY
     Mon/DD/YYYY HH:MM:SS TZD
     YYYY/MM/DD HH:MM:SS TZD
     </pre>
     
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 日付を表すストリングを、1970 年 1 月 1 日（UTC）から経過したミリ秒数に相当する数値に変換します。
	 
     </apiDesc><example conref="examples\Date.parse.1.as"> 次の例では、1974 年 11 月 30 日の日付ストリングを <codeph>dateParsed</codeph> に割り当てます。次に、<codeph>Date.parse()</codeph> メソッドを呼び出し、この日付を 1970 年 1 月 1 日からのミリ秒数に変換します。
<codeblock>
var dateParsed:String = "Sat Nov 30 1974";

var milliseconds:Number = Date.parse(dateParsed);
trace(milliseconds); // 155030400000
</codeblock></example></apiOperationDetail><related-links><link href="#Date/toString()"><linktext>Date.toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setDate"><apiName>setDate</apiName><shortdesc>
	 月内の日付をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setdate, setdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>day</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>1 ～ 31 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 月内の日付をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setDate.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、<codeph>getDate()</codeph> メソッドを呼び出し、日付を取得します。次に、<codeph>setDate()</codeph> を呼び出して（<codeph>day</codeph> パラメーターに <codeph>20</codeph> を設定）から、<codeph>getDate()</codeph> を再度呼び出します。これにより、新しく設定された日付を取得します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDate()); // 30

someBirthday.setDate(20);
trace(someBirthday.getDate()); // 20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setFullYear"><apiName>setFullYear</apiName><shortdesc>
	 年をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setfullyear, setfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>year</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>年を示す 4 桁の数値です。2 桁の数値は 4 桁の年の省略形を表しません。例えば、99 は 1999 年ではなく、99 年です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>month</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（1 月）～ 11（12 月）の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>day</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>1 ～ 31 の数値です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 年をローカル時間で設定し、新しい時刻をミリ秒で返します。<codeph>month</codeph> パラメーターと <codeph>day</codeph> パラメーターを指定すると、両方はローカル時間に設定されます。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 <p>
	 このメソッドを呼び出しても <codeph>Date</codeph> オブジェクトの他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph>Date.getUTCDay()</codeph> と <codeph>Date.getDay()</codeph> は新しい値を返すことがあります。
	 </p>
	 
	 </apiDesc><example conref="examples\Date.setFullYear.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、メソッド <codeph>getFullYear()</codeph> を呼び出し、4 桁の年を取得します。次に、<codeph>setFullYear()</codeph> を呼び出して（<codeph>year</codeph> パラメーターに <codeph>2000</codeph> を設定）から、<codeph>getFullYear()</codeph> を再度呼び出します。これにより、新しく設定された年を取得します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974

someBirthday.setFullYear(2000);
trace(someBirthday.getFullYear()); // 2000
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getUTCDay()"><linktext>getUTCDay()</linktext></link><link href="#Date/getDay()"><linktext>getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setHours"><apiName>setHours</apiName><shortdesc>
	 時をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.sethours, sethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>hour</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（0 時）～ 23（午後 11 時）の整数です。
     </apiDesc></apiParam><apiParam><apiItemName>minute</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。 
     </apiDesc></apiParam><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。 
     </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 時をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setHours.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、メソッド <codeph>getHours()</codeph> と <codeph>getMinutes()</codeph> を呼び出し、時と分を取得します。次に、<codeph>setHours()</codeph> を呼び出して（<codeph>hour</codeph> パラメーターに <codeph>12</codeph> を設定）から、<codeph>getHours()</codeph> と <codeph>getMinutes()</codeph> を再度呼び出します。これにより、新しく設定された時と分を取得します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:20

someBirthday.setHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMilliseconds"><apiName>setMilliseconds</apiName><shortdesc>
	 ミリ秒をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setmilliseconds, setmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ミリ秒をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setMilliseconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getMilliseconds()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点のミリ秒を取得します。次に、別の Date オブジェクト <codeph>before</codeph> を、<codeph>setMilliseconds()</codeph> を追加で呼び出して（<codeph>millisecond</codeph> パラメーターに <codeph>4</codeph> を設定）作成します。次に、<codeph>getMilliseconds()</codeph> を再度呼び出して、新しく設定されたミリ秒を取得します。
<codeblock>

var now:Date = new Date();
trace(now);
trace(now.getMilliseconds());

var before:Date = new Date(now.setMilliseconds(4));
trace(before);
trace(before.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMinutes"><apiName>setMinutes</apiName><shortdesc>
	 分をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setminutes, setminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>minute</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。
     </apiDesc></apiParam><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。
     </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 分をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setMinutes.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getMinutes()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の分を取得します。次に、別の Date オブジェクト <codeph>before</codeph> を、<codeph>setMinutes()</codeph> を追加で呼び出して（<codeph>minute</codeph> パラメーターに <codeph>0</codeph> を設定）作成します。次に、<codeph>getMinutes()</codeph> を再度呼び出して、新しく設定された分を取得します。
<codeblock>

var now:Date = new Date();
trace(now);
trace(now.getMinutes());

var before:Date = new Date(now.setMinutes(0));
trace(before);
trace(before.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMonth"><apiName>setMonth</apiName><shortdesc>
	 月と、オプションで日付をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setmonth, setmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>month</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>day</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 月と、オプションで日付をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setMonth.1.as"> 次の例では、新しい Array オブジェクト <codeph>monthLabels</codeph> を作成して、<codeph>January</codeph> から <codeph>December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい Month オブジェクト <codeph>now</codeph> を作成します。次に、<codeph>getMonth()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の月を取得します。次に、<codeph>setMonth()</codeph> を呼び出して（<codeph>month</codeph> パラメーターに <codeph>0</codeph> を設定）から、<codeph>getMonth()</codeph> を再度呼び出します。これにより、新しく設定された月を取得します。
<codeblock>

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);

now.setMonth(0);
trace(now.getMonth());             // 0
trace(monthLabels[now.getMonth()]); // January
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setSeconds"><apiName>setSeconds</apiName><shortdesc>
	 秒をローカル時間で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setseconds, setseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。
     </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 秒をローカル時間で設定し、新しい時刻をミリ秒で返します。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc><example conref="examples\Date.setSeconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getseconds()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の秒を取得します。次に、<codeph>setSeconds()</codeph> を呼び出して（<codeph>second</codeph> パラメーターに <codeph>0</codeph> を設定）から、<codeph>getSeconds()</codeph> を再度呼び出します。これにより、新しく設定された秒を取得します。
<codeblock>

var now:Date = new Date();
trace(now.getSeconds());

now.setSeconds(0);
trace(now.getSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setTime"><apiName>setTime</apiName><shortdesc>
	 日付を 1970 年 1 月 1 日 0 時からのミリ秒数で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.settime, settime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>整数値です。0 は世界時（UTC）の 1 月 1 日 0 時です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 日付を 1970 年 1 月 1 日 0 時からのミリ秒数で設定し、新しい時刻をミリ秒で返します。 
	 
	 </apiDesc><example conref="examples\Date.setTime.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に <codeph>setTime()</codeph> メソッドを呼び出します。パラメーター <codeph>millisecond</codeph> には <codeph>-1292601600000</codeph> を設定します。これにより時刻は <codeph>Tue Jan 15 00:00:00 GMT-0800 1929</codeph> に設定されます。
<codeblock>

var now:Date = new Date();
trace(now);

now.setTime(-1292601600000);
trace(now); // Tue Jan 15 00:00:00 GMT-0800 1929
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCDate"><apiName>setUTCDate</apiName><shortdesc>
	 月内の日付を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutcdate, setutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>day</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>1 ～ 31 の整数値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 月内の日付を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。このメソッドを呼び出しても、<codeph>Date</codeph> オブジェクトの他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph>Date.getUTCDay()</codeph> メソッドと <codeph>Date.getDay()</codeph> メソッドは新しい値を返すことがあります。
	 
	 </apiDesc><example conref="examples\Date.setUTCDate.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。<codeph>getUTCDate()</codeph> メソッドを呼び出すと、月内の日付が正しく返されます。次に、<codeph>setUTCDate()</codeph> を呼び出します。パラメーター <codeph>day</codeph> には <codeph>1</codeph> を設定します。<codeph>trace()</codeph> ステートメントで日付が正しく設定されたことを確認します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30

someBirthday.setUTCDate(1);
trace(someBirthday); // Fri Nov 1 01:20:00 GMT-0800 1974
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getUTCDay()"><linktext>getUTCDay()</linktext></link><link href="#Date/getDay()"><linktext>getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCFullYear"><apiName>setUTCFullYear</apiName><shortdesc>
	 年を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutcfullyear, setutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>整数です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>year</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>4 桁の年（2000 など）を表す整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>month</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（1 月）～ 11（12 月）の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>day</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 年を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。 
	 <p>
	 このメソッドでは、オプションで月と日を設定することもできます。このメソッドを呼び出しても他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph>Date.getUTCDay()</codeph> と <codeph>Date.getDay()</codeph> メソッドは新しい値を返すことがあります。 
	 </p>
	 
 	 </apiDesc><example conref="examples\Date.setUTCFullYear.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。メソッド <codeph>getUTCFullYear()</codeph> を呼び出すと、4 桁の年が正しく返されます。次に、<codeph>setUTCFullYear()</codeph> を呼び出します。パラメーター <codeph>year</codeph> には <codeph>1975</codeph> を設定します。<codeph>trace()</codeph> ステートメントで年が正しく設定されたことを確認します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974

someBirthday.setUTCFullYear(1975);
trace(someBirthday); // Thu Nov 30 01:20:00 GMT-0800 1975
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getUTCDay()"><linktext>getUTCDay()</linktext></link><link href="#Date/getDay()"><linktext>getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCHours"><apiName>setUTCHours</apiName><shortdesc>
	 時を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutchours, setutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>hour</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（0 時）～ 23（午後 11 時）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>minute</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 時を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。オプションで、分、秒、およびミリ秒を指定することができます。
	 
	 </apiDesc><example conref="examples\Date.setUTCHours.1.as"> 次の例では、新しい Date オブジェクト <codeph>someBirthday</codeph> を作成し、パラメーターに <codeph>year</codeph>（<codeph>1974</codeph>）、<codeph>month</codeph>（<codeph>10</codeph> = 11 月）、<codeph>day</codeph>（<codeph>30</codeph>）、<codeph>hour</codeph>（<codeph>1</codeph>）、<codeph>minute</codeph>（<codeph>20</codeph>）を指定します。次に、メソッド <codeph>getHours()</codeph>、<codeph>getMinutes()</codeph>、<codeph>getUTCHours()</codeph>、<codeph>getUTCMinutes()</codeph> を呼び出し、時と分を取得します。<codeph>setUTCHours()</codeph> を呼び出します。パラメーター <codeph>hour</codeph> には <codeph>12</codeph> を設定します。次に、メソッド <codeph>getHours()</codeph>、<codeph>getMinutes()</codeph>、<codeph>getUTCHours()</codeph>、<codeph>getUTCMinutes()</codeph> を再度呼び出し、更新された時を正しく表示します。
<codeblock>

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 15:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 23:20

someBirthday.setUTCHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 4:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMilliseconds"><apiName>setUTCMilliseconds</apiName><shortdesc>
	 ミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutcmilliseconds, setutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。
	 
	 </apiDesc><example conref="examples\Date.setUTCMilliseconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getUTCMilliseconds()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の UTCMilliseconds を取得します。次に、別の Date オブジェクト <codeph>before</codeph> を、<codeph>setUTCMilliseconds()</codeph> を呼び出して（<codeph>millisecond</codeph> パラメーターに <codeph>4</codeph> を設定）作成します。次に、<codeph>getUTCMilliseconds()</codeph> を再度呼び出して、新しく設定されたミリ秒を取得します。
<codeblock>


var now:Date = new Date();
trace(now);
trace(now.getUTCMilliseconds());

var before:Date = new Date(now.setUTCMilliseconds(4));
trace(before);
trace(before.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMinutes"><apiName>setUTCMinutes</apiName><shortdesc>
	 分を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutcminutes, setutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>minute</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 分を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。オプションで、秒とミリ秒を指定することができます。
	 
	 </apiDesc><example conref="examples\Date.setUTCMinutes.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getUTCMinutes()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の UTCMinutes を取得します。次に、別の Date オブジェクト <codeph>before</codeph> を、<codeph>setUTCMinutes()</codeph> を呼び出して（<codeph>minute</codeph> パラメーターに <codeph>0</codeph> を設定）作成します。次に、<codeph>getUTCMinutes()</codeph> を再度呼び出して、新しく設定された分を取得します。
<codeblock>

var now:Date = new Date();
trace(now);
trace(now.getUTCMinutes());

var before:Date = new Date(now.setUTCMinutes(0));
trace(before);
trace(before.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMonth"><apiName>setUTCMonth</apiName><shortdesc>
	 月、および日（オプション）を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutcmonth, setutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>month</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0（1 月）～ 11（12 月）の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>day</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>1 ～ 31 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 月、および日（オプション）を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。このメソッドを呼び出しても他のフィールドは変更されませんが、このメソッドを呼び出した結果として曜日が変わった場合には、<codeph>Date.getUTCDay()</codeph> メソッドと <codeph>Date.getDay()</codeph> メソッドは新しい値を返すことがあります。
	 
	 </apiDesc><example conref="examples\Date.setUTCMonth.1.as"> 次の例では、新しい Array オブジェクト <codeph>UTCMonthLabels</codeph> を作成して、<codeph>January</codeph> から <codeph>December</codeph> までのエレメントを設定し、次に、パラメーターを指定せずに新しい UTCMonth オブジェクト <codeph>now</codeph> を作成します。次に、<codeph>getUTCMonth()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の UTCMonth を取得します。次に、<codeph>setUTCMonth()</codeph> を呼び出して（<codeph>month</codeph> パラメーターに <codeph>0</codeph> を設定）から、<codeph>getUTCMonth()</codeph> を再度呼び出します。これにより、新しく設定された月を取得します。
<codeblock>

var UTCMonthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getUTCMonth());
trace(UTCMonthLabels[now.getUTCMonth()]);

now.setUTCUTCMonth(0);
trace(now.getUTCMonth());              // 0
trace(UTCMonthLabels[now.getUTCMonth()]); // January
</codeblock></example></apiOperationDetail><related-links><link href="#Date/getDay()"><linktext>getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCSeconds"><apiName>setUTCSeconds</apiName><shortdesc>
	 秒、およびオプションでミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.setutcseconds, setutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ミリ秒で表される新しい時刻です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 59 の整数です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>millisecond</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>0 ～ 999 の整数です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 秒、およびオプションでミリ秒を世界時（UTC）で設定し、新しい時刻をミリ秒で返します。
	 
	 </apiDesc><example conref="examples\Date.setUTCSeconds.1.as"> 次の例では、新しい Date オブジェクト <codeph>now</codeph> をパラメーターの指定なしで作成します。次に、<codeph>getUTCSeconds()</codeph> メソッドを呼び出し、<codeph>now</codeph> 作成時点の秒を取得します。次に、<codeph>setUTCSeconds()</codeph> を呼び出して（<codeph>second</codeph> パラメーターに <codeph>0</codeph> を設定）から、<codeph>getUTCSeconds()</codeph> を再度呼び出します。これにより、新しく設定された秒を取得します。
<codeblock>

var now:Date = new Date();
trace(now.getUTCSeconds());

now.setUTCSeconds(0);
trace(now.getUTCSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toDateString"><apiName>toDateString</apiName><shortdesc>
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>曜日と日付のみのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。次のメソッドと対照を成します。
	 <ul>
	   <li><codeph>Date.toTimeString()</codeph> は時刻とタイムゾーンのみを返します。</li>
	   <li><codeph>Date.toString()</codeph> は曜日と日付のみでなく、時刻とタイムゾーンも返します。</li>
	 </ul>
	 
	 </apiDesc><example conref="examples\Date.toDateString.1.as"> 次の例では、パラメーター設定なしで新しい Date オブジェクト <codeph>now</codeph> 作成し、<codeph>trace()</codeph> ステートメントの中で、次のメソッドを呼び出します。
 <ul>
   <li><codeph>toString</codeph>：<codeph>now</codeph> のすべてのパラメーター（<codeph>now</codeph> が作成されたときの）を表示します。</li>
   <li><codeph>toDateString()</codeph>：<codeph>day</codeph>、<codeph>month</codeph>、<codeph>year</codeph> パラメーター（<codeph>now</codeph> が作成されたときの）を表示します。</li>
 </ul>
<codeblock>

var now:Date = new Date();
trace(now);
trace(now.toDateString());
</codeblock></example></apiOperationDetail><related-links><link href="#Date/toString()"><linktext>toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleDateString"><apiName>toLocaleDateString</apiName><shortdesc>
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>曜日と日付のみの <codeph>String</codeph> 表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 曜日と日付のみのストリング表現を返します。時刻またはタイムゾーンは含まれません。このメソッドは、<codeph>Date.toDateString</codeph> と同じ値を返します。次のメソッドと対照を成します。
	 <ul>
	   <li><codeph>Date.toTimeString()</codeph> は時刻とタイムゾーンのみを返します。</li>
	   <li><codeph>Date.toString()</codeph> は曜日と日付のみでなく、時刻とタイムゾーンも返します。</li>
	 </ul>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Date/toDateString()"><linktext>toDateString()</linktext></link><link href="#Date/toTimeString()"><linktext>toTimeString()</linktext></link><link href="#Date/toString()"><linktext>toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleString"><apiName>toLocaleString</apiName><shortdesc>
	 曜日、日付、時刻のストリング表現を、指定されたローカル時間で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトのストリング表現をローカルタイムゾーンで返します。
	 
	  
	  </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 曜日、日付、時刻のストリング表現を、指定されたローカル時間で返します。同じ情報（およびタイムゾーン）をストリングの最後に年を付けて返す <codeph>Date.toString()</codeph> メソッドと対照を成します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toLocaleTimeString"><apiName>toLocaleTimeString</apiName><shortdesc>
	 時刻のみのストリング表現を返します。曜日、日付、年、またはタイムゾーンは含まれません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>時刻とタイムゾーンのみのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 時刻のみのストリング表現を返します。曜日、日付、年、またはタイムゾーンは含まれません。時刻とタイムゾーンを返す <codeph>Date.toTimeString()</codeph> メソッドと対照を成します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Date/toTimeString()"><linktext>toTimeString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toString"><apiName>toString</apiName><shortdesc>
	 曜日、日付、時刻、およびタイムゾーンのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.tostring, tostring, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 曜日、日付、時刻、およびタイムゾーンのストリング表現を返します。出力の日付形式は、次のとおりです。 
     <pre>
     Day Mon Date HH:MM:SS TZD YYYY
     </pre>
     <p>次に実際の使用例を示します。</p>
     <pre>
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
	 
	 </apiDesc><example conref="examples\Date.toString.1.as"> 次の例では、パラメーターを指定せずに Date オブジェクト <codeph>now</codeph> を作成し、次に、<codeph>toString</codeph> を <codeph>trace()</codeph> ステートメント内で呼び出します。これにより <codeph>now</codeph> のすべてのパラメーター（<codeph>now</codeph> を作成したときの）を表示します。
<codeblock>


var now:Date = new Date();
trace(now);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toTimeString"><apiName>toTimeString</apiName><shortdesc>
	 時刻とタイムゾーンのみのストリング表現を返します。曜日と日付は含まれません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>時刻とタイムゾーンのみのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 時刻とタイムゾーンのみのストリング表現を返します。曜日と日付は含まれません。曜日と日付のみを返す <codeph>Date.toDateString()</codeph> メソッドと対照を成します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Date/toDateString()"><linktext>toDateString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toUTCString"><apiName>toUTCString</apiName><shortdesc>
	 曜日、日付、および時刻のストリング表現を世界時（UTC）で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトの UTC のストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 曜日、日付、および時刻のストリング表現を世界時（UTC）で返します。例えば、2005 年 2 月 1 日を <codeph>Tue Feb 1 00:00:00 2005 UTC</codeph> として返します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Date/toString()"><linktext>toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	 Date オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>date.valueof, valueof, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>Date</codeph> オブジェクトが表す 1970 年 1 月 1 日からのミリ秒数です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数を返します。
	 
	 </apiDesc><example conref="examples\Date.valueOf.1.as"> 次の例では、パラメーターを指定せずに新しい Date オブジェクト <codeph>now</codeph> を作成し、次に、<codeph>getTime()</codeph> メソッドを呼び出して、1970 年 1 月 1 日 0 時 から <codeph>now</codeph> が作成された時刻までのミリ秒数を取得します。次に、<codeph>valueOf()</codeph> を呼び出して同じ値を取得します。
<codeblock>


var now:Date = new Date();
trace(now.getTime());
trace(now.valueOf());
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="Date:AS3:date:get"><apiName>date</apiName><shortdesc>
	 Date オブジェクトで指定されたローカル時間による日付（1 ～ 31 の整数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトで指定されたローカル時間による日付（1 ～ 31 の整数）です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc></apiValueDetail><related-links><link href="#Date/getDate()"><linktext>getDate()</linktext></link><link href="#Date/setDate()"><linktext>setDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:dateUTC:get"><apiName>dateUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）による日付（1 ～ 31 の整数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）による日付（1 ～ 31 の整数）です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCDate()"><linktext>getUTCDate()</linktext></link><link href="#Date/setUTCDate()"><linktext>setUTCDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:day:get"><apiName>day</apiName><shortdesc>
	 この Date で指定されたローカル時間による曜日（日曜日は 0、月曜日は 1 など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 この <codeph>Date</codeph> で指定されたローカル時間による曜日（日曜日は 0、月曜日は 1 など）です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
 	 </apiDesc></apiValueDetail><related-links><link href="#Date/getDay()"><linktext>getDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:dayUTC:get"><apiName>dayUTC</apiName><shortdesc>
	 この Date の世界時（UTC）による曜日（日曜日は 0、月曜日は 1 など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 この <codeph>Date</codeph> の世界時（UTC）による曜日（日曜日は 0、月曜日は 1 など）です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCDay()"><linktext>getUTCDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYear:get"><apiName>fullYear</apiName><shortdesc>
	 Date オブジェクトのローカル時間による年（2000 などの 4 桁の数字）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのローカル時間による年（2000 などの 4 桁の数字）です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getFullYear()"><linktext>getFullYear()</linktext></link><link href="#Date/setFullYear()"><linktext>setFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYearUTC:get"><apiName>fullYearUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）による 4 桁の年です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）による 4 桁の年です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCFullYear()"><linktext>getUTCFullYear()</linktext></link><link href="#Date/setUTCFullYear()"><linktext>setUTCFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hours:get"><apiName>hours</apiName><shortdesc>
	 Date オブジェクトのローカル時間による時（0 ～ 23 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのローカル時間による時（0 ～ 23 の整数）部分です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getHours()"><linktext>getHours()</linktext></link><link href="#Date/setHours()"><linktext>setHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hoursUTC:get"><apiName>hoursUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）による時（0 ～ 23 の整数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）による時（0 ～ 23 の整数）です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCHours()"><linktext>getUTCHours()</linktext></link><link href="#Date/setUTCHours()"><linktext>setUTCHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:milliseconds:get"><apiName>milliseconds</apiName><shortdesc>
	 Date オブジェクトのローカル時間によるミリ秒（0 ～ 999 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのローカル時間によるミリ秒（0 ～ 999 の整数）部分です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getMilliseconds()"><linktext>getMilliseconds()</linktext></link><link href="#Date/setMilliseconds()"><linktext>setMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:millisecondsUTC:get"><apiName>millisecondsUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）によるミリ秒（0 ～ 999 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）によるミリ秒（0 ～ 999 の整数）部分です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCMilliseconds()"><linktext>getUTCMilliseconds()</linktext></link><link href="#Date/setUTCMilliseconds()"><linktext>setUTCMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutes:get"><apiName>minutes</apiName><shortdesc>
	 Date オブジェクトのローカル時間による分（0 ～ 59 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのローカル時間による分（0 ～ 59 の整数）部分です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getMinutes()"><linktext>getMinutes()</linktext></link><link href="#Date/setMinutes()"><linktext>setMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutesUTC:get"><apiName>minutesUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）による分（0 ～ 59 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）による分（0 ～ 59 の整数）部分です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCMinutes()"><linktext>getUTCMinutes()</linktext></link><link href="#Date/setUTCMinutes()"><linktext>setUTCMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:month:get"><apiName>month</apiName><shortdesc>
	 Date オブジェクトのローカル時間による月（1 月は 0、2 月は 1 など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのローカル時間による月（1 月は 0、2 月は 1 など）です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getMonth()"><linktext>getMonth()</linktext></link><link href="#Date/setMonth()"><linktext>setMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:monthUTC:get"><apiName>monthUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）による月（0（1 月）～ 11（12 月））部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）による月（0（1 月）～ 11（12 月））部分です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCMonth()"><linktext>getUTCMonth()</linktext></link><link href="#Date/setUTCMonth()"><linktext>setUTCMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:seconds:get"><apiName>seconds</apiName><shortdesc>
	 Date オブジェクトのローカル時間による秒（0 ～ 59 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトのローカル時間による秒（0 ～ 59 の整数）部分です。ローカル時間は、Flash Player を実行しているオペレーティングシステムによって決まります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getSeconds()"><linktext>getSeconds()</linktext></link><link href="#Date/setSeconds()"><linktext>setSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:secondsUTC:get"><apiName>secondsUTC</apiName><shortdesc>
	 Date オブジェクトの世界時（UTC）による秒（0 ～ 59 の整数）部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの世界時（UTC）による秒（0 ～ 59 の整数）部分です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getUTCSeconds()"><linktext>getUTCSeconds()</linktext></link><link href="#Date/setUTCSeconds()"><linktext>setUTCSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:time:get"><apiName>time</apiName><shortdesc>
	 Date オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Date</codeph> オブジェクトの 1970 年 1 月 1 日 0 時（世界時）からのミリ秒数です。このメソッドは、複数の <codeph> Date</codeph> オブジェクトを比較する際に特定の時間を表すのに使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Date/getTime()"><linktext>getTime()</linktext></link><link href="#Date/setTime()"><linktext>setTime()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:timezoneOffset:get"><apiName>timezoneOffset</apiName><shortdesc>
     世界時（UTC）とコンピューターのローカル時間の差（分単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="AS3"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     世界時（UTC）とコンピューターのローカル時間の差（分単位）です。つまり、この分の値をコンピューターのローカル時間に加算すると世界時と等しくなります。コンピューターの時刻が世界時より遅い時間に設定されている場合、戻り値は負の数になります。
     </apiDesc></apiValueDetail><related-links><link href="#Date/getTimezoneOffset()"><linktext>getTimezoneOffset()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="globalClassifier:URIError"><apiName>URIError</apiName><shortdesc>
 URIError 例外は、グローバルな URI 処理関数のいずれかが定義に合わない方法で使用された場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, URIError
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 URIError 例外は、グローバルな URI 処理関数のいずれかが定義に合わない方法で使用された場合にスローされます。この例外は、<codeph>Socket.connect()</codeph> メソッドなど、有効な URI を期待する関数に対して無効な URI が指定された場合にスローされます。
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#Socket/connect()"><linktext>flash.net.Socket.connect()</linktext></link></related-links><apiConstructor id="URIError:URIError"><apiName>URIError</apiName><shortdesc>
	 新しい URIError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>URIError オブジェクトに関連付けられたメッセージです。  
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい URIError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:Object"><apiName>Object</apiName><shortdesc>
 Object クラスは、ActionScript ランタイムクラス階層のルートにあります。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>object, object object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/></apiClassifierDef><apiDesc>
 Object クラスは、<ph platform="actionscript">ActionScript</ph> <ph platform="javascript">ランタイム</ph>クラス階層のルートにあります。オブジェクトは、<codeph>new</codeph> 演算子シンタックスを使用したコンストラクターで作成され、プロパティを動的に割り当てることができます。<ph platform="actionscript">また、次のようにオブジェクトリテラルを割り当てて作成することもできます。</ph>
 
 <codeblock platform="actionscript">var obj:Object = {a:"foo", b:"bar"}</codeblock>
 
 <p platform="actionscript">明示的な基本クラスを宣言していないクラスはすべて、ビルトインの Object クラスを拡張します。</p>
 
 <p platform="javascript">Adobe Integrated Runtime のすべてのランタイムクラスは、runtime.Object クラスを拡張します。</p>
 
 <p platform="actionscript">Object クラスを使用して、<i>結合配列</i>を作成できます。基本的に、結合配列は Object クラスのインスタンスであり、キー値ペアはプロパティとその値という形式で表現されます。Object データタイプを使用して結合配列を宣言する別の理由は、そうすると、オブジェクトリテラルを使用して結合配列にデータを設定できるからです（ただし、宣言時のみ）。次の例では、オブジェクトリテラルを使用して結合配列を作成し、ドット演算子と配列アクセス演算子を両方とも使用して項目にアクセスします。その後、新しいプロパティを作成することで新しいキー値ペアを追加します。</p>
 
 <codeblock platform="actionscript">
 var myAssocArray:Object = {fname:"John", lname:"Public"};
 trace(myAssocArray.fname);     // John
 trace(myAssocArray["lname"]);  // Public
 myAssocArray.initial = "Q";
 trace(myAssocArray.initial);   // Q</codeblock> 
 
 <p platform="actionscript">ActionScript 3.0 には、クラス継承とプロトタイプ継承という 2 つの種類の継承があります。</p>
 <ul platform="actionscript">
 <li>クラス継承 - 主要な継承メカニズムであり、固定プロパティの継承をサポートします。固定プロパティは、クラス定義の一部として宣言される変数、定数、またはメソッドです。クラス宣言はすべて、クラスに関する情報が保存されている特別なクラスオブジェクトで表されます。 </li>
 <li>プロトタイプ継承 - 旧バージョンの ActionScript ではこれが唯一の継承メカニズムでしたが、ActionScript 3.0 では代替の継承形式として機能します。各クラスには関連付けられたプロトタイプオブジェクトがあり、プロトタイプオブジェクトのプロパティは、そのクラスのすべてのインスタンス間で共有されます。クラスインスタンスを作成した場合、インスタンスはそのクラスのプロトタイプオブジェクトへの参照を持っています。この参照は、インスタンスと、関連するクラスのプロトタイプオブジェクトとの間のリンクとして機能します。実行時に、クラスインスタンスにプロパティが見つからない場合は、委譲先であるクラスのプロトタイプオブジェクトにそのプロパティがないかどうかがチェックされます。プロトタイプオブジェクトにもない場合は、そのプロパティが見つかるまで、プロトタイプオブジェクトの委譲先でチェックを行うという処理が階層の上位に向かって連続的に継続されます。 </li>
 </ul>
 
 <p platform="actionscript">次の例に示すように、クラス継承とプロトタイプ継承は共存可能です。</p>
 
 <codeblock platform="actionscript">
 class A {
     var x = 1
     prototype.px = 2
 }
 dynamic class B extends A {
     var y = 3
     prototype.py = 4
 }
  
 var b = new B()
 b.x // 1 via class inheritance
 b.px // 2 via prototype inheritance from A.prototype
 b.y // 3
 b.py // 4 via prototype inheritance from B.prototype
  
 B.prototype.px = 5
 b.px // now 5 because B.prototype hides A.prototype
  
 b.px = 6
 b.px // now 6 because b hides B.prototype</codeblock>
 
 <p platform="actionscript">クラスの代わりに関数を使用すると、カスタムプロトタイプ継承ツリーを作成できます。クラスを使用すると、プロトタイプ継承ツリーはクラス継承ツリーをミラーします。ただし、プロトタイプオブジェクトは動的であるため、プロトタイプベースのプロパティを実行時に追加および削除できます。</p>
 
 </apiDesc><example conref="examples\ObjectExample.as"> 次の例は <codeph>ObjectExample</codeph> クラスと <codeph>Circle</codeph> クラスを使用して Object クラスの動的な特徴を紹介し、値オブジェクトを Shape オブジェクトに変換してステージ上の指定した x および y 座標に追加する方法を示しています。
 
 <p>この例では、値オブジェクト <codeph>firstInitObj</codeph> と <codeph>secondInitObj</codeph> を作成します。カスタムクラス <codeph>Circle</codeph> は、値オブジェクトを受け入れ、対応する内部プロパティを値オブジェクトに定義されたプロパティに設定しながらループします。</p>
<codeblock>
package {
    import flash.display.Sprite;

    public class ObjectExample extends Sprite {
        public function ObjectExample() {
            var firstInitObj:Object = new Object();
            firstInitObj.bgColor = 0xFF0000;
            firstInitObj.radius = 25;
            firstInitObj.xCenter = 25;
            firstInitObj.yCenter = 25;
                        
            var firstCircle:Circle = new Circle(firstInitObj);
            addChild(firstCircle);
            firstCircle.x = 50;
            firstCircle.y = 50;

            var secondInitObj:Object = {bgColor:0xCCCCCC, radius:50, xCenter:50, yCenter:50};

            var secondCircle:Circle = new Circle(secondInitObj);            
            addChild(secondCircle);
            secondCircle.x = 100;
            secondCircle.y = 100;
        }
        
    }
}

import flash.display.Shape;
    
class Circle extends Shape {
    public var bgColor:Number = 0xFFFFFF;
    public var radius:Number = 0;
    public var xCenter:Number = 0;
    public var yCenter:Number = 0;
        
    public function Circle(initObj:Object) {
        for(var i:String in initObj) {
            this[i] = initObj[i];
        }
        draw();
    }
        
    public function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawCircle(xCenter, yCenter, radius);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#Object/prototype"><linktext>prototype</linktext></link></related-links><apiConstructor id="Object:Object"><apiName>Object</apiName><shortdesc>
	 Object オブジェクトを作成し、そのオブジェクトのコンストラクターメソッドへの参照をオブジェクトの constructor プロパティに格納します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Object オブジェクトを作成し、そのオブジェクトのコンストラクターメソッドへの参照をオブジェクトの <codeph>constructor</codeph> プロパティに格納します。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Object:AS3:hasOwnProperty"><apiName>hasOwnProperty</apiName><shortdesc>
	 オブジェクトに指定されたプロパティが定義されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><category>Method
	 </category></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ターゲットオブジェクトに <codeph>name</codeph> パラメーターで指定されたプロパティがある場合、この値は <codeph>true</codeph> になり、それ以外の場合は <codeph>false</codeph> になります。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>オブジェクトのプロパティです。	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 オブジェクトに指定されたプロパティが定義されているかどうかを示します。<codeph>true</codeph> が返されるのは、ターゲットオブジェクトに <codeph>name</codeph> パラメーターで指定されたストリングに一致するプロパティがある場合です。それ以外の場合は <codeph>false</codeph> が返されます。次のタイプのプロパティについては、オブジェクトがクラスオブジェクトではなく、クラスのインスタンスである場合に <codeph>true</codeph> が返されます。
	 <ul>
	   <li>固定インスタンスプロパティ — オブジェクトのクラスで定義された、静的でない変数、定数、またはメソッド</li>
	   <li>継承された固定インスタンスプロパティ — オブジェクトのクラスが継承した変数、定数、またはメソッド</li>
	   <li>動的プロパティ — オブジェクトをインスタンス化した後に（クラス定義外で）オブジェクトに追加されたプロパティ 動的プロパティを追加するには、<codeph>dynamic</codeph> キーワードを使用して、オブジェクトを定義しているクラスを宣言する必要があります。</li>
	 </ul>
	 <p>次のタイプのプロパティについては、オブジェクトがクラスのインスタンスである場合に <codeph>false</codeph> が返されます。</p>
	 <ul>
	   <li>静的プロパティ — オブジェクトを定義しているクラスまたはその任意のスーパークラスの静的キーワードを使用して定義された変数、定数、またはメソッド</li>
	   <li>プロトタイププロパティ — オブジェクトのプロトタイプチェーンの一部であるプロトタイプに定義されたプロパティ ActionScript 3.0 では、プロトタイプチェーンはクラス継承には使用されませんが、継承の代替形式として存在しています。例えば、Array クラスのインスタンスは、<codeph>valueOf()</codeph> メソッドにアクセスできます。それは、そのインスタンスが Array クラスのプロトタイプチェーンの一部である <codeph>Object.prototype</codeph> に存在するためです。Array のインスタンスに対して <codeph>valueOf()</codeph> を使用できますが、そのインスタンスに対する <codeph>hasOwnProperty("valueOf")</codeph> の戻り値は <codeph>false</codeph> になります。</li>
	 </ul>
	 
	 <p platform="actionscript">また、ActionScript 3.0 には、クラス定義の直接的な表現であるクラスオブジェクトがあります。<codeph>hasOwnProperty()</codeph> メソッドをクラスオブジェクトに対して呼び出すと、プロパティがそのクラスオブジェクトに定義された静的プロパティである場合にのみ、<codeph>true</codeph> が返されます。例えば、CustomArray という Array のサブクラスを作成し、CustomArray に <codeph>foo</codeph> という静的プロパティを定義した場合、<codeph>CustomArray.hasOwnProperty("foo")</codeph> を呼び出すと <codeph>true</codeph> が返されます。ただし、Array クラスに定義した静的プロパティ <codeph>DESCENDING</codeph> の場合、<codeph>CustomArray.hasOwnProperty("DESCENDING")</codeph> を呼び出すと、<codeph>false</codeph> が返されます。</p>
	 
     <p platform="actionscript"><b>注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph>override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph>function hasOwnProperty():Boolean</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:isPrototypeOf"><apiName>isPrototypeOf</apiName><shortdesc>
	 Object クラスのインスタンスが、パラメーターとして指定されたオブジェクトのプロトタイプチェーン内にあるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>オブジェクトが <codeph>theClass</codeph> パラメーターで指定されたオブジェクトのプロトタイプチェーン内にある場合、この値は <codeph>true</codeph> になり、それ以外の場合は <codeph>false</codeph> になります。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>theClass</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>指定したオブジェクトが参照する可能性があるクラスです。  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Object クラスのインスタンスが、パラメーターとして指定されたオブジェクトのプロトタイプチェーン内にあるかどうかを示します。このメソッドで <codeph>true</codeph> が返されるのは、オブジェクトが <codeph>theClass</codeph> パラメーターで指定されたオブジェクトのプロトタイプチェーン内にある場合です。<codeph>false</codeph> が返されるのは、ターゲットオブジェクトが <codeph>theClass</codeph> オブジェクトのプロトタイプチェーン内にない場合、および <codeph>theClass</codeph> パラメーターがオブジェクトでない場合です。
	 
     <p platform="actionscript"><b>注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph>override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph>function isPrototypeOf():Boolean</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:propertyIsEnumerable"><apiName>propertyIsEnumerable</apiName><shortdesc>
	 指定されたプロパティが存在し、列挙できるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a generic object, adds a property to the object, then checks whether the object is enumerable. By way of contrast, the example also shows that a built-in property, the <code>Array.length</code> property, is not enumerable.
	 <listing>
	 var myObj:Object = new Object();
	 myObj.prop1 = "hello";
	 trace(myObj.propertyIsEnumerable("prop1")); // true
	 
	 var myArray = new Array();
	 trace(myArray.propertyIsEnumerable("length")); // false
	 </listing> 
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>name</codeph> パラメーターで指定されたプロパティが列挙可能な場合、この値は <codeph>true</codeph> になり、それ以外の場合は <codeph>false</codeph> になります。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>オブジェクトのプロパティです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたプロパティが存在し、列挙できるかどうかを示します。<codeph>true</codeph> の場合、このプロパティが存在し、<codeph>for..in</codeph> ループで列挙できます。このメソッドではターゲットオブジェクトのプロトタイプチェーンをチェックしないため、プロパティがターゲットオブジェクト上に存在している必要があります。
	 
	 <p>作成するプロパティは列挙できますが、ビルトインプロパティは通常列挙できません。</p>
	 
     <p platform="actionscript"><b>注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph>override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph>function propertyIsEnumerable():Boolean</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:setPropertyIsEnumerable"><apiName>setPropertyIsEnumerable</apiName><shortdesc>
     ループ処理に対するダイナミックプロパティの可用性を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>オブジェクトのプロパティです。
     </apiDesc></apiParam><apiParam><apiItemName>isEnum</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> <codeph>false</codeph> に設定した場合、ダイナミックプロパティは <codeph>for..in</codeph> ループに現れず、メソッド <codeph>propertyIsEnumerable()</codeph> は <codeph>false</codeph> を返します。 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ループ処理に対するダイナミックプロパティの可用性を設定します。このメソッドではターゲットオブジェクトのプロトタイプチェーンをチェックしないため、プロパティがターゲットオブジェクト上に存在している必要があります。
     </apiDesc></apiOperationDetail><related-links><link href="#Object/propertyIsEnumerable()"><linktext>propertyIsEnumerable()</linktext></link></related-links></apiOperation><apiOperation id="Object:toLocaleString"><apiName>toLocaleString</apiName><shortdesc>
	 ロケール固有の規則に従って書式設定された、このオブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>object, object.tolocalestring, tolocalestring
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ロケールの規則に従って書式設定された、このオブジェクトのストリング表現。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ロケール固有の規則に従って書式設定された、このオブジェクトのストリング表現を返します。
	 
	 <p>このメソッドのデフォルトの実装では、ロケール固有の書式設定は行われず、<codeph>toString()</codeph> と同じストリングが返されます。必要な場合は、ロケールに対応する独自の実装をサブクラスで提供する必要があります。</p>
	 
     <p platform="actionscript"><b>注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph>override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph>function toLocaleString():String</codeph> が実装されます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="#Object/toString()"><linktext>Object.toString()</linktext></link></related-links></apiOperation><apiOperation id="Object:toString"><apiName>toString</apiName><shortdesc>
	 指定されたオブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>object, object.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定されたオブジェクトのストリング表現を返します。
	 
     <p platform="actionscript"><b>注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph>override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph>function toString():String</codeph> が実装されます。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:valueOf"><apiName>valueOf</apiName><shortdesc>
	 指定されたオブジェクトのプリミティブな値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>object, object.valueof, valueof
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このオブジェクトのプリミティブ値、またはオブジェクト自体です。
	 
	 </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定されたオブジェクトのプリミティブな値を返します。このオブジェクトにプリミティブ値がない場合、オブジェクト自体が返されます。
	 
     <p platform="actionscript"><b>注意：</b>Object クラスのメソッドは、Object のプロトタイプに動的に作成されます。Object のサブクラスでこのメソッドを再定義する場合は、<codeph>override</codeph> キーワードを使用しないでください。例えば、Object のサブクラスでは、基本クラスのオーバーライドを使用する代わりに <codeph>function valueOf():Object</codeph> が実装されます。</p>
     
	 </apiDesc></apiOperationDetail><related-links><link href="#Object/toString()"><linktext>Object.toString()</linktext></link></related-links></apiOperation><apiValue id="Object:constructor"><apiName>constructor</apiName><shortdesc>
	 指定されたオブジェクトインスタンスのクラスオブジェクトまたはコンストラクター関数への参照です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Object, Object.constructor, constructor
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 指定されたオブジェクトインスタンスのクラスオブジェクトまたはコンストラクター関数への参照です。オブジェクトがクラスのインスタンスの場合、<codeph>constructor</codeph> プロパティはクラスオブジェクトへの参照を保持します。オブジェクトがコンストラクター関数で作成されている場合、<codeph>constructor</codeph> プロパティはコンストラクター関数への参照を保持します。コンストラクター関数と、クラスのコンストラクターメソッドとを混同しないように注意してください。コンストラクター関数は、オブジェクトの作成に使用する Function オブジェクトで、クラスの定義に <codeph>class</codeph> キーワードを使用することの代わりになります。
	 
	 <p platform="actionscript"><codeph>class</codeph> キーワードを使用してクラスを定義する場合、クラスのプロトタイプオブジェクトには、クラスオブジェクトへの参照を保持する <codeph>constructor</codeph> という名前のプロパティが割り当てられます。クラスのインスタンスは、プロトタイプオブジェクトからこのプロパティを継承します。例えば、次のコードでは新しいクラス <codeph>A</codeph>、および <codeph>myA</codeph> という名前のクラスインスタンスを作成します。</p>
	 <codeblock platform="actionscript" rev="3.0">
	 dynamic class A {}
	 trace(A.prototype.constructor);      // [class A]
	 trace(A.prototype.constructor == A); // true
	 var myA:A = new A();
	 trace(myA.constructor == A);         // true</codeblock>
	 
	 <p platform="actionscript">上級ユーザーの場合は、オブジェクト作成用のテンプレートとして使える Function オブジェクトを定義するのに <codeph>function</codeph> キーワードを使用し、<codeph>class</codeph> キーワードを使用しない場合もあります。このような関数は、<codeph>new</codeph> 演算子と組み合わせてオブジェクトを作成できるため、コンストラクター関数と呼ばれています。<codeph>function</codeph> キーワードを使用してコンストラクター関数を作成する場合、そのプロトタイプオブジェクトには、コンストラクター関数への参照を保持する <codeph>constructor</codeph> という名前のプロパティが割り当てられます。次に、コンストラクター関数を使用してオブジェクトを作成すると、そのオブジェクトはコンストラクター関数のプロトタイプオブジェクトから <codeph>constructor</codeph> プロパティを継承します。例えば、次のコードでは新しいコンストラクター関数 <codeph>f</codeph>、および <codeph>myF</codeph> という名前のオブジェクトを作成します。</p>
	 <codeblock platform="actionscript" rev="3.0">
	 function f() {}
	 trace(f.prototype.constructor);      // function Function() {}
	 trace(f.prototype.constructor == f); // true
	 var myF = new f();
	 trace(myF.constructor == f);         // true</codeblock>
	 
	 <p><b>注意：</b><codeph>constructor</codeph> プロパティは書き込み可能です。つまり、ユーザーコードで割り当てステートメントを使用して値を変更できます。<codeph>constructor</codeph> プロパティの値の変更はお勧めしませんが、<codeph>constructor</codeph> プロパティの値に依存したコードを書く場合は、その値がリセットされないようにする必要があります。プロトタイプオブジェクト（例えば、<codeph>className.prototype.constructor</codeph>）を使用してプロパティにアクセスするときにのみ、この値を変更できます。</p>
     <p><codeph>constructor</codeph> プロパティにアクセスしている場合、コンパイルを strict モードで実行するとコンパイル時にエラーが発生します。これは、ランタイムのエンティティであるプロトタイプオブジェクトに constructor プロパティが依存しているからです。standard モードを使用するか、クラスの記述で "dynamic" を指定した場合、そのコードはエラーにならずに動作します。</p>     
	 </apiDesc></apiValueDetail><related-links><link href="#Class"><linktext>クラス</linktext></link><link href="#Function"><linktext>関数</linktext></link><link href="#Object/prototype"><linktext>prototype</linktext></link></related-links></apiValue><apiValue id="Object:prototype"><apiName>prototype</apiName><shortdesc>
	 クラスまたは関数オブジェクトのプロトタイプオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a class named Shape and a subclass of Shape named Circle.
	 <listing version="2.0">
	 // Shape class defined in external file named Shape.as
	 class Shape {
	 	function Shape() {}
	 }
	 
	 // Circle class defined in external file named Circle.as
	 class Circle extends Shape{
	 	function Circle() {}
	 }
	 </listing>
	 The Circle class can be used to create two instances of Circle:
	 <listing version="2.0">
	 var oneCircle:Circle = new Circle();
	 var twoCircle:Circle = new Circle();
	 </listing>
	 The following trace statement shows that the <code>prototype</code> property of the Circle class points to its superclass Shape. The identifier <code>Shape</code> refers to the constructor function of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.constructor == Shape); // true
	 </listing>
	 The following trace statement shows how you can use the <code>prototype</code> property and the <code>__proto__</code> property together to move two levels up the inheritance hierarchy (or prototype chain). The <code>Circle.prototype.__proto__</code> property contains a reference to the superclass of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.__proto__ == Shape.prototype); // true
	 </listing>
	 
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 クラスまたは関数オブジェクトのプロトタイプオブジェクトへの参照です。<codeph>prototype</codeph> プロパティは自動的に作成され、作成したクラスまたは関数オブジェクトに割り当てられます。このプロパティは、作成したクラスまたは関数に固有であるという点で静的です。例えば、クラスを作成すると、<codeph>prototype</codeph> プロパティの値は、そのクラスのすべてのインスタンスで共有され、クラスプロパティとしてのみアクセスできます。クラスのインスタンスは、<codeph>prototype</codeph> プロパティに直接アクセスできません。 
	 
     <p>クラスのプロトタイプオブジェクトは、そのクラスの特別なインスタンスであり、クラスのすべてのインスタンス間で状態を共有するためのメカニズムを提供します。実行時に、クラスインスタンスにプロパティが見つからない場合は、委譲先であるクラスのプロトタイプオブジェクトにそのプロパティがないかどうかがチェックされます。プロトタイプオブジェクトにもない場合は、<ph platform="actionscript">Flash Player または </ph>Adobe Integrated Runtime がそのプロパティを見つけるまで、プロトタイプオブジェクトの委譲先でチェックを行うという処理が階層の上位に向かって連続的に継続されます。 </p>
	 
     <p platform="actionscript"><i>メモ : </i>ActionScript 3.0 では、プロトタイプ継承は主要な継承メカニズムではありません。ActionScript 3.0 での主要な継承メカニズムは、クラス定義の固定プロパティを継承するクラス継承です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:SecurityError"><apiName>SecurityError</apiName><shortdesc>
 SecurityError 例外は、ある種のセキュリティ侵害が発生した場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, SecurityError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 <codeph>SecurityError</codeph> 例外は、ある種のセキュリティ侵害が発生した場合にスローされます。
 <p>
 セキュリティエラーの例：</p>
 <ul>
   <li>セキュリティサンドボックスの境界をまたいで、許可されていないプロパティアクセスやメソッド呼び出しを実行した場合</li>
   <li>セキュリティサンドボックスで許可されていない URL にアクセスしようとした場合</li>
   <li>許可されていないポート番号（例えば 65535 を超える番号）に対してソケット接続を確立しようとした場合</li>
   <li>ユーザーのカメラやマイクにアクセスしようとしたが、そのアクセス要求がユーザーによって拒否された場合</li>
 </ul>
 
 </apiDesc><example conref="examples\SecurityErrorExample.as"> 次の例は、許可される最大値よりも大きなポート番号に接続しようとした場合に、<codeph>SecurityError</codeph> エラーが <codeph>try...catch</codeph> ステートメント内で、どのように発生し、処理されるかを示しています。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.Socket;

    public class SecurityErrorExample extends Sprite {

        public function SecurityErrorExample() {
            try {
                var host:String = "www.[yourDomain].com";
                var socket:Socket = new Socket();
                socket.connect(host, 65536);
            }
            catch(e:SecurityError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="SecurityError:SecurityError"><apiName>SecurityError</apiName><shortdesc>
	 新しい SecurityError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/></apiParam></apiConstructorDef><apiDesc>
	 新しい SecurityError オブジェクトを作成します。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:ReferenceError"><apiName>ReferenceError</apiName><shortdesc>
 ReferenceError 例外は、sealed 指定された（動的でない）オブジェクトに対して未定義プロパティを参照しようとした場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, ReferenceError
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 ReferenceError 例外は、sealed 指定された（動的でない）オブジェクトに対して未定義プロパティを参照しようとした場合にスローされます。未定義の変数への参照があると ReferenceError 例外がスローされるので、潜在的なバグを発見し、アプリケーションコードのトラブルシューティングを行うのに役立ちます。
 <p>ただし、ダイナミッククラスの未定義のプロパティを参照することはできます。この場合、ReferenceError 例外はスローされません。詳細については、<codeph>dynamic</codeph> キーワードを参照してください。</p>
 
 </apiDesc><example conref="examples\ReferenceErrorExample.as"> 次の例は、<codeph>ReferenceError</codeph> 例外が <codeph>try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。 
<codeblock>
package {
    import flash.display.Sprite;

    public class ReferenceErrorExample extends Sprite {

        public function ReferenceErrorExample() {
            try {
                this["someMember"] = true;
            }
            catch(e:ReferenceError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="statements.html#dynamic"><linktext>dynamic キーワード</linktext></link></related-links><apiConstructor id="ReferenceError:ReferenceError"><apiName>ReferenceError</apiName><shortdesc>
	 新しい ReferenceError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>ReferenceError オブジェクトに関連付けられたメッセージです。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい ReferenceError オブジェクトを作成します。
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:RangeError"><apiName>RangeError</apiName><shortdesc>
 RangeError 例外は、数値の値が許容される範囲内に収まらない場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, RangeError
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 RangeError 例外は、数値の値が許容される範囲内に収まらない場合にスローされます。配列の操作時に、存在しない配列アイテムのインデックス位置を参照すると、RangeError 例外がスローされます。<codeph>Number.toExponential()</codeph>、<codeph>Number.toPrecision()</codeph>、および <codeph>Number.toFixed()</codeph> メソッドの使用時には、引数が許容される数値の範囲内に収まらない場合に RangeError 例外がスローされます。<codeph>Number.toExponential()</codeph>、<codeph>Number.toPrecision()</codeph>、および <codeph>Number.toFixed()</codeph> コードを拡張して、RangeError がスローされないようにすることもできます。
 <p product="flash">この例外は、次のような場合にもスローされます。
 <ul>
   <li>深度番号が必要な Flash Player API が、無効な深度番号を指定して呼び出された場合</li>
   <li>フレーム番号が必要な Flash Player API が、無効なフレーム番号を指定して呼び出された場合</li>
   <li>レイヤー番号が必要な Flash Player API が、無効なレイヤー番号を指定して呼び出された場合</li>
 </ul>
 </p>
 </apiDesc><example conref="examples\RangeErrorExample.as"> 次の例は、<codeph>RangeError</codeph> 例外が <codeph>try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。 
<codeblock>
package {
    import flash.display.Sprite;

    public class RangeErrorExample extends Sprite {

        public function RangeErrorExample() {
            var child:Sprite = new Sprite();
            try {
                addChildAt(child, 1);
            }
            catch(e:RangeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#Number/toExponential()"><linktext>Number.toExponential()</linktext></link><link href="#Number/toPrecision()"><linktext>Number.toPrecision()</linktext></link><link href="#Number/toFixed()"><linktext>Number.toFixed()</linktext></link></related-links><apiConstructor id="RangeError:RangeError"><apiName>RangeError</apiName><shortdesc>
	 新しい RangeError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>RangeError オブジェクトに関連付けられたメッセージを含みます。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい RangeError オブジェクトを作成します。
	 </apiDesc></apiConstructorDetail><related-links><link href="#Number/toFixed()"><linktext>Number.toFixed()</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:int"><apiName>int</apiName><shortdesc>
 int クラスを使用すると、32 ビットの符号付き整数を表すデータ型を操作できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>int object, int, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 int クラスを使用すると、32 ビットの符号付き整数を表すデータ型を操作できます。int クラスで表される値の範囲は、-2,147,483,648（-2^31）～ 2,147,483,647（2^31-1）です。
 <p>int クラスのプロパティ（<codeph>MAX_VALUE</codeph> および <codeph>MIN_VALUE</codeph>）は静的であるため、プロパティを使用するためのオブジェクトは不要で、コンストラクターを使用する必要はありません。ただし、メソッドは静的でないため、メソッドを使用するためのオブジェクトは不要です。int オブジェクトは、int クラスコンストラクターを使用するか、int 型の変数を宣言してその変数にリテラル値を割り当てることによって作成することができます。</p>
 <p>int データ型は、ループカウンターを使用する場合や、浮動小数を使う必要のないその他の場合に役に立ちます。このデータ型は、Java や C++ の int データ型と似ています。int 型変数のデフォルト値は <codeph>0</codeph> です</p>
 <p><codeph>int.MAX_VALUE</codeph> を超える数値を処理する場合には、Number の使用を検討してください。  </p>
 <p>次の例では、int クラスの <codeph>toString()</codeph> メソッドを呼び出します。このメソッドは、ストリング <codeph>1234</codeph> を返します。 </p>
 <codeblock rev="3.0">
 var myint:int = 1234;
 myint.toString();
 </codeblock>
 <p>次の例では、コンストラクターを使用せずに、<codeph>MIN_VALUE</codeph> プロパティの値を宣言された変数に割り当てます。</p>
 <pre>
 var smallest:int = int.MIN_VALUE;
 </pre> 
 
 </apiDesc><example conref="examples\IntExample.as"> 次の例は、<codeph>IntExample</codeph> クラスを使用して、int データ型をどのように処理し、有効性をチェックするかを示しています。
 <ol>
     <li>2 つの int 変数、<codeph>a</codeph> と <codeph>b</codeph> をコンストラクターで宣言します。</li>
     <li><codeph>addIntegers()</codeph> メソッドで 2 つの int を追加します。</li>
     <li>3 番目の int 変数 <codeph>c</codeph> に <codeph>parseInteger()</codeph> の結果を割り当て、渡されたストリングの有効性をチェックして、int データ型で受け取ることのできる範囲の整数値であることを確認します。有効な場合はストリングの整数値に相当する int を返します。</li>
     <li>int 変数 <codeph>a</codeph> と <codeph>c</codeph> を、<codeph>addIntegers()</codeph> を使って同時に追加します。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;

    public class IntExample extends Sprite {    
        public function IntExample() {
            var a:int = 512;
            var b:int = -128;
            
            trace(addIntegers(a, b)); // 384

            var c:int = parseInteger("32");
            
            trace(addIntegers(a, c)); // 544
        }
            
        public function addIntegers(a:int, b:int):int {
            return a + b;
        }
        
        public function parseInteger(str:String):int {
            var num:Number = parseInt(str);
            if(!isNaN(num) &amp;&amp; num &lt;= int.MAX_VALUE &amp;&amp; num >= int.MIN_VALUE) {
                return int(num);
            }
            
            return 0;
        }
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="uint.html"><linktext>uint</linktext></link><link href="Number.html"><linktext>Number</linktext></link></related-links><apiConstructor id="int:int"><apiName>int</apiName><shortdesc>
	 コンストラクター。新しい int オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>num</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>作成する int オブジェクトの数値、または数値に変換する値です。<codeph>value</codeph> が指定されなかった場合のデフォルト値は 0 です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 コンストラクター。新しい int オブジェクトを作成します。<codeph>int.toString()</codeph> と <codeph>int.valueOf()</codeph> を使用するには、int コンストラクターを使用する必要があります。int オブジェクトのプロパティを使用する場合は、コンストラクターを使用しません。<codeph>new int</codeph> コンストラクターは、主にプレースホルダーとして使用します。int オブジェクトは、パラメーターをプリミティブ値に変換する <codeph>int()</codeph> 関数とは異なります。
	 
 	 </apiDesc><example>次のコードは、新しい int オブジェクトを作成します。
	 <pre>
	 var n1:int = new int(3.4);
	 var n2:int = new int(-10);
	 </pre>
	 
	 
	 </example></apiConstructorDetail><related-links><link href="#int/toString()"><linktext>int.toString()</linktext></link><link href="#int/valueOf()"><linktext>int.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="int:AS3:toExponential"><apiName>toExponential</apiName><shortdesc>
      数値のストリング表現を指数表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>fractionDigits</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>必要な小数の桁数を表す 0 ～ 20 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      数値のストリング表現を指数表現で返します。ストリングには、<codeph>fractionDigits</codeph> パラメーターでの指定に従って小数点の前に 1 桁、小数点以下に最大 20 桁が含まれます。
      </apiDesc><example conref="examples\Number.toExponential.1.as"> 次の例は、<codeph>toExponential(2)</codeph> を使用して、ストリングを指数表現で返す方法を示しています。
<codeblock>

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toFixed"><apiName>toFixed</apiName><shortdesc>
     数値のストリング表現を固定小数点表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>fractionDigits</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>必要な小数の桁数を表す 0 ～ 20 の整数です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     数値のストリング表現を固定小数点表現で返します。固定小数点表現とは、<codeph>fractionDigits</codeph> パラメーターの指定に従って、小数点以下の特定の桁数をストリングに含めたものです。<codeph>fractionDigits</codeph> パラメーターの有効範囲は 0 ～ 20 です。 この範囲外の値を指定すると例外がスローされます。
     
     </apiDesc><example conref="examples\Number.toFixed.1.as"> 次の例は、<codeph>toFixed(3)</codeph> を使用して、小数点以下 3 桁に四捨五入したストリングを返す方法を示しています。
<codeblock>

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as"> 次の例は、<codeph>toFixed(2)</codeph> を使用して、末尾にゼロを追加したストリングを返す方法を示しています。
<codeblock>

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toPrecision"><apiName>toPrecision</apiName><shortdesc>
      数値のストリング表現を指数表現または固定小数点表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>precision</codeph> 引数が 1 ～ 21 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>precision</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>結果のストリングに必要な桁数を表す 1 ～ 21 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      数値のストリング表現を指数表現または固定小数点表現で返します。ストリングには、<codeph>precision</codeph> パラメーターで指定された桁数が含まれます。
      </apiDesc><example conref="examples\Number.toPrecision.1.as"> 次の例は、<codeph>toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。指数表現は必要ないので、ストリングは固定小数点表現で表されます。
<codeblock>

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as"> 次の例は、<codeph>toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。結果の数値には固定小数点表現に必要な桁が含まれないため、ストリングは指数表現で表されます。
<codeblock>

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toString"><apiName>toString</apiName><shortdesc>
	 int オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>radix</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>数値からストリングへの変換に使用する基数（2 ～ 36）を指定します。<codeph>radix</codeph> パラメーターを指定しない場合、デフォルト値は 10 です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>int</codeph> オブジェクトのストリング表現を返します。
	 
	 </apiDesc><example>次の例では、<codeph>radix</codeph> パラメーターに 2 および 8 を使用し、数値 9 に対応する表現を含むストリングを返します。
	 <pre>
	 var myint:int = new int(9);
	 trace(myint.toString(2)); // 1001
	 trace(myint.toString(8)); // 11
	 </pre>
	 <p>次の例では、結果が 16 進数値になります。</p>
	 <pre>
	 var r:int = new int(250);
	 var g:int = new int(128);
	 var b:int = new int(114);
	 var rgb:String = "0x"+ r.toString(16)+g.toString(16)+b.toString(16);
	 trace(rgb); // 0xfa8072
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	 指定された int オブジェクトのプリミティブな値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>int 値です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定された int オブジェクトのプリミティブな値を返します。
	 
 	 </apiDesc><example>次の例では、<codeph>numSocks</codeph> オブジェクトのプリミティブな値が結果として返されます。
	 <pre>
	 var numSocks:int = new int(2);
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="int:MAX_VALUE"><apiName>MAX_VALUE</apiName><shortdesc> 
	表現可能な 32 ビット符号付き整数の最大値、2,147,483,647 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>int, int.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2147483647</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	表現可能な 32 ビット符号付き整数の最大値、2,147,483,647 です。
	
    </apiDesc><example>次の ActionScript は、表現可能な最大および最小の int オブジェクトを<ph outputclass="flashonly">出力パネルに</ph><ph outputclass="flexonly">ログファイルに</ph><ph outputclass="flashonly">表示し</ph><ph outputclass="flexonly">書き込み</ph>ます。
	<pre>
	trace("int.MIN_VALUE = "+int.MIN_VALUE);
	trace("int.MAX_VALUE = "+int.MAX_VALUE);
	</pre>
	<p>このコードは、次の値を<ph outputclass="flexonly">記録</ph><ph outputclass="flashonly">表示</ph>します。</p>
	<pre>
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
	</pre>
	
	
	</example></apiValueDetail></apiValue><apiValue id="int:MIN_VALUE"><apiName>MIN_VALUE</apiName><shortdesc>
	 表現可能な 32 ビット符号付き整数の最小値、-2,147,483,648 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>int, int.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-2147483648</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 表現可能な 32 ビット符号付き整数の最小値、-2,147,483,648 です。
	 
 	 </apiDesc><example>次の ActionScript は、表現可能な最大および最小の int オブジェクトを<ph outputclass="flashonly">出力パネルに</ph><ph outputclass="flexonly">ログファイルに</ph><ph outputclass="flashonly">表示し</ph><ph outputclass="flexonly">書き込み</ph>ます。
     <pre>
     trace("int.MIN_VALUE = "+int.MIN_VALUE);
     trace("int.MAX_VALUE = "+int.MAX_VALUE);
     </pre>
     <p>このコードは、次の値を<ph outputclass="flexonly">記録</ph><ph outputclass="flashonly">表示</ph>します。</p>
     <pre>
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
     </pre>
     
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:Number"><apiName>Number</apiName><shortdesc>
 IEEE-754 倍精度浮動小数点数を表すデータ型です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number object, number, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>Number クラスは、<codeph>Number</codeph> データ型の単純なラッパーオブジェクトです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 IEEE-754 倍精度浮動小数点数を表すデータ型です。Number クラスに関連するメソッドとプロパティを使用してプリミティブな数値を処理することができます。このクラスは、JavaScript の Number クラスと同じです。
 <p>Number クラスのプロパティは静的であるため、プロパティを使用するためのオブジェクトは不要で、コンストラクターを使用する必要はありません。</p>
 <p>Number データ型は、倍精度 IEEE-754 規格に準拠します。 </p>
 <p>Number データ型は、浮動小数値を使用する必要がある場合に便利です。Flash Player は Number よりも int および uint データ型を効率的に処理しますが、必要な値の範囲が int および uint の各データ型の有効範囲を超える場合は Number が便利です。Number クラスは、int および uint の各データ型の有効範囲を大きく超える整数値を表す場合に使用できます。整数値を表すのに int および uint では 32 ビットを使用できるのに対し、Number データ型は最大 53 ビットを使用することができます。Number 型として型指定されている変数のデフォルト値は <codeph>NaN</codeph>（非数）です。</p>
 
 </apiDesc><example conref="examples\NumberExample.as"> 次の例は、小数点以下 6 桁の数値を四捨五入によって小数点以下 2 桁の数値に切り詰める方法を示しています。
<codeblock>

package {
    import flash.display.Sprite;

    public class NumberExample extends Sprite {
        public function NumberExample() {
            var num:Number = new Number(10.456345);
            var str:String = num.toFixed(2);
            trace(num); // 10.456345
            trace(str); // 10.46
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="int.html"><linktext>int</linktext></link><link href="uint.html"><linktext>uint</linktext></link></related-links><apiConstructor id="Number:Number"><apiName>Number</apiName><shortdesc>
  指定された値を持つ Number オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>new number, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>num</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>作成する Number インスタンスの数値、または Number に変換する値です。<codeph>num</codeph> が指定されなかった場合のデフォルト値は 0 です。<codeph>num</codeph> パラメーターを指定せずにコンストラクターを使用することは、値を割り当てずに Number 型の変数を宣言すること（<codeph>var myNumber:Number</codeph> など）と同じではありません。この場合は、デフォルトが <codeph>NaN</codeph> になります。値の割り当てられていない数値は未定義で、<codeph>new Number(undefined)</codeph> と同等です。
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>指定された値を持つ Number を作成します。
  
  </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
  指定された値を持つ Number オブジェクトを作成します。このコンストラクターの結果は、異なる型のオブジェクトをプリミティブな数値に変換する <codeph>Number()</codeph> パブリックネイティブ関数と同じものになります。
  
  </apiDesc></apiConstructorDetail><related-links><link href="#Number/toString()"><linktext>Number.toString()</linktext></link><link href="#Number/valueOf()"><linktext>Number.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="Number:AS3:toExponential"><apiName>toExponential</apiName><shortdesc>
	  数値のストリング表現を指数表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>fractionDigits</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>必要な小数の桁数を表す 0 ～ 20 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  数値のストリング表現を指数表現で返します。ストリングには、<codeph>fractionDigits</codeph> パラメーターでの指定に従って小数点の前に 1 桁、小数点以下に最大 20 桁が含まれます。
	  </apiDesc><example conref="examples\Number.toExponential.1.as"> 次の例は、<codeph>toExponential(2)</codeph> を使用して、ストリングを指数表現で返す方法を示しています。
<codeblock>

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toFixed"><apiName>toFixed</apiName><shortdesc>
	 数値のストリング表現を固定小数点表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>fractionDigits</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>必要な小数の桁数を表す 0 ～ 20 の整数です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 数値のストリング表現を固定小数点表現で返します。固定小数点表現とは、<codeph>fractionDigits</codeph> パラメーターの指定に従って、小数点以下の特定の桁数をストリングに含めたものです。<codeph>fractionDigits</codeph> パラメーターの有効範囲は 0 ～ 20 です。 この範囲外の値を指定すると例外がスローされます。
	 
	 </apiDesc><example conref="examples\Number.toFixed.1.as"> 次の例は、<codeph>toFixed(3)</codeph> を使用して、小数点以下 3 桁に四捨五入したストリングを返す方法を示しています。
<codeblock>

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as"> 次の例は、<codeph>toFixed(2)</codeph> を使用して、末尾にゼロを追加したストリングを返す方法を示しています。
<codeblock>

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toPrecision"><apiName>toPrecision</apiName><shortdesc>
	  数値のストリング表現を指数表現または固定小数点表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>precision</codeph> 引数が 1 ～ 21 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>precision</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>結果のストリングに必要な桁数を表す 1 ～ 21 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  数値のストリング表現を指数表現または固定小数点表現で返します。ストリングには、<codeph>precision</codeph> パラメーターで指定された桁数が含まれます。
	  </apiDesc><example conref="examples\Number.toPrecision.1.as"> 次の例は、<codeph>toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。指数表現は必要ないので、ストリングは固定小数点表現で表されます。
<codeblock>

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as"> 次の例は、<codeph>toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。結果の数値には固定小数点表現に必要な桁が含まれないため、ストリングは指数表現で表されます。
<codeblock>

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toString"><apiName>toString</apiName><shortdesc>
 指定された Number オブジェクト（myNumber）のストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.tostring, tostring
  
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>Number オブジェクトの数値表現のストリングです。
 
 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>radix</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>10</apiData><apiDesc>数値からストリングへの変換に使用する基数（2 ～ 36）を指定します。<codeph>radix</codeph> パラメーターを指定しない場合、デフォルト値は 10 です。
 
 </apiDesc></apiParam><apiTipTexts><apiTipText>基数として指定された基数パラメーターで、この Number のストリング表現を返します。
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
 指定された Number オブジェクト（<codeph> <i>myNumber</i> </codeph>）のストリング表現を返します。Number オブジェクトの値が先行ゼロを持たない小数（<codeph>.4</codeph> など）の場合、<codeph>Number.toString()</codeph> は先行ゼロを追加（<codeph>0.4</codeph>）します。
 
 
 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
 指定された Number オブジェクトのプリミティブな値のタイプを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.valueof, valueof, value of
  
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>Number オブジェクトのプリミティブな型の値です。
 
 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>指定された Number オブジェクトのプリミティブな値のタイプを返します。
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
 指定された Number オブジェクトのプリミティブな値のタイプを返します。
 
 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Number:MAX_VALUE"><apiName>MAX_VALUE</apiName><shortdesc>
  表現可能な最大の数値（倍精度 IEEE-754）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.max_value, max_value, max value
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>表現可能な最大の数値（倍精度 IEEE-754）です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  表現可能な最大の数値（倍精度 IEEE-754）です。この数値は、約 1.79e+308 です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:MIN_VALUE"><apiName>MIN_VALUE</apiName><shortdesc>
  0 以外の正の値で、表現可能な最小の数値（倍精度 IEEE-754）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.min_value, min_value, min value
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>表現可能な最小の数値（倍精度 IEEE-754）です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  0 以外の正の値で、表現可能な最小の数値（倍精度 IEEE-754）です。この数値は約 5e-324 です。全体的に表現可能な最小の数値は、実際には <codeph>-Number.MAX_VALUE</codeph> です。
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NEGATIVE_INFINITY"><apiName>NEGATIVE_INFINITY</apiName><shortdesc>
  負の無限大を表す IEEE-754 値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.negative_infinity, negative_infinity, negative infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>負の無限大を表す IEEE-754 値を指定します。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  負の無限大を表す IEEE-754 値を指定します。このプロパティの値は、<codeph>-Infinity</codeph> 定数の値と同じです。
  <p>
  負の無限大は、数学演算または関数が表現できる下限を超える負の値を返すときに返される特別な数値です。
  </p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NaN"><apiName>NaN</apiName><shortdesc>
  非数（NaN）を表す IEEE-754 の値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.nan, nan, not a number
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>非数（NaN）を表す IEEE-754 の値です。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  非数（<codeph>NaN</codeph>）を表す IEEE-754 の値です。
  
  </apiDesc></apiValueDetail><related-links><link href="package.html#isNaN()"><linktext>isNaN()</linktext></link></related-links></apiValue><apiValue id="Number:POSITIVE_INFINITY"><apiName>POSITIVE_INFINITY</apiName><shortdesc>
  正の無限大を表す IEEE-754 値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.positive_infinity, positive_infinity, positive infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>正の無限大を表す IEEE-754 値を指定します。
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  正の無限大を表す IEEE-754 値を指定します。このプロパティの値は、<codeph>Infinity</codeph> 定数の値と同じです。
  <p>
  正の無限大は、数学演算または関数が表現できる上限を超える正の値を返すときに返される特別な数値です。
  </p>
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:DefinitionError"><apiName>DefinitionError</apiName><shortdesc>
 DefinitionError クラスは、既に定義されている識別子をユーザーコードで定義しようとしたときに発生するエラーを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>DefinitionError は、クラス、インターフェイス、または関数をコードで再定義しようとしたときにスローされます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 DefinitionError クラスは、既に定義されている識別子をユーザーコードで定義しようとしたときに発生するエラーを表します。このエラーは通常、クラス、インターフェイス、または関数を再定義するときに発生します。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="DefinitionError:DefinitionError"><apiName>DefinitionError</apiName><shortdesc>
	 新しい DefinitionError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/></apiParam></apiConstructorDef><apiDesc>
	 新しい DefinitionError オブジェクトを作成します。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:Function"><apiName>Function</apiName><shortdesc>
 関数は、ActionScript で呼び出すことのできるコードの基本単位です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Function, Function object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>Function クラスは、ビルトイン関数やユーザー定義関数を表す場合に使用されます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 関数は、ActionScript で呼び出すことのできるコードの基本単位です。ActionScript のユーザー定義関数とビルトイン関数は、どちらも Function クラスのインスタンスである Function オブジェクトで表されます。
 <p>クラスのメソッドは、Function オブジェクトとは少し異なります。メソッドは通常の関数オブジェクトとは異なり、関連のクラスオブジェクトと緊密にリンクされています。このため、メソッドまたはプロパティは、同一クラスのすべてのインスタンスで共有される定義を持ちます。メソッドをインスタンスから抽出して、"バインド" メソッドとして扱うことができます。元のインスタンスとのリンクは維持されます。バインドメソッドの場合、<codeph>this</codeph> キーワードで、メソッドの実装元オブジェクトを指します。関数については、<codeph>this</codeph> で、関数が呼び出されたときの関連オブジェクトを指します。</p>
 
 
 </apiDesc><example conref="examples\FunctionExample.as"> 次の例では、<codeph>FunctionExample</codeph>、<codeph>SimpleCollection</codeph>、<codeph>EventBroadcaster</codeph>、<codeph>EventListener</codeph> クラスを使用して、ActionScript での関数のさまざまな使用法を示しています。これを行うには、以下の手順を実行します。
 <ol>
    <li><codeph>FunctionExample</codeph> のコンストラクターでは、<codeph>simpleColl</codeph> という名前のローカル変数を作成し、この変数に <codeph>1</codeph> から <codeph>8</codeph> までの整数の配列を作成します。 </li>
    <li><codeph>simpleColl</codeph> オブジェクトを、<codeph>trace()</codeph> を使用して出力します。</li>
  <li>EventListener オブジェクト <codeph>listener</codeph> を <codeph>simpleColl</codeph> に追加します。</li>
  <li><codeph>insert()</codeph> と <codeph>remove()</codeph> 関数が呼び出されると、リスナーはそれぞれのイベントに応答します。</li>
    <li><codeph>greaterThanFourColl</codeph> という名前の 2 番目の SimpleCollection オブジェクトを作成します。</li>
    <li><codeph>greaterThanFourColl</codeph> オブジェクトには、<codeph>simpleColl.select()</codeph> の結果（引数<codeph>4</codeph> と匿名関数を使用）が割り当てられます。SimpleCollection オブジェクトの select メソッドは、匿名関数パラメーターをブロックとして使用する内部イテレータです。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    
    public class FunctionExample extends Sprite {
        public function FunctionExample() {
            var simpleColl:SimpleCollection;
            simpleColl = new SimpleCollection(0, 1, 2, 3, 4, 5, 6, 7, 8);
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 8

            var listener:EventListener = new EventListener();
            simpleColl.addListener(listener);
            simpleColl.insert(9);        // itemInsertedHandler: 9
            simpleColl.remove(8);        // itemRemovedHandler: 8
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 9

            var greaterThanFourColl:SimpleCollection;
            greaterThanFourColl = simpleColl.select(4, function(item:int, value:int){ return item > value });
            trace(greaterThanFourColl);    // 5, 6, 7, 9
        }
    }
}
    
import flash.display.Sprite;
    
class EventBroadcaster {
    private var listeners:Array;

    public function EventBroadcaster() {
        listeners = new Array();
    }
        
    public function addListener(obj:Object):void {
        removeListener(obj);
        listeners.push(obj);
    }
        
    public function removeListener(obj:Object):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            if(listeners[i] == obj) {
                listeners.splice(i, 1);
            }
        }
    }
    
    public function broadcastEvent(evnt:String, ...args):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            listeners[i][evnt].apply(listeners[i], args);
        }
    }    
}
    
class SimpleCollection extends EventBroadcaster {
    private var arr:Array;
        public function SimpleCollection(... args) {
        arr = (args.length == 1 &amp;&amp; !isNaN(args[0])) ? new Array(args[0]) : args;
    }
        
    public function insert(obj:Object):void {
        remove(obj);
        arr.push(obj);
        broadcastEvent("itemInsertedHandler", obj);
    }
        
    public function remove(obj:Object):void {
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(arr[i] == obj) {
                var obj:Object = arr.splice(i, 1)[0];
                broadcastEvent("itemRemovedHandler", obj);
            }
        }
    }

    public function select(val:int, fn:Function):SimpleCollection {
        var col:SimpleCollection = new SimpleCollection();
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(fn.call(this, arr[i], val)) {
                col.insert(arr[i]);
            }
        }
        return col;
    }
        
    public function toString():String {
        var str:String = new String();
        for(var i:uint = 0; i &lt; arr.length - 1; i++) {
            str += arr[i] + ", ";
        }
        str += arr[arr.length - 1];
        return str;
    }
}

class EventListener {
    public function EventListener() {
    }
    
    public function itemInsertedHandler(obj:Object):void {
        trace("itemInsertedHandler: " + obj);
    }
    
    public function itemRemovedHandler(obj:Object):void {
        trace("itemRemovedHandler: " + obj);        
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="Function:AS3:apply"><apiName>apply</apiName><shortdesc>
  ActionScript が呼び出す関数内で使用される thisObject の値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Function, Function.apply, apply
  
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>呼び出された関数が指定する値です。
  
  
  </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>thisArg</apiItemName><apiType value=""/><apiData>unknown</apiData><apiDesc>関数の適用先のオブジェクトです。
  
  </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value=""/><apiData>unknown</apiData><apiDesc>エレメントをパラメーターとして関数に渡す配列です。
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>Function を呼び出すオブジェクトインスタンスを指定します。
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  ActionScript が呼び出す関数内で使用される <codeph>thisObject</codeph> の値を指定します。このメソッドは、呼び出される関数に渡されるパラメーターも指定します。<codeph>apply()</codeph> は Function クラスのメソッドなので、ActionScript 内のすべての Function オブジェクトのメソッドとしても使用できます。 
  <p>Array オブジェクトとしてパラメーターを指定します。カンマ区切りリストとしてパラメーターを指定する <codeph>Function.call()</codeph> とは異なります。これは、スクリプトが実際に実行されるまで、渡されるパラメーター数が不明である場合にも便利です。</p>
  <p>呼び出された関数が戻り値として指定する値を返します。</p>

  
  </apiDesc></apiOperationDetail><related-links><link href="#Function/call()"><linktext>Function.call()</linktext></link></related-links></apiOperation><apiOperation id="Function:AS3:call"><apiName>call</apiName><shortdesc>
  Function オブジェクトが表す関数を呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Function, Function.call, call
  
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>thisArg</apiItemName><apiType value=""/><apiData>unknown</apiData><apiDesc>関数の本体内で <codeph>thisObject</codeph> の値を示すオブジェクトです。
  
  </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>関数に渡されるパラメーターです。 指定できるパラメーターの数は 0 個以上です。
  
  </apiDesc></apiParam><apiTipTexts><apiTipText>この Function を呼び出します。 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  Function オブジェクトが表す関数を呼び出します。ActionScript のすべての関数は Function オブジェクトによって表されるので、すべての関数はこのメソッドをサポートしています。 
  <p>ほとんどの場合、このメソッドの代わりに関数呼び出し演算子（<codeph>()</codeph>）を使用できます。関数呼び出し演算子を使うと、コードが簡潔になり読みやすくなります。このメソッドは、主に関数呼び出しの <codeph>thisObject</codeph> パラメーターを明示的に制御する必要がある場合に役立ちます。通常、関数をオブジェクトのメソッドとして、関数の本体内で呼び出すと、次のように <codeph>thisObject</codeph> が <codeph>myObject</codeph> に設定されます。</p>
  <codeblock>
  myObject.myMethod(1, 2, 3);
  </codeblock>
  <p><codeph>thisObject</codeph> が他の異なる場所をポイントするように設定する場合もあります。例えば、オブジェクトのメソッドとして呼び出す関数が、実際には、そのオブジェクトのメソッドとして格納されていない場合などです。</p>
  <codeblock>
  myObject.myMethod.call(myOtherObject, 1, 2, 3); 
  </codeblock>
  <p>関数をオブジェクトのメソッドとしてではなく通常の関数として呼び出すには、値 <codeph>null</codeph> を、<codeph>thisObject</codeph> パラメーターに渡します。例えば、次の 2 つの関数呼び出しは同じです。</p>
  <codeblock>
  Math.sin(Math.PI / 4)
  Math.sin.call(null, Math.PI / 4)
  </codeblock>
  
  <p>呼び出された関数が戻り値として指定する値を返します。</p>
  
  </apiDesc></apiOperationDetail><related-links><link href="#Function/apply()"><linktext>Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="globalClassifier:SyntaxError"><apiName>SyntaxError</apiName><shortdesc>
 SyntaxError 例外は、次のいずれかの理由で解析エラーが発生した場合に、スローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, SyntaxError
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 SyntaxError 例外は、次のいずれかの理由で解析エラーが発生した場合に、スローされます。 
 <ul>
   <li>RegExp クラスで無効な正規表現を解析した場合。</li>
   <li>XML クラスで無効な XML コンテンツを解析した場合。</li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="#RegExp"><linktext>RegExp クラス</linktext></link><link href="#XML"><linktext>XML クラス</linktext></link></related-links><apiConstructor id="SyntaxError:SyntaxError"><apiName>SyntaxError</apiName><shortdesc>
	 新しい SyntaxError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>SyntaxError オブジェクトに関連付けられたメッセージです。 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい SyntaxError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:Boolean"><apiName>Boolean</apiName><shortdesc>
Boolean オブジェクトは、論理演算において true または false のいずれか 1 つの値を取るデータ型です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><refpath>Objects/Core/Boolean/
 
 </refpath></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Boolean オブジェクトは、論理演算において <codeph>true</codeph> または <codeph>false</codeph> のいずれか 1 つの値を取るデータ型です。Boolean クラスを使用して、Boolean オブジェクトのプリミティブなデータ型またはストリング表現を調べることができます。 

<p>Boolean オブジェクトを作成するには、コンストラクターを使用するか、グローバル関数を使用するか、またはリテラル値を割り当てます。どの手法を使っても違いはありません。ActionScript 3.0 では、3 つの手法すべてが同等です（これは、Boolean オブジェクトが Boolean プリミティブ型と区別される JavaScript と異なる点です）。</p>

  <p>次の各行のコードは同じです。</p>
<codeblock rev="3.0">
var flag:Boolean = true;
var flag:Boolean = new Boolean(true);
var flag:Boolean = Boolean(true);
</codeblock>

 </apiDesc><example conref="examples\BooleanExample.as"> 次の例では、Boolean オブジェクトを切り替え、それぞれに対応する値を表示します。
<codeblock>
 package {
    import flash.display.Sprite;

    public class BooleanExample extends Sprite {
        private var flag:Boolean;

        public function BooleanExample() {
            trace(flag);    // false
            toggle();
            trace(flag);    // true
            toggle();
            trace(flag);    // false
        }
        
        private function toggle():void{
            flag = !flag;
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Boolean:Boolean"><apiName>Boolean</apiName><shortdesc>
 指定された値を持つ Boolean オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>new boolean, constructor
  
  </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>false</apiData><apiDesc>任意の式です。 
 
 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 指定された値を持つ Boolean オブジェクトを作成します。<codeph>expression</codeph> パラメーターを省略すると、Boolean オブジェクトは値 <codeph>false</codeph> で初期化されます。<codeph>expression</codeph> パラメーターの値を指定すると、メソッドによって評価され、評価結果はグローバル <codeph>Boolean()</codeph> 関数の規則に従ってブール値として返されます。
 
 </apiDesc><example>次のコードは、値 <codeph>false</codeph> に初期化された <codeph>myBoolean</codeph> という新しい Boolean オブジェクトを作成します。
 <codeblock rev="3.0">
 var myBoolean:Boolean = new Boolean();
 </codeblock>
 
 </example></apiConstructorDetail><related-links><link href="package.html#Boolean()"><linktext>Boolean()</linktext></link></related-links></apiConstructor><apiOperation id="Boolean:AS3:toString"><apiName>toString</apiName><shortdesc>
	  Boolean オブジェクトのストリング表現（"true" または "false"）を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>boolean.toString, toString
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>"true"</codeph> または <codeph>"false"</codeph> のストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  Boolean オブジェクトのストリング表現（<codeph>"true"</codeph> または <codeph>"false"</codeph>）を返します。システム言語に関係なく、出力はローカライズされず、<codeph>"true"</codeph> または <codeph>"false"</codeph> のいずれかとなります。
	 
 	 </apiDesc><example>次の例では、Boolean 型の変数を作成し、<codeph>toString()</codeph> メソッドを使用して、値をストリングの配列で使用するストリングに変換します。
	 <codeblock rev="3.0">
	 var myStringArray:Array = new Array("yes", "could be");
	 var myBool:Boolean = 0;
	 myBool.toString();
	 myStringArray.push(myBool);
	 trace(myStringArray); // yes,could be,false
	 </codeblock>
	 
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="Boolean:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	 指定された Boolean オブジェクトの値が true の場合は true、それ以外の場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>boolean.valueOf, valueOf
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ブール値です。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定された Boolean オブジェクトの値が true の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。  
	 
	 </apiDesc><example>次の例では、このメソッドがどのように動作するかを示し、また、新しい Boolean オブジェクトの値が <codeph>false</codeph> であることを示しています。
	 <codeblock rev="3.0">
	 var myBool:Boolean = new Boolean();
	 trace(myBool.valueOf());   // false
	 myBool = (6==3+3);
	 trace(myBool.valueOf());   // true  
	 </codeblock>
	 
	 
	 </example></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="globalClassifier:XMLList"><apiName>XMLList</apiName><shortdesc>
 XMLList クラスには、XML エレメントを操作するためのメソッドが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>XMLList
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 XMLList クラスには、XML エレメントを操作するためのメソッドが含まれています。XMLList オブジェクトは複数の XML オブジェクトまたはエレメント（複数のノードまたは属性を含む）を表すこともできるので、コレクション内のエレメント全体に対してメソッドを呼び出すことも、コレクション内のエレメントごとにメソッドを呼び出すことも可能です。
 <p>XMLList オブジェクトに XML エレメントが 1 つしかない場合は、XMLList オブジェクトに対して XML クラスのメソッドを直接使用できます。次の例で、<codeph>example.two</codeph> は長さ 1 の XMLList オブジェクトです。そのため、このオブジェクトにはどのような XML メソッドをも呼び出すことができます。</p>
 <codeblock>
 var example2 = &lt;example>&lt;two>2&lt;/two>&lt;/example>;</codeblock>
 <p>複数の XML オブジェクトを含んだ XMLList オブジェクトと共に XML クラスのメソッドを使用しようとすると、例外がスローされます。例外がスローされないようにするには、<codeph>for each..in</codeph> ステートメントなどを使用して XMLList コレクションに対して反復処理を行い、コレクション内の各 XML オブジェクトにメソッドを適用します。</p>
 
 </apiDesc><example conref="examples\XMLListExample.as"> 次の例は <codeph>books</codeph> という名前の XML プロパティを作成し、<codeph>book publisher</codeph> タグや <codeph>name</codeph> タグを持ついくつかのアイテムを <codeph>books</codeph> というノードに追加しています。次に <codeph>showBooksByPublisher()</codeph> メソッドを呼び出します。このメソッドは XMLList を受け取り、発行者 "Addison-Wesley" に一致する各アイテムを返します。
<codeblock>
package {
    import flash.display.Sprite;

    public class XMLListExample extends Sprite {
        private var books:XML;

        public function XMLListExample() {
            books =    &lt;books>
                        &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                        &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                        &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                        &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                        &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                        &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                    &lt;/books>;

            showBooksByPublisher("Addison-Wesley");
        }

        private function showBooksByPublisher(name:String):void {
            var results:XMLList = books.book.(@publisher == name);
            showList(results);
        }

        private function showList(list:XMLList):void {
            var item:XML;
            for each(item in list) {
                trace("item: " + item.toXMLString());
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#XML"><linktext>XML</linktext></link><link href="statements.html#for_each..in"><linktext>for each..in</linktext></link><link href="#Namespace"><linktext>Namespace</linktext></link><link href="#QName"><linktext>QName</linktext></link></related-links><apiConstructor id="XMLList:XMLList"><apiName>XMLList</apiName><shortdesc>
	新しい XMLList オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList 
	</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>トップレベル関数 <codeph>XMLList()</codeph> によって XMLList オブジェクトに変換可能なオブジェクトです。
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	新しい XMLList オブジェクトを作成します。
	
	</apiDesc></apiConstructorDetail><related-links><link href="#global/XMLList()"><linktext>top-level XMLList() 関数</linktext></link></related-links></apiConstructor><apiOperation id="XMLList:AS3:attribute"><apiName>attribute</apiName><shortdesc>
	各 XML オブジェクトの attribute() メソッドを呼び出し、その結果の XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.attribute, attribute
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトが一致する XMLList オブジェクト、または空の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiType value=""/><apiDesc>XMLList オブジェクト内に含める属性の名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>attribute()</codeph> メソッドを呼び出し、その結果の XMLList オブジェクトを返します。この結果は、指定された <codeph>attributeName</codeph> パラメーターに一致します。一致する XML オブジェクトがなかった場合、<codeph>attribute()</codeph> メソッドは空の XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/attribute()"><linktext>XML.attribute()</linktext></link><link href="#XML/attributes()"><linktext>XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:attributes"><apiName>attributes</apiName><shortdesc>
	各 XML オブジェクトの attributes() メソッドを呼び出し、各 XML オブジェクトの属性の XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.attributes, attributes
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>各 XML オブジェクトの属性の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>attributes()</codeph> メソッドを呼び出し、各 XML オブジェクトの属性の XMLList オブジェクトを返します。 
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/attribute()"><linktext>XML.attribute()</linktext></link><link href="#XML/attributes()"><linktext>XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:child"><apiName>child</apiName><shortdesc>
	各 XML オブジェクトの child() メソッドを呼び出し、その結果を順に含む XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.child, child
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>入力パラメーターに一致する子ノードの XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>XML の子のエレメント名または整数です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>child()</codeph> メソッドを呼び出し、その結果を順に含む XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/child()"><linktext>XML.child()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:children"><apiName>children</apiName><shortdesc>
	各 XML オブジェクトの children() メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.children, children
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクト内の子（複数）の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>children()</codeph> メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/children()"><linktext>XML.children()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:comments"><apiName>comments</apiName><shortdesc>
	各 XML オブジェクトの comments() メソッドを呼び出し、コメントの XMLList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.comments, comments
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクト内のコメントの XMLList です。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>comments()</codeph> メソッドを呼び出し、コメントの XMLList を返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/comments()"><linktext>XML.comments()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:contains"><apiName>contains</apiName><shortdesc>
	指定された value パラメーターに等しい XML オブジェクトが XMLList オブジェクトに含まれるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.contains, contains
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>value</codeph> パラメーターで宣言された XML オブジェクトが XMLList オブジェクトに含まれる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>XML</apiOperationClassifier><apiDesc>現在の XMLList オブジェクトと比較する XML オブジェクトです。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>value</codeph> パラメーターに等しい XML オブジェクトが XMLList オブジェクトに含まれるかどうかを確認します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:copy"><apiName>copy</apiName><shortdesc>
	指定された XMLList オブジェクトのコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.copy, copy
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XMLList オブジェクトのコピーです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	指定された XMLList オブジェクトのコピーを返します。コピーとはノードのツリー全体の複製です。コピーされた XML オブジェクトに親はないので、<codeph>null</codeph> が返されます（<codeph>parent()</codeph> メソッドを呼び出した場合）。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:descendants"><apiName>descendants</apiName><shortdesc>
	指定された name パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.descendants, descendants
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元のリスト内の一致する XML オブジェクトの子孫（子、孫など）の XMLList オブジェクトです。子孫がない場合は、空の XMLList オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>*</apiData><apiDesc>照合するエレメントの名前です。
	
 	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>name</codeph> パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。<codeph>name</codeph> パラメーターには、QName オブジェクト、String データ型、または他の任意のデータ型（後で String データ型に変換されます）を指定できます。
	
	<p>すべての子孫を返すには、アスタリスク（~~）パラメーターを使用します。パラメーターを指定しない場合はストリング "~~" が渡され、XML オブジェクトのすべての子孫が返されます。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/descendants()"><linktext>XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:elements"><apiName>elements</apiName><shortdesc>
	各 XML オブジェクトの elements() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.elements, elements
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>一致する XML オブジェクトの子エレメントの XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>*</apiData><apiDesc>照合するエレメントの名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>elements()</codeph> メソッドを呼び出します。<codeph>name</codeph> パラメーターが <codeph>descendants()</codeph> メソッドに渡されます。パラメーターが渡されなかった場合、ストリング "~~" が <codeph>descendants()</codeph> メソッドに渡されます。
	
 	</apiDesc></apiOperationDetail><related-links><link href="#XML/elements()"><linktext>XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasComplexContent"><apiName>hasComplexContent</apiName><shortdesc>
	XMLList オブジェクトに複合内容が含まれるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.hasComplexContent, hasComplexContent
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XMLList オブジェクトに複合内容が含まれる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクトに複合内容が含まれるかどうかを確認します。XMLList オブジェクトが空でなく、次のいずれかの条件が true の場合に、XMLList オブジェクトは複合内容を持つと見なされます。 
	
	<ul>
	  <li>XMLList オブジェクトに、複合内容を持つ 1 つの XML アイテムが含まれている。</li>
	  <li>XMLList オブジェクトに複数のエレメントが含まれている。</li>
	</ul>
	
	</apiDesc></apiOperationDetail><related-links><link href="#XMLList/hasSimpleContent()"><linktext>hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()"><linktext>XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()"><linktext>XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasOwnProperty"><apiName>hasOwnProperty</apiName><shortdesc>
	p により指定されたプロパティをチェックします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.hasOwnProperty, hasOwnProperty
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>パラメーターが存在する場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>p</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>照合するプロパティです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	<codeph>p</codeph> により指定されたプロパティをチェックします。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:hasSimpleContent"><apiName>hasSimpleContent</apiName><shortdesc>
	XMLList オブジェクトに単純内容が含まれるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.hasSimpleContent, hasSimpleContent
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XMLList に単純内容が含まれる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクトに単純内容が含まれるかどうかを確認します。次のいずれかの条件が true の場合に、XMLList オブジェクトは単純内容を持つと見なされます。
	<ul>
	  <li>XMLList オブジェクトが空である。</li>
	  <li>XMLList オブジェクトに、単純内容を持つ 1 つの XML アイテムが含まれている。</li>
	  <li>XMLList オブジェクトにエレメントが含まれていない。</li>
	</ul>
	
	</apiDesc></apiOperationDetail><related-links><link href="#XMLList/hasComplexContent()"><linktext>hasComplexContent()</linktext></link><link href="#XML/hasComplexContent()"><linktext>XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()"><linktext>XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:length"><apiName>length</apiName><shortdesc>
	XMLList オブジェクト内のプロパティ数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.length, length
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XMLList オブジェクト内のプロパティ数です。 
	
	</apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクト内のプロパティ数を返します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:normalize"><apiName>normalize</apiName><shortdesc>
	隣接するテキストノードを結合し、XMLList 内のすべてのテキストノード、XMLList に含まれるすべての XML オブジェクト、および XMLList 内のすべての XML オブジェクトの子孫について、それぞれ空のテキストノードを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.normalize, normalize
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>正規化した XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	隣接するテキストノードを結合し、XMLList 内のすべてのテキストノード、XMLList に含まれるすべての XML オブジェクト、および XMLList 内のすべての XML オブジェクトの子孫について、それぞれ空のテキストノードを削除します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:parent"><apiName>parent</apiName><shortdesc>
	XMLList オブジェクト内のすべてのアイテムが同じ親を持つ場合、XMLList オブジェクトの親を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.parent, parent
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>親 XML オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクト内のすべてのアイテムが同じ親を持つ場合、XMLList オブジェクトの親を返します。XMLList オブジェクトが親を持たないか、異なる親を持つ場合、メソッドは <codeph>undefined</codeph> を返します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:processingInstructions"><apiName>processingInstructions</apiName><shortdesc>
	name パラメーターを指定した場合は、その名前を持つ処理命令を含む XMLList オブジェクトのすべての子を一覧表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.processingInstructions, processingInstructions
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>各 XML オブジェクトの処理命令を含む XMLList オブジェクトです。
	
 	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>*</apiData><apiDesc>照合する処理命令の名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	<codeph>name</codeph> パラメーターを指定した場合、その名前を持つ処理命令を含む XMLList オブジェクトのすべての子を一覧表示します。パラメーターを指定しなかった場合、メソッドは任意の処理命令を含む XMLList オブジェクトのすべての子を一覧表示します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/processingInstructions()"><linktext>XML.processingInstructions()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:propertyIsEnumerable"><apiName>propertyIsEnumerable</apiName><shortdesc>
	XML オブジェクトに適用される for..in ステートメント内で反復処理されるプロパティセット内に、プロパティ p があるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.propertyIsEnumerable, propertyIsEnumerable
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>for..in</codeph> ステートメント内でプロパティを反復処理できる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>p</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>確認するプロパティのインデックスです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	プロパティ <codeph>p</codeph> が、XMLList オブジェクトに適用される <codeph>for..in</codeph> ステートメント内で反復処理されるプロパティセット内にあるかどうかを確認します。<codeph>true</codeph> が返るのは、<codeph>toNumber(p)</codeph> が 0 より大きいか等しく、かつ XMLList オブジェクトの長さより小さい場合のみです。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:text"><apiName>text</apiName><shortdesc>
	各 XML オブジェクトの text() メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.text, text
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML テキストノードを表す XMLList オブジェクトのすべての XML プロパティの XMLList オブジェクトです。
	
 	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	各 XML オブジェクトの <codeph>text()</codeph> メソッドを呼び出し、その結果を含む XMLList オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#XML/text()"><linktext>XML.text()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toString"><apiName>toString</apiName><shortdesc>
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.toString, toString 
	
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトのストリング表現です。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。この変換の規則は、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかによって決まります。
	
	<ul>
		<li>XML オブジェクトに単純内容が含まれる場合、<codeph>toString()</codeph> は XML オブジェクトのストリング内容を返し、開始タグ、属性、名前空間宣言、および終了タグを削除します。</li> 
	</ul>
	
	<ul>
		<li> XML オブジェクトに複合内容が含まれる場合、<codeph>toString()</codeph> は、開始タグ、属性、名前空間宣言および終了タグを含む XML オブジェクト全体を表す、XML エンコードされたストリングを返します。</li>
	</ul>
	
	<p>XML オブジェクト全体を毎回返すには、<codeph>toXMLString()</codeph> メソッドを使用します。</p>
	
	
	</apiDesc><example conref="examples\XMLToStringExample1.as"> 次の例は、XML オブジェクトに単純内容が含まれる場合に <codeph>toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock>
var test:XML = &lt;type name="Joe">example&lt;/type>;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as"> 次の例は、XML オブジェクトに複合内容が含まれる場合に <codeph>toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock>
var test:XML = 
&lt;type name="Joe">
    &lt;base name="Bob">&lt;/base>
    example
&lt;/type>;
trace(test.toString());
  // &lt;type name="Joe">
  // &lt;base name="Bob"/>
  // example
  // &lt;/type> 
</codeblock></example></apiOperationDetail><related-links><link href="#XMLList/hasComplexContent()"><linktext>hasComplexContent()</linktext></link><link href="#XMLList/hasSimpleContent()"><linktext>hasSimpleContent()</linktext></link><link href="#XMLList/toXMLString()"><linktext>toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toXMLString"><apiName>toXMLString</apiName><shortdesc>
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.toXMLString, toXMLString
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトのストリング表現です。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクト内のすべての XML オブジェクトのストリング表現を返します。<codeph>toString()</codeph> メソッドとは異なり、<codeph>toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかに関係なく、常に XML オブジェクトの開始タグ、属性、および終了タグを返します。<codeph>toString()</codeph> メソッドは、単純内容を持つ XML オブジェクトの開始タグ、属性、および終了タグを削除します。
	
	
	</apiDesc></apiOperationDetail><related-links><link href="#XMLList/toString()"><linktext>toString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLList, XMLList.valueOf, valueOf
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>現在の XMLList オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XMLList オブジェクトを返します。 
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="globalClassifier:Error"><apiName>Error</apiName><shortdesc>
 Error クラスには、スクリプトで発生したエラーに関する情報が含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>スクリプトでエラーが発生した場合に Error をスローします。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Error クラスには、スクリプトで発生したエラーに関する情報が含まれています。ActionScript 3.0 アプリケーションの開発では、コンパイルしたコードを Flash Player のデバッグ版で実行すると、Error 型またはサブクラスの例外がダイアログボックスに表示されるので、コードのトラブルシューティングに役立ちます。Error オブジェクトを作成するには、<codeph>Error</codeph> コンストラクター関数を使用します。一般には、<codeph>try</codeph> コードブロック内から新しい Error オブジェクトをスローします。そして、<codeph>catch</codeph> コードブロックまたは <codeph>finally</codeph> コードブロックでこれをキャッチします。
 <p>Error クラスのサブクラスを作成し、そのサブクラスのインスタンスをスローすることもできます。</p>
 
 </apiDesc><example conref="examples\ErrorExample.as"> 次の例は、<codeph>ErrorExample</codeph> クラスを使用して、カスタムエラーを作成する方法を示しています。これを行うには、以下の手順を実行します。
 <ol>
     <li>Array 型のローカル変数 <codeph>nullArray</codeph> を宣言しますが、新しい Array オブジェクトは作成されません。</li>
     <li>コンストラクターはエラー処理コードセグメント内で <codeph>push()</codeph> メソッドを使用して、初期化されていない配列に値をロードしようとします。このエラー処理セグメントは、<codeph>CustomError</codeph> クラス（<codeph>Error</codeph> の拡張）を使用してカスタムエラーをキャッチします。</li>
     <li>CustomError がスローされると、コンストラクターはこれをキャッチし、<codeph>trace()</codeph> ステートメントを使用してエラーメッセージを出力します。 </li>
 </ol>
<codeblock>
package
{
    import flash.display.Sprite;
    public class ErrorExample extends Sprite 
    {
        private var nullArray:Array;
        public function ErrorExample() 
        {
            try 
            {
                nullArray.push("item");
            }
            catch(e:Error) 
            {
                throw new CustomError("nullArray is null");
            }
        }
    }
}

class CustomError extends Error 
{
    public function CustomError(message:String) 
    {
        super(message);
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Error:Error"><apiName>Error</apiName><shortdesc>
	 新しい Error オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Error オブジェクトに関連付けられたストリング。このパラメーターはオプションです。 
     </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>特定のエラーメッセージに関連付ける参照番号です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>指定されたエラーメッセージを持つ新しい Error インスタンスを作成します。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 新しい Error オブジェクトを作成します。<codeph>message</codeph> を指定した場合は、その値がオブジェクトの <codeph>Error.message</codeph> プロパティに割り当てられます。
	 
	 
	 </apiDesc><example conref="examples\Error.1.as"> 次の例では、新しい Error オブジェクト <codeph>err</codeph> を作成し、次に <codeph>Error()</codeph> コンストラクターを使用して、ストリング <codeph>"New Error Message"</codeph> を <codeph>err</codeph> に割り当てます。
<codeblock>

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message
</codeblock></example></apiConstructorDetail><related-links><link href="statements.html#throw"><linktext>statements.html#throw</linktext></link><link href="statements.html#try..catch..finally"><linktext>statements.html#try..catch..finally</linktext></link></related-links></apiConstructor><apiOperation id="Error:getStackTrace"><apiName>getStackTrace</apiName><shortdesc>
	 エラーの構築時にエラーの呼び出しスタックをストリングで返します（デバッグ版の Flash Player および AIR Debug Launcher（ADL）のみ）。デバッグ版の Flash Player または ADL を使用していない場合は、null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, call stack
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>呼び出しスタックのストリング表現です。
	 
	 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>エラーの呼び出しスタックを読み取り可能形式で返します。
	 
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 エラーの構築時にエラーの呼び出しスタックをストリングで返します（デバッグ版の Flash Player および AIR Debug Launcher（ADL）のみ）。デバッグ版の Flash Player または ADL を使用していない場合は、<codeph>null</codeph> を返します。次の例に示されているように、戻り値の先頭行は、例外オブジェクトのストリング表現で、その後にはスタックトレースエレメントが続きます。
	 
	 <codeblock>
	 TypeError: null cannot be converted to an object
	     at com.xyz.OrderEntry.retrieveData(OrderEntry.as:995)
	     at com.xyz.OrderEntry.init(OrderEntry.as:200)
	     at com.xyz.OrderEntry.$construct(OrderEntry.as:148)
   	 </codeblock>
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Error:toString"><apiName>toString</apiName><shortdesc>
	
	デフォルトでは "Error" というストリングを返します。Error.message プロパティが定義されている場合は、その値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error.toString, toString
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>エラーメッセージです。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>エラーメッセージを返します。メッセージが定義されていない場合は、"Error" という語を返します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	
	デフォルトでは <codeph>"Error"</codeph> というストリングを返します。<codeph>Error.message</codeph> プロパティが定義されている場合は、その値を返します。
	
    </apiDesc><example conref="examples\Error.toString.1.as"> 次の例では、新しい Error オブジェクト <codeph>err</codeph> を作成し、次に <codeph>Error()</codeph> コンストラクターを使用して、ストリング <codeph>"New Error Message"</codeph> を <codeph>err</codeph> に割り当てます。最後に、<codeph>message</codeph> プロパティには <codeph>"Another New Error Message"</codeph> が設定され、<codeph>"New Error Message"</codeph> は上書きされます。
 
<codeblock>

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message

err.message = "Another New Error Message";
trace(err.toString());    // Error: Another New Error Message
</codeblock></example></apiOperationDetail><related-links><link href="#Error/message"><linktext>Error.message</linktext></link><link href="statements.html#throw"><linktext>statements.html#throw</linktext></link><link href="statements.html#try..catch..finally"><linktext>statements.html#try..catch..finally</linktext></link></related-links></apiOperation><apiValue id="Error:message"><apiName>message</apiName><shortdesc>
	 Error オブジェクトに関連付けられたメッセージです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error.message, message
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>Error インスタンスに関連付けられたエラーメッセージです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Error オブジェクトに関連付けられたメッセージです。デフォルトでは、このプロパティの値は "<codeph>Error</codeph>" です。Error オブジェクトを作成する際に、<codeph>message</codeph> プロパティを指定するには、<codeph>Error</codeph> コンストラクター関数にエラーストリングを渡します。
	 
	 
 	 </apiDesc></apiValueDetail><related-links><link href="statements.html#throw"><linktext>statements.html#throw</linktext></link><link href="statements.html#try..catch..finally"><linktext>statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:name"><apiName>name</apiName><shortdesc>
	  Error オブジェクトの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error.name, name
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>Error インスタンスの名前です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	  Error オブジェクトの名前です。デフォルトでは、このプロパティの値は "<codeph>Error</codeph>" です。
	 
 	 </apiDesc></apiValueDetail><related-links><link href="statements.html#throw"><linktext>statements.html#throw</linktext></link><link href="statements.html#try..catch..finally"><linktext>statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:errorID:get"><apiName>errorID</apiName><shortdesc>
     特定のエラーメッセージに関連付けられた参照番号です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error.errorID, errorID
      
      </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>エラー番号です。
     
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     特定のエラーメッセージに関連付けられた参照番号です。カスタム Error オブジェクトの場合、この番号はコンストラクターで提供される <codeph>id</codeph> パラメーターの値です。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:TypeError"><apiName>TypeError</apiName><shortdesc>
 TypeError 例外は、オペランドの予期される型と実際の型が異なる場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error, TypeError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 TypeError 例外は、オペランドの予期される型と実際の型が異なる場合にスローされます。 
 <p>
 また、この例外は次の状況でスローされます。
  <ul>
  <li>関数またはメソッドの実際のパラメーターを、形式上必要とされるパラメーターの型に強制的に変換できない場合。</li>
  <li>変数に割り当てられた値を、その変数の型に強制的に変換できない場合。</li>
  <li><codeph>is</codeph> または <codeph>instanceof</codeph> 演算子の右辺が有効な型でない場合。</li>
  <li><codeph>super</codeph> キーワードの使用方法が不正な場合。</li>
  <li>プロパティへの参照が複数のバインディングに解決され、結果があいまいである場合</li>
  <li>互換性のないオブジェクトに対してメソッドが呼び出された場合。例えば、RegExp クラスのメソッドが汎用オブジェクトに移植されて呼び出された場合などに TypeError 例外がスローされます。</li>
 </ul>
 </p>
 
 </apiDesc><example conref="examples\TypeErrorExample.as"> 次の例は、TypeError 例外が <codeph>try..catch</codeph> ステートメント内でどのように生成され、処理されるかを示しています。 
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;

    public class TypeErrorExample extends Sprite {
        public function TypeErrorExample() {
            try {
                var child:Object = new Object();
                addChild(DisplayObject(child));
            }
            catch(e:TypeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="operators.html#is"><linktext>is 演算子</linktext></link><link href="operators.html#instanceof"><linktext>instanceof 演算子</linktext></link><link href="statements.html#super"><linktext>super ステートメント</linktext></link><link href="#RegExp"><linktext>RegExp クラス</linktext></link></related-links><apiConstructor id="TypeError:TypeError"><apiName>TypeError</apiName><shortdesc>
	 新しい TypeError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>TypeError オブジェクトに関連付けられたメッセージです。 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい TypeError オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="globalClassifier:arguments"><apiName>arguments</apiName><shortdesc>
 arguments オブジェクトは、関数の引数を保存したり、引数にアクセスする場合に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="8"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>arguments オブジェクトは、関数の引数を保存したり、引数にアクセスする場合に使用されます。
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 arguments オブジェクトは、関数の引数を保存したり、引数にアクセスする場合に使用されます。関数の本体に含まれる場合、arguments オブジェクトにはローカルの arguments 変数を使用してアクセスできます。
 <p>
 引数は配列エレメントとして保存され、最初の引数は <codeph>arguments[0]</codeph> として、2 番目の引数は <codeph>arguments[1]</codeph> のようにアクセスされます。<codeph>arguments.length</codeph> プロパティは、関数に渡される引数の数を示します。関数で宣言された数と異なる数の引数が渡される場合もあります。
 </p>
 <p>
 以前のバージョンの ActionScript とは異なり、ActionScript 3.0 には <codeph>arguments.caller</codeph> プロパティがありません。現在の関数を呼び出した関数への参照を取得するには、その関数への参照を引数として渡す必要があります。このテクニックの例については、<codeph>arguments.callee</codeph> の例を参照してください。
 </p>
 <p>ActionScript 3.0 では、新しく <codeph>...(rest)</codeph> キーワードが含まれています。arguments クラスではなく、このステートメントを使用することをお勧めします。</p>
 
 </apiDesc><example conref="examples\ArgumentsExample.as"> 次の例では、さまざまな <codeph>arguments</codeph> プロパティ（<codeph>callee</codeph> や <codeph>length</codeph> など）の使用方法を示しています。
<codeblock>
package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        public function ArgumentsExample() {
                println("Hello World");
        }
        
        public function println(str:String):void {
            trace(arguments.callee == this.println); // true
            trace(arguments.length);                 // 1
            trace(arguments[0]);                     // Hello World
            trace(str);                                // Hello World
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="statements.html#..._(rest)_parameter"><linktext>...(rest)</linktext></link><link href="#Function"><linktext>関数</linktext></link></related-links><apiValue id="arguments:callee"><apiName>callee</apiName><shortdesc>
	 現在実行中の関数への参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="8"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Function</apiValueClassifier><apiTipTexts><apiTipText>現在実行中の関数への参照です。
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 現在実行中の関数への参照です。
	 
	 </apiDesc><example conref="examples\arguments.callee.1.as"> 次のコードは、<codeph>secondFunction()</codeph> という名前の関数を呼び出す関数への参照を取得します。<codeph>firstFunction()</codeph> 関数は、ブール値引数 <codeph>true</codeph> を持ち、<codeph>secondFunction()</codeph> が <codeph>firstFunction()</codeph> を正常に呼び出していることを示して、各関数が他方の関数を相互に呼び出すことによる無限ループを防ぎます。
  
 <p><codeph>callSecond</codeph> パラメーターが <codeph>true</codeph> であるため、<codeph>firstFunction()</codeph> は <codeph>secondFunction()</codeph> を呼び出し、自身への参照を唯一の引数として渡します。関数 <codeph>secondFunction()</codeph> は、データ型が Function で、<codeph>caller</codeph> という名前のパラメーターを使用して、この引数を受け取り、保存します。次に、<codeph>secondFunction()</codeph> 内から、<codeph>caller</codeph> パラメーターで <codeph>firstFunction</codeph> 関数を呼び出します。ただし、このとき <codeph>callSecond</codeph> 引数を <codeph>false</codeph> に設定します。</p>
 <p>実行が <codeph>firstFunction()</codeph> に戻ると、<codeph>trace()</codeph> ステートメントが実行されます。これは、<codeph>callSecond</codeph> が <codeph>false</codeph> であるためです。</p>
<codeblock>
  package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        private var count:int = 1;
        
        public function ArgumentsExample() {
            firstFunction(true);
        }

        public function firstFunction(callSecond:Boolean) {
            trace(count + ": firstFunction");
            if(callSecond) {
                secondFunction(arguments.callee);
            }
            else {
                trace("CALLS STOPPED");
            }
        }

        public function secondFunction(caller:Function) {
            trace(count + ": secondFunction\n");
            count++;
            caller(false);
        }        
    }
} 
</codeblock></example></apiValueDetail></apiValue><apiValue id="arguments:length"><apiName>length</apiName><shortdesc>
	 関数に渡される引数の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="8"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>関数に渡されるパラメーターの数です。
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 関数に渡される引数の数です。関数で宣言された数よりも増減する場合があります。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:String"><apiName>String</apiName><shortdesc>
 String クラスは、文字のストリングを表すデータ型です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 String クラスは、文字のストリングを表すデータ型です。String クラスは、プリミティブなストリング値の型の操作を可能にするメソッドとプロパティを提供します。<codeph>String()</codeph> 関数を使用して任意のオブジェクトの値を String データ型オブジェクトに変換できます。 
 <p> 
 <codeph>concat()</codeph>、<codeph>fromCharCode()</codeph>、<codeph>slice()</codeph>、<codeph>substr()</codeph> を除く String クラスのすべてのメソッドは汎用メソッドです。つまり、メソッドが <codeph>toString()</codeph> を呼び出した後で、メソッドの操作が実行されます。これらのメソッドは String オブジェクト以外のオブジェクトでも使用できます。 
 </p><p>
 すべてのストリングインデックスはゼロから始まるため、各ストリング <codeph>x</codeph> の最終文字のインデックスは <codeph>x.length - 1</codeph> のようになります。
 </p><p>
 コンストラクターメソッド <codeph>new String()</codeph> を使用して新しいストリング変数を作成するか、または単にストリングリテラル値を割り当てるかにかかわらず、String クラスのメソッドをどれでも呼び出すことができます。旧バージョンの ActionScript とは異なり、String クラスのメソッドには、コンストラクターを使用するか、グローバル関数を使用するか、または単にストリングリテラル値を割り当てるかによる違いはありません。次の各行のコードは同じです。
 </p>
 <codeblock rev="3.0">
 var str:String = new String("foo");
 var str:String = "foo";
 var str:String = String("foo");</codeblock>
 <p>ストリング変数を <codeph>undefined</codeph> に設定すると、Adobe <sup>®</sup> Flash <sup>®</sup> Player により <codeph>undefined</codeph> が <codeph>null</codeph> に型変換されます。次に例を示します。</p>
 <pre>
 var s:String = undefined;</pre>
 このステートメントでは、値は <codeph>null</codeph> に設定されます。<codeph>undefined</codeph> には設定されません。<codeph>String()</codeph> 関数は、<codeph>undefined</codeph> を使用する必要がある場合に使用します。
 </apiDesc><example conref="examples\StringExample.as"> 次の例では、StringExample クラスと StringHelper クラスを使用して、String クラスのさまざまなメソッドの使用法を示します。ここでは以下の手順を実行します。
 <ol>
    <li>StringExample のコンストラクターは、いくつかのローカルの String インスタンスを宣言します。これらのインスタンスはさまざまなストリングと新しい StringHelper オブジェクトにより初期化されます。</li>
    <li>StringHelper クラスには次のメソッドがあります。
    <ul>
        <li><codeph>replace()</codeph>：String メソッドの <codeph>split()</codeph> と <codeph>join()</codeph> を呼び出して、新しいストリングに渡されるストリングのサブストリングを削除します。</li>
        <li><codeph>trim()</codeph>：渡されたストリングを使用して <codeph>trimBack()</codeph> と <codeph>trimFront()</codeph> の両方を呼び出し、更新されたストリングを返します。</li>
        <li><codeph>trimFront()</codeph>：ストリングの先頭から末尾に向かって文字を比較し、<codeph>char</codeph> パラメーターに一致するすべての文字を、最初に <codeph>char</codeph> パラメーターに一致しない文字が現れるまで、再帰的に削除します。そして更新されたストリングを返します。</li>
        <li><codeph>trimBack()</codeph>：ストリングの末尾から先頭に向かって文字を比較し、<codeph>char</codeph> パラメーターに一致するすべての文字を、最初に <codeph>char</codeph> パラメーターに一致しない文字が現れるまで、再帰的に削除します。そして更新されたストリングを返します。</li>
        <li><codeph>stringToCharacter()</codeph>：渡されたストリングの先頭文字を返します。</li>
    </ul>
  </li>
    <li>宣言されているストリング変数を使用して、2 番目のストリングの作成に <codeph>replace()</codeph> メソッド、3 番目のストリングの作成に <codeph>trim()</codeph> メソッドを呼び出して、3 つのストリングを作成します。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;

    public class StringExample extends Sprite {
        public function StringExample() {
            var companyStr:String = new String("     Company X");
            var productStr:String = "Product Z Basic     ";
            var emptyStr:String = " ";
            var strHelper:StringHelper = new StringHelper();

            var companyProductStr:String = companyStr + emptyStr + productStr;
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Basic     '

            companyProductStr = strHelper.replace(companyProductStr, "Basic", "Professional");
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Professional     '

            companyProductStr = strHelper.trim(companyProductStr, emptyStr);
            trace("'" + companyProductStr + "'");    // 'Company X Product Z Professional'
        }
    }
}

class StringHelper {
    public function StringHelper() {
    }

    public function replace(str:String, oldSubStr:String, newSubStr:String):String {
        return str.split(oldSubStr).join(newSubStr);
    }

    public function trim(str:String, char:String):String {
        return trimBack(trimFront(str, char), char);
    }

    public function trimFront(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(0) == char) {
            str = trimFront(str.substring(1), char);
        }
        return str;
    }

    public function trimBack(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(str.length - 1) == char) {
            str = trimBack(str.substring(0, str.length - 1), char);
        }
        return str;
    }

    public function stringToCharacter(str:String):String {
        if (str.length == 1) {
            return str;
        }
        return str.slice(0, 1);
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="package.html#String()"><linktext>String 関数</linktext></link></related-links><apiConstructor id="String:String"><apiName>String</apiName><shortdesc>
  指定されたストリングに初期化された新しい String オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, new string, new, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>新しい String オブジェクトの初期値です。
  
  </apiDesc></apiParam></apiConstructorDef><apiDesc>
  指定されたストリングに初期化された新しい String オブジェクトを作成します。
  
  <p>
  <b>注意：</b>ストリングリテラルの方が String オブジェクトよりもオーバーヘッドが少なく、一般的により簡単に使用できます。String オブジェクトを使用する特別な理由がある場合以外は、String クラスよりもストリングリテラルを使用することをお勧めします。
  </p>
  
  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="String:AS3:charAt"><apiName>charAt</apiName><shortdesc>
     index パラメーターで指定された位置にある文字を返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.charat, charat, character at
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定されたインデックス位置にある文字です。指定されたインデックスがこのストリングのインデックスの範囲外である場合は、空のストリングが返されます。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>ストリング内の文字の位置を示す整数です。最初の文字の位置は <codeph>0</codeph> で、最後の文字の位置は <codeph>my_str.length - 1</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>index</codeph> パラメーターで指定された位置にある文字を返します。<codeph>index</codeph> に指定された値が 0 ～ <codeph>string.length - 1</codeph>  の範囲外にある場合は、空のストリングを返します。
	 <p>
	 このメソッドは <codeph>String.charCodeAt()</codeph> に似ていますが、16 ビット整数の文字コードではなく文字が返される点が異なります。
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/charCodeAt()"><linktext>charCodeAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:charCodeAt"><apiName>charCodeAt</apiName><shortdesc>
	 指定された index にある文字の数値 Unicode 文字コードを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.charcodeat, charcodeat, character code at
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定されたインデックスにある文字の Unicode 文字コードを返します。または、インデックスがこのストリングのインデックスの範囲外である場合は、<codeph>NaN</codeph> を返します。
	 <p><xref href="" scope="external"/> </p>		 
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>ストリング内の文字の位置を示す整数です。最初の文字の位置は <codeph>0,</codeph> で、最後の文字の位置は <codeph>my_str.length - 1</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された <codeph>index</codeph> にある文字の数値 Unicode 文字コードを返します。<codeph>index</codeph> に指定された値が 0 ～ <codeph>string.length - 1</codeph> の範囲外にある場合は、<codeph>NaN</codeph> を返します。
	 <p>
	 このメソッドは、<codeph>String.charAt()</codeph> と似ていますが、実際の文字ではなく 16 ビット整数文字コードを返す点が異なります。
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/charAt()"><linktext>charAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:concat"><apiName>concat</apiName><shortdesc>
	 指定された引数を必要に応じてストリングに変換し、String オブジェクトの最後に追加して結果のストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.concat, concat, concatenate
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定のパラメーターにより連結されたこのストリングで構成される新しいストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>連結される 0 個以上の値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された引数を必要に応じてストリングに変換し、String オブジェクトの最後に追加して結果のストリングを返します。ソースの String オブジェクトの元の値は変更されません。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:fromCharCode"><apiName>fromCharCode</apiName><shortdesc>
	パラメーター内の Unicode 文字コードに対応する文字をストリングとして返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.fromcharcode, fromcharcode, from character code
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiStatic/><apiReturn><apiDesc>指定された Unicode 文字コードのストリング値です。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>charCodes</apiItemName><apiType value="restParam"/><apiDesc>Unicode 値を表す一連の 10 進整数です。
	<p><xref href="" scope="external"/> </p>	
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	パラメーター内の Unicode 文字コードに対応する文字をストリングとして返します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:indexOf"><apiName>indexOf</apiName><shortdesc>
	 ストリング内を検索し、ストリング内の startIndex 以降で、最初に val が見つかった位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.indexof, indexof, index
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定のサブストリングまたは <codeph>-1</codeph> で最初に見つかった指定のサブストリングのインデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>検索対象のストリングです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>検索を開始するインデックスを示す整数です。これはオプションです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリング内を検索し、<codeph>val</codeph> が、ストリング内の <codeph>startIndex</codeph> 以降で最初に見つかった位置を返します。このインデックスはゼロから始まります。つまりストリングの最初の文字は、インデックス 1 ではなくインデックス 0 にあると見なされます。<codeph>val</codeph> が見つからない場合、メソッドは -1 を返します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/lastIndexOf()"><linktext>lastIndexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
	 ストリングを右から左へと検索し、startIndex の前で最後に現れる val のインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.lastindexof, lastindexof, last index of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>最後に見つかった指定のサブストリングの位置です。見つからなかった場合は -1 を返します。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>val</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>検索対象のストリングです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0x7FFFFFFF</apiData><apiDesc><codeph>val</codeph> の検索を開始するインデックスを示す整数です。これはオプションです。デフォルトは、インデックスに許可されている最大値です。<codeph>startIndex</codeph> が指定されていない場合、ストリング内の最後のアイテムから検索が開始されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリングを右から左へと検索し、<codeph>val</codeph> のインデックスで <codeph>startIndex</codeph> の前で最後に現れるものを返します。このインデックスはゼロから始まります。つまり最初の文字はインデックス 0 にあり、最後の文字は <codeph>string.length - 1</codeph> にあります。<codeph>val</codeph> が見つからなかった場合は、<codeph>-1</codeph> を返します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/indexOf()"><linktext>indexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:localeCompare"><apiName>localeCompare</apiName><shortdesc>
	 複数のストリングのソート順を比較し、比較の結果を整数で返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングが等しい場合、値 0 になります。それ以外の場合、元のストリングがストリング引数より前に来る場合は負の整数、ストリング引数が元のストリングより前に来る場合は正の整数になります。どちらの場合も、数値の絶対値は 2 つのストリングの違いを表します。
	  
	  </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>比較するストリング値です。
     </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>比較するストリングの追加セットです。これはオプションです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 複数のストリングのソート順を比較し、比較の結果を整数で返します。このメソッドはロケール特有の方法で比較を処理することを目的としますが、ActionScript 3.0 実装では、等価（<codeph>==</codeph>）演算子または不等価（<codeph>!=</codeph>）演算子などのその他のストリング比較と異なる結果を生成しません。 ストリングが等価の場合、戻り値は 0 になります。 元のストリング値が <codeph>other</codeph> で指定されたストリング値より前に来る場合、戻り値は負の整数になります。この値の絶対値は、2 つのストリング値の間にある文字数を表します。 元のストリング値が <codeph>other</codeph> の後に来る場合、戻り値は正の整数になります。この値の絶対値は、2 つのストリング値を隔てる文字数を表します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:match"><apiName>match</apiName><shortdesc>
	指定された pattern をストリングと照合します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample><pre><code>
		 var myPattern:RegExp = /sh./g;  
			// The dot (.) matches any character.
	 var str:String = "She sells seashells by the seashore.";
	 trace(str.match(myPattern));  
	
	 	// Output: she,sho
	
		 myPattern = /sh./gi;  
			// This time, make it case insensitive (with the i flag).
	 str = "She sells seashells by the seashore.";
	 trace(str.match(myPattern));  
	
	 	// Output: She,she,sho	
	
		 myPattern = RegExp = new RegExp("sh(.)", "gi")  
			// Note the grouping parentheses.
	 str = "She sells seashells by the seashore.";
	 trace(str.match(myPattern));  
	
		// Output: She,e,she,e,sho,o
		 	// Note that the result array is 
			// [[She,e],[she,e],[sho,o]] 
	</code></pre>
	
	</oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定された <codeph>pattern</codeph> と一致するストリング内のすべてのサブストリングで構成されるストリングの配列です。
	
	<p><codeph>pattern</codeph> が正規表現の場合、一致するサブストリングを複数含む配列を返すには、正規表現の中に <codeph>g</codeph>（グローバル）フラグを設定する必要があります。 </p>
	
	<ul>
	
		<li><codeph>g</codeph>（グローバル）フラグを設定<i>しない</i>場合、返される配列には一致するサブストリングが 1 つだけ含まれ、正規表現の <codeph>lastIndex</codeph> プロパティは変更されません。</li> 
	
		<li><codeph>g</codeph>（グローバル）フラグを設定<i>した</i>場合、メソッドはストリングの先頭（インデックス位置 0）から検索を開始します。<codeph>/x~~/</codeph> などの正規表現を使用する場合、一致するサブストリングが空のストリングであることがあります。その場合、メソッドはその空のストリングを一致するサブストリングの配列に追加し、次のインデックス位置から検索を続行します。メソッドが完了すると、正規表現の <codeph>lastIndex</codeph> プロパティは 0 に設定されます。 </li>
	
	</ul>
	
	<p>一致するサブストリングが見つからなかった場合、メソッドは <codeph>null</codeph> を返します。<codeph>pattern</codeph> パラメーターの値を渡さなかった場合、または未定義値を渡した場合、メソッドは <codeph>null</codeph> を返します。</p>
	
	
	</apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>pattern</apiItemName><apiType value=""/><apiDesc>照合するパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。<codeph>pattern</codeph> が正規表現でもストリングでもない場合、メソッドは実行する前にこれをストリングに変換します。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>pattern</codeph> をストリングと照合します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#RegExp"><linktext>RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:replace"><apiName>replace</apiName><shortdesc>
	指定された pattern をストリングと照合し、新しいストリングを返します。この新しいストリングでは、pattern と最初に一致した部分が repl で指定された内容に置き換えられます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果のストリングです。ソースストリングは変更されていません。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>pattern</apiItemName><apiType value=""/><apiDesc>照合するパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。ストリングまたは正規表現以外のオブジェクトを <codeph>pattern</codeph> パラメーターに指定した場合、<codeph>toString()</codeph> メソッドがパラメーターに適用され、<codeph>replace()</codeph> メソッドが実行されます。このとき、結果のストリングが <codeph>pattern</codeph> として使用されます。 
	
	</apiDesc></apiParam><apiParam><apiItemName>repl</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>通常は、一致した内容に置き換えるストリングです。ただし、このパラメーターに関数を指定することもできます。関数を指定した場合、一致した内容が、関数によって返されるストリングに置き換えられます。
	
	<p><codeph>repl</codeph> パラメーターにストリングを指定し、<codeph>pattern</codeph> パラメーターに正規表現を指定した場合、次の特殊な <i>$ 置換コード</i>を <codeph>repl</codeph> ストリングに使用することができます。</p>
	
	<adobetable class="innertable">
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<tgroup cols="2"><thead><row><entry NOWRAP="true">$ コード
		</entry><entry>置換テキスト
		</entry></row></thead><tbody><row>
	
		<entry><codeph>$$</codeph>
		</entry>
	
		<entry><codeph>$</codeph>
		</entry>
	
	</row><row>
	
		<entry><codeph>$&amp;</codeph>
		</entry>
	
		<entry>パターンに一致したサブストリング
		</entry>
	
	</row><row>
	
		<entry><codeph>$`</codeph>	
		</entry>
	
		<entry>ストリングのうち、パターンに一致したサブストリングより前の部分です。このコードで使用する記号は、直線状の左一重引用符（`）です。垂直の一重引用符（'）または曲がった左一重引用符（‘）ではありません。
		</entry>
	
	</row><row>
	
		<entry><codeph>$'</codeph>
		</entry>
	
		<entry>ストリングのうち、パターンに一致したサブストリングより後の部分です。このコードで使用する記号は、垂直の一重引用符（'）です。
		</entry>
	
	</row><row>
	
		<entry><codeph>$</codeph> <i>n</i>
		</entry>
	
		<entry>括弧指定されたグループの <i>n</i> 番目の一致です。<i>n</i> は 1 桁の数字（1 ～ 9）であり、<codeph>$</codeph> <i>n</i> の後に 10 進数字は続きません。 
		</entry>
	
	</row><row>
	
		<entry><codeph>$</codeph> <i>nn</i>
		</entry>
	
		<entry>括弧指定されたグループの <i>nn</i> 番目一致です。<i>nn</i> は 2 桁の 10 進数字（01 ～ 99）です。<i>nn</i> 番目のパターンが未定義の場合、置換テキストは空のストリングになります。 
		</entry>
	
	</row></tbody></tgroup></adobetable>
	
	<p>例えば、次の例は、1 番目および 2 番目に一致したキャプチャグループを表す <codeph>$2</codeph> および <codeph>$1</codeph> 置換コードを使用する方法を示しています。</p>
	
	<codeblock>var str:String = "flip-flop";
	var pattern:RegExp = /(\w+)-(\w+)/g;
	trace(str.replace(pattern, "$2-$1")); // flop-flip</codeblock>
	
	<p><codeph>repl</codeph> として関数を指定した場合、<codeph>replace()</codeph> メソッドは次のパラメーターを関数に渡します。
	</p>
	
	<ul>
	
		<li>
		ストリング内の一致する部分。
		</li>
	
		<li>
		キャプチャされた、括弧指定されたグループとのすべての一致が次の引数として提供されます。この方法で渡される引数の数は、括弧内のパターンとの一致数によって異なります。括弧内のパターンとの一致数は、関数コード内の <codeph>arguments.length - 3</codeph> を確認して特定することができます。
		</li>
	
		<li>
		ストリング内で一致部分が始まる場所のインデックス位置。
		</li>
	
		<li>
		ストリング全体。
		</li>
	
	</ul>
	
	<p>次に例を示します。</p>
	
	<codeblock>
	var str1:String = "abc12 def34";
	var pattern:RegExp = /([a-z]+)([0-9]+)/;
	var str2:String = str1.replace(pattern, replFN);
	trace (str2);   // 12abc 34def
	
	function replFN():String {
		return arguments[2] + arguments[1];
	}</codeblock>
	
	
	<p>この例では、<codeph>replace()</codeph> メソッドの呼び出しに、関数を <codeph>repl</codeph> パラメーターとして使用しています。正規表現（<codeph>/([a-z]([0-9]/g</codeph>）は 2 回一致しています。1 回目は、パターンがサブストリング <codeph>"abc12"</codeph> に一致し、次の引数のリストが関数に渡されます。
	</p>
	
	<codeblock>
	{"abc12", "abc", "12", 0, "abc12 def34"}</codeblock>
	
	
	<p>2 回目は、パターンがサブストリング <codeph>"def23"</codeph> に一致し、次の引数のリストが関数に渡されます。
	</p>
	
	<codeblock>
	{"def34", "def", "34", 6, "abc123 def34"}</codeblock>
	
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>pattern</codeph> をストリングと照合し、新しいストリングを返します。この新しいストリングでは、<codeph>pattern</codeph> と最初に一致した部分が <codeph>repl</codeph> で指定された内容に置き換えられます。<codeph>pattern</codeph> パラメーターには、ストリングまたは正規表現を指定できます。<codeph>repl</codeph> パラメーターには、ストリングまたは関数を指定できます。関数を指定した場合、一致した部分は、関数によって返されるストリングに置き換えられます。元のストリングは変更されません。
	
	<p>次の例では、"sh"（大文字と小文字は区別）の最初のインスタンスのみが置き換えられます。 </p>
	
	<codeblock>
	var myPattern:RegExp = /sh/;  
	var str:String = "She sells seashells by the seashore.";
	trace(str.replace(myPattern, "sch"));  
	   // She sells seaschells by the seashore.</codeblock>
	
	<p>次の例では、<codeph>g</codeph>（グローバル）フラグが正規表現で設定されているので、"sh"（大文字と小文字は区別）のすべてのインスタンスが置き換えられます。 </p>
	
	<codeblock>
	var myPattern:RegExp = /sh/g;  
	var str:String = "She sells seashells by the seashore.";
	trace(str.replace(myPattern, "sch"));  
	   // She sells seaschells by the seaschore.</codeblock>
	
	<p>次の例では、正規表現の中に <codeph>g</codeph>（グローバル）フラグが設定されているので、"sh" のすべてのインスタンスが置き換えられます。また、一致は大文字と小文字を区別 <i>しません</i>。<codeph>i</codeph>（ignoreCase）フラグが設定されているためです。</p>
	
	<codeblock>
	var myPattern:RegExp = /sh/gi;  
	var str:String = "She sells seashells by the seashore.";
	trace(str.replace(myPattern, "sch"));  
	   // sche sells seaschells by the seaschore.</codeblock>
	
	</apiDesc></apiOperationDetail><related-links><link href="#RegExp"><linktext>RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:search"><apiName>search</apiName><shortdesc>
	指定された pattern を検索し、最初に一致したサブストリングのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample><pre><code>
	 var str:String = "She sells seashells by the seashore.";
		 var myPattern:RegExp = /sh/;  
			// This time, make it case insensitive (with the i flag).
	 trace(str.match(myPattern));  
	
		// Output: 13
		// (The substring match starts at character position 13.)
	
		 var myPattern:RegExp = /sh/i;
	 trace(str.match(myPattern));  
	
		// Output: 0
		// (The substring match starts at character position 0 
			//   -- the first character of the source string.)
	</code></pre>
	
	</oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>最初に一致したサブストリングのインデックスを返します。また一致するサブストリングがない場合は <codeph>-1</codeph> を返します。ストリングのインデックスはゼロから始まり、ストリングの先頭の文字はインデックス 0、最後の文字は <codeph>string.length - 1</codeph> です。 
	
	</apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>pattern</apiItemName><apiType value=""/><apiDesc>照合するパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。<codeph>pattern</codeph> が正規表現でもストリングでもない場合、メソッドは実行する前にこれをストリングに変換します。正規表現を指定した場合、メソッドは正規表現のグローバルフラグ（"g"）を無視し、また正規表現の <codeph>lastIndex</codeph> プロパティを無視し、元のまま維持します。未定義の値を渡した場合、または値を渡さなかった場合、メソッドは <codeph>-1</codeph> を返します。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>pattern</codeph> を検索し、最初に一致したサブストリングのインデックスを返します。一致するサブストリングがなかった場合、メソッドは <codeph>-1</codeph> を返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="#RegExp"><linktext>RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:slice"><apiName>slice</apiName><shortdesc>
	 返されるストリングには、startIndex 文字から endIndex 文字の前までのすべての文字が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.slice, slice
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定されたインデックスに基づくサブストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>スライスの始点のゼロから始まるインデックスです。<codeph>startIndex</codeph> が負の数値の場合、スライスは右から左に作成されます。このとき、-1 が最後の文字です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0x7fffffff</apiData><apiDesc>スライスの終点のインデックスより 1 大きい整数値です。<codeph>endIndex</codeph> パラメーターで指定されたインデックス位置の文字は、抽出されるストリングには含まれません。<codeph>endIndex</codeph> が負の数値の場合、終点はストリングの終わりからカウントされて決定されます。このとき、-1 が最後の文字になります。デフォルトは、インデックスに許可されている最大値です。このパラメーターを省略すると、<codeph>String.length</codeph> が使用されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返されるストリングには、<codeph>startIndex</codeph> 文字から <codeph>endIndex</codeph> 文字の前までのすべての文字が含まれます。元の String オブジェクトは変更されません。<codeph>endIndex</codeph> パラメーターを指定しない場合、サブストリングの終わりがストリングの終わりになります。<codeph>startIndex</codeph> で指定されたインデックス文字が、<codeph>endIndex</codeph> で指定されたインデックス文字と同じか、その右側にある場合、メソッドは空のストリングを返します。
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/substr()"><linktext>substr()</linktext></link><link href="#String/substring()"><linktext>substring()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:split"><apiName>split</apiName><shortdesc>
	 指定された delimiter パラメーターがある各位置で String オブジェクトをサブストリングの配列に分割します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.split, split
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>サブストリングの配列です。
	 
	 
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>delimiter</apiItemName><apiType value=""/><apiDesc>このストリングを分割する場所を示すパターンです。パターンには任意の型のオブジェクトを指定できますが、一般的にストリングまたは正規表現を使用します。<codeph>delimiter</codeph> が正規表現でもストリングでもない場合、メソッドは実行する前にこれをストリングに変換します。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>limit</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0x7fffffff</apiData><apiDesc>配列に挿入するアイテムの最大数です。デフォルトは、許可されている最大値です。 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された <codeph>delimiter</codeph> パラメーターがある各位置で String オブジェクトをサブストリングの配列に分割します。 
	 
	 <p><codeph>delimiter</codeph> パラメーターが正規表現の場合、ストリング内の特定の位置で見つかった最初の一致のみが考慮されます。バックトラッキングにより、同じ位置で空でないサブストリングの一致が見つかったとしても、それは考慮されません。次に実際の使用例を示します。</p>
	 
	 <codeblock rev="3.0">
	 var str:String = "ab";
	 var results:Array = str.split(/a~~?/); // results == ["","b"]
	 
	 results = str.split(/a~~/); // results == ["","b"].)</codeblock>
	 
	 
	 <p><codeph>delimiter</codeph> パラメーターがグループ化括弧を含む正規表現の場合、<codeph>delimiter</codeph> が一致するたびに、未定義結果を含むグループ化括弧の結果が出力配列にスプライスされます。次に例を示します。</p>
	 
	 <codeblock rev="3.0">
	 var str:String = "Thi5 is a tricky-66 example.";
	 var re:RegExp = /(\d+)/;
	 var results:Array = str.split(re);
	     // results == ["Thi","5"," is a tricky-","66"," example."]</codeblock>
	 
	 
	 <p><codeph>limit</codeph> パラメーターを指定した場合、配列には指定された数を超えるエレメントは返されません。</p>
     <p><codeph>delimiter</codeph> が空のストリング、空の正規表現、または空のストリングも一致とされる正規表現の場合、ストリング内のそれぞれの 1 文字が配列内のエレメントとして出力されます。</p>
     
     <p><codeph>delimiter</codeph> パラメーターが未定義の場合は、ストリング全体が、返される配列の最初のエレメントに挿入されます。 </p>     
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Array/join()"><linktext>Array.join()</linktext></link><link href="#RegExp"><linktext>RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:substr"><apiName>substr</apiName><shortdesc>
	 startIndex で指定された位置から len で指定された長さの文字を含むサブストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.substr, substr, substring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定されたパラメーターに基づくサブストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>サブストリングの作成に使用する先頭文字のインデックスを示す整数です。<codeph>startIndex</codeph> が負の数値の場合、始点はストリングの終わりから決定されます。このとき、<codeph>-1</codeph> が最後の文字になります。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>len</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0x7fffffff</apiData><apiDesc>作成するサブストリングの文字数です。デフォルト値は、許可されている最大値です。<codeph>len</codeph> を指定しないと、サブストリングには <codeph>startIndex</codeph> から終わりまでのすべての文字が含まれます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>startIndex</codeph> で指定された位置から <codeph>len</codeph> で指定された長さの文字を含むサブストリングを返します。元のストリングは変更されません。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:substring"><apiName>substring</apiName><shortdesc>
	 startIndex で指定された位置から endIndex - 1 までのすべての文字を含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.substring, substring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>指定されたパラメーターに基づくサブストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>サブストリングの作成に使用する先頭文字のインデックスを示す整数です。<codeph>startIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>String.length</codeph> です。<codeph>startIndex</codeph> が負の値の場合、<codeph>0</codeph> が使用されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0x7fffffff</apiData><apiDesc>抽出するサブストリングの最後の文字のインデックスに 1 を加えた整数です。<codeph>endIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>String.length</codeph> です。<codeph>endIndex</codeph> にある文字はサブストリングに含まれません。デフォルトは、インデックスに許可されている最大値です。このパラメーターを省略すると、<codeph>String.length</codeph> が使用されます。このパラメーターが負の値である場合は、<codeph>0</codeph> が使用されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>startIndex</codeph> で指定された位置から <codeph>endIndex - 1</codeph> までにあるすべての文字を含むストリングを返します。<codeph>endIndex</codeph> が指定されていない場合、<codeph>String.length</codeph> が使用されます。<codeph>startIndex</codeph> の値が <codeph>endIndex</codeph> の値と等しい場合、空のストリングが返されます。<codeph>startIndex</codeph> の値が <codeph>endIndex</codeph> の値より大きい場合、関数を実行する前にパラメーターが自動的に入れ替わります。元のストリングは変更されません。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:toLocaleLowerCase"><apiName>toLocaleLowerCase</apiName><shortdesc>
	 このストリングのコピーを返します。すべての大文字が小文字に変換されます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>このストリングのコピーです。すべての大文字が小文字に変換されます。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 このストリングのコピーを返します。すべての大文字が小文字に変換されます。元のストリングは変更されません。このメソッドはロケールに特化した方法で変換を処理することを目的としていますが、ActionScript 3.0 実装では、<codeph>toLowerCase()</codeph> メソッドと異なる結果を生成しません。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/toLowerCase()"><linktext>toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLocaleUpperCase"><apiName>toLocaleUpperCase</apiName><shortdesc>
	 このストリングのコピーを返します。すべての小文字が大文字に変換されます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>このストリングのコピーです。すべての小文字が大文字に変換されます。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 このストリングのコピーを返します。すべての小文字が大文字に変換されます。元のストリングは変更されません。このメソッドはロケールに特化した方法で変換を処理することを目的としていますが、ActionScript 3.0 実装では、<codeph>toUpperCase()</codeph> メソッドと異なる結果を生成しません。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/toUpperCase()"><linktext>toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLowerCase"><apiName>toLowerCase</apiName><shortdesc>
	 このストリングのコピーを返します。すべての大文字が小文字に変換されます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.tolowercase, tolowercase, to lowercase
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>このストリングのコピーです。すべての大文字が小文字に変換されます。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 このストリングのコピーを返します。すべての大文字が小文字に変換されます。元のストリングは変更されません。
	 
	 <p>このメソッドは、対応する Unicode の小文字が存在するすべての文字（単に A ～ Z ではない）を変換します。</p>
	 
	 <codeblock>
	 var str:String = " JOSÉ BARÇA";
	 trace(str.toLowerCase()); // josé barça</codeblock>
	 
	 <p><xref href="" scope="external"/> </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/toUpperCase()"><linktext>toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toUpperCase"><apiName>toUpperCase</apiName><shortdesc>
	 このストリングのコピーを返します。すべての小文字が大文字に変換されます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.touppercase, touppercase, to uppercase
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>このストリングのコピーです。すべての小文字が大文字に変換されます。
	 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 このストリングのコピーを返します。すべての小文字が大文字に変換されます。元のストリングは変更されません。
	 
	 <p>このメソッドは、対応する Unicode の大文字が存在するすべての文字（単に a ～ z ではない）を変換します。</p>
	 
	 <codeblock>
	 var str:String = "José Barça";
	 trace(str.toUpperCase()); // JOSÉ BARÇA</codeblock>
	 
	 <p><xref href="" scope="external"/> </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#String/toLowerCase()"><linktext>toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	 String インスタンスのプリミティブ値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><oldexample>The following example creates a new instance of the String class
	 and then shows that the <code>valueOf</code> method returns 
	 the <i>primitive</i> value, rather than a reference to the new instance.
	 
	 <listing version="2.0">
	 var str:String = new String("Hello World");
	 var value:String = str.valueOf();
	 trace(str instanceof String); // true
	 trace(value instanceof String); // false
	 trace(str === value); // false</listing>
	 
	 
	 </oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングの値です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 String インスタンスのプリミティブ値を返します。このメソッドは、String オブジェクトをプリミティブなストリング値に変換するように設計されています。Flash Player は必要時に自動的に <codeph>valueOf()</codeph> を呼び出すようになっているので、このメソッドを明示的に呼び出すことが必要となることはほとんどありません。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="String:length:get"><apiName>length</apiName><shortdesc>
	 指定した String オブジェクト内にある文字数を表す整数です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>string, string.length, length
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 指定した String オブジェクト内にある文字数を表す整数です。
	 <p>
	 すべてのストリングインデックスはゼロから始まるため、各ストリング <codeph>x</codeph> の最終文字のインデックスは <codeph>x.length - 1</codeph> のようになります。
	 </p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:Class"><apiName>Class</apiName><shortdesc>
 Class オブジェクトはプログラム内の各クラス定義に対して作成されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Class オブジェクトはプログラム内の各クラス定義に対して作成されます。Class オブジェクトはすべて Class クラスのインスタンスです。Class オブジェクトにはクラスの静的プロパティとメソッドが含まれます。<codeph>new</codeph> 演算子を使用してクラスオブジェクトを呼び出すと、クラスのインスタンスが作成されます。
 
 <p><codeph>flash.net.getClassByAlias()</codeph> などの一部のメソッドは、Class 型のオブジェクトを返します。それ以外のメソッドは、<codeph>flash.net.registerClassAlias()</codeph> などの Class 型のパラメーターを持つ場合があります。 </p>
 <p>クラス名は、次に例を示すように、Class オブジェクトへの参照です。</p>
 <pre> 
 class Foo {
 }
 </pre> 
 <p><codeph>class Foo{}</codeph> ステートメントは Class オブジェクト Foo を作成するクラス定義です。また、<codeph>new Foo()</codeph> ステートメントは、Foo クラスの新しいインスタンスを作成します。結果は Foo 型になります。</p>
 <p><codeph>class</codeph> ステートメントを使用してクラスを宣言します。次の例で示すように、Class オブジェクトは、実行時に既存インスタンスオブジェクトへクラスを割り当てるといった、高度な手法の場合に使用します。</p>
 <p>クラスの静的プロパティとメソッドは、クラスの Class オブジェクトに存在します。クラス自体は <codeph>prototype</codeph> を宣言します。</p>
 
 <p>通常は、Class 型の変数を手動で宣言または作成する必要はありません。ただし、次に示すコードでは、クラスがパブリックの Class プロパティ <codeph>circleClass</codeph> として割り当てられ、この Class プロパティをメインの Library クラスのプロパティとして参照することができます。</p>
 <codeblock>
 package {
  import flash.display.Sprite;
  public class Library extends Sprite {
      
      public var circleClass:Class = Circle;
      public function Library() {
      }
  }
 }
  
 import flash.display.Shape;
 class Circle extends Shape {
  public function Circle(color:uint = 0xFFCC00, radius:Number = 10) {
      graphics.beginFill(color);
      graphics.drawCircle(radius, radius, radius);
  }
 }
 </codeblock>
 
 <p>別の SWF ファイルによって、作成された Library.swf ファイルがロードされ、Circle 型のオブジェクトがインスタンス化されることがあります。次の例は、子 SWF ファイルのアセットにアクセスする 1 つの方法を示しています。他に、<codeph>flash.utils.getDefnitionByName()</codeph> を使用するか、子 SWF ファイルのスタブ定義をインポートするという方法もあります。</p>
 
 <codeblock>
 package {
  import flash.display.Sprite;
  import flash.display.Shape;
  import flash.display.Loader;
  import flash.net.URLRequest;
  import flash.events.Event;
  public class LibaryLoader extends Sprite {
      public function LibaryLoader() {
          var ldr:Loader = new Loader();
          var urlReq:URLRequest = new URLRequest("Library.swf");
          ldr.load(urlReq);
          ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded);
      }
      private function loaded(event:Event):void {
          var library:Object = event.target.content;
          var circle:Shape = new library.circleClass();
          addChild(circle);
      }
  }
 }
 </codeblock>
 <p>ActionScript 3.0 では、SWF ファイルにコンパイルされる外部アセット（イメージ、サウンド、フォントなど）に対して埋め込みクラスを作成できます。以前のバージョンの ActionScript では、<codeph>MovieClip.attachMovie()</codeph> メソッドで、リンケージ識別子を使って外部アセットを関連付けていました。ActionScript 3.0 では、各埋め込みアセットが固有の埋め込みアセットクラスによって表されます。そのため、<codeph>new</codeph> 演算子を使用してアセットの関連クラスをインスタンス化することや、それらのアセットについてメソッドやプロパティを呼び出すことができます。</p>
 <p product="flex">例えば、MXML コンパイラーを使用して SWF ファイルを生成する場合、次のように埋め込みクラスを作成します。</p>
 <codeblock product="flex">
     [Embed(source="bratwurst.jpg")]
     public var imgClass:Class;
 </codeblock>
 <p product="flex">さらに、これをインスタンス化するために、次のコードを追加します。</p>
 <codeblock product="flex">
     var myImg:Bitmap = new imgClass();
 </codeblock>
 
 </apiDesc><example conref="examples\Class.1.as"> 次の例は、以下に示す手順に従って、Class オブジェクを使用して、インスタンス化するクラスの決定を実行時まで保留する方法を示しています。
 <ol>
     <li>2 つのクラスを <codeph>ClassA</codeph> と <codeph>ClassB</codeph> として宣言します。 </li>
     <li><codeph>classToConstruct</codeph> という名前の Class 型の変数と Boolean 型の変数 <codeph>chooseClassA</codeph> を宣言します。この例では、この Boolean 型の変数を <codeph>true</codeph> に設定していますが、コードでカスタムテスト式を使用してこの変数の値を設定することができます。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    
    public class ClassExample extends Sprite {
        public function ClassExample() {
            var classToConstruct:Class;            
            var classInstance:Object;

            classToConstruct = ClassA;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassA]

            classToConstruct = ClassB;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassB]
        }
    }
}

class ClassA {
}
    
class ClassB {
}
</codeblock></example></apiClassifierDetail><related-links><link href="#Object/prototype"><linktext>Object.prototype</linktext></link><link href="operators.html#new"><linktext>new 演算子</linktext></link></related-links></apiClassifier><apiClassifier id="globalClassifier:Namespace"><apiName>Namespace</apiName><shortdesc>

Namespace クラスには、名前空間を定義して操作するためのメソッドとプロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Namespace
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>Namespace クラスには、XML オブジェクトの名前空間を定義して操作するためのメソッドとプロパティが含まれています。

</apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>

Namespace クラスには、名前空間を定義して操作するためのメソッドとプロパティが含まれています。名前空間を使用するシナリオには、次の 3 つがあります。

<ul>
<li> <b>XML オブジェクトの名前空間：</b>名前空間により名前空間接頭辞と、名前空間を識別する URI（Uniform Resource Identifier）を関連付けます。接頭辞は、XML オブジェクト内の名前空間を参照する場合に使用されるストリングです。接頭辞が未定義の場合、XML がストリングに変換されたときに接頭辞が自動的に生成されます。
</li>

<li> <b>メソッドを区別するための名前空間：</b>名前空間により同名のメソッドを区別し、異なるタスクを実行できるようにします。2 つのメソッドの名前が同じでも、名前空間が異なる場合は、それぞれのメソッドで別のタスクを実行することができます。
</li>

<li> <b>アクセス制御するための名前空間：</b>名前空間を使用して、クラス内のプロパティとメソッドのグループへのアクセスを制御できるようにします。プロパティとメソッドをプライベートの名前空間に配置すると、その名前空間へのアクセス権を持たないコードからそれらのプロパティとメソッドにアクセスできなくなります。他のクラス、メソッド、または関数に名前空間を渡すことによって、プロパティとメソッドのグループへのアクセスを許可することができます。
</li>
</ul>

<p>このクラスは、2 つの形式のコンストラクターメソッドを示しています。それぞれの形式が異なるパラメーターを受け入れるからです。</p>

<p>XML、XMLList、および QName などのクラス同様、Namespace クラスには、ECMAScript for XML（E4X）仕様（ECMA-357 Edition 2）で定義されている強力な XML 処理規格が実装されています。</p>

</apiDesc><example conref="examples\NamespaceExample.as"> 次の例は、XML オブジェクトに定義されている名前空間を操作する方法を示しています。これを行うには、以下の手順を実行します。
 <ol>
    <li>この例では 3 つの Namespace オブジェクトを定義します。各オブジェクトには、名前空間を定義する一意の URI を関連付けます。</li>
    <li><codeph>myXML</codeph> という名前の XML 変数を定義し、これを <codeph>getRSS()</codeph> の戻り値に割り当てます。<codeph>getRSS()</codeph> メソッドは、いくつかの名前空間を持つ XML オブジェクトを定義し、この XML オブジェクトを返します。</li>
    <li>この例では、<codeph>parseRSS()</codeph> メソッドに <codeph>myXML</codeph> を渡し、そのメソッドを呼び出すことで、Array 型の変数を宣言して評価しています。<codeph>parseRSS()</codeph> では、デフォルトの XML 名前空間として <codeph>rss</codeph> が定義されています。またこの例では <codeph>item</codeph> オブジェクト（<codeph>myXML</codeph> 内にある）のリストを割り当てて XMLList 変数が定義されています。配列が作成され、<codeph>myXML.item</codeph> 内のさまざまなノードが値として設定されます。その後、配列が返されます。</li>
    <li>配列内のエレメントは、<codeph>for</codeph> ループを使用し、<codeph>trace()</codeph> を 3 回呼び出すことで出力されます。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;

    public class NamespaceExample extends Sprite {
        private var rss:Namespace = new Namespace("http://purl.org/rss/1.0/");
        private var rdf:Namespace = new Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
        private var dc:Namespace  = new Namespace("http://purl.org/dc/elements/1.1/");

        public function NamespaceExample() {
            var myXML:XML = getRSS();
            var rssItems:Array = parseRSS(myXML);
            
            var len:uint = rssItems.length;
            for (var i:uint; i &lt; len; i++) {
                trace(rssItems[i].title);
                trace(rssItems[i].creator);
                trace(rssItems[i].date);
                // Adobe Flash Developer Center
                // Adobe
                // 2005-08-08
                // Flex Developer Center
                // Adobe
                // 2005-10-16                
            }
        }
        
        private function parseRSS(rssXML:XML):Array {
            default xml namespace = rss;

            var items:XMLList = rssXML.item;

            var arr:Array = new Array();            
            var len:uint = items.length();
            for (var i:uint; i &lt; len; i++) {
                arr.push({title:items[i].title, creator:items[i].dc::creator, date:items[i].dc::date});
            }
            
            return arr;
        }

        private function getRSS():XML {
            var myXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/"
            >
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19">
                &lt;title>Test RSS&lt;/title>
                &lt;link>http://www.adobe.com/&lt;/link>
                &lt;description>This is a test RSS document.&lt;/description>
                &lt;language>en-us&lt;/language>
                &lt;items>
                  &lt;rdf:Seq>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/>
                  &lt;/rdf:Seq>
                &lt;/items>
              &lt;/channel>
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/">
                &lt;title>Adobe Flash Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flash/&lt;/link>
                &lt;description>Welcome to the Flash Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-08-08&lt;/dc:date>    
              &lt;/item>
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/">
                &lt;title>Flex Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flex/&lt;/link>
                &lt;description>Welcome to the Flex Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-10-16&lt;/dc:date>    
              &lt;/item>
            &lt;/rdf:RDF>;
            
            return myXML;
        }
    }
}
</codeblock></example><example conref="examples\Namespace_2_Example.as"> 次の例は、名前空間を使用して、名前が同じでも実行するタスクが異なるメソッドを区別する方法を示しています。この例では、<codeph>hello()</codeph> という名前の 3 つのメソッドが別々の名前空間に存在しており、呼び出されたときにそれぞれが異なるストリングを返します。
<codeblock>
package {

    import flash.display.Sprite;

    public class Namespace_2_Example extends Sprite {    
        public function Namespace_2_Example() {
            var vocab:MultilingualVocabulary = new MultilingualVocabulary();

            trace(vocab.hello());    // hello
            
            var languages:Array = vocab.getLanguages();
            
            for (var i:uint; i &lt; languages.length; i++) {
                var ns:Namespace = languages[i];
                if (ns != null) {
                    trace(ns.toString() + ": " + vocab.ns::hello());
                    // hello
                    // MultilingualVocabulary:Hawaiian: aloha
                    // MultilingualVocabulary:French: bon jour
                }
            }
        }
    }    
}

class MultilingualVocabulary {
    public namespace French;
    public namespace Hawaiian;
    private var languages:Array;

    public function MultilingualVocabulary() {
        languages = new Array(Hawaiian, French);
    }
        
    public function hello():String { 
        return "hello";
    }

    Hawaiian function hello():String {
        return "aloha";
    }

    French function hello():String { 
        return "bon jour";
    }
        
    public function getLanguages():Array {
        return languages;
    }
}
</codeblock></example><example conref="examples\Namespace_3_Example.as"> 次の例では、名前空間名を使用して、適切な変数値を選択します。この例は、名前空間の値を変数に格納し、その変数を使用してその名前空間内のオブジェクトを参照する方法を示しています。
 <p>この例は、長方形のボタンについてのマウス状態に対応する名前空間と色を定義します。ボタンを描画するたびに、<codeph>bgcolor</codeph> 変数を参照して、適切な色（マウスが置かれていない out 状態では赤、マウスが上に置かれている over 状態では黄色、マウスボタンが押されている down 状態では白）を適用します。変数は、対応する名前空間（<codeph>out</codeph>、<codeph>over</codeph>、<codeph>down</codeph>）に対するものです。 </p>
<codeblock>
package {
    import flash.display.Sprite;
  
    public class Namespace_3_Example extends Sprite {     
        public function Namespace_3_Example() {
            addChild(new StateButton("Press Me."));
        }
    }
}

import flash.display.Sprite;
import flash.text.TextField;
import flash.events.Event;
import flash.events.MouseEvent;

class StateButton extends Sprite{
    private namespace out;
    private namespace over;
    private namespace down;
    private var label:TextField;
    private var labelTxt:String;
    private var ns:Namespace;
    out var bgColor:Number = 0xFF0000;
    over var bgColor:Number = 0xFFFF00;
    down var bgColor:Number = 0xFFFFFF;
      
    public function StateButton(str:String) {
        buttonMode = true;
        labelTxt = str;
        ns = out;
        draw();
        addLabel();
        addListeners();
    }

    private function addLabel():void {
        label = new TextField();
        label.text = labelTxt;
        label.width = 50;
        label.height = 20;
        label.mouseEnabled = false;
        addChild(label);
    }
      
    private function addListeners():void {
        addEventListener(MouseEvent.MOUSE_UP, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
    }
 
    private function mouseOutHandler(e:Event):void {
        ns = out;
        draw();
    }
 
    private function mouseOverHandler(e:Event):void {
        ns = over;
        draw();
    }
 
    private function mouseDownHandler(e:Event):void {
        ns = down;
        draw();
    }
 
    private function draw():void {
        this.graphics.clear();
        this.graphics.beginFill(ns::bgColor);
        this.graphics.drawRect(0, 0, 60, 20);
    }
} 
</codeblock></example></apiClassifierDetail><related-links><link href="#XML"><linktext>XML</linktext></link><link href="#XMLList"><linktext>XMLList</linktext></link><link href="#QName"><linktext>QName</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm"><linktext>ECMAScript for XML（E4X）specification（ECMA-357 edition 2）</linktext></link></related-links><apiConstructor id="Namespace:Namespace_0"><apiName>Namespace</apiName><shortdesc> 
	Namespace オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>uriValue</apiItemName><apiType value=""/><apiDesc>名前空間の URI です。
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>指定された uriValue で Namespace オブジェクトを作成します。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc> 
	Namespace オブジェクトを作成します。新しい Namespace オブジェクトの <codeph>uri</codeph> プロパティと <codeph>prefix</codeph> プロパティに割り当てられる値は、<codeph>uriValue</codeph> パラメーターに渡される値の型によって決まります。
	<ul>
	  <li>値が渡されない場合、<codeph>prefix</codeph> プロパティと <codeph>uri</codeph> プロパティは空のストリングに設定されます。</li>
	  <li>値が Namespace オブジェクトの場合、オブジェクトのコピーが作成されます。</li>
	  <li>値が QName オブジェクトの場合、<codeph>uri</codeph> プロパティは QName オブジェクトの <codeph>uri</codeph> プロパティに設定されます。</li>
	</ul>
    <p><b>注意：</b>このクラスは、2 つのコンストラクター項目を示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡されるパラメーターの型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="Namespace:Namespace_1"><apiName>Namespace</apiName><shortdesc> 
	prefixValue パラメーターと uriValue パラメーターの値に従って Namespace オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>prefixValue</apiItemName><apiType value=""/><apiDesc>名前空間に使用する接頭辞です。   
	
	</apiDesc></apiParam><apiParam><apiItemName>uriValue</apiItemName><apiType value=""/><apiDesc>名前空間の URI です。
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>指定された prefixValue と uriValue で Namespace オブジェクトを作成します。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc> 
	<codeph>prefixValue</codeph> パラメーターと <codeph>uriValue</codeph> パラメーターの値に従って Namespace オブジェクトを作成します。このコンストラクターには両方のパラメーターが必要です。
	<p><codeph>prefixValue</codeph> パラメーターの値は、次のように <codeph>prefix</codeph> プロパティに割り当てられます。</p>
	<ul>
	  <li><codeph>undefined</codeph> が渡された場合、<codeph>prefix</codeph> は <codeph>undefined</codeph> に設定されます。</li>
	  <li>値が <codeph>isXMLName()</codeph> 関数により有効な XML 名として判定された場合、この引数はストリングに変換されて <codeph>prefix</codeph> プロパティに割り当てられます。</li>
	  <li>値が無効な XML 名の場合、<codeph>prefix</codeph> プロパティは <codeph>undefined</codeph> に設定されます。</li>
	</ul>
	
	<p><codeph>uriValue</codeph> パラメーターの値は、次のように <codeph>uri</codeph> プロパティに割り当てられます。</p>
	<ul>
	  <li>QName オブジェクトが渡された場合、<codeph>uri</codeph> プロパティは QName オブジェクトの <codeph>uri</codeph> プロパティの値に設定されます。</li>
	  <li> それ以外の場合、<codeph>uriValue</codeph> パラメーターはストリングに変換され、<codeph>uri</codeph> プロパティに割り当てられます。</li>
	</ul>
    <p><b>注意：</b>このクラスは、2 つのコンストラクターメソッドを示しています。それぞれの形式が異なるパラメーターを受け入れるためです。コンストラクターの動作は、各項目で詳細を示すように、渡される引数の型と数によって異なります。ActionScript 3.0 はメソッドまたはコンストラクターのオーバーロードをサポートしていません。</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Namespace:AS3:toString"><apiName>toString</apiName><shortdesc>
	Namespace.uri プロパティと同等です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Namespace, Namespace.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングとしての名前空間の URI です。
	
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>Namespace.uri プロパティと同等です。 
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	<codeph>Namespace.uri</codeph> プロパティと同等です。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="Namespace:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
    指定されたオブジェクトの URI 値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Namespace, Namespace.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングとしての名前空間の URI です。
    
    
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>Namespace.uri プロパティと同等です。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    指定されたオブジェクトの URI 値を返します。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="Namespace:prefix:get"><apiName>prefix</apiName><shortdesc>
	名前空間の接頭辞です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Namespace, Namespace.prefix, prefix
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>名前空間の接頭辞です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	名前空間の接頭辞です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="Namespace:uri:get"><apiName>uri</apiName><shortdesc>
	名前空間の URI です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Namespace, Namespace.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>名前空間の URI です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	名前空間の URI です。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:XML"><apiName>XML</apiName><shortdesc>
	XML クラスには、XML オブジェクトを操作するためのメソッドとプロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>XML
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	XML クラスには、XML オブジェクトを操作するためのメソッドとプロパティが含まれています。XMLList、Namespace、および QName などのクラスと同様、XML クラスには ECMAScript for XML（E4X）仕様（ECMA-357 Edition 2）で定義されている強力な XML 処理規格が実装されています。
	
	<p><codeph>toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか複合内容が含まれるかに関係なく、XML オブジェクトのストリング表現を返します。</p>
	
	<p><b>注意：</b>ActionScript 2.0 の XML クラスと関連クラスは XMLDocument というクラス名に変更され、flash.xml パッケージに移行されています。XMLDocument は、後方互換性を維持する目的で ActionScript 3.0 に残されているものです。</p> 
	
	
    </apiDesc><example conref="examples\XMLExample.as"> 次の例では、最初に XML 変数を作成して、それにノードを追加します。次に XML プロパティを使用して、XML ノードを検出および出力します。属性名で情報を見つけるために、アットマーク（<codeph>@</codeph>）がいくつかの <codeph>trace()</codeph> 呼び出しで使用されています。
<codeblock>
package {
    import flash.display.Sprite;

    public class XmlExample extends Sprite {        
        public function XmlExample() {
            var employees:XML =
                &lt;employees>
                    &lt;employee ssn="123-123-1234">
                        &lt;name first="John" last="Doe"/>
                        &lt;address>
                            &lt;street>11 Main St.&lt;/street>
                            &lt;city>San Francisco&lt;/city>
                            &lt;state>CA&lt;/state>
                            &lt;zip>98765&lt;/zip>
                        &lt;/address>
                    &lt;/employee>
                    &lt;employee ssn="789-789-7890">
                        &lt;name first="Mary" last="Roe"/>
                        &lt;address>
                            &lt;street>99 Broad St.&lt;/street>
                            &lt;city>Newton&lt;/city>
                            &lt;state>MA&lt;/state>
                            &lt;zip>01234&lt;/zip>
                        &lt;/address>
                    &lt;/employee>
                &lt;/employees>;

            trace(employees.employee[0].address.zip);   // 98765

            trace(employees.employee[1].@ssn);          // 789-789-7890

            trace(employees.employee.name);             // &lt;name first="John" last="Doe"/>
                                                        // &lt;name first="Mary" last="Roe"/>

            trace(employees..zip[0]);                   // 98765

            trace(employees..@ssn[1]);                  // 789-789-7890

            trace(employees..name);                     // &lt;name first="John" last="Doe"/>
                                                        // &lt;name first="Mary" last="Roe"/>

            trace(employees.employee[0].address.*);     // &lt;street>11 Main St.&lt;/street>    
                                                        // &lt;city>San Francisco&lt;/city>
                                                        // &lt;state>CA&lt;/state>
                                                        // &lt;zip>98765&lt;/zip>
            var node:String = "zip";
            trace(employees.employee[0].address[node]); // 98765
            
            var attribute:String = "ssn";
            trace(employees.employee[1].@[attribute]);  // 789-789-7890
            
            for each (var num:XML in employees..@ssn) {
                trace(num);                             // 123-123-1234
            }                                           // 789-789-7890
            
            var ssnToFind:String = "789-789-7890";
            trace(employees.employee.(@ssn == ssnToFind).toXMLString());
                                                        // &lt;employee ssn="789-789-7890">
                                                        // &lt;name first="Mary" last="Roe"/>
                                                        // &lt;address>
                                                        // &lt;street>99 Broad St.&lt;/street>
                                                        // &lt;city>Newton&lt;/city>
                                                        // &lt;state>MA&lt;/state>
                                                        // &lt;zip>01234&lt;/zip>
                                                        // &lt;/address>
                                                        // &lt;/employee>
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#Namespace"><linktext>Namespace</linktext></link><link href="#QName"><linktext>QName</linktext></link><link href="#XMLList"><linktext>XMLList</linktext></link><link href="#XML/toXMLString()"><linktext>XML.toXMLString()</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm"><linktext>ECMAScript for XML（E4X）specification（ECMA-357 edition 2）</linktext></link></related-links><apiConstructor id="XML:XML"><apiName>XML</apiName><shortdesc> 
	新しい XML オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML
	</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>トップレベル関数 <codeph>XML()</codeph> によって XML に変換可能なオブジェクトです。
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc> 
	新しい XML オブジェクトを作成します。XML クラスのメソッドを呼び出す前に、コンストラクターを使用して XML オブジェクトを作成する必要があります。 
	
	<p><codeph>toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか複合内容が含まれるかに関係なく、XML オブジェクトのストリング表現を返します。</p>
	
	</apiDesc></apiConstructorDetail><related-links><link href="package.html#XML()"><linktext>top-level XML() function</linktext></link><link href="#XML/toXMLString()"><linktext>XML.toXMLString()</linktext></link></related-links></apiConstructor><apiOperation id="XML:AS3:addNamespace"><apiName>addNamespace</apiName><shortdesc>
	XML オブジェクトのスコープ内の名前空間セットに名前空間を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.addNamespace, addNamespace
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>名前空間が追加された新しい XML オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>ns</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>XML オブジェクトに追加する名前空間です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトのスコープ内の名前空間セットに名前空間を追加します。その名前空間が XML オブジェクトのスコープ内の名前空間セットに既に存在する（指定されたパラメーターに一致する接頭辞を持つ）場合、既存の名前空間の接頭辞は <codeph>undefined</codeph> に設定されます。入力パラメーターが Namespace オブジェクトの場合は、このオブジェクトが直接使用されます。入力パラメーターが QName オブジェクトの場合は、新しい名前空間の作成に入力パラメーターの URI が使用され、それ以外の場合は、入力パラメーターは String に変換され、名前空間がその String から作成されます。
	
	</apiDesc><example conref="examples\XML.addNamespace.1.as"> 次の例では、1 つの XML オブジェクトに定義されている名前空間を使用して、これを別の XML オブジェクトに適用します。
<codeblock>
var xml1:XML = &lt;ns:foo xmlns:ns="www.example.com/ns" />;
var nsNamespace:Namespace = xml1.namespace();

var xml2:XML = &lt;bar />;
xml2.addNamespace(nsNamespace);
trace(xml2.toXMLString()); // &lt;bar xmlns:ns="www.example.com/ns"/>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:appendChild"><apiName>appendChild</apiName><shortdesc>
	指定された子を XML オブジェクトのプロパティの最後に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.appendChild, appendChild
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される XML オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>追加する XML オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された子を XML オブジェクトのプロパティの最後に追加します。<codeph>appendChild()</codeph> メソッドは、XML オブジェクト、XMLList オブジェクト、または他の任意のデータ型（後で String データ型に変換されます）を受け取ります。 
    
    <p>XML ノードを削除するには、<codeph>delete</codeph>（XML）演算子を使用します。</p>
	
	</apiDesc><example conref="examples\XML.appendChild.1.as"> この例では、新しいエレメントを XML オブジェクトの子リストの最後に追加します。
<codeblock>
var xml:XML = 
        &lt;body>
            &lt;p>hello&lt;/p>
        &lt;/body>;
        
xml.appendChild(&lt;p>world&lt;/p>);    
trace(xml.p[0].toXMLString()); // &lt;p>hello&lt;/p>
trace(xml.p[1].toXMLString()); // &lt;p>world&lt;/p>
</codeblock></example></apiOperationDetail><related-links><link href="operators.html#delete_(XML)"><linktext>delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attribute"><apiName>attribute</apiName><shortdesc>
	attributeName パラメーターに一致する名前を持つ属性の XML 値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.attribute, attribute
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XMLList オブジェクトまたは空の XMLList オブジェクトです。属性値が定義されていない場合は空の XMLList を返します。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiType value=""/><apiDesc>属性の名前。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	<codeph>attributeName</codeph> パラメーターに一致する名前を持つ属性の XML 値を返します。属性は XML エレメント内にあります。例えば、<codeph>&lt;first gender="boy">John&lt;/first></codeph> の場合、エレメントは値 "<codeph>boy</codeph>" の "<codeph>gender</codeph>" という名前の属性を持ちます。
	
	<p><codeph>attributeName</codeph> パラメーターには任意のデータ型を指定できますが、String データ型を使用するのが最も一般的です。QName オブジェクト以外のオブジェクトを渡した場合、<codeph>attributeName</codeph> パラメーターは <codeph>toString()</codeph> メソッドを使用してパラメーターをストリングに変換します。 </p>
	
	<p>修飾名参照が必要な場合は、QName オブジェクトで渡すことができます。QName オブジェクトは名前空間とローカル名を定義するもので、属性の修飾名の定義に使用することができます。したがって、<codeph>attribute(qname)</codeph> の呼び出しは <codeph>attribute(qname.toString())</codeph> の呼び出しと同じではありません。</p>
	
	</apiDesc><example conref="examples\XMLAttributeExample1.as"> この例は、<codeph>attribute()</codeph> オブジェクトに渡される QName オブジェクトを示しています。<codeph>localName</codeph> プロパティは <codeph>attr</codeph> で、<codeph>namespace</codeph> プロパティは <codeph>ns</codeph> です。
<codeblock>
 var xml:XML = &lt;ns:node xmlns:ns = "http://uri" ns:attr = '7' />       
 var qn:QName = new QName("http://uri", "attr");
 trace (xml.attribute(qn)); // 7
</codeblock></example><example conref="examples\XMLAttributeExample2.as"> ActionScript の予約語と名前が一致する属性を返すには、次の例のように、属性識別（@）演算子ではなく <codeph>attribute()</codeph> メソッドを使用します。
<codeblock>
 var xml:XML = &lt;example class="first" />
 trace(xml.attribute("class"));
 
</codeblock></example></apiOperationDetail><related-links><link href="#XML/attributes()"><linktext>XML.attributes()</linktext></link><link href="#QName"><linktext>QName</linktext></link><link href="#Namespace"><linktext>Namespace</linktext></link><link href="#XML/elements()"><linktext>XML.elements()</linktext></link><link href="operators.html#attribute_identifier"><linktext>attribute 識別子（&amp;#064;）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attributes"><apiName>attributes</apiName><shortdesc>
	指定された XML オブジェクトの属性値のリストを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.attributes, attributes
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>属性値のリストです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	指定された XML オブジェクトの属性値のリストを返します。<codeph>name()</codeph> メソッドを <codeph>attributes()</codeph> メソッドと共に使用して属性の名前を返します。<codeph>xml.attributes()</codeph> は <codeph>xml.@*</codeph> と同じです。
	
	</apiDesc><example conref="examples\XMLAttributesExample1.as"> 次の例では、属性の名前を返します。

<codeblock>
var xml:XML=&lt;example id='123' color='blue'/>
trace(xml.attributes()[1].name()); //color
</codeblock></example><example conref="examples\XMLAttributesExample2.as"> この例は、すべての属性の名前を返します。
<codeblock>
 
var xml:XML = &lt;example id='123' color='blue'/>
var attNamesList:XMLList = xml.@*;

trace (attNamesList is XMLList); // true
trace (attNamesList.length()); // 2

for (var i:int = 0; i &lt; attNamesList.length(); i++)
{ 
    trace (typeof (attNamesList[i])); // xml
    trace (attNamesList[i].nodeKind()); // attribute
    trace (attNamesList[i].name()); // id and color
} 
</codeblock></example></apiOperationDetail><related-links><link href="#XML/attribute()"><linktext>XML.attribute()</linktext></link><link href="#XML/name()"><linktext>XML.name()</linktext></link><link href="operators.html#attribute_identifier"><linktext>&amp;#064; 演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:child"><apiName>child</apiName><shortdesc>
	XML オブジェクトの子を列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.child, child
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>入力パラメーターに一致する子ノードの XMLList オブジェクトです。 
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>XML の子のエレメント名または整数です。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトの子を列挙します。XML の 1 つの子は、1 つの XML エレメント、テキストノード、コメント、または処理命令です。 
	
	<p><codeph>propertyName</codeph> パラメーターを使用して、特定の XML の子の内容を列挙します。例えば、<codeph>&lt;first></codeph> という名前の子の内容を返すには、<codeph>child.name("first")</codeph> を使用します。子のインデックス番号を使用しても同じ結果が得られます。インデックス番号は、複数の XML の子のリスト内での子の位置を識別します。例えば、<codeph>name.child(0)</codeph> はリスト内の先頭の子を返します。 </p>
	
	<p>XML ドキュメント内のすべての子を出力するにはアスタリスク（~~）を使用します。例えば、<codeph>doc.child("~~")</codeph> となります。</p>  
	
	<p>子の総数を出力するには、<codeph>length()</codeph> メソッドを、アスタリスク（~~）パラメーターを指定した <codeph>child()</codeph> メソッドと共に使用します。例えば、<codeph>numChildren = doc.child("~~").length()</codeph> となります。</p>
	
	</apiDesc><example conref="examples\XML.child.1.as"> 次の例は、<codeph>child()</codeph> メソッドを使って指定された名前の子エレメントを識別する方法を示しています。
<codeblock>
var xml:XML = 
        &lt;foo>
            &lt;bar>text1&lt;/bar>
            &lt;bar>text2&lt;/bar>
        &lt;/foo>;
trace(xml.child("bar").length());  // 2
trace(xml.child("bar")[0].toXMLString()); // &lt;bar>text1&lt;/bar>
trace(xml.child("bar")[1].toXMLString()); // &lt;bar>text2&lt;/bar>
</codeblock></example></apiOperationDetail><related-links><link href="#XML/elements()"><linktext>XML.elements()</linktext></link><link href="#XMLList"><linktext>XMLList クラス</linktext></link><link href="#XML/length()"><linktext>XML.length()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:childIndex"><apiName>childIndex</apiName><shortdesc>
	親のコンテキスト内でのこの XML オブジェクトの 0 から始まるインデックス位置を識別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.childindex, childindex
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>オブジェクトの位置です。正の整数だけでなく、-1 も返します。
	
	</apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	親のコンテキスト内でのこの XML オブジェクトの 0 から始まるインデックス位置を識別します。
	
	</apiDesc><example conref="examples\XML.childIndex.1.as"> この例は、<codeph>childIndex()</codeph> メソッドの使用法を示しています。
<codeblock>
var xml:XML = 
            &lt;foo>
                &lt;bar />
                text
                &lt;bob />
            &lt;/foo>;
trace(xml.bar.childIndex()); // 0
trace(xml.bob.childIndex()); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:children"><apiName>children</apiName><shortdesc>
	XML オブジェクトの子を、出現する順序で列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.children, children
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトの子の XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトの子を、出現する順序で列挙します。XML の 1 つの子は、1 つの XML エレメント、テキストノード、コメント、または処理命令です。 
	
	</apiDesc><example conref="examples\XML.children.1.as"> この例は、<codeph>children()</codeph> メソッドの使用法を示しています。
<codeblock>
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var xml:XML = 
        &lt;foo id="22">
            &lt;bar>44&lt;/bar>
            text
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml.children().length()); // 4
trace(xml.children()[0].toXMLString()); // &lt;bar>44&lt;/bar>
trace(xml.children()[1].toXMLString()); // text
trace(xml.children()[2].toXMLString()); // &lt;!-- comment -->
trace(xml.children()[3].toXMLString()); // &lt;?instruction ?>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:comments"><apiName>comments</apiName><shortdesc>
	XML コメントを持つ XML オブジェクトのプロパティを列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.comments, comments
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>コメントを持つプロパティの XMLList オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML コメントを持つ XML オブジェクトのプロパティを列挙します。
	
	</apiDesc><example conref="examples\XML.comments.1.as"> この例は、<codeph>comments()</codeph> メソッドの使用法を示しています。
<codeblock>
XML.ignoreComments = false;
var xml:XML = 
        &lt;foo>
            &lt;!-- example -->
            &lt;!-- example2 -->
        &lt;/foo>;
trace(xml.comments().length()); // 2
trace(xml.comments()[1].toXMLString()); // &lt;!-- example2 -->
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:contains"><apiName>contains</apiName><shortdesc>
	XML オブジェクトと、指定された value パラメーターを比較します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.contains, contains
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトが <codeph>value</codeph> パラメーターに一致する場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>XML</apiOperationClassifier><apiDesc>現在の XML オブジェクトと比較する値です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトと、指定された <codeph>value</codeph> パラメーターを比較します。 
	
	</apiDesc><example conref="examples\XML.contains.1.as"> この例は、<codeph>contains()</codeph> メソッドの使用法を示しています。
<codeblock>
var xml:XML = 
        &lt;order>
            &lt;item>Rice&lt;/item>
            &lt;item>Kung Pao Shrimp&lt;/item>
        &lt;/order>;
trace(xml.item[0].contains(&lt;item>Rice&lt;/item>)); // true
trace(xml.item[1].contains(&lt;item>Kung Pao Shrimp&lt;/item>)); // true
trace(xml.item[1].contains(&lt;item>MSG&lt;/item>)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:copy"><apiName>copy</apiName><shortdesc>
	指定された XML オブジェクトのコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.copy, copy
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>オブジェクトのコピーです。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	指定された XML オブジェクトのコピーを返します。コピーとはノードのツリー全体の複製です。コピーされた XML オブジェクトに親はないので、<codeph>null</codeph> が返されます（<codeph>parent()</codeph> メソッドを呼び出した場合）。
    
	</apiDesc><example conref="examples\XML.copy.1.as"> この例では、<codeph>copy()</codeph> メソッドは XML オブジェクトの新しいインスタンスを作成しています。コピーを修正しても、元のオブジェクトは変更されません。
<codeblock>
var xml1:XML = &lt;foo />;
var xml2:XML = xml1.copy();
xml2.appendChild(&lt;bar />);
trace(xml1.bar.length()); // 0
trace(xml2.bar.length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:defaultSettings"><apiName>defaultSettings</apiName><shortdesc>
	プロパティ ignoreComments、ignoreProcessingInstructions、ignoreWhitespace、prettyIndent、および prettyPrinting を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.defaultSettings, defaultSettings
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiStatic/><apiReturn><apiDesc>プロパティをデフォルト値に設定したオブジェクトです。
	
	</apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	プロパティ <codeph>ignoreComments</codeph>、<codeph>ignoreProcessingInstructions</codeph>、<codeph>ignoreWhitespace</codeph>、<codeph>prettyIndent</codeph>、および <codeph>prettyPrinting</codeph> をデフォルト値に設定したオブジェクトを返します。デフォルト値は次のとおりです。
	
	<ul>
	   <li><codeph>ignoreComments = true</codeph></li>
	   <li><codeph>ignoreProcessingInstructions = true</codeph></li>
	   <li><codeph>ignoreWhitespace = true</codeph></li>
	 <li><codeph>prettyIndent = 2</codeph></li>
	   <li><codeph>prettyPrinting = true</codeph></li>
	</ul>
	
	<p><b>注意：</b>このメソッドを XML クラスのインスタンスには適用しません。次のコードのように、<codeph>XML</codeph> に適用します。<codeph>var df:Object = XML.defaultSettings()</codeph> . </p>
	
	</apiDesc><example conref="examples\XML.defaultSettings.1.as"> 次の例は、XML オブジェクトを設定する前に、コメントおよび処理命令を配置するカスタム設定を適用する方法、別のXML オブジェクトを設定する前にデフォルト設定に戻す方法、さらに別の XML オブジェクトの設定のために再度カスタム設定を適用する方法を示しています。
<codeblock>
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links><link href="#XML/ignoreComments"><linktext>XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions"><linktext>XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace"><linktext>XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent"><linktext>XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link><link href="#XML/setSettings()"><linktext>XML.setSettings()</linktext></link><link href="#XML/settings()"><linktext>XML.settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:descendants"><apiName>descendants</apiName><shortdesc>
	指定された name パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.descendants, descendants
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>一致する子孫の XMLList オブジェクトです。子孫がない場合は、空の XMLList オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>*</apiData><apiDesc>照合するエレメントの名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>name</codeph> パラメーターを持つ XML オブジェクトのすべての子孫（子、孫、ひ孫など）を返します。<codeph>name</codeph> パラメーターはオプションです。<codeph>name</codeph> パラメーターには、QName オブジェクト、String データ型、または他の任意のデータ型（後で String データ型に変換されます）を指定できます。
	
	<p>すべての子孫を返すには、"~~" パラメーターを使用します。パラメーターを指定しない場合はストリング "~~" が渡され、XML オブジェクトのすべての子孫が返されます。</p>
	
	</apiDesc><example conref="examples\XMLDescendantsExample1.as"> ActionScript の予約語に一致する名前の子孫を返すには、子孫演算子（..）ではなく、次の例のように <codeph>descendants()</codeph> メソッドを 使用します。 
<codeblock>
var xml:XML = 
  &lt;enrollees>
    &lt;student id="239">
        &lt;class name="Algebra" />
        &lt;class name="Spanish 2"/>
    &lt;/student>
    &lt;student id="206">
        &lt;class name="Trigonometry" />
        &lt;class name="Spanish 2" />
    &lt;/student>
  &lt;/enrollees>
trace(xml.descendants("class")); 
</codeblock></example><example conref="examples\XML.descendants.1.as"> 次の例では、<codeph>descendants()</codeph> メソッドは、子、孫など、子孫オブジェクトの<i>すべて</i>を含む XMLList オブジェクトを返しています。
<codeblock>
XML.ignoreComments = false;
var xml:XML = 
        &lt;body>
            &lt;!-- comment -->
            text1
            &lt;a>
                &lt;b>text2&lt;/b>
            &lt;/a>
        &lt;/body>;
trace(xml.descendants("*").length()); // 5
trace(xml.descendants("*")[0]); // // &lt;!-- comment -->
trace(xml.descendants("*")[1].toXMLString()); // text1
trace(xml.descendants("a").toXMLString()); // &lt;a>&lt;b>text2&lt;/b>&lt;/a>
trace(xml.descendants("b").toXMLString()); // &lt;b>text2&lt;/b>
</codeblock></example></apiOperationDetail><related-links><link href="operators.html#descendant_accessor"><linktext>descendant accessor (..) 演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:elements"><apiName>elements</apiName><shortdesc>
	 XML オブジェクトのエレメントを列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.elements, elements
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>エレメントの内容の XMLList オブジェクトです。エレメントの内容は開始タグと終了タグで囲まれます。すべてのエレメントの呼び出しでアスタリスク（~~）を使用すると、エレメントのタグと内容の両方を返します。
	 
	 </apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>*</apiData><apiDesc>エレメントの名前です。エレメントの名前は山括弧で囲まれています。例えば、<codeph>&lt;first>&lt;/first></codeph> の <codeph>name</codeph> は "<codeph>first</codeph>" です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 XML オブジェクトのエレメントを列挙します。エレメントは、<codeph>&lt;first>&lt;/first></codeph> のように開始タグと終了タグで構成されます。<codeph>name</codeph> パラメーターはオプションです。<codeph>name</codeph> パラメーターには、QName オブジェクト、String データ型、または他の任意のデータ型（後で String データ型に変換されます）を指定できます。<codeph>name</codeph> パラメーターは、特定のエレメントの列挙に使用します。例えば、<codeph>&lt;first>John&lt;/first></codeph> では、エレメント "<codeph>first</codeph>" は "<codeph>John</codeph>" を返します。 
	 
	 <p>すべてのエレメントを列挙するには、パラメーターにアスタリスク（~~）を使用します。アスタリスクはデフォルトパラメーターでもあります。 </p>
	 
	 <p>エレメントの総数を出力するには、<codeph>length()</codeph> メソッドをアスタリスクパラメーターと共に使用します。例えば、<codeph>numElement = addressbook.elements("~~").length()</codeph> となります。</p>
	 
	 </apiDesc><example conref="examples\XML.elements.1.as"> 次の例では、<codeph>elements()</codeph> メソッドは、コメント、テキストプロパティ、または処理命令を返さずに、エレメントのリストのみを返しています。
<codeblock>
var xml:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
            text
            &lt;a>1&lt;/a>
            &lt;b>2&lt;/b>
        &lt;/foo>;
trace(xml.elements("*").length()); // 2
trace(xml.elements("*")[0].toXMLString()); // &lt;a>1&lt;/a>
trace(xml.elements("b").length()); // 1
trace(xml.elements("b")[0].toXMLString()); // &lt;b>2&lt;/b>
</codeblock></example><example conref="examples\XMLElementsExample1.as"> ActionScript の予約語に一致する名前のエレメントを返すには、XML ドット演算子（.）ではなく、次の例のように <codeph>elements()</codeph> メソッドを 使用します。
<codeblock>
var xml:XML =
 &lt;student id="206">
    &lt;class name="Trigonometry" />
    &lt;class name="Spanish 2" />
 &lt;/student>
trace(xml.elements("class")); 
</codeblock></example></apiOperationDetail><related-links><link href="#XML/child()"><linktext>XML.child()</linktext></link><link href="#XMLList"><linktext>XMLList クラス</linktext></link><link href="#XML/length()"><linktext>XML.length()</linktext></link><link href="#XML/attribute()"><linktext>XML.attribute()</linktext></link><link href="operators.html#dot_(XML)"><linktext>XML dot (.) 演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasComplexContent"><apiName>hasComplexContent</apiName><shortdesc>
	XML オブジェクトに複合内容が含まれるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.hasComplexContent, hasComplexContent
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトに複合内容が含まれる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトに複合内容が含まれるかどうかを確認します。子エレメントを持つ場合、XML オブジェクトには複合内容が含まれます。属性、コメント、処理命令、およびテキストノードを表す XML オブジェクトは複合内容を持ちません。ただし、これらを<i>含む</i>オブジェクトでも、子エレメントを持つ場合は、複合内容を含んでいると見なされます。
	
	</apiDesc><example conref="examples\XML.hasComplexContent.1.as"> 次の例は、単純内容を含む <codeph>a</codeph> という名前の 1 つのプロパティと、複合内容を含む <codeph>a</codeph> という名前の 1 つのプロパティを持つ XML オブジェクトを示しています。
<codeblock>
var xml:XML = 
        &lt;foo>
            &lt;a>
                text
            &lt;/a>
            &lt;a>
                &lt;b/>
            &lt;/a>
        &lt;/foo>;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links><link href="#XML/hasSimpleContent()"><linktext>XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasOwnProperty"><apiName>hasOwnProperty</apiName><shortdesc>
	オブジェクトに p パラメーターで指定されたプロパティがあるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.hasOwnProperty, hasOwnProperty
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>パラメーターが存在する場合は <codeph>true</codeph>、それ以外は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>p</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>照合するプロパティです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	オブジェクトに <codeph>p</codeph> パラメーターで指定されたプロパティがあるかどうかを確認します。 
	
	</apiDesc><example conref="examples\XML.hasOwnProperty.1.as"> 次の例では、<codeph>hasOwnProperty()</codeph> メソッドを使用してプロパティ（<codeph>b</codeph>）が存在することを確認してから、このプロパティを使用する式（<codeph>b == "11"</codeph>）を評価します。
<codeblock>
var xml:XML = 
        &lt;foo>
            &lt;a />
            &lt;a>
                &lt;b>10&lt;/b>
            &lt;/a>
            &lt;a>
                &lt;b>11&lt;/b>
            &lt;/a>
        &lt;/foo>;
trace(xml.a.(hasOwnProperty("b") &amp;&amp; b == "11")); 
</codeblock> この例の最後の行が次のように記述されていると、<codeph>a</codeph> という名前の最初のエレメントに <codeph>b</codeph> という名前のプロパティが存在しないため、Flash Player は例外をスローします。
 <p>
 <pre>trace(xml.a.(b == "11"));</pre>
 </p>
</example><example conref="examples\XML.hasOwnProperty.2.as"> 次の例では、<codeph>hasOwnProperty()</codeph> メソッドを使用してプロパティ（<codeph>item</codeph>）が存在することを確認してから、このプロパティを使用する式（<codeph>item.contains("toothbrush")</codeph>）を評価します。
<codeblock>
var xml:XML = 
        &lt;orders>
            &lt;order id='1'>
                &lt;item>toothbrush&lt;/item>
                &lt;item>toothpaste&lt;/item>
            &lt;/order>
            &lt;order>
                &lt;returnItem>shoe polish&lt;/returnItem>
            &lt;/order>
        &lt;/orders>;
trace(xml.order.(hasOwnProperty("item") &amp;&amp; item.contains("toothbrush"))); 
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:hasSimpleContent"><apiName>hasSimpleContent</apiName><shortdesc>
	XML オブジェクトに単純内容が含まれるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.hasSimpleContent, hasSimpleContent
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトに単純内容が含まれる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトに単純内容が含まれるかどうかを確認します。XML オブジェクトが子エレメントを持たないテキストノード、属性ノード、または XML エレメントを表す場合には、このオブジェクトには単純内容が含まれます。コメントおよび処理命令を表す XML オブジェクトには単純内容は<i>含まれません</i>。
	
	</apiDesc><example conref="examples\XML.hasComplexContent.1.as"> 次の例は、単純内容を含む <codeph>a</codeph> という名前の 1 つのプロパティと、複合内容を含む <codeph>a</codeph> という名前の 1 つのプロパティを持つ XML オブジェクトを示しています。
<codeblock>
var xml:XML = 
        &lt;foo>
            &lt;a>
                text
            &lt;/a>
            &lt;a>
                &lt;b/>
            &lt;/a>
        &lt;/foo>;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links><link href="#XML/hasComplexContent()"><linktext>XML.hasComplexContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:inScopeNamespaces"><apiName>inScopeNamespaces</apiName><shortdesc>
	オブジェクトの親に基づいて、XML オブジェクトの名前空間を列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.inScopeNamespaces, inScopeNamespaces
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>Namespace オブジェクトの配列です。 
	
	</apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	オブジェクトの親に基づいて、XML オブジェクトの名前空間を列挙します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:insertChildAfter"><apiName>insertChildAfter</apiName><shortdesc>
	指定された child2 パラメーターを、この XML オブジェクトの child1 パラメーターの後に挿入し、その結果のオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.insertChildAfter, insertChildAfter
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される XML オブジェクトまたは <codeph>undefined</codeph> です。
	
	</apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc><codeph>child2</codeph> の前に挿入するソースオブジェクト内のオブジェクトです。
	</apiDesc></apiParam><apiParam><apiItemName>child2</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>挿入するオブジェクトです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>child2</codeph> パラメーターを、この XML オブジェクトの <codeph>child1</codeph> パラメーターの後に挿入し、その結果のオブジェクトを返します。<codeph>child1</codeph> パラメーターが <codeph>null</codeph> の場合、このメソッドは <codeph>child2</codeph> の内容を、XML オブジェクトのすべての子の<i>前</i>、つまり<i>先頭</i>に挿入します。指定した <codeph>child1</codeph> が XML オブジェクトに存在しない場合、XML オブジェクトは変更されずに、<codeph>undefined</codeph> が返されます。
	
	<p>テキスト、属性、コメント、パイなどのエレメントでない XML の子に対してこのメソッドを呼び出すと、<codeph>undefined</codeph> を返します。</p>
    
    <p>XML ノードを削除するには、<codeph>delete</codeph>（XML）演算子を使用します。</p>
	
	</apiDesc><example conref="examples\XML.insertChildAfter.1.as"> 次の例では、XML オブジェクトの子エレメントの最後にエレメントを追加します。
<codeblock>
var xml:XML = 
        &lt;menu>
            &lt;item>burger&lt;/item>
            &lt;item>soda&lt;/item>
        &lt;/menu>;
xml.insertChildAfter(xml.item[0], &lt;saleItem>fries&lt;/saleItem>);
trace(xml);
</codeblock> <codeph>trace()</codeph> の出力は次のようになります。
 <pre><codeph> &lt;menu>
     &lt;item>burger&lt;/item>
     &lt;saleItem>fries&lt;/saleItem>
     &lt;item>soda&lt;/item>
 &lt;/menu></codeph></pre>
</example></apiOperationDetail><related-links><link href="#XML/insertChildBefore()"><linktext>XML.insertChildBefore()</linktext></link><link href="operators.html#delete_(XML)"><linktext>delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:insertChildBefore"><apiName>insertChildBefore</apiName><shortdesc>
	指定された child2 パラメーターを、この XML オブジェクトの child1 パラメーターの前に挿入し、その結果のオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.insertChildBefore, insertChildBefore
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される XML オブジェクトまたは <codeph>undefined</codeph> です。
	
	</apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc><codeph>child2</codeph> の後に挿入するソースオブジェクト内のオブジェクトです。
	</apiDesc></apiParam><apiParam><apiItemName>child2</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>挿入するオブジェクトです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>child2</codeph> パラメーターを、この XML オブジェクトの <codeph>child1</codeph> パラメーターの前に挿入し、その結果のオブジェクトを返します。<codeph>child1</codeph> パラメーターが <codeph>null</codeph> の場合、このメソッドは <codeph>child2</codeph> の内容を、XML オブジェクトのすべての子の<i>後</i>、つまり<i>最後</i>に挿入します。指定した <codeph>child1</codeph> が XML オブジェクトに存在しない場合、XML オブジェクトは変更されずに、<codeph>undefined</codeph> が返されます。
	
	<p>テキスト、属性、コメント、パイなどのエレメントでない XML の子に対してこのメソッドを呼び出すと、<codeph>undefined</codeph> を返します。</p>
    
    <p>XML ノードを削除するには、<codeph>delete</codeph>（XML）演算子を使用します。</p>
	
	</apiDesc><example conref="examples\XML.insertChildBefore.1.as"> 次の例では、XML オブジェクトの子エレメントの最後にエレメントを追加します。
<codeblock>
var xml:XML = 
        &lt;menu>
            &lt;item>burger&lt;/item>
            &lt;item>soda&lt;/item>
        &lt;/menu>;
xml.insertChildBefore(xml.item[0], &lt;saleItem>fries&lt;/saleItem>);
trace(xml);
</codeblock> <codeph>trace()</codeph> の出力は次のようになります。
 <pre>
 &lt;menu>
     &lt;saleItem>fries&lt;/saleItem>
     &lt;item>burger&lt;/item>
     &lt;item>soda&lt;/item>
 &lt;/menu></pre>
</example></apiOperationDetail><related-links><link href="#XML/insertChildAfter()"><linktext>XML.insertChildAfter()</linktext></link><link href="operators.html#delete_(XML)"><linktext>delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:length"><apiName>length</apiName><shortdesc>
	XML オブジェクトの場合、このメソッドは常に整数 1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.length, length
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>どのような XML オブジェクトに対しても、常に <codeph>1</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトの場合、このメソッドは常に整数 <codeph>1</codeph> を返します。XMLList クラスの <codeph>length()</codeph> メソッドは、1 つの値のみを含む XMLList オブジェクトの値 <codeph>1</codeph> を返します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:localName"><apiName>localName</apiName><shortdesc>
	XML オブジェクトの修飾名のローカル名部分を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.localName, localName
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>String または <codeph>null</codeph> のいずれかのローカル名です。
	
	</apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトの修飾名のローカル名部分を指定します。
	
	</apiDesc><example conref="examples\XML.localName.1.as"> 次の例は、<codeph>localName()</codeph> メソッドの使用法を示しています。
<codeblock>
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
trace(xml.localName()); // Envelope
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:name"><apiName>name</apiName><shortdesc>
	XML オブジェクトの修飾名を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.name, name
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>修飾名には、QName または <codeph>null</codeph> のいずれかを指定します。
	
	</apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトの修飾名を指定します。 
	
	</apiDesc><example conref="examples\XML.name.1.as"> 次の例は、<codeph>name()</codeph> メソッドを使用して XML オブジェクトの修飾名を取得する方法を示しています。
<codeblock>
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
trace(xml.name().localName); // Envelope
trace(xml.name().uri); // "http://www.w3.org/2001/12/soap-envelope"
</codeblock></example><example conref="examples\XML.name.2.as"> 次の例は、XML プロパティ、テキストエレメント、および属性に対して呼び出す <codeph>name()</codeph> メソッドの使用法を示しています。
<codeblock>
var xml:XML = 
        &lt;foo x="15" y="22">
            text
        &lt;/foo>;
        
trace(xml.name().localName); // foo
trace(xml.name().uri == ""); // true
trace(xml.children()[0]); // text
trace(xml.children()[0].name()); // null
trace(xml.attributes()[0]); // 15
trace(xml.attributes()[0].name()); // x
</codeblock></example></apiOperationDetail><related-links><link href="#XML/attributes()"><linktext>XML.attributes()</linktext></link><link href="operators.html#attribute_identifier"><linktext>attribute 識別子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespace"><apiName>namespace</apiName><shortdesc>
	パラメーターを指定しない場合、この XML オブジェクトの修飾名に関連付けられている名前空間を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.namespace, namespace
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>null</codeph> , <codeph>undefined</codeph>、または名前空間を返します。
	
	</apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>照合する接頭辞です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	パラメーターを指定しない場合、この XML オブジェクトの修飾名に関連付けられている名前空間を指定します。<codeph>prefix</codeph> パラメーターを指定した場合、<codeph>prefix</codeph> パラメーターに一致し、XML オブジェクトのスコープ内にある名前空間を返します。このような条件に一致する名前空間がなかった場合、メソッドは <codeph>undefined</codeph> を返します。
	
	</apiDesc><example conref="examples\XML.namespace.1.as"> 次の例では、<codeph>namespace()</codeph> メソッドを使用して XML オブジェクトの名前空間を取得し、それを <codeph>soap</codeph> という名前の Namespace オブジェクトに割り当てます。次にその Namespace オブジェクトを使用して <codeph>xml</codeph> オブジェクト（<codeph>xml.soap::Body[0]</codeph>）のプロパティを識別します。
<codeblock>
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
var soap:Namespace = xml.namespace();
trace(soap.prefix); // soap
trace(soap.uri); // http://www.w3.org/2001/12/soap-envelope

var body:XML = xml.soap::Body[0];
trace(body.namespace().prefix); // soap
trace(xml.namespace().uri); // http://www.w3.org/2001/12/soap-envelope
trace(body.namespace("wx").uri); // "http://example.com/weather"
</codeblock></example><example conref="examples\XML.namespace.2.as"> 次の例では、<codeph>namespace()</codeph> メソッドを使用し、ノードのデフォルトの名前空間と、特定の接頭辞（<codeph>"dc"</codeph>）の名前空間を取得します。
<codeblock>
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/">
                &lt;!-- ... -->
        &lt;/rdf:RDF>;
                    
trace(xml.namespace()); // http://www.w3.org/1999/02/22-rdf-syntax-ns#
trace(xml.namespace("dc")); // http://purl.org/dc/elements/1.1/
trace(xml.namespace("foo")); // undefined
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:namespaceDeclarations"><apiName>namespaceDeclarations</apiName><shortdesc>
	親のコンテキストで XML オブジェクトに関連付けられている名前空間宣言を列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.namespaceDeclarations, namespaceDeclarations
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>Namespace オブジェクトの配列です。
	
	</apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	親のコンテキストで XML オブジェクトに関連付けられている名前空間宣言を列挙します。 
	
	</apiDesc><example conref="examples\XML.namespaceDeclarations.1.as"> 次の例は、XML オブジェクトの名前空間宣言を出力します。
<codeblock>
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/">

            &lt;!-- ... -->
            
        &lt;/rdf:RDF>;
                    
for (var i:uint = 0; i &lt; xml.namespaceDeclarations().length; i++) {
    var ns:Namespace = xml.namespaceDeclarations()[i]; 
    var prefix:String = ns.prefix;
    if (prefix == "") {
        prefix = "(default)";
    }
    trace(prefix + ":" , ns.uri);
}
</codeblock> <codeph>trace()</codeph> の出力は次のようになります。
 <pre><codeph>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 dc: http://purl.org/dc/elements/1.1/
 (default): http://purl.org/rss/1.0/</codeph></pre>
</example></apiOperationDetail><related-links><link href="#XML/namespace()"><linktext>XML.namespace()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:nodeKind"><apiName>nodeKind</apiName><shortdesc>
	ノードのタイプ（テキスト、コメント、処理命令、属性、またはエレメント）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.nodeKind, nodeKind
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>使用するノードタイプです。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ノードのタイプ（テキスト、コメント、処理命令、属性、またはエレメント）を指定します。 
	
	</apiDesc><example conref="examples\XMLNodeKindExample1.as"> この例では、5 つのすべてのノードタイプをトレースします。
<codeblock>
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;

var xml:XML = 
    &lt;example id="10">
        &lt;!-- this is a comment -->
        &lt;?test this is a pi ?>
        and some text
    &lt;/example>;

trace(xml.nodeKind()); // element
trace(xml.children()[0].nodeKind()); // comment
trace(xml.children()[1].nodeKind()); // processing-instruction
trace(xml.children()[2].nodeKind()); // text
trace(xml.@id[0].nodeKind()); // attribute
</codeblock></example></apiOperationDetail><related-links><link href="operators.html#attribute_identifier"><linktext>attribute 識別子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:normalize"><apiName>normalize</apiName><shortdesc>
	XML オブジェクトとすべての子孫の XML オブジェクトについて、隣接するテキストノードを結合し、空のテキストノードを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.normalize, normalize
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される、正規化された XML オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトとすべての子孫の XML オブジェクトについて、隣接するテキストノードを結合し、空のテキストノードを削除します。
	
	</apiDesc><example conref="examples\XML.normalize.1.as"> 次の例は、<codeph>normalize()</codeph> メソッドを呼び出す場合の影響を示しています。
<codeblock>
var xml:XML = &lt;body>&lt;/body>;
xml.appendChild("hello");
xml.appendChild(" world");
trace(xml.children().length()); // 2
xml.normalize();
trace(xml.children().length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:parent"><apiName>parent</apiName><shortdesc>
	XML オブジェクトの親を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.parent, parent
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>親ノードの XML 参照です。XML オブジェクトに親がない場合は <codeph>undefined</codeph> です。
	
	</apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトの親を返します。XML オブジェクトに親がない場合、メソッドは、<codeph>undefined</codeph> を返します。
	
	</apiDesc><example conref="examples\XML.parent.1.as"> 次の例では、<codeph>parent()</codeph> メソッドを使用して、XML 構造内の特定エレメントの親エレメントを識別します。
<codeblock>
var xml:XML = 
    &lt;body>
        &lt;p id="p1">Hello&lt;/p>
        &lt;p id="p2">Test:
            &lt;ul>
                &lt;li>1&lt;/li>
                &lt;li>2&lt;/li>
            &lt;/ul>
        &lt;/p>
    &lt;/body>;
var node:XML = xml.p.ul.(li.contains("1"))[0]; // == &lt;ul> ... &lt;/ul>
trace(node.parent().@id); // p2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:prependChild"><apiName>prependChild</apiName><shortdesc>
	指定された child オブジェクトのコピーを、このエレメント内の既存のすべての XML プロパティの前に挿入します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.prependChild, prependChild
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される XML オブジェクトです。
    
    </apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>挿入するオブジェクトです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された <codeph>child</codeph> オブジェクトのコピーを、このエレメント内の既存のすべての XML プロパティの前に挿入します。
    
    <p>XML ノードを削除するには、<codeph>delete</codeph>（XML）演算子を使用します。</p> 
	
	</apiDesc><example conref="examples\XML.prependChild.1.as"> 次の例では、<codeph>prependChild()</codeph> メソッドを使用して、XML オブジェクトの子リストの先頭にエレメントを追加します。
<codeblock>
var xml:XML = 
        &lt;body>
            &lt;p>hello&lt;/p>
        &lt;/body>;
        
xml.prependChild(&lt;p>world&lt;/p>);    
trace(xml.p[0].toXMLString()); // &lt;p>world&lt;/p>
trace(xml.p[1].toXMLString()); // &lt;p>hello&lt;/p>
</codeblock></example></apiOperationDetail><related-links><link href="operators.html#delete_(XML)"><linktext>delete（XML）演算子</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:processingInstructions"><apiName>processingInstructions</apiName><shortdesc>
	name パラメーターを指定した場合、その name を持つ処理命令を含む XML オブジェクトのすべての子を列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.processingInstructions, processingInstructions
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>一致する子オブジェクトのリストです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>*</apiData><apiDesc>照合する処理命令の名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	<codeph>name</codeph> パラメーターを指定した場合、その <codeph>name</codeph> を持つ処理命令を含む XML オブジェクトのすべての子を列挙します。パラメーターを指定しなかった場合、メソッドは任意の処理命令を含む XML オブジェクトのすべての子を列挙します。
	
	</apiDesc><example conref="examples\XML.processingInstructions.1.as"> 次の例では、<codeph>processingInstructions()</codeph> メソッドを使用して、XML オブジェクトの処理命令の配列を取得します。
<codeblock>
XML.ignoreProcessingInstructions = false;
var xml:XML =
    &lt;body>
            foo
            &lt;?xml-stylesheet href="headlines.css" type="text/css" ?>
            &lt;?instructionX ?>
            
    &lt;/body>;

trace(xml.processingInstructions().length()); // 2
trace(xml.processingInstructions()[0].name()); // xml-stylesheet
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:propertyIsEnumerable"><apiName>propertyIsEnumerable</apiName><shortdesc>
	XML オブジェクトに適用される for..in ステートメント内で反復処理されるプロパティセット内に、プロパティ p があるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.propertyIsEnumerable, propertyIsEnumerable
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc><codeph>for..in</codeph> ステートメント内でプロパティを反復処理できる場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>p</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>チェックするプロパティです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	プロパティ <codeph>p</codeph> が、XMLList オブジェクトに適用される <codeph>for..in</codeph> ステートメント内で反復処理されるプロパティセット内にあるかどうかを確認します。<codeph>true</codeph> は、<codeph>toString(p) == "0"</codeph> の場合にのみ返されます。 
	
	</apiDesc><example conref="examples\XML.propertyIsEnumerable.1.as"> 次の例では、<codeph>propertyNameIsEnumerable()</codeph> メソッドは、XML オブジェクトの場合に値 <codeph>true</codeph> を、値 <codeph>0</codeph> に対してのみ返し、XMLList オブジェクトの場合は、XMLList オブジェクトの有効な各インデックス値に対して値 <codeph>true</codeph> を返しています。
<codeblock>
var xml:XML = 
        &lt;body>
             &lt;p>Hello&lt;/p>
               &lt;p>World&lt;/p>
        &lt;/body>;

trace(xml.propertyIsEnumerable(0)); // true
trace(xml.propertyIsEnumerable(1)); // false

for (var propertyName:String in xml) {
    trace(xml[propertyName]);
}

var list:XMLList = xml.p;
trace(list.propertyIsEnumerable(0)); // true
trace(list.propertyIsEnumerable(1)); // true
trace(list.propertyIsEnumerable(2)); // false

for (var propertyName:String in list) { 
    trace(list[propertyName]);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:removeNamespace"><apiName>removeNamespace</apiName><shortdesc>
	このオブジェクトとすべての子孫に指定された名前空間を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.removeNamespace, removeNamespace
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される XML オブジェクトのコピーです。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>ns</apiItemName><apiOperationClassifier>Namespace</apiOperationClassifier><apiDesc>削除する名前空間です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	このオブジェクトとすべての子孫に指定された名前空間を削除します。名前空間がオブジェクトの修飾名またはオブジェクトの属性の修飾名によって参照されている場合、<codeph>removeNamespaces()</codeph> メソッドは名前空間を削除しません。
	
	</apiDesc><example conref="examples\XML.removeNamespace.1.as"> 次の例は、XML オブジェクトから名前空間宣言を削除する方法を示しています。
<codeblock>
var xml:XML = 
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
        xmlns:dc="http://purl.org/dc/elements/1.1/" 
        xmlns="http://purl.org/rss/1.0/">
    
        &lt;!-- ... -->
        
    &lt;/rdf:RDF>;

trace(xml.namespaceDeclarations().length); // 3
trace(xml.namespaceDeclarations()[0] is String); // 
var dc:Namespace = xml.namespace("dc");
xml.removeNamespace(dc);
trace(xml.namespaceDeclarations().length); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:replace"><apiName>replace</apiName><shortdesc>
	propertyName パラメーターで指定されたプロパティを、指定された value パラメーターに置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.replace, replace
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>一致するプロパティが置き換えられた、結果として作成される XML オブジェクトです。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>数値、XML エレメントセットの無修飾名、XML エレメントセットの修飾名、またはアスタリスクワイルドカード（"*"）を使用できます。無修飾名は、デフォルトの名前空間内での XML エレメントの識別に使用します。 
	
	</apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>XML</apiOperationClassifier><apiDesc>置換する値です。この値には、XML オブジェクト、XMLList オブジェクト、または <codeph>toString()</codeph> で変換可能な値を使用できます。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	<codeph>propertyName</codeph> パラメーターで指定されたプロパティを、指定された <codeph>value</codeph> パラメーターに置き換えます。<codeph>propertyName</codeph> に一致するプロパティがない場合、XML オブジェクトは変更されません。
	
	</apiDesc><example conref="examples\XML.replace.1.as"> 次の例では、1 番目のパラメーターに整数を指定して <codeph>replace()</codeph> メソッドを呼び出します。
<codeblock>
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace(1, &lt;p>Bob&lt;/p>);
trace(xml);
</codeblock> この結果は、次の <codeph>trace()</codeph> 出力のようになります。
 <pre><codeph>
 &lt;body>
     &lt;p>Hello&lt;/p>
     &lt;p>Bob&lt;/p>
     &lt;hr/>
 &lt;/body>
 </codeph></pre>
</example><example conref="examples\XML.replace.2.as"> 次の例は、1 番目のパラメーターにストリングを指定して <codeph>replace()</codeph> メソッドを呼び出します。
<codeblock>
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace("p", &lt;p>Hi&lt;/p>); 
trace(xml);
</codeblock> この結果は、次の <codeph>trace()</codeph> 出力のようになります。
 
 <pre><codeph>
 &lt;body>
     &lt;p>Hi&lt;/p>
     &lt;hr/>
 &lt;/body>;
 </codeph></pre>
</example><example conref="examples\XML.replace.3.as"> 次の例では、1 番目のパラメーターに QName を指定して <codeph>replace()</codeph> メソッドを呼び出します。
<codeblock>
var xml:XML = 
    &lt;ns:body xmlns:ns = "myNS">
        &lt;ns:p>Hello&lt;/ns:p>
        &lt;ns:p>World&lt;/ns:p>
        &lt;hr/>
    &lt;/ns:body>;

var qname:QName = new QName("myNS", "p");
xml.replace(qname, &lt;p>Bob&lt;/p>);
trace(xml);

</codeblock> この結果は、次の <codeph>trace()</codeph> 出力のようになります。
 
 <pre><codeph>
 &lt;ns:body xmlns:ns = "myNS">
     &lt;p>Bob&lt;/p>
     &lt;hr/>
 &lt;/ns:body>
 </codeph></pre>
</example><example conref="examples\XML.replace.4.as"> 次の例では、<codeph>replace()</codeph> メソッドを呼び出します（1 番目のパラメーターにストリング <codeph>"*"</codeph> を指定）。
<codeblock>
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace("*", &lt;img src = "hello.jpg"/>);
trace(xml);
</codeblock> この結果は、次の <codeph>trace()</codeph> 出力のようになります。
 
 <pre><codeph>
 &lt;body>
     &lt;img src="hello.jpg"/>
 &lt;/body>
 </codeph></pre>
</example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setChildren"><apiName>setChildren</apiName><shortdesc>
	XML オブジェクトの子プロパティを、value パラメーターで指定された XML プロパティのセットに置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.setChildren, setChildren
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>結果として作成される XML オブジェクトです。 
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>置き換えに使用する XML プロパティです。単一の XML オブジェクト、または XMLList オブジェクトにすることができます。 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトの子プロパティを、<codeph>value</codeph> パラメーターで指定された XML プロパティのセットに置き換えます。
	
	</apiDesc><example conref="examples\XML.setChildren.1.as"> 次の例では、まず、XML オブジェクトをパラメーターに指定して <codeph>setChildren()</codeph> メソッドを呼び出し、次に XMLList オブジェクトをパラメーターに指定して呼び出しています。
<codeblock>
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
    &lt;/body>;

var list:XMLList = xml.p;

xml.setChildren(&lt;p>hello&lt;/p>);
trace(xml);

//    &lt;body>
//        &lt;p>hello&lt;/p>
//    &lt;/body>

xml.setChildren(list);
trace(xml);

//    &lt;body>
//        &lt;p>Hello&lt;/p>
//        &lt;p>World&lt;/p>
//    &lt;/body>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setLocalName"><apiName>setLocalName</apiName><shortdesc>
	XML オブジェクトのローカル名を、指定された name パラメーターに変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.setLocalName, setLocalName
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ローカル名に置き換える名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトのローカル名を、指定された <codeph>name</codeph> パラメーターに変更します。 
	
	</apiDesc><example conref="examples\XML.setLocalName.1.as"> 次の例では、<codeph>setLocalName()</codeph> メソッドを使用して、XML エレメントのローカル名を変更します。
<codeblock>
var xml:XML = 
    &lt;ns:item xmlns:ns="http://example.com">
        toothbrush
    &lt;/ns:item>;
    
xml.setLocalName("orderItem");
trace(xml.toXMLString()); // &lt;ns:orderItem xmlns:ns="http://example.com">toothbrush&lt;/ns:orderItem>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setName"><apiName>setName</apiName><shortdesc>
	XML オブジェクトの名前を、指定された修飾名または属性名に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.setName, setName
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>オブジェクトの新しい名前です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトの名前を、指定された修飾名または属性名に設定します。 
	
	</apiDesc><example conref="examples\XML.setName.1.as"> 次の例では、<codeph>setName()</codeph> メソッドを使用して、XML エレメント名を変更します。
<codeblock>
var xml:XML = 
    &lt;item>
        toothbrush
    &lt;/item>;
    
xml.setName("orderItem");
trace(xml.toXMLString()); // &lt;orderItem>toothbrush&lt;/orderItem>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setNamespace"><apiName>setNamespace</apiName><shortdesc>
	XML オブジェクトに関連付けられている名前空間を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.setNamespace, setNamespace
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ns</apiItemName><apiOperationClassifier>Namespace</apiOperationClassifier><apiDesc>新しい名前空間です。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML オブジェクトに関連付けられている名前空間を設定します。
	
	</apiDesc><example conref="examples\XML.setNamespace.1.as"> 次の例では、ある XML オブジェクトに定義した <codeph>soap</codeph> 名前空間を使用して、別の XML オブジェクト（<codeph>xml2</codeph>）の名前空間に適用します。
<codeblock>
var xml1:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">
            &lt;!-- ... -->
        &lt;/soap:Envelope>;
var ns:Namespace = xml1.namespace("soap");

var xml2:XML = 
    &lt;Envelope>
        &lt;Body/>
    &lt;/Envelope>;
    
xml2.setNamespace(ns);

trace(xml2);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setSettings"><apiName>setSettings</apiName><shortdesc>
	XML プロパティ ignoreComments、ignoreProcessingInstructions、ignoreWhitespace、prettyIndent、および prettyPrinting を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.setSettings, setSettings
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>次の各プロパティを持つオブジェクトです。 
	
	<ul>
	   <li><codeph>ignoreComments</codeph></li>
	   <li><codeph>ignoreProcessingInstructions</codeph></li>
	   <li><codeph>ignoreWhitespace</codeph></li>
	   <li><codeph>prettyIndent</codeph></li>
	   <li><codeph>prettyPrinting</codeph></li>
	</ul>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	XML プロパティ <codeph>ignoreComments</codeph>、<codeph>ignoreProcessingInstructions</codeph>、<codeph>ignoreWhitespace</codeph>、<codeph>prettyIndent</codeph>、<codeph>prettyPrinting</codeph> の値を設定します。デフォルト設定は次のとおりです。デフォルト設定は、<codeph>setObj</codeph> パラメーターが指定されていない場合に適用されます。
	
	<ul>
	   <li><codeph>XML.ignoreComments = true</codeph></li>
	   <li><codeph>XML.ignoreProcessingInstructions = true</codeph></li>
	   <li><codeph>XML.ignoreWhitespace = true</codeph></li>
	   <li><codeph>XML.prettyIndent = 2</codeph></li>
	   <li><codeph>XML.prettyPrinting = true</codeph></li>
	</ul>
	
	<p><b>注意：</b>このメソッドは XML クラスのインスタンスには適用しません。次のコードのように、<codeph>XML</codeph> に適用します。<codeph>XML.setSettings()</codeph> .</p>
	
	</apiDesc><example conref="examples\XML.defaultSettings.1.as"> 次の例は、XML オブジェクトを設定する前に、コメントおよび処理命令を配置するカスタム設定を適用する方法、別のXML オブジェクトを設定する前にデフォルト設定に戻す方法、さらに別の XML オブジェクトの設定のために再度カスタム設定を適用する方法を示しています。
<codeblock>
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links><link href="#XML/ignoreComments"><linktext>ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions"><linktext>ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace"><linktext>ignoreWhitespace</linktext></link><link href="#XML/prettyIndent"><linktext>prettyIndent</linktext></link><link href="#XML/prettyPrinting"><linktext>prettyPrinting</linktext></link><link href="#XML/defaultSettings()"><linktext>defaultSettings()</linktext></link><link href="#XML/settings()"><linktext>settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:settings"><apiName>settings</apiName><shortdesc>
	プロパティ ignoreComments、ignoreProcessingInstructions、ignoreWhitespace、prettyIndent、および prettyPrinting を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.settings, settings
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiStatic/><apiReturn><apiDesc>次の XML プロパティを持つオブジェクトです。
	<ul>
	   <li><codeph>ignoreComments</codeph></li>
	   <li><codeph>ignoreProcessingInstructions</codeph></li>
	   <li><codeph>ignoreWhitespace</codeph></li>
	   <li><codeph>prettyIndent</codeph></li>
	   <li><codeph>prettyPrinting</codeph></li>
	</ul>
	
	</apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	プロパティ <codeph>ignoreComments</codeph>、<codeph>ignoreProcessingInstructions</codeph>、<codeph>ignoreWhitespace</codeph>、<codeph>prettyIndent</codeph>、<codeph>prettyPrinting</codeph> を取得します。
	
	</apiDesc><example conref="examples\XML.defaultSettings.1.as"> 次の例は、XML オブジェクトを設定する前に、コメントおよび処理命令を配置するカスタム設定を適用する方法、別のXML オブジェクトを設定する前にデフォルト設定に戻す方法、さらに別の XML オブジェクトの設定のために再度カスタム設定を適用する方法を示しています。
<codeblock>
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links><link href="#XML/ignoreComments"><linktext>XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions"><linktext>XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace"><linktext>XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent"><linktext>XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link><link href="#XML/defaultSettings()"><linktext>XML.defaultSettings()</linktext></link><link href="#XML/setSettings()"><linktext>XML.setSettings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:text"><apiName>text</apiName><shortdesc>
	XML テキストノードを表す XML オブジェクトのすべての XML プロパティの XMLList オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.text, text
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>プロパティのリストです。
	
	</apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML テキストノードを表す XML オブジェクトのすべての XML プロパティの XMLList オブジェクトを返します。
	
	</apiDesc><example conref="examples\XML.text.1.as"> 次の例では、<codeph>text()</codeph> メソッドを使用して、XML オブジェクトのテキストノードを取得します。
<codeblock>
var xml:XML =
        &lt;body>
            text1
            &lt;hr/>
            text2
        &lt;/body>;
trace(xml.text()[0]); // text1
trace(xml.text()[1]); // text2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:toString"><apiName>toString</apiName><shortdesc>
	XML オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.toString, toString 
	
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトのストリング表現です。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトのストリング表現を返します。この変換の規則は、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかによって決まります。
	
	<ul>
		<li>XML オブジェクトに単純内容が含まれる場合、<codeph>toString()</codeph> は XML オブジェクトのストリング内容を返し、開始タグ、属性、名前空間宣言、および終了タグを削除します。</li> 
	</ul>
	
	<ul>
		<li> XML オブジェクトに複合内容が含まれる場合、<codeph>toString()</codeph> は、開始タグ、属性、名前空間宣言および終了タグを含み、XML オブジェクト全体を表す XML エンコードされた String を返します。</li>
	</ul>
	
	<p>XML オブジェクト全体を毎回返すには、<codeph>toXMLString()</codeph> を使用します。</p>
	
	
	</apiDesc><example conref="examples\XMLToStringExample1.as"> 次の例は、XML オブジェクトに単純内容が含まれる場合に <codeph>toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock>
var test:XML = &lt;type name="Joe">example&lt;/type>;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as"> 次の例は、XML オブジェクトに複合内容が含まれる場合に <codeph>toString()</codeph> メソッドによって何が返されるかを示しています。
<codeblock>
var test:XML = 
&lt;type name="Joe">
    &lt;base name="Bob">&lt;/base>
    example
&lt;/type>;
trace(test.toString());
  // &lt;type name="Joe">
  // &lt;base name="Bob"/>
  // example
  // &lt;/type> 
</codeblock></example></apiOperationDetail><related-links><link href="#XML/hasSimpleContent()"><linktext>XML.hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()"><linktext>XML.hasComplexContent()</linktext></link><link href="#XML/toXMLString()"><linktext>XML.toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:toXMLString"><apiName>toXMLString</apiName><shortdesc>
	XML オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.toXMLString, toXMLString
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML オブジェクトのストリング表現です。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトのストリング表現を返します。<codeph>toString()</codeph> メソッドとは異なり、<codeph>toXMLString()</codeph> メソッドは、XML オブジェクトに単純内容が含まれるか、複合内容が含まれるかに関係なく、常に XML オブジェクトの開始タグ、属性、および終了タグを返します。<codeph>toString()</codeph> メソッドは、単純内容を持つ XML オブジェクトの開始タグ、属性、および終了タグを削除します。
	
	</apiDesc><example conref="examples\XML.toXMLString.1.as"> 次の例は、<codeph>toString()</codeph> メソッド（デフォルトでは、<codeph>trace()</codeph> メソッドのすべてのパラメーターに適用される）を使った場合と、<codeph>toXMLString()</codeph> メソッドを使った場合の違いを示しています。
<codeblock>
var xml:XML =
        &lt;p>hello&lt;/p>;
trace(xml); // hello
trace(xml.toXMLString()); // &lt;p>hello&lt;/p>
</codeblock></example></apiOperationDetail><related-links><link href="#XML/toString()"><linktext>XML.toString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	XML オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.valueOf, valueOf
	</keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>XML インスタンスのプリミティブ値です。
	
	</apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	XML オブジェクトを返します。 
	
	</apiDesc><example conref="examples\XML.valueOf.1.as"> 次の例は、<codeph>valueOf()</codeph> メソッドで返された値が、ソースの XML オブジェクトと同じであることを示しています。
<codeblock>
var xml:XML = &lt;p>hello&lt;/p>;
trace(xml.valueOf() === xml); // true
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="XML:ignoreComments:get"><apiName>ignoreComments</apiName><shortdesc>
	XML オブジェクトがソースの XML データを解析する際に、XML コメントを無視するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.ignoreComments, ignoreComments
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	XML オブジェクトがソースの XML データを解析する際に、XML コメントを無視するかどうかを決定します。デフォルトでは、コメントを無視します（<codeph>true</codeph>）。XML コメントを含めるには、このプロパティを <codeph>false</codeph> に設定します。<codeph>ignoreComments</codeph> プロパティは、<codeph>myXMLObject.child(~~).toXMLString()</codeph> などのメソッドの呼び出し時でなく、XML の解析時にのみ使用します。ソースの XML にコメントノードが含まれる場合、このノードは XML の解析時には保持されるか、または破棄されます。 
	
	</apiDesc><example conref="examples\XML.ignoreComments.1.as"> この例は、<codeph>XML.ignoreComments</codeph> を <codeph>false</codeph> に設定した場合と <codeph>true</codeph> に設定した場合の影響を示しています。
<codeblock>
XML.ignoreComments = false;
var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
        &lt;/foo>;
trace(xml1.toXMLString()); // &lt;foo>&lt;!-- comment -->&lt;/foo>

XML.ignoreComments = true;
var xml2:XML = 
        &lt;foo>
            &lt;!-- example -->
        &lt;/foo>;
trace(xml2.toXMLString()); // &lt;foo/>
</codeblock></example></apiValueDetail><related-links><link href="#XML/child()"><linktext>XML.child()</linktext></link><link href="#XML/toXMLString()"><linktext>XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreProcessingInstructions:get"><apiName>ignoreProcessingInstructions</apiName><shortdesc>
	XML オブジェクトがソースの XML データを解析する際に、XML 処理命令を無視するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.ignoreProcessingInstructions, ignoreProcessingInstructions
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	XML オブジェクトがソースの XML データを解析する際に、XML 処理命令を無視するかどうかを決定します。デフォルトでは、処理命令を無視します（<codeph>true</codeph>）。XML 処理命令を含めるには、このプロパティを <codeph>false</codeph> に設定します。<codeph>ignoreProcessingInstructions</codeph> プロパティは、<codeph>myXMLObject.child(~~).toXMLString()</codeph> などのメソッドの呼び出し時でなく、XML の解析時にのみ使用します。ソースの XML に処理命令ノードが含まれる場合、このノードは XML の解析時には保持されるか、または破棄されます。
	
	</apiDesc><example conref="examples\XML.ignoreProcessingInstructions.1.as"> この例は、<codeph>XML.ignoreProcessingInstructions</codeph> を <codeph>false</codeph> に設定した場合と <codeph>true</codeph> に設定した場合の影響を示しています。
<codeblock>
XML.ignoreProcessingInstructions = false;
var xml1:XML = 
        &lt;foo>
            &lt;?exampleInstruction ?>
        &lt;/foo>;
trace(xml1.toXMLString()); // &lt;foo>&lt;?exampleInstruction ?>&lt;/foo>

XML.ignoreProcessingInstructions = true;
var xml2:XML = 
        &lt;foo>
            &lt;?exampleInstruction ?>
        &lt;/foo>;
trace(xml2.toXMLString()); // &lt;foo/>
</codeblock></example></apiValueDetail><related-links><link href="#XML/child()"><linktext>XML.child()</linktext></link><link href="#XML/toXMLString()"><linktext>XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreWhitespace:get"><apiName>ignoreWhitespace</apiName><shortdesc>
	テキストノードの先頭および最後の空白文字を、解析時に無視するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.ignoreWhitespace, ignoreWhitespace
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	テキストノードの先頭および最後の空白文字を、解析時に無視するかどうかを決定します。デフォルトでは、空白文字を無視します（<codeph>true</codeph>）。テキストノードが 100% 空白文字で、<codeph>ignoreWhitespace</codeph> プロパティが <codeph>true</codeph> に設定されている場合、ノードは作成されません。テキストノード内の空白文字を表示するには、<codeph>ignoreWhitespace</codeph> プロパティを <codeph>false</codeph> に設定します。 
	
	</apiDesc><example conref="examples\XML.ignoreWhitespace.1.as"> この例は、<codeph>XML.ignoreWhitespace</codeph> を <codeph>false</codeph> に設定した場合と <codeph>true</codeph> に設定した場合の影響を示しています。
<codeblock>
XML.ignoreWhitespace = false;
var xml1:XML = &lt;foo>    &lt;/foo>;
trace(xml1.children().length()); // 1

XML.ignoreWhitespace = true;
var xml2:XML = &lt;foo>    &lt;/foo>;
trace(xml2.children().length()); // 0
</codeblock></example></apiValueDetail></apiValue><apiValue id="XML:prettyIndent:get"><apiName>prettyIndent</apiName><shortdesc>
	XML.prettyPrinting プロパティを true に設定した場合に、toString() メソッドと toXMLString() メソッドが適用するインデントの量を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.prettyIndent, prettyIndent
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>toString()</codeph> メソッドと <codeph>toXMLString()</codeph> メソッドが適用するインデントの量を決定します（<codeph>XML.prettyPrinting</codeph> プロパティを <codeph>true</codeph> に設定した場合）。インデントは、タブ文字でなく、空白文字で適用されます。デフォルト値は <codeph>2</codeph> です。
	
	</apiDesc><example conref="examples\XML.prettyIndent.1.as"> この例は、<codeph>XML.prettyIndent</codeph> 静的プロパティを設定した場合の影響を示しています。
<codeblock>
var xml:XML = &lt;foo>&lt;bar/>&lt;/foo>;
XML.prettyIndent = 0;
trace(xml.toXMLString());

XML.prettyIndent = 1;
trace(xml.toXMLString());

XML.prettyIndent = 2;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links><link href="#XML/prettyPrinting"><linktext>prettyPrinting</linktext></link><link href="#XML/toString()"><linktext>toString()</linktext></link><link href="#XML/toXMLString()"><linktext>toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:prettyPrinting:get"><apiName>prettyPrinting</apiName><shortdesc>
	toString() メソッドと toXMLString() メソッドが、タグ間の空白文字を正規化するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML, XML.prettyPrinting, prettyPrinting
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>toString()</codeph> メソッドと <codeph>toXMLString()</codeph> メソッドが、タグ間の空白文字を正規化するかどうかを決定します。デフォルト値は <codeph>true</codeph> です。
	
	</apiDesc><example conref="examples\XML.prettyPrinting.1.as"> この例は、<codeph>XML.prettyPrinting</codeph> 静的プロパティを設定した場合の影響を示しています。
<codeblock>
var xml:XML = &lt;foo>&lt;bar/>&lt;/foo>;
XML.prettyPrinting = false;
trace(xml.toXMLString());

XML.prettyPrinting = true;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links><link href="#XML/prettyIndent"><linktext>prettyIndent</linktext></link><link href="#XML/toString()"><linktext>toString()</linktext></link><link href="#XML/toXMLString()"><linktext>toXMLString()</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:Array"><apiName>Array</apiName><shortdesc>
	 新しい配列を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ゼロ以上の長さの配列です。
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>引数を渡さない場合は空の配列が作成され、整数の引数を 1 つ渡すと特定の長さの配列が作成されます。また、一連のさまざまな型の値をカンマで区切って渡すと、渡された値が設定された配列が作成されます。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 新しい配列を作成します。長さがゼロ以上の配列、または指定したエレメントのリスト（異なるデータ型を含めることができます）を使用して設定された配列を作成できます。使用する引数の数およびデータ型によって、返される配列の内容が決定します。
	 <ul>
	   <li>引数なしで <codeph>Array()</codeph> を呼び出すと、空の配列が返されます。</li>
	   <li>単一の整数の引数を指定して <codeph>Array()</codeph> を呼び出すと、指定された長さの配列が返されますが、その各エレメントの値は未定義です。</li>
	   <li>特定の値のリストを指定して <codeph>Array()</codeph> を呼び出すと、指定された各値を含むエレメントを持つ配列が返されます。</li>
	 </ul>
	 <codeph>Array()</codeph> 関数は、Array クラスのコンストラクターを使用した配列の作成に似ています。
	 <p>引数がプリミティブな値ではない場合は、明示的な型の変換や型のキャストには <codeph>as</codeph> 演算子を使用します。詳細については、この項の「例」のセクションを参照してください。 </p>
	 </apiDesc><example conref="examples\Array.func.4.as"> 次の例は、引数がプリミティブな値でない場合の <codeph>Array()</codeph> 関数の動作を表しています。配列へのキャストの一般的な使用方法は、配列形式で値を保存する Object インスタンスの変換です。<codeph>Array()</codeph> を、<codeph>Object</codeph> 型またはその他のプリミティブでないデータ型の引数を使って呼び出した場合は、オブジェクトへの参照が新しい配列のエレメントに格納されます。つまり、渡された唯一の引数がオブジェクトである場合、そのオブジェクトへの参照が新しい配列の最初のエレメントになります。
<codeblock>
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = Array( obj );

trace(newArray == obj);    // false
trace(newArray[0] == obj); // true
trace(newArray[0][0])      // a
trace(newArray[0][1])      // b
trace(newArray[0][2])      // c
</codeblock></example><example conref="examples\Array.func.5.as"> <codeph>obj</codeph> を配列にキャストするには、<codeph>as</codeph> 演算子を使用します。<codeph>obj</codeph> が有効な配列の場合は配列の参照が返され、そうでない場合は <codeph>null</codeph> が返されます。
<codeblock>
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = obj as Array;

trace(newArray == obj); // true
trace(newArray[0]);     // a
trace(newArray[1]);     // b
trace(newArray[2]);     // c
</codeblock></example></apiOperationDetail><related-links><link href="#Array"><linktext>Array クラス</linktext></link><link href="operators.html#as"><linktext>as 演算子</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:Boolean"><apiName>Boolean</apiName><shortdesc>
	 expression パラメーターをブール値に変換し、その値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ブール値への変換の結果です。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>ブール値に変換する式またはオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>expression</codeph> パラメーターをブール値に変換し、その値を返します。 
	 <p>戻り値は、次の表に示すように、引数のデータ型および値によって異なります。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="3"><thead><row><entry>入力値</entry><entry>例</entry><entry>戻り値</entry></row></thead><tbody><row>
	     <entry><codeph>0</codeph></entry>
	     <entry><codeph>Boolean(0)</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry><codeph>NaN</codeph></entry>
	     <entry><codeph>Boolean(NaN)</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry>数値（<codeph>0</codeph> でも <codeph>NaN</codeph> でもない）</entry>
	     <entry><codeph>Boolean(4)</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row><row>
	     <entry>空のストリング</entry>
	     <entry><codeph>Boolean("")</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry>空ではないストリング</entry>
	     <entry><codeph>Boolean("6")</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row><row>
	     <entry><codeph>null</codeph></entry>
	     <entry><codeph>Boolean(null)</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry><codeph>undefined</codeph></entry>
	     <entry><codeph>Boolean(undefined)</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry>Object クラスのインスタンス</entry>
	     <entry><codeph>Boolean(new Object())</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row><row>
	     <entry>引数なし</entry>
	     <entry><codeph>Boolean()</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row></tbody></tgroup></adobetable>
	 <p>ActionScript の以前のバージョンとは異なり、<codeph>Boolean()</codeph> 関数は Boolean クラスのコンストラクターと同じ結果を返します。</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Number"><apiName>Number</apiName><shortdesc>
	 指定した数値を Number 値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された数値の値です。
     </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>数値に変換される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した数値を Number 値に変換します。次の表に、さまざまな入力タイプの結果を示します。
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="3"><thead><row><entry>入力タイプと値</entry><entry>例</entry><entry>戻り値</entry></row></thead><tbody><row>
	     <entry><codeph>undefined</codeph></entry>
	     <entry><codeph>Number(undefined)</codeph></entry>
	     <entry><codeph>NaN</codeph></entry>
	   </row><row>
	     <entry><codeph>null</codeph></entry>
	     <entry><codeph>Number(null)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry><codeph>true</codeph></entry>
	     <entry><codeph>Number(true)</codeph></entry>
	     <entry><codeph>1</codeph></entry>
	   </row><row>
	     <entry><codeph>false</codeph></entry>
	     <entry><codeph>Number(false)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry><codeph>NaN</codeph></entry>
	     <entry><codeph>Number(NaN)</codeph></entry>
	     <entry><codeph>NaN</codeph></entry>
	   </row><row>
	     <entry>空のストリング</entry>
	     <entry><codeph>Number("")</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry>Number に変換されるストリング</entry>
	     <entry><codeph>Number("5")</codeph></entry>
	     <entry>数値（例：<codeph>5</codeph>）</entry>
	   </row><row>
	     <entry>Number に変換されないストリング</entry>
	     <entry><codeph>Number("5a")</codeph></entry>
	     <entry><codeph>NaN</codeph></entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Object"><apiName>Object</apiName><shortdesc>
	 ActionScript 3.0 ではすべての値がオブジェクトであるため、値に対して Object() を呼び出すと、その値が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>value</codeph> パラメーターで指定された値です。
     </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>変換するオブジェクトまたは数値、ストリング、またはブール値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ActionScript 3.0 ではすべての値がオブジェクトであるため、値に対して <codeph>Object()</codeph> を呼び出すと、その値が返されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:String"><apiName>String</apiName><shortdesc>
	 指定されたパラメーターのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>expression</codeph> パラメーターに渡された値のストリング表現です。
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc> ストリングに変換される式です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたパラメーターのストリング表現を返します。
	 <p>次の表に、さまざまな入力タイプの結果を示します。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>入力タイプと値</entry><entry>戻り値</entry></row></thead><tbody><row>
	     <entry><codeph>undefined</codeph></entry>
	     <entry><codeph>undefined</codeph></entry>
	   </row><row>
	     <entry><codeph>null</codeph></entry>
	     <entry><codeph>"null"</codeph></entry>
	   </row><row>
	     <entry><codeph>true</codeph></entry>
	     <entry><codeph>"true"</codeph></entry>
	   </row><row>
	     <entry><codeph>false</codeph></entry>
	     <entry><codeph>"false"</codeph></entry>
	   </row><row>
	     <entry><codeph>NaN</codeph></entry>
	     <entry><codeph>"NaN"</codeph></entry>
	   </row><row>
	     <entry>String</entry>
	     <entry>String</entry>
	   </row><row>
	     <entry>Object</entry>
	     <entry>Object.toString()</entry>
	   </row><row>
	     <entry>Number</entry>
	     <entry>数値のストリング表現です。</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Vector"><apiName>Vector</apiName><shortdesc>
	 エレメントが指定されたデータ型のインスタンスである新しい Vector インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><commentPrivate>The reason this compiles with the .&lt;T> designation is because
	 a dummy class "T" is declared in the top level Vector.as file. If this file is
	 built without that one, the build will fail.
	 
	 </commentPrivate></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>sourceArray</codeph> 引数に、指定されたデータ型に変換できないエレメントが含まれる場合。
	 
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>sourceArray</codeph> 配列のエレメントによって作成された Vector インスタンス。
	 
	 </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>sourceArray</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>エレメントが結果ベクターのエレメントとなる Array または Vector インスタンス。関連するデータ型が指定されたデータ型と同じ Vector インスタンスである引数の場合、引数は関数の結果として返されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 エレメントが指定されたデータ型のインスタンスである新しい Vector インスタンスを作成します。この関数を呼び出す場合、type パラメーターを使用して結果ベクターのエレメント（ベクターのベース型）のデータ型を指定します。<i/>この関数は、Vector インスタンスを宣言する場合、または新しい <codeph>Vector.&lt;T>()</codeph> コンストラクターを呼び出す場合に使用するシンタックスと同じシンタックスを使用します。
	 
	 <codeblock>var v:Vector.&lt;String> = Vector.&lt;String>(["Hello", "World"]);</codeblock>
	 
	 <p>生成されるベクターには <codeph>sourceArray</codeph> 引数のエレメントの値が設定されます。<codeph>sourceArray</codeph> 引数が Vector.&lt;T> インスタンス（ここで、<codeph>T</codeph> はベース型です）の場合、関数はそのベクターを返します。それ以外の場合、結果ベクターには <codeph>sourceArray</codeph> 配列（ベクター）のエレメントが設定されます。</p>
	 
	 <p>どちらの場合も、<codeph>sourceArray</codeph> 引数のすべてのエレメントのデータ型が、関数呼出しで指定されたベース型 <codeph>T</codeph> と一致する必要があります。</p>
	 
	 <p><codeph>sourceArray</codeph> 引数が <codeph>length</codeph> 0 を持つ場合、関数は空のベクターを返します。</p>
	 
	 <p>ベクターが <codeph>sourceArray</codeph> 引数として渡され、そのベース型が <codeph>T</codeph> ではない場合、または配列が渡され、そのエレメントがデータ型 <codeph>T</codeph> のすべてのインスタンスではない場合、ベース型の値の変換が試行されます。値が自動的に変換される場合、結果ベクターは変換された値を取り込みます。変換が行われない場合、エラーが発生します。</p>
	 
	 <p>同様に、<codeph>sourceArray</codeph> 引数のエレメントがベース型 <codeph>T</codeph> のサブクラスのインスタンスの場合、呼出しは成功し、エレメントが生成されるベクターに追加されます。<codeph>sourceArray</codeph> 引数がベース型 <codeph>T</codeph> のサブクラスのベクターである場合でも、この機能は有効です。実際に、この機能は、ベース型 <codeph>T</codeph> を持つベクターを <codeph>T</codeph> のスーパークラスであるベース型を持つベクターに変換する唯一の方法です。</p>
	 
	 <p>例えば、次のコードは、Strict モードの場合にコンパイルエラーを引き起こすか、実行時に TypeError を引き起こします。これは、Vector.&lt;Sprite> を Vector.&lt;DisplayObject> 変数に割り当てようとするためです（Sprite は DisplayObject のサブクラスです）。</p>
	 
	 <codeblock>
	 var v1:Vector.&lt;Sprite> = new Vector.&lt;Sprite>();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject> = v1;
	 </codeblock>
	 
	 <p>次の代替バージョンのコードは、Vector.&lt;Sprite> インスタンスを Vector.&lt;DisplayObject> インスタンスに正常にコピーします。</p>
	 
	 <codeblock>
	 var v1:Vector.&lt;Sprite> = new Vector.&lt;Sprite>();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject> = Vector.&lt;DisplayObject>(v1);
	 </codeblock>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Vector"><linktext>Vector クラス</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XMLList"><apiName>XMLList</apiName><shortdesc>
     オブジェクトを XMLList オブジェクトに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換するオブジェクトが保持していた値を含む XMLList オブジェクトです。
	 </apiDesc><apiOperationClassifier>XMLList</apiOperationClassifier></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>XMLList オブジェクトに変換されるオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     オブジェクトを XMLList オブジェクトに変換します。
     <p>次の表に、さまざまな入力タイプでの戻り値を示します。</p>
	 <adobetable class="innertable">
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 <tgroup cols="2"><thead><row><entry>パラメータータイプ</entry><entry>戻り値</entry></row></thead><tbody><row>
	 		<entry>Boolean</entry>
	 		<entry>値は最初にストリングに変換され、次に XMLList オブジェクトに変換されます。</entry>
	 	</row><row>
	 		<entry>Null</entry>
	 		<entry>ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row><row>
	 		<entry>Number</entry>
	 		<entry>値は最初にストリングに変換され、次に XMLList オブジェクトに変換されます。</entry>
	 	</row><row>
	 		<entry>Object</entry>
	 		<entry>値が String、Number、または Boolean の場合にのみ XMLList に変換します。それ以外の場合は、ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row><row>
	 		<entry>String</entry>
	 		<entry>値は XMLList オブジェクトに変換されます。</entry>
	 	</row><row>
	 		<entry>未定義</entry>
	 		<entry>ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row><row>
	 		<entry>XML</entry>
	 		<entry>値は XMLList オブジェクトに変換されます。</entry>
	 	</row><row>
	 		<entry>XMLList</entry>
	 		<entry>入力値は変更されずに返されます。</entry>
	 	</row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links><link href="#global/XML()"><linktext>XML()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XML"><apiName>XML</apiName><shortdesc>
	 オブジェクトを XML オブジェクトに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換するオブジェクトが保持していた値を含む XML オブジェクトです。
	 </apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>XML に変換されるオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 オブジェクトを XML オブジェクトに変換します。 
	 <p>次の表に、さまざまな入力タイプでの戻り値を示します。</p>
	 	<adobetable class="innertable">
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 <tgroup cols="2"><thead><row><entry>パラメータータイプ</entry><entry>戻り値</entry></row></thead><tbody><row>
	 		<entry>Boolean</entry>
	 		<entry>値は最初にストリングに変換され、次に XML オブジェクトに変換されます。</entry>
	 	</row><row>
	 		<entry>Null</entry>
	 		<entry>ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row><row>
	 		<entry>Number</entry>
	 		<entry>値は最初にストリングに変換され、次に XML オブジェクトに変換されます。</entry>
	 	</row><row>
	 		<entry>Object</entry>
	 		<entry>値が String、Number、または Boolean の場合にのみ XML に変換されます。それ以外の場合は、ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row><row>
	 		<entry>String</entry>
	 		<entry>値が XML に変換されます。</entry>
	 	</row><row>
	 		<entry>未定義</entry>
	 		<entry>ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row><row>
	 		<entry>XML</entry>
	 		<entry>入力値は変更されずに返されます。</entry>
	 	</row><row>
	 		<entry>XMLList</entry>
	 		<entry>XMLList オブジェクトに XML 型のプロパティが 1 つだけ含まれている場合にのみ、XML オブジェクトを返します。それ以外の場合は、ランタイムエラーが発生します（TypeError 例外）。</entry>
	 	</row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links><link href="#global/XMLList()"><linktext>XMLList()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURIComponent"><apiName>decodeURIComponent</apiName><shortdesc>
	 エンコードされた URI コンポーネントをストリングにデコードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>encodeURIComponent</codeph> 関数でエスケープされていたすべての文字が、アンエスケープされた表現に復元されたストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc><codeph>encodeURIComponent</codeph> 関数でエンコードされたストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 エンコードされた URI コンポーネントをストリングにデコードします。<codeph>encodeURIComponent</codeph> 関数でエスケープされていたすべての文字が、エンコードされていない表現に復元されたストリングを返します。
	 <p>この関数は、URI ストリングの一部（URI コンポーネントと呼びます）のみの変換を目的とします。この点で、<codeph>decodeURI()</codeph> 関数とは異なります。URI コンポーネントは、<i>コンポーネントセパレーター</i>と呼ばれる特殊文字（<codeph>: / ; ?</codeph>）の間に表示される任意のテキストです。 URI コンポーネントの一般的な例は、"http" および "www.adobe.com" です。</p>
	 <p>この関数と <codeph>decodeURI()</codeph> のもう 1 つの重要な相違点は、この関数は URI コンポーネントを処理することを想定しているので、特殊なセパレーター文字（<codeph>; / ? : @ &amp; = + $ , #</codeph>）を表すエスケープシーケンスが、デコードの必要がある通常のテキストとして扱われることです。 </p>
	 </apiDesc></apiOperationDetail><related-links><link href="#global/decodeURI()"><linktext>decodeURI()</linktext></link><link href="#global/encodeURI()"><linktext>encodeURI()</linktext></link><link href="#global/encodeURIComponent()"><linktext>encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURI"><apiName>decodeURI</apiName><shortdesc>
	 エンコードされた URI をストリングにデコードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>encodeURI</codeph> 関数でエスケープされていたすべての文字が、アンエスケープされた表現に復元されたストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc><codeph>encodeURI</codeph> 関数でエンコードされたストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 エンコードされた URI をストリングにデコードします。<codeph>encodeURI</codeph> 関数でエンコードされていたすべての文字が、エンコードされていない表現に復元されたストリングを返します。
	 <p>次の表に、文字にデコードされない<i/>（<codeph>decodeURI</codeph> 関数において）エスケープシーケンスのセットを示します。この表にあるエスケープシーケンスをデコードするには、<codeph>decodeURIComponent()</codeph> を使用してください。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>デコードされないエスケープシーケンス</entry><entry>相当する文字</entry></row></thead><tbody><row>
	     <entry><codeph>%23</codeph></entry>
	     <entry><codeph>#</codeph></entry>
	   </row><row>
	     <entry><codeph>%24</codeph></entry>
	     <entry><codeph>$</codeph></entry>
	   </row><row>
	     <entry><codeph>%26</codeph></entry>
	     <entry><codeph>&amp;</codeph></entry>
	   </row><row>
	     <entry><codeph>%2B</codeph></entry>
	     <entry><codeph>+</codeph></entry>
	   </row><row>
	     <entry><codeph>%2C</codeph></entry>
	     <entry><codeph>,</codeph></entry>
	   </row><row>
	     <entry><codeph>%2F</codeph></entry>
	     <entry><codeph>/</codeph></entry>
	   </row><row>
	     <entry><codeph>%3A</codeph></entry>
	     <entry><codeph>:</codeph></entry>
	   </row><row>
	     <entry><codeph>%3B</codeph></entry>
	     <entry><codeph>;</codeph></entry>
	   </row><row>
	     <entry><codeph>%3D</codeph></entry>
	     <entry><codeph>=</codeph></entry>
	   </row><row>
	     <entry><codeph>%3F</codeph></entry>
	     <entry><codeph>?</codeph></entry>
	   </row><row>
	     <entry><codeph>%40</codeph></entry>
	     <entry><codeph>@</codeph></entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\DecodeURIExample.as"><codeblock>package {
    import flash.display.Sprite;

    public class DecodeURIExample extends Sprite {
        public function DecodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#global/decodeURIComponent()"><linktext>decodeURIComponent()</linktext></link><link href="#global/encodeURI()"><linktext>encodeURI()</linktext></link><link href="#global/encodeURIComponent()"><linktext>encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURIComponent"><apiName>encodeURIComponent</apiName><shortdesc>
	 ストリングを有効な URI コンポーネントにエンコードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
	 ストリングを有効な URI コンポーネントにエンコードします。URI のサブストリングをストリングに変換します。基本文字の非常に小さなグループに属していない限り、すべての文字が UTF-8 エスケープシーケンスとしてエンコードされます。
	 <p><codeph>encodeURIComponent()</codeph> 関数は、URI ストリングの一部（URI コンポーネントと呼びます）のみの変換を目的とします。この点で、<codeph>encodeURI()</codeph> 関数とは異なります。URI コンポーネントは、<i>コンポーネントセパレーター</i>と呼ばれる特殊文字（<codeph>: / ; ?</codeph>）の間に表示される任意のテキストです。 URI コンポーネントの一般的な例は、"http" および "www.adobe.com" です。</p>
	 <p>この関数と <codeph>encodeURI()</codeph> のもう 1 つの重要な相違点は、この関数は URI コンポーネントを処理することを想定しているので、特殊なセパレーター文字（<codeph>; / ? : @ &amp; = + $ , #</codeph>）が、エンコードの必要がある通常のテキストとして扱われることです。 </p>
	 <p>次の表に、UTF-8 エスケープシーケンスに変換<i>されない</i>（<codeph>encodeURIComponent</codeph> 関数で変換されない）すべての文字を示します。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="1"><thead><row><entry>エンコードされない文字</entry></row></thead><tbody><row>
	     <entry><codeph>0 1 2 3 4 5 6 7 8 9</codeph></entry>
	   </row><row>
	     <entry><codeph>a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry>
	   </row><row>
	     <entry><codeph>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry>
	   </row><row>
	     <entry><codeph>- _ . ! ~ ~~ ' ( )</codeph></entry>
	   </row></tbody></tgroup></adobetable>	 
	 </apiDesc></apiOperationDetail><related-links><link href="#global/decodeURI()"><linktext>decodeURI()</linktext></link><link href="#global/decodeURIComponent()"><linktext>decodeURIComponent()</linktext></link><link href="#global/encodeURI()"><linktext>encodeURI()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURI"><apiName>encodeURI</apiName><shortdesc>
	 ストリングを有効な URI（Uniform Resource Identifier）にエンコードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>特定の文字が UTF-8 エスケープシーケンスとしてエンコードされているストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>完全な URI を表すストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリングを有効な URI（Uniform Resource Identifier）にエンコードします。完全 URI をストリングに変換します。基本文字の小さなグループに属していない限り、すべての文字が UTF-8 エスケープシーケンスとしてエンコードされます。
	 <p>次の表に、UTF-8 エスケープシーケンスに変換<i>されない</i>（<codeph>encodeURI</codeph> 関数で変換されない）すべての文字を示します。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="1"><thead><row><entry>エンコードされない文字</entry></row></thead><tbody><row>
	     <entry><codeph>0 1 2 3 4 5 6 7 8 9</codeph></entry>
	   </row><row>
	     <entry><codeph>a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry>
	   </row><row>
	     <entry><codeph>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry>
	   </row><row>
	     <entry><codeph>; / ? : @ &amp; = + $ , #</codeph></entry>
	   </row><row>
	     <entry><codeph>- _ . ! ~ ~~ ' ( )</codeph></entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc><example conref="examples\EncodeURIExample.as"><codeblock>package {
    import flash.display.Sprite;

    public class EncodeURIExample extends Sprite {
        public function EncodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="#global/decodeURI()"><linktext>decodeURI()</linktext></link><link href="#global/decodeURIComponent()"><linktext>decodeURIComponent()</linktext></link><link href="#global/encodeURIComponent()"><linktext>encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:escape"><apiName>escape</apiName><shortdesc>
	 パラメーターをストリングに変換し、URL エンコード形式にエンコードします。この場合、英数字以外のほとんどの文字は % が付いた 16 進シーケンスで置き換えられます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>URL エンコードされたストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ストリングに変換し、URL エンコードする対象の式です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 パラメーターをストリングに変換し、URL エンコード形式にエンコードします。この場合、英数字以外のほとんどの文字は <codeph>%</codeph> が付いた 16 進シーケンスで置き換えられます。URL エンコードされたストリング内のパーセント記号（<codeph>%</codeph>）は、エスケープ文字の開始を表すもので、剰余演算子（<codeph>%</codeph>）ではありません。
	 <p>次の表に、エスケープシーケンスに変換<i>されない</i>（<codeph>escape()</codeph> 関数で変換されない）すべての文字を示します。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="1"><thead><row><entry>エンコードされない文字</entry></row></thead><tbody><row>
	     <entry><codeph>0 1 2 3 4 5 6 7 8 9</codeph></entry>
	   </row><row>
	     <entry><codeph>a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry>
	   </row><row>
	     <entry><codeph>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry>
	   </row><row>
	     <entry><codeph>@ - _ . ~~ + /</codeph></entry>
	   </row></tbody></tgroup></adobetable>	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#global/unescape()"><linktext>unescape()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:int"><apiName>int</apiName><shortdesc>
	 指定した数値を整数値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された整数値です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>整数に変換される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した数値を整数値に変換します。10 進数値は小数点で切り捨てられます。
	 </apiDesc></apiOperationDetail><related-links><link href="#global/uint()"><linktext>uint()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:isFinite"><apiName>isFinite</apiName><shortdesc>
	 値が有限大である場合は true を返し、Infinity または -Infinity である場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0."/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>有限大である場合は <codeph>true</codeph> を返し、無限大または負の無限大である場合は <codeph>false</codeph> を返します。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>num</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>有限大または無限大として評価する数値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 値が有限の場合は <codeph>true</codeph> を返します。<codeph>false</codeph> を返すのは、値が <codeph>Infinity</codeph> または <codeph>-Infinity</codeph> である場合です。<codeph>Infinity</codeph> または <codeph>-Infinity</codeph> は、0 による除算などの数学的なエラーの可能性を示します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isNaN"><apiName>isNaN</apiName><shortdesc>
	 値が NaN（非数）の場合は、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> を返します（値が <codeph>NaN</codeph>（非数）の場合）。それ以外の場合は、<codeph>false</codeph> を返します。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>num</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>評価する数値または数式です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>true</codeph> を返します（値が <codeph>NaN</codeph>（非数）の場合）。<codeph>isNaN()</codeph> 関数は、数式が正常に数値に評価されるかどうかをチェックするのに便利です。<codeph>isNaN()</codeph> は、<codeph>parseInt()</codeph> 関数および <codeph>parseFloat()</codeph> 関数から返された値をチェックするために最もよく使用されます。<codeph>NaN</codeph> 値は、"非数" の値を表す Number データ型の特殊メンバーです。 
	 <p><b>注意：</b><codeph>NaN</codeph> 値は、int または uint データ型のメンバーではありません。</p>
	 <p>次の表に、さまざまな入力タイプや値での <codeph>isNaN()</codeph> の戻り値を示します。 コンパイラー警告が Strict モードに設定されている場合、次の演算の一部がコンパイラー警告を生成する場合があります。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="3"><thead><row><entry>入力タイプと値</entry><entry>例</entry><entry>戻り値</entry></row></thead><tbody><row>
	     <entry>0 を 0 で除算</entry>
	     <entry><codeph>isNaN(0/0)</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row><row>
	     <entry>ゼロ以外の数値を <codeph>0</codeph> で除算</entry>
	     <entry><codeph>isNaN(5/0)</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry>負の数の平方根</entry>
	     <entry><codeph>isNaN(Math.sqrt(-1))</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row><row>
	     <entry>0 ～ 1 以外の数値のアークサイン</entry>
	     <entry><codeph>isNaN(Math.asin(2))</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row><row>
	     <entry>Number に変換できるストリング</entry>
	     <entry><codeph>isNaN("5")</codeph></entry>
	     <entry><codeph>false</codeph></entry>
	   </row><row>
	     <entry>Number に変換できないストリング</entry>
	     <entry><codeph>isNaN("5a")</codeph></entry>
	     <entry><codeph>true</codeph></entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isXMLName"><apiName>isXMLName</apiName><shortdesc>
	 指定されたストリングが、XML エレメントまたは属性に対して有効な名前かどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> を返します（<codeph>str</codeph> 引数が有効な XML 名である場合）。それ以外の場合は <codeph>false</codeph> を返します。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>評価するストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたストリングが、XML エレメントまたは属性に対して有効な名前かどうかを判断します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseFloat"><apiName>parseFloat</apiName><shortdesc>
	 ストリングを浮動小数に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数値または <codeph>NaN</codeph>（非数）です。
     </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>読み込まれて浮動小数に変換されるストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリングを浮動小数に変換します。この関数は、初期数の一部でない文字に達するまで、ストリング内の数値を読み取り（<i>解析</i>し）、結果を返します。ストリングが解析できる数値で始まっていない場合、<codeph>parseFloat()</codeph> は <codeph>NaN</codeph> を返します。有効な整数の前の空白は、後続の非数値文字と同様に無視されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseInt"><apiName>parseInt</apiName><shortdesc>
	 ストリングを整数に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数値または <codeph>NaN</codeph>（非数）です。
     </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>整数に変換されるストリングです。
	 </apiDesc></apiParam><apiParam><apiItemName>radix</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>解析する数値の基数を表す整数です。有効な値は、2 ～ 36 です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリングを整数に変換します。パラメーターで指定されたストリングを数値に変換できない場合は <codeph>NaN</codeph> を返します。0x から始まる整数は、16 進数と解釈されます。ActionScript の以前のバージョンと異なり、0 から始まる整数は 8 進数と解釈<i>されません</i>。8 進数には 8 の基数を指定する必要があります。有効な整数の前の空白およびゼロは、後続の非数値文字と同様に無視されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:trace"><apiName>trace</apiName><shortdesc>
	 デバッグ中に式を表示、またはログファイルに書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>評価する 1 つ以上のカンマ区切りの式です。複数の式がある場合、出力では各式の間に空白が挿入されます。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 デバッグ中に式を表示、またはログファイルに書き込みます。単一のトレースステートメントに複数の引数を指定できます。trace ステートメント内の引数に String 以外のデータ型が含まれている場合は、trace 関数によって、そのデータ型に関連付けられた <codeph>toString()</codeph> メソッドが呼び出されます。例えば、引数がブール値の場合、trace 関数で <codeph>Boolean.toString()</codeph> が呼び出され、戻り値が表示されます。 
	 </apiDesc><example conref="examples\TraceExample.as"> 次の例は、クラス <codeph>TraceExample</codeph> を使用して、<codeph>trace()</codeph> メソッドで単純なストリングをプリントする方法を示しています。通常、メッセージは "デバッグ" コンソールに出力されます。
<codeblock>
package {
    import flash.display.Sprite;

    public class TraceExample extends Sprite {

        public function TraceExample() {
            trace("Hello World");
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="globalOperation:uint"><apiName>uint</apiName><shortdesc>
	 指定した数値を符号なし整数値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された整数値です。
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>整数に変換される値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した数値を符号なし整数値に変換します。10 進数値は小数点で切り捨てられます。
	 <p>次の表に、さまざまな入力タイプや値での <codeph>uint()</codeph> の戻り値を示します。</p>
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="3"><thead><row><entry>入力タイプと値</entry><entry>例</entry><entry>戻り値</entry></row></thead><tbody><row>
	     <entry><codeph>undefined</codeph></entry>
	     <entry><codeph>uint(undefined)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry><codeph>null</codeph></entry>
	     <entry><codeph>uint(null)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry><codeph>0</codeph></entry>
	     <entry><codeph>uint(0)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry><codeph>NaN</codeph></entry>
	     <entry><codeph>uint(NaN)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry>正の浮動小数</entry>
	     <entry><codeph>uint(5.31)</codeph></entry>
	     <entry>切り捨てられた符号なし整数（例：<codeph>5</codeph>）</entry>
	   </row><row>
	     <entry>負の浮動小数</entry>
	     <entry><codeph>uint(-5.78)</codeph></entry>
	     <entry>切り捨てて整数にし、負の整数の規則を適用します。</entry>
	   </row><row>
	     <entry>負の整数</entry>
	     <entry><codeph>uint(-5)</codeph></entry>
         <entry><codeph>uint.MAX_VALUE</codeph> と負の整数の合計（例えば、<codeph>uint.MAX_VALUE + (-5)</codeph>）</entry>
	   </row><row>
	     <entry><codeph>true</codeph></entry>
	     <entry><codeph>uint(true)</codeph></entry>
	     <entry><codeph>1</codeph></entry>
	   </row><row>
	     <entry><codeph>false</codeph></entry>
	     <entry><codeph>uint(false)</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry>空のストリング</entry>
	     <entry><codeph>uint("")</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row><row>
	     <entry>Number に変換されるストリング</entry>
	     <entry><codeph>uint("5")</codeph></entry>
	     <entry>数値</entry>
	   </row><row>
	     <entry>Number に変換されないストリング</entry>
	     <entry><codeph>uint("5a")</codeph></entry>
	     <entry><codeph>0</codeph></entry>
	   </row></tbody></tgroup></adobetable>

	 </apiDesc></apiOperationDetail><related-links><link href="#global/int()"><linktext>int()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:unescape"><apiName>unescape</apiName><shortdesc>
	 パラメーター str をストリングとして評価し、URL エンコードされた形式からストリングをデコード（すべての 16 進シーケンスを ASCII 文字に変換）して、ストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>URL エンコードされたパラメーターからデコードしたストリングです。
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>16 進シーケンスをエスケープするストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 パラメーター <codeph>str</codeph> をストリングとして評価し、URL エンコードされた形式からストリングをデコード（すべての 16 進シーケンスを ASCII 文字に変換）して、ストリングを返します。
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="globalValue:Infinity"><apiName>Infinity</apiName><shortdesc>
 正の Infinity を表す特殊な値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
 正の <codeph>Infinity</codeph> を表す特殊な値です。この定数の値は、<codeph>Number.POSITIVE_INFINITY</codeph> と同じです。
 </apiDesc><example conref="examples\Constants.Infinity.1.as"> 0 で除算した結果が <codeph>Infinity</codeph> になるのは、除数が正の数値である場合のみです。
<codeblock>

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links><link href="#Number/POSITIVE_INFINITY"><linktext>Number.POSITIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:-Infinity"><apiName>-Infinity</apiName><shortdesc>
 負の Infinity を表す特殊な値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
 負の <codeph>Infinity</codeph> を表す特殊な値です。この定数の値は、<codeph>Number.NEGATIVE_INFINITY</codeph> と同じです。
 </apiDesc><example conref="examples\Constants.NegInfinity.1.as"> 0 で除算した結果が <codeph>-Infinity</codeph> になるのは、除数が負の数値である場合のみです。
<codeblock>

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links><link href="#Number/NEGATIVE_INFINITY"><linktext>Number.NEGATIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:NaN"><apiName>NaN</apiName><shortdesc>
 "非数"（NaN）の値を表す Number データ型の特殊メンバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
 "非数"（<codeph>NaN</codeph>）の値を表す Number データ型の特殊メンバーです。数式の結果が数値として表現できない値になる場合、その結果は <codeph>NaN</codeph> になります。次のリストでは、結果が <codeph>NaN</codeph> になる一般的な式について説明します。
 <ul>
   <li>除数も 0 の場合にのみ、0 による除算の結果が <codeph>NaN</codeph> になります。 除数が 0 よりも大きい場合は、0 による除算の結果は <codeph><codeph>Infinity</codeph></codeph> になります。 除数が 0 よりも小さい場合は、0 による除算の結果は <codeph> <codeph>-Infinity</codeph> </codeph> になります。</li>
   <li>負の数の平方根です。</li>
   <li>有効な範囲（0 ～ 1）外の数値のアークサインです。</li>
   <li><codeph>Infinity</codeph> から減算された <codeph>Infinity</codeph> です。</li>
   <li><codeph>Infinity</codeph> または <codeph>-Infinity</codeph>（<codeph>Infinity</codeph> または <codeph>-Infinity</codeph> で除算）です。</li>
   <li>0 で乗算された <codeph>Infinity</codeph> または <codeph>-Infinity</codeph> です。</li>
  </ul>
 <p><codeph>NaN</codeph> 値は、int または uint データ型のメンバーではありません。</p>
 <p><codeph>NaN</codeph> 値は、<codeph>NaN</codeph> を含む他のどの値とも等しいと見なされないため、等価演算子を使用して、式が <codeph>NaN</codeph> であるかどうかをテストできません。数値が <codeph>NaN</codeph> 関数かどうかを判別するには、<codeph>isNaN()</codeph> を使用します。</p>
 
 </apiDesc></apiValueDetail><related-links><link href="#global/isNaN()"><linktext>isNaN()</linktext></link><link href="#Number/NaN"><linktext>Number.NaN</linktext></link></related-links></apiValue><apiValue id="globalValue:undefined"><apiName>undefined</apiName><shortdesc>
 初期化されていない型指定のない変数、または初期化されていないダイナミックオブジェクトプロパティに適用される特殊な値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
 初期化されていない型指定のない変数、または初期化されていないダイナミックオブジェクトプロパティに適用される特殊な値です。ActionScript 3.0 では、型指定のない変数のみが値 <codeph>undefined</codeph> を保持できます。ただしこれは、ActionScript 1.0 および ActionScript 2.0 には当てはまりません。例えば、次の変数は型指定も初期化も行われていないため、いずれも <codeph>undefined</codeph> になります。
 <ul>
   <li><codeph>var foo;</codeph></li>
   <li><codeph>var bar:~~;</codeph></li>
 </ul>
 <p>また、<codeph>undefined</codeph> 値は初期化されていない、または定義されていないダイナミックオブジェクトのプロパティにも適用されます。例えば、オブジェクトが Object クラスのインスタンスの場合、動的に割り当てられたプロパティに値が割り当てられるまで、そのプロパティの値は <codeph>undefined</codeph> です。
 </p>
 <p>さまざまな関数で <codeph>undefined</codeph> が使用されている場合は、結果が異なります。</p>
 <ul>
 <li><codeph>String(undefined)</codeph> によって返される値は <codeph>"undefined"</codeph> です（<codeph>undefined</codeph> はストリングに変換されます）。</li> 
 <li><codeph>Number(undefined)</codeph> によって返される値は <codeph>NaN</codeph> です。</li> 
 <li><codeph>int(undefined)</codeph> および <codeph>uint(undefined)</codeph> によって返される値は 0 です。</li>
 <li><codeph>Object(undefined)</codeph> によって返される値は、新しい Object インスタンスです。</li>
 <li>値 <codeph>undefined</codeph> を型指定されている変数に割り当てると、その値はそのデータ型のデフォルト値に変換されます。</li>
 </ul>
 <p><codeph>undefined</codeph> を <codeph>null</codeph> と混同しないようにしてください。<codeph>null</codeph> と <codeph>undefined</codeph> を等価演算子（<codeph>==</codeph>）で比較すると、結果は true になります。ただし、<codeph>null</codeph> と <codeph>undefined</codeph> を厳密な等価演算子（<codeph>===</codeph>）で比較すると、結果は false になります。</p>
 </apiDesc><example conref="examples\Constants.undefined.1.as"> 次の例では、型指定されていない変数 <codeph>myVar</codeph> が宣言されていますが、初期化されていません。変数の型が指定されていないため、<codeph>myVar</codeph> の値は <codeph>undefined</codeph> です。変数に型注釈があるか、または特殊な（~~）型指定されていない注釈（<codeph>var myVar:~~;</codeph>）が使用されているかは関係ありません。
<codeblock>

// trace value of untyped and uninitialized variable
var myVar;
trace(myVar); // undefined
</codeblock></example><example conref="examples\Constants.undefined.2.as"> 同じ規則が、初期化されていないダイナミックオブジェクトのプロパティに適用されます。例えば、インスタンス <codeph>obj</codeph>（ダイナミッククラス <codeph>A</codeph>）が指定された場合、<codeph>obj.propName</codeph>（<codeph>obj</codeph> インスタンスの初期化されていないプロパティ）の値は、<codeph>undefined</codeph> です。
<codeblock>

dynamic class A {}
var obj:A = new A()

// trace undefined property of obj
trace(obj.propName); // undefined

</codeblock></example></apiValueDetail><related-links><link href="statements.html#null"><linktext>null</linktext></link></related-links></apiValue><apiClassifier id="globalClassifier:uint"><apiName>uint</apiName><shortdesc>
 uint クラスには、32 ビットの符号なし整数を表すデータ型を操作するメソッドがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>uint object, uint, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 uint クラスには、32 ビットの符号なし整数を表すデータ型を操作するメソッドがあります。符号なし整数は正のみなので、最大値は int クラスの値の 2 倍になります。
 <p>uint クラスで表される値の範囲は、0 ～ 4,294,967,295（2^32-1）です。</p>
 <p>uint オブジェクトは、uint 型の変数を宣言して変数にリテラル値を割り当てることによって作成することができます。uint 型の変数のデフォルト値は <codeph>0</codeph> です。</p>
 <p>uint クラスは主に、int データ型が適さない、ピクセルカラー値（ARGB および RGBA）やその他の状況で役に立ちます。例えば、255 のアルファ値で白のカラー値を表す数値 0xFFFFFFFF は int 値の有効な範囲外なので、int データ型を使用して表すことはできません。</p> 
 
 <p>次の例では、uint オブジェクトを作成し、<codeph> toString()</codeph> メソッドを呼び出します。</p>
 <pre>
 var myuint:uint = 1234;
 trace(myuint.toString()); // 1234
 </pre>
 <p>次の例では、コンストラクターを使用せずに、<codeph>MIN_VALUE</codeph> プロパティの値を変数に割り当てます。</p>
 <pre>
 var smallest:uint = uint.MIN_VALUE;
 trace(smallest.toString()); // 0
 </pre> 
 
 </apiDesc><example conref="examples\UintExample.as"> 次の例では、uint <codeph>i</codeph> を <codeph>for</codeph> ループ内で宣言し、0 ～ 9 の桁を出力します（uint のデフォルトが 0 のため）。
<codeblock>

package {
    import flash.display.Sprite;

    public class UintExample extends Sprite {
        public function UintExample() {
            for(var i:uint; i &lt; 10; i++) {
                trace(i);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="int.html"><linktext>int</linktext></link><link href="Number.html"><linktext>Number</linktext></link></related-links><apiConstructor id="uint:uint"><apiName>uint</apiName><shortdesc>
	 新しい uint オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>num</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>作成される uint オブジェクトの数値、または数値に変換される値です。<codeph>num</codeph> を指定しない場合のデフォルト値は <codeph>0</codeph> です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい uint オブジェクトを作成します。uint 型の変数を作成して、リテラル値を割り当てることができます。<codeph>new uint()</codeph> コンストラクターは、主にプレースホルダーとして使用します。uint オブジェクトは、パラメーターをプリミティブ値に変換する <codeph>uint()</codeph> 関数とは異なります。
	 
	 </apiDesc><example>次のコードは、2 つの新しい uint オブジェクトを作成します。1 つ目はリテラル値を割り当てて、2 つ目はコンストラクター関数を使用して作成します。
	 <pre>
	 var n1:uint = 3;
	 var n2:uint = new uint(10);
	 </pre>
	 
	 </example></apiConstructorDetail></apiConstructor><apiOperation id="uint:AS3:toExponential"><apiName>toExponential</apiName><shortdesc>
      数値のストリング表現を指数表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>fractionDigits</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>必要な小数の桁数を表す 0 ～ 20 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      数値のストリング表現を指数表現で返します。ストリングには、<codeph>fractionDigits</codeph> パラメーターでの指定に従って小数点の前に 1 桁、小数点以下に最大 20 桁が含まれます。
      </apiDesc><example conref="examples\Number.toExponential.1.as"> 次の例は、<codeph>toExponential(2)</codeph> を使用して、ストリングを指数表現で返す方法を示しています。
<codeblock>

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toFixed"><apiName>toFixed</apiName><shortdesc>
     数値のストリング表現を固定小数点表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fractionDigits</codeph> 引数が 0 ～ 20 の範囲を超える場合、例外がスローされます。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>fractionDigits</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>必要な小数の桁数を表す 0 ～ 20 の整数です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     数値のストリング表現を固定小数点表現で返します。固定小数点表現とは、<codeph>fractionDigits</codeph> パラメーターの指定に従って、小数点以下の特定の桁数をストリングに含めたものです。<codeph>fractionDigits</codeph> パラメーターの有効範囲は 0 ～ 20 です。 この範囲外の値を指定すると例外がスローされます。
     
     </apiDesc><example conref="examples\Number.toFixed.1.as"> 次の例は、<codeph>toFixed(3)</codeph> を使用して、小数点以下 3 桁に四捨五入したストリングを返す方法を示しています。
<codeblock>

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as"> 次の例は、<codeph>toFixed(2)</codeph> を使用して、末尾にゼロを追加したストリングを返す方法を示しています。
<codeblock>

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toPrecision"><apiName>toPrecision</apiName><shortdesc>
      数値のストリング表現を指数表現または固定小数点表現で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>precision</codeph> 引数が 1 ～ 21 の範囲を超える場合、例外がスローされます。
	  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>precision</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>結果のストリングに必要な桁数を表す 1 ～ 21 の整数です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      数値のストリング表現を指数表現または固定小数点表現で返します。ストリングには、<codeph>precision</codeph> パラメーターで指定された桁数が含まれます。
      </apiDesc><example conref="examples\Number.toPrecision.1.as"> 次の例は、<codeph>toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。指数表現は必要ないので、ストリングは固定小数点表現で表されます。
<codeblock>

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as"> 次の例は、<codeph>toPrecision(3)</codeph> を使用して、ストリングを 3 桁のみで返す方法を示しています。結果の数値には固定小数点表現に必要な桁が含まれないため、ストリングは指数表現で表されます。
<codeblock>

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toString"><apiName>toString</apiName><shortdesc>
	 uint オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>uint, uint.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>uint オブジェクトのストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>radix</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>数値からストリングへの変換に使用する基数（2 ～ 36）を指定します。<codeph>radix</codeph> パラメーターを指定しない場合、デフォルト値は <codeph>10</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 uint オブジェクトのストリング表現を返します。
	 
     </apiDesc><example>次の例では、<codeph>radix</codeph> パラメーターに 2 および 8 を使用し、数値 9 に対応する表現を含むストリング値を返します。
	 <pre>
	 var myuint:uint = 9;
	 trace(myuint.toString(2)); // 1001
	 trace(myuint.toString(8)); // 11
	 </pre>
	 次の例では、16 進数の値を作成します。
	 <pre>
	 var r:uint = 250;
	 var g:uint = 128;
	 var b:uint = 114;
	 var rgb:String = "0x" + r.toString(16) + g.toString(16) + b.toString(16);
	 trace(rgb); // 0xfa8072 
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:valueOf"><apiName>valueOf</apiName><shortdesc>
	 指定された uint オブジェクトのプリミティブな uint 型の値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>この uint オブジェクトのプリミティブな uint 型の値です。
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定された uint オブジェクトのプリミティブな uint 型の値を返します。
	 
	 </apiDesc><example>次の例では、<codeph>numSocks</codeph> オブジェクトのプリミティブ値を出力します。
	 <pre>
	 var numSocks:uint = 2;
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="uint:MAX_VALUE"><apiName>MAX_VALUE</apiName><shortdesc> 
	表現可能な 32 ビット符号なし整数の最大値、4,294,967,295 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>uint, uint.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4294967295</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	表現可能な 32 ビット符号なし整数の最大値、4,294,967,295 です。
	
   	</apiDesc><example>次の ActionScript は、<codeph>uint</codeph> の表現可能な最大値および最小値を表示します。
	<pre>
	trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	</pre>
	<p>値は次のとおりです。</p>
	<pre>
	uint.MIN_VALUE = 0
	uint.MAX_VALUE = 4294967295
	</pre>
	
	</example></apiValueDetail></apiValue><apiValue id="uint:MIN_VALUE"><apiName>MIN_VALUE</apiName><shortdesc>
	 表現可能な符号なし整数の最小値、0 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>uint, uint.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 表現可能な符号なし整数の最小値、<codeph>0</codeph> です。
	 
	 </apiDesc><example>次の ActionScript は、<codeph>uint</codeph> の表現可能な最大値および最小値を表示します。
	 <pre>
	 trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	 trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	 </pre>
	 <p>値は次のとおりです。</p>
	 <pre>
	 uint.MIN_VALUE = 0
	 uint.MAX_VALUE = 4294967295
	 </pre>
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="globalClassifier:Vector"><apiName>Vector</apiName><shortdesc>
 Vector クラスを使用すると、ベクターにアクセスして操作することができます。ベクターとはすべてのエレメントが同じデータ型を持つ配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector, Vector object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>ベクターを定義できます（型指定された配列)。
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Vector クラスを使用すると、ベクターにアクセスして操作することができます。ベクターとはすべてのエレメントが同じデータ型を持つ配列です。ベクターのエレメントのデータ型は、ベクターのベース型と呼ばれています。<i/>ベース型は、ビルトインクラスとカスタムクラスを含む任意のクラスです。ベース型は、Vector 変数の宣言時とクラスコンストラクターの呼び出しによるインスタンスの作成時に指定されます。
 
 <p>配列の場合と同様に、配列アクセス（<codeph>[]</codeph>）演算子を使用すると、ベクターエレメントの値を設定または取得できます。また、いくつかのベクターのメソッドは、エレメントの値を設定および取得するためのメカニズムを備えています。これらののメソッドには、<codeph>push()</codeph>、<codeph>pop()</codeph>、<codeph>shift()</codeph>、<codeph>unshift()</codeph> などがあります。Vector オブジェクトのプロパティとメソッドは、配列のプロパティとメソッドと似ており、ほとんどの場合は同じです。すべてのエレメントが同じデータ型を持つ配列を使用する場合は、Vector インスタンスが推奨されます。</p>
 
 <p>ベクターのベース型は、後置型パラメーターシンタックスを使用して指定されます。型パラメーターシンタックスは、ドット（<codeph>.</codeph>）、左山括弧（<codeph>&lt;</codeph>）、クラス名、右山括弧（<codeph>></codeph>）で構成されるシーケンスです。次に例を示します。</p>
 
 <codeblock>
 var v:Vector.&lt;String>;
 v = new Vector.&lt;String>();
 </codeblock>
 
 <p>この例の最初の行では、変数 <codeph>v</codeph> が Vector.&lt;String> インスタンスとして宣言されます。 つまり、この行は String インスタンスのみ保持することができ、String インスタンスのみ取得できるベクター（配列）を表します。2 番目の行は、同じ Vector 型（つまり、エレメントがすべて String オブジェクトであるベクター）のインスタンスを構築し、<codeph>v</codeph> に割り当てます。</p>
 
 <p>Vector.&lt;T> データ型によって宣言された変数は、同じベース型 <codeph>T</codeph> を使用して構築された Vector インスタンスのみ格納することができます。例えば、新しい <codeph>Vector.&lt;String>()</codeph> を呼び出すことによって構築されたベクターは、Vector.&lt;int> データ型によって宣言された変数に割り当てることはできません。ベース型は完全に一致する必要があります。例えば、次のコードは、オブジェクトのベース型が宣言された変数のベース型と同じでないため（Sprite が DisplayObject のサブクラスであっても）コンパイルされません。</p>
 
 <codeblock>
 // This code doesn't compile even though Sprite is a DisplayObject subclass
 var v:Vector.&lt;DisplayObject> = new Vector.&lt;Sprite>();
 </codeblock>
 
 <p>ベース型 <codeph>T</codeph> を持つベクターを <codeph>T</codeph> のスーパークラスのベクターに変換するには、<codeph>Vector()</codeph> グローバル関数を使用します。</p>
 
 <p>データ型の制限に加えて、Vector クラスには Array クラスと区別される次のようなその他の制限があります。</p>
 
 <ul>
   <li>ベクターは高密度の配列です。位置 1 ～ 6 に値がない場合でもインデックス 0 と 7 に値を指定することができる配列とは異なり、ベクターでは各インデックスに値（または <codeph>null</codeph>）を指定する必要があります。</li>
   <li>ベクターは、オプションで固定長、つまり含まれるエレメントの数を変更できないように設定できます。</li>
   <li>ベクターのエレメントへのアクセスは範囲チェックが行われます。最後のエレメント（<codeph>length - 1</codeph>）より長いインデックスから値を読み取ることはできません。現在の最後のインデックスを越えて値を設定することはできません（つまり、既存のインデックスまたはインデックス <codeph>[length]</codeph> でのみ値を設定することができます）。</li>
 </ul>
 
 <p>このような制限の結果として、ベクターでは、エレメントがすべて単一クラスのインスタンスとなる Array インスタンスにはない、次の 2 つの主要な利点が得られます。</p>
 <ul>
   <li>パフォーマンス：Array インスタンスを使用するよりも、Vector インスタンスを使用する方が、配列エレメントのアクセスと繰り返しが高速になります。</li>
   <li>型の安全性：コンパイラーは Strict モードの場合、不正なデータ型の値をベクターに割り当てたり、ベクターから値を読み取るときに間違ったデータ型が読み取られる恐れがあるなどのデータ型のエラーを識別できます。ただし、<codeph>push()</codeph> メソッドまたは <codeph>unshift()</codeph> メソッドを使用してベクターに値を追加する場合、引数のデータ型はコンパイル時にチェックされず、実行時にチェックされることに注意してください。</li>
 </ul> 
 
 </apiDesc></apiClassifierDetail><related-links><link href="operators.html#array_access"><linktext>[] array access</linktext></link><link href="#global/Vector()"><linktext>Vector() 関数</linktext></link><link href="#Array"><linktext>Array クラス</linktext></link></related-links><apiConstructor id="Vector:Vector"><apiName>Vector</apiName><shortdesc>
	 指定されたベース型を持つベクターを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>ベクターの初期長さ（エレメント数）です。このパラメーターが 0 より大きい場合、指定された数のベクターエレメントが作成され、ベース型に適したデフォルト値が設定されます（参照型の場合、<codeph>null</codeph>）。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fixed</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ベクターの長さが固定されるか（<codeph>true</codeph>）、または変更できるか（<codeph>false</codeph>）を指定します。この値は <codeph>fixed</codeph> プロパティを使用して設定することもできます。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 指定されたベース型を持つベクターを作成します。
	 
	 <p><codeph>Vector.&lt;T>()</codeph> コンストラクターを呼び出すときに、型パラメーターシンタックスを使用してベース型を指定します。型パラメーターシンタックスは、ドット（<codeph>.</codeph>）、左山括弧（<codeph>&lt;</codeph>）、クラス名、右山括弧（<codeph>></codeph>）で構成されるシーケンスです。次に例を示します。</p>
	 
	 <pre product="flash">
	 var v:Vector.&lt;String> = new Vector.&lt;String>();
	 </pre>
	 
	 <p>Array クラスと異なり、<codeph>Vector.&lt;T>()</codeph> コンストラクターを使用して事前設定された Vector インスタンスを作成することはできません。配列または他のベクター（異なるベース型を持つベクターなど）から Vector インスタンスを作成するには、<codeph>Vector()</codeph> グローバル関数を使用します。</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="#global/Vector()"><linktext>Vector() 関数</linktext></link></related-links></apiConstructor><apiOperation id="Vector:AS3:concat"><apiName>concat</apiName><shortdesc>
     パラメーターで指定されたエレメントをベクター内のエレメントと連結して、新しいベクターを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.concat, concat, concatenate
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc>引数がベース型のインスタンスではない場合で、ベース型に変換できない場合。
     
     </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiDesc>このベクターの後にパラメーターのエレメントが続くベクターと同じベース型を持つベクター。
	 
	 </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>新しいベクターに連結されるこのベクターのベース型の 1 つ以上の値。値を渡さない場合、新しいベクターは元のベクターの複製になります。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>パラメーターに指定されたエレメントを連結します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     パラメーターで指定されたエレメントをベクター内のエレメントと連結して、新しいベクターを作成します。パラメーターでベクターを指定すると、そのベクターのエレメントが連結されます。 
	 
	 <codeblock>hello world</codeblock>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:every"><apiName>every</apiName><shortdesc>
	指定された関数について false を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ブール値です。指定された関数について、ベクター内のいずれかのアイテムが <codeph>true</codeph> を返す場合は <codeph>true</codeph> を返します。それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
	<pre>function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean {
	   // your code here
	}
	</pre> 
	
	<p>コールバック関数はブール値を返します。</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>関数が呼び出されるときにコールバック関数の識別子 <codeph>this</codeph> が参照するオブジェクトです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定された関数について <codeph>false</codeph> を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。 このメソッドを使用して、ベクター内のすべてのアイテムがある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
	
	<p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
	
	<p product="flash">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph>this</codeph> コンテキストで呼び出す必要があるとします。</p>
	
	<pre product="flash">
	function myFunction(item:T, index:int, vector:Vector.&lt;T>):Boolean {
	   // your code here
	}
	</pre>
	
	<p product="flash">次に、<codeph>every()</codeph> メソッドを、<codeph>myVector</codeph> というベクターに対して使用するとします。</p>
	
	<pre product="flash">
	myVector.every(myFunction, someObject);
	</pre>
	
	<p product="flash"><codeph>myFunction</codeph> は SWF のメインクラスのメンバーであるため、異なる <codeph>this</codeph> コンテキストでは実行できません。 このコードを実行すると、Flash Player または AIR はエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
	
	<pre product="flash">
	var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
	    //your code here
	};
	myVector.every(myFunction, someObject);
	</pre>
	
	</apiDesc></apiOperationDetail><related-links><link href="#Vector/some()"><linktext>Vector.some()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:filter"><apiName>filter</apiName><shortdesc>
     ベクター内の各アイテムについてテスト関数を実行し、指定された関数について true を返すすべてのアイテムを含む新しいベクターを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元のベクター内のアイテムで <codeph>callback</codeph> 関数が <codeph>true</codeph> を返したものをすべて含む新しいベクター。
     
     </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre>function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>関数が呼び出されるときにコールバック関数の識別子 <codeph>this</codeph> が参照するオブジェクトです。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクター内の各アイテムについてテスト関数を実行し、指定された関数について <codeph>true</codeph> を返すすべてのアイテムを含む新しいベクターを返します。<codeph>false</codeph> を返すアイテムは、結果ベクターに含められません。戻りベクターのベース型はメソッドが呼び出されるベクターのベース型と一致します。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
	 
	 <p product="flash">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph>this</codeph> コンテキストで呼び出す必要があるとします。</p>
	 
     <pre product="flash">
     function myFunction(item:T, index:int, vector:Vector.&lt;T>):Boolean {
        // your code here
     }
     </pre>
	 
     <p product="flash">次に、<codeph>filter()</codeph> メソッドを、<codeph>myVector</codeph> というベクターに対して使用するとします。</p>
	 
     <pre product="flash">
     var result:Vector.&lt;T> = myVector.filter(myFunction, someObject);
     </pre>
	 
     <p product="flash"><codeph>myFunction</codeph> は SWF のメインクラスのメンバーであるため、異なる <codeph>this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash Player はエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
	 
     <pre product="flash">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
         //your code here
     };
     myVector.filter(myFunction, someObject);
     </pre>
	 
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/map()"><linktext>Vector.map()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:forEach"><apiName>forEach</apiName><shortdesc>
     ベクター内の各アイテムについて関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre>function callback(item:T, index:int, vector:Vector.&lt;T>):void;</pre>
	 <p>関数呼び出しの戻り値は破棄されます。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>関数が呼び出されるときにコールバック関数の識別子 <codeph>this</codeph> が参照するオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクター内の各アイテムについて関数を実行します。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
	 
	 <p product="flash">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph>this</codeph> コンテキストで呼び出す必要があるとします。</p>
	 
     <pre product="flash">
     function myFunction(item:T, index:int, vector:Vector.&lt;T>):void {
        // your code here
     }
     </pre>
	 
     <p product="flash">次に、<codeph>forEach()</codeph> メソッドを、<codeph>myVector</codeph> というベクターに対して使用するとします。</p>
	 
     <pre product="flash">
     myVector.forEach(myFunction, someObject);
     </pre>
	 
     <p product="flash"><codeph>myFunction</codeph> は SWF のメインクラスのメンバーであるため、異なる <codeph>this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash Player はエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
	 
     <pre product="flash">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):void {
         //your code here
     };
     myVector.forEach(myFunction, someObject);
     </pre>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:indexOf"><apiName>indexOf</apiName><shortdesc>
     ベクター内のアイテムを検索し、アイテムのインデックス位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ベクター内のアイテムの 0 から始まるインデックス位置です。<codeph>searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
     
     </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>searchElement</apiItemName><apiType value="T"/><apiDesc>ベクター内で検索するアイテムです。
     
     </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>アイテムの検索を開始するベクター内の場所です。このパラメーターが負の場合、<codeph>length + fromIndex</codeph> として扱われます。つまり、検索は最後の <codeph>-fromIndex</codeph> アイテムから開始し、その位置から前方に向かってベクターの最後まで検索します。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクター内のアイテムを検索し、アイテムのインデックス位置を返します。アイテムは、厳密な等価（<codeph>===</codeph>）を使用してベクターエレメントと比較されます。
	 
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/lastIndexOf()"><linktext>Vector.lastIndexOf()</linktext></link><link href="operators.html#strict_equality"><linktext>=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:join"><apiName>join</apiName><shortdesc>
     ベクター内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.join, join
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ストリングに変換されたベクターのエレメントで構成され、指定されたストリングで区切られているストリングです。
     
     
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>sep</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>,</apiData><apiDesc>返されたストリング内のベクターエレメントを区切る文字またはストリングです。このパラメーターを省略すると、デフォルトのセパレーターとしてカンマが使用されます。 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>ベクター内のエレメントをストリングに変換します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     ベクター内のエレメントをストリングに変換し、指定されたセパレーターをエレメント間に挿入し、エレメントを連結して、その結果をストリングとして返します。ネストされたベクターは、<codeph>join()</codeph> メソッドに渡されるセパレーターで区切るのではなく、常にカンマ（,）で区切ります。
     
     </apiDesc></apiOperationDetail><related-links><link href="#String/split()"><linktext>String.split()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:lastIndexOf"><apiName>lastIndexOf</apiName><shortdesc>
     ベクター内のアイテムを、指定されたインデックス位置から後方に向かって検索し、一致したアイテムのインデックス位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ベクター内のアイテムの 0 から始まるインデックス位置です。<codeph>searchElement</codeph> 引数が見つからなかった場合、戻り値は -1 です。
     
     </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>searchElement</apiItemName><apiType value="T"/><apiDesc>ベクター内で検索するアイテムです。
     
     </apiDesc></apiParam><apiParam><apiItemName>fromIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0x7fffffff</apiData><apiDesc>アイテムの検索を開始するベクター内の場所です。デフォルトは、許容される最大インデックス値です。つまり、検索はベクター内の最後のアイテムから開始されます。
	 <p>このパラメーターが負の場合、<codeph>length + fromIndex</codeph> として扱われます。つまり、検索は最後の <codeph>-fromIndex</codeph> アイテムから開始し、その位置から後方に向かってインデックス 0 まで検索します。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクター内のアイテムを、指定されたインデックス位置から後方に向かって検索し、一致したアイテムのインデックス位置を返します。アイテムは、厳密な等価（<codeph>===</codeph>）を使用してベクターエレメントと比較されます。
	 
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/indexOf()"><linktext>Vector.indexOf()</linktext></link><link href="operators.html#strict_equality"><linktext>=== (strict equality)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:map"><apiName>map</apiName><shortdesc>
     ベクター内の各アイテムについて関数を実行し、このベクター内の各アイテムに対する関数の呼び出しの結果に対応するアイテムの新しいベクターを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ベクター内の各アイテムに対する関数の呼び出しの結果が含まれる新しいベクターです。結果ベクターには、元のベクターと同じベース型と <codeph>length</codeph> が指定されます。
     
     </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre>function callback(item:T, index:int, vector:Vector.&lt;T>):T;</pre> 
     
     </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>関数が呼び出されるときにコールバック関数の識別子 <codeph>this</codeph> が参照するオブジェクトです。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクター内の各アイテムについて関数を実行し、このベクター内の各アイテムに対する関数の呼び出しの結果に対応するアイテムの新しいベクターを返します。結果ベクターには、元のベクターと同じベース型と <codeph>length</codeph> が指定されます。結果ベクターのインデックス <codeph>i</codeph> のエレメントは、元のベクターのインデックス <codeph>i</codeph> のエレメントでの呼び出しの結果です。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
	 
	 <p product="flash">ただし、Flash Professional を使用して、メインタイムライン上のフレームで関数を作成し、それを異なる <codeph>this</codeph> コンテキストで呼び出す必要があるとします。</p>
	 
     <pre product="flash">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T>):T {
        // your code here
     }
     </pre>
	 
     <p product="flash">次に、<codeph>map()</codeph> メソッドを、<codeph>myVector</codeph> というベクターに対して使用するとします。</p>
	 
     <pre product="flash">
     myVector.map(myFunction, someObject);
     </pre>
	 
     <p product="flash"><codeph>myFunction</codeph> は SWF ファイルのメインクラスのメンバーであるため、異なる <codeph>this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash Player はエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
	 
     <pre product="flash">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):void {
         //your code here
     };
     myVector.map(myFunction, someObject);
     </pre>
	 
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/filter()"><linktext>Vector.filter()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:pop"><apiName>pop</apiName><shortdesc>
     ベクターの最後のエレメントを削除して、そのエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.pop, pop
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fixed</codeph> が <codeph>true</codeph> のときにこのメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたベクターの最後のエレメントの値です。
	 
	 </apiDesc><apiType value="T"/></apiReturn></apiOperationDef><apiDesc>
     ベクターの最後のエレメントを削除して、そのエレメントを返します。この関数が呼び出されるときに、ベクターの <codeph>length</codeph> プロパティは 1 つ減少します。
     
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/push()"><linktext>Vector.push()</linktext></link><link href="#Vector/shift()"><linktext>Vector.shift()</linktext></link><link href="#Vector/unshift()"><linktext>Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:push"><apiName>push</apiName><shortdesc>
     エレメントをベクターの最後に追加して、ベクターの新しい長さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.push, push
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc>引数がベクターのベース型 <codeph>T</codeph> のインスタンスではない場合。
     
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>fixed</codeph> が <codeph>true</codeph> のときにこのメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>新しいエレメントが追加された後のベクターの長さです。
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>ベクターに追加される値です。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     エレメントをベクターの最後に追加して、ベクターの新しい長さを返します。
	 
	 <p>この関数は複数の引数を受け入れることができるので、Strict モードの場合でも、コンパイル時に引数のデータ型はチェックされません。ただし、ベース型のインスタンスではない引数が渡されると、実行時に例外が発生します。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/pop()"><linktext>Vector.pop()</linktext></link><link href="#Vector/shift()"><linktext>Vector.shift()</linktext></link><link href="#Vector/unshift()"><linktext>Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:reverse"><apiName>reverse</apiName><shortdesc>
     ベクター内のエレメントの順序を反転します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.reverse, reverse
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>逆の順序のエレメントを持つベクター。
	 
     </apiDesc><apiType value="Vector$T"/></apiReturn></apiOperationDef><apiDesc>
     ベクター内のエレメントの順序を反転します。このメソッドは呼び出されるベクターを変更します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:shift"><apiName>shift</apiName><shortdesc>
     ベクターの最初のエレメントを削除して、そのエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.shift, shift
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>fixed</codeph> が <codeph>true</codeph> の場合。
     
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>ベクター内の最初のエレメント。
     
	 </apiDesc><apiType value="T"/></apiReturn></apiOperationDef><apiDesc>
     ベクターの最初のエレメントを削除して、そのエレメントを返します。残りのベクターエレメントは、元の位置 i から i - 1 に移動されます。
     
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/pop()"><linktext>Vector.pop()</linktext></link><link href="#Vector/push()"><linktext>Vector.push()</linktext></link><link href="#Vector/unshift()"><linktext>Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:slice"><apiName>slice</apiName><shortdesc>
     元のベクターから一連のエレメントを取り出して、新しいベクターを返します。元のベクターは変更されません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.slice, slice
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>元のベクターから取り出した一連のエレメントから成るベクターです。
     
     </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>スライスの始点のインデックスを示す数値です。 <codeph>startIndex</codeph> が負の数値の場合、始点はベクターの末尾から開始します。つまり、-1 が最後のエレメントです。  
     
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>16777215</apiData><apiDesc>スライスの終点のインデックスを示す数値です。 このパラメーターを省略すると、スライスにはベクターの最初から最後までのすべてのエレメントが取り込まれます。<codeph>endIndex</codeph> が負の数値の場合、終点はベクターの末尾から開始します。つまり、-1 が最後のエレメントです。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>元のベクターから取り出した一連のエレメントから成る新しいベクターを返します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     元のベクターから一連のエレメントを取り出して、新しいベクターを返します。元のベクターは変更されません。返されるベクターには、<codeph>startIndex</codeph> エレメントから <codeph>endIndex</codeph> の前のエレメントまでのすべてのエレメントが含まれます。
	 
     <p>パラメーターを何も渡さないと、元のベクターの複製が作成されます。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:some"><apiName>some</apiName><shortdesc>
     true を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>ブール値です。指定された関数についてベクター内のいずれかのアイテムが <codeph>true</codeph> を返す場合は <codeph>true</codeph> を返します。それ以外の場合は <codeph>false</codeph> を返します。
     
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>callback</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>ベクター内の各アイテムについて実行する関数です。この関数は、ベクターの現在のアイテム、アイテムのインデックス、および Vector オブジェクトの 3 つの引数によって呼び出されます。
     <pre>function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean</pre> 
     
     <p>コールバック関数はブール値を返します。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>thisObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>関数が呼び出されるときにコールバック関数の識別子 <codeph>this</codeph> が参照するオブジェクトです。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>true</codeph> を返すアイテムに達するまで、ベクター内の各アイテムにテスト関数を実行します。このメソッドを使用して、ベクター内のいずれのアイテムもある基準（値が特定の数値より小さいなど）を満たしているかどうかを判別できます。
     
     <p product="flash">このメソッドで、2 番目のパラメーター <codeph>thisObject</codeph> は、<codeph>null</codeph> でなければなりません（最初のパラメーター <codeph>callback</codeph> がメソッド閉包である場合）。これは、このメソッドの最も一般的な使用方法です。</p>
	 
	 <p product="flash">ただし、メインタイムライン上のフレームで関数を作成するが、異なる <codeph>this</codeph> コンテキストで呼び出す必要があるとします。</p>
	 
     <pre product="flash">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T>):Boolean {
        // your code here
     }
     </pre>
	 
     <p product="flash">次に、<codeph>some()</codeph> メソッドを、<codeph>myVector</codeph> というベクターに対して使用するとします。</p>
	 
     <pre product="flash">
     myVector.some(myFunction, someObject);
     </pre>
	 
     <p product="flash"><codeph>myFunction</codeph> は SWF ファイルのメインクラスのメンバーであるため、異なる <codeph>this</codeph> コンテキストでは実行できません。このコードを実行すると、Flash Player はエラーをスローします。このランタイムエラーは、次のように関数を変数に割り当てることによって回避できます。</p>
	 
     <pre product="flash">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
         //your code here
     };
     myVector.some(myFunction, someObject);
     </pre>
	 
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/every()"><linktext>every()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:sort"><apiName>sort</apiName><shortdesc>
     ベクター内のエレメントをソートします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.sort, sort
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiReturn><apiDesc>新しい順序のエレメントを持つベクター。
     
     </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>compareFunction</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>ソートの動作を設定する比較メソッドです。
	 
     <p>指定したメソッドはベクターのベース型（<codeph>T</codeph>）の 2 つの引数を受け取り、数値を返す必要があります。</p>
	 
	 <codeblock>function compare(x:T, y:T):Number {}</codeblock>
	 
	 <p><codeph>compareFunction</codeph> 関数のロジックにより、2 つのエレメント <codeph>x</codeph> と <codeph>y</codeph> が指定された場合、この関数は次の 3 つの値のいずれかを返します。</p>
	 
     <ul>
       <li><codeph>x</codeph> が <codeph>y</codeph> の前に表示されるソート順の場合は負の数。</li>
       <li><codeph>x</codeph> と <codeph>y</codeph> が等しい場合は 0。</li>
       <li><codeph>x</codeph> が <codeph>y</codeph> の後に表示されるソート順の場合は正の数。</li>
     </ul>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクター内のエレメントをソートします。このメソッドは、<codeph>compareFunction</codeph> パラメーターとして提供される関数に基づいてソートを実行します。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:splice"><apiName>splice</apiName><shortdesc>
     ベクターのエレメントを追加および削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.splice, splice
	 
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc><codeph>startIndex</codeph> と <codeph>deleteCount</codeph> 引数がベクターの境界外にあるインデックスを削除するように指定する場合。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>このメソッドが <codeph>fixed</codeph> が <codeph>true</codeph> のときに呼び出され、<codeph>splice()</codeph> 演算によってベクターの <codeph>length</codeph> が変更された場合。
     
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>元のベクターから削除されたエレメントを含むベクターです。
     
	 </apiDesc><apiType value="Vector$T"/></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>挿入または削除を開始するベクターエレメントのインデックスを示す整数です。負の整数を使用すると、ベクターの末尾を基準として位置を指定できます。例えば、-1 はベクターの最後のエレメントです。
	 
     </apiDesc></apiParam><apiParam><apiItemName>deleteCount</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>削除するエレメント数を示す整数です。この数には、<codeph>startIndex</codeph> パラメーターで指定するエレメントが含まれます。<codeph>deleteCount</codeph> パラメーターに値を指定しないと、ベクター内の <codeph>startIndex</codeph> の位置のエレメントから最後のエレメントまで、すべての値が削除されます。値として 0 を指定すると、エレメントは削除されません。
	 
     </apiDesc></apiParam><apiParam><apiItemName>items</apiItemName><apiType value="restParam"/><apiDesc><codeph>startIndex</codeph> パラメーターで指定したベクター内の位置に挿入するカンマ区切り値のオプションリストです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ベクターのエレメントを追加および削除します。このメソッドは、コピーを作成しないで、ベクターを変更します。
	 
     <p><b>注意：</b>ベクターのサブクラス内でこのメソッドをオーバーライドするには、次の例に示すように、パラメーターに <codeph>...args</codeph> を使用します。</p>
	 
     <pre>
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:toLocaleString"><apiName>toLocaleString</apiName><shortdesc>
     指定されたベクター内のエレメントを表すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ベクターエレメントのストリングです。
	 
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     指定されたベクター内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでのベクター内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。ActionScript 3.0 実装において、このメソッドは、<codeph>Vector.toString()</codeph> と同じ値を返します。
     
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/toString()"><linktext>Vector.toString()</linktext></link></related-links></apiOperation><apiOperation id="Vector:toString"><apiName>toString</apiName><shortdesc>
     ベクター内のエレメントを表すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.toString, toString
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ベクターエレメントのストリングです。
     
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ベクター内のエレメントを表すストリングを返します。インデックス 0 から最大インデックスまでのベクター内のすべてのエレメントを、カンマで区切られた連結ストリングに変換して返します。カスタムセパレーターを指定するには、<codeph>Vector.join()</codeph> メソッドを使用します。
     
     </apiDesc></apiOperationDetail><related-links><link href="#String/split()"><linktext>String.split()</linktext></link><link href="#Vector/join()"><linktext>Vector.join()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:unshift"><apiName>unshift</apiName><shortdesc>
     エレメントをベクターの先頭に追加して、ベクターの新しい長さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Vector.unshift, unshift
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="AS3"/><apiException><apiDesc>引数がベクターのベース型 <codeph>T</codeph> のインスタンスではない場合。
     
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>fixed</codeph> が <codeph>true</codeph> のときにこのメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>ベクターの新しい長さを表す整数です。
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>ベクターの先頭に挿入されるこのベクターのベース型の 1 つ以上のインスタンス。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     エレメントをベクターの先頭に追加して、ベクターの新しい長さを返します。ベクター内のその他のエレメントは、元の位置 i から i に新しいエレメントの数を加えた位置に移動されます。
     
	 <p>この関数は複数の引数を受け入れることができるので、Strict モードの場合でも、コンパイル時に引数のデータ型はチェックされません。ただし、ベース型のインスタンスではない引数が渡されると、実行時に例外が発生します。</p>
	 
     </apiDesc></apiOperationDetail><related-links><link href="#Vector/pop()"><linktext>Vector.pop()</linktext></link><link href="#Vector/push()"><linktext>Vector.push()</linktext></link><link href="#Vector/shift()"><linktext>Vector.shift()</linktext></link></related-links></apiOperation><apiValue id="Vector:fixed:get"><apiName>fixed</apiName><shortdesc>
     ベクターの length プロパティを変更できるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>vector.fixed, fixed
     
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     ベクターの <codeph>length</codeph> プロパティを変更できるかどうかを指定します。値が <codeph>false</codeph> の場合、<codeph>length</codeph> プロパティは変更できません。これは、<codeph>fixed</codeph> が <codeph>true</codeph> の場合、次の操作は行うことができないことを意味します。
	 
	 <ul>
	   <li><codeph>length</codeph> プロパティの直接的な設定</li>
	   <li>インデックス位置 <codeph>length</codeph> への値の割り当て</li>
	   <li><codeph>length</codeph> プロパティを変更する以下のメソッドの呼び出し
	     <ul>
	       <li><codeph>pop()</codeph></li>
	       <li><codeph>push()</codeph></li>
	       <li><codeph>Shift()</codeph></li>
	       <li><codeph>unshift()</codeph></li>
	       <li><codeph>splice()</codeph>（<codeph>splice()</codeph> 呼び出しがベクターの <codeph>length</codeph> を変更する場合）</li>
	     </ul>
	   </li>
	 </ul>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="Vector:length:get"><apiName>length</apiName><shortdesc>
     ベクター内で使用できる有効なインデックスの範囲です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>vector.length, length
     
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc><codeph>fixed</codeph> が <codeph>true</codeph> のときにこのプロパティが変更された場合。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>このプロパティが、許容される最大インデックス（2<sup>32</sup>）より大きい値に設定された場合。
	 
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     ベクター内で使用できる有効なインデックスの範囲です。Vector インスタンスは、<codeph>length</codeph> 値（ただし、最大値は除く）までのインデックス位置を持ちます。
	 
	 <p>ずべてのベクターエレメントは、常にベース型のインスタンスまたは <codeph>null</codeph> のいずれかの値を持ちます。<codeph>length</codeph> プロパティが前の値より大きい値に設定されている場合、追加のエレメントが作成され、ベース型に適したデフォルト値（参照型の場合は <codeph>null</codeph>）が設定されます。</p>
	 
	 <p><codeph>length</codeph> プロパティが前の値より小さい値に設定されている場合、新しい <codeph>length</codeph> 値以上のインデックス位置にあるすべてのエレメントがベクターから削除されます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>