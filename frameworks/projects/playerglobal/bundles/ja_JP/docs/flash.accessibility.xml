<?xml version="1.0"?>
<apiPackage id="flash.accessibility"><apiName>flash.accessibility</apiName><apiDetail/><apiClassifier id="flash.accessibility:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
 AccessibilityImplementation クラスは、コンポーネントでアクセシビリティを実装することを目的とした Flash Player の基本クラスです。</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 AccessibilityImplementation クラスは、コンポーネントでアクセシビリティを実装することを目的とした Flash Player の基本クラスです。このクラスはコンポーネントとスクリーンリーダー間の通信を可能にします。スクリーンリーダーは視覚障害者のために画面コンテンツを合成音または点字に変換します。
 
 <p>AccessibilityImplementation クラスのメソッドを使用することで、システムロール、オブジェクトベースのイベント、ステートなどに関する情報をコンポーネントから補助テクノロジーに提供できるようになります。</p>
 
 <p>Adobe Flash Player では、Microsoft Active Accessibility（MSAA）が使用されます。MSAA は、アプリケーションとスクリーンリーダーの間の通信方法を記述した標準的方式です。Flash Player と MSAA の連携方法について詳しくは、『Using Flex SDK<i/>』のアクセシビリティに関する章を参照してください。</p>
 
 <p>AccessibilityImplementation クラスのメソッドは、コンポーネントインスタンスの <xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx">IAccessible</xref> インターフェイスのサブセットです。</p>
 
 <p>AccessibilityImplementation が IAccessible インターフェイスを実装する方法および送信するイベントは、実装するコンポーネントの種類によって異なります。</p>
 
 <p>コンストラクターを呼び出して AccessibilityImplementation を直接インスタンス化しないでください。代わりに、新しいコンポーネントごとに Flex の mx.accessibility.AccImpl クラスを拡張して、新しいアクセシビリティの実装を作成してください。詳しくは、『Using Flex SDK<i/>』のアクセシビリティに関する章を参照してください。</p>
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
	 コンストラクターを呼び出して AccessibilityImplementation を直接インスタンス化しないでください。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 コンストラクターを呼び出して AccessibilityImplementation を直接インスタンス化しないでください。代わりに、新しいコンポーネントごとに Flex の mx.accessibility.AccImpl クラスを拡張して、新しいアクセシビリティの実装を作成してください。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href=""><linktext>Flex の mx.accessibility.AccImpl クラス（¥sdks¥4.0.0¥frameworks¥projects¥framework¥src¥mx¥accessibility¥AccImpl.as）</linktext></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction"><apiName>accDoDefaultAction</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかに関連付けられているデフォルトアクションを実行する IAccessible メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかに関連付けられているデフォルトアクションを実行する IAccessible メソッドです。
	 
	 <p>このメソッドは、AccessibilityImplementation が表す UI 要素に MSAA モデルのデフォルトアクションが存在する場合にのみ実装してください。</p>
	 
	 <p>AccessibilityImplementation 自体に対してのみ、またはその子要素に対してのみ <codeph>accDoDefaultAction()</codeph> を実装する場合、状況によっては、渡された childID に対するデフォルトアクションが存在しないことを示す必要があります。その場合は、<codeph>errno</codeph> プロパティを <codeph>E_MEMBERNOTFOUND</codeph> に設定します。</p>
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で適切なデフォルトアクションを実行するようにこのメソッドを実装する方法を示しています。ListBase とそれを継承するクラスの場合、子リストアイテム要素のいずれかに対してデフォルトアクション "Double Click" を実行すると、その要素が選択されます。
	 <codeblock rev="3.0">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation"><apiName>accLocation</apiName><shortdesc>
	 AccessibilityImplementation の子要素の境界ボックスを指定する DisplayObject または Rectangle を返すための MSAA メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>childID</codeph> パラメーターで指定されている子要素の境界ボックスを指定する <codeph>DisplayObject</codeph> または <codeph>Rectangle</codeph> です。
	 
	 
	 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 AccessibilityImplementation の子要素の境界ボックスを指定する <codeph>DisplayObject</codeph> または <codeph>Rectangle</codeph> を返すための MSAA メソッドです。
	 
	 <p>このメソッドは、<codeph>childID</codeph> がゼロの場合には呼び出されません。AccessibilityImplementation に子要素が含まれない場合は、このメソッドを実装しないでください。AccessibilityImplementation が子要素を含む可能性がある場合、このメソッドは必須です。</p>
	 
	 <p>通常は、子要素自体を表すオブジェクトを返すことにより、このメソッドの要件を満たすことができます。これは、子要素が <codeph>DisplayObject</codeph> である限り機能します。このような場合は、表示リスト内で該当するビジュアルオブジェクトに関連付けられたインスタンス名に対応する <codeph>DisplayObject</codeph> を返すだけで問題ありません。</p>	
	 
	 <p>子要素が上記の方法に適さない場合は、境界ボックスの計算を手動で行い、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、<codeph>height</codeph> プロパティを指定して <codeph>Rectangle</codeph> を返すことができます。<codeph>x</codeph> および <codeph>y</codeph> メンバーは境界ボックスの左上隅の位置を示し、<codeph>width</codeph> および <codeph>height</codeph> メンバーは境界ボックスのサイズを示します。4 つのメンバーの単位はすべて Stage ピクセルであり、AccessibilityImplementation が表すコンポーネントの原点を基準として指定する必要があります。<codeph>DisplayObject</codeph> の原点は左上隅でなくてもよいので、<codeph>x</codeph> および <codeph>y</codeph> プロパティでは負の値を指定することもできます。</p>
	 
	 <p><codeph>childID</codeph> で指定されている子要素が非表示の場合（つまり、その子に対する <codeph>get_accState</codeph> が <codeph>STATE_SYSTEM_INVISIBLE</codeph> を含む値を返す場合）、<codeph>accLocation</codeph> から <codeph>null</codeph> を返すことができます。また、子要素が表示された場合の座標を表す <codeph>Rectangle</codeph> を返すこともできます。</p>
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で特定の子要素の場所を返すようにこのメソッドを実装する方法を示しています。
	 <codeblock rev="3.0">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::accLocation</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect"><apiName>accSelect</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネント内の選択を変更するための IAccessible メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selFlag</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>アイテムが選択される方法（フォーカスを取得する方法）を示す 1 つ以上の選択フラグ定数で構成されるビットフィールドです。  
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネント内の選択を変更するための IAccessible メソッドです。 
	 
	 <p><codeph>childID</codeph> パラメーターは常にゼロ以外の値になります。このメソッドは常にコンポーネント全体ではなく子要素に適用されます。コンポーネント全体の選択は Flash Player によって管理されます。</p>
	 
	 <p><codeph>selFlag</codeph> パラメーターは、<codeph>childID</codeph> で参照されているアイテムが選択される方法（フォーカスを取得する方法）を示すために MSAA クライアントで使用される 1 つ以上の選択フラグ定数で構成されるビットフィールドです。以下では、選択フラグ定数の概要について説明し、これらの定数によってアクセシビリティの実装に提供される情報について説明します。実際には、Flex の mx.accessibility.ListBaseAccImpl クラスを継承するアクセシビリティの実装に含まれるこのメソッドのほとんどの実装は <codeph>selFlag</codeph> 定数を無視し、代わりにコンポーネントのキーボード選択動作に基づいて複数選択を処理します。</p>
	 
	 <p><codeph>selFlag</codeph> パラメーターは、<codeph>SELFLAG_TAKEFOCUS</codeph> フラグを含む場合と、含まない場合があります。このフラグを含む場合は、指定された <codeph>childID</codeph> に子フォーカスを設定する必要があり、<codeph>SELFLAG_EXTENDSELECTION</codeph> も存在していない場合は、その子要素を選択アンカーにします。このフラグを含まない場合は、子フォーカスと選択アンカーを変更しないようにする必要があります。ただし、後で説明するその他のフラグを選択を変更することは可能です。</p>
	 
	 <p><codeph>selFlag</codeph> 引数は常に次の 4 つのフラグのいずれかを含みます。これらのフラグは、どのような種類の選択変更が必要であるかを示しています。</p>
	 <ul>
	 <li><p><codeph>SELFLAG_TAKESELECTION</codeph>：既存の選択をクリアし、選択対象を指定された <codeph>childID</codeph> に設定します。</p>
	 </li>
	 <li><p><codeph>SELFLAG_EXTENDSELECTION</codeph>：選択アンカーと指定された <codeph>childID</codeph> の間（両方を含む）の子要素の範囲を計算します。<codeph>SELFLAG_ADDSELECTION</codeph> がある場合は、これらの子要素をすべて選択対象に追加します。<codeph>SELFLAG_REMOVESELECTION</codeph> がある場合は、これらの子要素をすべて選択対象から削除します。<codeph>SELFLAG_ADDSELECTION</codeph> も <codeph>SELFLAG_REMOVESELECTION</codeph> もない場合は、これらすべての子要素が選択アンカーの選択状態を引き継ぐ必要があります。選択アンカーが選択されている場合は、これらの子要素を選択対象に追加します。そうでない場合は、選択対象から削除します。</p>
	 </li>
	 <li><p><codeph>SELFLAG_ADDSELECTION</codeph>（<codeph>SELFLAG_EXTENDSELECTION</codeph> なし）：指定された <codeph>childID</codeph> を選択対象に追加します。</p>
	 </li>
	 <li><p><codeph>SELFLAG_REMOVESELECTION</codeph>（<codeph>SELFLAG_EXTENDSELECTION</codeph> なし）：指定された <codeph>childID</codeph> を選択対象から削除します。</p></li>
	 </ul>
	 
	 <p>複数選択が可能でないコンポーネントの場合、有効な <codeph>selFlag</codeph> パラメーター値は <codeph>SELFLAG_TAKEFOCUS</codeph> と <codeph>SELFLAG_TAKESELECTION</codeph> だけであることに注意してください。理論的には、複数選択が不可能なコンポーネントの場合でも、ユーザーが強制的に <codeph>null</codeph> 選択を行えるコンポーネントに関しては <codeph>SELFLAG_REMOVESELECTION</codeph> をサポートできますが、実際にはそのように機能しないため、MSAA クライアントはこの種の操作を試みることができません。</p>
	 
	 <p>無効と見なされるフラグを検出した場合は、<codeph>errno</codeph> を <codeph>E_INVALIDARG</codeph> に設定します。</p>
	 <p>また、<codeph>accSelect</codeph> が呼び出すと、Flash Player の<i>ホストフォーカス</i>（コンテナアプリケーションのウィンドウフォーカス）が存在し、コンポーネントが Flash Player 内でフォーカスされていることが確認されます。</p>
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で子要素を選択するようにこのメソッドを実装する方法を示しています。
	 <codeblock rev="3.0">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::accSelect</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray"><apiName>getChildIDArray</apiName><shortdesc>
	 AccessibilityImplementation のすべての子要素の符号なし整数 ID を含む配列を返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>AccessibilityImplementation のすべての子要素の符号なし整数 ID を含む配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 AccessibilityImplementation のすべての子要素の符号なし整数 ID を含む配列を返します。 
	 
	 <p>この配列の長さはゼロになることもあります。配列内の ID は、それらが表す子要素と同じ論理順序になっている必要があります。AccessibilityImplementation が子要素を含む可能性がある場合、このメソッドは必須です。そうでない場合は、実装しないでください。</p>
	 
	 <p>子 ID を子要素に割り当てるときは、AccessibilityImplementation の各インスタンス内で一意性が保たれる方法を使用してください。子 ID は連続している必要はなく、子 ID の順序は子要素の論理順序と一致していなくてもかまいません。同じ子 ID を再利用<i>しない</i>ように注意する必要があります。つまり、子要素を削除する場合は、その AccessibilityImplementation インスタンスの存続期間中に同じ ID を再利用しないようにする必要があります。百万を超える子 ID を使用した場合、Flash Player コードでの実装選択により、望ましくない結果が発生する可能性があることに注意してください。</p>
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で childID の配列を返すようにこのメソッドを実装する方法を示しています。
	 
	 <codeblock rev="3.0">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction"><apiName>get_accDefaultAction</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかのデフォルトアクションを返すための MSAA メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>AccessibilityImplementation またはその子要素のいずれかに対して MSAA モデルで指定されているデフォルトアクション文字列です。 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかのデフォルトアクションを返すための MSAA メソッドです。
	 
	 <p>このメソッドは、AccessibilityImplementation が表す UI 要素に MSAA モデルのデフォルトアクションが存在するる場合にのみ実装してください。また、MSAA モデルで指定されているとおりの文字列を返すように注意してください。例えば、Button コンポーネントのデフォルトアクション文字列は "Press" です。</p>
	 
	 <p>AccessibilityImplementation 自体に対してのみ、またはその子要素に対してのみ <codeph>get_accDefaultAction</codeph> を実装する場合は、状況によっては、渡された <codeph>childID</codeph> に対するデフォルトアクションが存在しないことを示す必要があります。その場合は、単純に <codeph>null</codeph> を返します。</p>
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で適切なデフォルトアクションを返すようにこのメソッドを実装する方法を示しています。
	 <codeblock rev="3.0">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accDefaultAction</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus"><apiName>get_accFocus</apiName><shortdesc>
	 コンポーネント内に子フォーカスを持つ子要素がある場合に、その符号なし整数 ID を返す MSAA メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>子フォーカスを持つ子要素の符号なし整数 ID です（コンポーネント内にそのような子要素がある場合のみ）。
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 コンポーネント内に子フォーカスを持つ子要素がある場合に、その符号なし整数 ID を返す MSAA メソッドです。子フォーカスを持つ子がない場合、このメソッドはゼロを返します。
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）でフォーカスのある childID を返すようにこのメソッドを実装する方法を示しています。
	 
	 <codeblock rev="3.0">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accFocus</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName"><apiName>get_accName</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかの名前を返すための MSAA メソッドです。</shortdesc><prolog><asCustoms><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンポーネントまたはその子要素のいずれかの名前です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>コンポーネントの名前を返します。
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかの名前を返すための MSAA メソッドです。
	 
	 <p>このメソッドが実装されていない場合、またはこのメソッドが値を返さない場合、Flash Player は <codeph>AccessibilityProperties.name</codeph> プロパティの値を使用して AccessibilityImplementation 自体（<codeph>childID == 0</codeph>）の名前を返します（このプロパティ値がある場合）。</p>
	 
	 <p>子要素を持つことができる AccessibilityImplementations の場合は、このメソッドを実装し、<codeph>childID</codeph> がゼロ以外のときには文字列値を返す必要があります。</p>
	 
	 <p>ユーザーインターフェイス要素のタイプによっては、MSAA の名前は、作成者が割り当てた名前または要素の実際のテキストコンテンツのいずれかを意味します。通常、AccessibilityImplementation 自体は前者のカテゴリーに分類されます。その <codeph>name</codeph> プロパティは、作成者が割り当てた名前です。子要素は常に 2 番目のカテゴリーに分類されます。その名前はテキストコンテンツを示します。</p>
	 
	 <p>AccessibilityImplementation の <codeph>name</codeph> プロパティが、作成者によって割り当てられた名前を意味する場合、コンポーネントは 2 つの方法で作成者から名前を取得できます。第 1 の方法では、コンポーネント自体の内部に存在する名前を使用します。例えば、チェックボックスコンポーネントには名前として使用できるテキストラベルが含まれる場合があります。第 1 の方法の代わりとなる第 2 の方法では、UI で指定されている名前を使用し、これは最終的に <codeph>AccessibilityProperties.name</codeph> になります。この方法を使用した場合、ユーザーは他の Sprite や MovieClip と同じように名前を指定できます。</p>
	 
	 <p>これにより、AccessibilityImplementation 自体（<codeph>childID == zero</codeph>）は、次の 3 つの可能性のいずれかに該当することになります。</p>
	 <ul>
	 <li><p><b>コンポーネント内に存在する、作成者が割り当てた名前。</b><codeph>get_accName</codeph> メソッドを実装し、<codeph>childID</codeph> がゼロのときは AccessibilityImplementation の名前を含む文字列値を返す必要があります。<codeph>childID</codeph> がゼロであるにもかかわらず AccessibilityImplementation に名前がない場合は、<codeph>AccessibilityProperties.name</codeph> プロパティが Player で使用されることを防止するために、<codeph>get_accName</codeph> から空の文字列を返すようにする必要があります。</p>
	 </li>
	 <li><p><b>UI から作成者が割り当てた名前。</b>AccessibilityImplementation が子要素を持つことができる場合は、<codeph>get_accName</codeph> メソッドを実装する必要がありますが、<codeph>childID</codeph> がゼロのときは値を返さないようにする必要があります。AccessibilityImplementation が子要素を持たない場合は、<codeph>get_accName</codeph> を実装しないでください。</p>
     	 </li>
     	 <li><p><b>コンテンツを示す名前。</b><codeph>get_accName</codeph> メソッドを実装し、<codeph>childID</codeph> がゼロのときは適切な文字列値を返す必要があります。<codeph>childID</codeph> がゼロであるにもかかわらず AccessibilityImplementation にコンテンツがない場合は、<codeph>AccessibilityProperties.name</codeph> プロパティが Player で使用されることを防止するために、<codeph>get_accName</codeph> から空の文字列を返すようにする必要があります。</p>
     	 </li>
	 </ul>
     	 <p>子要素の場合（AccessibilityImplementation が子要素を持つことができる場合）は常に 3 番目のケースに該当することに注意してください。<codeph>get_accName</codeph> メソッドを実装し、<codeph>childID</codeph> がゼロ以外のときは適切な文字列値を返す必要があります。 </p>
     	 
     	 </apiDesc><example>次の例は、Flex の mx.accessibility.AccImpl クラス（Flex のアクセシビリティの基本実装）でこのメソッドを実装する方法を示しています。
	 <codeblock rev="3.0">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties"><linktext>flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name"><linktext>flash.accessibility.AccessibilityProperties.name</linktext></link><link href=""><linktext>Flex mx.accessibility.AccImpl.get_accName() メソッド</linktext></link><link href=""><linktext>Flex mx.accessibility.AccImpl.getName() メソッド</linktext></link><link href=""><linktext>Flex mx.accessibility.AccImpl.getStatusName() メソッド</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accName</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole"><apiName>get_accRole</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかのシステムロールを返すための MSAA メソッドです。</shortdesc><prolog><asCustoms><helpid>3000
	  
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エラーコード <xref href="../../runtimeErrors.html#2143">2143</xref>、AccessibilityImplementation.get_accRole() はそのデフォルトからオーバーライドする必要があります。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>コンポーネントに関連付けられたシステムロールです。 
	  
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>コンポーネントのシステムロールを返します。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかのシステムロールを返すための MSAA メソッドです。システムロールは、MSAA のすべてのコンポーネントに対して事前に定義されています。	 
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で、コンポーネント自体またはそのリストアイテムのいずれかに対応するシステムロール定数を返すように、このメソッドを実装する方法を示しています。
	 <codeblock rev="3.0">override public function get_accRole(childID:uint):uint
	 {
	 	if (childID == 0)
	 		return role;
	 		
	 	return ROLE_SYSTEM_LISTITEM;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="../../accessibilityImplementationConstants.html#roles"><linktext>AccessibilityImplementation 定数：オブジェクトロール定数</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accRole</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection"><apiName>get_accSelection</apiName><shortdesc>
	 選択されているすべての子要素の ID を含む配列を返すための MSAA メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>選択されているすべての子要素の ID の配列です。
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 選択されているすべての子要素の ID を含む配列を返すための MSAA メソッドです。返される配列には、0 個、1 個、または複数個の ID が含まれる可能性があり、すべて符号なし整数です。
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で選択されている childID を返すようにこのメソッドを実装する方法を示しています。
	 
	 <codeblock rev="3.0">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accSelection</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState"><apiName>get_accState</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかの現在のランタイム状態を返すための IAccessible メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エラーコード <xref href="../../runtimeErrors.html#2144">2144</xref>、AccessibilityImplementation.get_accState() はそのデフォルトからオーバーライドする必要があります。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>0 個、1 個、または複数個のシステム状態定数の組み合わせです。複数の定数がある場合は、ビット単位の OR 演算子 <codeph>|</codeph> を使用して 1 つのビットフィールドに結合されます。 
	 
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>コンポーネントの状態を返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかの現在のランタイム状態を返すための IAccessible メソッドです。
	 
	 <p>このメソッドは、MSAA でコンポーネントに対して事前に定義されている<xref href="../../accessibilityImplementationConstants.html">オブジェクト状態定数</xref>（0 個、1 個、または複数個の組み合わせ）を返す必要があります。複数の状態に該当する場合は、ビット単位の OR 演算子 <codeph>|</codeph> を使用して、複数の状態定数を 1 つのビットフィールドに結合する必要があります。</p>
	 
	 <p>現在該当する状態定数がないことを示すには、ゼロを返す必要があります。</p>
	 
	 <p>STATE_SYSTEM_FOCUSABLE 状態および STATE_SYSTEM_FOCUSED 状態を追跡してレポートする必要はありません。これらの状態は Flash Player で自動的に処理されます。</p>
	 
	 </apiDesc><example>次の例は、mx.accessibility.ListBaseAccImpl（Flex ListBase Accessibility Implementation）で複数の状態定数を 1 つに結合するようにこのメソッドを実装する方法を示しています。
	 
	 <codeblock rev="3.0">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="../../accessibilityImplementationConstants.html#states"><linktext>AccessibilityImplementation 定数：オブジェクト状態定数</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accState</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue"><apiName>get_accValue</apiName><shortdesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかのランタイム値を返すための MSAA メソッドです。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンポーネントまたはその子要素のいずれかのランタイム値を表す文字列です。
	  
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>getChildIDArray()</codeph> で定義されている、コンポーネントの子要素のいずれかに対応する符号なし整数です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>コンポーネントの値を返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 この AccessibilityImplementation が表すコンポーネントまたはその子要素のいずれかのランタイム値を返すための MSAA メソッドです。
	 
	 <p>このメソッドは、AccessibilityImplementation が表す UI 要素に MSAA モデルの値が存在する場合にのみ実装してください。明白な「値」を持つ一部の UI 要素は、実際には様々な方法でこの値を公開することに注意してください。例えば、<codeph>get_accName</codeph>（テキストなど）、<codeph>get_accState</codeph>（チェックボックスなど）、<codeph>get_accSelection</codeph>（リストボックスなど）を使用します。</p>
	 
	 <p>AccessibilityImplementation 自体に対してのみ、またはその子要素に対してのみ <codeph>get_accValue</codeph> を実装する場合、状況によっては、渡された <codeph>childID</codeph> に値の概念が存在しないことを示す必要があります。その場合は、単純に <codeph>null</codeph> を返します。</p>
	 
	 </apiDesc><example>次の例は、Flex の mx.accessibility.ListBaseAccImpl クラス（ListBase Accessibility Implementation）で、コンポーネントの <codeph>selectedIndex</codeph> 値に基づいて適切な値を返すようにこのメソッドを実装する方法を示しています。
	 
	 <codeblock rev="3.0">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext>getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx"><linktext>Microsoft Accessibility Developer Center: IAccessible::get_accValue</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno"><apiName>errno</apiName><shortdesc>
	 エラーは、戻り値とは別途に通知されます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 エラーは、戻り値とは別途に通知されます。エラーを通知するには、<codeph>errno</codeph> プロパティを、AccessibilityImplementation 定数の付録で説明されているエラーコードのいずれかに設定します。これにより戻り値は無視されます。AccessibilityImplementation の <codeph>errno</codeph> プロパティは、AccessibilityImplementation のメソッドが呼び出される前に Player によって毎回クリア（ゼロに設定）されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="../../accessibilityImplementationConstants.html"><linktext>AccessibilityImplementation 定数</linktext></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub"><apiName>stub</apiName><shortdesc>
	 ActionScript のアクセシビリティ実装を含めずにコンポーネントをリリースする場合は、コンポーネントアクセシビリティスタブを含めることを強くお勧めします。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 ActionScript のアクセシビリティ実装を含めずにコンポーネントをリリースする場合は、コンポーネントアクセシビリティスタブを含めることを強くお勧めします。このスタブを追加すると、Flash Player はアクセシビリティを確保するために、コンポーネント内のボタンやテキストフィールドなどの内部構造を公開せず、コンポーネントを単純なグラフィックとして扱います。 
	 
	 <p>Flex コンポーネントのアクセシビリティスタブを作成するには、mx.accessibility.AccImpl クラスのサブクラスを作成し、プロパティスタブを値 <codeph>true</codeph> でオーバーライドします。</p> 
	 
	 </apiDesc></apiValueDetail><related-links><link href=""><linktext>Flex の mx.accessibility.AccImpl クラス（¥sdks¥4.0.0¥frameworks¥projects¥framework¥src¥mx¥accessibility¥AccImpl.as）</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.accessibility:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
 AccessibilityProperties クラスを使用すれば、アクセシビリティ補助（スクリーンリーダーなど）への Flash オブジェクトの提示方法を制御できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 AccessibilityProperties クラスを使用すれば、アクセシビリティ補助（スクリーンリーダーなど）への Flash オブジェクトの提示方法を制御できます。
 
 <p>任意の表示オブジェクト に AccessibilityProperties オブジェクトを付加できますが、Flash Player は特定のオブジェクトに関連した AccessibilityProperties オブジェクトだけを読み取ります。これに該当するオブジェクトは、SWF ファイル全体（<codeph>DisplayObject.root</codeph>）、コンテナオブジェクト（<codeph>DisplayObjectContainer</codeph> とサブクラス）、ボタン（<codeph>SimpleButton</codeph> とサブクラス）、およびテキスト（<codeph>TextField</codeph> とサブクラス）です。</p>
 
 <p>アクセシビリティ補助はナビゲーションの基本的方法としてオブジェクトの名前をユーザーに提供するため、これらのオブジェクトの <codeph>name</codeph> プロパティは指定するプロパティの中で最も重要です。<codeph>AccessibilityProperties.name</codeph> と <codeph>DisplayObject.name</codeph> を混同しないでください。この 2 つは互いに無関係な別個のプロパティです。<codeph>AccessibilityProperties.name</codeph> プロパティはアクセシビリティ補助で読み上げられる名前であるのに対し、<codeph>DisplayObject.name</codeph> は基本的に、ActionScript コードでのみ認識される変数名です。</p>
 
 <p product="flash"><codeph>AccessibilityProperties</codeph> オブジェクトのプロパティは、オーサリング時にアクセシビリティパネルで使用できる設定をオーバーライドします。</p>
 
 <p>Flash Player がアクセシビリティ補助をサポートする環境で実行されているかどうかを確認するには、<codeph>Capabilities.hasAccessibility</codeph> プロパティを使用します。AccessibilityProperties オブジェクトを変更した場合、変更内容を有効にするには、<codeph>Accessibility.updateProperties()</codeph> メソッドを呼び出す必要があります。</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as"> 次のコードの例では、<codeph>AccessibilityExample</codeph>、<codeph>CustomAccessibleButton</codeph>、<codeph>CustomSimpleButton</codeph>、および <codeph>ButtonDisplayState</codeph> クラスを使用して、一般的なスクリーンリーダーとの連携が可能なアクセシビリティ準拠メニューを作成します。<codeph>AccessibilityProperties</codeph> クラスの主な機能は次のとおりです。
 
 <ol TYPE="1">
    <li> <codeph>configureAssets</codeph> を呼び出すことにより、カスタムボタンを作成して、ボタンのラベルと説明を設定します。これらの値はスクリーンリーダーによってエンドユーザーに伝送されます。</li>        
    <li><codeph>setTimeOut()</codeph> を呼び出すことにより、プロパティの更新前に Flash Player がスクリーンリーダーを検出するために必要な時間を確保します。</li>
    </ol>
 
 <p><b>注意：</b> <codeph>setTimeout()</codeph> は、<codeph>Accessibility.active</codeph> の検査の前に呼び出してください。こうすれば、Flash Player がスクリーンリーダー（使用可能な場合）に接続するのに必要な 2 秒間を確保できます。十分な遅延時間を指定しないと、スクリーンリーダーが使用可能であっても、<codeph>setTimeout</codeph> 呼び出しでは、<codeph>false</codeph> が返されます。</p>
 
 <p>次の例で <codeph>Accessibility.updateProperties()</codeph> メソッドが処理されるのは <codeph>Accessibility.active</codeph> 呼び出しが <codeph>true</codeph> を返す場合だけです。つまり、Flash Player がアクティブ状態のスクリーンリーダーに現在接続している場合だけです。<codeph>updateProperties</codeph> が呼び出されたときにスクリーンリーダーがアクティブ状態でない場合、<codeph>IllegalOperationError</codeph> 例外がスローされます。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex"><linktext>flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
	 新しい AccessibilityProperties オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 新しい AccessibilityProperties オブジェクトを作成します。
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description"><apiName>description</apiName><shortdesc>
	 アクセシビリティ提示におけるこの表示オブジェクトの記述を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 アクセシビリティ提示におけるこの表示オブジェクトの記述を提供します。このオブジェクトに関する多くの情報を提示するには、名前を簡潔にして、ほとんどの情報を <codeph>description</codeph> プロパティに含めるのが適切です。SWF ファイル全体、コンテナ、ボタンおよびテキストが対象となります。デフォルト値は空のストリングです。
     <p product="flash">アクセシビリティパネルの「説明」フィールドに対応します。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple"><apiName>forceSimple</apiName><shortdesc>
	 true の場合、Flash Player はこの表示オブジェクト内の子オブジェクトをアクセシビリティ提示から除外します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>true</codeph> の場合、Flash Player はこの表示オブジェクト内の子オブジェクトをアクセシビリティ提示から除外します。デフォルト値は <codeph>false</codeph> です。SWF ファイル全体とコンテナが対象となります。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name"><apiName>name</apiName><shortdesc>
	 アクセシビリティ提示におけるこの表示オブジェクトの名前を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 アクセシビリティ提示におけるこの表示オブジェクトの名前を提供します。SWF ファイル全体、コンテナ、ボタンおよびテキストが対象となります。これと <codeph>DisplayObject.name</codeph> を混同しないでください。デフォルト値は空のストリングです。
     <p product="flash">アクセシビリティパネルの「名前」フィールドに対応します。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling"><apiName>noAutoLabeling</apiName><shortdesc>
	 true の場合、Flash Player のデフォルトの自動ラベル機能が無効になります。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>true</codeph> の場合、Flash Player のデフォルトの自動ラベル機能が無効になります。自動ラベル機能は、ボタン内部のテキストオブジェクトをボタン名として扱い、テキストフィールドの近くのテキストオブジェクトをテキストフィールド名として扱います。デフォルト値は <codeph>false</codeph> です。SWF ファイル全体だけが対象となります。
     <p><codeph>noAutoLabeling</codeph> プロパティ値は、アクセシビリティ補助が初回に SWF ファイルを調べるより前に指定しない限り、無視されます。<codeph>noAutoLabeling</codeph> を <codeph>true</codeph> に設定する場合は、コード内のできるだけ早い段階で設定する必要があります。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut"><apiName>shortcut</apiName><shortdesc>
	 この表示オブジェクトに関連したキーボードショートカットを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 この表示オブジェクトに関連したキーボードショートカットを示します。ショートカットキーに既に関連付けられた UI コントロールに対してのみ、このストリングを提供してください。コンテナ、ボタン、テキストが対象となります。デフォルト値は空のストリングです。
	 
	 <p><b>注意：</b>このプロパティを割り当てても、特定のキー操作の組み合わせが自動的にこのオブジェクトに割り当てられるわけではありません。そうするためには、例えば <codeph>KeyboardEvent</codeph> をリッスンして手動で指定する必要があります。</p>
	 
	 <p>このストリングのシンタックスは修飾キーに長い名前を使用し、プラス（+）文字を使ってキー操作の組み合わせを表します。有効なストリングは、例えば "Ctrl+F"、"Ctrl+Shift+Z" などです。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent"><apiName>silent</apiName><shortdesc>
	 true の場合、この表示オブジェクトはアクセシビリティ提示から除外されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	  <codeph>true</codeph> の場合、この表示オブジェクトはアクセシビリティ提示から除外されます。デフォルト値は <codeph>false</codeph> です。SWF ファイル全体、コンテナ、ボタンおよびテキストが対象となります。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.accessibility:Accessibility"><apiName>Accessibility</apiName><shortdesc>
 Accessibility クラスは、スクリーンリーダーとの通信を管理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Accessibility クラスは、スクリーンリーダーとの通信を管理します。スクリーンリーダーは、視覚障害のあるユーザー向けに、画面の内容を音声で出力する補助技術です。Accessibility クラスのメソッドは静的です。つまり、クラスのインスタンスを作成しなくても、このクラスのメソッドを使うことができます。
 
 <p>ボタンやムービークリップ、テキストフィールドなど、特定のオブジェクトのアクセシビリティプロパティを取得または設定するには、<codeph>DisplayObject.accessibilityProperties</codeph> プロパティを使用します。Player がアクセシビリティ補助をサポートする環境で実行されているかどうかを確認するには、<codeph>Capabilities.hasAccessibility</codeph> プロパティを使用します。 </p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as"> 次のコードの例では、<codeph>AccessibilityExample</codeph>、<codeph>CustomAccessibleButton</codeph>、<codeph>CustomSimpleButton</codeph>、および <codeph>ButtonDisplayState</codeph> サンプルクラスを使用して、ほとんどのスクリーンリーダーとの連携が可能なアクセシビリティ準拠メニューを作成します。この例では、次の処理を実行します。
 <ol>
    <li><codeph>Accessibility.active</codeph> プロパティを追跡し、スクリーンリーダーが現在アクティブ状態で、Player と通信しているかどうかを確認します。</li>
    <li><codeph>active</codeph> プロパティが <codeph>true</codeph> を返す場合には、この例では <codeph>updateProperties()</codeph> メソッドを呼び出して、この例のボタンに対するアクセシビリティ上の変更を適用します。</li>
    <li><codeph>flash.utils.setTimeout()</codeph> メソッドを呼び出して、<codeph>updateAccessibility()</codeph> クロージャーメソッドを 2 秒後に呼び出すように指定します。</li>
 </ol>
 
 <p><b>注意：</b><codeph>setTimeout()</codeph> は、<codeph>Accessibility.active</codeph> の検査の前に呼び出してください。こうすれば、Flash Player がスクリーンリーダー（使用可能な場合）に接続するのに必要な 2 秒間を確保できます。十分な遅延時間を指定しないと、スクリーンリーダーが使用可能であっても、<codeph>setTimeout</codeph> 呼び出しでは、<codeph>false</codeph> が返されます。
 </p>
 <p>次の例で <codeph>Accessibility.updateProperties()</codeph> メソッドが処理されるのは <codeph>Accessibility.active</codeph> 呼び出しが <codeph>true</codeph> を返す場合だけです。つまり、Flash Player がアクティブ状態のスクリーンリーダーに現在接続している場合だけです。<codeph>updateProperties</codeph> が呼び出されたときにスクリーンリーダーがアクティブ状態でない場合、<codeph>IllegalOperationError</codeph> 例外がスローされます。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:sendEvent"><apiName>sendEvent</apiName><shortdesc>
	 
	 Microsoft Active Accessibility API にイベントを送信します。</shortdesc><prolog><asCustoms><nonHTML>A Boolean value indicating whether the event is one of the standard event types
	 that can be generated from an HTML form. When set to true, this parameter helps prevent
	 some problems that may occur with screen readers that interpret Flash content as part of
	 the HTML page. The default value is false.
	 </nonHTML></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiDesc>アクセシビリティイベントの送信元になる DisplayObject です。
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>イベントが適用されるアクセシビリティインターフェイス要素の子 ID です（リストボックスに含まれる個々のリストアイテムなど）。<codeph>source</codeph> パラメーターで指定されている DisplayObject にイベントを適用するには、0 を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>イベントタイプを示す定数です。イベントの名前と値は、MSAA イベント定数のサブセットです。
	 </apiDesc></apiParam><apiParam><apiItemName>nonHTML</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
	 
	 Microsoft Active Accessibility API にイベントを送信します。Microsoft Active Accessibility はそのイベントを処理し、アクティブなスクリーンリーダーアプリケーションにイベントを送信します。そのアプリケーションはユーザーに変更を通知します。例えば、ユーザーが RadioButton インスタンスを切り替えると、RadioButton の AccessibilityImplementation は、イベントタイプ <codeph>EVENT_OBJECT_STATECHANGE</codeph> を使用して <codeph>Accessibility.sendEvent()</codeph> を呼び出します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation"><linktext>flash.accessibility.AccessibilityImplementation</linktext></link><link href="" invalidHref="mx.accessibility.AccImpl.xml"><linktext>mx.accessibility.AccImpl</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:Accessibility:updateProperties"><apiName>updateProperties</apiName><shortdesc>
	DisplayObject.accessibilityProperties プロパティを使って変更されたアクセシビリティをすべて Flash Player に適用させます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Flash Player のこのバージョンではアクセシビリティがサポートされません。<codeph>Accessibility.updateProperties()</codeph> メソッドは、<codeph>flash.system.Capabilities.hasAccessibility</codeph> プロパティが <codeph>false</codeph> の場合は呼び出さないでください。
	
	
	</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	<codeph>DisplayObject.accessibilityProperties</codeph> プロパティを使って変更されたアクセシビリティをすべて Flash Player に適用させます。変更内容を有効にするには、このメソッドを呼び出す必要があります。 
	
	<p>複数のオブジェクトのアクセシビリティプロパティを変更する場合、必要な <codeph>Accessibility.updateProperties()</codeph> メソッド呼び出しは 1 回だけです。何度も呼び出すと、パフォーマンスが低下するだけでなく、スクリーンリーダーが誤った出力を生成する可能性があります。</p>
	
	<p>イメージを変更し、そのイメージのアクセシブルな名前を更新する場合は、次のような ActionScript コードを使用します。</p>
	<pre>
	if (my_displayObj.accProps == undefined ) {
	  my_displayObj.accProps = new Object();
	}
	my_displayObj.accProps.name = "Photo of Mount Rushmore";
	Accessibility.updateProperties();
	</pre>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get"><apiName>active</apiName><shortdesc>
	スクリーンリーダーが現在アクティブ状態で、Player と通信しているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	スクリーンリーダーが現在アクティブ状態で、Player と通信しているかどうかを示します。スクリーンリーダーの実行中にアプリケーションの動作を変更するには、このプロパティを使用します。
	
	<p><b>メモ：</b> ドキュメントを再生する Flash<sup>®</sup> ウィンドウが最初に表示された後、このプロパティを 1、2 秒以内に呼び出すと、MSAA クライアントが存在する場合でも、戻り値が <codeph>false</codeph> になることがあります。これは、Flash とアクセシビリティクライアントとの間の通信が非同期であるために発生します。この問題を回避するには、ドキュメントを読み込んだ後、必ず 1、2 秒経過してから、このメソッドを呼び出してください。</p>
	
	スクリーンリーダーをサポートする環境で Player が実行されているかどうか確認するには、<codeph>Capabilities.hasAccessibility</codeph> プロパティを使用します。 
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>