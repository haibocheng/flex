<?xml version="1.0"?>
<apiPackage id="flash.data"><apiName>flash.data</apiName><apiDetail/><apiClassifier id="flash.data:SQLViewSchema"><apiName>SQLViewSchema</apiName><shortdesc>
 SQLViewSchema インスタンスは、データベースの特定のビューを示す情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLTableSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLViewSchema インスタンスは、データベースの特定のビューを示す情報を提供します。このインスタンスには、ビューの名前（<codeph>name</codeph> プロパティ）、ビューの作成に使用された SQL ステートメント（<codeph>sql</codeph> プロパティ）およびビューの列に関する情報（<codeph>columns</codeph> プロパティ）が含まれます。
 
 <p>データベースのビュースキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph>null</codeph> または <codeph>SQLViewSchema</codeph> を <codeph>type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph>views</codeph> プロパティには、データベース内のビューを表す SQLViewSchema インスタンスの配列が含まれます。</p>
 
 <p>一般に、SQLViewSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema"><linktext>flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLViewSchema:SQLViewSchema"><apiName>SQLViewSchema</apiName><shortdesc>
     SQLViewSchema インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ビューの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ビューの作成に使用された SQL ステートメントです。
     
     </apiDesc></apiParam><apiParam><apiItemName>columns</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>このビューの列を示す SQLColumnSchema インスタンスの配列です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLViewSchema インスタンスを作成します。一般に、SQLViewSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.data:SQLColumnSchema"><apiName>SQLColumnSchema</apiName><shortdesc>
 SQLColumnSchema クラスは、データベースのテーブル内の特定の列の特性を示す情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLColumnSchema クラスは、データベースのテーブル内の特定の列の特性を示す情報を提供します。
 
 <p>データベースの 1 つまたは複数のテーブルの列スキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph>true</codeph> を <codeph>includeColumnSchema</codeph> 引数の値として使用します。結果として得られた SQLSchemaResult インスタンスでは、各テーブルとビューの定義に <codeph>columns</codeph> プロパティが含まれます。このプロパティは、テーブルまたはビューの列を示す SQLColumnSchema インスタンスの配列です。</p>
 
 <p>一般に、SQLColumnSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema"><linktext>flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLViewSchema"><linktext>flash.data.SQLViewSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLColumnSchema:SQLColumnSchema"><apiName>SQLColumnSchema</apiName><shortdesc>
     SQLColumnSchema インスタンスを構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>列の名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>primaryKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>この列が、関連付けられたテーブルの主キーの一部かどうかを示します。
     
     </apiDesc></apiParam><apiParam><apiItemName>allowNull</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>この列に <codeph>NULL</codeph> 値を含めることができるかどうかを示します。
     
     </apiDesc></apiParam><apiParam><apiItemName>autoIncrement</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>この列が、自動インクリメント列かどうかを示します。
     
     </apiDesc></apiParam><apiParam><apiItemName>dataType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>宣言された列の型です。
     
     </apiDesc></apiParam><apiParam><apiItemName>defaultCollationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>この列に定義されている照合シーケンスです。 この値は、SQLCollationType クラスのいずれかの定数に対応します。
     <ul>
       <li><codeph>SQLCollationType.BINARY</codeph> は、列が <codeph>BINARY</codeph> 照合シーケンスを使用することを示します。</li>
       <li><codeph>SQLCollationType.NO_CASE</codeph> は、列が <codeph>NOCASE</codeph> 照合シーケンスを使用することを示します。この場合、テキストの比較は、大文字と小文字を区別せずに実行されます。</li>
     </ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLColumnSchema インスタンスを構築します。一般に、SQLColumnSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLCollationType"><linktext>flash.data.SQLCollationType</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLColumnSchema:allowNull:get"><apiName>allowNull</apiName><shortdesc>
     この列で、NULL 値が許可されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     この列で、<codeph>NULL</codeph> 値が許可されているかどうかを示します。 <codeph>NOT NULL</codeph> 制限が宣言されている列では、<codeph>false</codeph> 値が <codeph>allowNull</codeph> プロパティに対して設定されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:autoIncrement:get"><apiName>autoIncrement</apiName><shortdesc>
     この列が、自動インクリメント列かどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     この列が、自動インクリメント列かどうかを示します。自動インクリメント列は特殊な型の <codeph>PRIMARY KEY</codeph> 列で、テーブルに新しい行が挿入されると、次の値が整数順で自動的に生成されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:dataType:get"><apiName>dataType</apiName><shortdesc>
     列のデータ型をストリングとして取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     列のデータ型をストリングとして取得します。この値には、テーブルの定義に使用された <codeph>CREATE TABLE</codeph> ステートメントで指定されたデータ型の名前がそのまま使用されます。また、データ型が指定されていない場合は、<codeph>null</codeph> になります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:defaultCollationType:get"><apiName>defaultCollationType</apiName><shortdesc>
     この列に定義されているデフォルトの照合シーケンスを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     この列に定義されているデフォルトの照合シーケンスを示します。 このプロパティの値は、SQLCollationType クラスのいずれかの定数に対応します。
     <ul>
       <li><codeph>SQLCollationType.BINARY</codeph> は、列が <codeph>BINARY</codeph> 照合シーケンスを使用することを示します。</li>
       <li><codeph>SQLCollationType.NO_CASE</codeph> は、列が <codeph>NOCASE</codeph> 照合シーケンスを使用することを示します。この場合、テキストの比較は、大文字と小文字を区別せずに実行されます。</li>
     </ul>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLCollationType"><linktext>flash.data.SQLCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnSchema:name:get"><apiName>name</apiName><shortdesc>
     列の名前を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     列の名前を取得します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:primaryKey:get"><apiName>primaryKey</apiName><shortdesc>
     この列が、関連付けられているテーブルの主キー列（または複合キーの主キー列の 1 つ）かどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     この列が、関連付けられているテーブルの主キー列（または複合キーの主キー列の 1 つ）かどうかを示します。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLColumnNameStyle"><apiName>SQLColumnNameStyle</apiName><shortdesc>
 このクラスには、SQLConnection.columnNameStyle プロパティで有効な値を表す定数が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスには、<codeph>SQLConnection.columnNameStyle</codeph> プロパティで有効な値を表す定数が含まれます。これらの値は、SQL <codeph>SELECT</codeph> ステートメントの結果として返されるオブジェクトで、列名（プロパティ名）の形式を制御する様々なオプションを示します。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links><apiValue id="flash.data:SQLColumnNameStyle:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
     SELECT ステートメントから返される列名が、デフォルトの形式を使用することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SELECT</codeph> ステートメントから返される列名が、デフォルトの形式を使用することを示します。デフォルトの形式では、列名は <codeph>[table-name|]_[column-name]</codeph> という形式（<codeph>SELECT</codeph> ステートメントに複数のテーブルが含まれる場合）か、<codeph>[column-name]</codeph> という形式（<codeph>SELECT</codeph> ステートメントに単一のテーブルが含まれる場合）になります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:LONG"><apiName>LONG</apiName><shortdesc>
     SELECT ステートメントから返される列名が、長い列名の形式を使用することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>long</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SELECT</codeph> ステートメントから返される列名が、長い列名の形式を使用することを示します。この形式では、列名は <codeph>[table-name]_[column-name]</codeph> の形式を使用します。<codeph>SELECT</codeph> ステートメントに含まれているテーブル数によって変化することはありません。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:SHORT"><apiName>SHORT</apiName><shortdesc>
     SELECT ステートメントから返される列名が、短い列名の形式を使用することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>short</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SELECT</codeph> ステートメントから返される列名が、短い列名の形式を使用することを示します。この形式では、列名は <codeph>[column-name]</codeph> の形式を使用します。<codeph>SELECT</codeph> ステートメントに含まれているテーブル数によって変化することはありません。
	 
	 <p>結果セットに同じ名前を持つ複数の列が存在する場合、その名前を持つプロパティが 1 つだけが結果オブジェクトに追加されます。そのプロパティに割り当てられる値は、その名前を持つ結果行の最後の列から取得されます。例えば、次のような <codeph>SELECT</codeph> ステートメントがあるとします。</p>
	 
	 <pre>
	 SELECT customers.customerId, addresses.customerId
	 FROM customers INNER JOIN addresses
	    ON customers.customerId = addresses.customerId
	 </pre>
	 
	 <p>このステートメントが、短い列名の形式で SQLConnection に対して実行された場合、各結果オブジェクトには <codeph>customerId</codeph> という名前のプロパティが含まれます。このプロパティには、<codeph>addresses</codeph> テーブルの <codeph>customerId</codeph> 列から取得した値が含まれます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLSchema"><apiName>SQLSchema</apiName><shortdesc>
 SQLSchema クラスは、テーブル、ビューおよびインデックスなど、データベースオブジェクトのスキーマ情報の基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLSchema クラスは、テーブル、ビューおよびインデックスなど、データベースオブジェクトのスキーマ情報の基本クラスです。
 
 <p>データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。結果として得られた SQLSchemaResult インスタンスには、データベース内のオブジェクトを示すインスタンスの配列が含まれます。</p>
 
 <p>一般に、SQLSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchema:SQLSchema"><apiName>SQLSchema</apiName><shortdesc>
     SQLSchema インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>データベースオブジェクトの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>データベースオブジェクトの構築に使用された SQL です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLSchema インスタンスを作成します。一般に、SQLSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLSchema:database:get"><apiName>database</apiName><shortdesc>
     このスキーマオブジェクトが属するデータベースの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このスキーマオブジェクトが属するデータベースの名前です。SQLConnection インスタンスに関連付けられているメインデータベース（SQLConnection インスタンスの <codeph>open()</codeph> メソッドまたは <codeph>openAsync()</codeph> メソッドを呼び出して開かれたデータベースファイル）の名前は "main" です。<codeph>SQLConnection.attach()</codeph> メソッドを使用して、この接続にアタッチされた他のデータベースの場合、この値は <codeph>attach()</codeph> メソッドの呼び出しで指定された名前になります。
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchema:name:get"><apiName>name</apiName><shortdesc>
     このスキーマオブジェクトの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このスキーマオブジェクトの名前です。データベース内の各オブジェクトは、一意の名前を持ちます。名前は、オブジェクトを作成する SQL ステートメントで定義されます（テーブルを作成する <codeph>CREATE TABLE</codeph> ステートメントなど）。
	 
	 <p>例えば、次の SQL ステートメントを使用してデータベースインデックスを作成した場合、そのインデックスのスキーマの <codeph>name</codeph> プロパティの値は <codeph>"customer_index"</codeph> になります。</p>
	 
	 <codeblock>CREATE INDEX customer_index ON customers (id)</codeblock>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLSchema:sql:get"><apiName>sql</apiName><shortdesc>
     このスキーマオブジェクトの作成に使用された SQL ステートメントのテキスト全体を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このスキーマオブジェクトの作成に使用された SQL ステートメントのテキスト全体を返します。データベース内の各オブジェクトは、SQL ステートメントを使用して作成されます。
	 
	 <p>例えば、次の SQL を使用してデータベースインデックスを作成したとします。</p>
	 <codeblock>CREATE INDEX customer_index ON customers (id)</codeblock>
	 <p>このインデックスのスキーマの <codeph>sql</codeph> プロパティは、ステートメントのテキスト全体になります。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLCollationType"><apiName>SQLCollationType</apiName><shortdesc>
 このクラスには、SQLColumnSchema コンストラクターの defaultCollationType パラメーターで有効な値を表す定数と、SQLColumnSchema.defaultCollationType プロパティが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスには、SQLColumnSchema コンストラクターの <codeph>defaultCollationType</codeph> パラメーターで有効な値を表す定数と、<codeph>SQLColumnSchema.defaultCollationType</codeph> プロパティが含まれます。
 
 <p>これらの値は、データベーステーブルの列で指定できる様々な照合シーケンスを表します。<i>照合シーケンス</i>は、データをソートおよび比較する方法です。例えば、データベースが大文字と小文字を区別するかどうかを指定します。</p>
 
 <p>照合シーケンスの定義と使用の詳細については、「<xref href="../../localDatabaseSQLSupport.html#collate">COLLATE</xref>」のセクション（付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLColumnSchema/defaultCollationType"><linktext>flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links><apiValue id="flash.data:SQLCollationType:BINARY"><apiName>BINARY</apiName><shortdesc>
     列が BINARY 照合シーケンスを使用するように定義されていることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>binary</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     列が <codeph>BINARY</codeph> 照合シーケンスを使用するように定義されていることを示します。<codeph>SQLCollationType.BINARY</codeph> 照合では、バイト値を使用して 2 つの値を比較します。文字のテキストエンコードは考慮されません。
	 
	 <p>BINARY 照合が <codeph>TEXT</codeph> 記憶クラスの値で使用されている場合、データベースは、列の値のソートおよび比較を行うときに大文字と小文字を区別します。</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnSchema/defaultCollationType"><linktext>flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLCollationType:NO_CASE"><apiName>NO_CASE</apiName><shortdesc>
     列が NOCASE 照合シーケンスを使用するように定義されていることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noCase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     列が <codeph>NOCASE</codeph> 照合シーケンスを使用するように定義されていることを示します。<codeph>SQLCollationType.NO_CASE</codeph> 照合では、2 つの値をソートおよび比較するときに、大文字と小文字が無視されます。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnSchema/defaultCollationType"><linktext>flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLTransactionLockType"><apiName>SQLTransactionLockType</apiName><shortdesc>
 このクラスには、option パラメーター（SQLConnection.begin() メソッド）で有効な値を表す定数が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスには、<codeph>option</codeph> パラメーター（<codeph>SQLConnection.begin()</codeph> メソッド）で有効な値を表す定数が含まれます。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links><apiValue id="flash.data:SQLTransactionLockType:DEFERRED"><apiName>DEFERRED</apiName><shortdesc>
     遅延ロックトランザクションのオプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deferred</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     遅延ロックトランザクションのオプションを指定します。遅延ロックトランザクションは、データベースが最初にアクセスされるまで、データベースのロックを取得しません。遅延トランザクションでは、最初の読み取りまたは書き込み操作が行われるまで、ロックは取得されません。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:EXCLUSIVE"><apiName>EXCLUSIVE</apiName><shortdesc>
     排他的ロックトランザクションのオプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exclusive</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     排他的ロックトランザクションのオプションを指定します。排他的ロックトランザクションでは、データベースに対するロックが直ちに取得されます。別の SQLConnection（同じ AIR アプリケーションまたは異なるアプリケーション）を介して同じデータベースに対して実行している他の SQLStatement オブジェクトは、そのデータベースに対する読み取り操作または書き込み操作を実行できなくなります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:IMMEDIATE"><apiName>IMMEDIATE</apiName><shortdesc>
     即時ロックトランザクションのオプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>immediate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     即時ロックトランザクションのオプションを指定します。即時ロックトランザクションでは、データベースに対するロックが直ちに取得されます。別の SQLConnection（同じ AIR アプリケーションまたは異なるアプリケーション）を介して同じデータベースに対して実行している SQLStatement オブジェクトは、そのデータベースに対するデータの読み取り操作は実行できますが、書き込み操作は実行できなくなります。ただし、データベースのデータを読み取る他の接続の場合は、データベースのデータの初期状態は、トランザクション内の SQLConnection インスタンスの <codeph>begin()</codeph> メソッドが呼び出されたときよりも前のデータベースの状態と同一です。即時ロックトランザクション内で変更されたコミットされていないデータは、他の接続からは利用できません。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLSchemaResult"><apiName>SQLSchemaResult</apiName><shortdesc>
 SQLSchemaResult インスタンスには、SQLConnection.loadSchema() メソッドを呼び出した結果の情報が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLSchemaResult インスタンスには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出した結果の情報が含まれます。このインスタンスには、<codeph>SQLConnection.loadSchema()</codeph> の呼び出しで使用された引数値に基づき、要求されたスキーマデータを保持する 4 つの Array プロパティが含まれます。
 
 <p><codeph>SQLConnection.loadSchema()</codeph> 呼び出しの SQLSchemaResult インスタンスを取得するには、SQLConnection インスタンスの <codeph>getSchemaResult()</codeph> メソッドを呼び出します。一般に、SQLSchemaResult インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>flash.data.SQLConnection.getSchemaResult()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchemaResult:SQLSchemaResult"><apiName>SQLSchemaResult</apiName><shortdesc>
     SQLSchemaResult インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>tables</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 要求で指定された SQLTableSchema インスタンスの配列です。
     
     </apiDesc></apiParam><apiParam><apiItemName>views</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 要求で指定された SQLViewSchema インスタンスの配列です。
     
     </apiDesc></apiParam><apiParam><apiItemName>indices</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 要求で指定された SQLIndexSchema インスタンスの配列です。
     
     </apiDesc></apiParam><apiParam><apiItemName>triggers</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 要求で指定された SQLTriggerSchema インスタンスの配列です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLSchemaResult インスタンスを作成します。一般に、SQLSchemaResult コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLSchemaResult:indices:get"><apiName>indices</apiName><shortdesc>
     SQLIndexSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     SQLIndexSchema インスタンスの配列（<codeph>SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにインデックスが含まれていない場合、またはインデックスを結果から除外するように <codeph>loadSchema()</codeph> 呼び出しで示されている場合、<codeph>indices</codeph> プロパティは空の配列（<codeph>length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLIndexSchema"><linktext>flash.data.SQLIndexSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:tables:get"><apiName>tables</apiName><shortdesc>
     SQLTableSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     SQLTableSchema インスタンスの配列（<codeph>SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにテーブルが含まれていない場合、またはテーブルを結果から除外するように <codeph>loadSchema()</codeph> 呼び出しで示されている場合、<codeph>tables</codeph> プロパティは空の配列（<codeph>length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema"><linktext>flash.data.SQLTableSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:triggers:get"><apiName>triggers</apiName><shortdesc>
     SQLTriggerSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     SQLTriggerSchema インスタンスの配列（<codeph>SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにトリガーが含まれていない場合、またはトリガーを結果から除外するように <codeph>loadSchema()</codeph> 呼び出しで示されている場合、<codeph>triggers</codeph> プロパティは空の配列（<codeph>length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTriggerSchema"><linktext>flash.data.SQLTriggerSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:views:get"><apiName>views</apiName><shortdesc>
     SQLViewSchema インスタンスの配列（SQLConnection.loadSchema() の呼び出しで要求）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     SQLViewSchema インスタンスの配列（<codeph>SQLConnection.loadSchema()</codeph> の呼び出しで要求）です。指定されたデータベースにビューが含まれていない場合、またはビューを結果から除外するように <codeph>loadSchema()</codeph> 呼び出しで示されている場合、<codeph>views</codeph> プロパティは空の配列（<codeph>length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLViewSchema"><linktext>flash.data.SQLViewSchema</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLConnection"><apiName>SQLConnection</apiName><shortdesc>
 SQLConnection インスタンスは、ローカル SQL データベースファイル（ローカルデータベース）の作成と接続を管理するために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLConnection インスタンスは、ローカル SQL データベースファイル（ローカルデータベース）の作成と接続を管理するために使用します。
 
 <p>SQLConnection クラスの機能は、いくつかのカテゴリに分けられます。</p>
 
 <ul>
   <li><p>ローカル SQL データベースを作成したり開いたりするには、<codeph>open()</codeph> メソッドまたは <codeph>openAsync()</codeph> メソッドを呼び出します。データベースファイルが存在しない場合、これらのメソッドは接続を開く際に、オプションでデータベースファイルを作成できます。データベースへの接続が確立すると、SQLStatement インスタンスを作成し、SQLConnection インスタンスを SQLStatement の <codeph>sqlConnection</codeph> プロパティに割り当てることで、データベースに対して SQL ステートメントを作成および実行できます。</p></li>
 
   <li><p>SQLConnection クラスは、<codeph>begin()</codeph>、<codeph>commit()</codeph> および <codeph>rollback()</codeph> の各メソッドを使用して複数のステートメントを 1 回のトランザクションで実行するメカニズムを含め、SQL ステートメントの状態も示します。</p></li>
 
   <li><p>SQLConnection クラスは、接続済みのデータベースのデータベーススキーマ情報を示します。データベースのスキーマは、データベースのテーブル、列、インデックスおよびトリガーの定義を表します。詳細については、<codeph>loadSchema()</codeph> メソッドを参照してください。</p></li>
 
   <li><p>SQLConnection クラスを使用すると、CCM を使用する AES でデータベースを暗号化できます。これにより、データの認証とプライバシーの両方が提供されます。データベースを暗号化するには、データベースを作成するときに、ByteArray を使用して 16 バイトのキーを指定する必要があります。このキーは、後で <codeph>SQLConnection.reencrypt()</codeph> メソッドを使用して変更できます。暗号化を使用すると、データベースを読み書きする際のパフォーマンスが低下します。暗号化は、ディスクに保存されたデータに適用されますが、メモリ内の一時データキャッシュには適用されません。暗号化は、メモリ内データベースでサポートされて<i>いません</i>。</p></li>
 
   <li><p>SQLConnection インスタンスを使用したデータベースレベルのイベント通知の受信が可能で、キャッシュページサイズ、プロセスのキャンセルおよびステートメントの実行オプションなど、データベースのあらゆる状態を制御することができます。</p></li>
 </ul>
 
 <p><codeph>SQLConnection</codeph> インスタンスは、非同期および同期のいずれかの実行モードで機能します。同期実行を使用するには、<codeph>open()</codeph> メソッドを使用して、SQLConnection インスタンスのメインデータベースに接続します。非同期実行を使用するには、<codeph>openAsync()</codeph> メソッドを使用して、インスタンスのメインデータベースに接続します。</p>
 
 <p>非同期実行を使用する場合は、イベントリスナーまたは Responder インスタンスを使用して、処理の完了または失敗を特定します。処理はメインアプリケーションスレッドではなくバックグラウンドで実行されるので、データベース処理の実行中でもアプリケーションは実行を続け、ユーザーの操作に応答します。</p>
 
 <p>非同期実行モードでは、適切なメソッドを呼び出して、特定の処理を開始します。処理の完了 (または失敗) は、該当するイベントにリスナーを登録することで検出できます。各処理には、処理が正常に完了した場合に送出される関連イベントが用意されています。例えば、<codeph>openAsync()</codeph> メソッドの呼び出しが正常に完了した場合（データベース接続が開かれた場合）は、<codeph>open</codeph> イベントが送出されます。処理が失敗すると、<codeph>error</codeph> イベントが送出されます。SQLErrorEvent オブジェクトの <codeph>error</codeph> プロパティの SQLError インスタンスには、試行された処理や処理が失敗した理由など、特定のエラーに関する情報が格納されます。</p>
 
 <p>同期実行を使用する場合は、処理の完了または失敗を特定するためにイベントリスナーを登録する必要はありません。エラーを特定するには、エラーをスローするステートメントを、<codeph>try..catch</codeph> ブロックで囲みます。同期処理はメイン実行スレッドで実行されるので、アプリケーションの機能（画面の更新や、マウスおよびキーボード操作の受け付けなど）は、データベース処理が実行されている間、すべて停止されます。長時間を要する処理では、一定の時間アプリケーションが停止する場合があります。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.events.xml#SQLEvent"><linktext>flash.events.SQLEvent</linktext></link><link href="flash.events.xml#SQLErrorEvent"><linktext>flash.events.SQLErrorEvent</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_en"><linktext>クイックスタート：ローカル SQL データベースの非同期操作（Flex）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_flash_en"><linktext>クイックスタート：ローカル SQL データベースの非同期操作（Flash）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_html_en"><linktext>クイックスタート：ローカル SQL データベースの非同期操作（HTML）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_en"><linktext>クイックスタート：ローカル SQL データベースの同期操作（Flex）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_flash_en"><linktext>クイックスタート：ローカル SQL データベースの同期操作（Flash）</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_html_en"><linktext>クイックスタート：ローカル SQL データベースの同期操作（HTML）</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.UPDATE_update"><apiName>update</apiName><shortdesc>
 SQL UPDATE コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLUpdateEvent.UPDATE</apiEventType><adobeApiEventClassifier>flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 SQL <codeph>UPDATE</codeph> コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。データの変化は、SQLStatement インスタンスから <codeph>UPDATE</codeph> ステートメントを実行した直接的な結果か、ステートメントの実行に応答してトリガーが発生した間接的な結果である場合があります。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SCHEMA_schema"><apiName>schema</apiName><shortdesc>
 loadSchema() メソッド呼び出しの処理が正常に完了し、スキーマの結果の準備が完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.SCHEMA</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>loadSchema()</codeph> メソッド呼び出しの処理が正常に完了し、スキーマの結果の準備が完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_rollback"><apiName>rollback</apiName><shortdesc>
 rollback() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>rollback()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.REENCRYPT_reencrypt"><apiName>reencrypt</apiName><shortdesc>
 reencrypt() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>reencrypt()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.OPEN_open"><apiName>open</apiName><shortdesc>
 openAsync() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.OPEN</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>openAsync()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.INSERT_insert"><apiName>insert</apiName><shortdesc>
 SQL INSERT コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLUpdateEvent.INSERT</apiEventType><adobeApiEventClassifier>flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 SQL <codeph>INSERT</codeph> コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。データの変化は、SQLStatement インスタンスから <codeph>INSERT</codeph> ステートメントを実行した直接的な結果か、ステートメントの実行に応答してトリガーが発生した間接的な結果である場合があります。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
 任意の SQLConnection オブジェクトの非同期処理でエラーが発生した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 任意の SQLConnection オブジェクトの非同期処理でエラーが発生した場合に送出されます。イベントオブジェクトとして送出された SQLErrorEvent インスタンスは、<codeph>error</codeph> プロパティを持ちます。このプロパティには、試行された処理と失敗した理由に関する情報が格納されています。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DETACH_detach"><apiName>detach</apiName><shortdesc>
 detach() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.DETACH</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>detach()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.DELETE_delete"><apiName>delete</apiName><shortdesc>
 SQL DELETE コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLUpdateEvent.DELETE</apiEventType><adobeApiEventClassifier>flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 SQL <codeph>DELETE</codeph> コマンドを実行した結果、任意の接続済みデータベースの任意のテーブルのデータが変化した場合に送出されます。データの変化は、SQLStatement インスタンスから <codeph>DELETE</codeph> ステートメントを実行した直接的な結果か、ステートメントの実行に応答してトリガーが発生した間接的な結果である可能性があります。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DEANALYZE_deanalyze"><apiName>deanalyze</apiName><shortdesc>
 deanalyze() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>deanalyze()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMMIT_commit"><apiName>commit</apiName><shortdesc>
 commit() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.COMMIT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>commit()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
 close() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.CLOSE</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>close()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMPACT_compact"><apiName>compact</apiName><shortdesc>
 compact() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.COMPACT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>compact()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CANCEL_cancel"><apiName>cancel</apiName><shortdesc>
 cancel() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.CANCEL</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>cancel()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.BEGIN_begin"><apiName>begin</apiName><shortdesc>
 begin() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.BEGIN</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>begin()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ATTACH_attach"><apiName>attach</apiName><shortdesc>
 attach() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.ATTACH</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>attach()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ANALYZE_analyze"><apiName>analyze</apiName><shortdesc>
 analyze() の処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.ANALYZE</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>analyze()</codeph> の処理が正常に完了したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>analyze()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLConnection:SQLConnection"><apiName>SQLConnection</apiName><shortdesc>
     SQLConnection インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>メインアプリケーションサンドボックス外部のサンドボックスからコンストラクターが呼び出された場合。 
      
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
     SQLConnection インスタンスを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLConnection:addEventListener"><apiName>addEventListener</apiName><shortdesc>
     
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>イベントを処理するリスナー関数です。この関数は、次の例のように、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないもの<ph platform="actionscript">である必要があります。</ph> <ph platform="javascript"/>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>関数の名前は任意に付けられます。</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">このパラメーターは、SWF コンテンツで使用される ActionScript 3.0 の表示リストアーキテクチャの表示オブジェクトに適用されます。</ph> <ph platform="actionscript">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。 <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph>useCapture</codeph> を <codeph>false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph>addEventListener</codeph> を 2 回呼び出します。<codeph>useCapture</codeph> を <codeph>true</codeph> に設定して呼び出し、<codeph>useCapture</codeph> を <codeph>false</codeph> に設定してもう一度呼び出します。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0.0</apiData><apiDesc>イベントリスナーの優先度レベルです。優先度は、符号付き 32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i>n</i> のすべてのリスナーは、優先度が <i>n</i>-1 のリスナーよりも前に処理されます。複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。デフォルトの優先度は 0 です。
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p>クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph>useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph>true</codeph> に設定できます。ネストされた内部の関数であるリスナーに対して <codeph>useWeakReference</codeph> を <codeph>true</codeph> に設定すると、その関数はガベージコレクションされ、永続的ではなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
     
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。<ph platform="actionscript">イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。</ph>
	
	<p platform="javascript">AIR ランタイムの JavaScript コードは、このメソッドを使用して AIR API によって定義されたイベント用のイベントリスナーを登録します。他の JavaScript イベント、例えば、<codeph>onload</codeph> イベント（DOM <codeph>body</codeph> オブジェクトのイベント）などの場合、ブラウザー内で実行されるコンテンツに対して行うように標準イベント処理テクニックを使用できます。</p>
	
	<p>イベントリスナーが正常に登録された後に、<codeph>addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph>removeListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。 </p>
	
	<p>リスナーが登録された後に、<codeph>addEventListener()</codeph>（<codeph>type</codeph> または <codeph>useCapture</codeph> に別の値を設定）を再度呼び出すと、別のリスナー登録が作成されることに注意してください。<ph platform="actionscript">例えば、最初にリスナーを登録するときに <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph>addEventListener()</codeph> を呼び出すと（このとき、<codeph>useCapture</codeph> に <codeph>false</codeph> を設定）、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</ph>
	</p>
	
	<p platform="actionscript">ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	
	<p>イベントリスナーが不要になった場合は、<codeph>removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクターは送出するオブジェクトがないとリスナーを削除しないので、イベントリスナーはメモリから自動的に削除されません（ただし、<codeph>useWeakReference</codeph> パラメーターが <codeph>true</codeph> に設定されている場合を除きます）。</p>
		
	<p>EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	
	
	<p platform="actionscript">イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	
	<p platform="actionscript">イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:analyze"><apiName>analyze</apiName><shortdesc>
     データベースインデックスに関する統計を収集し、データベースに保存します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>resourceName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>インデックスを分析するデータベースまたはテーブルの名前です。指定されたリソースがテーブルで、アタッチされているデータベースの中で一意の名前を持つ場合は、テーブル名だけを指定する必要があります。ただし、テーブル名を <codeph>[database-name].[table-name]</codeph> という形式で指定し、テーブル名が一意でない場合のあいまいさを避けることができます。<codeph>resourceName</codeph> パラメーターが <codeph>null</codeph>（デフォルト）の場合、アタッチされているすべてのデータベースのすべてのインデックスが分析されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>analyze</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     データベースインデックスに関する統計を収集し、データベースに保存します。これらの統計情報は、クエリオプティマイザ（データベースエンジンの中で、各ステートメントを実行する最も効率的な方法を決定する部分）で使用できます。この統計情報は、特定のクエリを実行する場合に、クエリオプティマイザが最適なインデックスを選択するのに役立ちます。
	 
	 <p>データベースにインデックスが定義されていて、<codeph>analyze()</codeph> メソッドが呼び出されていない場合でも、ランタイムはそのインデックスを使用してステートメントを実行します。ただし、<codeph>analyze()</codeph> メソッドで生成された詳細な統計情報が存在しない場合は、ランタイムが特定のクエリに対して最も効率的なインデックスを選択できない場合があります。</p>
	 
	 <p>(<codeph>INSERT</codeph>、<codeph>UPDATE</codeph> または <codeph>DELETE</codeph> ステートメントの実行結果として）テーブルのデータが変更された場合、そのテーブルに関連付けられているインデックスも変更されます。<codeph>analyze()</codeph> によって生成された統計情報は、自動的に更新されません。したがって、大量のデータを変更した場合は、再度 <codeph>analyze()</codeph> メソッドを呼び出すと有効です。ただし、<codeph>analyze()</codeph> を再び呼び出した場合の効果は、様々な要因に左右されます。例えば、テーブルに定義されているインデックスの数や、変更された行数とテーブルの全行数との比率、インデックス付けされているテーブルのデータに見られる差異の大きさ、変更後のデータと変更前のデータの変化の大きさなどに左右されます。</p>
     
     <p><codeph>resourceName</codeph> パラメーターは、インデックスに対する処理を、アタッチされているすべてのデータベース、特定のデータベースまたは特定のテーブルについて実行するかどうかを示します。</p>
     
     <p>このメソッドが呼び出されると、そのたびに以前に作成された統計データは削除され、データベースや <codeph>resourceName</codeph> パラメーターで指定されたテーブル（<codeph>resourceName</codeph> が <codeph>null</codeph> の場合は接続されたすべてのデータベースの全テーブル）用に統計データが再作成されます。このメソッドは、データベース接続が開かれている状態であれば、いつでも呼び出せます。<codeph>analyze()</codeph> 操作とその統計データは、トランザクションに含まれません。ただし、データベースに現在処理中のトランザクションがある場合は、<codeph>analyze()</codeph> の呼び出しは推奨されません（<codeph>inTransaction</codeph> プロパティが <codeph>true</codeph> の場合）。これは、トランザクションで実行されたデータ、テーブルスキーマまたはインデックスの変更がコミットされていない場合、<codeph>analyze()</codeph> の呼び出しに反映されないので、トランザクションがコミットされると <codeph>analyze()</codeph> データが最新の状態でなくなることが理由です。</p>
     
     <p><codeph>analyze()</codeph> メソッドで作成された統計データを削除するには、<codeph>deanalyze()</codeph> メソッドを使用します。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>deanalyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:analyze_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:analyze_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:attach"><apiName>attach</apiName><shortdesc>
     別のデータベースを SQLConnection インスタンスに追加し、指定された名前を新しいデータベースに付けます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>name</codeph> パラメーターが空の文字列（<codeph>""</codeph>）または <codeph>null</codeph> の場合
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> パラメーターに指定された値が、flash.filesystem.File インスタンスでない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>encryptionKey</codeph> 引数が <codeph>null</codeph> ではなく、その <codeph>length</codeph> が 16 バイトではない場合
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> パラメーターが <codeph>null</codeph> で、<codeph>encryptionKey</codeph> 引数が <codeph>null</codeph> ではない場合
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない場合（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の場合）、またはトランザクションが現在開いている場合（<codeph>inTransaction</codeph> プロパティが <codeph>true</codeph> の場合）
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>新しくアタッチされたデータベースを識別するために使用する名前です。この名前は SQL ステートメントで使用し、指定されたデータベースに属しているテーブルを明示的に示すことができます。この場合、<codeph>[database-name].[table-name]</codeph> という書式を使用します。"main" および "temp" という名前は予約されており、使用できません。
     
     </apiDesc></apiParam><apiParam><apiItemName>reference</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>アタッチするデータベースファイルへの参照（flash.filesystem.File インスタンス）です。この参照が存在しないファイルを参照している場合、新しいデータベースが作成されるか、<codeph>openMode</codeph> パラメーター（メインデータベースを接続した <codeph>open()</codeph> または <codeph>openAsync()</codeph> 呼び出し）で指定された値に従ってエラーがスローされます。
	 
     <p>パラメーターの値が <codeph>null</codeph> の場合、メモリ内データベースが作成され、アタッチされます。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>attach</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>encryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>データベースファイルの暗号化キー。<codeph>attach()</codeph> の呼び出しがデータベースを作成する場合、データベースは暗号化されて、指定したキーがデータベースの暗号化キーとして使用されます。呼び出しによって既存の暗号化されたデータベースがアタッチされる場合、値はそのデータベースの暗号化キーと一致している必要があり、一致しない場合はエラーが発生します。追加されるデータベースが暗号化されていない場合、または暗号化されないデータベースを作成する場合は、値として <codeph>null</codeph>（デフォルト）を指定する必要があります。
	 
	 <p>有効な暗号化キーは 16 バイト長です。メモリ内データベースは暗号化できないので、このパラメーターを <codeph>null</codeph> にする必要があります（<codeph>reference</codeph> パラメーターの値が <codeph>null</codeph> の場合）。</p>
	 
	 <p>暗号化されたデータベースを追加する場合、指定した暗号化キーがデータベースの暗号化キーと一致していないと、例外が発生します。同期実行モードでは、SQLError 例外がスローされます。非同期モードでは、SQLErrorEvent が送出されて、イベントオブジェクトの <codeph>error</codeph> プロパティには SQLError インスタンスが設定されます。どちらの場合も、SQLError オブジェクトの <codeph>errorID</codeph> プロパティは 3138（"開かれたファイルはデータベースファイルではない"）です。</p>
	 
	 <p><codeph>encryptionKey</codeph> パラメーターは、AIR 1.5 以降で使用できます。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     別のデータベースを SQLConnection インスタンスに追加し、指定された名前を新しいデータベースに付けます。データベースをアタッチすると、この SQLConnection インスタンスに対して実行される SQL ステートメントで、そのデータベースを使用できるようになります。
     
     <p>指定された名前を使用して、データベースが既にアタッチされている場合は、<codeph>attach()</codeph> を呼び出すと <codeph>error</codeph> イベントが発生します。ただし、一意の名前を使用することで、同じデータベースを 2 回以上アタッチすることができます。単一の SQLConnection インスタンスにアタッチできるデータベースは、10 個までです。</p>
     
     <p><codeph>attach()</codeph> を使用して接続したデータベースに対しては、任意の SQL ステートメントを実行できます。このメソッドは、メインデータベース（<codeph>open()</codeph> または <codeph>openAsync()</codeph> を使用して接続したデータベース）に対して実行できます。SQL ステートメントは、そのステートメントの関連付けられている SQLConnection インスタンスにアタッチされているデータベースであれば、どのテーブルにでもアクセスできます。これには、単一のステートメントで複数のデータベースのテーブルにアクセスする場合も含まれます。ランタイムはステートメントのテーブル名を解決すると、SQLConnection インスタンスのデータベースを検索します。検索は <codeph>open()</codeph> メソッドまたは <codeph>openAsync()</codeph> メソッドを使用して接続されたデータベースから開始され、アタッチされた順番に行われます。ステートメントでデータベース名（<codeph>attach()</codeph> メソッドの <codeph>name</codeph> パラメーターで指定された名前）を使用して、テーブル名を明示的に修飾します。</p>
     
     <p><codeph>attach()</codeph> メソッドを使用してアタッチされたデータベースを削除するには、<codeph>detach()</codeph> メソッドを使用します。<codeph>close()</codeph> メソッドを呼び出して SQLConnection インスタンスを閉じると、アタッチされているデータベースは、すべてデタッチされます。</p>
     
     <p>アタッチされているデータベースは、メインデータベースと同じ実行モード (同期または非同期) を使用します。これは、メインデータベースが <codeph>open()</codeph> メソッドまたは <codeph>openAsync()</codeph> メソッドのどちらを使用して接続されたかによって異なります。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/detach()"><linktext>detach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:attach_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:attach_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:begin"><apiName>begin</apiName><shortdesc>
     接続のデータベースに対して実行されるすべての SQL ステートメントがグループ化されている範囲内で、トランザクションを開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態 (<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態) で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>指定されたオプションが、<codeph>SQLTransactionLockType</codeph> 定数の 1 つでない場合。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>option</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>トランザクションで使用するロック手順を示します。値は、SQLTransactionLockType クラスで定義されているいずれかの定数になります。
     <ul>
        <li><codeph>SQLTransactionLockType.DEFERRED</codeph> は、最初の読み取り処理または書き込み処理が行われるまでロックを取得しないことを示します。</li>
        <li><codeph>SQLTransactionLockType.EXCLUSIVE</codeph> は、可能な限り早くロックを取得し、他の SQLConnection インスタンスによるデータベースに対する読み取り処理または書き込み処理を許可しないことを示します。</li>
        <li><codeph>SQLTransactionLockType.IMMEDIATE</codeph> は、可能な限り早くロックを取得し、他の SQLConnection インスタンスに対してデータベースの読み取り処理だけを許可し、書き込み処理は許可しないことを示します。</li>
     </ul>
	 <p>デフォルト値（<codeph>null</codeph>）は <codeph>SQLTransactionLockType.DEFERRED</codeph> と同じです。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>begin</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     接続のデータベースに対して実行されるすべての SQL ステートメントがグループ化されている範囲内で、トランザクションを開始します。
     
     <p>デフォルトでは、各 SQL ステートメントは自身のトランザクションの範囲内で実行され、ステートメントの実行が正常に完了した場合または失敗した場合にトランザクションが終了します。<codeph>begin()</codeph> メソッドを使用してトランザクションを作成すると、新しいマニュアルトランザクションが作成されます。それ以降、SQLConnection インスタンスに対して実行される SQL ステートメントはすべてトランザクションの範囲内で発生し、ステートメントによって実行されるアクションまたは変更は、グループとしてコミット (永続させる) またはロールバック (元に戻す) できます。</p>
     
     <p>トランザクションのネストは許可されていません (ネストした <codeph>begin()</codeph> の呼び出しは無視されます)。トランザクションを終了するには、<codeph>commit()</codeph> メソッドまたは <codeph>rollback()</codeph> メソッドを呼び出します。どちらを呼び出すかは、トランザクションのステートメントによる変更を永続させるか破棄するかによって決定します。</p>
	 
	 <p>トランザクションが現在開いている状態でデータベース接続が閉じられると、AIR はトランザクションを自動的にロールバックします。（注意：AIR 1.1 以前のバージョンの場合、開いているトランザクションは、接続が閉じられると自動的にコミットされます）。</p>
     
     <p>トランザクションでは、ステートメントの実行が単一のデータベースに限定されていません。アタッチされている別のデータベースに対して実行されるステートメントを含めることもできます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link><link href="flash.data.xml#SQLTransactionLockType"><linktext>flash.data.SQLTransactionLockType</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:begin_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:begin_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:cancel"><apiName>cancel</apiName><shortdesc>
     SQLConnection インスタンスに接続しているデータベースに対して現在実行中の SQL ステートメントをすべて中止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>cancel</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     SQLConnection インスタンスに接続しているデータベースに対して現在実行中の SQL ステートメントをすべて中止します。このメソッドは、長時間実行されているクエリや暴走したクエリを停止するために使用できます。
     
     <p><codeph>cancel()</codeph> メソッドを呼び出したときに実行しているステートメントが存在する場合、このメソッドによってステートメントの処理が中止され、未完了の更新またはトランザクションはロールバックされます。現在実行しているステートメントが存在しない場合、このメソッドを呼び出すと、開いているトランザクションがロールバックされます。開いているトランザクションがない場合は、何も実行されません。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:cancel_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
	 
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:cancel_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:close"><apiName>close</apiName><shortdesc>
     現在のデータベース接続を閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>close</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在のデータベース接続を閉じます。アタッチされているデータベースもデタッチされます。
     
     <p>開いているトランザクションがある状態で <codeph>close()</codeph> を呼び出すと、そのトランザクションはコミットされます。SQLConnection インスタンスがガベージコレクションされると、ランタイムは自動的に <codeph>close()</codeph> を呼び出します。これには、SQLConnection がデータベースに接続されたまま AIR アプリケーションが閉じられた場合も含まれます。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:close_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:close_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:commit"><apiName>commit</apiName><shortdesc>
     既存のトランザクションをコミットします。トランザクションのステートメントによって実行されたアクションは、永続的にデータベースに適用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない（<codeph>connected</codeph> プロパティが <codeph>false</codeph>）の状態でメソッドを呼び出した場合、または現在開いているトランザクションが存在しない場合（<codeph>inTransaction</codeph> プロパティが <codeph>false</codeph> の場合）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>commit</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     既存のトランザクションをコミットします。トランザクションのステートメントによって実行されたアクションは、永続的にデータベースに適用されます。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:commit_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:commit_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正常に完了しなかった場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正常に完了しなかった場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:compact"><apiName>compact</apiName><shortdesc>
     データベースの未使用領域を再要求します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない（<codeph>connected</codeph> プロパティが <codeph>false</codeph>）状態でメソッドを呼び出した場合、またはトランザクションが現在処理中の場合（<codeph>inTransaction</codeph> プロパティが <codeph>true</codeph> の場合）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>compact</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     データベースの未使用領域を再要求します。オブジェクト（テーブル、インデックスまたはトリガー）がデータベースからドロップされた場合は、空のまま残されます。そのため、データベースファイルのサイズが必要以上に大きくなりますが、<codeph>INSERT</codeph> 操作の処理速度が向上します。時間の経過と共に、<codeph>INSERT</codeph> 操作および <codeph>DELETE</codeph> 操作によってデータベースファイルの構造に断片化が生じ、データベースコンテンツへのディスクアクセスの速度が低下します。このメソッドは、空きページを削除し、テーブルのデータが連続するように整理を行い、データベースファイルの構造をクリーンアップすることで、データベースファイルのサイズを縮小します。
     
     <p><codeph>compact()</codeph> 操作は、アタッチされているデータベースファイルに対しては実行できません。SQLConnection インスタンスによって開かれたメイン（元の）データベースファイルにのみ実行できます。この操作は、アクティブなトランザクションがある場合は失敗します。また、メモリ内のデータベースには影響を与えません。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:compact_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:compact_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:deanalyze"><apiName>deanalyze</apiName><shortdesc>
     analyze() メソッドの呼び出して作成された統計情報をすべて削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態）で、このメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>deanalyze</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>analyze()</codeph> メソッドの呼び出しで作成された統計情報をすべて削除します。
	 
	 <p><codeph>analyze()</codeph> メソッドで作成された統計情報はデータベースの領域を使用するので、いくつかのインデックスやテーブルをドロップした後に <codeph>deanalyze()</codeph> を呼び出すことで、その領域を再要求することができます。</p>
     
     <p>この処理はアクティブなトランザクションには含まれていません。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>analyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:deanalyze_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:deanalyze_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:detach"><apiName>detach</apiName><shortdesc>
     attach() メソッドを使用して SQLConnection インスタンスにアタッチされた追加のデータベースをデタッチします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>name</codeph> 引数が <codeph>null</codeph> の場合、または空のストリング（<codeph>""</codeph>）が格納されている場合。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない（<codeph>connected</codeph> プロパティが <codeph>false</codeph>）の状態でこのメソッドを呼び出した場合、または開いているトランザクション（<codeph>inTransaction</codeph> プロパティが <codeph>true</codeph>）が SQLConnection インスタンスに存在する場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>デタッチするデータベースの指定された名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>detach</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>attach()</codeph> メソッドを使用して SQLConnection インスタンスにアタッチされた追加のデータベースをデタッチします。異なる名前を使用することで、同じデータベースファイルを 2 回以上アタッチすることができます。この場合、1 つの接続をデタッチしても、残りの接続は維持されます。開いているトランザクションが存在する場合 (<codeph>inTransaction</codeph> プロパティが <codeph>true</codeph> の場合)、データベースをデタッチできません。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:detach_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:detach_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:getSchemaResult"><apiName>getSchemaResult</apiName><shortdesc>
     loadSchema() メソッド呼び出しの結果に対するアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flash.data:SQLSchemaResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     <codeph>loadSchema()</codeph> メソッド呼び出しの結果に対するアクセスを提供します。<codeph>getSchemaResult()</codeph>  メソッドは、結果の先入れ先出しキューとして動作します。<codeph>loadSchema()</codeph> メソッドの呼び出しが完了するたびに（<codeph>schema</codeph> イベントが非同期実行モードで送出されるたびに）、新しい SQLSchemaResult オブジェクトがキューに追加されます。<codeph>getSchemaResult()</codeph> メソッドが呼び出されるたびに、最も古い結果（最初にキューに追加されたもの）が返され、キューから削除されます。キューに存在するオブジェクトがなくなると、<codeph>getSchemaResult()</codeph> は <codeph>null</codeph> を返します。
     
     <p>データベース接続が閉じられると、メソッドは <codeph>null</codeph> を返します。</p>
     
	 </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/schema"><linktext>スキーマ</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLConnection:loadSchema"><apiName>loadSchema</apiName><shortdesc>
     接続されているデータベースまたはアタッチされている任意のデータベースからスキーマ情報をロードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態）でメソッドが呼び出された場合。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>指定されている <codeph>type</codeph> 引数の値が、許可されているいずれかの型ではない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードを使用している場合で、名前またはデータベースのパラメーターに無効な値が指定されている場合。
	 
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>Class</apiOperationClassifier><apiData>null</apiData><apiDesc>ロードするスキーマのタイプを示します。 <codeph>null</codeph> 値（デフォルト）は、すべてのスキーマ情報をロードすることを示します。 このパラメーターに <codeph>null</codeph> 以外の値を指定すると、ロードするスキーマの範囲が絞り込まれ、不要な可能性のある情報が結果から排除されるので、処理がより効率的になります。 指定する値は、以下のいずれかのクラスのクラス名でなければなりません。
	 <ul>
	     <li>SQLIndexSchema</li>
	     <li>SQLTableSchema</li>
	     <li>SQLTriggerSchema</li>
	     <li>SQLViewSchema</li>
	 </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>どのリソースのスキーマをロードするかを示します。この値の使用方法は、指定されている <codeph>type</codeph> 引数に基づきます。一般的には、テーブル名、インデックスまたはビュー名など、データベースオブジェクトの名前になります。値が指定されている場合、指定された名前を持つデータベースオブジェクトのスキーマ情報だけが、結果に含められます。
	 
	 <p>指定された値が有効でない場合は、<codeph>error</codeph> イベントが送出されます（同期実行モードの場合はエラーがスローされます）。メソッドの説明で示されているように、<codeph>type</codeph> パラメーターの値は、指定されたオブジェクト型に対応していなければ有効な値とはなりません。</p>
	 
	 <p><codeph>name</codeph> 引数が <codeph>null</codeph> の場合は、指定されたタイプのすべてのスキーマが含められます。指定された値が有効な値でない場合は、<codeph>error</codeph> イベントが送出されます。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>main</apiData><apiDesc>スキーマをロードするデータベースの名前です。指定された値が有効な値でない場合は、<codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>includeColumnSchema</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>テーブルの列とビューのスキーマ情報を結果に含めるかどうかを示します。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>schema</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     接続されているデータベースまたはアタッチされている任意のデータベースからスキーマ情報をロードします。スキーマは、データベースのテーブル、列、インデックスおよびトリガーの構造を示すものです。
	 
     <p>ロードされているスキーマにアクセスするには、<codeph>SQLConnection.getSchemaResult()</codeph> メソッドを使用します。</p>
	 
     <p>非同期実行モードでは、処理が正しく完了すると <codeph>schema</codeph> イベントが送出され、処理が失敗すると <codeph>error</codeph> イベントが送出されます。</p>
	 
	 <p><codeph>type</codeph> および <codeph>name</codeph> の各パラメーター値の組み合わせによって、<codeph>loadSchema()</codeph> メソッドが生成するスキーマデータのタイプが決定されます。また、これにより、生成される SQLSchemaResult インスタンスの各プロパティの値も決定されます。次の表は、有効な <codeph>type</codeph> および <codeph>name</codeph> の組み合わせと、結果として生成されるスキーマデータを一覧にしたものです。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="3"><thead><row><entry><codeph>type</codeph> 引数</entry><entry><codeph>name</codeph> 引数</entry><entry>スキーマデータを取得する対象： </entry></row></thead><tbody><row>
	     <entry><codeph>null</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>データベースのすべてのオブジェクト（すべてのテーブル、ビュー、トリガーおよびインデックス)</entry>
	   </row><row>
	     <entry><codeph>SQLIndexSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>データベースのすべてのインデックス</entry>
	   </row><row>
	     <entry><codeph>SQLIndexSchema</codeph></entry>
	     <entry>有効なテーブル名</entry>
	     <entry>指定されたテーブルに対して定義されているすべてのインデックス</entry>
	   </row><row>
	     <entry><codeph>SQLIndexSchema</codeph></entry>
	     <entry>有効なインデックス名</entry>
	     <entry>指定されたインデックス</entry>
	   </row><row>
	     <entry><codeph>SQLTableSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>データベースのすべてのテーブル</entry>
	   </row><row>
	     <entry><codeph>SQLTableSchema</codeph></entry>
	     <entry>有効なテーブル名</entry>
	     <entry>指定されたテーブル</entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>データベースのすべてのトリガー</entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry>有効なテーブル名</entry>
	     <entry>指定されたテーブルに関連付けられているすべてのトリガー</entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry>有効なビュー名</entry>
	     <entry>指定されたビューに関連付けられているすべてのトリガー </entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry>有効なトリガー名</entry>
	     <entry>指定されたトリガー </entry>
	   </row><row>
	     <entry><codeph>SQLViewSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>データベースのすべてのビュー</entry>
	   </row><row>
	     <entry><codeph>SQLViewSchema</codeph></entry>
	     <entry>有効なビュー名</entry>
	     <entry>指定されたビュー </entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p><codeph>type</codeph> 引数および <codeph>name</codeph> 引数の組み合わせが、指定されている組み合わせに対応していない場合は、<codeph>error</codeph> イベントが送出されるか（非同期実行モードの場合）、例外がスローされます（同期実行モードの場合）。例えば、<codeph>type</codeph> 引数が <codeph>SQLViewSchema</codeph> で、<codeph>name</codeph> 引数がビュー名ではなくテーブル名の場合、指定された名前を持つ指定された型のオブジェクトがデータベースに含まれていないことを示すエラーが発生します。</p>
	 
	 <p>データベースが空の場合（データベースにテーブル、ビュー、トリガーまたはインデックスが含まれていない場合）、<codeph>loadSchema()</codeph> メソッドを呼び出すとエラーが発生します。</p>
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>getSchemaResult()</linktext></link><link href="flash.data.xml#SQLConnection/schema"><linktext>スキーマ</linktext></link><link href="flash.data.xml#SQLIndexSchema"><linktext>flash.data.SQLIndexSchema</linktext></link><link href="flash.data.xml#SQLTableSchema"><linktext>flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLTriggerSchema"><linktext>flash.data.SQLTriggerSchema</linktext></link><link href="flash.data.xml#SQLViewSchema"><linktext>flash.data.SQLViewSchema</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:loadSchema_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:loadSchema_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正常に完了しなかった場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正常に完了しなかった場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:open"><apiName>open</apiName><shortdesc>
     ファイルシステムの指定された場所にあるデータベースファイルを同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスに、開かれているデータベースへの接続が既にある場合（<codeph>connected</codeph> プロパティが <codeph>true</codeph> の場合）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>処理が失敗した場合。処理に失敗した場合、接続が開いたままになることはありません。
     
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> パラメーターに指定された値が、flash.filesystem.File インスタンスでない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>encryptionKey</codeph> 引数が <codeph>null</codeph> ではなく、その <codeph>length</codeph> が 16 バイトではない場合
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> パラメーターが <codeph>null</codeph> で、<codeph>encryptionKey</codeph> 引数が <codeph>null</codeph> ではない場合
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>無効な <codeph>pageSize</codeph> パラメーターが指定された場合。これにはモードが <codeph>SQLMode.READ</codeph> である場合にページサイズを渡すことも含まれます。
	 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>reference</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>開かれているデータベースファイルの場所です。この値は、flash.filesystem.File インスタンスでなければなりません。パラメーターの値が <codeph>null</codeph> の場合、メモリ内データベースが作成され、開かれます。
     
     </apiDesc></apiParam><apiParam><apiItemName>openMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>create</apiData><apiDesc>データベースを開く方法を示します。値は SQLMode クラスに定義されている任意の定数です。デフォルト値は <codeph>SQLMode.CREATE</codeph> で、指定された場所にデータベースファイルが存在しない場合は、新たに作成することを示します。<codeph>openMode</codeph> が <codeph>SQLMode.READ</codeph> で、指定されたファイルが存在しない場合は、error イベントが送出されます。このパラメーターは、<codeph>reference</codeph> パラメーターが <codeph>null</codeph> の場合は無視されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>autoCompact</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>データベースの未使用領域を自動的に再要求するかどうかを示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。 デフォルトでは、削除されたデータが使用していた領域はデータベースファイルに残り、必要に応じて再使用されます。このパラメーターを <codeph>true</codeph> に設定すると、データベースが自動的に未使用領域を再要求します。データがデータベースに書き込まれるたびに追加の処理が必要になるため、これはパフォーマンスに悪影響を与える可能性があります。また、時間が経過するとデータベースのデータが断片化する原因にもなります。任意のタイミングでデータベースファイルの未使用領域をデータベースに強制的に再要求させ、データベースファイルの最適化を行うには、<codeph>compact()</codeph> メソッドを使用します。
	 
	 <p>このパラメーターは、<codeph>openMode</codeph> パラメーターが <codeph>SQLMode.READ</codeph> である場合には無視されます。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>1024</apiData><apiDesc>データベースのページサイズ（バイト単位）を示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。値は 2 の累乗で、512 以上 32768 以下でなければなりません。初期設定値は 1024 バイトです。この値は、任意のテーブルを作成する前にのみ設定できます。テーブルの作成後にこの値を変更しようとするとエラーが発生します。 
     
	 </apiDesc></apiParam><apiParam><apiItemName>encryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>データベースファイルの暗号化キー。<codeph>open()</codeph> の呼び出しがデータベースを作成する場合、データベースは暗号化されて、指定したキーがデータベースの暗号化キーとして使用されます。呼び出しによって暗号化されたデータベースが開かれる場合、値はそのデータベースの暗号化キーと一致している必要があり、一致しない場合はエラーが発生します。開かれるデータベースが暗号化されていない場合、または暗号化されないデータベースを作成する場合は、値として <codeph>null</codeph> （デフォルト）を指定する必要があります。指定しないとエラーが発生します。
	 
	 <p>有効な暗号化キーは 16 バイト長です。メモリ内データベースは暗号化できないので、<codeph>reference</codeph> パラメーターの値が <codeph>null</codeph> のときは、このパラメーターを <codeph>null</codeph> にする必要があります。</p>
	 
	 <p>暗号化されたデータベースを開く場合、指定した暗号化キーがデータベースの暗号化キーと一致していないと、SQLError 例外がスローされます。その場合、SQLError オブジェクトの <codeph>errorID</codeph> プロパティは 3138（"開かれたファイルはデータベースファイルではない"）です。</p>
	 
	 <p><codeph>encryptionKey</codeph> パラメーターは、AIR 1.5 以降で使用できます。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ファイルシステムの指定された場所にあるデータベースファイルを同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。このメソッドを使用してデータベースを開いた場合、データベースを作成および開く処理は、この SQLConnection インスタンスを使用して実行される他の処理（この SQLConnection インスタンスに関連付けられている SQLStatement インスタンスが実行するステートメントの実行など）と同様、<i>同期的</i>に実行されます。非同期的に処理を実行するには、<codeph>openAsync()</codeph> メソッドを使用してデータベース接続を開きます。
	 
	 <p>データベースが接続されたら、<xref href="SQLStatement.html">SQLStatement</xref> インスタンスを使用して SQL コマンドを実行します。データベースレベルの操作（トランザクションの開始と終了、スキーマ情報のロードなど）を実行するには、SQLConnection インスタンスを使用します。</p>
     
     <p><codeph>open()</codeph> メソッドを使用して接続されたデータベースには、自動的に "main" というデータベース名が割り当てられます。この名前は、SQL ステートメントで明示的にテーブル名を修飾する場合に使用でき、<codeph>[database-name].[table-name]</codeph> という書式を使用します。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link><link href="flash.data.xml#SQLMode"><linktext>flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:open_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:openAsync"><apiName>openAsync</apiName><shortdesc>
     ファイルシステムの指定された場所にあるデータベースファイルを非同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスに、開かれているデータベースへの接続が既にある場合（<codeph>connected</codeph> プロパティが <codeph>true</codeph> の場合）。
     
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> パラメーターに指定された値が、flash.filesystem.File インスタンスでない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>encryptionKey</codeph> 引数が <codeph>null</codeph> ではなく、その <codeph>length</codeph> が 16 バイトではない場合
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> パラメーターが <codeph>null</codeph> で、<codeph>encryptionKey</codeph> 引数が <codeph>null</codeph> ではない場合
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>無効な <codeph>pageSize</codeph> パラメーターが指定された場合。これにはモードが <codeph>SQLMode.READ</codeph> である場合にページサイズを渡すことも含まれます。
	 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>reference</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>開かれているデータベースファイルの場所です。この値は、flash.filesystem.File インスタンスでなければなりません。パラメーターの値が <codeph>null</codeph> の場合、メモリ内データベースが作成され、開かれます。
     
     </apiDesc></apiParam><apiParam><apiItemName>openMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>create</apiData><apiDesc>データベースを開く方法を示します。値は SQLMode クラスに定義されている任意の定数です。デフォルト値は <codeph>SQLMode.CREATE</codeph> で、指定された場所にデータベースファイルが存在しない場合は、新たに作成することを示します。<codeph>openMode</codeph> が <codeph>SQLMode.READ</codeph> で、指定されたファイルが存在しない場合は、error イベントが送出されます。このパラメーターは、<codeph>reference</codeph> パラメーターが <codeph>null</codeph> の場合は無視されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>open</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>autoCompact</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>データベースの未使用領域を自動的に再要求するかどうかを示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。 デフォルトでは、削除されたデータが使用していた領域はデータベースファイルに残り、必要に応じて再使用されます。このパラメーターを <codeph>true</codeph> に設定すると、データベースが自動的に未使用領域を再要求します。データがデータベースに書き込まれるたびに追加の処理が必要になるため、これはパフォーマンスに悪影響を与える可能性があります。また、時間が経過するとデータベースのデータが断片化する原因にもなります。任意のタイミングでデータベースファイルの未使用領域をデータベースに強制的に再要求させ、データベースファイルの最適化を行うには、<codeph>compact()</codeph> メソッドを使用します。
	 
	 <p>このパラメーターは、<codeph>openMode</codeph> パラメーターが <codeph>SQLMode.READ</codeph> である場合には無視されます。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>1024</apiData><apiDesc>データベースのページサイズ（バイト単位）を示します。このパラメーターは、新規データベースファイルを作成した場合か、テーブルが作成されていないデータベースファイルを開いた場合のみ有効です。値は 2 の累乗で、512 以上 32768 以下でなければなりません。初期設定値は 1024 バイトです。この値は、任意のテーブルを作成する前にのみ設定できます。テーブルの作成後にこの値を変更しようとするとエラーが発生します。 
     
	 </apiDesc></apiParam><apiParam><apiItemName>encryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>データベースファイルの暗号化キー。<codeph>openAsync()</codeph> の呼び出しがデータベースを作成する場合、データベースは暗号化されて、指定したキーがデータベースの暗号化キーとして使用されます。呼び出しによって暗号化されたデータベースが開かれる場合、値はそのデータベースの暗号化キーと一致している必要があり、一致しない場合はエラーが発生します。開かれるデータベースが暗号化されていない場合は、値として <codeph>null</codeph> （デフォルト）を指定する必要があります。指定しないとエラーが発生します。
	 
	 <p>有効な暗号化キーは 16 バイト長です。メモリ内データベースは暗号化できないので、このパラメーターを <codeph>null</codeph> にする必要があります（<codeph>reference</codeph> パラメーターの値が <codeph>null</codeph> の場合）。</p>
	 
	 <p>暗号化されたデータベースを開く場合、指定した暗号化キーがデータベースの暗号化キーと一致していないと、SQLErrorEvent が送出されます。イベントオブジェクトの <codeph>error</codeph> プロパティには、SQLError インスタンスが設定されています。その SQLError オブジェクトの <codeph>errorID</codeph> プロパティは 3138（"開かれたファイルはデータベースファイルではない"）です。</p>
	 
	 <p><codeph>encryptionKey</codeph> パラメーターは、AIR 1.5 以降で使用できます。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ファイルシステムの指定された場所にあるデータベースファイルを非同期接続で開くか、その場所に新しいデータベースファイルを作成して開くか、メモリ内データベースを作成して開きます。このメソッドを使用してデータベースを開いた場合、データベースを作成および開く処理は、この SQLConnection インスタンスを使用して実行される他の処理（この SQLConnection インスタンスに関連付けられている SQLStatement インスタンスが実行するステートメントの実行など）と同様、<i>非同期的</i>に実行されます。同期的に処理を実行するには、<codeph>open()</codeph> メソッドを使用してデータベース接続を開きます。
     
	 <p>データベースが接続されたら、<xref href="SQLStatement.html">SQLStatement</xref> インスタンスを使用して SQL コマンドを実行します。データベースレベルの操作（トランザクションの開始または終了、スキーマ情報の読み込み、その他の操作など）を実行するには、SQLConnection インスタンスを使用します。</p>
     
     <p><codeph>openAsync()</codeph> メソッドを使用して接続されたデータベースには、自動的に "main" というデータベース名が割り当てられます。この名前は、SQL ステートメントで明示的にテーブル名を修飾する場合に使用でき、<codeph>[database-name].[table-name]</codeph> という書式を使用します。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link><link href="flash.data.xml#SQLMode"><linktext>flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:openAsync_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:openAsync_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が失敗したときに送出されます。処理に失敗した場合、接続が開いたままになることはありません。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が失敗したときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:reencrypt"><apiName>reencrypt</apiName><shortdesc>
	 暗号化されたデータベースの暗号化キーを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>newEncryptionKey</codeph> の値が <codeph>null</codeph> の場合、またはその <codeph>length</codeph> が 16 バイトではない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>接続が開いていない場合、または開いているトランザクションがある場合。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newEncryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データベースの新しい暗号化キーが格納されている ByteArray。有効な暗号化キーは 16 バイト長です。
	 
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>reencrypt</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 暗号化されたデータベースの暗号化キーを変更します。このメソッドは、メインデータベース（<codeph>open()</codeph> メソッドまたは <codeph>openAsync()</codeph> メソッドを使用して接続されたデータベース）の暗号化キーのみを変更します。<codeph>reencrypt()</codeph> は、作成時に暗号化されたデータベースに対してのみ呼び出すことができます。いったん暗号化して作成したデータベースの暗号化を解除することはできません。同様に、暗号化しないで作成したデータベースを、後から暗号化することはできません。
	 
	 <p>再暗号化操作は、専用のトランザクションで実行します。再暗号化処理を中断した場合、データベースはトランザクションをロールバックし、暗号化キーは変更されません。</p> 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()"><linktext>attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:reencrypt_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:reencrypt_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が失敗したときに送出されます。
     
	 </apiDesc></adobeApiEventDetail><shortdesc>処理が失敗したときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
     
	EventDispatcher オブジェクトからリスナーを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>削除するリスナーオブジェクトです。
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">このパラメーターは、SWF コンテンツで使用される ActionScript 3.0 の表示リストアーキテクチャの表示オブジェクトに適用されます。</ph> <ph platform="actionscript">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階に対して登録されたかどうかを示します。 リスナーがキャプチャ段階だけでなくターゲット段階とバブリング段階にも登録されている場合は、<codeph>removeEventListener()</codeph> を 2 回呼び出して両方のリスナーを削除する必要があります。1 回は <codeph>useCapture()</codeph> を <codeph>true</codeph> に設定し、もう 1 回は <codeph>useCapture()</codeph> を <codeph>false</codeph> に設定する必要があります。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
     
	EventDispatcher オブジェクトからリスナーを削除します。対応するリスナーが EventDispatcher オブジェクトに登録されていない場合は、このメソッドを呼び出しても効果はありません。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:rollback"><apiName>rollback</apiName><shortdesc>
     begin() メソッドを使用して作成された既存のトランザクションをロールバックします。つまり、そのトランザクションの SQL ステートメントによる変更が、すべて破棄されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない（<codeph>connected</codeph> プロパティが <codeph>false</codeph>）の状態でメソッドを呼び出した場合、または現在開いているトランザクションが存在しない場合（<codeph>inTransaction</codeph> プロパティが <codeph>false</codeph> の場合）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>rollback</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>begin()</codeph> メソッドを使用して作成された既存のトランザクションをロールバックします。つまり、そのトランザクションの SQL ステートメントによる変更が、すべて破棄されます。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollback_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>処理が正しく完了したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>処理が正しく完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollback_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLConnection:autoCompact:get"><apiName>autoCompact</apiName><shortdesc>
     現在のデータベースが最初に作成されたときに、自動縮小が有効になっていたかどうかを示します（autoCompact パラメーターに指定されていた値で、データベースを作成した open() または openAsync() の呼び出しで指定したものです）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     現在のデータベースが最初に作成されたときに、自動縮小が有効になっていたかどうかを示します（<codeph>autoCompact</codeph> パラメーターに指定されていた値で、データベースを作成した <codeph>open()</codeph> または <codeph>openAsync()</codeph> の呼び出しで指定したものです）。このプロパティが <codeph>true</codeph> の場合、各書き込み処理の後に、未使用領域がデータベースファイルから自動的に削除され、データベースファイルのサイズが小さく保たれます。このプロパティが <codeph>false</codeph> の場合、削除されたデータが占有していた領域はデータベースファイルに残り、必要に応じて再使用されます。<codeph>autoCompact</codeph><codeph/> が false であっても、<codeph>compact()</codeph> メソッドを呼び出すことでデータベースに強制的に未使用領域を再要求させることができます。
     
     <p><codeph>connected</codeph> プロパティが <codeph>false</codeph> の場合、このプロパティは <codeph>false</codeph> に設定されます。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:cacheSize:get"><apiName>cacheSize</apiName><shortdesc>
     この接続に対するキャッシュサイズへのアクセスを提供します。これは、一度にメモリに確保される最大のデータベースディスクページ数を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態）で、このプロパティを設定しようとした場合、またはトランザクションが現在開いている場合（<codeph>inTransaction</codeph> プロパティが <codeph>true</codeph> の場合）。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     この接続に対するキャッシュサイズへのアクセスを提供します。これは、一度にメモリに確保される最大のデータベースディスクページ数を表します。各ページは、約 1.5 KB のメモリを使用します。この使用量は、<codeph>pageSize</codeph> パラメーター（データベースを作成した <codeph>open()</codeph> または <codeph>openAsync()</codeph> メソッド呼び出しで指定）で指定されている値によって異なります。デフォルトのキャッシュサイズは 2000 です。データベースの行を大量に変更する <codeph>UPDATE</codeph> 操作または <codeph>DELETE</codeph> 操作をアプリケーションで実行する場合は、キャッシュサイズを増やすことで処理速度が向上する場合があります。ただし、より多くのメモリが消費されます。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:columnNameStyle:get"><apiName>columnNameStyle</apiName><shortdesc>
     SELECT ステートメントの結果で、列名をどのように報告するかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>SQLConnection インスタンスがデータベースに接続されていない状態（<codeph>connected</codeph> プロパティが <codeph>false</codeph> の状態）で、このプロパティを設定しようとした場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     <codeph>SELECT</codeph> ステートメントの結果で、列名をどのように報告するかを示します。
     
     <p>SQLColumnNameStyle クラスで定義されている定数は、このプロパティに対して有効な値を表します。</p>
     
     <ul>
         <li><codeph>SQLColumnNameStyle.LONG</codeph> は、列名が <codeph>[table-name]_[column-name]</codeph> の形式で返されることを示します。</li>
         <li><codeph>SQLColumnNameStyle.SHORT</codeph> は、列名が <codeph>[column-name]</codeph> の形式に指定されていることを示します。同じ名前を持つ複数の列が存在する場合、その名前を持つプロパティが 1 つだけが結果オブジェクトに追加されます。</li>
         <li><codeph>SQLColumnNameStyle.DEFAULT</codeph> はデフォルト値です。この値が使用されている場合、結果の列名は、同じ列名を持つ <codeph>SELECT</codeph> ステートメントのテーブル数に従って形式が設定されます。<codeph>SELECT</codeph> ステートメントにテーブルが 1 つしか含まれない場合は、<codeph>[column-name]</codeph> という短い名前の形式が使用されます。また、<codeph>SELECT</codeph> ステートメントに複数のテーブルが結合して含まれ、同じ列名の存在により名前の競合が発生している場合は、それぞれの名前を識別できるように <codeph>[table-name]_[column-name]</codeph> という長い名前の形式が使用されます。</li>
     </ul>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnNameStyle"><linktext>flash.data.SQLColumnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:connected:get"><apiName>connected</apiName><shortdesc>
     SQLConnection インスタンスに、データベースファイルへの開いている接続があるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     SQLConnection インスタンスに、データベースファイルへの開いている接続があるかどうかを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:inTransaction:get"><apiName>inTransaction</apiName><shortdesc>
	 この接続が、現在トランザクションに含まれているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 この接続が、現在トランザクションに含まれているかどうかを示します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:lastInsertRowID:get"><apiName>lastInsertRowID</apiName><shortdesc>
     SQL INSERT ステートメントによって最後に作成された行識別子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     SQL <codeph>INSERT</codeph> ステートメントによって最後に作成された行識別子です。行識別子は、データベース内のテーブルの行を一意に識別するために使用されます。この値は、データベースによって頻繁に生成されます。
	 
     <p>データベースが接続されていない場合、または <codeph>INSERT</codeph> ステートメントが実行されていない場合、値はゼロになります。</p>
	 
	 <p>単一の SQL <codeph>INSERT</codeph> ステートメントの実行に対する行識別子は、SQLResult オブジェクトの <codeph>lastInsertRowID</codeph> プロパティから取得できます。このオブジェクトは、SQLStatement オブジェクトの <codeph>getResult()</codeph> メソッドから返されます（SQLStatement が <codeph>result</codeph> イベントを送出した後に呼び出された場合）。</p>
	 
	 <p>主キーと生成される行識別子の詳細については、「<xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref>」および「<xref href="../../localDatabaseSQLSupport.html#expressions">式</xref>」のセクション（どちらも付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID"><linktext>flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:pageSize:get"><apiName>pageSize</apiName><shortdesc>
     現在のデータベースが最初に作成されたときに指定された、データベースのページサイズ（バイト単位）を示します（データベースを作成した open() または openAsync() の呼び出しで pageSize パラメーターに指定されていた値）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     現在のデータベースが最初に作成されたときに指定された、データベースのページサイズ（バイト単位）を示します（<codeph>pageSize</codeph> パラメーターに指定されていた値で、データベースを作成した <codeph>open()</codeph> または <codeph>openAsync()</codeph> の呼び出しで指定します）。
     
     <p><codeph>connected</codeph> プロパティが <codeph>false</codeph> の場合、このプロパティの値は 0 になります。</p>
     
	 <p>データベースのページサイズは、<codeph>open()</codeph> メソッドまたは <codeph>openAsync()</codeph> メソッドを使用すると、データベースに最初のテーブルが作成される前までは変更できます。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:totalChanges:get"><apiName>totalChanges</apiName><shortdesc>
     データベースへの接続が開かれてからデータに加えられた変更数の合計が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     データベースへの接続が開かれてからデータに加えられた変更数の合計が含まれます。<codeph>INSERT</codeph>、<codeph>DELETE</codeph> および <codeph>UPDATE</codeph> の各ステートメントによって加えられた変更の追跡に加え、この値にはトリガーによる変更も含まれます。
	 
	 <p>データベース接続が閉じられると、この値は 0 にリセットされます。SQLConnection インスタンスがデータベースファイルに接続していない場合、値は 0 になります。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLResult/rowsAffected"><linktext>flash.data.SQLResult.rowsAffected</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLTriggerSchema"><apiName>SQLTriggerSchema</apiName><shortdesc>
 SQLTriggerSchema インスタンスは、データベースの特定のトリガーを示す情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLTriggerSchema インスタンスは、データベースの特定のトリガーを示す情報を提供します。このインスタンスには、トリガーの名前（<codeph>name</codeph> プロパティ）、関連付けられたテーブルの名前（<codeph>table</codeph> プロパティ）およびトリガーの作成に使用された SQL ステートメント （<codeph>sql</codeph> プロパティ）が含まれます。
 
 <p>データベースのトリガースキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph>null</codeph> または <codeph>SQLTriggerSchema</codeph> を <codeph>type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph>triggers</codeph> プロパティには、データベース内のトリガーを示す SQLTriggerSchema インスタンスの配列が含まれます。</p>
 
 <p>一般に、SQLTriggerSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLTriggerSchema:SQLTriggerSchema"><apiName>SQLTriggerSchema</apiName><shortdesc>
     SQLTriggerSchema インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>トリガーの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>トリガーの作成に使用された SQL です。
     
     </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>トリガーの関連付けられたテーブルの名前です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLTriggerSchema インスタンスを作成します。一般に、SQLTriggerSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLTriggerSchema:table:get"><apiName>table</apiName><shortdesc>
     このトリガーが定義されているテーブルの名前、またはビューの名前（トリガーがビューで定義されている場合）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このトリガーが定義されているテーブルの名前、またはビューの名前（トリガーがビューで定義されている場合）です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLStatement"><apiName>SQLStatement</apiName><shortdesc>
 SQLStatement インスタンスは、SQLConnection インスタンスを通して開かれているローカル SQL データベースに対して SQL ステートメントを実行するために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLStatement インスタンスは、SQLConnection インスタンスを通して開かれているローカル SQL データベースに対して SQL ステートメントを実行するために使用します。
 
 <p>SQLStatement インスタンスは、SQLConnection インスタンスを SQLStatement インスタンスの <codeph>sqlConnection</codeph> プロパティの値として設定することで、SQLConnection インスタンスにリンクされます。<codeph>text</codeph> プロパティには、実行する SQL ステートメントの実際のテキストが設定されます。必要に応じて、<codeph>parameters</codeph> プロパティを使用して SQL ステートメントのパラメーター値を指定し、<codeph>execute()</codeph> メソッドを呼び出してステートメントを実行します。</p>
 
 <p>ローカル SQL データベースでサポートされている SQL ダイアレクトの詳細な説明については、付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」を参照してください。</p>
 
 <p>非同期実行モードでは、<codeph>execute()</codeph> メソッドと <codeph>next()</codeph> メソッドがバックグラウンドで実行され、処理が完了または失敗すると、登録済みのイベントリスナーまたは指定の Responder インスタンスに対してランタイムがイベントを送出します。同期モードでは、メソッドはメインアプリケーションスレッドで実行され、データベースの処理が完了するまで、他のコードは実行されません。また、同期モードでメソッドが失敗すると、ランタイムは error イベントを送出せずに例外をスローします。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
 処理中にエラーが発生した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 処理中にエラーが発生した場合に送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLEvent.RESULT_result"><apiName>result</apiName><shortdesc>
 execute() メソッドまたは next() メソッド呼び出しの処理が正常に完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.RESULT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>execute()</codeph> メソッドまたは <codeph>next()</codeph> メソッド呼び出しの処理が正常に完了したときに送出されます。<codeph>result</codeph> イベントが送出されたら、<codeph>getResult()</codeph> メソッドを呼び出してステートメントの結果を取得できます。
 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>getResult()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLStatement:SQLStatement"><apiName>SQLStatement</apiName><shortdesc>
     SQLStatement インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>メインアプリケーションサンドボックスの外部にあるサンドボックスからコンストラクターが呼び出された場合。 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
     SQLStatement インスタンスを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLStatement:cancel"><apiName>cancel</apiName><shortdesc>
     このステートメントの実行をキャンセルします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     このステートメントの実行をキャンセルします。<codeph>SQLConnection.cancel()</codeph> と同様、このメソッドは、長時間実行されているクエリを停止する場合や、完了していないクエリをキャンセルする場合に使用します。ただし、<codeph>SQLConnection.cancel()</codeph> とは異なり、このメソッドは単一のステートメントだけをキャンセルします。ステートメントが現在実行中でない場合は、このメソッドを呼び出しても何も実行されません。
	 
	 <p><codeph>cancel()</codeph> 操作の完了に直接応答する形でイベントが送出されることはありません。ただし、<codeph>cancel()</codeph> 操作が完了してステートメントの実行がキャンセルされると、SQLStatement インスタンスは <codeph>error</codeph> イベントを送出し、ステートメントの実行（<codeph>execute()</codeph> または <codeph>next()</codeph> の呼び出し）が完了しなかったことを示します。または、<codeph>responder</codeph> パラメーター（<codeph>execute()</codeph> または <codeph>next()</codeph> 呼び出しのパラメーター）に値が指定されている場合は、指定されたフォルトハンドラーメソッドが呼び出されます。 いずれの場合も、リスナーに渡される SQLError インスタンスの <codeph>errorID</codeph> プロパティには、3118（処理の中止）という値が設定されます。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLStatement:clearParameters"><apiName>clearParameters</apiName><shortdesc>
     現在のパラメーター設定をすべてクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     現在のパラメーター設定をすべてクリアします。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/parameters"><linktext>パラメーター</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:execute"><apiName>execute</apiName><shortdesc>
     sqlConnection プロパティの SQLConnection オブジェクトに接続されているデータベースに対して、text プロパティの SQL を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>text</codeph> プロパティが <codeph>null</codeph> または空のストリング（<codeph>""</codeph>）の場合、<codeph>sqlConnection</codeph> プロパティが設定されていない場合、<codeph>sqlConnection</codeph> プロパティに割り当てられている SQLConnection インスタンスが接続されていない場合、またはステートメントが現在実行中の場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prefetch</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>ステートメントの <codeph>text</codeph> プロパティが <codeph>SELECT</codeph> ステートメントの場合、この値は、ステートメントから一度に返される行数を示します。デフォルト値は -1 で、すべての結果行が一度に返されることを示します。このパラメーターは <codeph>next()</codeph> メソッドと組み合わせて使用し、大きな結果セットを小さなデータのセットに分割します。これにより、最初の結果が迅速に返され、結果処理操作が分割されるので、ユーザーが体感するアプリケーションのパフォーマンスが向上します。
     
     <p>SQL ステートメントが <codeph>SELECT</codeph> クエリで、<codeph>prefetch</codeph> 引数に 0 より大きい値が指定されている場合、結果セット全体が返されるまで、または <codeph>SQLStatement.cancel()</codeph> メソッドまたは <codeph>SQLConnection.cancel()</codeph> メソッドが呼び出されるまで、ステートメントが実行されるものと見なされます。実行時は結果セットの行数が不明なので、ステートメントが完了したと見なされる前は、データベースカーソルが結果セットの最終行を越えて移動することに注意してください。<codeph>prefetch</codeph> 引数が <codeph>execute()</codeph> 呼び出しで指定されている場合、結果セットの行数の合計よりも 1 行以上多く要求（結果セットの行数よりも大きい <codeph>prefetch</codeph> 値の指定、または後続の <codeph>next()</codeph> メソッドの呼び出しによって要求）されていないと、結果として得られる SQLResult インスタンスの <codeph>complete</codeph> プロパティは <codeph>true</codeph> になりません。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>result</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>text</codeph> プロパティの SQL を、<codeph>sqlConnection</codeph> プロパティの SQLConnection オブジェクトに接続されているデータベースに対して実行します。
     
	 <p>非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> でない場合、操作の結果を処理するために呼び出されるメソッドは指定された Responder によって示されます。<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合は、操作が正しく完了すると <codeph>result</codeph> イベントが送出され、操作が失敗すると <codeph>error</codeph> イベントが送出されます。</p>
	 
	 <p><codeph>SELECT</codeph> ステートメントの結果行や、データベースによって生成された <codeph>INSERT</codeph> ステートメントの主キーなど、ステートメントの結果にアクセスするには、<codeph>getResult()</codeph> メソッドを呼び出します。同期モードでは、ステートメントの実行直後に、非同期モードでは、<codeph>result</codeph> イベントの送出時に、結果を確認できます。</p>
     
     <p>すべてのステートメントは、準備（コンパイル）しなければ実行できません。ステートメントは、SQLStatement インスタンスの <codeph>execute()</codeph> メソッドの初回呼び出し時に、ランタイムによって準備されます。ステートメントが準備されたら、<codeph>text</codeph> プロパティが変更されない限り、再度準備する必要はありません。パラメーター値を設定する場合は、ステートメントを再度準備する必要はありません。</p>
	 
     </apiDesc><example conref="examples\SQLStatement.execute.1.as"> 次の例は、SQLStatement の実行を示したものです。この例では、イベントリスナーを使用して、ステートメントの実行の完了または失敗を特定します。
<codeblock>
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example><example conref="examples\SQLStatement.execute.2.as"> 次の例は、SQLStatement の実行を示したものです。この例では、Responder オブジェクトを使用して、ステートメントの実行が完了または失敗したときに呼び出す関数を示します。
<codeblock>
var conn:SQLConnection;
var dbStatement:SQLStatement;
var employeeResponder:Responder;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    employeeResponder = new Responder(resultHandler, errorHandler);
    dbStatement.execute(-1, employeeResponder);
}

function resultHandler(result:SQLResult):void
{
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(error:SQLError):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>getResult()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:execute_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ステートメントの実行が正常に完了した場合、または <codeph>prefetch</codeph> 引数の値が指定され、<codeph>SELECT</codeph> ステートメントが 1 つ以上のデータの行を返した場合に送出されます。 
     
     </apiDesc></adobeApiEventDetail><shortdesc>ステートメントの実行が正常に完了した場合、または prefetch 引数の値が指定され、SELECT ステートメントが 1 つ以上のデータの行を返した場合。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:execute_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLStatement:getResult"><apiName>getResult</apiName><shortdesc>
     ステートメントの実行結果を含む SQLResult オブジェクトへのアクセスを提供します。この結果には、SELECT ステートメントの結果行と、実行されたすべてのステートメントのステートメント実行に関するその他の情報が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>SQLResult オブジェクトには、<codeph>execute()</codeph> メソッドまたは <codeph>next()</codeph> メソッドを呼び出した結果が含まれます。
     
     </apiDesc><apiOperationClassifier>flash.data:SQLResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ステートメントの実行結果を含む SQLResult オブジェクトへのアクセスを提供します。この結果には、<codeph>SELECT</codeph> ステートメントの結果行と、実行されたすべてのステートメントのステートメント実行に関するその他の情報が含まれます。非同期モードでは、<codeph>result</codeph> イベントが送出されるまで、結果情報を取得できません。
     
     <p><codeph>SELECT</codeph> ステートメントを、<codeph>execute()</codeph> メソッドがデフォルトの <codeph>prefetch</codeph> 引数（-1）を指定して呼び出されている場合に実行すると、返される SQLResult オブジェクトにはクエリの結果セット全体が含まれます。</p>
     
     <p><codeph>prefetch</codeph> 引数が、<codeph>execute()</codeph> メソッドまたは <codeph>next()</codeph> メソッドの呼び出しで指定されている場合、<codeph>getResult()</codeph> メソッドは結果の先入れ先出しキューとして動作します。<codeph>result</codeph> イベントが送出されるたびに、新しい SQLResult オブジェクトがキューに追加されます。<codeph>getResult()</codeph> メソッドが呼び出されるたびに、最も古い SQLResult オブジェクト（最初にキューに追加されたもの）が返され、キューから削除されます。キューに存在する SQLResult オブジェクトがなくなると、<codeph>getResult()</codeph> は <codeph>null</codeph> を返します。</p>
	 
	 <p><codeph>getResult()</codeph> を呼び出して削除されない限り、SQLResult オブジェクトはキューに残ることに注意してください。例えば、<codeph>execute()</codeph> メソッドを、<codeph>getResult()</codeph> を呼び出さずに繰り返し呼び出すと、各 <codeph>execute()</codeph> 呼び出しに関連付けられている SQLResult オブジェクトは、そのままキューに残ります。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link><link href="flash.data.xml#SQLStatement/result"><linktext>result</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:next"><apiName>next</apiName><shortdesc>
     SELECT ステートメントの結果セットの次の部分を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ステートメントが現在実行されていない状態（<codeph>executing</codeph> プロパティが <codeph>false</codeph>）でメソッドが呼び出された場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>同期実行モードで処理が失敗した場合。
     
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prefetch</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>ステートメントの <codeph>text</codeph> プロパティが <codeph>SELECT</codeph> ステートメントの場合、この値は、ステートメントから一度に返される行数を示します。デフォルト値は -1 で、すべての結果行が一度に返されることを示します。これにより、最初の結果が迅速に返され、結果処理操作が分割されるので、ユーザーが体感するアプリケーションのパフォーマンスが向上します。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>処理が成功または失敗した場合に呼び出されるメソッドを指定するオブジェクトです。<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合、実行が完了すると <codeph>result</codeph> イベントまたは <codeph>error</codeph> イベントが送出されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>SELECT</codeph> ステートメントの結果セットの次の部分を取得します。結果セットにこれ以上行がない場合、<codeph>result</codeph> イベントは送出されますが、SQLResult オブジェクトが新たに <codeph>getResult()</codeph> キューに追加されることはありません。
     
     <p>非同期実行モードでは、<codeph>responder</codeph> 引数が <codeph>null</codeph> でない場合、操作の結果を処理するために呼び出されるメソッドは指定された Responder によって示されます。<codeph>responder</codeph> 引数が <codeph>null</codeph> の場合は、操作が正しく完了すると <codeph>result</codeph> イベントが送出され、操作が失敗すると <codeph>error</codeph> イベントが送出されます。</p>
     
     <p>このメソッドは、ステートメントが実行中の場合にのみ呼び出せます。ステートメントが <codeph>SELECT</codeph> クエリで、<codeph>prefetch</codeph> 引数に 0 より大きい値が指定されている場合、結果セット全体が返されるまで、または <codeph>SQLStatement.cancel()</codeph> メソッドまたは <codeph>SQLConnection.cancel()</codeph> メソッドが呼び出されるまで、ステートメントが実行されるものと見なされます。</p>
     
     </apiDesc><example conref="examples\SQLStatement.next.1.as"> 次の例は、SQLStatement の実行例を示したものです。この例では、結果を最初に返すときに、結果セットの最初の 10 行だけを返すように明示的に示しています。このコードでは SQLResult の <codeph>complete</codeph> プロパティをチェックし、取得されていない行がある場合は、<codeph>next()</codeph> メソッドを呼び出します。
<codeblock>
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute(10);
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
        if (!result.complete)
        {
            dbStatement.next(10);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:next_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ステートメントの実行が正常に完了した場合、または <codeph>prefetch</codeph> 引数の値が指定され、<codeph>next()</codeph> 呼び出しが 1 つ以上のデータの行を返した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>ステートメントの実行が正常に完了した場合、または prefetch 引数の値が指定され、next() 呼び出しが 1 つ以上のデータの行を返した場合。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:next_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>非同期実行モードで処理が失敗した場合に送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>非同期実行モードで処理が失敗した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLStatement:executing:get"><apiName>executing</apiName><shortdesc>
     ステートメントが現在実行中かどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     ステートメントが現在実行中かどうかを示します。
     
     <p><codeph>execute()</codeph> が呼び出され、データベースから返されていない結果がある場合、このプロパティは true になります。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:itemClass:get"><apiName>itemClass</apiName><shortdesc>
     ステートメントの実行結果として返された各行で使用されているクラス（データ型）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Class</apiValueClassifier></apiValueDef><apiDesc>
     ステートメントの実行結果として返された各行で使用されているクラス（データ型）を示します。
     
     <p platform="javascript">このプロパティは、SWF ベースの AIR アプリケーションでのみ使用することを目的としています。JavaScript では使用できません（ActionScript を使用すると、このプロパティで使用できるカスタムクラスを定義できます）。</p>
     
     <p platform="actionscript">デフォルトでは、<codeph>SELECT</codeph> ステートメントから返される各行は Object インスタンスとして作成されます。このインスタンスでは、結果セットの列名がオブジェクトのプロパティの名前として使用され、各列の値が、それぞれに関連付けられているプロパティの値として使用されます。</p>
     
     <p platform="actionscript"><codeph>itemClass</codeph> プロパティでクラスを指定すると、この SQLStatement インスタンスで実行されている <codeph>SELECT</codeph> ステートメントから返される各行は、指定されたクラスのインスタンスとして作成されます。<codeph>itemClass</codeph> インスタンスの各プロパティには、そのプロパティと同じ名前を持つ列の値が割り当てられます。</p>
     
     <p platform="actionscript">このプロパティに割り当てるクラスは、パラメーターを必要としないコンストラクターを持っていなければなりません。また、このクラスは、<codeph>SELECT</codeph> ステートメントから返される各列に対応する、個別のプロパティを持っていなければなりません。<codeph>SELECT</codeph> リストの列と一致するプロパティ名が <codeph>itemClass</codeph> クラスにない場合は、エラーと見なされます。</p>
     
     </apiDesc><example conref="examples\SQLStatement.itemClass.1.as"> 次のコードは、<codeph>itemClass</codeph> プロパティを使用し、ランタイムに SQL <codeph>SELECT</codeph> ステートメントの結果からカスタムクラスのインスタンスを作成させる方法を示したものです。
<codeblock>
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.data.xml#SQLResult/data"><linktext>flash.data.SQLResult.data</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:parameters:get"><apiName>parameters</apiName><shortdesc>
     SQL ステートメントの text プロパティで指定されたパラメーターの値を追加する結合配列として機能します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
     SQL ステートメントの <codeph>text</codeph> プロパティで指定されたパラメーターの値を追加する結合配列として機能します。 配列のキーは、パラメーターの名前です。 名前が付いていないパラメーターがステートメントのテキストで指定されている場合は、パラメーターのインデックスがキーになります。
     
     <p>SQL ステートメントのテキストでは、パラメーターは「?」、「:」または「@」のいずれかの文字で示されます。</p>
     
     <p>「:」および「@」トークンは、名前の付いているパラメーターを示し、トークンに続く文字がパラメーターの名前として解釈されます。</p>
     
     <p>例えば、次の SQL ステートメントでは、<codeph>firstName</codeph> という名前のパラメーターを「:」文字で指定しています。</p>
     
     <pre>SELECT FROM employees WHERE firstName = :firstName</pre>
     
     <p>「?」トークンは、インデックス付けされた（番号が付けられた）パラメーターを示します。各パラメーターには、ステートメントのテキストの順序に従って、自動的にインデックスが与えられます。パラメーターのインデックス値は 0 から始まります。つまり、最初のパラメーターのインデックスは 0 になります。</p>
     
     <p>パラメーターは、SQL ステートメントの構築時に不明な値を、型指定して置き換える手段として使用されます。 データベースに渡される値の記憶クラスを保証するには、パラメーターを使用する以外に方法はありません。 パラメーターが使用されていない場合、関連付けられている列の型の類似性に基づいて、すべての値がテキスト表現から記憶クラスに変換されます。記憶クラスと列の類似性の詳細については、「<xref href="../../localDatabaseSQLSupport.html#dataTypes">データタイプサポート</xref>」のセクション（付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
     
     <p>パラメーターは、SQL インジェクションアタックと呼ばれる悪質な手法を防ぐセキュリティ手段としても使用されます。SQL インジェクションアタックでは、ユーザーがアクセス可能な場所（データ入力フィールドなど）に SQL コードを入力します。アプリケーションコードが、ユーザーの入力を SQL テキストと直接連結して SQL ステートメントを構築すると、ユーザーが入力した SQL コードがデータベースに対して実行されてしまいます。次のコードは、ユーザーの入力を SQL テキストに連結する例を示したものです。<b>この手法は使用しないでください</b>。</p>
     
     <codeblock platform="actionscript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     </codeblock>
     
     <codeblock platform="javascript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement = new air.SQLStatement();
     statement.text = sql;
     </codeblock>
     
     <p>ユーザーが入力した値をステートメントのテキストに連結するのではなく、ステートメントのパラメーターを使用することで、SQL インジェクションアタックを防ぐことができます。これは、パラメーター値が明示的に置き換え値として扱われ、そのままステートメントのテキストの一部とはならないからです。上記のコードは、次のように書き換えることが推奨されます。</p>
     
     <codeblock platform="actionscript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     <codeblock platform="javascript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement = new air.SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     <p>すべてのパラメーター値は、ステートメントを実行する前に設定する必要があります。 <codeph>parameters</codeph> 配列で指定されたパラメーター値は、<codeph>execute()</codeph> メソッドが呼び出されるとバインドされます（ステートメントのテキストと結合されます）。 <codeph>execute()</codeph> が呼び出されると、その後で値に加えられた変更は、実行中のステートメントには適用されません。ただし、その後で <codeph>execute()</codeph> を呼び出した場合は、変更された値が使用されます。ステートメントのテキストに、<codeph>parameters</codeph> プロパティで指定された値を持たないパラメーターが含まれている場合、結果はエラーになります。</p>
     
     <p><codeph>parameters</codeph> プロパティからすべてのパラメーター値をクリアするには、<codeph>clearParameters()</codeph> メソッドを使用します。</p>
     
	 </apiDesc><example conref="examples\SQLStatement.parameters.1.as"> 次の例は、<codeph>:firstName</codeph> という名前を付けられたパラメーターを SQL ステートメントで使用した例を示したものです。
<codeblock>
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = :firstName";
employees.parameters[":firstName"] = "Sam";
employees.execute();
</codeblock></example><example conref="examples\SQLStatement.parameters.2.as"> 次の例は、名前が付けられていないパラメーターを SQL ステートメントで使用した例を示したものです。
<codeblock>
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = ?";
employees.parameters[0] = "Sam";
employees.execute();
</codeblock></example></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/text"><linktext>text</linktext></link><link href="flash.data.xml#SQLStatement/clearParameters()"><linktext>clearParameters()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:sqlConnection:get"><apiName>sqlConnection</apiName><shortdesc>
     ステートメントの実行対象となっているデータベースへの接続を管理する SQLConnection オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.data:SQLConnection</apiValueClassifier><apiException><apiDesc>ステートメントの実行中に、このプロパティの値を変更しようとした場合。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     ステートメントの実行対象となっているデータベースへの接続を管理する SQLConnection オブジェクトです。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLStatement:text:get"><apiName>text</apiName><shortdesc>
     ステートメントの実際の SQL テキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>ステートメントの実行中に、<codeph>text</codeph> プロパティの値を変更しようとした場合。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     ステートメントの実際の SQL テキストです。
	 
     <p>テキストは、サポートされている任意の SQL にすることができます。ローカル SQL データベースでサポートされている SQL ダイアレクトの詳細な説明については、付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」を参照してください。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLMode"><apiName>SQLMode</apiName><shortdesc>
 このクラスには、SQLConnection.open() メソッドおよび SQLConnection.openAsync() メソッドの openMode パラメーターで有効な値を表す定数が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスには、<codeph>openMode</codeph> パラメーター（<codeph>SQLConnection.open()</codeph> メソッドおよび <codeph>SQLConnection.openAsync()</codeph> メソッドのパラメーター）の有効な値を表す定数が含まれます。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links><apiValue id="flash.data:SQLMode:CREATE"><apiName>CREATE</apiName><shortdesc>
	 接続を更新用に開くことと、指定のファイルが存在しない場合にはデータベースファイルを作成することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>create</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 接続を更新用に開くことと、指定のファイルが存在しない場合にはデータベースファイルを作成することを示します。このモードでは、データベースに対する読み取りおよび書き込み処理が許可されています。データベースが存在しない場合は、処理の完了前に作成されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:READ"><apiName>READ</apiName><shortdesc>
	 読み取り専用モードで接続を開くことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>read</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 読み取り専用モードで接続を開くことを示します。このモードでは、データベースへの書き込みは許可されません。データベースが存在しない場合、開く処理は失敗します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 接続を更新用に開くことと、指定のファイルが存在しない場合には新しいデータベースファイルを作成しないことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 接続を更新用に開くことと、指定のファイルが存在しない場合には新しいデータベースファイルを作成しないことを示します。このモードでは、データベースに対する読み取りおよび書き込み処理が許可されています。データベースが存在しない場合、開く処理は失敗します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:EncryptedLocalStore"><apiName>EncryptedLocalStore</apiName><shortdesc>
	EncryptedLocalStore クラスは、AIR アプリケーションの暗号化されたローカルデータストアにオブジェクトを設定するメソッドと、このデータストアからオブジェクトを取得するメソッドを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	EncryptedLocalStore クラスは、AIR アプリケーションの暗号化されたローカルデータストアにオブジェクトを設定するメソッドと、このデータストアからオブジェクトを取得するメソッドを提供します。永続的に暗号化されたローカルストアは、ユーザーのコンピューターにインストールされた各 AIR アプリケーションで使用できます。 これにより、他のアプリケーションまたはユーザーが解釈できない暗号化形式でユーザーのローカルハードドライブに保存されているデータを、保存および取得することができます。 暗号化された個別のローカルストアは各 AIR アプリケーションで使用され、各 AIR アプリケーションは、各ユーザーに対して暗号化された個別のローカルストアを使用します。 
	
	<p>暗号化されたローカルストアは、Web サービスのログイン資格情報など、保護する必要がある情報を保存するために使用できます。</p>
	
	<p>AIR Debug Launcher（ADL）でアプリケーションをテストする場合、テスト対象のアプリケーションはインストール済みの AIR アプリケーションで使用されているものとは異なる暗号化されたローカルストアを使用します。</p>
	
	<p>AIR では、Windows<sup>®</sup> では DPAPI、Mac<sup>®</sup> OS<sup>®</sup> では KeyChain、Linux<sup>®</sup> では KeyRing または KWallet を使用して、暗号化されたローカルストアを各アプリケーションおよびユーザーに関連付けます。暗号化されたローカルストアでは、128 ビットの AES-CBC 暗号化を使用します。</p>
	
	<p>暗号化されたローカルストアの情報は、application セキュリティサンドボックス内の AIR アプリケーションコンテンツでのみ使用できます。 </p>
	
	<p>暗号化されたローカルストアのアイテムは、ストリングで識別されます。アイテムは、すべてバイト配列データとして保存されます。</p>
	
	<p>保存されるデータが 10 MB を超える場合、暗号化されたローカルストアの実行が低速化する場合があります。</p>
	
	<p>AIR アプリケーションをアンインストールする場合、アンインストーラーは暗号化されたローカルストアに保存されたデータを削除しません。</p>
	
	<p>暗号化されたローカルストアのデータは、ユーザーのアプリケーションデータディレクトリのサブディレクトリに置かれます。このサブディレクトリのパスは Adobe/AIR/ELS/ の後ろにアプリケーション ID が続きます。</p>
	
	</apiDesc><example conref="examples\EncryptedLocalStore.1.as"> 次のコードは、暗号化されたローカルストアにストリングを保存して、そのストリングを取得し、削除します。
<codeblock>
var str:String = "Bob";
var bytes:ByteArray = new ByteArray();
bytes.writeUTFBytes(str);
EncryptedLocalStore.setItem("firstName", bytes);

var storedValue:ByteArray = EncryptedLocalStore.getItem("firstName");
trace(storedValue.readUTFBytes(storedValue.length)); // "Bob"

EncryptedLocalStore.removeItem("firstName");
</codeblock></example></apiClassifierDetail><apiOperation id="flash.data:EncryptedLocalStore:getItem"><apiName>getItem</apiName><shortdesc>
		指定された名前を持つ、暗号化されたローカルストアのアイテムのデータを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>name</codeph> 値は、<codeph>null</codeph> または空の文字列です。
		
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>ByteArray データです。指定された<codeph>名前</codeph>に対するデータが存在しない場合、メソッドは <codeph>null</codeph> を返します。
		
		</apiDesc><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>暗号化されたローカルストアのアイテムの名前です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		指定された名前を持つ、暗号化されたローカルストアのアイテムのデータを返します。指定された名前でアイテムが見つからない場合、このメソッドは <codeph>null</codeph> を返します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:removeItem"><apiName>removeItem</apiName><shortdesc>
		暗号化されたローカルストアから、指定された名前のアイテムを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>name</codeph> 値は、<codeph>null</codeph> または空の文字列です。
		
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>暗号化されたローカルストアのアイテムの名前です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		暗号化されたローカルストアから、指定された名前のアイテムを削除します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:reset"><apiName>reset</apiName><shortdesc>
		すべてのデータを削除して、暗号化されたローカルストア全体をクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		すべてのデータを削除して、暗号化されたローカルストア全体をクリアします。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:setItem"><apiName>setItem</apiName><shortdesc>
		指定された名前で、所定の ByteArray データにアイテムを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>name</codeph> 値は、<codeph>null</codeph> または空の文字列です。
		
		<p>デフォルトでは、AIR アプリケーションは別のアプリケーションの暗号化されたローカルストアを読み取ることはできません。<codeph>stronglyBound</codeph> 設定はアプリケーションビット内のデータに追加のバインディングを提供します。このバインディングによって、攻撃側のアプリケーションが、攻撃される側のアプリケーションの発行者 ID を乗っ取ってアプリケーションの暗号化されたローカルストアを読み取ることはできなくなります。</p> 
		
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>暗号化されたローカルストアのアイテムの名前です。
		
		</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データです。
		
		</apiDesc></apiParam><apiParam><apiItemName>stronglyBound</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><codeph>true</codeph> に設定された場合、保存されたアイテムは AIR アプリケーションの発行者 ID に対してだけでなく、そのアプリケーションの電子署名およびビット列（アプリケーションディレクトリの内容）に対して厳密にバインドされます。このアイテムに対して <codeph>getItem()</codeph> をその後で呼び出した場合、呼び出し元の AIR アプリケーションのビットが保存する側のアプリケーションのビットと一致しない場合はランタイム例外になります。アプリケーションを更新すると、更新されたアプリケーションは、暗号化されたローカルストアに以前に書き込まれたデータに厳密にバインドされているデータを読み取ることができません。 
		
		<p><codeph>stronglyBound</codeph> パラメーターが <codeph>false</codeph> に設定されている場合（デフォルト）、発行者 ID が一定であればアプリケーションはデータを読み取れます。アプリケーションのビット列は変化してもよく（発行者による署名が必要）、データを格納したアプリケーションのビット列とまったく同じである必要はありません。</p>
		
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		指定された名前で、所定の ByteArray <codeph>データ</codeph>にアイテムを設定します。
		
		</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.data:SQLIndexSchema"><apiName>SQLIndexSchema</apiName><shortdesc>
 SQLIndexSchema インスタンスは、データベースの特定のインデックスを示す情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLIndexSchema インスタンスは、データベースの特定のインデックスを示す情報を提供します。使用できる情報には、関連付けられたテーブルの名前（<codeph>table</codeph> プロパティ）、インデックスの作成に使用した SQL ステートメント（<codeph>sql</codeph> プロパティ）およびインデックスの名前（<codeph>name</codeph> プロパティ）が含まれます。
 
 <p>データベースのインデックススキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph>null</codeph> または <codeph>SQLIndexSchema</codeph> を <codeph>type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph>indices</codeph> プロパティには、データベース内のインデックスを示す SQLIndexSchema インスタンスの配列が含まれます。</p>
 
 <p>一般に、SQLIndexSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLIndexSchema:SQLIndexSchema"><apiName>SQLIndexSchema</apiName><shortdesc>
     SQLIndexSchema インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>インデックスの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>このインデックスの作成に使用された SQL ステートメントです。
     
     </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>このインデックスが関連付けられるテーブルの名前です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLIndexSchema インスタンスを作成します。一般に、SQLIndexSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/indices"><linktext>flash.data.SQLSchemaResult.indices</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLIndexSchema:table:get"><apiName>table</apiName><shortdesc>
     このインデックスが関連付けられるテーブルの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このインデックスが関連付けられるテーブルの名前です。 
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLTableSchema"><apiName>SQLTableSchema</apiName><shortdesc>
 SQLTableSchema インスタンスは、データベースの特定のテーブルを示す情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLTableSchema インスタンスは、データベースの特定のテーブルを示す情報を提供します。このインスタンスには、テーブルの名前（<codeph>name</codeph> プロパティ）、テーブルの作成に使用された SQL ステートメント（<codeph>sql</codeph> プロパティ）およびテーブルの列に関する情報（<codeph>columns</codeph> プロパティ）が含まれます。
 
 <p>データベースのテーブルスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを使用してスキーマ情報をロードします。このとき、<codeph>null</codeph> または <codeph>SQLTableSchema</codeph> を <codeph>type</codeph> 引数の値に使用します。結果として得られた SQLSchemaResult インスタンスの <codeph>tables</codeph> プロパティには、データベース内のテーブルを表す SQLTableSchema インスタンスの配列が含まれます。</p>
 
 <p>一般に、SQLTableSchema インスタンスは開発者のコードでは直接作成されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema"><linktext>flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLTableSchema:SQLTableSchema"><apiName>SQLTableSchema</apiName><shortdesc>
     SQLTableSchema インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>関連付けられたデータベースの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>テーブルの名前です。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>テーブルの作成に使用された SQL ステートメントです。
     
     </apiDesc></apiParam><apiParam><apiItemName>columns</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>このテーブルの列を示す SQLColumnSchema インスタンスの配列です。
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLTableSchema インスタンスを作成します。一般に、SQLTableSchema コンストラクターは開発者のコードでは直接呼び出されません。データベースのスキーマ情報を取得するには、<codeph>SQLConnection.loadSchema()</codeph> メソッドを呼び出します。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/tables"><linktext>flash.data.SQLSchemaResult.tables</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLTableSchema:columns:get"><apiName>columns</apiName><shortdesc>
     このテーブルの列のスキーマ情報を含む SQLColumnSchema インスタンスの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     このテーブルの列のスキーマ情報を含む SQLColumnSchema インスタンスの配列です。列情報を結果から除外するように <codeph>SQlConnection.loadSchema()</codeph> 呼び出しで示されている場合、<codeph>columns</codeph> プロパティは空の配列（<codeph>length</codeph> プロパティが 0 の配列）になります。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnSchema"><linktext>flash.data.SQLColumnSchema</linktext></link><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLResult"><apiName>SQLResult</apiName><shortdesc>
 SQLResult クラスは、SQL ステートメント（SQLStatement インスタンス）の実行に応答して返されたデータへのアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLResult クラスは、SQL ステートメント（SQLStatement インスタンス）の実行に応答して返されたデータへのアクセスを提供します。
 
 <p>SQL ステートメントの SQLResult インスタンスには、<codeph>SQLStatement.getResult()</codeph> メソッドを呼び出してアクセスします。また、<codeph>SQLStatement.execute()</codeph> または <codeph>SQLStatement.next()</codeph> の呼び出しで指定された Responder インスタンスの結果ハンドラーに渡す引数としてアクセスすることもできます。一般に、SQLResult インスタンスは開発者のコードでは直接作成されません。</p>
 
 <p>SQLResult オブジェクトは、<codeph>SELECT</codeph> ステートメントから返されるデータの行へのアクセス（<codeph>data</codeph> プロパティを使用）、<codeph>INSERT</codeph> ステートメントの行識別子情報の取得（<codeph>lastInsertRowID</codeph> プロパティを使用）、<codeph>INSERT</codeph>、<codeph>UPDATE</codeph> または <codeph>DELETE</codeph> ステートメントの影響を受ける行数の特定（<codeph>rowsAffected</codeph> プロパティを使用）、または取得されていない <codeph>SELECT</codeph> の結果行が他にもあるかどうかの特定（<codeph>complete</codeph> プロパティを使用）のために使用します。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link></related-links><apiConstructor id="flash.data:SQLResult:SQLResult"><apiName>SQLResult</apiName><shortdesc>
     SQLResult インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>ステートメントの実行から返される行の配列です。ステートメントが行を返さない場合、この値は null になります。
     
     </apiDesc></apiParam><apiParam><apiItemName>rowsAffected</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>実行されたステートメントの影響を受ける行数を示します。
     
     </apiDesc></apiParam><apiParam><apiItemName>complete</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>取得できる行が他にもあるか、すべてのデータが返されているかを示します。
     
     </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>ステートメントが SQL <codeph>INSERT</codeph> 操作の場合、行に対する新しい一意の識別子になります。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SQLResult インスタンスを作成します。一般に、SQLResult コンストラクターは開発者のコードでは直接呼び出されません。特定の SQLStatement インスタンスに関連付けられている SQLResult を取得するには、そのインスタンスの <codeph>getResult()</codeph> メソッドを呼び出します。<codeph>execute()</codeph> メソッドまたは <codeph>next()</codeph> メソッドの呼び出しで Responder インスタンスが指定されている場合、SQLResult インスタンスは、引数として結果ハンドラー関数にも渡されます。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLResult:complete:get"><apiName>complete</apiName><shortdesc>
     ステートメント実行から結果データがすべて返されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     ステートメント実行から結果データがすべて返されているかどうかを示します。
     
     <p>ステートメントが 1 つまたは複数の行を返す場合、このプロパティはすべての行が返されているかどうかを示します。SQLStatement オブジェクトの <codeph>execute()</codeph> メソッドが、<codeph>prefetch</codeph> 引数値を指定して呼び出されている場合、指定された行数の結果データだけが SQLResult オブジェクトの <codeph>data</codeph> プロパティに返されます。その後 <codeph>SQLStatement.next()</codeph> を呼び出すと、さらに別のデータを使用できるようになります。このプロパティは、最終的な結果が返された時期を特定するために使用します。</p>
     
     <p>実行時は行数が不明なので、ステートメントが完了したと見なされる前は、データベースカーソルが最終行を越えて移動することに注意してください。<codeph>SQLStatement.execute()</codeph> ステートメントが、<codeph>prefetch</codeph> 引数を指定して呼び出されている場合、結果セットの合計行数よりも 1 行以上多く要求しないと、結果として得られる SQLResult インスタンスの <codeph>complete</codeph> プロパティは <codeph>true</codeph> になりません。</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:data:get"><apiName>data</apiName><shortdesc>
     ステートメント実行、具体的には SQL SELECT ステートメントが実行された場合に、結果として返されるデータです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     ステートメント実行、具体的には SQL <codeph>SELECT</codeph> ステートメントが実行された場合に、結果として返されるデータです。
     
     <p>ステートメントが 1 つまたは複数の行を返す場合、このプロパティは、結果データの行を示すオブジェクトの配列になります。配列の各オブジェクトにはプロパティ名があり、このプロパティ名は、結果データセットの列名に対応します。</p>
	 
	 <p>例えば、以下に示す SQL の <codeph>SELECT</codeph> ステートメントを実行するとします。</p>
	 
	 <codeblock>
	 SELECT lastName, firstName
	 FROM employees
	 </codeblock>
	 
	 <p>例えば、<codeph>employees</codeph> テーブルに 10 行含まれている場合、<codeph>SQLResult.data</codeph> プロパティは、10 エレメントを持つ配列になります。各エレメントは、2 つのプロパティ（<codeph>lastName</codeph> および <codeph>firstName</codeph>）を持つオブジェクトです。</p>
	 
	 <p>複雑な結果列（集計関数など）を含む <codeph>SELECT</codeph> ステートメントを使用する場合、状況はより複雑になります。例えば、以下の SQL を実行するとします。</p>
	 
	 <codeblock>
	 SELECT departmentId, SUM(salary)
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p>このステートメントの結果では、<codeph>data</codeph> 配列の各オブジェクトは、<codeph>departmentId</codeph> および <codeph>SUM(salary)</codeph> という名前の 2 つのプロパティを持っています。ただし、「SUM(salary)」は有効な識別子ではありません。集計やその他の関数を含む計算列を使用している場合は、SQL ステートメントでその計算列のエイリアス（別名）を指定します。エイリアスは、結果データオブジェクトのプロパティ名として使用されます。例えば、前述のステートメントでこの方法を使用すると次のようになります。</p>
	 
	 <codeblock>
	 SELECT departmentId, SUM(salary) AS salarySubtotal
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p>このステートメントの <codeph>data</codeph> 配列では、結果オブジェクトは <codeph>departmentId</codeph> および <codeph>salarySubtotal</codeph> という名前の 2 つのプロパティを持っています。</p>
	 
	 <p>結果セットに含まれている行数や列数に関わらず、<codeph>data</codeph> プロパティは常に配列になります。例えば、以下の <codeph>SELECT</codeph> ステートメントの結果は、1 行 1 列構成で、実質的に値は 1 つです。</p>
	 
	 <codeblock>
	 SELECT COUNT(~~) AS numEmployees
	 FROM employees
	 </codeblock>
	 
	 <p>クエリを実行すると、<codeph>data</codeph> プロパティには 1 つのエレメントを持つ配列オブジェクトが追加されます。このエレメントは、単一プロパティ <codeph>numEmployees</codeph> を持つオブジェクトです。</p>
	 
	 <p>結果データで列名が重複している場合、例えば、異なる 2 つのテーブルにそれぞれ <codeph>id</codeph> 列が含まれていて、この 2 つの列名が <codeph>SELECT</codeph> ステートメントで使用されている場合、重複した列名に対するプロパティ名は、<codeph>SQLConnection.columnNameStyle</codeph> プロパティの値に基づいて設定されます。デフォルトでは、各列名がプロパティ名として使用されます。ただし、結果セットに同名の列が複数ある場合は、長い名前の形式（<codeph>[table-name]_[column-name]</codeph>）が一意の列名として使用されます。この動作は、<codeph>SQLConnection.columnNameStyle</codeph> プロパティを設定することによって変更できます。</p>
	 
	 <p>デフォルトでは、<codeph>data</codeph> 配列のオブジェクトは Object インスタンスです。ただし、<codeph>SQLStatement.itemClass</codeph> プロパティの値をクラスに設定すると、<codeph>data</codeph> 配列エレメントは、そのクラスのインスタンスとして作成されます。結果データセットの各列に対応して、<codeph>itemClass</codeph> クラスには、結果データセットの列名と正確に一致する名前を持つプロティが必要です。</p> 
	 
	 <p>ステートメントがデータを返さない場合、このプロパティは <codeph>null</codeph> になります。これは、<codeph>SELECT</codeph> ステートメント以外のステートメントや、0 行を返す <codeph>SELECT</codeph> ステートメントの場合に該当します。</p>
     
	 </apiDesc><example conref="examples\SQLStatement.itemClass.1.as"> 次のコードは、<codeph>itemClass</codeph> プロパティを使用し、ランタイムに SQL <codeph>SELECT</codeph> ステートメントの結果からカスタムクラスのインスタンスを作成させる方法を示したものです。
<codeblock>
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>SQLConnection.columnNameStyle</linktext></link><link href="flash.data.xml#SQLStatement/itemClass"><linktext>SQLStatement.itemClass</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:lastInsertRowID:get"><apiName>lastInsertRowID</apiName><shortdesc>
     SQL INSERT ステートメントによって最後に生成された行識別子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     SQL <codeph>INSERT</codeph> ステートメントによって最後に生成された行識別子です。
	 
     <p>実行されたステートメントが <codeph>INSERT</codeph> ステートメントでない場合、この値は 0 になります。</p>
	 
	 <p>行識別子は、データベース内のテーブルの行を一意に識別するために使用されます。この値は、データベースによって頻繁に生成されます。</p>
	 
	 <p>主キーと生成される行識別子の詳細については、「<xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref>」および「<xref href="../../localDatabaseSQLSupport.html#expressions">式</xref>」のセクション（どちらも付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID"><linktext>flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:rowsAffected:get"><apiName>rowsAffected</apiName><shortdesc>
     操作によって影響を受ける行数を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     操作によって影響を受ける行数を示します。<codeph>INSERT</codeph>、<codeph>UPDATE</codeph> または <codeph>DELETE</codeph> ステートメントによって直接指定されている変更だけがカウントされます。
     
     <p>トリガーによる間接的な変更はカウントされません。トリガーによる変更も含め、変更の合計数を特定するには、<codeph>SQLConnection.totalChanges</codeph> プロパティを使用します。</p>
	 
	 <p>関連する SQL 操作が <codeph>DELETE</codeph> ステートメントで、<codeph>WHERE</codeph> 句が記述されていない（ステートメントによってテーブルの全行を削除する）場合、削除された行数にかかわらず、<codeph>rowsAffected</codeph> プロパティは常に 0 になります。削除された行数を知る必要がある場合は、<codeph>WHERE</codeph> 句として <codeph>WHERE 1 = 1</codeph> を記述します。この場合、すべての行が削除され、削除された行数が正確に <codeph>rowsAffected</codeph> プロパティに反映されます。ただし、削除される行数によっては、この方法によってステートメントのパフォーマンスに悪影響を与える場合があります。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/totalChanges"><linktext>flash.data.SQLConnection.totalChanges</linktext></link></related-links></apiValue></apiClassifier></apiPackage>