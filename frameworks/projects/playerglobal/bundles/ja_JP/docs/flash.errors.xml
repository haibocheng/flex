<?xml version="1.0"?>
<apiPackage id="flash.errors"><apiName>flash.errors</apiName><apiDetail/><apiClassifier id="flash.errors:ScriptTimeoutError"><apiName>ScriptTimeoutError</apiName><shortdesc>
	ScriptTimeoutError 例外は、スクリプトのタイムアウト間隔が経過した場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	ScriptTimeoutError 例外は、スクリプトのタイムアウト間隔が経過した場合にスローされます。スクリプトのタイムアウト間隔は 15 秒です。<ph outputclass="flexonly"><codeph>mx:Application</codeph> タグに追加できる XML 属性が 2 つあります。1 つは <codeph>scriptTimeLimit</codeph>（スクリプトがタイムアウトになるまでの秒数）で、もう 1 つは <codeph>scriptRecursionLimit</codeph>（許可される再帰呼び出しの深度）です。</ph> 
	
	<p>2 つの ScriptTimeoutError 例外がスローされます。最初の例外は、明確にキャッチして終了できます。例外ハンドラーがない場合は、不明な例外によって実行が終了します。2 番目の例外は、スローされてもユーザーコードではキャッチされず、不明な例外のハンドラーが実行されます。この例外をキャッチできないのは、Flash<sup>®</sup> Player が無期限にハングしないようにするためです。</p>
	
 	</apiDesc><example conref="examples\ScriptTimeoutErrorExample.as"> 次の例では、サンプル ScriptTimeoutErrorExample クラスを使用して、スクリプトのタイムアウトが生じた場合に生成されるエラーを示します。これを行うには、以下の手順を実行します。
 <ol>
     <li>Boolean 型の <codeph>keepLooking</codeph> プロパティが宣言されます。</li>
     <li>コンストラクターが <codeph>lockMachine()</codeph> メソッドをエラー処理コードセグメント内で呼び出します。このコードセグメントは ScriptTimeoutError オブジェクトをキャッチするものです。  </li>
     <li><codeph>lockMachine()</codeph> メソッドには無限 <codeph>while</codeph> ループが含まれています。</li>
     <li>しばらくすると、ScriptTimeoutError がスローされます。コンストラクターはそれをキャッチし、<codeph>trace</codeph> ステートメントを使用してエラーメッセージを出力し、<codeph>keepLooking</codeph> のブール値を <codeph>false</codeph> にリセットします。これにより、<codeph>while</codeph> ループ（<codeph>lockMachine()</codeph> 内）が終了します。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.ScriptTimeoutError;

    public class ScriptTimeoutErrorExample extends Sprite {        
        private var keepLooping:Boolean = true;

        public function ScriptTimeoutErrorExample() {
            try {
                lockMachine();
            } 
            catch(e:ScriptTimeoutError) {
                trace(e);    // ScriptTimeoutError: Error #1502: A script has executed for longer than 15 seconds
                keepLooping = false;
            }
        }
        
        private function lockMachine():void {
            while(keepLooping){        
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:ScriptTimeoutError:flash.errors:ScriptTimeoutError"><apiName>ScriptTimeoutError</apiName><shortdesc>
		新しい ScriptTimeoutError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		新しい ScriptTimeoutError オブジェクトを作成します。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:SQLError"><apiName>SQLError</apiName><shortdesc>
 SQLError インスタンスは、失敗した操作に関する詳細な情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLError インスタンスは、失敗した操作に関する詳細な情報を提供します。
 
 <p>非同期実行モードでは、SQL データベース操作でエラーが発生すると、SQLConnection インスタンスまたは SQLStatement インスタンスによって SQLErrorEvent オブジェクトが送出されます。SQLError インスタンスの形式でのエラー情報には、SQLErrorEvent オブジェクトの <codeph>error</codeph> プロパティからアクセスできます。</p>
 
 <p>同期実行モードでは、SQL データベース操作でエラーが発生すると、SQLConnection インスタンスまたは SQLStatement インスタンスによって SQLError 例外がスローされます。この例外を処理するには、<codeph>try..catch</codeph> ブロック内にエラースローコードを記述します。</p>
 
 <p>このクラスは、エラーの詳細（発生したエラーの特定のタイプを指定）、エラーの詳細を示すテキストメッセージ、およびエラーの原因となった操作を含むプロパティを示します。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#SQLErrorEvent"><linktext>flash.events.SQLErrorEvent</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><apiConstructor id="flash.errors:SQLError:SQLError"><apiName>SQLError</apiName><shortdesc>
     スロー可能、または SQLErrorEvent インスタンスの error プロパティで使用可能な SQLError インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>このエラーの原因となった特定の操作を示します。この値は、SQLErrorOperation クラスで定義されている定数の 1 つです。
     
     </apiDesc></apiParam><apiParam><apiItemName>details</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>現在のエラーの詳細です。
     
     </apiDesc></apiParam><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>発生したエラーの説明です。
     
     </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>特定のエラーメッセージに関連付けられた参照番号です。
     
     </apiDesc></apiParam><apiParam><apiItemName>detailID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>詳細なエラーメッセージに関連付けられた参照番号です。
     
     </apiDesc></apiParam><apiParam><apiItemName>detailArgs</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>ロケール固有の詳細なエラーメッセージを構築するために使用できる代入値の順序付き配列です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     スロー可能、または SQLErrorEvent インスタンスの <codeph>error</codeph> プロパティで使用可能な SQLError インスタンスを作成します。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.errors.xml#SQLErrorOperation"><linktext>flash.errors.SQLErrorOperation</linktext></link></related-links></apiConstructor><apiOperation id="flash.errors:SQLError:toString"><apiName>toString</apiName><shortdesc>
     
	
	デフォルトでは "Error" というストリングを返します。Error.message プロパティが定義されている場合は、その値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーメッセージです。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     
	
	デフォルトでは <codeph>"Error"</codeph> というストリングを返します。<codeph>Error.message</codeph> プロパティが定義されている場合は、その値を返します。
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.errors:SQLError:detailArguments:get"><apiName>detailArguments</apiName><shortdesc>
      ロケール固有の詳細なエラーメッセージを作成するために使用できる String 値の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
      ロケール固有の詳細なエラーメッセージを作成するために使用できる String 値の配列です。
      
      <p>このプロパティには、<codeph>details</codeph> プロパティのエラーメッセージに代入される、エラーに関連する特定のデータベースオブジェクトまたはオブジェクト（テーブル名、列名など）を示す単一または複数の値が格納されます。 例えば、アプリケーションで次の <codeph>details</codeph> プロパティのエラーメッセージとともにエラーが発生した場合を考えます。</p>
	  
	  <codeblock>there is already another table or index with this name: 'my_table'</codeblock>
	  
	  <p>この場合、SQLError インスタンスの <codeph>detailArguments</codeph> プロパティには、値 <codeph>"my_table"</codeph>を持つ単一エレメントが含まれます。</p>
	  
	  <p>アプリケーションで、<codeph>detailID</codeph> プロパティを使用することで特定の <codeph>details</codeph> エラーメッセージを識別できます。アプリケーションで、エンドユーザーに対し、エンドユーザーのロケールの言語の代替テキストを表示できます。<codeph>detailArguments</codeph> 配列の引数値を、エラーメッセージストリング内の適切な位置に代入できます。これは、特定のロケールのエンドユーザーに、このエラーに対応する <codeph>details</codeph> プロパティのエラーメッセージを直接表示するアプリケーションで役立ちます。</p>
      
      <p> <codeph>detailID</codeph> の値と、それに対応する英語のエラー詳細メッセージおよび引数のリストについては、付録「<xref href="../../localDatabaseSQLErrorDetails.html">SQL error detail messages, ids, and arguments </xref>」を参照してください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.errors:SQLError:detailID:get"><apiName>detailID</apiName><shortdesc>
      特定の詳細なメッセージに関連付けられた参照番号です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
      特定の詳細なメッセージに関連付けられた参照番号です。この値は、<codeph>details</codeph> プロパティのエラーメッセージのロケール固有の変換をサポートするために使用されます。
      
      <p>このプロパティは、<codeph>details</codeph> メッセージの一意の識別子を提供します（固有の <codeph>errorID</codeph> を持つ各種のエラーに対して、固有の <codeph>detailID</codeph> 値を持つ複数のエラーがあります）。この識別子と共に <codeph>detailArguments</codeph> 配列で単一または複数の値を使用することで、アプリケーションでロケール固有の詳細なエラーメッセージを提供できます。これは、特定のロケールのエンドユーザーに、このエラーに対応する <codeph>details</codeph> プロパティのエラーメッセージを直接表示するアプリケーションで役立ちます。</p>
      
      <p> <codeph>detailID</codeph> の値と、それに対応する英語のエラー詳細メッセージおよび引数のリストについては、付録「<xref href="../../localDatabaseSQLErrorDetails.html">SQL error detail messages, ids, and arguments </xref>」を参照してください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.errors:SQLError:details:get"><apiName>details</apiName><shortdesc>
     現在のエラーの詳細です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     現在のエラーの詳細です。発生したエラーに関する追加の固有情報を示します。
     
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.errors:SQLError:operation:get"><apiName>operation</apiName><shortdesc>
     エラーの発生時に試行されていた操作を示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     エラーの発生時に試行されていた操作を示す値です。この値は、SQLErrorOperation クラスで定義されている定数の 1 つです。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.errors.xml#SQLErrorOperation"><linktext>flash.errors.SQLErrorOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.errors:SQLErrorOperation"><apiName>SQLErrorOperation</apiName><shortdesc>
 このクラスには、SQLError.operation プロパティの有効な値を表す定数が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスには、<codeph>SQLError.operation</codeph> プロパティの有効な値を表す定数が含まれます。これらの値は、エラー発生の原因となった試行された操作を示します。
 
 <p>それぞれの値は、SQLConnection クラスまたは SQLStatement クラスの操作の 1 つを表します。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError/operation"><linktext>flash.errors.SQLError.operation</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><apiValue id="flash.errors:SQLErrorOperation:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     SQLConnection.analyze() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.analyze()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     SQLConnection.attach() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.attach()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     SQLConnection.begin() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.begin()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     SQLConnection.close() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.close()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     SQLConnection.commit() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.commit()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     SQLConnection.compact() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.compact()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     SQLConnection.deanalyze() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.deanalyze()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:DETACH"><apiName>DETACH</apiName><shortdesc>
     SQLConnection.detach() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.detach()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:EXECUTE"><apiName>EXECUTE</apiName><shortdesc>
     SQLStatement.execute() メソッドまたは SQLStatement.next() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>execute</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLStatement.execute()</codeph> メソッドまたは <codeph>SQLStatement.next()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:OPEN"><apiName>OPEN</apiName><shortdesc>
     SQLConnection.open() メソッドまたは SQLConnection.openAsync() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.open()</codeph> メソッドまたは <codeph>SQLConnection.openAsync()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     SQLConnection.reencrypt() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.reencrypt()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     SQLConnection.rollback() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.rollback()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     SQLConnection.loadSchema() メソッドが呼び出されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLConnection.loadSchema()</codeph> メソッドが呼び出されたことを示します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.errors:MemoryError"><apiName>MemoryError</apiName><shortdesc>
	MemoryError 例外は、メモリ割り当て要求が失敗した場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	MemoryError 例外は、メモリ割り当て要求が失敗した場合にスローされます。 
	
	<p>デスクトップマシンでは、メモリ割り当ての失敗はほとんど発生しません。ただし、割り当て要求が極端に大きい場合はこの限りではありません。例えば 32 ビット Windows 版のプログラム（アドレス空間が 2 GB）で 10 GB の割り当てを要求した場合などは、要求を満たすことが不可能であるため、この例外が発生します。</p>
	
	<p>デフォルトでは、Flash Player は ActionScript プログラムが割り当てられるメモリの量を制限しません。</p>
	
 	</apiDesc><example conref="examples\MemoryErrorExample.as"> 次の例は、MemoryError を生成する 1 つの方法を示しています。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.MemoryError;
    import flash.utils.setInterval;
       
    public class MemoryErrorExample extends Sprite {
        private var crashingStr:String;
        private var intervalId:Number;
           
        public function MemoryErrorExample() {
            crashingStr = "abcdefghijklmnopqrstuvwxyz";
            intervalId = setInterval(exhaustMemory, 50);
        }
           
        public function exhaustMemory():void {            
            try {
                crashingStr += crashingStr;
            }
            catch(e:MemoryError) {
                trace(e);
            }
        }
    }
}  
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:MemoryError:flash.errors:MemoryError"><apiName>MemoryError</apiName><shortdesc> 
		新しい MemoryError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> 
		新しい MemoryError オブジェクトを作成します。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:StackOverflowError"><apiName>StackOverflowError</apiName><shortdesc>
	ActionScript は、スクリプトで使用できるスタックを使い切った場合に StackOverflowError 例外をスローします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	ActionScript は、スクリプトで使用できるスタックを使い切った場合に StackOverflowError 例外をスローします。ActionScript はスタックを使用して、スクリプト内で行われた各メソッド呼び出しに関する情報（例えば、メソッドが使用するローカル変数）を保管します。使用できるスタックスペースの量は、システムによって異なります。
	
	<p>StackOverflowError 例外は、無限反復が発生したことを示している可能性があります。その場合、関数に終了条件を追加する必要があります。また、再帰アルゴリズムには適切な終了条件があるものの、単にスタックを使い切ってしまったことを示している可能性もあります。この場合、代わりの方法として、アルゴリズムを反復的に表現するようにしてください。</p>
	
 	</apiDesc><example conref="examples\StackOverflowErrorExample.as"> 次の例では、サンプル StackOverflowErrorExample クラスを使用して、スタックのオーバーフローが生じた場合に生成されるエラーを示します。ここでは以下の手順を実行します。
 <ol>
     <li>コンストラクターが <codeph>lockMachine()</codeph> メソッドをエラー処理コードセグメント内で呼び出します。このコードセグメントは StackOverflowError オブジェクトをキャッチするものです。  </li>
     <li><codeph>lockMachine()</codeph> メソッドはスタックがオーバーフローするまで自身を呼び出し続けます。</li>
     <li>StackOverflowError がスローされると、コンストラクターはそれをキャッチし、<codeph>trace</codeph> ステートメントを使用してエラーメッセージを出力します。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.StackOverflowError;

    public class StackOverflowErrorExample extends Sprite {        
        public function StackOverflowErrorExample() {
            try {
                lockMachine();
            } 
            catch(e:StackOverflowError) {
                trace(e);    // StackOverflowError: Error #1023: Stack overflow.
            }
        }
        
        private function lockMachine():void {
            lockMachine();
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:StackOverflowError:flash.errors:StackOverflowError"><apiName>StackOverflowError</apiName><shortdesc>
		新しい StackOverflowError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		新しい StackOverflowError オブジェクトを作成します。
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:DRMManagerError"><apiName>DRMManagerError</apiName><shortdesc>
 DRMManager は DRMManagerError イベントを送出してエラーを報告します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 DRMManager は DRMManagerError イベントを送出してエラーを報告します。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><apiConstructor id="flash.errors:DRMManagerError:DRMManagerError"><apiName>DRMManagerError</apiName><shortdesc>
	 DRMManagerError クラスのインスタンスを新規作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>エラーの説明です。
	 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>一般的なエラー番号です。
	 </apiDesc></apiParam><apiParam><apiItemName>subErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>特定のエラー番号です。
	 
 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 DRMManagerError クラスのインスタンスを新規作成します。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.errors:DRMManagerError:toString"><apiName>toString</apiName><shortdesc>
	 
	
	デフォルトでは "Error" というストリングを返します。Error.message プロパティが定義されている場合は、その値を返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーメッセージです。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 
	
	デフォルトでは <codeph>"Error"</codeph> というストリングを返します。<codeph>Error.message</codeph> プロパティが定義されている場合は、その値を返します。
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.errors:DRMManagerError:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
	 特定のエラー番号です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 特定のエラー番号です。
	 
 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.errors:IOError"><apiName>IOError</apiName><shortdesc>
	IOError 例外は、ある種の入出力エラーが発生した場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	IOError 例外は、ある種の入出力エラーが発生した場合にスローされます。例えば、未接続または切断済みのソケットに対して読み書き操作を実行しようとすると、IOError 例外がスローされます。
	
	
 	</apiDesc><example conref="examples\IOErrorExample.as"> 次の例では、ロードされていない Sound ストリームをクローズしようとしたときに IOError 例外をスローします。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.IOError;
    import flash.media.Sound;
      
    public class IOErrorExample extends Sprite
    {
        public function IOErrorExample()
        {
            var music:Sound = new Sound();
            try {
                  music.close();
                  trace("Stream closed.");
            } catch (error:IOError) {
                  trace("The stream could not be closed, or the stream was not open.");
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:IOError:flash.errors:IOError"><apiName>IOError</apiName><shortdesc> 
		新しい IOError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
		
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> 
		新しい IOError オブジェクトを作成します。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:IllegalOperationError"><apiName>IllegalOperationError</apiName><shortdesc>
	IllegalOperationError 例外は、メソッドが実装されていないか、使用方法に実装が対応していない場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	IllegalOperationError 例外は、メソッドが実装されていないか、使用方法に実装が対応していない場合にスローされます。
	
	<p>例えば、次のような状況で無効な操作エラーの例外が発生します。</p>
	<ul>
	    <li>基本クラス（DisplayObjectContainer など）に、ステージでサポートされている範囲を超えた機能（マスクなど）がある場合。</li>
	    <li>アクセシビリティのサポートを含めずにコンパイルされた Flash Player の環境で、ある種のアクセシビリティ関連メソッドを呼び出した場合。</li>
	    <li>mms.cfg での設定により、FileReference アクションが禁止されている場合。</li>
	    <li>参照ダイアログボックスが既に表示されているときに ActionScript が <codeph>FileReference.browse()</codeph> 呼び出しを実行しようとした場合。</li>
	    <li>ActionScript が、FileReference オブジェクトでサポートされていないプロトコル（FTP など）を使用しようとした場合。</li>
	    <li product="flash">ランタイムプレーヤーでオーサリング時専用の機能を呼び出した場合。</li>
	    <li product="flash">タイムライン上に配置されたオブジェクトに対して名前を設定しようとした場合。</li>
	</ul>
	
 	</apiDesc><example conref="examples\IllegalOperationErrorExample.as"> 次の例は、<codeph>IllegalOperationError</codeph> ハンドラーの使用を示しています。
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;

    public class IllegalOperationErrorExample extends Sprite {
        public function IllegalOperationErrorExample() {
            var child:Sprite = new Sprite();
            try {
                addChild(child);
            }
            catch(e:IllegalOperationError) {
                trace(e);
            }
        }

        public override function addChild(child:DisplayObject):DisplayObject {
            throw new IllegalOperationError("addChild cannot be performed on the IllegalOperationErrorExample class");
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:IllegalOperationError:flash.errors:IllegalOperationError"><apiName>IllegalOperationError</apiName><shortdesc>
		新しい IllegalOperationError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		新しい IllegalOperationError オブジェクトを作成します。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:EOFError"><apiName>EOFError</apiName><shortdesc>
	EOFError 例外は、取得できるデータの末尾よりも後の部分を読み取ろうとした場合にスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>flash.errors:IOError</apiBaseClassifier></apiClassifierDef><apiDesc>
	EOFError 例外は、取得できるデータの末尾よりも後の部分を読み取ろうとした場合にスローされます。例えば、IDataInput インターフェイスの読み取りメソッドのいずれかを呼び出したとき、その読み取り要求を満たす量のデータが存在しない場合は EOFError がスローされます。 
	
 	</apiDesc><example conref="examples\EOFErrorExample.as"> 次の例では、<codeph>EOFErrorExample</codeph> クラスを使用し、取得できるデータの末尾よりも後の部分を読み取ろうとした場合に生成されるエラーを示します。これを行うには、以下の手順を実行します。
 <ol>
     <li>コンストラクターが ByteArray オブジェクト <codeph>byteArr</codeph> を作成し、ブール値 <codeph>false</codeph> をバイトストリームに書き込みます（<codeph>writeBoolean()</codeph> を使用）。  </li>
     <li><codeph>byteArr</codeph> の位置は <codeph>0</codeph>（データストリームの先頭）にリセットされます。</li>
     <li><codeph>readBoolean()</codeph> を使用して、1 バイトがデータストリームから削除されます。データストリームには、含まれるデータが存在しなくなります。</li>
     <li>EOFError オブジェクトをキャッチするように設定されたエラー処理コードセグメント内で、<codeph>readBoolean()</codeph> が再び呼び出されます。これは EOFError をキャッチして <codeph>trace()</codeph> ステートメントに渡し、このステートメントは EOFError オブジェクトに関連付けられたエラーメッセージを出力します。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.EOFError;
    import flash.utils.ByteArray;

    public class EOFErrorExample extends Sprite {        
        public function EOFErrorExample() {
            var byteArr:ByteArray = new ByteArray();

            byteArr.writeBoolean(false);
            trace(byteArr.length);        // 1
            
            byteArr.position = 0;
            try {
                trace(byteArr.readBoolean());    // false
            }
            catch(e:EOFError) {
                trace(e);
            }
            try {
                trace(byteArr.readBoolean());
            } 
            catch(e:EOFError) {
                trace(e);        // EOFError: Error #2030: End of file was encountered.
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#ByteArray"><linktext>flash.utils.ByteArray</linktext></link><link href="flash.utils.xml#IDataInput"><linktext>flash.utils.IDataInput</linktext></link><link href="flash.net.xml#Socket"><linktext>flash.net.Socket</linktext></link><link href="flash.net.xml#URLStream"><linktext>flash.net.URLStream</linktext></link></related-links><apiConstructor id="flash.errors:EOFError:flash.errors:EOFError"><apiName>EOFError</apiName><shortdesc>
		新しい EOFError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		新しい EOFError オブジェクトを作成します。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:InvalidSWFError"><apiName>InvalidSWFError</apiName><shortdesc>
  破損した SWF ファイルを検出すると、Flash Player はこの例外をスローします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
  破損した SWF ファイルを検出すると、Flash Player はこの例外をスローします。 
  </apiDesc></apiClassifierDetail><apiConstructor id="flash.errors:InvalidSWFError:InvalidSWFError"><apiName>InvalidSWFError</apiName><shortdesc>
        新しい InvalidSWFError オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>
         
         </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーオブジェクトに関連付けられたストリングです。
        
        </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc>
        新しい InvalidSWFError オブジェクトを作成します。
        
        </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>