<?xml version="1.0"?>
<apiPackage id="flash.events"><apiName>flash.events</apiName><apiDetail/><apiClassifier id="flash.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
 キーボードからのユーザー入力に反応して送出される KeyboardEvent オブジェクト ID です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Keyboard イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 キーボードからのユーザー入力に反応して送出される KeyboardEvent オブジェクト ID です。 次の 2 種類のキーボードイベントがあります。<codeph>KeyboardEvent.KEY_DOWN</codeph> および <codeph>KeyboardEvent.KEY_UP</codeph>
 
 <p>キーと特定の文字のマッピングはデバイスやオペレーティングシステムごとに異なるため、入力された文字の処理には TextEvent イベントタイプを使用してください。</p>
 
 <p>キーイベントをグローバルにリスニングするには、キャプチャ段階、ターゲット段階またはバブリング段階について Stage でリスニングします。</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as"> 次の例では、<codeph>KeyboardEventExample</codeph> クラスを使用して、キーボードイベントとそのリスナー関数を表示する方法を示します。この例では、次の処理を実行します。
 <ol>
  <li><codeph>child</codeph> という名前の新しい Sprite インスタンスを作成します。</li>
     <li>四角形の背景色とサイズの設定に後で使用するプロパティを宣言します。</li>
     <li>Sprite のメソッドを使用して、<codeph>addChild()</codeph> メソッドを呼び出し、明るい青色の四角形を描画してステージ上のデフォルトの座標 (0,0) に表示します。</li>
     <li>1 つのマウスイベントリスナーと 2 つのキーボード入力イベントリスナーを追加します。
     <ul>
      <li><codeph>click</codeph>/<codeph>clickHandler</codeph>：四角形をクリックすると送出されます。キーボードイベントをリッスンできるように、<codeph>child</codeph> スプライトにフォーカスを設定します。</li>
         <li><codeph>keyDown</codeph> / <codeph>keyDownHandler</codeph>：任意のキーを押したときに送出されます。このサブスクライバメソッドは、<codeph>trace()</codeph> ステートメントを使用して、イベントに関する情報を出力します。</li>
         <li><codeph>keyUp</codeph>/<codeph>keyUpHandler</codeph>：キーを離すと送出されます。</li>
     </ul></li>
 </ol>
 
 <p>この例をテストするときは、最初に四角形をクリックしてキーボードイベントを有効にする必要があります。</p>
 <p product="flash">また、Flash の「ムービーのテスト」コマンドを使用する場合は、child スプライトに関連付けられたイベントリスナーではなく特定のキーにオーサリングインターフェイスが反応することがあります。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation"><linktext>KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown"><apiName>keyDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp"><apiName>keyUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	キーボードイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。<codeph>KeyboardEvent.KEY_DOWN</codeph> および <codeph>KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。
	</apiDesc></apiParam><apiParam><apiItemName>charCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>押したキーまたは離したキーの文字コード値です。文字コードの戻り値は英語キーボードの値です。例えば、Shift + 3 キーが押されると、<codeph>Keyboard.charCode()</codeph> プロパティは日本語のキーボードでも英語のキーボードと同じように # を返します。
	</apiDesc></apiParam><apiParam><apiItemName>keyCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>押したキーまたは離したキーのキーコード値です。
	</apiDesc></apiParam><apiParam><apiItemName>keyLocationValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>キーボードのキーの場所です。
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Windows では Ctrl キーがアクティブになっているかどうかを示します。Macintosh では、Ctrl キーと Command キーのいずれがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>altKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Alt キーモディファイアがアクティブになっているかどうかを示します（Windows のみ）。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Shift キーモディファイアがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>controlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Mac で Control キーがアクティブになっているかどうか、および Windows や Linux で Control キーまたは Ctrl キーがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>commandKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Command キーがアクティブになっているかどうかを示します（Macintosh のみ）。
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>KeyboardEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	キーボードイベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode"><linktext>Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone"><apiName>clone</apiName><shortdesc>
	KeyboardEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい KeyboardEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	KeyboardEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString"><apiName>toString</apiName><shortdesc>
	KeyboardEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>KeyboardEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	KeyboardEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph> [KeyboardEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ... shiftKey= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	表示リストが変更されている場合、このイベント終了処理の後に表示をレンダリングする必要があることを示します。
	
	</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	表示リストが変更されている場合、このイベント終了処理の後に表示をレンダリングする必要があることを示します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN"><apiName>KEY_DOWN</apiName><shortdesc>
	KeyboardEvent.KEY_DOWN 定数は、keyDown イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>KeyboardEvent.KEY_DOWN</codeph> 定数は、<codeph>keyDown</codeph> イベントオブジェクトの <codeph>type</codeph> プロパティの値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry>AIR の場合は <codeph>true</codeph>、Flash Player の場合は <codeph>false</codeph> です。このイベントをキャンセルすると、テキストフィールドに文字が入力されなくなります。</entry></row><row><entry><codeph>charCode</codeph></entry><entry>押したキーまたは離したキーの文字コード値です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Mac では Command キーがアクティブになっている場合は <codeph>true</codeph> です。それ以外の場合は、<codeph>false</codeph> を返します。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Windows および Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Mac では Control キーがアクティブになっている場合は <codeph>true</codeph> です。それ以外の場合は、<codeph>false</codeph> を返します。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows および Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>押したキーまたは離したキーのキーコード値です。</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>キーボードのキーの場所です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>target</codeph></entry><entry>フォーカスを持っている InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP"><apiName>KEY_UP</apiName><shortdesc>
	KeyboardEvent.KEY_UP 定数は、keyDown イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>KeyboardEvent.KEY_UP</codeph> 定数は、<codeph>keyDown</codeph> イベントオブジェクトの <codeph>type</codeph> プロパティの値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>charCode</codeph></entry><entry>押したキーまたは離したキーの文字コード値を含みます。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Mac では Command キーがアクティブになっている場合は <codeph>true</codeph> です。それ以外の場合は、<codeph>false</codeph> を返します。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Windows および Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Mac では Control キーがアクティブになっている場合は <codeph>true</codeph> です。それ以外の場合は、<codeph>false</codeph> を返します。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>押したキーまたは離したキーのキーコード値です。</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>キーボードのキーの場所です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>target</codeph></entry><entry>フォーカスを持っている InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
	Windows では Alt キーがアクティブになっているか（true）非アクティブになっているか（false）を示します。Mac OS では Option キーがアクティブになっているかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Windows では Alt キーがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。Mac OS では Option キーがアクティブになっているかを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
	押したキーまたは離したキーの文字コード値を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	押したキーまたは離したキーの文字コード値を含みます。文字コード値は英語キーボードの値です。例えば、Shift+3 キーが押されると、<codeph>charCode</codeph> は日本語のキーボードでも英語のキーボードと同じように # を返します。
	<p><b>注意：</b>IME が実行されているときは、<codeph>charCode</codeph> では正確な文字コードが報告されません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Command キーがアクティブになっているか（true）非アクティブになっているか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Command キーがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。 Mac OS のみでサポートされます。Mac OS で <codeph>commandKey</codeph> プロパティは <codeph>ctrlKey</codeph> プロパティと同じ値です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Ctrl キーまたは Control キーがアクティブになっているか（true）非アクティブになっているか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Ctrl キーまたは Control キーがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。Windows および Linux では、Ctrl キーがアクティブになっているときにも true です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	Windows および Linux では Ctrl キーがアクティブになっているか（true）非アクティブになっているか（false）を示します。Mac OS では Ctrl キーまたは Command キーがアクティブになっているかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Windows および Linux では Ctrl キーがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。Mac OS では Ctrl キーまたは Command キーがアクティブになっているかを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	押したキーまたは離したキーのキーコード値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	押したキーまたは離したキーのキーコード値です。
	<p><b>注意：</b>IME が実行されているときは、<codeph>keyCode</codeph> では正確なキーコードが報告されません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
	キーボードのキーの場所を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	キーボードのキーの場所を示します。これは、キーボードに複数あるキーを区別するときに役立ちます。例えば、左の Shift キーと右の Shift キーをこのプロパティの値で区別できます。左は <codeph>KeyLocation.LEFT</codeph>、右は <codeph>KeyLocation.RIGHT</codeph> です。また、標準キーボードの数字キー（<codeph>KeyLocation.STANDARD</codeph>）とテンキーの数字キー（<codeph>KeyLocation.NUM_PAD</codeph>）のどちらが押されたかを区別することもできます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Shift キーモディファイアがアクティブになっているか（true）非アクティブになっているか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Shift キーモディファイアがアクティブになっているか（<codeph>true</codeph>) 非アクティブになっているか（<codeph>false</codeph>）を示します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
 NativeWindow オブジェクトは、ウィンドウの表示状態が変更されたときに、NativeWindowDisplayStateEvent クラスのイベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ウィンドウの表示状態を変更する NativeWindow イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 NativeWindow オブジェクトは、ウィンドウの表示状態が変更されたときに、NativeWindowDisplayStateEvent クラスのイベントを送出します。次の 2 種類のイベントがあります。
 <ul>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange"><apiName>displayStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging"><apiName>displayStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
    ウィンドウの表示状態イベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。
    <ul>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。
    </apiDesc></apiParam><apiParam><apiItemName>beforeDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>変更前の <codeph>displayState</codeph> です。
    </apiDesc></apiParam><apiParam><apiItemName>afterDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>変更後の <codeph>displayState</codeph> です。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    ウィンドウの表示状態イベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone"><apiName>clone</apiName><shortdesc>
    NativeWindowDisplayStateEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい NativeWindowDisplayStateEvent オブジェクトです。
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    NativeWindowDisplayStateEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString"><apiName>toString</apiName><shortdesc>
    NativeWindowDisplayStateEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>NativeWindowDisplayStateEvent オブジェクトのすべてのプロパティを含むストリングです。
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    NativeWindowDisplayStateEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
    <p><codeph>[NativeWindowDisplayStateEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> beforeDisplayState=<i>value</i> afterDisplayState=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE"><apiName>DISPLAY_STATE_CHANGE</apiName><shortdesc>
    displayStateChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>displayStateChange</codeph> イベントオブジェクト）の値を定義します。このイベントには、次のプロパティがあります。
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>ウィンドウの変更前の表示状態です。</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>ウィンドウの変更後の表示状態です。</entry></row><row><entry><codeph>target</codeph></entry><entry>状態が変更された NativeWindow インスタンスです。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING"><apiName>DISPLAY_STATE_CHANGING</apiName><shortdesc>
    displayStateChanging イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChanging</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>displayStateChanging</codeph> イベントオブジェクト）の値を定義します。このイベントには、次のプロパティがあります。
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>現在実行中の変更が行われる前のウィンドウの表示状態です。</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>現在実行中の変更が行われた後のウィンドウの表示状態です。</entry></row><row><entry><codeph>target</codeph></entry><entry>状態が変更された NativeWindow インスタンスです。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントをキャンセルすると、変更は起こりません。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get"><apiName>afterDisplayState</apiName><shortdesc>
     変更後の NativeWindow の表示状態です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     変更後の NativeWindow の表示状態です。  
     
     <p>イベントが <codeph>displayStateChanging</codeph> の場合、表示状態はまだ変更されていません。<codeph>afterDisplayState</codeph> は、イベントがキャンセルされなかった場合の新しい表示状態を示します。イベントが <codeph>displayStateChanged</codeph> の場合、<codeph>afterDisplayState</codeph> は現在の値を示します。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get"><apiName>beforeDisplayState</apiName><shortdesc>
     変更前の NativeWindow の表示状態です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     変更前の NativeWindow の表示状態です。  
     
     <p>イベントが <codeph>displayStateChanging</codeph> の場合、表示状態はまだ変更されていません。<codeph>beforeDisplayState</codeph> は、ウィンドウの現在の表示状態を表します。イベントが <codeph>displayStateChanged</codeph> の場合、<codeph>beforeDisplayState</codeph> は以前の値を示します。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
ステージがフルスクリーン表示モードに設定または設定解除されるたびに、Stage オブジェクトは、FullScreenEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>FullScreenEvent イベントのイベントオブジェクトです。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
ステージがフルスクリーン表示モードに設定または設定解除されるたびに、Stage オブジェクトは、FullScreenEvent オブジェクトを送出します。<codeph>fullScreen</codeph> イベントのタイプは <codeph>FullScreenEvent.FULL_SCREEN</codeph> のみです。

</apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier>flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
	fullScreen イベントに関する情報を含んでいるイベントオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。<codeph>fullScreen</codeph> イベントのタイプは <codeph>FullScreenEvent.FULL_SCREEN</codeph> のみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	</apiDesc></apiParam><apiParam><apiItemName>fullScreen</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>デバイスがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。イベントリスナーは、<codeph>activating</codeph> プロパティを通じてこの情報にアクセスできます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>FullScreenEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	<codeph>fullScreen</codeph> イベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
    </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN"><linktext>FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone"><apiName>clone</apiName><shortdesc>
	FullScreenEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい FullScreenEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	FullScreenEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString"><apiName>toString</apiName><shortdesc>
	FullScreenEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>FullScreenEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	FullScreenEvent オブジェクトのすべてのプロパティを含むストリングを返します。次の形式が使用されます。
	<p><codeph>[FullScreenEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> activating=<i>value</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN"><apiName>FULL_SCREEN</apiName><shortdesc>
	FullScreenEvent.FULL_SCREEN 定数により、fullScreen event オブジェクトの type プロパティ値が定義されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>FullScreenEvent.FULL_SCREEN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>fullScreen</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>fullScreen</codeph></entry><entry>表示状態がフルスクリーンの場合は <codeph>true</codeph>、通常の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get"><apiName>fullScreen</apiName><shortdesc>
	Stage オブジェクトがフルスクリーンモードか（true）そうでないか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Stage オブジェクトがフルスクリーンモードか（<codeph>true</codeph>）そうでないか（<codeph>false</codeph>）を示します。
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
 TimerEvent オブジェクトは、Timer オブジェクトが Timer.delay プロパティで指定された時間間隔に達するたびに、Timer オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Timer イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 TimerEvent オブジェクトは、Timer オブジェクトが <codeph>Timer.delay</codeph> プロパティで指定された時間間隔に達するたびに、Timer オブジェクトによって送出されます。
 
 </apiDesc><example conref="examples\TimerEventExample.as"> 次の例では、TimerExample クラスを使用して、リスナーメソッド <codeph>timerHandler()</codeph> をインスタンス化し、送出される新しい TimerEvent を受け取るように設定する方法を示します。オブジェクトが送出されるのは、Timer の <codeph>start()</codeph> メソッドが呼び出されたときです。  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#Timer"><linktext>flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer"><apiName>timer</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
	タイマーイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトでバブリングを実行できるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>TimerEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	<codeph>timer</codeph> イベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone"><apiName>clone</apiName><shortdesc>
	TimerEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい TimerEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	TimerEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString"><apiName>toString</apiName><shortdesc>
	TimerEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>TimerEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	TimerEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph> [TimerEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ] </codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	表示リストが変更されている場合、このイベントの処理が終了した後にレンダリングするよう Flash Player または AIR ランタイムに指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	表示リストが変更されている場合、このイベントの処理が終了した後にレンダリングするよう <ph platform="actionscript">Flash Player</ph> または AIR ランタイムに指示します。
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as"> <codeph>TimerEvent.updateAfterEvent()</codeph> メソッドの例を次に示します。   
<codeblock>
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER"><apiName>TIMER</apiName><shortdesc>
    timer イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timer</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>timer</codeph> イベントオブジェクト）の値を定義します。
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>時間間隔が経過した Timer オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE"><apiName>TIMER_COMPLETE</apiName><shortdesc>
    timerComplete イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timerComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>timerComplete</codeph> イベントオブジェクト）の値を定義します。
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>要求を完了した Timer オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
IOErrorEvent オブジェクトは、エラーが発生して送信またはロード操作が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>IOErrorEvent イベントのイベントオブジェクトです。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
IOErrorEvent オブジェクトは、エラーが発生して送信またはロード操作が失敗したときに送出されます。

<p>リスナーのない error イベントを確認するには、デバッグ版の Flash Player または AIR Debug Launcher（ADL）を使用します。 IOErrorEvent コンストラクターの <codeph>text</codeph> パラメーターで定義されたストリングが表示されます。 入出力エラーイベントのタイプは、<codeph>IOErrorEvent.IO_ERROR</codeph> のみです。 </p>

</apiDesc><example conref="examples\IOErrorEventExample.as"> 次の例では、<codeph>IOErrorEventExample</codeph> クラスを使用して、存在しないファイルのロードを試行したときに、エラーイベントオブジェクトがどのように送出されるかを示します。この例では、次の処理を実行します。
 <ol>
    <li>このクラスコンストラクターが URLLoader オブジェクトの新しいインスタンスを作成し、そのインスタンスを変数 <codeph>loader</codeph> に割り当てます。</li>
    <li>URLLoader インスタンスは、タイプが <codeph>ioError</codeph> のイベントリスナーをインスタンス化します。このタイプのイベントリスナーには、サブスクライバメソッド <codeph>ioErrorHandler()</codeph> が関連付けられています。このサブスクライバメソッドは、<codeph>trace()</codeph> を使用してイベントに関する情報を出力します。</li>
    <li>次に、コンストラクターは URLRequest オブジェクトの新しいインスタンス <codeph>request</codeph> を作成します。<codeph>MissingFile.xml</codeph> が渡されるため、見つからないファイルのファイル名と場所が明らかになります。</li>
    <li>次に、<codeph>request</codeph> 変数が <codeph>loader.load()</codeph> に渡され、見つからないファイルのロードが試行されます。ファイルは見つからないため、イベントハンドラーによって <codeph>ioError</codeph> イベントが送出されます。</li>
 </ol>
 
 <p> <b>注意：</b>
 <ul>
     <li>「ローカルでの再生に関するセキュリティ」を「ローカルファイルにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。</li>
     <li>"MissingFile.xml" という名前のファイルを、SWF ファイルと同じレベルに置かないでください。 </li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
	ioError イベントに関する特定の情報を含んでいる Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。入出力エラーイベントのタイプは、<codeph>IOErrorEvent.IO_ERROR</codeph> のみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーメッセージとして表示されるテキストです。イベントリスナーは、<codeph>text</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>特定のエラーに関連付ける参照番号です（Adobe AIR でのみサポートされています）。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>IOErrorEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	<codeph>ioError</codeph> イベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	IOErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい IOErrorEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	IOErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	IOErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>IOErrorEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	IOErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[IOErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc>
	ioError イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>ioError</codeph> イベントオブジェクト）の値を定義します。
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>errorID</codeph></entry><entry>特定のエラーに関連付けられた参照番号です（AIR のみ）。</entry></row><row><entry><codeph>target</codeph></entry><entry>入出力エラーが発生したネットワークオブジェクトです。</entry></row><row><entry><codeph>text</codeph></entry><entry>エラーメッセージとして表示されるテキストです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
NetStatusEvent オブジェクトは、NetConnection、NetStream または SharedObject オブジェクトが自身のステータスを報告するときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>NetStatusEvent イベントのイベントオブジェクトです。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
NetStatusEvent オブジェクトは、NetConnection、NetStream または SharedObject オブジェクトが自身のステータスを報告するときに送出されます。 ステータスイベントのタイプは <codeph>NetStatusEvent.NET_STATUS</codeph> の 1 つのみです。

</apiDesc><example conref="examples\NetStatusEventExample.as"> 次の例では、Video オブジェクトを NetConnection クラスおよび NetStream クラスと共に使用して、FLV ファイルをロードして再生します。
 <p>この例では、<codeph>netStatusHandler</codeph> メソッドを NetStatusEvent イベント <codeph>NetConnection.netStatus</codeph> のリスナーとして登録します。<codeph>NetConnection.connect()</codeph> のステータス（成功または失敗）が特定されると、<codeph>netStatus</codeph> イベントによりこのメソッドがトリガーされます。NetConnection オブジェクトへの接続が成功した場合、つまり、NetStatusEvent オブジェクトの <codeph>info</codeph> プロパティ（NetStatusEvent オブジェクトは <codeph>netStatus</codeph> イベントによって送出）に含まれている <codeph>code</codeph> プロパティが成功を示していた場合、Video オブジェクトと NetStream オブジェクトが作成され、<codeph>Video.attachNetStream()</codeph> メソッドと <codeph>NetStream.play()</codeph> メソッドが呼び出されます。</p>
 
 <p><b>注意：</b>この例を実行するには、ファイル名と場所が <codeph>videoURL</codeph> に渡される変数と一致する FLV ファイルが必要です。この場合は、SWF ファイルと同じディレクトリにある Video.flv という名前の FLV ファイルです。</p>
<codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject"><linktext>flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus"><apiName>netStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
	netStatus イベントに関する情報を含んでいる Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。ステータスイベントのタイプは <codeph>NetStatusEvent.NET_STATUS</codeph> の 1 つのみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>オブジェクトのステータスを記述するプロパティを含むオブジェクトです。イベントリスナーは、<codeph>info</codeph> プロパティを通じてこのオブジェクトにアクセスできます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>NetStatusEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	<codeph>netStatus</codeph> イベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	NetStatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい NetStatusEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	NetStatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	NetStatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>NetStatusEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	NetStatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[NetStatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> info=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS"><apiName>NET_STATUS</apiName><shortdesc>
    netStatus イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>netStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>netStatus</codeph> イベントオブジェクト）の値を定義します。
  	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>info</codeph></entry><entry>オブジェクトのステータスまたはエラー状態を記述するプロパティを持つオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>そのステータスを報告する NetConnection または NetStream オブジェクトです。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get"><apiName>info</apiName><shortdesc>
	 オブジェクトのステータスまたはエラー状態を記述するプロパティを持つオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 オブジェクトのステータスまたはエラー状態を記述するプロパティを持つオブジェクトです。
	 
	 <p>情報オブジェクトは、特定のイベントを表すストリングを含む <codeph>code</codeph> プロパティ、または <codeph>"status"</codeph> と <codeph>"error"</codeph> のいずれかのストリングを含む <codeph>level</codeph> プロパティを保持することがあります。 </p>
	 
	 <p>また、情報オブジェクトがこれ以外のプロパティを保持することもあります。<codeph>code</codeph> プロパティと <codeph>level</codeph> プロパティは、一部の実装では機能せず、一部のサーバーでは別のオブジェクトが送られることがあります。  </p>
	 
	 <p>P2P 接続は、<codeph>NetConnection</codeph> にメッセージを送信します。この場合、情報オブジェクトの <codeph>stream</codeph> パラメーターでメッセージが関係する <codeph>NetStream</codeph> を指定します。<ph product="flex">例えば、Flex Data Services では、<codeph>code</codeph> プロパティまたは <codeph>level</codeph> プロパティにアクセスしようとすると、型変換エラーを引き起こす Message オブジェクトが送信されます。</ph></p> 
	 
	 <p>次の表に、<codeph>code</codeph> プロパティと <codeph>level</codeph> プロパティに含まれる可能性のあるストリング値を示します。</p>
 <adobetable class="innertable">
  
 
 

  
   
  
  
    
  
  
  
  
  
  
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<tgroup cols="3"><thead><row><entry>code プロパティ</entry><entry>level プロパティ</entry><entry>説明</entry></row></thead><tbody><row>
     <entry><codeph>NetStream.Buffer.Empty</codeph></entry>
     <entry><codeph>status</codeph></entry>
     <entry>データを十分な速度で受信していないので、バッファーを満たしていません。バッファーが再び満たされるまでデータのフローは中断されます。バッファーが満たされた時点で <codeph>NetStream.Buffer.Full</codeph> メッセージが送信され、再びストリームの再生が開始されます。</entry>
 </row><row>
     <entry><codeph>NetStream.Buffer.Full</codeph></entry>
     <entry><codeph>status</codeph></entry>
     <entry>バッファーが満たされ、ストリームの再生が開始されます。</entry>
</row><row>
    <entry><codeph>NetStream.Buffer.Flush</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>データのストリームが終了しました。残りのバッファーは空になります。</entry>
  </row><row>
    <entry><codeph>NetStream.Failed</codeph> </entry>
    <entry>error</entry>
    <entry>Flash Media Server のみ。他のイベントコードに一覧表示されている以外の理由でエラーが発生しました。
    </entry>
  </row><row>
    <entry><codeph>NetStream.Publish.Start</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>パブリッシュが正常に行われました。</entry>
  </row><row>
    <entry><codeph>NetStream.Publish.BadName</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>その他のユーザーが既にパブリッシュしているストリームをパブリッシュしようとしています。</entry>
  </row><row>
    <entry><codeph>NetStream.Publish.Idle</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>ストリームの発行者はアイドル状態で、データを伝送していません。</entry>
  </row><row>
    <entry><codeph>NetStream.Unpublish.Success</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>アンパブリッシュ操作が正常に行われました。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Start</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>再生が開始されました。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Stop</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>再生が停止されました。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>この表に示している以外の理由で再生中にエラーが発生しました。例えば、サブスクライバに読み取りアクセスがない場合などが該当します。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.StreamNotFound</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry><codeph>play()</codeph> メソッドに渡した FLV が見つかりません。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Reset</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>再生リストのリセットが原因です。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.PublishNotify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>ストリームへの最初のパブリッシュがすべてのサブスクライバに送信されます。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.UnpublishNotify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>ストリームからのアンパブリッシュがすべてのサブスクライバに送信されます。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.InsufficientBW</codeph> </entry>
    <entry>warning</entry>
    <entry>Flash Media Server のみ。クライアントに、データを通常の速度で再生するために十分な帯域幅がありません。 </entry>
  </row><row>
    <entry><codeph>NetStream.Play.FileStructureInvalid</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>アプリケーションで無効なファイル構造が検出され、このタイプのファイルが再生されません。AIR および Flash Player 9.0.115.0 以降の場合です。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.NoSupportedTrackFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>アプリケーションでサポートされているトラック（ビデオ、オーディオまたはデータ）が検出されず、ファイルが再生されません。AIR および Flash Player 9.0.115.0 以降の場合です。</entry>
  </row><row>
    <entry><codeph>「NetStream.Play.Transition」</codeph></entry>
    <entry><codeph>「status」</codeph></entry>
    <entry>Flash Media Server のみ。 ビットレートストリーム切り替えの結果として、ストリームが別のストリームに移行します。このコードは、ストリーム切り替えを開始する <codeph>NetStream.play2()</codeph> 呼び出しの成功ステータスのイベントを示します。切り替えが成功しない場合、サーバーは代わりに <codeph>NetStream.Play.Failed</codeph> イベントを送信します。Flash Player 10 以降。</entry>
  </row><row>
    <entry><codeph>「NetStream.Play.Transition」</codeph></entry>
    <entry><codeph>「status」</codeph></entry>
    <entry>Flash Media Server 3.5 以降のみ。サーバーは、ビットレートストリーム切り替えの結果として、別のストリームに移行するコマンドを受信しました。このコードは、ストリーム切り替えを開始する <codeph>NetStream.play2()</codeph> 呼び出しの成功ステータスのイベントを示します。切り替えが成功しない場合、サーバーは代わりに <codeph>NetStream.Play.Failed</codeph> イベントを送信します。ストリーム切り替えが発生したときは、"NetStream.Play.TransitionComplete" コードを持つ <codeph>onPlayStatus</codeph> イベントが送出されます。Flash Player 10 以降。</entry>
  </row><row>
    <entry><codeph>NetStream.Pause.Notify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>ストリームが一時停止されます。</entry>
  </row><row>
    <entry><codeph>NetStream.Unpause.Notify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>ストリームが再開されます。</entry>
  </row><row>
    <entry><codeph>NetStream.Record.Start</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>録音が開始されました。</entry>
  </row><row>
    <entry><codeph>NetStream.Record.NoAccess</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>まだ再生しているストリームまたはクライアントがアクセス権を持たないストリームを録音しようとしています。</entry>
  </row><row>
    <entry><codeph>NetStream.Record.Stop</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>録音が停止されました。</entry>
  </row><row>
    <entry><codeph>NetStream.Record.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>ストリームの録音試行が失敗しました。</entry>
  </row><row>
    <entry><codeph>NetStream.Seek.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>シークが失敗します。これは、ストリームがシーク可能でない場合に発生します。</entry>
  </row><row>
    <entry><codeph>NetStream.Seek.InvalidTime</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>プログレッシブダウンロードでダウンロードされたビデオに対して、ユーザーが現時点でダウンロード済みのビデオデータの末尾を超えて再生またはシークしようとしました。または、ファイル全体のダウンロード後にビデオの末尾を超えて再生またはシークしようとしました。<codeph>message.details</codeph> プロパティには、ユーザーがシークできる有効な末尾を示す時間コードが含まれています。</entry>
  </row><row>
    <entry><codeph>NetStream.Seek.Notify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>シーク操作が完了しました。</entry>
  </row><row>
    <entry><codeph>NetConnection.Call.BadVersion</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>識別できない形式でパケットがエンコードされています。</entry>
  </row><row>
    <entry><codeph>NetConnection.Call.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry><codeph>NetConnection.call</codeph> メソッドが、サーバー側のメソッドまたはコマンドを呼び出すことができませんでした。</entry>
  </row><row>
    <entry><codeph>NetConnection.Call.Prohibited</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>セキュリティ上の理由で AMF（Action Message Format）操作が実行できません。AMF URL が <codeph>NetConnection.call()</codeph> メソッドを呼び出しているコードを含むファイルと同じドメイン内に存在しない場合、または AMF サーバーが <codeph>NetConnection.call()</codeph> メソッドを呼び出しているコードを含むファイルのドメインを信頼するポリシーファイルを所有していない場合のいずれかです。 
	</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Closed"</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>接続が正常に切断されました。</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>接続試行が失敗しました。</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Success</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>接続試行が成功しました。</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Rejected</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>接続試行がアプリケーションにアクセスする許可を得られませんでした。</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Closed</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>P2P 接続が正常に切断されました。<codeph>info.stream</codeph> プロパティは、切断されたストリームを示します。</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>P2P 接続試行が失敗しました。<codeph>info.stream</codeph> プロパティは、失敗したストリームを示します。</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Success</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>P2P 接続試行が成功しました。<codeph>info.stream</codeph> プロパティは、成功したストリームを示します。</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Rejected</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>P2P 接続試行がもう一方のピアーにアクセスする許可を得られませんでした。<codeph>info.stream</codeph> プロパティは、拒否されたストリームを示します。</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.AppShutdown</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>指定したアプリケーションが終了中です。</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.InvalidApp</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>接続時に指定されたアプリケーション名が無効です。</entry>
  </row><row>
    <entry><codeph>SharedObject.Flush.Success</codeph></entry>
  	<entry><codeph>status</codeph></entry>
  	<entry>"pending" ステータスが解決され、<codeph>SharedObject.flush()</codeph> の呼び出しが成功しました。</entry>
  </row><row> 
    <entry><codeph>SharedObject.Flush.Failed</codeph></entry>
 	<entry><codeph>error</codeph></entry>
  	<entry>"pending" ステータスは解決されましたが、<codeph>SharedObject.flush()</codeph> は失敗しました。</entry>
  </row><row>
    <entry><codeph>SharedObject.BadPersistence</codeph></entry>
  	<entry><codeph>error</codeph></entry>
  	<entry>永続性フラグを含む共有オブジェクトが要求されましたが、別のフラグを含むオブジェクトが既に作成されていたため、要求が許可されません。</entry> 
  </row><row>
    <entry><codeph>SharedObject.UriMismatch</codeph></entry>
  	<entry><codeph>error</codeph></entry>
  	<entry>共有オブジェクトと異なる URI（URL）を持つ NetConnection オブジェクトへの接続が試行されました。</entry> 
</row></tbody></tgroup></adobetable>
	<p>バッファーに関するエラーが繰り返し表示される場合は、<codeph>NetStream.bufferTime</codeph> プロパティを使用してバッファーを変更してみてください。</p>

	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection クラス</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
 MouseEvent オブジェクトは、マウスイベントが発生するたびにイベントフローに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Mouse イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 MouseEvent オブジェクトは、マウスイベントが発生するたびにイベントフローに送出されます。 通常、マウスイベントは、マウスやトラックボールなど、ポインターを使用したユーザー入力デバイスによって生成されます。 
 
 <p>ネストされたノードが関係する場合、マウスイベントは、表示リストで確認できる最も深くネストされたノードをターゲットにします。このノードは<i>ターゲットノード</i>と呼ばれます。ターゲットノードの祖先がマウスイベントの通知を受け取るようにするには、祖先ノードで <codeph>EventDispatcher.addEventListener()</codeph> を使用する際に、検出する特定のマウスイベントを <codeph>type</codeph> パラメーターに設定します。</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as"> 次の例では、<codeph>MouseEventExample</codeph> クラスと <codeph>ChildSprite</codeph> クラスを使用し、単純なイメージを使用してマウスイベントが送出される方法を示します。この例では、次の処理を実行します。
 <ol>
    <li>後で四角形の描画に使用するサイズ（100 × 100 ピクセル）と背景色（オレンジ色）のプロパティを宣言します。</li>
     <li>コンストラクターが新しい ChildSprite オブジェクト <codeph>child</codeph> を作成します。コンストラクターは、<codeph>draw()</codeph> メソッドを呼び出して、オレンジ色の 100 × 100 ピクセルの四角形を (0,0) の座標に描画し、次に 7 つのイベントリスナーとサブスクライバを追加します。
     <ul>
         <li><codeph>click</codeph>/<codeph>clickHandler()</codeph>：四角形の上で左マウスボタンがクリックされたときに送出されます。</li>
         <li><codeph>doubleClick</codeph>/<codeph>doubleClickHandler()</codeph>：四角形の上で左マウスボタンがダブルクリックされたときに送出されます。</li>
         <li><codeph>mouseDown</codeph>/<codeph>mouseDownHandler()</codeph>：ChildSprite オブジェクト（オレンジ色の四角形）がクリックされると、<codeph>trace()</codeph> メッセージが画面に表示されます。次に、<codeph>ChildSprite.draw()</codeph> が呼び出されて、<codeph>mouseOverHandler()</codeph> で描画された明るい青色の四角形の位置に暗い黄色の四角形を描画します。また、<codeph>mouseDownHandler()</codeph> メソッドによって <codeph>mouseMove</codeph> イベントリスナーと <codeph>mouseMoveHandler()</codeph> サブスクライバ（後で説明）が追加されます。これによって、マウスの移動が処理されます。次に <codeph>startDrag()</codeph> メソッドが呼び出されます。これによって Sprite オブジェクトのドラッグが可能になります。</li>
         <li><codeph>mouseOut</codeph>/<codeph>mouseOutHandler()</codeph>：ポインターが四角形の領域を離れると送出されます。<codeph>draw()</codeph> メソッドによって、四角形のサイズとカラーを通常の状態に戻します。</li>
         <li><codeph>mouseOver</codeph>/<codeph>mouseOverHandler()</codeph>：マウスポインターが四角形に重なると送出されます。このメソッドは、暗い黄色の背景色で四角形を大きく再描画します。</li>
         <li><codeph>mouseUp</codeph>/<codeph>mouseUpHandler()</codeph>：ユーザーがマウスボタンを離すと、<codeph>mouseMove</codeph> イベントリスナーが削除され、<codeph>stopDrag</codeph> が呼び出されます。これによって、四角形の位置が固定されます。</li> 
      <li><codeph>mouseMove</codeph>/<codeph>mouseMoveHandler()</codeph>：<codeph>mouseDownHandler()</codeph> 関数の一部として呼び出され、ユーザーがマウス左ボタンを押しながら四角形をドラッグすると送出されます。</li>
         <li><codeph>mouseWheel</codeph>/<codeph>mouseWheelHandler()</codeph>：四角形の上でマウスホイールを回転させるたびに送出されます。</li>
 </ul></li>
    <li>ChildSprite インスタンス <codeph>child</codeph> が、<codeph>addChild()</codeph> を使用して表示リストに追加され、オレンジ色の四角形が直ちに描画されます。</li>
 </ol> 
 
 <p><b>注意：</b></p>
 <ul>
     <li><codeph>MouseEventExample</codeph> クラスは、ドキュメントルートにあることが必要です。</li>
    <li>前述したイベントメソッドの中には、ローカル変数 <codeph>sprite</codeph> を宣言するものがあります。この変数には、Sprite 型への <codeph>event.target</codeph> のキャストが割り当てられます。</li>
 </ul>
<codeblock>
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu"><apiName>contextMenu</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick"><apiName>doubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick"><apiName>middleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown"><apiName>middleMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp"><apiName>middleMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> 次に単純な描画プログラムの例を示します。ユーザーはメインの Sprite オブジェクトまたはそれより小さい矩形の Sprite オブジェクトの上に描画できます。 
   
 <p>コンストラクターで、矩形の <codeph>innerRect</codeph> Sprite オブジェクトを作成し、線スタイルを緑に設定します。 <codeph>MouseEvent_MOUSE_MOVEExample</codeph> Sprite コンテナへの描画に使用する線スタイルを赤に設定します。<codeph>MouseEvent.MOUSE_UP</codeph> イベントと <codeph>MouseEvent.MOUSE_DOWN</codeph> イベントのイベントリスナーをアプリケーションのメイン Sprite オブジェクトと <codeph>innerRect</codeph> Sprite オブジェクトに個別に追加します。MOUSE_DOWN イベントリスナーでは、どちらの場合も、現在の描画位置をマウスポインターの位置に移動し、<codeph>MouseEvent.MOUSE_MOVE</codeph> イベントのリスナーを追加しています。マウスポインターが移動すると、呼び出されたイベントリスナーメソッドがポインターに追随し、<codeph>graphics.LineTo()</codeph> メソッドを使用して線を描画します。 （<b>注意：</b><codeph>innerRect</codeph> Sprite オブジェクトの背後に描画されたメイン Sprite オブジェクトの赤線は、矩形に隠れて見えなくなります。）<codeph>MouseEvent.MOUSE_UP</codeph> イベントが発生すると、<codeph>MOUSE_MOVE</codeph> イベントのリスナーが削除され、描画が終了します。</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut"><apiName>mouseOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver"><apiName>mouseOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel"><apiName>mouseWheel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown"><apiName>RightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut"><apiName>rollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver"><apiName>rollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
     マウスイベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。<codeph>MouseEvent.CLICK</codeph>、<codeph>MouseEvent.DOUBLE_CLICK</codeph>、<codeph>MouseEvent.MOUSE_DOWN</codeph>、<codeph>MouseEvent.MOUSE_MOVE</codeph>、<codeph>MouseEvent.MOUSE_OUT</codeph>、<codeph>MouseEvent.MOUSE_OVER</codeph>、<codeph>MouseEvent.MOUSE_UP</codeph>、<codeph>MouseEvent.MIDDLE_CLICK</codeph>、<codeph>MouseEvent.MIDDLE_MOUSE_DOWN</codeph>、<codeph>MouseEvent.MIDDLE_MOUSE_UP</codeph>、<codeph>MouseEvent.RIGHT_CLICK</codeph>、<codeph>MouseEvent.RIGHT_MOUSE_DOWN</codeph>、<codeph>MouseEvent.RIGHT_MOUSE_UP</codeph>、<codeph>MouseEvent.MOUSE_WHEEL</codeph>、<codeph>MouseEvent.ROLL_OUT</codeph>、および <codeph>MouseEvent.ROLL_OVER</codeph>。 
	 
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。
	 </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>スプライトを基準とするイベント発生位置の水平座標です。
	 </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>スプライトを基準とするイベント発生位置の垂直座標です。
	 </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>イベントの影響を受ける補完的な InteractiveObject インスタンスです。例えば、<codeph>mouseOut</codeph> イベントが発生した場合、<codeph>relatedObject</codeph> はポインティングデバイスが現在指している表示リストオブジェクトを表します。
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Windows または Linux では、Ctrl キーがアクティブになっているかどうかを示します。Macintosh では、Ctrl キーと Command キーのいずれがアクティブになっているかどうかを示します。
     </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Alt キーがアクティブになっているかどうかを示します（Windows または Linux のみ）。
	 </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Shift キーがアクティブになっているかどうかを示します。
	 </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>マウスの主ボタンが押されているか押されていないかを示します。
	 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>ユーザーがマウスホイールを 1 目盛り回すごとにスクロールする行数を示します。正の delta 値は上方向へのスクロールを表します。負の値は下方向へのスクロールを表します。一般的な値は 1 ～ 3 の範囲ですが、ホイールの回転が速くなると、delta の値は大きくなります。このパラメーターは、<codeph>MouseEvent.mouseWheel</codeph> イベントのみで使用されます。
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>（AIR のみ）Command キーがアクティブになっているかどうかを示します（Macintosh のみ）。このパラメーターは、<codeph>MouseEvent.click</codeph>、<codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleClick</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightClick</codeph>、<codeph>MouseEvent.rightMouseDown</codeph>、<codeph>MouseEvent.rightMouseUp</codeph>、<codeph>MouseEvent.doubleClick</codeph> の各イベントのみで使用されます。このパラメーターは Adobe AIR 専用です。Flash Player コンテンツに対しては設定しないでください。
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>（AIR のみ）Control キーまたは Ctrl キーがアクティブになっているかどうかを示します。このパラメーターは、<codeph>MouseEvent.click</codeph>、<codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleClick</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightClick</codeph>、<codeph>MouseEvent.rightMouseDown</codeph>、<codeph>MouseEvent.rightMouseUp</codeph>、<codeph>MouseEvent.doubleClick</codeph> の各イベントのみで使用されます。このパラメーターは Adobe AIR 専用です。Flash Player コンテンツに対しては設定しないでください。
	</apiDesc></apiParam><apiParam><apiItemName>clickCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>（AIR のみ）マウスイベントがマルチクリックシーケンスの一部かどうかを示します。このパラメーターは、<codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightMouseDown</codeph> および <codeph>MouseEvent.rightMouseUp</codeph> 以外のマウスイベントでは 0 になります。シングルクリック、ダブルクリックまたは任意のマルチクリックシーケンスを監視するには、<codeph>clickCount</codeph> パラメーターを使用します。このパラメーターは Adobe AIR 専用です。Flash Player コンテンツに対しては設定しないでください。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>MouseEvent オブジェクトのコンストラクターです。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     マウスイベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone"><apiName>clone</apiName><shortdesc>
	MouseEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい MouseEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	MouseEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString"><apiName>toString</apiName><shortdesc>
	MouseEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>MouseEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	MouseEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph> [MouseEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ... delta= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	表示リストが変更されている場合、このイベントの処理が終了した後にレンダリングするよう Flash Player または Adobe AIR に指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	表示リストが変更されている場合、このイベントの処理が終了した後にレンダリングするよう Flash Player または Adobe AIR に指示します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	click イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>click</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU"><apiName>CONTEXT_MENU</apiName><shortdesc>
	MouseEvent.CONTEXT_MENU 定数は、type プロパティ（contextMenu イベントオブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contextMenu</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>MouseEvent.CONTEXT_MENU</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>contextMenu</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの右ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK"><apiName>DOUBLE_CLICK</apiName><shortdesc>
	doubleClick イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>doubleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>doubleClick</codeph> イベントオブジェクト）の値を定義します。<codeph>doubleClickEnabled</codeph> プロパティは、<codeph>true</codeph> である必要があります（オブジェクトで <codeph>doubleClick</codeph> イベントを生成する場合）。
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK"><apiName>MIDDLE_CLICK</apiName><shortdesc>
	middleClick イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>middleClick</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN"><apiName>MIDDLE_MOUSE_DOWN</apiName><shortdesc>
	middleMouseDown イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>middleMouseDown</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの中央ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP"><apiName>MIDDLE_MOUSE_UP</apiName><shortdesc>
	middleMouseUp イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>middleMouseUp</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの中央ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	mouseDown イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseDown</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows および Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>この定数の使用方法については、<xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 定数の例を参照してください。 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
	mouseMove イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseMove</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> 次に単純な描画プログラムの例を示します。ユーザーはメインの Sprite オブジェクトまたはそれより小さい矩形の Sprite オブジェクトの上に描画できます。 
   
 <p>コンストラクターで、矩形の <codeph>innerRect</codeph> Sprite オブジェクトを作成し、線スタイルを緑に設定します。 <codeph>MouseEvent_MOUSE_MOVEExample</codeph> Sprite コンテナへの描画に使用する線スタイルを赤に設定します。<codeph>MouseEvent.MOUSE_UP</codeph> イベントと <codeph>MouseEvent.MOUSE_DOWN</codeph> イベントのイベントリスナーをアプリケーションのメイン Sprite オブジェクトと <codeph>innerRect</codeph> Sprite オブジェクトに個別に追加します。MOUSE_DOWN イベントリスナーでは、どちらの場合も、現在の描画位置をマウスポインターの位置に移動し、<codeph>MouseEvent.MOUSE_MOVE</codeph> イベントのリスナーを追加しています。マウスポインターが移動すると、呼び出されたイベントリスナーメソッドがポインターに追随し、<codeph>graphics.LineTo()</codeph> メソッドを使用して線を描画します。 （<b>注意：</b><codeph>innerRect</codeph> Sprite オブジェクトの背後に描画されたメイン Sprite オブジェクトの赤線は、矩形に隠れて見えなくなります。）<codeph>MouseEvent.MOUSE_UP</codeph> イベントが発生すると、<codeph>MOUSE_MOVE</codeph> イベントのリスナーが削除され、描画が終了します。</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT"><apiName>MOUSE_OUT</apiName><shortdesc>
	mouseOut イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseOut</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>ポインティングデバイスが現在指している表示リストオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER"><apiName>MOUSE_OVER</apiName><shortdesc>
	mouseOver イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseOver</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>ポインティングデバイスが指していた表示リストオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	mouseUp イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseUp</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>この定数の使用方法については、<xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 定数の例を参照してください。 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL"><apiName>MOUSE_WHEEL</apiName><shortdesc>
	mouseWheel イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseWheel</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>delta</codeph></entry><entry>マウスホイールを 1 目盛り回すごとにスクロールする行数を示します。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	rightClick イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>rightClick</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	rightMouseDown イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>rightMouseDown</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	rightMouseUp イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>rightMouseUp</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの右ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>マウスのクリック回数です。イベントがマルチクリックシーケンスの一部かどうかを示します。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
	rollOut イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>rollOut</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>ポインティングデバイスが現在指している表示リストオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
	rollOver イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>rollOver</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>Alt キーがアクティブになっている場合は <codeph>true</codeph>（Windows または Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>ポインティングデバイスが指していた表示リストオブジェクトです。</entry></row><row><entry><codeph>localX</codeph></entry><entry>スプライトを基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>localY</codeph></entry><entry>スプライトを基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
    Alt キーがアクティブになっているか（true）非アクティブになっているか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    Alt キーがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。Windows および Linux のオペレーティングシステムでのみサポートされます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get"><apiName>buttonDown</apiName><shortdesc>
	マウスの主ボタンが押されているか（true）押されていないか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	マウスの主ボタンが押されているか（<codeph>true</codeph>）押されていないか（<codeph>false</codeph>）を示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get"><apiName>clickCount</apiName><shortdesc>
	マウスダウンイベントがマルチクリックシーケンスの一部かどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	マウスダウンイベントがマルチクリックシーケンスの一部かどうかを示します。 このパラメーターは、<codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightMouseDown</codeph> および <codeph>MouseEvent.rightMouseUp</codeph> 以外のマウスイベントでは 0 になります。 シングルクリック、ダブルクリックまたは任意のマルチクリックシーケンスを監視するには、<codeph>clickCount</codeph> パラメーターを使用します。 例えば、最初の <codeph>MouseEvent.mouseDown</codeph> と <codeph>MouseEvent.mouseUp</codeph> の <codeph>clickCount</codeph> は 1 で、ダブルクリックシーケンスでの 2 番目の <codeph>MouseEvent.mouseDown</codeph> と <codeph>MouseEvent.mouseUp</codeph> の <codeph>clickCount</codeph> は 2 になります。 マウスが十分に移動した場合、または何らかの理由でマルチクリックシーケンスが妨げられた場合、次の <codeph>MouseEvent.mouseDown</codeph> の clickCount は 1 になります。 doubleClick イベントは引き続き期待どおりに発生します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	command キーがアクティブになっているかどうかを示します（Macintosh のみ）。Macintish では、commandKey プロパティの値は ctrlKey プロパティの値と同じです。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	command キーがアクティブになっているかどうかを示します（Macintosh のみ）。 
	
	<p>Macintish では、<codeph>commandKey</codeph> プロパティの値は <codeph>ctrlKey</codeph> プロパティの値と同じです。 Windows または Linux では常に false です。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Mac で Control キーがアクティブになっているか、および Windows や Linux で Ctrl キーがアクティブになっているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Mac で Control キーがアクティブになっているか、および Windows や Linux で Ctrl キーがアクティブになっているかどうかを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	Windows または Linux で、Ctrl キーがアクティブ（true）か非アクティブ（false）かを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Windows または Linux で、Ctrl キーがアクティブ（<codeph>true</codeph>）か非アクティブ（<codeph>false</codeph>）かを示します。Macintosh では、Control キーと Command キーのいずれがアクティブになっているかどうかを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get"><apiName>delta</apiName><shortdesc>
	ユーザーがマウスホイールを 1 目盛り回すごとにスクロールする行数を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	ユーザーがマウスホイールを 1 目盛り回すごとにスクロールする行数を示します。正の delta 値は上方向へのスクロールを表します。負の値は下方向へのスクロールを表します。一般的な値は 1 ～ 3 の範囲ですが、ホイールの回転が速くなると、delta の値は大きくなります。この設定は、デバイスやオペレーティングシステムによって異なります。通常はユーザーが構成できます。このプロパティは、<codeph>MouseEvent.mouseWheel</codeph> イベントにのみ適用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 true の場合、relatedObject プロパティは、セキュリティサンドボックスに関連する理由により null に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>true</codeph> の場合、<codeph>relatedObject</codeph> プロパティは、セキュリティサンドボックスに関連する理由により、<codeph>null</codeph> に設定されます。<codeph>relatedObject</codeph> の公称値が別のサンドボックスにある DisplayObject への参照である場合、このサンドボックスの境界をまたいで両方向に権限がある場合を除いては、<codeph>relatedObject</codeph> は <codeph>null</codeph> に設定されます。権限を確立するには、SWF ファイルから <codeph>Security.allowDomain()</codeph> を呼び出すか、イメージファイルのサーバーからポリシーファイルを提供し、<codeph>LoaderContext.checkPolicyFile</codeph> プロパティを設定してイメージを読み込みます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/relatedObject"><linktext>MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get"><apiName>localX</apiName><shortdesc>
	スプライトを基準とするイベント発生位置の水平座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	スプライトを基準とするイベント発生位置の水平座標です。
	
	</apiDesc><example>このプロパティの使用方法については、<xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 定数の例を参照してください。
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get"><apiName>localY</apiName><shortdesc>
	スプライトを基準とするイベント発生位置の垂直座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	スプライトを基準とするイベント発生位置の垂直座標です。
	
	</apiDesc><example>このプロパティの使用方法については、<xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 定数の例を参照してください。
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	イベントに関連する表示リストオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	イベントに関連する表示リストオブジェクトへの参照です。例えば、<codeph>mouseOut</codeph> イベントが発生した場合、<codeph>relatedObject</codeph> はポインティングデバイスが現在指している表示リストオブジェクトを表します。このプロパティは、<codeph>mouseOut</codeph>、<codeph>mouseOver</codeph>、<codeph>rollOut</codeph> および <codeph>rollOver</codeph> の各イベントにのみ適用されます。
	<p>このプロパティの値は、関連オブジェクトがない場合、または関連オブジェクトはあるがアクセスできないセキュリティサンドボックスの中にある場合の 2 つの状況の場合に、<codeph>null</codeph> になる可能性があります。<codeph>isRelatedObjectInaccessible()</codeph> プロパティを使用して、どの理由が適用されるかを判別します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible"><linktext>MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Shift キーがアクティブになっているか（true）非アクティブになっているか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Shift キーがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get"><apiName>stageX</apiName><shortdesc>
	グローバルステージ座標を基準とするイベント発生位置の水平座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	グローバルステージ座標を基準とするイベント発生位置の水平座標です。このプロパティは、<codeph>localX</codeph> プロパティが設定されている場合に計算されます。
	
	</apiDesc><example>このプロパティの使用方法については、<xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 定数の例を参照してください。 
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get"><apiName>stageY</apiName><shortdesc>
	グローバルステージ座標を基準とするイベント発生位置の垂直座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	グローバルステージ座標を基準とするイベント発生位置の垂直座標です。このプロパティは、<codeph>localY</codeph> プロパティが設定されている場合に計算されます。
	
	</apiDesc><example>このプロパティの使用方法については、<xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 定数の例を参照してください。
	</example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
	
	NetStream オブジェクトは、DRM (デジタル著作権管理) によって保護されたコンテンツが正常な再生を開始したとき (バウチャーが検証され、ユーザーが認証されてコンテンツを表示することを承認されたとき) に DRMStatusEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>DRM 対応オブジェクトのイベントオブジェクトです。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	
	NetStream オブジェクトは、DRM（デジタル著作権管理）によって保護されたコンテンツが正常な再生を開始したとき（バウチャーが検証され、ユーザーが認証されてコンテンツを表示することを承認されたとき）に DRMStatusEvent オブジェクトを送出します。DRMStatusEvent オブジェクトには、コンテンツがオフラインでも使用可能になっているか、またはバウチャーの期限が切れたときにコンテンツを表示できなくなるかなど、バウチャーに関連する情報が含まれています。アプリケーションはポリシーと権限のステータスをこのデータを使ってユーザーに通知できます。
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS"><linktext>DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
 	    DRM ステータスイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent, constructor
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。DRMAuthenticate イベントのタイプは <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> の 1 つのみです。
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
		</apiDesc></apiParam><apiParam><apiItemName>inPolicies</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>カスタム DRM プロパティを含むカスタムオブジェクトです。  		
		</apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>イベントのコンテキストです。  		
		</apiDesc></apiParam><apiParam><apiItemName>inAvailableOffline</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>コンテンツがオフラインで表示可能かどうかを示します。
		</apiDesc></apiParam><apiParam><apiItemName>inAnonymous</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>匿名ユーザーがコンテンツにアクセスできるかどうかを示します。
		</apiDesc></apiParam><apiParam><apiItemName>inVoucherEndDate</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>コンテンツバウチャーの有効期限の日付をエポック値で表したものです。
		</apiDesc></apiParam><apiParam><apiItemName>inOfflineLeasePeriod</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>ユーザーがコンテンツをオフラインで表示できる残りの日数です。
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inVoucher</apiItemName><apiOperationClassifier>flash.net.drm:DRMVoucher</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inLocal</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
 	    DRM ステータスイベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone"><apiName>clone</apiName><shortdesc>
		DRMStatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい DRMStatusEvent オブジェクトです。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		DRMStatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString"><apiName>toString</apiName><shortdesc>
		DRMStatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DRMStatusEvent オブジェクトのすべてのプロパティを含むストリングです。
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		DRMStatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS"><apiName>DRM_STATUS</apiName><shortdesc>
		DRMStatusEvent.DRM_STATUS 定数は、drmStatus イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMStatusEvent.DRM_STATUS</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>drmStatus</codeph> イベントオブジェクト）の値を定義します。 
		
		
		<p>このイベントには、次のプロパティがあります。</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>detail</codeph></entry><entry>ステータスイベントのコンテキストを説明するストリングです。</entry></row><row><entry><codeph>isAnonymous</codeph></entry><entry>DRM 暗号化で保護されたコンテンツが認証資格情報をユーザーに要求することなく使用可能であるかどうかを示します。</entry></row><row><entry><codeph>isAvailableOffline</codeph></entry><entry>DRM 暗号化で保護されたコンテンツがオフラインで使用可能かどうかを示します。</entry></row><row><entry><codeph>offlineLeasePeriod</codeph></entry><entry>コンテンツをオフラインで表示できる残りの日数です。</entry></row><row><entry><codeph>policies</codeph></entry><entry>DRM ステータスイベントのカスタムオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream オブジェクトです。</entry></row><row><entry><codeph>voucherEndDate</codeph></entry><entry>バウチャーが期限切れとなり、ユーザーがコンテンツを表示できなくなる日の絶対日付です。</entry></row><row><entry><codeph>contentData</codeph></entry><entry>コンテンツの DRMContentData です。</entry></row><row><entry><codeph>voucher</codeph></entry><entry>コンテンツの DRMVoucher オブジェクトです。</entry></row><row><entry><codeph>isLocal</codeph></entry><entry>ローカルファイルシステムにコンテンツが保存されているかどうかを示します。</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get"><apiName>detail</apiName><shortdesc>
		ステータスイベントのコンテキストを説明するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		ステータスイベントのコンテキストを説明するストリングです。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get"><apiName>isAnonymous</apiName><shortdesc>
		DRM（デジタル著作権管理）暗号化で保護されたコンテンツが、ユーザーが認証資格情報を提供しなくても使用できるかどうかを示します。ユーザーが認証資格情報を提供しなくても使用できる場合、値は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		DRM（デジタル著作権管理）暗号化で保護されたコンテンツが、ユーザーが認証資格情報を提供しなくても使用できるかどうかを示します。ユーザーが認証資格情報を提供しなくても使用できる場合、値は <codeph>true</codeph> です。それ以外の場合、値は <codeph>false</codeph> であり、ユーザーは、コンテンツプロバイダーが認識して予想しているものと一致するユーザー名とパスワードを提供する必要があります。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get"><apiName>isAvailableOffline</apiName><shortdesc>
		DRM（デジタル著作権管理）暗号化で保護されたコンテンツがオフラインで使用できるかどうかを示します。オフラインで使用できる場合、値は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		DRM（デジタル著作権管理）暗号化で保護されたコンテンツがオフラインで使用できるかどうかを示します。オフラインで使用できる場合、値は <codeph>true</codeph> です。それ以外の場合、値は <codeph>false</codeph> です。
		<p>
		デジタル保護されたコンテンツをオフラインで使用するには、そのバウチャーがユーザーのローカルマシンにキャッシュされている必要があります （アプリケーションは、コンテンツをオフラインで使用可能にするためにコンテンツの格納場所を決定します）。
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get"><apiName>offlineLeasePeriod</apiName><shortdesc>
		コンテンツをオフラインで表示できる残りの日数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		コンテンツをオフラインで表示できる残りの日数です。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get"><apiName>policies</apiName><shortdesc>
		DRM ステータスイベントのカスタムオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		DRM ステータスイベントのカスタムオブジェクトです。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get"><apiName>voucherEndDate</apiName><shortdesc>
		バウチャーが期限切れとなり、ユーザーがコンテンツを表示できなくなる日の絶対日付です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
		バウチャーが期限切れとなり、ユーザーがコンテンツを表示できなくなる日の絶対日付です。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 DRM で保護されているコンテンツを表示するバウチャーの取得に必要な情報が含まれている DRMContentData オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 DRM で保護されているコンテンツを表示するバウチャーの取得に必要な情報が含まれている DRMContentData オブジェクトです。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:set"><apiName>isLocal</apiName><shortdesc>
		 ローカルのバウチャー格納にバウチャーがキャッシュされているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 ローカルのバウチャー格納にバウチャーがキャッシュされているかどうかを示します。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:set"><apiName>voucher</apiName><shortdesc>
		 コンテンツの DRMVoucher オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc>
		 コンテンツの DRMVoucher オブジェクトです。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	AsyncErrorEvent は、非同期のネイティブコードから例外がスローされるときに、LocalConnection、NetConnection、SharedObject、NetStream などのオブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>AsyncErrorEvent イベントのイベントオブジェクトです。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	AsyncErrorEvent は、非同期のネイティブコードから例外がスローされるときに、LocalConnection、NetConnection、<ph platform="actionscript">SharedObject</ph>、NetStream などのオブジェクトによって送出されます。 非同期のエラーイベントのタイプは <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> の 1 つのみです。
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR"><linktext>ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	asyncError イベントに関する情報を含む AsyncErrorEvent オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。エラーイベントのタイプは <codeph>ErrorEvent.ERROR</codeph> の 1 つのみです。
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトでバブリングを実行できるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。<ph platform="javascript">このプロパティは、ActionScript 3.0 表示アーキテクチャを使用する、SWF コンテンツ内の表示オブジェクトに適用されます。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーメッセージとして表示されるテキストです。イベントリスナーは、<codeph>text</codeph> プロパティを通じてこの情報にアクセスできます。
	
	</apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier><apiData>null</apiData><apiDesc>発生した例外です。 エラーが null 以外の場合、イベントの <codeph>errorId</codeph> プロパティはエラーの <codeph>errorId</codeph> プロパティから設定されます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>AsyncErrorEvent オブジェクトのコンストラクターです。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	asyncError イベントに関する情報を含む AsyncErrorEvent オブジェクトを作成します。イベントリスナーには AsyncErrorEvent オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	AsyncErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい AsyncErrorEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	AsyncErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	AsyncErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>AsyncErrorEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	AsyncErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[AsyncErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... error=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR"><apiName>ASYNC_ERROR</apiName><shortdesc>
	AsyncErrorEvent.ASYNC_ERROR 定数は、asyncError イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>asyncError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>asyncError</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph>。<ph platform="javascript">このプロパティは、SWF ファイル内の ActionScript 3.0 表示オブジェクトに適用されます。</ph></entry> </row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。<ph platform="javascript">このプロパティは、ActionScript 3.0 表示アーキテクチャを使用する、SWF コンテンツ内の表示オブジェクトに適用されます。</ph></entry> </row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。<ph platform="javascript">このプロパティは、ActionScript 3.0 表示アーキテクチャを使用する、SWF コンテンツ内の表示オブジェクトに適用されます。</ph></entry> </row><row><entry><codeph>target</codeph></entry> <entry>イベントを送出するオブジェクトです。</entry> </row><row><entry><codeph>error</codeph></entry><entry>イベントをトリガーしたエラーです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error"><apiName>error</apiName><shortdesc>
	スローされた例外です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Error</apiValueClassifier></apiValueDef><apiDesc>
	スローされた例外です。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
 StatusEvent オブジェクトは、カメラやマイクなどのデバイス、または LocalConnection オブジェクトなどのオブジェクトがそのステータスを報告したときにオブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>StatusEvent イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 StatusEvent オブジェクトは、カメラやマイクなどのデバイス、または LocalConnection オブジェクトなどのオブジェクトがそのステータスを報告したときにオブジェクトによって送出されます。 ステータスイベントのタイプは <codeph>StatusEvent.STATUS</codeph> の 1 つのみです。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link><link href="air.net.xml#ServiceMonitor"><linktext>air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
	 ステータスイベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。ステータスイベントのタイプは <codeph>StatusEvent.STATUS</codeph> の 1 つのみです。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	 </apiDesc></apiParam><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>オブジェクトのステータスの説明です。イベントリスナーは、<codeph>code</codeph> プロパティを通じてこの情報にアクセスできます。
	 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc><codeph>"status"</codeph>、<codeph>"warning"</codeph>、<codeph>"error"</codeph> など、メッセージのカテゴリです。イベントリスナーは、<codeph>level</codeph> プロパティを通じてこの情報にアクセスできます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>StatusEvent オブジェクトのコンストラクターです。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 ステータスイベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#StatusEvent/STATUS"><linktext>STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone"><apiName>clone</apiName><shortdesc>
	 StatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい StatusEvent オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 StatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString"><apiName>toString</apiName><shortdesc>
	 StatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>StatusEvent オブジェクトのすべてのプロパティを含むストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 StatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	 <p><codeph>[StatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> code=<i>value</i> level=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS"><apiName>STATUS</apiName><shortdesc>
     status イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>status</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>type</codeph> プロパティ（<codeph>status</codeph> イベントオブジェクト）の値を定義します。
	 <p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>code</codeph></entry><entry>オブジェクトのステータスの説明です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>level</codeph></entry><entry><codeph>"status"</codeph>、<codeph>"warning"</codeph>、<codeph>"error"</codeph> など、メッセージのカテゴリです。</entry></row><row><entry><codeph>target</codeph></entry><entry>そのステータスをレポートするオブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get"><apiName>code</apiName><shortdesc>
	 オブジェクトのステータスの説明です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 オブジェクトのステータスの説明です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get"><apiName>level</apiName><shortdesc>
 	 "status"、"warning"、"error" など、メッセージのカテゴリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 	 <codeph>"status"</codeph>、<codeph>"warning"</codeph>、<codeph>"error"</codeph> など、メッセージのカテゴリです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
	 DRMManager オブジェクトの authenticate() メソッドの呼び出しに失敗したときに、DRMManager が DRMAuthenticationErrorEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DRMManager オブジェクトの <codeph>authenticate()</codeph> メソッドの呼び出しに失敗したときに、DRMManager が DRMAuthenticationErrorEvent オブジェクトを送出します。
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
		 DRMAuthenticationErrorEvent オブジェクトの新しいインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベント型ストリング
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>イベントが表示リストにバブルアップするかどうかを示します。
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>イベントがキャンセル可能かどうかを示します。
		 </apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーの説明
		 </apiDesc></apiParam><apiParam><apiItemName>inErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>エラーの一般的なタイプの ID
		 </apiDesc></apiParam><apiParam><apiItemName>inSubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>そのタイプの中で特定のエラーを示す ID
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ログインしているサーバーの URL
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ログインしているサーバーの認証されたドメイン
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 DRMAuthenticationErrorEvent オブジェクトの新しいインスタンスを作成します。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR"><apiName>AUTHENTICATION_ERROR</apiName><shortdesc>
		 イベントリスナーを追加および削除するときに、type パラメーターの認証エラーイベントに使用されるストリング定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>AuthenticationError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 イベントリスナーを追加および削除するときに、type パラメーターの認証エラーイベントに使用されるストリング定数です。
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:set"><apiName>subErrorID</apiName><shortdesc>
		 より詳しいエラーコード。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 より詳しいエラーコード。
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:IEventDispatcher"><apiName>IEventDispatcher</apiName><shortdesc>
IEventDispatcher インターフェイスは、イベントリスナーを追加または削除するメソッドの定義、特定のタイプのイベントリスナーが登録されているかどうかのチェック、およびイベントの送出を行います。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
IEventDispatcher インターフェイスは、イベントリスナーを追加または削除するメソッドの定義、特定のタイプのイベントリスナーが登録されているかどうかのチェック、およびイベントの送出を行います。

<p>イベントターゲットは、Flash<sup>®</sup> Player および Adobe AIR イベントモデルの重要な部分です。 イベントターゲットは、イベントが表示リスト階層をどのように流れるかに関して中心的な役割を果たします。マウスのクリックやキー押下などのイベントが発生すると、イベントオブジェクトが表示リストのルートからイベントフローに送出されます。 イベントオブジェクトはイベントターゲットとの間を往復します。これは、概念として次の 3 つの段階に分けられます。キャプチャ段階は、ルートからイベントターゲットのノードの直前のノードまでが対象となります。ターゲット段階は、イベントのターゲットノードのみが対象となります。バブリング段階は、表示リストのルートまでの戻りにあるすべての後続ノードが対象となります。</p>

<p>一般に、ユーザー定義クラスがイベント送出機能を得る最も簡単な方法は、EventDispatcher を拡張することです。クラスが既に別のクラスを拡張していて拡張が不可能な場合、代わりに IEventDispatcher インターフェイスを実装し、EventDispatcher メンバーを作成して、集約された EventDispatcher に呼び出しをルーティングする単純なフックを記述できます。</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as"> 次の例では、IEventDispatcherExample クラスおよび DecoratedDispatcher サンプルクラスを使用して、IEventDispatcher クラスの実装方法と使用方法を示します。これを行うには、DecoratedDispatcher の各メソッドを EventDispatcher と同じ方法で実装します。IEventDispatcherExample のコンストラクターで、DecoratedDispatcher クラスの新しいインスタンスを <codeph>decorDispatcher</codeph> という名前で作成します。また、この <codeph>decorDispatcher</codeph> 変数を使用して、<codeph>addEventListener()</codeph> をカスタムイベント <codeph>doSomething</codeph> で呼び出します。このカスタムイベントは <codeph>didSomething()</codeph> で処理され、<codeph>trace()</codeph> を使用してテキストの 1 行を印刷します。
<codeblock> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace(">> didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>イベントを処理するリスナー関数です。次の例のように、この関数は、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないようにします。
	<p><codeph>function(evt:Event):void</codeph></p>
	関数の名前は任意に付けられます。
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。<codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph>useCapture</codeph> を <codeph>false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph>addEventListener()</codeph> を 2 回呼び出します。<codeph>useCapture</codeph> を <codeph>true</codeph> に設定して 1 度呼び出し、<codeph>useCapture</codeph> を <codeph>false</codeph> に設定してもう一度呼び出します。
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>イベントリスナーの優先度レベルです。優先度は、32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i>n</i> のすべてのリスナーは、優先度が <i>n-1</i> のリスナーよりも前に処理されます。 複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。 デフォルトの優先度は 0 です。 
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p>クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph>useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph>true</codeph> に設定できます。inner 関数がネストしているリスナーの <codeph>useWeakReference</codeph> を <codeph>true</codeph> に設定すると、この関数はガベージコレクションの対象となり、永続化されなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。
	<p>イベントリスナーが正常に登録された後に、<codeph>addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph>removeEventListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。</p>
	<p>リスナーが登録された後に、<codeph>addEventListener()</codeph> (<codeph>type</codeph> または <codeph>useCapture</codeph> に別の値を設定) を再度呼び出すと、別のリスナー登録が作成されることに注意してください。たとえば、最初にリスナーを登録するときに <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph>addEventListener()</codeph> を呼び出すと (このとき、<codeph>useCapture</codeph> に <codeph>false</codeph> を設定) 、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</p>
	<p>ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	<p>イベントリスナーが不要になった場合は、<codeph>EventDispatcher.removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクターは参照を有するオブジェクトを削除しないため、登録されているイベントリスナーに関係したオブジェクトはメモリから自動的に除去されません。</p>
	<p>EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	<p>イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	<p>イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	イベントをイベントフローに送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> を返します（イベントで <codeph>preventDefault()</codeph> が呼び出されない限り）。呼び出された場合は <codeph>false</codeph> を返します。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>イベントフローに送出されるイベントオブジェクトです。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	イベントをイベントフローに送出します。イベントターゲットは EventDispatcher オブジェクトです。これに対して <codeph>dispatchEvent()</codeph> が呼び出されます。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	EventDispatcher オブジェクトに、特定のイベントタイプに対して登録されたリスナーがあるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定したタイプのリスナーが登録されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	EventDispatcher オブジェクトに、特定のイベントタイプに対して登録されたリスナーがあるかどうかを確認します。これにより、EventDispatcher オブジェクトがイベントタイプの処理をイベントフロー階層のどこで変更したかを判断できます。特定のイベントタイプが実際にイベントリスナーをトリガーするかどうかを判別するには、<codeph>IEventDispatcher.willTrigger()</codeph> を使用します。
	<p><codeph>hasEventListener()</codeph> と <codeph>willTrigger()</codeph> の違いは、<codeph>hasEventListener()</codeph> では自身が属するオブジェクトのみ検証され、<codeph>willTrigger()</codeph> では <codeph>type</codeph> パラメーターで指定されたイベントのイベントフロー全体が検証されることです。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#IEventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	EventDispatcher オブジェクトからリスナーを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>削除するリスナーオブジェクトです。
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階に対して登録されたかどうかを示します。リスナーがキャプチャ段階だけでなくターゲット段階とバブリング段階にも登録されている場合は、<codeph>removeEventListener()</codeph> を 2 回呼び出して両方のリスナーを削除する必要があります。1 回は <codeph>useCapture</codeph> を <codeph>true</codeph> に設定し、もう 1 回は <codeph>useCapture</codeph> を <codeph>false</codeph> に設定する必要があります。 
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	EventDispatcher オブジェクトからリスナーを削除します。対応するリスナーが EventDispatcher オブジェクトに登録されていない場合は、このメソッドを呼び出しても効果はありません。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	指定されたイベントタイプについて、この EventDispatcher オブジェクトまたはその祖先にイベントリスナーが登録されているかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定したタイプのリスナーがトリガーされた場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定されたイベントタイプについて、この EventDispatcher オブジェクトまたはその祖先にイベントリスナーが登録されているかどうかを確認します。指定されたタイプのイベントがこの EventDispatcher オブジェクトまたはその子孫に送出されたときに、イベントリスナーがイベントフローの任意の段階でトリガーされる場合、このメソッドは <codeph>true</codeph> を返します。
	<p><codeph>hasEventListener()</codeph> と <codeph>willTrigger()</codeph> の違いは、<codeph>hasEventListener()</codeph> では自身が属するオブジェクトのみ検証され、<codeph>willTrigger()</codeph> では <codeph>type</codeph> パラメーターで指定されたイベントのイベントフロー全体が検証されることです。</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
	HTMLUncaughtScriptExceptionEvent オブジェクトは、JavaScript 例外がスローされ、その例外が catch ステートメントで処理されなかったときに、HTMLLoader オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	HTMLUncaughtScriptExceptionEvent オブジェクトは、JavaScript 例外がスローされ、その例外が <codeph>catch</codeph> ステートメントで処理されなかったときに、HTMLLoader オブジェクトによって送出されます。
	
	</apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
		イベントリスナーにパラメーターとして渡す HTMLUncaughtScriptExceptionEvent オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>exceptionValue</apiItemName><apiType value=""/><apiDesc>JavaScript プロセスで不明な例外がスローされたとき、<codeph>exceptionValue</codeph> には、不明な例外を発生させた throw ステートメント内の式の評価結果が格納されます。<codeph>exceptionValue</codeph> プロパティは、プリミティブ値、JavaScript オブジェクトへの参照または ActionScript オブジェクトへの参照になります。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		イベントリスナーにパラメーターとして渡す HTMLUncaughtScriptExceptionEvent オブジェクトを作成します。
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone"><apiName>clone</apiName><shortdesc>
		 
		HTMLUncaughtScriptExceptionEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>HTMLUncaughtScriptExceptionEvent オブジェクトのコピーです。
		
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		HTMLUncaughtScriptExceptionEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION"><apiName>UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc>
		HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION 定数は type プロパティ（uncaughtScriptException イベントオブジェクトのプロパティ）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncaughtScriptException</apiData><apiType value=""/></apiValueDef><apiDesc>
		<codeph>HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> 定数は <codeph>type</codeph> プロパティ（<codeph>uncaughtScriptException</codeph> イベントオブジェクトのプロパティ）の値を定義します。
		
		 
		 <p>このイベントには、次のプロパティがあります。</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>exceptionValue</codeph></entry><entry>不明な例外を発生させた <codeph>throw</codeph> ステートメント内の式の評価結果です。</entry></row><row><entry><codeph>stackTrace</codeph></entry><entry>不明な例外を発生させた <codeph>throw</codeph> ステートメントが実行された時点でのスタックトレースを表すオブジェクトの配列です。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue"><apiName>exceptionValue</apiName><shortdesc>
	不明な例外を発生させた throw ステートメント内の式の評価結果です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	不明な例外を発生させた throw ステートメント内の式の評価結果です。<codeph>exceptionValue</codeph> プロパティは、プリミティブ値、JavaScript オブジェクトへの参照または ActionScript オブジェクトへの参照になります。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get"><apiName>stackTrace</apiName><shortdesc>
	不明な例外を発生させた throw ステートメントが実行された時点でのスタックトレースを表すオブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	不明な例外を発生させた throw ステートメントが実行された時点でのスタックトレースを表すオブジェクトの配列です。配列内の各オブジェクトには、次の 3 つのプロパティがあります。
	
	<ul>
	
		<li><codeph>sourceURL</codeph>（ストリング）：呼び出しスタックフレームのスクリプトの URL です。</li>
	
		<li><codeph>line</codeph>（数値）：呼び出しスタックフレームの <codeph>sourceURL</codeph> リソース内での行番号です。</li>
	
		<li><codeph>functionName</codeph>（ストリング）: 呼び出しスタックフレームの関数の名前です。</li>
	
	</ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
 SQLErrorEvent インスタンスは、非同期実行モードでのデータベース操作の実行中にエラーが発生したとき、SQLConnection インスタンスまたは SQLStatement インスタンスによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLErrorEvent インスタンスは、非同期実行モードでのデータベース操作の実行中にエラーが発生したとき、SQLConnection インスタンスまたは SQLStatement インスタンスによって送出されます。イベントオブジェクトとしてリスナーに渡された SQLErrorEvent インスタンスにアクセスすることで、エラーの原因や試行された操作に関する情報を取得できます。
 
 <p>エラーの詳細を確認する際は、SQLErrorEvent インスタンスの <codeph>error</codeph> プロパティに格納された SQLError オブジェクトを参照します。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
     イベントリスナーに引数として渡す SQLErrorEvent オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。これは <codeph>type</codeph> プロパティを通じてアクセスできます。SQLErrorEvent で定義されているイベントタイプは、<codeph>error</codeph> イベントの 1 つだけです。これは <codeph>SQLErrorEvent.ERROR</codeph> 定数で表されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。デフォルト値は <codeph>false</codeph> です。
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。デフォルト値は <codeph>false</codeph> です。
     
     </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier><apiData>null</apiData><apiDesc>エラーの詳細を含む SQLError オブジェクトです。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>新しい SQLErrorEvent オブジェクトの作成に使用されます。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     イベントリスナーに引数として渡す SQLErrorEvent オブジェクトを作成します。
     
     </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.errors.SQLError;.xml"><linktext>flash.errors.SQLError</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR"><linktext>ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	 SQLErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい SQLErrorEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 SQLErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	 SQLErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>SQLErrorEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 SQLErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	 
	 <p><codeph>[SQLErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> error=<i>value</i>]</codeph></p>
	 
	 <p>エラー値の形式は次のとおりです。<codeph>SQLError : <i>message value</i> code=<i>value</i> operation=<i>value</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
     SQLErrorEvent.ERROR 定数は、SQLConnection インスタンスまたは SQLStatement インスタンスのメソッドの呼び出しがエラーで終了したときに送出されるエラーイベントの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLErrorEvent.ERROR</codeph> 定数は、SQLConnection インスタンスまたは SQLStatement インスタンスのメソッドの呼び出しがエラーで終了したときに送出されるエラーイベントの <codeph>type</codeph> プロパティの値を定義します。<codeph>error</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>error</codeph></entry><entry>発生したエラーの種類とエラーの原因となった操作に関する情報を含む SQLError オブジェクトです。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>エラーを報告している SQLConnection オブジェクトまたは SQLStatement オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get"><apiName>error</apiName><shortdesc>
     エラーの原因に関する詳細な情報を含む SQLError オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc>
     エラーの原因に関する詳細な情報を含む SQLError オブジェクトです。
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
ErrorEvent オブジェクトは、エラーが発生してネットワーク処理が失敗したときにオブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ErrorEvent イベントのイベントオブジェクトです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
ErrorEvent オブジェクトは、エラーが発生してネットワーク処理が失敗したときにオブジェクトによって送出されます。 <codeph>error</codeph> イベントのタイプは <codeph>ErrorEvent.ERROR</codeph> の 1 つのみです。

<p>ErrorEvent クラスは、AsyncErrorEvent、IOErrorEvent、SecurityErrorEvent、SQLErrorEvent の各クラスの基本クラスとしても機能します。</p>

<p>リスナーのない <codeph>error</codeph> イベントを確認するには、<ph platform="actionscript">デバッグ版の Flash Player</ph> または AIR Debug Launcher（ADL）アプリケーションを使用します。 <ph platform="actionscript">デバッグ版の Flash Player</ph> または AIR Debug Launcher（ADL）アプリケーションは、これらのイベントを（ErrorEvent コンストラクターの <codeph>text</codeph> パラメーターで定義された）ストリングとして表示します。</p>

</apiDesc><example conref="examples\ErrorEventExample.as"> 次の例では、複数のタイプのエラーイベントをキャプチャする単一のエラーハンドラー（<codeph>errorHandler()</codeph>）の使用方法を示します。<codeph>ioError</codeph> イベントがある場合、ハンドラーはネットワークからロードしようとして、<codeph>securityError</codeph> をスローします。
 
 <p><b>注意：</b>MissingFile.xml という名前のファイルが SWF ファイルと同じディレクトリにある場合、この例は機能しません。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
	エラーイベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。エラーイベントのタイプは <codeph>ErrorEvent.ERROR</codeph> の 1 つのみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトでバブリングを実行できるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーメッセージとして表示されるテキストです。イベントリスナーは、<codeph>text</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>特定のエラーに関連付ける参照番号です（Adobe AIR でのみサポートされています）。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ErrorEvent オブジェクトのコンストラクターです。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	エラーイベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	ErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい ErrorEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	ErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ErrorEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[ErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
	error イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>error</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>ネットワーク操作エラーが発生したオブジェクトです。</entry></row><row><entry><codeph>text</codeph></entry><entry>エラーメッセージとして表示されるテキストです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get"><apiName>errorID</apiName><shortdesc>
	特定のエラーに関連付けられた参照番号です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	特定のエラーに関連付けられた参照番号です。 カスタム ErrorEvent オブジェクトの場合、この番号はコンストラクターで指定された <codeph>id</codeph> パラメーターの値です。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
 ProgressEvent オブジェクトは、ロード処理が開始されたとき、またはソケットがデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ProgressEvent イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 ProgressEvent オブジェクトは、ロード処理が開始されたとき、またはソケットがデータを受信したときに送出されます。 これらのイベントは通常、SWF ファイル、イメージまたはデータがアプリケーションにロードされるときに生成されます。 次の 2 種類のキーボードイベントがあります。<codeph>ProgressEvent.PROGRESS</codeph> および <codeph>ProgressEvent.SOCKET_DATA</codeph>
 
 </apiDesc><example conref="examples\ProgressEventExample.as"> 次の例では、<codeph>ProgressEventExample</codeph> クラスを使用して、ファイルのダウンロード中にさまざまなイベントリスナーを使用する方法を示します。この例では、次の処理を実行します。
 <ol>
  <li><codeph>downloadURL</codeph> と <codeph>fileName</codeph> という 2 つのプロパティが作成されます。このプロパティは、ダウンロードされたファイルの場所と名前を示します。</li>
  <li><codeph>ProgressEventExample</codeph> コンストラクターでは、<codeph>file</codeph> という名前の新しい FileReference オブジェクトが作成され、<codeph>configureListeners()</codeph> メソッドに渡されます。</li>
  <li>次に、<codeph>downloadURL</codeph> プロパティと <codeph>fileName</codeph> プロパティが <codeph>file.download()</codeph> に渡されます。これによって、ファイルをダウンロードする場所の指定が求められます。</li>
  <li><codeph>configureListeners()</codeph> メソッドは、7 つのイベントリスナーとそれに関連するサブスクライバメソッドを追加します。
  <ol outputclass="A">
      <li><codeph>cancel</codeph>/<codeph>cancelHandler()</codeph> は、ファイルのダウンロードがキャンセルされた場合に送出されます。</li> 
      <li><codeph>complete</codeph> / <codeph>complereHandler()</codeph> は、ファイルのダウンロードプロセスが終了したときに送出されます。</li> 
      <li><codeph>ioError</codeph>/<codeph>ioErrorHandler()</codeph> は、ダウンロードファイルが使用できない場合、またはアクセスできない場合に送出されます。</li> 
      <li><codeph>open</codeph>/<codeph>openHandler()</codeph> は、ダウンロード操作が開始したときに送出されます。</li> 
      <li><codeph>progress</codeph>/<codeph>progressHandler()</codeph> は、ダウンロードプロセスが開始したときと終了したときに送出されます。</li> 
      <li><codeph>securityError</codeph>/<codeph>securityErrorHandler</codeph> は、ローカル再生のセキュリティ設定がダウンロードファイル（ローカル対ネットワーク）のデータアクセスの種類と一致しない場合に送出されます。この後の「メモ」を参照してください。</li> 
      <li><codeph>select</codeph>/<codeph>selectHandler()</codeph> は、ダウンロードオブジェクトが選択されたときに送出されます。</li> 
  </ol>
  </li>
 </ol>
 <p> <b>注意：</b>
 <ul>
  <li>「ローカルでの再生に関するセキュリティ」を「ネットワークファイルのみにアクセス」に設定して SWF ファイルをコンパイルする必要があります。</li>
  <li>この例では SomeFile.pdf という名前のファイルが必要です。</li> 
  <li>この例では、FileReference オブジェクトで使用可能なすべてのイベントを利用しますが、ほとんどの場合、必要になるのは 1 つのサブセットのみです。</li>
 </ul>
 </p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.filesystem.xml"><linktext>FileStream クラス</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>LoaderInfo クラス</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket クラス</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData"><apiName>socketData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
	progress イベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。<codeph>ProgressEvent.PROGRESS</codeph> および <codeph>ProgressEvent.SOCKET_DATA</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。 
	</apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>リスナーがイベントを処理しているときに読み込まれたアイテム数またはバイト数です。
	</apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>読み込みプロセスが成功した場合に読み込まれるアイテムまたはバイトの総数です。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText><codeph>ProgressEvent</codeph> オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	progress イベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone"><apiName>clone</apiName><shortdesc>
	ProgressEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい ProgressEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ProgressEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString"><apiName>toString</apiName><shortdesc>
	ProgressEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>ProgressEvent</codeph> オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ProgressEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[ProgressEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> bytesLoaded=<i>value</i> bytesTotal=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
	progress イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>progress</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>リスナーがイベントを処理しているときに読み込まれたアイテム数またはバイト数です。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>読み込みプロセスが成功した場合に最終的に読み込まれるアイテムまたはバイトの総数です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>進行状況をレポートする オブジェクトです。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA"><apiName>SOCKET_DATA</apiName><shortdesc>
	socketData イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>socketData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>socketData</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	     
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Event をアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>リスナーがイベントを処理しているときに読み込まれたアイテム数またはバイト数です。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>0。このプロパティは、<codeph>socketData</codeph> イベントオブジェクトによって使用されません。</entry></row><row><entry><codeph>target</codeph></entry><entry>進行状況をレポートする Socket オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	リスナーがイベントを処理しているときに読み込まれたアイテム数またはバイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	リスナーがイベントを処理しているときに読み込まれたアイテム数またはバイト数です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	読み込みプロセスが成功した場合に読み込まれるアイテムまたはバイトの総数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	読み込みプロセスが成功した場合に読み込まれるアイテムまたはバイトの総数です。progress イベントが Socket オブジェクトに送出または関連付けられる場合は、コンストラクターの bytesTotal パラメーターに値が指定されない限り、bytesTotal は常に 0 になります。実際に送受信されたバイト数は設定されず、アプリケーション開発者に任されます。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
	 ShaderEvent は、ShaderJob から起動されたシェーダー処理が終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 ShaderEvent は、ShaderJob から起動されたシェーダー処理が終了したときに送出されます。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#ShaderJob"><linktext>flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
		 イベントリスナーに渡す ShaderEvent オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。これは <codeph>type</codeph> プロパティを通じてアクセスできます。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。デフォルト値は <codeph>false</codeph> です。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。デフォルト値は <codeph>false</codeph> です。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bitmap</apiItemName><apiOperationClassifier>flash.display:BitmapData</apiOperationClassifier><apiData>null</apiData><apiDesc>終了した処理の結果を含む BitmapData オブジェクトです（またはターゲットが BitmapData オブジェクトでなかった場合は、<codeph>null</codeph>）。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>array</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>終了した処理の結果を含む ByteArray オブジェクトです（またはターゲットが ByteArray オブジェクトでなかった場合は、<codeph>null</codeph>）。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vector</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>終了した処理の結果を含む Vector.&lt;Number> インスタンスです（またはターゲットが Vector.&lt;Number> インスタンスでなかった場合は、<codeph>null</codeph>）。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 イベントリスナーに渡す ShaderEvent オブジェクトを作成します。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone"><apiName>clone</apiName><shortdesc>
		 ShaderEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい ShaderEvent オブジェクトです。
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 ShaderEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString"><apiName>toString</apiName><shortdesc>
		 ShaderEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ShaderEvent オブジェクトのすべてのプロパティを含むストリングです。
		 
		 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 ShaderEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
		 
		 <p><codeph>[ShaderEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> bitmapData=<i>value</i> byteArray=<i>value</i> vector=<i>value</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
		 complete イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>type</codeph> プロパティ（<codeph>complete</codeph> イベントオブジェクト）の値を定義します。
		 
		 <p>このイベントには、次のプロパティがあります。</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		      
		  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>BitmapData</codeph></entry><entry>終了した処理の結果を含む BitmapData オブジェクトです（またはターゲットが BitmapData オブジェクトでなかった場合は、<codeph>null</codeph>）。</entry></row><row><entry><codeph>ByteArray</codeph></entry><entry>終了した処理の結果を含む ByteArray オブジェクトです（またはターゲットが ByteArray オブジェクトでなかった場合は、<codeph>null</codeph>）。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>完了を報告する ShaderJob オブジェクトです。</entry></row><row><entry><codeph>vector</codeph></entry><entry>終了した処理の結果を含む Vector.&lt;Number> インスタンスです（またはターゲットが Vector.&lt;Number> インスタンスでなかった場合は、<codeph>null</codeph>）。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get"><apiName>bitmapData</apiName><shortdesc>
		 ShaderJob.start() メソッドに渡された BitmapData オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>ShaderJob.start()</codeph> メソッドに渡された BitmapData オブジェクトです。ByteArray または Vector.&lt;Number> が <codeph>start()</codeph> メソッドに渡された場合、このプロパティは <codeph>null</codeph> です。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get"><apiName>byteArray</apiName><shortdesc>
		 
		 ShaderJob.start() メソッドに渡された ByteArray オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 
		 <codeph>ShaderJob.start()</codeph> メソッドに渡された ByteArray オブジェクトです。BitmapData または Vector.&lt;Number> が <codeph>start()</codeph> メソッドに渡された場合、このプロパティは <codeph>null</codeph> です。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get"><apiName>vector</apiName><shortdesc>
		 
         ShaderJob.start() メソッドに渡された Vector.&amp;lt;Number&amp;gt; オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
		 
         <codeph>ShaderJob.start()</codeph> に渡された Vector.&lt;Number> オブジェクトです。BitmapData オブジェクトまたは ByteArray オブジェクトが <codeph>start()</codeph> メソッドに渡された場合、このプロパティは <codeph>null</codeph> です。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
 ネイティブドラッグイベントハンドラーは、ドラッグ＆ドロップ操作に関係するインタラクティブオブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 ネイティブドラッグイベントハンドラーは、ドラッグ＆ドロップ操作に関係するインタラクティブオブジェクトによって送出されます。
 
 <p>開始オブジェクトは次のものを送出します。</p> 
 <ul>
    <li><codeph>nativeDragStart</codeph> - ドラッグ操作が開始されたとき。</li>
    <li><codeph>nativeDragUpdate</codeph> - ドラッグ操作が実行中であるとき。</li>
    <li><codeph>nativeDragComplete</codeph> - ユーザーがドラッグしたアイテムを離したとき（ドロップが受け入れられたかどうかは問わない）。</li>
 </ul>
 
 <p>開始オブジェクトは、ドラッグ操作を開始した <codeph>NativeDragManager.doDrag()</codeph> への呼び出しで NativeDragManager オブジェクトに渡されるインタラクティブオブジェクトです。</p>
 
 <p>ターゲットとなる可能性のあるインタラクティブオブジェクトは次のものを送出します。</p>
 <ul>
    <li><codeph>nativeDragEnter</codeph> - ドラッグジェスチャがオブジェクトの境界内に入ったとき。</li>
    <li><codeph>nativeDragOver</codeph> - ドラッグジェスチャがオブジェクトの境界内にとどまったとき。</li>
    <li><codeph>nativeDragExit</codeph> - ドラッグジェスチャがオブジェクトの境界から出たとき</li>
    <li><codeph>nativeDragDrop</codeph> - 既に呼び出された <codeph>NativeDragManager.acceptDragDrop()</codeph> でオブジェクトがドロップを受け入れていて、ユーザーがドラッグしたアイテムをオブジェクトの上で離したとき</li>
 </ul>
 
 <p>通常、<codeph>nativeDragEnter</codeph> イベントまたは <codeph>nativeDragOver</codeph> イベントのハンドラーは、ドラッグされているデータを、許可されているドラッグアクションと共に評価して、インタラクティブオブジェクトがドロップを受け入れることができるかどうかを判断します。インタラクティブオブジェクトが適切なターゲットであることを指定するために、イベントハンドラーは <codeph>NativeDragManager.acceptDrop()</codeph> 関数を呼び出して、オブジェクトへの参照を渡す必要があります。指定したターゲット上でユーザーがマウスボタンを離した場合、オブジェクトはドロップターゲットになり、<codeph>nativeDragDrop</codeph> イベントを送出します。</p>
 
 <p>タイプが InteractiveObject のオブジェクトはどれもドラッグイニシエータまたはドロップターゲットにできます。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#NativeDragManager"><linktext>flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject"><linktext>flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete"><apiName>nativeDragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop"><apiName>nativeDragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter"><apiName>nativeDragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit"><apiName>nativeDragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver"><apiName>nativeDragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart"><apiName>nativeDragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate"><apiName>nativeDragUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
    ネイティブドラッグ＆ドロップイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。<codeph>NativeDragEvent.NATIVE_DRAG_START</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_ENTER</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_OVER</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_EXIT</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_DROP</codeph>、および <codeph>NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>。
	
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>スプライトを基準とするイベント発生位置の水平座標です。
	</apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>スプライトを基準とするイベント発生位置の垂直座標です。
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>関連するインタラクティブ表示オブジェクトです。 
    </apiDesc></apiParam><apiParam><apiItemName>clipboard</apiItemName><apiOperationClassifier>flash.desktop:Clipboard</apiOperationClassifier><apiData>null</apiData><apiDesc>転送されるデータを含む Clipboard オブジェクトです。
    </apiDesc></apiParam><apiParam><apiItemName>allowedActions</apiItemName><apiOperationClassifier>flash.desktop:NativeDragOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>許可されるアクション（move、copy および link）を定義する NativeDragOptions オブジェクトです。
    </apiDesc></apiParam><apiParam><apiItemName>dropAction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>現在のアクションです。
    
 	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Ctrl キーまたは Control キーがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Alt キーがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Shift キーがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Command キーがアクティブになっているかどうかを示します。
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    ネイティブドラッグ＆ドロップイベントに関する特定の情報を含む Event オブジェクトを作成します。
    
	<p>イベントリスナーには Event オブジェクトがパラメーターとして渡されます。ネイティブドラッグイベントを送出しても、関連付けられた動作はトリガーされません。</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone"><apiName>clone</apiName><shortdesc>
	この NativeDragEvent オブジェクトのコピーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい NativeDragEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	この NativeDragEvent オブジェクトのコピーを作成します。
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString"><apiName>toString</apiName><shortdesc>
	 この NativeDragEvent オブジェクトのプロパティをストリングとして書式設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>この NativeDragEvent のプロパティをストリングとします。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 この NativeDragEvent オブジェクトのプロパティをストリングとして書式設定します。
	 
	 <p>ストリングは次の形式です。</p>
	 <p><codeph>[NativeDragEvent type=value bubbles=value cancelable=value ... commandKey=value]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE"><apiName>NATIVE_DRAG_COMPLETE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE 定数は、nativeDragComplete イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragComplete</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP"><apiName>NATIVE_DRAG_DROP</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_DROP 定数は、nativeDragDrop イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragDrop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_DROP 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragDrop</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントをキャンセルすると、ドラッグ操作がキャンセルされます。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。クリップボードは、このイベントを送出しているオブジェクトがイニシエータと同じセキュリティドメイン内にない場合でも読み取ることができます。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER"><apiName>NATIVE_DRAG_ENTER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_ENTER 定数は、nativeDragEnter イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragEnter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_ENTER 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragEnter</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。クリップボードは、このイベントを送出しているオブジェクトがイニシエータと同じセキュリティドメイン内にある場合にのみ読み取ることができます。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT"><apiName>NATIVE_DRAG_EXIT</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_EXIT 定数は、nativeDragExit イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragExit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_EXIT 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragExit</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。クリップボードは、このイベントを送出しているオブジェクトがイニシエータと同じセキュリティドメイン内にある場合にのみ読み取ることができます。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER"><apiName>NATIVE_DRAG_OVER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_OVER 定数は、nativeDragOver イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_OVER 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragOver</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントをキャンセルすると、ドラッグ操作がキャンセルされます。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。クリップボードは、このイベントを送出しているオブジェクトがイニシエータと同じセキュリティドメイン内にある場合にのみ読み取ることができます。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START"><apiName>NATIVE_DRAG_START</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_START 定数は、nativeDragStart イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragStart</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_START 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragStart</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントをキャンセルすると、ドラッグ操作がキャンセルされます。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE"><apiName>NATIVE_DRAG_UPDATE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE 定数は、nativeDragUpdate イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragUpdate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE 定数は、<codeph>type</codeph> プロパティ（<codeph>nativeDragUpdate</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>このドラッグ操作に関連するアクションを指定する NativeDragOptions オブジェクトです。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>ドラッグされているデータを含む Clipboard オブジェクトです。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>ドロップターゲットによって選択されたアクションです（アクションが設定されていない場合は、<codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions"><apiName>allowedActions</apiName><shortdesc>
	このドラッグ操作を開始した表示オブジェクトで許可されるアクションを指定する NativeDragOptions オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc>
	このドラッグ操作を開始した表示オブジェクトで許可されるアクションを指定する NativeDragOptions オブジェクトです。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard"><apiName>clipboard</apiName><shortdesc>
	 このドラッグ操作のデータを含む Clipboard オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc>
	 このドラッグ操作のデータを含む Clipboard オブジェクトです。
	 
	 <p>イベントを送出するオブジェクトが開始オブジェクトと同じセキュリティドメインにない場合、クリップボードは <codeph>nativeDragDrop</codeph> イベントのハンドラーでのみ読み取ることができます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction"><apiName>dropAction</apiName><shortdesc>
	現在のアクションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	現在のアクションです。<codeph>nativeDragComplete</codeph> イベントで、<codeph>dropAction</codeph> プロパティは最終的なアクションを報告します。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
	 DRMManager オブジェクトの authenticate() メソッドの呼び出しに成功したときに、DRMManager が DRMAuthenticationCompleteEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DRMManager オブジェクトの <codeph>authenticate()</codeph> メソッドの呼び出しに成功したときに、DRMManager が DRMAuthenticationCompleteEvent オブジェクトを送出します。
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
		 DRMAuthenticationCompleteEvent オブジェクトの新しいインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベント型ストリング
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>イベントが表示リストにバブルアップするかどうかを示します。
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>イベントがキャンセル可能かどうかを示します。
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ログインしているサーバーの URL
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ログインしているサーバーの認証されたドメイン
		 </apiDesc></apiParam><apiParam><apiItemName>inToken</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>認証トークン
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 DRMAuthenticationCompleteEvent オブジェクトの新しいインスタンスを作成します。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone"><apiName>clone</apiName><shortdesc> 
	 Event サブクラスのインスタンスを複製します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同一の新しい Event オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
	 Event サブクラスのインスタンスを複製します。
	 
     <p>Event オブジェクトの元のインスタンスのコピーである、新しい Event オブジェクトを返します。通常、<codeph>clone()</codeph> を呼び出さないでください。イベントを再送出すると、つまり、ハンドラーから <codeph>dispatchEvent(event)</codeph> を呼び出すと（このハンドラーは <codeph>event</codeph> を処理しているハンドラー）、EventDispatcher クラスが自動的にこのメソッドを呼び出します。</p>
	 
	 <p>新しい Event オブジェクトには、元のオブジェクトのすべてのプロパティが含まれます。</p> 
	 
	 <p platform="actionscript">カスタム Event クラスを作成する場合は、カスタムクラスのプロパティが複製されるように、継承された <codeph>Event.clone()</codeph> メソッドをオーバーライドする必要があります。イベントサブクラスに追加するすべてのプロパティを設定しなかった場合、再送出されたイベントをリスナーが処理するときに、プロパティに正しい値が含まれません。</p>
	 
	 <p platform="actionscript">この例では、<codeph>PingEvent</codeph> は <codeph>Event</codeph> のサブクラスであるため、独自のバージョンの <codeph>clone()</codeph> を実装します。</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE"><apiName>AUTHENTICATION_COMPLETE</apiName><shortdesc>
		 イベントリスナーを追加および削除するときに、type パラメーターの認証完了イベントに使用されるストリング定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>authenticationComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 イベントリスナーを追加および削除するときに、type パラメーターの認証完了イベントに使用されるストリング定数です。
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:set"><apiName>domain</apiName><shortdesc>
		 メディア権サーバーのコンテンツのドメイン</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 メディア権サーバーのコンテンツのドメイン（ネットワークまたはインターネットのドメイン名ではありません）。
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:set"><apiName>serverURL</apiName><shortdesc>
		 Media Rights Server の URL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Media Rights Server の URL.
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:set"><apiName>token</apiName><shortdesc>
		 認証トークン</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 認証トークン
		 
		 <p>認証は、DRMManager セッションのキャッシュに自動的に追加されます。トークンを保存し、それを使用して将来のセッションでユーザーを認証できます。トークンを DRMManager の <codeph>setAuthenticationToken()</codeph> メソッドで再利用します。トークンの終了および他のプロパティは、トークンを生成するサーバーによって決定されます。</p>
		   
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()"><linktext>flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
 IMEEvent オブジェクトは、ユーザーが IME（入力メソッドエディター）を使用してテキストを入力したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>IMEEvent イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 IMEEvent オブジェクトは、ユーザーが IME（入力メソッドエディター）を使用してテキストを入力したときに送出されます。 IME は、通常、日本語、中国語、韓国語など、表音文字ではなく表意文字を持つ言語のテキストを入力するために使用されます。IME イベントは <codeph>IMEEvent.IME_COMPOSITION</codeph> の 1 つのみです。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
	 IME イベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。IME イベントは <codeph>IMEEvent.IME_COMPOSITION</codeph> の 1 つのみです。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>IME の読み取りストリングです。これは、候補から選択を行う前の、ユーザーが入力したストリングの初期値です。最終的な入力ストリングは、<codeph>TextEvent.TEXT_INPUT</codeph> イベントでキーボードフォーカスのあるオブジェクトに渡されます。イベントリスナーは、<codeph>text</codeph> プロパティを通じてこの情報にアクセスできます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>IMEEvent オブジェクトのコンストラクターです。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 IME イベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone"><apiName>clone</apiName><shortdesc>
	 IMEEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい IMEEvent オブジェクトです。 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 IMEEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString"><apiName>toString</apiName><shortdesc>
	 IMEEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>IMEEvent オブジェクトのすべてのプロパティを含むストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 IMEEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	 <p><codeph>[IMEEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION"><apiName>IME_COMPOSITION</apiName><shortdesc>
	 imeComposition イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeComposition</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>type</codeph> プロパティ（<codeph>imeComposition</codeph> イベントオブジェクト）の値を定義します。 
	 <p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>IME オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DataEvent"><apiName>DataEvent</apiName><shortdesc>
DataEvent オブジェクトは、生データのロードが完了したときにオブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>DataEvent イベントのイベントオブジェクトです。

</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
DataEvent オブジェクトは、生データのロードが完了したときにオブジェクトによって送出されます。 次の 2 種類のデータイベントがあります。 
<ul><li><codeph>DataEvent.DATA</codeph>：送受信されたデータのために送出されます。</li>
<li><codeph>DataEvent.UPLOAD_COMPLETE_DATA</codeph>：データが送信され、サーバーが応答したときに送出されます。</li></ul>

</apiDesc><example conref="examples\DataEventExample.as"> 次の例では、XMLSocket が作成され、<codeph>yourDomain</codeph> の ポート 8080 で実行しているソケットサーバーに接続されます。イベントリスナーは、未処理のデータを受信するたびに送出される <codeph>data</codeph> イベントを受け取る XMLSocket オブジェクトにアタッチされます。
 
 <p> <b>注意：</b> 
 <ul>
    <li>この例で <codeph>securityError</codeph> イベントを生成するには、「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。</li>
    <li>[<codeph>yourDomain</codeph>] で実行してポート 8080 を使用しているサーバーが必要です。</li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent"><apiName>DataEvent</apiName><shortdesc>
	データイベントに関する情報を含むイベントオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。データイベントのタイプは <codeph>DataEvent.DATA</codeph> の 1 つのみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Flash Player または Adobe AIR にロードされた生データです。 イベントリスナーは、<codeph>data</codeph> プロパティを通じてこの情報にアクセスできます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>DataEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	データイベントに関する情報を含むイベントオブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA"><linktext>DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone"><apiName>clone</apiName><shortdesc>
	DataEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい DataEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	DataEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString"><apiName>toString</apiName><shortdesc>
	DataEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DataEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	DataEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[DataEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> data=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA"><apiName>DATA</apiName><shortdesc>
	data イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>data</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>data</codeph> イベントオブジェクト）の値を定義します。  
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>data</codeph></entry><entry>Flash Player または Adobe AIR にロードされた生データです。</entry></row><row><entry><codeph>target</codeph></entry><entry>データを受け取る XMLSocket オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA"><apiName>UPLOAD_COMPLETE_DATA</apiName><shortdesc>
	uploadCompleteData イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uploadCompleteData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>uploadCompleteData</codeph> イベントオブジェクト）の値を定義します。
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>data</codeph></entry><entry>ファイルアップロードが正常に終了した後、サーバーから返された生データです。</entry></row><row><entry><codeph>target</codeph></entry><entry>アップロードが正常に終了した後、データを受信する FileReference オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get"><apiName>data</apiName><shortdesc>
	Flash Player または Adobe AIR にロードされた生データです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Flash Player または Adobe AIR にロードされた生データです。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
SecurityErrorEvent オブジェクトは、セキュリティエラーの発生を報告するためにオブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>SecurityErrorEvent イベントのイベントオブジェクトです。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
SecurityErrorEvent オブジェクトは、セキュリティエラーの発生を報告するためにオブジェクトによって送出されます。 このクラスで報告されるセキュリティエラーは、通常は、データのロードなど非同期操作のものです。非同期操作では、セキュリティ違反はすぐには明らかになりません。イベントリスナーで、オブジェクトの <codeph>text</codeph> プロパティにアクセスすると、試行された操作とそれに関連する URL を確認できます。イベントリスナーがない場合、<ph platform="actionscript">デバッグ版の Flash Player</ph> または AIR Debug Launcher（ADL）アプリケーションによって、<codeph>text</codeph> プロパティの内容を含むエラーメッセージが自動的に表示されます。 セキュリティエラーイベントのタイプは <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> の 1 つのみです。

<p>セキュリティエラーイベントは、すべてのターゲットオブジェクトに関して送出される最後のイベントです。つまり、一般的なエラーイベントを含むその他のイベントは、セキュリティエラーが発生しているターゲットオブジェクトに関して送出されません。</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as"> 次の例では、<codeph>SecurityErrorEventExample</codeph> クラスを使用して、リスナーメソッド <codeph>securityErrorHandler()</codeph> をインスタンス化し、送出される <codeph>securityError</codeph> イベントを受け取るように設定する方法を示します。このイベントは、<codeph>URLRequest</codeph> の場所が呼び出し元の SWF と同じドメインになく、要求されたドメインが、クロスドメインポリシーファイルによるクロスドメインアクセス許可を得ていない場合に発生します。
 <p><codeph>SecurityErrorEvent</codeph> を作成するには、<codeph>http://www.[yourdomain].com</codeph> をクロスドメインアクセスが許可されていないパスに置き換えます。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>Security クラス</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError"><apiName>securityError</apiName><prolog><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
	セキュリティエラーイベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。エラーイベントのタイプは <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> の 1 つのみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーメッセージとして表示されるテキストです。イベントリスナーは、<codeph>text</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>特定のエラーに関連付ける参照番号です。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>SecurityErrorEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	セキュリティエラーイベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	SecurityErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい securityErrorEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	SecurityErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	SecurityErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>SecurityErrorEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	SecurityErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[securityErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc>
	SecurityErrorEvent.SECURITY_ERROR 定数は、securityError イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>securityError</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>セキュリティエラーを報告するネットワークオブジェクトです。</entry></row><row><entry><codeph>text</codeph></entry><entry>エラーメッセージとして表示されるテキストです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
 TextEvent オブジェクトは、ユーザーがテキストフィールドにテキストを入力するか、HTML 対応のテキストフィールドのハイパーリンクをクリックしたときに、オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>TextEvent イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextEvent オブジェクトは、ユーザーがテキストフィールドにテキストを入力するか、HTML 対応のテキストフィールドのハイパーリンクをクリックしたときに、オブジェクトによって送出されます。 次の 2 種類のテキストイベントがあります。<codeph>TextEvent.LINK</codeph> および <codeph>TextEvent.TEXT_INPUT</codeph>
 
 </apiDesc><example conref="examples\TextEventExample.as"> 次の例では、TextEventExample クラスを使用して、テキストフィールドを作成し、さまざまテキストイベントを受け取ります。この例では、次の処理を実行します。
 <ol>
     <li>後で使用する 2 つの URL の定数を宣言します。</li>
    <li>後で使用する TextField 型の 2 つの変数を宣言します。</li>
     <li>クラスコンストラクターが次の 2 つのメソッドを呼び出します。
     <ul>
       <li><codeph>init()</codeph> は、TextField オブジェクトを初期化し、イベントリスナーを追加します。</li>
       <li><codeph>draw()</codeph> は、TextFields を表示リストに追加し、表示するテキストを割り当てます。</li>
  </ul></li>
     <li>リスナーである <codeph>linkHandler()</codeph> と <codeph>textInputHandler()</codeph> は、イベントタイプに応じてイベントに反応します。<codeph>linkHandler()</codeph> メソッドは、まだ開いていない場合は、Web ブラウザーを開き、クリックされた URL に移動します。<codeph>textInputHandler()</codeph> メソッドは、関連するテキストフィールドでキーが押されるたびに情報を表示します。</li>
 </ol>
 
 <p><b>注意：</b>この例に示すドメインは架空のものです。<codeph>[yourDomain]</codeph> は実際のドメインに置き換える必要があります。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br />";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'>";
            link += "&lt;u>";
            link += "&lt;b>";
            link += "&lt;a href='event:" + url + "'>" + text + "&lt;/a>";
            link += "&lt;/b>";
            link += "&lt;/u>";
            link += "&lt;/font>";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace(">> ============================");
            trace(">> e.text: " + e.text);
            trace(">> textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link"><apiName>link</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as"> この例では、ユーザーが HTML テキスト内のハイパーリンクをクリックすると、テキストイベントがトリガーされます。クリックしたリンクに応じて、システムのオペレーティングシステムに基づいて指定された Web サイトにユーザーが送られるか、ユーザーが指定した半径に基づいて円が描画されます。 
   
 <p>テキストフィールドが作成され、その内容が <codeph>htmlText</codeph> プロパティを使用して HTML 形式のストリングに設定されます。リンクにはユーザーが識別しやすいように下線が付きます。 （Adobe Flash Player では、マウスポインターがリンクの上に置かれたときだけポインターが変わります。）ユーザーがリンクをクリックしたときに ActionScript メソッドが確実に起動されるようにするため、リンクの URL の先頭にストリング <codeph>"event:"</codeph> を付加し、<codeph>TextEvent.LINK</codeph> イベントのリスナーを追加しています。</p> 
 
 <p>ユーザーがリンクをクリックした後にトリガーされる <codeph>linkHandler()</codeph> メソッドは、そのテキストフィールドに関するすべてのリンクイベントを管理します。最初の if ステートメントでイベントの <codeph>text</codeph> プロパティを調べます。このプロパティには、URL のストリング <codeph>"event:"</codeph> 以降の部分が格納されています。ユーザーがオペレーティングシステムのリンクをクリックした場合、システムの <codeph>Capabilities.os</codeph> プロパティから取得されたユーザーの現在のオペレーティングシステムの名前を使用して、指定の Web サイトにユーザーが送られます。 それ以外の場合は、選択された半径サイズ（これはイベントの <codeph>text</codeph> プロパティによって渡されます）を使用して、テキストフィールドの下に円が描画されます。ユーザーが半径のリンクをクリックするたびに、描画されている円が消去され、選択した半径サイズで新しい赤い円が描画されます。</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput"><apiName>textInput</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as"> 次の例で、特別な組み合わせキー（パスワードに類似）の生成方法を説明します。この組み合わせキーは 7 文字の英数字で構成され、2 番目と 5 番目の文字が数字です。
 
 <p>事前の使用説明、ユーザー入力、および警告（エラー）メッセージの 3 つのテキストフィールドが作成されます。<codeph>textInputHandler()</codeph> メソッドをトリガーすることでユーザーのテキスト入力に応答するために、イベントリスナーが追加されます。（ユーザーがテキストを入力するたびに、<codeph>TextEvent.TEXT_INPUT</codeph> イベントが送出されます。 </p>
 <p><b>注意：</b>テキストイベントは、ユーザーが文字を入力したときに送出されます。Backspace などのキーボード入力に対しては送出されません。 すべてのキーボードイベントをキャッチするには、<codeph>KeyboardEvent</codeph> イベントのリスナーを使用します。）</p>
 
 <p><codeph>textInputHandler()</codeph> メソッドは、ユーザー入力を制御および管理します。<codeph>preventDefault()</codeph> メソッドを使用して、テキストが直ちに入力テキストフィールドに表示されないようにします。フィールドを更新するのはアプリケーションの役割です。既に入力した文字（<codeph>result</codeph> ストリング）の削除操作または変更操作を元に戻せるように、ユーザーが新しい文字を入力するときに入力テキストフィールドの内容を <codeph>result</codeph> ストリングに割り当て直します。 また、ユーザーの操作性に一貫性を持たせるために、<codeph>setSelection()</codeph> メソッドによって、テキストフィールド内の最後に選択された文字の後に挿入ポインター（キャレット）を配置します。</p>
 
 <p><codeph>textInputHandler()</codeph> メソッドの最初の if ステートメントで、組み合わせキーの 2 文字目と 5 文字目に相当する入力文字を調べます。これらは数字である必要があります。 ユーザー入力が正しい場合は、<codeph>updateCombination()</codeph> メソッドを呼び出して、組み合わせキーストリング（<codeph>result</codeph>）の末尾にユーザー入力を追加します。 <codeph>updateCombination()</codeph> メソッドでは、選択された文字の後への挿入ポインターの移動も行います。 7 文字が入力されたら、<codeph>textInputHandler()</codeph> メソッドの最後の if ステートメントで、<codeph>inputTextField</codeph> テキストフィールドのタイプを <codeph>INPUT</codeph> から <codeph>DYNAMIC</codeph> に変更します。これは、ユーザーがこれ以上文字を入力したり変更したりできないことを意味します。</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 テキストイベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。有効な値は次のとおりです。<codeph>TextEvent.LINK</codeph> および <codeph>TextEvent.TEXT_INPUT</codeph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>ユーザーが入力したテキストの 1 つ以上の文字です。イベントリスナーは、<codeph>text</codeph> プロパティを通じてこの情報にアクセスできます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>TextEvent オブジェクトのコンストラクターです。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 テキストイベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone"><apiName>clone</apiName><shortdesc>
	 TextEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい TextEvent オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 TextEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString"><apiName>toString</apiName><shortdesc>
	 TextEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>TextEvent オブジェクトのすべてのプロパティを含むストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 TextEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	 <p><codeph>[TextEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK"><apiName>LINK</apiName><shortdesc>
     link イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>type</codeph> プロパティ（<codeph>link</codeph> イベントオブジェクト）の値を定義します。
	 
	 <p>このイベントには、次のプロパティがあります。</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>クリックされたハイパーリンクを含むテキストフィールドです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row><row><entry><codeph>text</codeph></entry><entry>URL の、"event:" の後に続く部分です。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as"> この例では、ユーザーが HTML テキスト内のハイパーリンクをクリックすると、テキストイベントがトリガーされます。 クリックしたリンクに応じて、システムのオペレーティングシステムに基づいて指定された Web サイトにユーザーが送られるか、ユーザーが指定した半径に基づいて円が描画されます。 
   
 <p>テキストフィールドが作成され、その内容が <codeph>htmlText</codeph> プロパティを使用して HTML 形式のストリングに設定されます。リンクにはユーザーが識別しやすいように下線が付きます。 （Adobe Flash Player では、マウスポインターがリンクの上に置かれたときだけポインターが変わります。）ユーザーがリンクをクリックしたときに ActionScript メソッドが確実に起動されるようにするため、リンクの URL の先頭にストリング <codeph>"event:"</codeph> を付加し、<codeph>TextEvent.LINK</codeph> イベントのリスナーを追加しています。</p> 
 
 <p>ユーザーがリンクをクリックした後にトリガーされる <codeph>linkHandler()</codeph> メソッドは、そのテキストフィールドに関するすべてのリンクイベントを管理します。最初の if ステートメントでイベントの <codeph>text</codeph> プロパティを調べます。このプロパティには、URL のストリング <codeph>"event:"</codeph> 以降の部分が格納されています。ユーザーがオペレーティングシステムのリンクをクリックした場合、システムの <codeph>Capabilities.os</codeph> プロパティから取得されたユーザーの現在のオペレーティングシステムの名前を使用して、指定の Web サイトにユーザーが送られます。 それ以外の場合は、選択された半径サイズ（これはイベントの <codeph>text</codeph> プロパティによって渡されます）を使用して、テキストフィールドの下に円が描画されます。ユーザーが半径のリンクをクリックするたびに、描画されている円が消去され、選択した半径サイズで新しい赤い円が描画されます。</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT"><apiName>TEXT_INPUT</apiName><shortdesc>
     textInput イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>type</codeph> プロパティ（<codeph>textInput</codeph> イベントオブジェクト）の値を定義します。
     <p><b>注意：</b>このイベントは、Delete または Backspace キーについては送出されません。</p>     
	 <p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。デフォルトの動作を取り消すには、<codeph>preventDefault()</codeph> メソッドを呼び出します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>文字が入力されるテキストフィールドです。target は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row><row><entry><codeph>text</codeph></entry><entry>ユーザーが入力した文字または文字の連続です。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as"> 次の例で、特別な組み合わせキー（パスワードに類似）の生成方法を説明します。この組み合わせキーは 7 文字の英数字で構成され、2 番目と 5 番目の文字が数字です。
 
 <p>事前の使用説明、ユーザー入力、および警告（エラー）メッセージの 3 つのテキストフィールドが作成されます。<codeph>textInputHandler()</codeph> メソッドをトリガーすることでユーザーのテキスト入力に応答するために、イベントリスナーが追加されます。（ユーザーがテキストを入力するたびに、<codeph>TextEvent.TEXT_INPUT</codeph> イベントが送出されます。 </p>
 <p><b>注意：</b>テキストイベントは、ユーザーが文字を入力したときに送出されます。Backspace などのキーボード入力に対しては送出されません。 すべてのキーボードイベントをキャッチするには、<codeph>KeyboardEvent</codeph> イベントのリスナーを使用します。）</p>
 
 <p><codeph>textInputHandler()</codeph> メソッドは、ユーザー入力を制御および管理します。<codeph>preventDefault()</codeph> メソッドを使用して、テキストが直ちに入力テキストフィールドに表示されないようにします。フィールドを更新するのはアプリケーションの役割です。既に入力した文字（<codeph>result</codeph> ストリング）の削除操作または変更操作を元に戻せるように、ユーザーが新しい文字を入力するときに入力テキストフィールドの内容を <codeph>result</codeph> ストリングに割り当て直します。 また、ユーザーの操作性に一貫性を持たせるために、<codeph>setSelection()</codeph> メソッドによって、テキストフィールド内の最後に選択された文字の後に挿入ポインター（キャレット）を配置します。</p>
 
 <p><codeph>textInputHandler()</codeph> メソッドの最初の if ステートメントで、組み合わせキーの 2 文字目と 5 文字目に相当する入力文字を調べます。これらは数字である必要があります。 ユーザー入力が正しい場合は、<codeph>updateCombination()</codeph> メソッドを呼び出して、組み合わせキーストリング（<codeph>result</codeph>）の末尾にユーザー入力を追加します。 <codeph>updateCombination()</codeph> メソッドでは、選択された文字の後への挿入ポインターの移動も行います。 7 文字が入力されたら、<codeph>textInputHandler()</codeph> メソッドの最後の if ステートメントで、<codeph>inputTextField</codeph> テキストフィールドのタイプを <codeph>INPUT</codeph> から <codeph>DYNAMIC</codeph> に変更します。これは、ユーザーがこれ以上文字を入力したり変更したりできないことを意味します。</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get"><apiName>text</apiName><shortdesc>
	 textInput イベントの場合は、ユーザーが入力した文字または文字の連続です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>textInput</codeph> イベントの場合は、ユーザーが入力した文字または文字の連続です。<codeph>link</codeph> イベントの場合、<codeph>event</codeph> 属性（<codeph>href</codeph> 属性）のテキストです。この属性は、<codeph>&lt;a></codeph> タグに含まれます。
	 
	 </apiDesc><example>次のコードは、ユーザーがハイパーテキストリンクをクリックしたときに送出される <codeph>link</codeph> イベントを示します。
	 
	<codeblock>
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'>Click Me.&lt;/a>";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:Event"><apiName>Event</apiName><shortdesc>
 Event クラスは、Event オブジェクトを作成するための基本クラスとして使用されます。これらの Event オブジェクトは、イベントの発生時にイベントリスナーにパラメーターとして渡されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>イベントオブジェクトの基本クラスです。
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Event クラスは、Event オブジェクトを作成するための基本クラスとして使用されます。これらの Event オブジェクトは、イベントの発生時にイベントリスナーにパラメーターとして渡されます。
 
 <p>Event クラスのプロパティは、イベントのタイプやイベントのデフォルト動作をキャンセルできるかどうかといった、イベントの基本情報を保持しています。Event クラス定数が表すイベントなど多くのイベントでは、この基本情報で十分です。ただし、さらに詳しい情報が必要なイベントもあります。<ph platform="actionscript">例えば、マウスクリックに関連するイベントは、クリックイベントの場所やクリック時にキーが押されていたかどうかに関する追加情報を含む必要があります。このような追加情報は、MouseEvent クラスで行われているように、Event クラスを拡張することでイベントリスナーに渡すことができます。ActionScript 3.0</ph><ph platform="javascript">Adobe<sup>®</sup> AIR™</ph> API では、追加情報を必要とする一般的なイベントのためにいくつかの Event サブクラスが定義されています。 各 Event サブクラスに関連するイベントの説明は、各クラスのドキュメントを参照してください。</p>
 
 <p>Event クラスのメソッドは、イベントリスナー関数で使用してイベントオブジェクトの動作に影響を与えることができます。一部のイベントにはデフォルトの動作が関連付けられています。<ph platform="actionscript">例えば、<codeph>doubleClick</codeph> イベントには、イベント時にマウスポインター位置の単語がハイライト表示されるというデフォルトの動作が関連付けられています。</ph> <ph platform="javascript">例えば、NativeWindow オブジェクトによって送出される <codeph>closing</codeph> イベントには、ウィンドウを閉じるというデフォルトの動作が関連付けられています。</ph>イベントリスナーで <codeph>preventDefault()</codeph> メソッドを呼び出してこの動作をキャンセルできます。 <ph platform="actionscript">また、<codeph>stopPropagation()</codeph> メソッドまたは <codeph>stopImmediatePropagation()</codeph> メソッドを呼び出すと、現在のイベントリスナーを、イベントを処理する最後のイベントリスナーにすることができます。</ph></p>
 
 <p platform="javascript"><b>注意：</b> このクラスの一部の定数は、SWF コンテンツで使用される、ActionScript 3.0 表示リストによって送出されるイベントの <codeph>type</codeph> プロパティの定義に使用されます。ただし、ActionScript 3.0 表示リストには関連付けられず、AIR ランタイムで実行される JavaScript コードで有効なイベントの <codeph>type</codeph><i/> プロパティの定義に使用されるものもあります。</p>
 
 </apiDesc><example conref="examples\EventExample.as"> 次の例では、<codeph>EventExample</codeph> クラスと <codeph>Square</codeph> カスタムクラスを使用して、イベントバブリングを管理する方法を示します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace(">> stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace(">> --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace(">> 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace(">> 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace(">> --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace(">> 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as"> 次の例では、<codeph>ADDED</codeph> イベントと <codeph>ADDED_TO_STAGE</codeph> イベントの相違、および <codeph>REMOVED</codeph> イベントと <codeph>REMOVED_FROM_STAGE</codeph> イベントの相違を示すインタラクティブなデモンストレーションを作成します。スプラインをクリックすると、そのスプラインと、その中にネストされているものがすべてステージから削除されます。例えば、最も大きなスプラインをクリックすると、1つの <codeph>REMOVED</codeph> イベントと 3 つの <codeph>REMOVED_FROM_STAGE</codeph> イベントが発生します。
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate"><apiName>activate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added"><apiName>added</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage"><apiName>addedToStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel"><apiName>cancel</apiName><prolog><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing"><apiName>closing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COPY</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut"><apiName>cut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CUT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate"><apiName>deactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying"><apiName>displaying</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame"><apiName>enterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting"><apiName>exiting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame"><apiName>exitFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed"><apiName>frameConstructed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange イベント</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize イベント</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender イベント</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3"><apiName>id3</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ID3</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init"><apiName>init</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:INIT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange イベント</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave"><apiName>mouseLeave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange"><apiName>networkChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste"><apiName>paste</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed"><apiName>removed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage"><apiName>removedFromStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render"><apiName>render</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll"><apiName>selectAll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange"><apiName>tabChildrenChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange"><apiName>tabEnabledChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange"><apiName>tabIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event"><apiName>Event</apiName><shortdesc>
     イベントリスナーにパラメーターとして渡す Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> <codeph>Event.type</codeph> としてアクセス可能なイベントタイプです。
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。デフォルト値は <codeph>false</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。デフォルト値は <codeph>false</codeph> です
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>新しい Event オブジェクトの作成に使用されます。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     イベントリスナーにパラメーターとして渡す Event オブジェクトを作成します。
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone"><apiName>clone</apiName><shortdesc>
	 Event サブクラスのインスタンスを複製します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元のオブジェクトと同一の新しい Event オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Event サブクラスのインスタンスを複製します。
	 
     <p>Event オブジェクトの元のインスタンスのコピーである、新しい Event オブジェクトを返します。通常、<codeph>clone()</codeph> を呼び出さないでください。イベントを再送出すると、つまり、ハンドラーから <codeph>dispatchEvent(event)</codeph> を呼び出すと（このハンドラーは <codeph>event</codeph> を処理しているハンドラー）、EventDispatcher クラスが自動的にこのメソッドを呼び出します。</p>
	 
	 <p>新しい Event オブジェクトには、元のオブジェクトのすべてのプロパティが含まれます。</p> 
	 
	 <p platform="actionscript">カスタム Event クラスを作成する場合は、カスタムクラスのプロパティが複製されるように、継承された <codeph>Event.clone()</codeph> メソッドをオーバーライドする必要があります。イベントサブクラスに追加するすべてのプロパティを設定しなかった場合、再送出されたイベントをリスナーが処理するときに、プロパティに正しい値が含まれません。</p>
	 
	 <p platform="actionscript">この例では、<codeph>PingEvent</codeph> は <codeph>Event</codeph> のサブクラスであるため、独自のバージョンの <codeph>clone()</codeph> を実装します。</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString"><apiName>formatToString</apiName><shortdesc>
	 カスタム ActionScript 3.0 Event クラスに toString() メソッドを実装するためのユーティリティ関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>カスタム Event クラスの名前と <codeph>...arguments</codeph> パラメーターのストリング値です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>className</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>カスタム Event クラスの名前です。<ph platform="actionscript">上の例では、<codeph>className</codeph> パラメーターは <codeph>PingEvent</codeph> です。</ph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>Event クラス<ph platform="actionscript">のプロパティとカスタム Event クラスに追加するプロパティです。上の例では、<codeph>...arguments</codeph> パラメーターに、<codeph>type</codeph>、<codeph>bubbles</codeph>、<codeph>cancelable</codeph>、<codeph>eventPhase</codeph> および <codeph>URL</codeph></ph> が含まれます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 カスタム ActionScript 3.0 Event クラスに <codeph>toString()</codeph> メソッドを実装するためのユーティリティ関数です。<ph platform="actionscript"><codeph>toString()</codeph> メソッドをオーバーライドすることは、推奨されますが必須ではありません。</ph>
	 
	 <pre platform="actionscript">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 <p platform="javascript">このメソッドは、SWF コンテンツで使用する ActionScript 3.0 クラスの作成に使用されます。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented"><apiName>isDefaultPrevented</apiName><shortdesc>
	イベントで preventDefault() メソッドが呼び出されたかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>preventDefault()</codeph> が呼び出された場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	イベントで <codeph>preventDefault()</codeph> メソッドが呼び出されたかどうかを確認します。<codeph>preventDefault()</codeph> メソッドが呼び出された場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
	イベントのデフォルト動作をキャンセルできる場合に、その動作をキャンセルします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	イベントのデフォルト動作をキャンセルできる場合に、その動作をキャンセルします。
	
	<p>多くのイベントには、デフォルトで実行される動作が関連付けられています。<ph platform="actionscript">例えば、ユーザーがテキストフィールドに文字を入力した場合、デフォルト動作では文字がテキストフィールドに表示されます。<codeph>TextEvent.TEXT_INPUT</codeph> イベントのデフォルト動作はキャンセルできるので、<codeph>preventDefault()</codeph> メソッドを使用して文字を表示しないようにすることができます。</ph> <ph platform="javascript">例えば、ユーザーがウィンドウの閉じるボックスをクリックした場合、デフォルト動作ではウィンドウが閉じます。 <codeph>closing</codeph> イベントのデフォルト動作はキャンセルできるので、<codeph>preventDefault()</codeph> メソッドを使用してウィンドウが閉じないようにすることができます。</ph>
	</p>
	
    <p platform="actionscript">キャンセルできない動作の例としては、<codeph>Event.REMOVED</codeph> イベントに関連付けられているデフォルト動作があります。このイベントは、Flash Player が表示リストから表示オブジェクトを削除しようとすると生成されます。このデフォルト動作（要素の削除）はキャンセルできません。つまり、<codeph>preventDefault()</codeph> メソッドを呼び出してもこのデフォルト動作には効果がありません。 </p>
	
	<p><codeph>Event.cancelable</codeph> プロパティを使用して、特定のイベントに関連付けられているデフォルト動作をキャンセルできるかどうかを確認できます。<codeph>Event.cancelable</codeph> の値が <codeph>true</codeph> の場合、<codeph>preventDefault()</codeph> を使用してイベントをキャンセルできます。それ以外の場合、<codeph>preventDefault()</codeph> の効果はありません。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/isDefaultPrevented()"><linktext>flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable"><linktext>Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation"><apiName>stopImmediatePropagation</apiName><shortdesc>
	イベントフローの現在のノードおよび後続するノードで、イベントリスナーが処理されないようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	イベントフローの現在のノードおよび後続するノードで、イベントリスナーが処理されないようにします。<ph platform="actionscript">このメソッドはすぐに有効になり、現在のノードのイベントリスナーに影響します。これに対し、<codeph>stopPropagation()</codeph> メソッドは、現在のノードのすべてのイベントリスナーの処理が終了するまで有効になりません。</ph>
	
	<p platform="actionscript"><b>注意：</b>このメソッドは、このイベントに関連付けられている動作をキャンセルしません。その機能については、<codeph>preventDefault()</codeph> を参照してください。</p>
	
	<p platform="javascript">イベントフローは、ActionScript 3.0 表示オブジェクトモデルを使用する、SWF コンテンツ内の表示オブジェクトに対して定義されます。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopPropagation()"><linktext>flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation"><apiName>stopPropagation</apiName><shortdesc>
	イベントフローの現在のノードに後続するノードで、イベントリスナーが処理されないようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	イベントフローの現在のノードに後続するノードで、イベントリスナーが処理されないようにします。<ph platform="actionscript">このメソッドは、現在のノード（<codeph>currentTarget</codeph>）のイベントリスナーには影響しません。これに対し、<codeph>stopImmediatePropagation()</codeph> メソッドは、現在のノードとそれ以降のノードで、イベントリスナーが処理されないようにします。このメソッドを繰り返し呼び出しても影響はありません。このメソッドは、イベントフローの任意の段階で呼び出すことができます。</ph>
	
	<p platform="actionscript"><b>注意：</b>このメソッドは、このイベントに関連付けられている動作をキャンセルしません。その機能については、<codeph>preventDefault()</codeph> を参照してください。</p>
	
	<p platform="javascript">イベントフローは、ActionScript 3.0 表示オブジェクトモデルを使用する、SWF コンテンツ内の表示オブジェクトに対して定義されます。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopImmediatePropagation()"><linktext>flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString"><apiName>toString</apiName><shortdesc>
	Event オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Event オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Event オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[Event type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE"><apiName>ACTIVATE</apiName><shortdesc>
	ACTIVATE 定数は、type プロパティ（activate イベントオブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ACTIVATE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>activate</codeph> イベントオブジェクト）の値を定義します。 
	<p><b>注意：</b>このイベントには「キャプチャ段階」と「バブリング段階」はありません。したがって、ターゲットが表示リストにあるかないかに関わらず、潜在的なターゲットにはイベントリスナーを直接追加する必要があります。</p>
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>activate</codeph> イベントに対するリスナーが登録された任意の DisplayObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED"><apiName>ADDED</apiName><shortdesc>
	Event.ADDED 定数は、added イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>added</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ADDED</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>added</codeph> イベントオブジェクト）の値を定義します。 
	
	<p platform="javascript"><codeph>added</codeph> イベントは ActionScript 3.0 表示リストに適用され、JavaScript コードには関連しません。</p>
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>表示リストに追加される DisplayObejct インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE"><apiName>ADDED_TO_STAGE</apiName><shortdesc>
	Event.ADDED_TO_STAGE 定数は、type プロパティ（addedToStage イベントオブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addedToStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ADDED_TO_STAGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>addedToStage</codeph> イベントオブジェクト）の値を定義します。 
	
	<p platform="javascript"><codeph>addedToStage</codeph> イベントは ActionScript 3.0 表示リストに適用され、JavaScript コードには関連しません。</p>
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>直接または DisplayObject インスタンスが含まれているサブツリーを追加することで、オンステージ表示リストに追加される DisplayObject インスタンスです。DisplayObject インスタンスが直接追加される場合、このイベントの前に <codeph>added</codeph> イベントが発生します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL"><apiName>CANCEL</apiName><shortdesc>
	Event.CANCEL 定数は、cancel イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CANCEL</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>cancel</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作をキャンセルするオブジェクトへの参照です。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	Event.CHANGE 定数は、type プロパティ（change イベントオブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>change</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>値が変更されたオブジェクトです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR"><apiName>CLEAR</apiName><shortdesc>
	Event.CLEAR 定数は、clear イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clear</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CLEAR</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>clear</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>clear</codeph> イベントに対するリスナーが登録された任意の InteractiveObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>メモ：</b> TextField オブジェクトは、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph>、または <codeph>selectAll</codeph> イベントは送出<i>しません</i>。TextField オブジェクトのコンテキストメニューには「カット」、「コピー」、「ペースト」、「クリア」および「すべて選択」コマンドが常に含まれます。これらのコマンドを TextField オブジェクトのコンテキストメニューから削除することはできません。TextField オブジェクトでこれらのコマンドを選択（または相当するキーボード操作を実行）する際、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> および <codeph>selectAll</codeph> 各イベントは生成されません。ただし、InteractiveObject クラスを拡張するその他のクラスからはこれらのイベントが生成されます。Flash Text Engine（FTE）を使用して構築したコンポーネントもこれに該当します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	Event.CLOSE 定数は、close イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CLOSE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>close</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>接続が閉じられたオブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING"><apiName>CLOSING</apiName><shortdesc>
	Event.CLOSING 定数は、closing イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>closing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CLOSING</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>closing</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントオブジェクトをキャンセルすると、閉じる操作がキャンセルされます。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>接続が閉じられるオブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	Event.COMPLETE 定数は、complete イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.COMPLETE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>complete</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>読み込みが完了したネットワークオブジェクトです。 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT"><apiName>CONNECT</apiName><shortdesc>
	Event.CONNECT 定数は、connect イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CONNECT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>connect</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>ネットワーク接続を確立した Socket オブジェクトまたは XMLSocket オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY"><apiName>COPY</apiName><shortdesc>
	copy イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>copy</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>copy</codeph> イベントに対するリスナーが登録された任意の InteractiveObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>メモ：</b> TextField オブジェクトは、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph>、または <codeph>selectAll</codeph> イベントは送出<i>しません</i>。TextField オブジェクトのコンテキストメニューには「カット」、「コピー」、「ペースト」、「クリア」および「すべて選択」コマンドが常に含まれます。これらのコマンドを TextField オブジェクトのコンテキストメニューから削除することはできません。TextField オブジェクトでこれらのコマンドを選択（または相当するキーボード操作を実行）する際、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> および <codeph>selectAll</codeph> 各イベントは生成されません。ただし、InteractiveObject クラスを拡張するその他のクラスからはこれらのイベントが生成されます。Flash Text Engine（FTE）を使用して構築したコンポーネントもこれに該当します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT"><apiName>CUT</apiName><shortdesc>
	cut イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>cut</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>cut</codeph> イベントに対するリスナーが登録された任意の InteractiveObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>メモ：</b> TextField オブジェクトは、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph>、または <codeph>selectAll</codeph> イベントは送出<i>しません</i>。TextField オブジェクトのコンテキストメニューには「カット」、「コピー」、「ペースト」、「クリア」および「すべて選択」コマンドが常に含まれます。これらのコマンドを TextField オブジェクトのコンテキストメニューから削除することはできません。TextField オブジェクトでこれらのコマンドを選択（または相当するキーボード操作を実行）する際、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> および <codeph>selectAll</codeph> 各イベントは生成されません。ただし、InteractiveObject クラスを拡張するその他のクラスからはこれらのイベントが生成されます。Flash Text Engine（FTE）を使用して構築したコンポーネントもこれに該当します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE"><apiName>DEACTIVATE</apiName><shortdesc>
	Event.DEACTIVATE 定数は、deactivate イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.DEACTIVATE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>deactivate</codeph> イベントオブジェクト）の値を定義します。 
	<p><b>注意：</b>このイベントには「キャプチャ段階」と「バブリング段階」はありません。したがって、ターゲットが表示リストにあるかないかに関わらず、潜在的なターゲットにはイベントリスナーを直接追加する必要があります。</p>
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>deactivate</codeph> イベントに対するリスナーが登録された任意の DisplayObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING"><apiName>DISPLAYING</apiName><shortdesc>
	 Event.DISPLAYING 定数は、displaying イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displaying</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Event.DISPLAYING</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>displaying</codeph> イベントオブジェクト）の値を定義します。 
	 <p><b>注意：</b>このイベントは "キャプチャ段階" を経由せず、ターゲットが表示リストにあるかどうかにかかわらず、ターゲットに直接送出されます。</p>
	 <p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>表示されるオブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
	Event.ENTER_FRAME 定数は、enterFrame イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ENTER_FRAME</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>enterFrame</codeph> イベントオブジェクト）の値を定義します。 
	<p><b>注意：</b>このイベントには「キャプチャ段階」と「バブリング段階」はありません。したがって、ターゲットが表示リストにあるかないかに関わらず、潜在的なターゲットにはイベントリスナーを直接追加する必要があります。</p>
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>enterFrame</codeph> イベントに対するリスナーが登録された任意の DisplayObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING"><apiName>EXITING</apiName><shortdesc>
	Event.EXITING 定数は、exiting イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exiting</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.EXITING</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>exiting</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントオブジェクトをキャンセルすると、終了操作がキャンセルされます。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>NativeApplication オブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME"><apiName>EXIT_FRAME</apiName><shortdesc>
	Event.EXIT_FRAME 定数は、exitFrame イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.EXIT_FRAME</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>exitFrame</codeph> イベントオブジェクト）の値を定義します。 
	<p><b>注意：</b>このイベントには「キャプチャ段階」と「バブリング段階」はありません。したがって、ターゲットが表示リストにあるかないかに関わらず、潜在的なターゲットにはイベントリスナーを直接追加する必要があります。</p>
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>enterFrame</codeph> イベントに対するリスナーが登録された任意の DisplayObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED"><apiName>FRAME_CONSTRUCTED</apiName><shortdesc>
	Event.FRAME_CONSTRUCTED 定数は、frameConstructed イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>frameConstructed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.FRAME_CONSTRUCTED</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>frameConstructed</codeph> イベントオブジェクト）の値を定義します。 
	
	<p><b>注意：</b>このイベントには「キャプチャ段階」と「バブリング段階」はありません。したがって、ターゲットが表示リストにあるかないかに関わらず、潜在的なターゲットにはイベントリスナーを直接追加する必要があります。</p>
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>frameConstructed</codeph> イベントに対するリスナーが登録された任意の DisplayObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN"><apiName>FULLSCREEN</apiName><shortdesc>
	Event.FULL_SCREEN 定数は、fullScreen イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.FULL_SCREEN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>fullScreen</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE"><apiName>HTML_BOUNDS_CHANGE</apiName><shortdesc>
	Event.HTML_BOUNDS_CHANGE 定数は、htmlBoundsChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlBoundsChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.HTML_BOUNDS_CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>htmlBoundsChange</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange イベント</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE"><apiName>HTML_DOM_INITIALIZE</apiName><shortdesc>
	Event.HTML_DOM_INITIALIZE 定数は、htmlDOMInitialize イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlDOMInitialize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.HTML_DOM_INITIALIZE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>htmlDOMInitialize</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize イベント</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER"><apiName>HTML_RENDER</apiName><shortdesc>
	Event.HTML_RENDER 定数は、htmlRender イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlRender</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.HTML_RENDER</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>htmlRender</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender イベント</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3"><apiName>ID3</apiName><shortdesc>
	Event.ID3 定数は、id3 イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id3</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ID3</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>id3</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>ID3 データが現在使用可能な MP3 を読み込んでいる Sound オブジェクトです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT"><apiName>INIT</apiName><shortdesc>
	Event.INIT 定数は、init イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>init</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.INIT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>init</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>読み込む SWF ファイルに関連付けられた LoaderInfo オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE"><apiName>LOCATION_CHANGE</apiName><shortdesc>
	Event.LOCATION_CHANGE 定数は、locationChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>locationChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.LOCATION_CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>locationChange</codeph> イベントオブジェクト）の値を定義します。
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange イベント</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE"><apiName>MOUSE_LEAVE</apiName><shortdesc>
	Event.MOUSE_LEAVE 定数は、mouseLeave イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseLeave</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.MOUSE_LEAVE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>mouseLeave</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage オブジェクトです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE"><apiName>NETWORK_CHANGE</apiName><shortdesc>
	Event.NETWORK_CHANGE 定数は、networkChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>networkChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.NETWORK_CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>networkChange</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN"><apiName>OPEN</apiName><shortdesc>
	Event.OPEN 定数は、open イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.OPEN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>open</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>接続をオープンしたネットワークオブジェクトです。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE"><apiName>PASTE</apiName><shortdesc>
	Event.PASTE 定数は、type プロパティ（paste イベントオブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paste</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.PASTE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>paste</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>paste</codeph> イベントに対するリスナーが登録された任意の InteractiveObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>メモ：</b> TextField オブジェクトは、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph>、または <codeph>selectAll</codeph> イベントは送出<i>しません</i>。TextField オブジェクトのコンテキストメニューには「カット」、「コピー」、「ペースト」、「クリア」および「すべて選択」コマンドが常に含まれます。これらのコマンドを TextField オブジェクトのコンテキストメニューから削除することはできません。TextField オブジェクトでこれらのコマンドを選択（または相当するキーボード操作を実行）する際、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> および <codeph>selectAll</codeph> 各イベントは生成されません。ただし、InteractiveObject クラスを拡張するその他のクラスからはこれらのイベントが生成されます。Flash Text Engine（FTE）を使用して構築したコンポーネントもこれに該当します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED"><apiName>REMOVED</apiName><shortdesc>
	Event.REMOVED 定数は、removed イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.REMOVED</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>removed</codeph> イベントオブジェクト）の値を定義します。 
	
	<p platform="javascript"><codeph>removed</codeph> イベントは ActionScript 3.0 表示リストに適用され、JavaScript コードには関連しません。</p>
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>表示リストから削除される DisplayObejct インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE"><apiName>REMOVED_FROM_STAGE</apiName><shortdesc>
	Event.REMOVED_FROM_STAGE 定数は、removedFromStage イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removedFromStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.REMOVED_FROM_STAGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>removedFromStage</codeph> イベントオブジェクト）の値を定義します。 
	
	<p platform="javascript"><codeph>removedFromStage</codeph> イベントは ActionScript 3.0 表示リストに適用され、JavaScript コードには関連しません。</p>
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>直接または DisplayObject インスタンスが含まれているサブツリーを削除することで、オンステージ表示リストから削除される DisplayObject インスタンスです。DisplayObject インスタンスが直接削除される場合、このイベントの前に <codeph>removed</codeph> イベントが発生します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER"><apiName>RENDER</apiName><shortdesc>
	Event.RENDER 定数は、render イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.RENDER</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>render</codeph> イベントオブジェクト）の値を定義します。 
	<p><b>注意：</b>このイベントには「キャプチャ段階」と「バブリング段階」はありません。したがって、ターゲットが表示リストにあるかないかに関わらず、潜在的なターゲットにはイベントリスナーを直接追加する必要があります。</p>
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>。デフォルトの動作をキャンセルすることはできません。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>render</codeph> イベントに対するリスナーが登録された任意の DisplayObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	Event.RESIZE 定数は、resize イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.RESIZE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>resize</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	Event.SCROLL 定数は、scroll イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SCROLL</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>scroll</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>スクロールされた TextField オブジェクトです。<codeph>target</codeph> プロパティは、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT"><apiName>SELECT</apiName><shortdesc>
	Event.SELECT 定数は、select イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SELECT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>select</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>アイテムが選択されたオブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc>
	Event.SELECT_ALL 定数は、selectAll イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SELECT_ALL</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>selectAll</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry><codeph>selectAll</codeph> イベントに対するリスナーが登録された任意の InteractiveObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>メモ：</b> TextField オブジェクトは、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph>、または <codeph>selectAll</codeph> イベントは送出<i>しません</i>。TextField オブジェクトのコンテキストメニューには「カット」、「コピー」、「ペースト」、「クリア」および「すべて選択」コマンドが常に含まれます。これらのコマンドを TextField オブジェクトのコンテキストメニューから削除することはできません。TextField オブジェクトでこれらのコマンドを選択（または相当するキーボード操作を実行）する際、<codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> および <codeph>selectAll</codeph> 各イベントは生成されません。ただし、InteractiveObject クラスを拡張するその他のクラスからはこれらのイベントが生成されます。Flash Text Engine（FTE）を使用して構築したコンポーネントもこれに該当します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE"><apiName>SOUND_COMPLETE</apiName><shortdesc>
	Event.SOUND_COMPLETE 定数は、soundComplete イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>soundComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SOUND_COMPLETE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>soundComplete</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>サウンドの再生が終了した SoundChannel オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE"><apiName>TAB_CHILDREN_CHANGE</apiName><shortdesc>
	Event.TAB_CHILDREN_CHANGE 定数は、tabChildrenChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabChildrenChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.TAB_CHILDREN_CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>tabChildrenChange</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>tabChildren フラグが変更されたオブジェクトです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE"><apiName>TAB_ENABLED_CHANGE</apiName><shortdesc>
	Event.TAB_ENABLED_CHANGE 定数は、tabEnabledChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabEnabledChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.TAB_ENABLED_CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>tabEnabledChange</codeph> イベントオブジェクト）の値を定義します。 
	
	<p platform="javascript"><codeph>tabEnabledChange</codeph> イベントは ActionScript 3.0 表示リストに適用され、JavaScript コードには関連しません。</p>
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>tabEnabled フラグが変更された InteractiveObject です。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE"><apiName>TAB_INDEX_CHANGE</apiName><shortdesc>
	Event.TAB_INDEX_CHANGE 定数は、tabIndexChange イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabIndexChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.TAB_INDEX_CHANGE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>tabIndexChange</codeph> イベントオブジェクト）の値を定義します。 
	
	<p platform="javascript"><codeph>tabIndexChange</codeph> イベントは ActionScript 3.0 表示リストに適用され、JavaScript コードには関連しません。</p>
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>tabIndex が変更されたオブジェクトです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
	Event.UNLOAD 定数は、unload イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.UNLOAD</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>unload</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>解放または置き換える SWF ファイルに関連付けられた LoaderInfo オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE"><apiName>USER_IDLE</apiName><shortdesc>
	Event.USER_IDLE 定数は、userIdle イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userIdle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.USER_IDLE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>userIdle</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT"><apiName>USER_PRESENT</apiName><shortdesc>
	Event.USER_PRESENT 定数は、userPresent イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userPresent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.USER_PRESENT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>userPresent</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
	イベントがバブリングイベントかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	イベントがバブリングイベントかどうかを示します。イベントがバブル可能な場合、この値は <codeph>true</codeph> です。バブル不可能な場合は、<codeph>false</codeph> です。
	
	<p platform="javascript">イベントバブリングは、ActionScript 3.0 表示オブジェクトモデルを使用する、SWF コンテンツ内の表示オブジェクトに対して定義されます。<codeph>bubbles</codeph> プロパティは ActionScript 3.0 コードにのみ関連します。</p>
	
	<p platform="actionscript">イベントが発生すると、イベントフローの 3 つの段階に進みます。表示リストの一番上の階層からターゲットノードの直前までのキャプチャ段階、ターゲットノードに対応するターゲット段階、およびターゲットノードの次のノードから表示リスト階層に戻るまでのバブリング段階があります。</p>
	
	<p platform="actionscript"><codeph>activate</codeph> イベントや <codeph>unload</codeph> イベントなど一部のイベントにはバブリング段階がありません。バブリング段階のないイベントの <codeph>bubbles</codeph> プロパティの値は <codeph>false</codeph> です。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
	イベントに関連付けられた動作を回避できるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	イベントに関連付けられた動作を回避できるかどうかを示します。動作がキャンセル可能な場合、この値は <codeph>true</codeph> です。キャンセル不可能な場合は、<codeph>false</codeph> です。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
	イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。例えば、ユーザーが「OK」をクリックした場合、currentTarget は、そのボタンまたは、そのイベントに対してイベントリスナーを登録している祖先の 1 つを含むノードになります。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
	イベントフローの現在の段階です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	イベントフローの現在の段階です。このプロパティには、次の数値が含まれます。
	<ul>
	    <li> キャプチャ段階（<codeph>EventPhase.CAPTURING_PHASE</codeph>）</li>
	    <li> ターゲット段階（<codeph>EventPhase.AT_TARGET</codeph>）</li>
	    <li> バブリング段階（<codeph>EventPhase.BUBBLING_PHASE</codeph>）</li></ul>
	
	<p platform="javascript">イベントフローは、ActionScript 3.0 表示オブジェクトモデルを使用する、SWF コンテンツ内の表示オブジェクトに対して定義されます。<codeph>eventPhase</codeph> プロパティは、ActionScript 3.0 コードでのみ関連します。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get"><apiName>target</apiName><shortdesc>
	イベントターゲットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	イベントターゲットです。このプロパティにはターゲットノードが含まれます。例えば、ユーザーが「OK」をクリックした場合、ターゲットノードはそのボタンを含む表示リストノードです。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get"><apiName>type</apiName><shortdesc>
	イベントのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	イベントのタイプです。タイプでは大文字小文字が区別されます。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc> 
  Flash Player が新しいオーディオデータを要求するときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Flash Player が新しいオーディオデータを要求するときに送出されます。 
 
  <p>動的に生成されるオーディオを管理する場合、このイベントを使用します。この環境では、Sound オブジェクトにはサウンドデータは実際には格納されません。代わりに、このイベントに割り当てた関数の使用を通じてストリームされるサウンドデータのソケットとして動作します。 </p>
 
  <p>関数では、<codeph>ByteArray.writeFloat()</codeph> メソッドを使用して、再生するサンプリングデータを格納する ByteArray オブジェクト（<codeph>event.data</codeph>）に書き込みます。</p>
 
  <p><codeph>Sound.play()</codeph> を呼び出すと、Flash Player はイベントハンドラーの呼び出しを開始し、サウンドサンプルを含むデータチャンクを要求します。サウンドの再生中、Flash Player は、データの供給を停止するまで、または <codeph>SoundChannel.stop()</codeph> が呼び出されるまで、イベントを送信し続けます。</p>
 
  <p>イベントの待ち時間はプラットフォームにより異なりますが、Flash Player の将来のバージョンでは変更できるようになります。特定の待ち時間に依存せず、計算するようにしてください。ActionScript で待ち時間を計算するには、<codeph>((SampleDataEvent.position/44.1) - SoundChannelObject.position)</codeph> という数式を使用します。</p>
 
  <p><codeph>SampleDataEvent</codeph> オブジェクトで 2048 以上 8192 以下の数のサンプルを用意します。最適なパフォーマンスを得るには、できるだけ多くのサンプルを用意します。用意するサンプルが少なければ少ないほど、再生中にクリック音およびポップ音が発生する可能性が高くなります。この現象はプラットフォームごとに異なり、また、様々な状況で発生します（例えば、ブラウザーのサイズを変更した場合）。あるプラットフォームで 2048 のみのサンプルを用意した状態で動作するコードを記述しても、その同じコードを別のプラットフォームで実行した場合には動作しないことがあります。待ち時間をできるだけ短くするには、ユーザーが選択できるデータの量を考慮します。</p>
 
  <p>用意したサンプル数が 2048 より少ない場合、Flash Player は存在するサンプルを再生し、その後、サウンドファイルの末尾に達したかのようにサウンドを停止し、SoundComplete イベントを生成します。</p>
 
  <p><codeph>Sound.extract()</codeph> メソッドを使用して、Sound オブジェクトからデータを抽出することもできます。データ抽出後、再生のダイナミックストリームにそのデータを書き込むことができます。  </p>
 
  <p>Sound オブジェクトでこのイベントを使用する場合、有効な他の Sound メソッドは、<codeph>Sound.extract()</codeph> と <codeph>Sound.play()</codeph> のみです。他のメソッドまたはプロパティを呼び出すと、「invalid call」例外が発生します。SoundChannel オブジェクトのすべてのメソッドおよびプロジェクトは、この場合でも有効です。</p>
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as"> 次の例は、単純な正弦波を再生します。
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc>
		オーディオデータイベントに関する情報を含むイベントオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。この値は <codeph>Event.SAMPLE_DATA</codeph> です。
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。 
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。 
		</apiDesc></apiParam><apiParam><apiItemName>theposition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>オーディオストリーム内のデータの位置です。
		</apiDesc></apiParam><apiParam><apiItemName>thedata</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>データのバイト配列です。
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		オーディオデータイベントに関する情報を含むイベントオブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone"><apiName>clone</apiName><shortdesc>
		SampleDataEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい SampleDataEvent オブジェクトです。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		SampleDataEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString"><apiName>toString</apiName><shortdesc>
		SampleDataEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>SampleDataEvent</codeph> オブジェクトのすべてのプロパティを含むストリングです。
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		SampleDataEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
		<p><codeph>[SampleDataEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> theposition=<i>value</i> thedata=<i>value</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA"><apiName>SAMPLE_DATA</apiName><shortdesc>
		SampleDataEvent イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sampleData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>type</codeph> プロパティ（<codeph>SampleDataEvent</codeph> イベントオブジェクト）の値を定義します。 
		<p>このイベントには、次のプロパティがあります。</p>
		<adobetable class="innertable">
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>position</codeph></entry><entry>オーディオデータの提供元となるポイントです。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get"><apiName>data</apiName><shortdesc>
		オーディオストリーム内のデータです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		オーディオストリーム内のデータです。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get"><apiName>position</apiName><shortdesc>
		オーディオストリーム内のデータの位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		オーディオストリーム内のデータの位置です。
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 invoke イベントは、AIR アプリケーションが呼び出されたときに、アプリケーションの NativeApplication オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <codeph>invoke</codeph> イベントは、AIR アプリケーションが呼び出されたときに、アプリケーションの NativeApplication オブジェクトによって送出されます。 
	 
	 <p><codeph>invoke</codeph> イベントはアプリケーションが起動されたときに NativeApplication オブジェクトによって必ず送出されますが、それ以外のときにも送出されることがあります。例えば、ユーザーがアプリケーションに関連付けられたファイルをアクティブ化すると、実行中のアプリケーションは追加の InvokeEvent を受け取ります。</p>
	 
	 <p>特定のアプリケーションの単一のインスタンスのみを起動できます。その後で同じアプリケーションをさらに起動しようとすると、実行中のインスタンスの NativeApplication オブジェクトによって新しい <codeph>invoke</codeph> イベントが送出されます。このイベントを処理して適切なアクション（例えば、新しいアプリケーションウィンドウを開いてファイルのデータを表示するなど）を実行するのはアプリケーションの役割です。</p>
	  
	 <p>InvokeEvent オブジェクトは、NativeApplication オブジェクト（<codeph>NativeApplication.nativeApplication</codeph>）によって送出されます。<codeph>invoke</codeph> イベントを受け取るには、NativeApplication オブジェクトの <codeph>addEventListener()</codeph> メソッドを呼び出します。<codeph>invoke</codeph> イベントのイベントリスナーを登録すると、そのイベントリスナーは、登録の前に発生した <codeph>invoke</codeph> イベントもすべて受け取ります。これらの以前のイベントは、<codeph>addEventListener()</codeph> の呼び出しが戻った後に送出されますが、必ずしも登録後に送出される可能性のある新しい <codeph>invoke</codeph> イベントよりも前に送出されるとは限りません。このため、送出順序に依存しないでください。</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#BrowserInvokeEvent"><linktext>flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier>flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 InvokeEvent クラスのコンストラクター関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc><codeph>Event.type</codeph> としてアクセス可能なイベントタイプです。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>InvokeEvent オブジェクトでは <codeph>false</codeph> に設定します。
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>InvokeEvent オブジェクトでは <codeph>false</codeph> に設定します。
	 </apiDesc></apiParam><apiParam><apiItemName>dir</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>arguments</codeph> 配列内の相対パスの解決に使用されるディレクトリです。
	 </apiDesc></apiParam><apiParam><apiItemName>argv</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>アプリケーションに渡す引数（ストリング）の配列です。
	 </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>standard</apiData><apiDesc>イベントの原因です。値は <codeph>InvokeEventReason.LOGIN</codeph> か <codeph>InvokeEventReason.STANDARD</codeph> のいずれかです（このパラメーターは AIR バージョン 1.5.1 から使用できます）。 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 InvokeEvent クラスのコンストラクター関数です。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 このイベントの新しいコピーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>イベントのコピーです。
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 このイベントの新しいコピーを作成します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE"><apiName>INVOKE</apiName><shortdesc>
	 InvokeEvent.INVOKE 定数は、InvokeEvent オブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>InvokeEvent.INVOKE</codeph> 定数は、InvokeEvent オブジェクトの <codeph>type</codeph> プロパティの値を定義します。
	 
     <p>InvokeEvent オブジェクトには、次のプロパティがあります。</p>
 	 <adobetable class="innertable">
        
	     
	    
	    
	     
	    
	     
	        
	  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>この呼び出し中に渡されるストリング引数の配列です。</entry></row><row><entry><codeph>currentDirectory</codeph></entry><entry>arguments 配列内の相対パスの解決に使用されるディレクトリを表す File オブジェクトです。</entry></row><row><entry><codeph>reason</codeph></entry><entry>invoke イベントの送出された原因が、ログイン時にアプリケーションが自動的に起動したことである（<codeph>InvokeEventReason.LOGIN</codeph>）か、またはその他の理由である（<codeph>InvokeEventReason.STANDARD</codeph>）かを示すコードです。AIR バージョン 1.5.1 から使用できます。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで InvokeEvent オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>target</codeph></entry><entry>常に NativeApplication object オブジェクトです。 
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 この呼び出し中に渡されるストリング引数の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 この呼び出し中に渡されるストリング引数の配列です。これがコマンドラインからの呼び出しの場合、この配列は、プロセス名を<i>除く</i>コマンドライン引数になります。
		 
		 <p><i>注意：</i>Mac<sup>®</sup> OS X で複数のファイルを選択して開くと、AIR によって単一の <codeph>invoke</codeph> イベント（選択したすべてのファイルの名前を <codeph>arguments</codeph> 配列に含む）が送出されます。ただし Windows<sup>®</sup> および Linux では、AIR は別々の <codeph>invoke</codeph> イベントを送出します（<codeph>arguments</codeph> 配列にあるファイル名のみを含んだ選択済みのファイルごとに送出します）。
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get"><apiName>currentDirectory</apiName><shortdesc>
		 arguments 配列内の相対パスの解決に使用されるディレクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>arguments</codeph> 配列内の相対パスの解決に使用されるディレクトリです。 
		 
		 <p>このプロパティは、アプリケーションがコマンドラインから起動された場合には通常、アプリケーションが起動されたコマンドラインシェルの現在の作業ディレクトリに設定されます。アプリケーションが GUI シェルから起動された場合には通常、ファイルシステムのルートに設定されます。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get"><apiName>reason</apiName><shortdesc>
		 この InvokeEvent の理由です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 この InvokeEvent の理由です。このプロパティは、アプリケーションがユーザーの手動によって起動されたか、ログイン時に自動的に起動されたかを示します。使用される値は、<codeph>InvokeEventReason</codeph> クラス内に列挙されている次の定数です。
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>InvokeEventReason 定数</entry><entry>説明</entry></row></thead><tbody><row>
		 	<entry><codeph>LOGIN</codeph></entry>
		 	<entry>ログイン時に自動的に起動されたことを示します。</entry>
		 
		 </row><row>
		 	<entry><codeph>STANDARD</codeph></entry>
		 	<entry>その他の理由により起動されたことを示します。</entry>
		 
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
ネットワーク要求が HTTP ステータスコードを返すと、アプリケーションによって HTTPStatusEvent オブジェクトが送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
ネットワーク要求が HTTP ステータスコードを返すと、アプリケーションによって HTTPStatusEvent オブジェクトが送出されます。 

<p>HTTPStatusEvent オブジェクトは、常に、エラーイベントまたは完了イベントの前に送信されます。HTTPStatusEvent オブジェクトは、必ずしもエラー条件を示すわけではなく、ネットワークスタックによって提供される HTTP ステータスコード（ある場合）を反映します。<ph platform="actionscript">Flash Player の環境によっては、HTTP ステータスコードを検出できないことがあります。このような場合は常に、ステータスコード 0 が報告されます。</ph> </p>

<p><ph platform="actionscript">Flash Player では、HTTPStatus イベントのタイプは <codeph>httpStatus</codeph> のみが存在します。</ph>AIR ランタイムでは、FileReference、URLLoader、URLStream のいずれかが <codeph>httpResponseStatus</codeph> を監視するように登録できます。このイベントは <codeph>responseURL</codeph> プロパティと <codeph>responseHeaders</codeph> プロパティを含みます。これらのプロパティは <codeph>httpStatus</codeph> イベントでは定義されていません。</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as"> 次の例では、存在しないファイルを http://www.[yourDomain].com のルート Web ディレクトリからロードしようとします。これにより、ファイルが見つからなかったことを示すステータス 404 と共に <codeph>httpStatusHandler</codeph> イベントが送出されます。<codeph>httpStatusHandler</codeph> イベントは <codeph>httpStatusHandler()</codeph> によって処理されます。これにより、イベントに関する情報が 2 行出力されます。
 
 <p> <b>注意：</b> 
 <ol>
    <li>この例では、「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルし、<codeph>securityError</codeph> イベントを生成する必要があります。</li>
    <li>http://www.[yourDomain].com で実行し、ポート 80 でリスニングしているサーバーが必要です。これ以外の場合は、ステータスコードが 404 ではなく 0 の<codeph>httpStatusHandler</codeph> イベントを受け取ります。</li>
    <li>http://www.[yourDomain].com のルート Web ディレクトリに MissingFile.html という名前のファイルを置かないでください。このようなファイルがあると、正しい <codeph>httpStatusHandler</codeph> イベントを受け取ることができません。</li>
 </ol>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
	HTTP ステータスイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。HTTPStatus イベントのタイプは <codeph>HTTPStatusEvent.HTTP_STATUS</codeph> の 1 つのみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>数値ステータスです。イベントリスナーは、<codeph>status</codeph> プロパティを通じてこの情報にアクセスできます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>HTTPStatusEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	HTTP ステータスイベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS"><linktext>HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	HTTPStatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい HTTPStatusEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	HTTPStatusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	HTTPStatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>HTTPStatusEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	HTTPStatusEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[HTTPStatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> status=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS"><apiName>HTTP_RESPONSE_STATUS</apiName><shortdesc>
	httpStatus イベントと異なり、httpResponseStatus イベントは応答データの前に配信されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpResponseStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>httpStatus</codeph> イベントと異なり、<codeph>httpResponseStatus</codeph> イベントは応答データの前に配信されます。また、<codeph>httpResponseStatus</codeph> イベントには <codeph>responseHeaders</codeph> プロパティと <codeph>responseURL</codeph> プロパティの値が含まれます（これらは <codeph>httpStatus</codeph> イベントでは定義されていません）。<codeph>httpResponseStatus</codeph> イベントは、発生した場合、<codeph>complete</codeph> イベントまたは <codeph>error</codeph> イベントの前に、これらのイベントとは別に送信されます。 
	
	<p><codeph>HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>httpResponseStatus</codeph> イベントオブジェクト）の値を定義します。 </p>
	
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>responseURL</codeph></entry><entry>応答の返送元の URL です。</entry></row><row><entry><codeph>responseHeaders</codeph></entry><entry>返された応答ヘッダー（URLRequestHeader オブジェクトの配列）です。</entry></row><row><entry><codeph>status</codeph></entry><entry>サーバーから返された HTTP ステータスコードです。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTTP ステータスコードを受け取るネットワークオブジェクトです。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS"><apiName>HTTP_STATUS</apiName><shortdesc>
	HTTPStatusEvent.HTTP_STATUS 定数は、httpStatus イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>HTTPStatusEvent.HTTP_STATUS</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>httpStatus</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>status</codeph></entry><entry>サーバーから返された HTTP ステータスコードです。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTTP ステータスコードを受け取るネットワークオブジェクトです。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get"><apiName>responseHeaders</apiName><shortdesc>
	 返された応答ヘッダー（URLRequestHeader オブジェクトの配列）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 返された応答ヘッダー（URLRequestHeader オブジェクトの配列）です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get"><apiName>responseURL</apiName><shortdesc>
	 応答の返送元の URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 応答の返送元の URL です。リダイレクトされた場合、これは要求した URL とは異なる URL になります。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get"><apiName>status</apiName><shortdesc>
	サーバーから返された HTTP ステータスコードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	サーバーから返された HTTP ステータスコードです。例えば、値 404 は、要求された URI と一致する URI が見つからなかったことを示します。HTTP ステータスコードは、<xref href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">ftp://ftp.isi.edu/in-notes/rfc2616.txt</xref> にある HTTP 仕様書のセクション 10.4 と 10.5 に記載されています。
	
	<p><ph platform="actionscript">Flash Player</ph> または AIR がサーバーからステータスコードを取得できなかった場合、またはサーバーと通信できなかった場合は、記述したコードにデフォルト値の 0 が渡されます。 <ph platform="actionscript">値 0 は、どのプレーヤーでも生成される可能性があります（例えば、正しくない形式の URL が要求された場合など）。また、特定のブラウザーで実行される Flash Player プラグインでは、HTTP ステータスコードをプレーヤーに渡すことができないので、常に値 0 が生成されます。該当するブラウザーには、Netscape、Mozilla、Safari、Opera および Internet Explorer for the Macintosh があります。</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
	 File オブジェクトは、File オブジェクトの getDirectoryListingAsync() メソッドに対する呼び出しにより一連のファイルおよびディレクトリが列挙されるときや、browseForOpenMultiple() メソッドへの呼び出し後にユーザーがファイルを選択するときに、FileListEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>File オブジェクトは、getDirectoryListingAsync() メソッドまたは browseForOpenMultiple() メソッドへの呼び出しが成功した後に FileListEvent オブジェクトを送出します。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 File オブジェクトは、File オブジェクトの <codeph>getDirectoryListingAsync()</codeph> メソッドに対する呼び出しにより一連のファイルおよびディレクトリが列挙されるときや、<codeph>browseForOpenMultiple()</codeph> メソッドへの呼び出し後にユーザーがファイルを選択するときに、FileListEvent オブジェクトを送出します。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
		FileListEvent オブジェクト用のコンストラクター関数です。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>イベントオブジェクトがバブリングを実行するかどうかを判断します（FileListEvent オブジェクトに対しては <codeph>false</codeph>）。
		
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトをキャンセルできるかどうかを判断します（FileListEvent オブジェクトに対しては <codeph>false</codeph>）。
		
		</apiDesc></apiParam><apiParam><apiItemName>files</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>File オブジェクトの配列です。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		FileListEvent オブジェクト用のコンストラクター関数です。 
		
		<p>ランタイムはこのクラスを使って FileListEvent オブジェクトを作成します。このコンストラクターをコードで直接使用することはありません。</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING"><apiName>DIRECTORY_LISTING</apiName><shortdesc>
		 FileListEvent.DIRECTORY_LISTING 定数は、directoryListing イベントのイベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoryListing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>FileListEvent.DIRECTORY_LISTING</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>directoryListing</codeph> イベントのイベントオブジェクト）の値を定義します。
		 
		 <p>このイベントには、次のプロパティがあります。</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>files</codeph></entry><entry>ファイルまたはディレクトリを表す File オブジェクトの配列が見つかりました。</entry></row><row><entry><codeph>target</codeph></entry><entry>FileListEvent オブジェクトです。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE"><apiName>SELECT_MULTIPLE</apiName><shortdesc>
		 FileListEvent.SELECT_MULTIPLE 定数は、selectMultiple イベントのイベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectMultiple</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>FileListEvent.SELECT_MULTIPLE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>selectMultiple</codeph> イベントのイベントオブジェクト）の値を定義します。
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>files</codeph></entry><entry>ファイルを表す File オブジェクトの配列が選択されました。</entry></row><row><entry><codeph>target</codeph></entry><entry>FileListEvent オブジェクトです。</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files"><apiName>files</apiName><shortdesc>
		 ファイルまたはディレクトリを表す File オブジェクトの配列が見つかったか、選択されました。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 ファイルまたはディレクトリを表す File オブジェクトの配列が見つかったか、選択されました。 
		 
		 <p><codeph>File.getDirectoryListingAsync()</codeph> メソッドの場合、これはメソッドを呼び出した File オブジェクトによって表されるディレクトリのルートレベルで見つかったファイルとディレクトリのリストです。<codeph>File.browseForOpenMultiple()</codeph> メソッドの場合、ユーザーが選択したファイルのリストです。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
 NativeWindow オブジェクトは、ウィンドウのサイズまたは位置を変更した場合に、NativeWindowBoundsEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ウィンドウのサイズまたは位置を変更する NativeWindow イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 NativeWindow オブジェクトは、ウィンドウのサイズまたは位置を変更した場合に、NativeWindowBoundsEvent オブジェクトを送出します。次の 4 種類のイベントがあります。
 <ul>
     <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING"><linktext>flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE"><linktext>flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING"><linktext>flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE"><linktext>flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving"><apiName>moving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing"><apiName>resizing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
    ウィンドウ境界イベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。
    <ul>
        <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを示します。
    </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>直前の変更または現在実行中の変更が行われる前の境界を示します。
    </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>直前の変更または現在実行中の変更が行われた後の境界を示します。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    ウィンドウ境界イベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone"><apiName>clone</apiName><shortdesc>
    NativeWindowBoundsEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい NativeWindowBoundsEvent オブジェクトです。
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    NativeWindowBoundsEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString"><apiName>toString</apiName><shortdesc>
    NativeWindowBoundsEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>NativeWindowBoundsEvent オブジェクトのすべてのプロパティを含むストリングです。
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    NativeWindowBoundsEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
    <p><codeph>[NativeWindowBoundsEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> previousDisplayState=<i>value</i> currentDisplayState=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
    move イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>move</codeph> イベントオブジェクト）の値を定義します。このイベントには、次のプロパティがあります。
    <adobetable class="innertable">
        
         
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>ウィンドウの変更後の境界です。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>ウィンドウの変更前の境界です。</entry></row><row><entry><codeph>target</codeph></entry><entry>状態が変更された NativeWindow オブジェクトです。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING"><apiName>MOVING</apiName><shortdesc>
    moving イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moving</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>moving</codeph> イベントオブジェクト）の値を定義します。このイベントには、次のプロパティがあります。
    <adobetable class="innertable">
        
         
         
        
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>現在実行中の変更が行われた後のウィンドウの境界です。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>現在実行中の変更が行われる前のウィンドウの境界です。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントをキャンセルすると、ウィンドウは移動されません。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>target</codeph></entry><entry>状態が変更された NativeWindow オブジェクトです。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
    resize イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>resize</codeph> イベントオブジェクト）の値を定義します。このイベントには、次のプロパティがあります。
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>ウィンドウの変更後の境界です。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>ウィンドウの変更前の境界です。</entry></row><row><entry><codeph>target</codeph></entry><entry>状態が変更された NativeWindow オブジェクトです。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
    resizing イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>resizing</codeph> イベントオブジェクト）の値を定義します。このイベントには、次のプロパティがあります。
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>現在実行中の変更が行われた後のウィンドウの境界です。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>現在実行中の変更が行われる前のウィンドウの境界です。</entry></row><row><entry><codeph>target</codeph></entry><entry>状態が変更された NativeWindow オブジェクトです。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。このイベントをキャンセルすると、ウィンドウは移動されません。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get"><apiName>afterBounds</apiName><shortdesc>
     変更後のウィンドウの境界です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     変更後のウィンドウの境界です。
       
     <p>イベントが <codeph>moving</codeph> または <codeph>resizing</codeph> の場合、境界はまだ変更されていません。<codeph>afterBounds</codeph> は、イベントがキャンセルされなかった場合の新しい境界を示します。イベントが <codeph>move</codeph> または <codeph>resize</codeph> の場合、<codeph>afterBounds</codeph> は新しい境界を示します。
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get"><apiName>beforeBounds</apiName><shortdesc>
     変更前のウィンドウの境界です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     変更前のウィンドウの境界です。  
     
     <p>イベントが <codeph>moving</codeph> または <codeph>resizing</codeph> の場合、境界はまだ変更されていません。<codeph>beforeBounds</codeph> は、ウィンドウの現在の境界を表します。イベントが <codeph>move</codeph> または <codeph>resize</codeph> の場合、<codeph>beforeBounds</codeph> は元の値を示します。
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
SystemTrayIcon オブジェクトは、マウス操作に応答して ScreenMouseEvent タイプのイベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ScreenMouseEvent イベントのイベントオブジェクトです。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
SystemTrayIcon オブジェクトは、マウス操作に応答して ScreenMouseEvent タイプのイベントを送出します。

<p>ScreenMouseEvent オブジェクトは MouseEvent クラスを拡張して、<codeph>screenX</codeph> と <codeph>screenY</codeph> という 2 つの追加プロパティを提供します。これらのプロパティはアプリケーションウィンドウやステージではなく、デスクトップ主画面に関連するマウス座標を報告します。</p>
 
</apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#SystemTrayIcon"><linktext>flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown"><apiName>rightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
	スクリーン座標のマウス位置を含む ScreenMouseEvent オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>クリックのスクリーン座標での X 位置です。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>クリックのスクリーン座標での Y 位置です。
	</apiDesc></apiParam><apiParam><apiItemName>screenX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>画面マウスイベントがバブリングすることはまったくないので <codeph>false</codeph> に設定します。 
	</apiDesc></apiParam><apiParam><apiItemName>screenY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>キャンセルするデフォルトビヘイビアーがないので <codeph>false</codeph> に設定します。
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Windows または Linux では、このイベントが発生したときに Ctrl キーが押されたかどうかを示します。Macintosh では、Control キーまたは Command キーが押されていたかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>このイベントが発生したときに Alt キーが押されていたことを示すには <codeph>true</codeph> に設定します。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>このイベントが発生したときに Shift キーが押されていたことを示すには <codeph>true</codeph> に設定します。
	</apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>このイベントが発生したときにマウスボタンが押されていたことを示すには <codeph>true</codeph> に設定します。
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Command キーが押されていたことを示します（Macintosh のみ）。
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Ctrl キーまたは Control キーが押されていたかどうかを示します。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ScreenMouseEvent オブジェクトのコンストラクターです。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	スクリーン座標のマウス位置を含む ScreenMouseEvent オブジェクトを作成します。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone"><apiName>clone</apiName><shortdesc>
	ScreenMouseEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい ScreenMouseEvent オブジェクトです。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ScreenMouseEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString"><apiName>toString</apiName><shortdesc>
	ScreenMouseEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ScreenMouseEvent オブジェクトのすべてのプロパティを含むストリングです。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ScreenMouseEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[ScreenMouseEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> status=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	ScreenMouseEvent.CLICK 定数は、click イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.CLICK</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>click</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次の関連プロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある SystemTrayIcon オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	ScreenMouseEvent.MOUSE_DOWN 定数は、mouseDown イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.MOUSE_DOWN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>mouseDown</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次の関連プロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある SystemTrayIcon オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	ScreenMouseEvent.MOUSE_UP 定数は、mouseUp イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.MOUSE_UP</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>mouseUp</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次の関連プロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある SystemTrayIcon オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	ScreenMouseEvent.RIGHT_CLICK 定数は、type プロパティ（rightClick イベントオブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.RIGHT_CLICK</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>rightClick</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次の関連プロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある SystemTrayIcon オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	ScreenMouseEvent.RIGHT_MOUSE_DOWN 定数は、rightMouseDown イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>rightMouseDown</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次の関連プロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある SystemTrayIcon オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	ScreenMouseEvent.RIGHT_MOUSE_UP 定数は、click イベントオブジェクトの rightMouseUp プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.RIGHT_MOUSE_UP</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>rightMouseUp</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次の関連プロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>マウスの主ボタンが押されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>Windows または Linux では Ctrl キーがアクティブになっている場合は、<codeph>true</codeph> です。Macintosh では Ctrl キーまたは Command キーがアクティブになっている場合は、<codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>Macintosh で Command キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。 Windows では常に <codeph>false</codeph> になります。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>Ctrl キーまたは Control キーがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の水平座標です。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>スクリーン座標を基準とするイベント発生位置の垂直座標です。</entry></row><row><entry><codeph>target</codeph></entry><entry>ポインティングデバイスの下にある SystemTrayIcon オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
	クリックのスクリーン座標での X 位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	クリックのスクリーン座標での X 位置です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
	クリックのスクリーン座標での Y 位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	クリックのスクリーン座標での Y 位置です。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
    ユーザーの認証資格情報を要求する、DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに、NetStream オブジェクトが DRMAuthenticateEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>DRM 対応オブジェクトのイベントオブジェクトです。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
    ユーザーの認証資格情報を要求する、DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに、NetStream オブジェクトが DRMAuthenticateEvent オブジェクトを送出します。 
	<p>
	DRMAuthenticateEvent ハンドラーは、必要な資格情報（ユーザー名、パスワード、タイプなど）を収集し、その値を認証のために <codeph>NetStream.setDRMAuthenticationCredentials()</codeph> メソッドに渡します。それぞれの AIR アプリケーションはユーザー資格情報を取得するためのメカニズムを提供する必要があります。例えば、ユーザー名とパスワード、および必要に応じてタイプを入力できる単純なユーザーインターフェイスをユーザーに提供することもできます。  
	</p> 
	<p>
	ユーザー認証に失敗した場合、認証が再試行され、NetStream オブジェクトの新しい DRMAuthenticateEvent イベントが送出されます。
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>flash.net.NetStream.setDRMAuthenticationCredentials()</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE"><linktext>DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
 	    DRM 認証イベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。DRMAuthenticate イベントのタイプは <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> の 1 つのみです。
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
		</apiDesc></apiParam><apiParam><apiItemName>header</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>サーバーによって提供される暗号化コンテンツファイルのヘッダーです。
  		</apiDesc></apiParam><apiParam><apiItemName>userPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc> サーバーによって提供されるユーザー名資格情報のプロンプトです。
		</apiDesc></apiParam><apiParam><apiItemName>passPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>サーバーによって提供されるパスワード資格情報のプロンプトです。
		</apiDesc></apiParam><apiParam><apiItemName>urlPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>サーバーによって提供される、表示する URL のプロンプトです。
		</apiDesc></apiParam><apiParam><apiItemName>authenticationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>提供された資格情報が、Flash Media Rights Management Server（FMRMS）とプロキシサーバーのいずれの認証用なのかを示します。
		</apiDesc></apiParam><apiParam><apiItemName>netstream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiData>null</apiData><apiDesc>このイベントを開始した NetStream オブジェクトです。
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	    DRM 認証イベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone"><apiName>clone</apiName><shortdesc>
		DRMAuthenticateEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい DRMAuthenticateEvent オブジェクトです。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		DRMAuthenticateEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString"><apiName>toString</apiName><shortdesc>
		DRMAuthenticateEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DRMAuthenticateEvent オブジェクトのすべてのプロパティを含むストリングです。
		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		DRMAuthenticateEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。 
     	<p><codeph>[DRMAuthenticateEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> header=<i>value</i> usernamePrompt=<i>value</i> passwordPrompt=<i>value</i> urlPrompt=<i>value</i>] authenticationType=<i>value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM"><apiName>AUTHENTICATION_TYPE_DRM</apiName><shortdesc>
		DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM 定数は、DRMAuthenticateEvent オブジェクトの authenticationType プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drm</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph> 定数は、DRMAuthenticateEvent オブジェクトの <codeph>authenticationType</codeph> プロパティの値を定義します。 
		
		<p>このイベントには、次のプロパティがあります。</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>提供された資格情報が、Flash Media Rights Management Server（FMRMS）とプロキシサーバーのいずれの認証用なのかを示します。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>header</codeph></entry><entry>サーバーによって提供される暗号化コンテンツファイルのヘッダーです。</entry></row><row><entry><codeph>netstream</codeph></entry><entry>このイベントを開始した NetStream オブジェクトです。</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>サーバーによって提供されるパスワード資格情報のプロンプトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream オブジェクトです。</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>サーバーによって提供される、表示する URL のプロンプトです。</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>サーバーによって提供されるユーザー名資格情報のプロンプトです。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY"><apiName>AUTHENTICATION_TYPE_PROXY</apiName><shortdesc>
		DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY 定数は、DRMAuthenticateEvent オブジェクトの authenticationType プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proxy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph> 定数は、DRMAuthenticateEvent オブジェクトの <codeph>authenticationType</codeph> プロパティの値を定義します。 
		
		<p>このイベントには、次のプロパティがあります。</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>提供された資格情報が、Flash Media Rights Management Server（FMRMS）とプロキシサーバーのいずれの認証用なのかを示します。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>header</codeph></entry><entry>サーバーによって提供される暗号化コンテンツファイルのヘッダーです。</entry></row><row><entry><codeph>netstream</codeph></entry><entry>このイベントを開始した NetStream オブジェクトです。</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>サーバーによって提供されるパスワード資格情報のプロンプトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream オブジェクトです。</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>サーバーによって提供される、表示する URL のプロンプトです。</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>サーバーによって提供されるユーザー名資格情報のプロンプトです。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE"><apiName>DRM_AUTHENTICATE</apiName><shortdesc>
		DRMAuthenticateEvent.DRM_AUTHENTICATE 定数は、type プロパティ（DRMAuthenticateEvent オブジェクト）の値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmAuthenticate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> 定数は、DRMAuthenticateEvent オブジェクトの <codeph>type</codeph> プロパティの値を定義します。 
		
		<p>このイベントには、次のプロパティがあります。</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>提供された資格情報が、Flash Media Rights Management Server（FMRMS）とプロキシサーバーのいずれの認証用なのかを示します。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>header</codeph></entry><entry>サーバーによって提供される暗号化コンテンツファイルのヘッダーです。</entry></row><row><entry><codeph>netstream</codeph></entry><entry>このイベントを開始した NetStream オブジェクトです。</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>サーバーによって提供されるパスワード資格情報のプロンプトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream オブジェクトです。</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>サーバーによって提供される、表示する URL のプロンプトです。</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>サーバーによって提供されるユーザー名資格情報のプロンプトです。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get"><apiName>authenticationType</apiName><shortdesc>
		提供された資格情報が、Flash Media Rights Management Server（FMRMS）とプロキシサーバーのいずれの認証用なのかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		提供された資格情報が、Flash Media Rights Management Server（FMRMS）とプロキシサーバーのいずれの認証用なのかを示します。例えば、<codeph>"proxy"</codeph> オプションでは、アプリケーションがプロキシサーバーに対して認証を行ってからユーザーがインターネットにアクセスできるようになることを企業が要求する場合、それを行うことができます。匿名認証を使用する場合を除き、プロキシ認証の後、ユーザーは証明書を取得してコンテンツを再生するために、FMRMS での認証も必要です。FMRMS で認証するために、<codeph>setDRMAuthenticationcredentials()</codeph> をもう一度 <codeph>"drm"</codeph> オプションと共に使用できます。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get"><apiName>header</apiName><shortdesc>
		サーバーによって提供される暗号化コンテンツファイルのヘッダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		サーバーによって提供される暗号化コンテンツファイルのヘッダーです。暗号化コンテンツのコンテキストに関する情報が含まれています。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get"><apiName>netstream</apiName><shortdesc>
		このイベントを開始した NetStream オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc>
		このイベントを開始した NetStream オブジェクトです。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get"><apiName>passwordPrompt</apiName><shortdesc>
		サーバーによって提供されるパスワード資格情報のプロンプトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		サーバーによって提供されるパスワード資格情報のプロンプトです。ストリングには、必要なパスワードのタイプに対する指示を入れることができます。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get"><apiName>urlPrompt</apiName><shortdesc>
		サーバーによって提供される URL ストリングのプロンプトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		サーバーによって提供される URL ストリングのプロンプトです。ストリングには、ユーザー名とパスワードの送信先を指定できます。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get"><apiName>usernamePrompt</apiName><shortdesc>
		サーバーによって提供されるユーザー名資格情報のプロンプトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		サーバーによって提供されるユーザー名資格情報のプロンプトです。ストリングには、必要なユーザー名のタイプに対する指示を入れることができます。例えば、コンテンツプロバイダーがユーザー名を電子メールアドレスにするよう要求することもあります。
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
 ContextMenuEvent オブジェクトは、ユーザーがコンテキストメニューを開いたり操作したりするときに InteractiveObject によって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ContextMenuEvent イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 ContextMenuEvent オブジェクトは、ユーザーがコンテキストメニューを開いたり操作したりするときに InteractiveObject によって送出されます。次の 2 種類の ContextMenuEvent オブジェクトがあります。
 <ul>
   <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
   <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as"> 次の例では、<codeph>ContextMenuEventExample</codeph> クラスを使用して、デフォルトのコンテキストメニューアイテムをステージから削除し、ステージ上の四角形の色を変更する新しいメニューアイテムを追加します。この例では、次の処理を実行します。
 
 <ol>
     <li><codeph>myContextMenu</codeph> プロパティが宣言され、新しい ContextMenu オブジェクトに割り当てられ、Sprite 型の <codeph>redRectangle</codeph> プロパティが宣言されます。</li>
     <li><codeph>removeDefaultItems()</codeph> メソッドが呼び出されます。このメソッドによって、すべてのビルトインコンテキストメニューアイテムが削除されます。ただし、プリントを除きます。</li>
 
     <li><codeph>addCustomMenuItems()</codeph> メソッドが呼び出されます。このメソッドによって、<codeph>Reverse Colors</codeph> メニューアイテムが <codeph>defaultItems</codeph> 配列に配置されます。配列の <codeph>push()</codeph> メソッドが使用されます。<codeph>menuItemSelect</codeph> イベントリスナーが ContextMenuItem オブジェクトに追加され、関連付けられるメソッドは <codeph>menuItemSelectHandler()</codeph> という名前です。このメソッドは、ユーザーがコンテキストメニューから「色の反転」を選択すると必ず <codeph>trace()</codeph> ステートメントを出力します。また、赤い四角形は黒に変わり、黒のテキストは赤に変わります。</li>
 
     <li>コンストラクターに戻り、<codeph>menuSelect</codeph> イベントリスナーが、関連するメソッド <codeph>menuSelectHandler()</codeph> と共に追加されます。このメソッドは、コンテキストメニューのアイテムが選択されるたびに 3 つの <codeph>trace()</codeph> ステートメントを出力します。</li>
 
 <li>コンストラクターは <codeph>addChildren()</codeph> を呼び出します。これは、赤色の四角形を描画し、その四角形を表示リストに追加します。この四角形は、表示リストにすぐに表示されます。</li>
 
     <li>最後に、<codeph>myContextMenu</codeph> が <codeph>redRectangle</codeph> プロパティのコンテキストメニューに割り当てられます。このため、カスタムコンテキストメニューが表示されるのは、マウスポインターが四角形の上にある場合のみです。</li>
 </ol>
<codeblock>
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.ui.xml#ContextMenu"><linktext>ContextMenu クラス</linktext></link><link href="flash.ui.xml#ContextMenuItem"><linktext>ContextMenuItem クラス</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect"><apiName>menuItemSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect"><apiName>menuSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
	メニューイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。
	<ul>
	    <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
	    <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
	</ul>
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	</apiDesc></apiParam><apiParam><apiItemName>mouseTarget</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>ユーザーがコンテキストメニューを表示するために右クリックした表示リストオブジェクトです。これは、<codeph>contextMenuOwner</codeph>、またはその表示リストの子孫のいずれかになります。
	</apiDesc></apiParam><apiParam><apiItemName>contextMenuOwner</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>メニューが関連付けられている表示リストオブジェクトです。これは、<codeph>mouseTarget</codeph>、またはその表示リストの祖先のいずれかになります。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ContextMenuEvent オブジェクトのコンストラクターです。
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	メニューイベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT"><linktext>ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone"><apiName>clone</apiName><shortdesc>
	ContextMenuEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい ContextMenuEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ContextMenuEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString"><apiName>toString</apiName><shortdesc>
	ContextMenuEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ContextMenuEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ContextMenuEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph> [ContextMenuEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ... contextMenuOwner= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT"><apiName>MENU_ITEM_SELECT</apiName><shortdesc>
	menuItemSelect イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuItemSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>menuItemSelect</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
		<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>メニューが関連付けられている表示リストオブジェクトです。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>ユーザーがコンテキストメニューを表示するために右クリックした表示リストオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>選択された ContextMenuItem オブジェクトです。target は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT"><apiName>MENU_SELECT</apiName><shortdesc>
	menuSelect イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>menuSelect</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>メニューが関連付けられている表示リストオブジェクトです。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>ユーザーがコンテキストメニューを表示するために右クリックした表示リストオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>表示される ContextMenu オブジェクトです。target は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get"><apiName>contextMenuOwner</apiName><shortdesc>
	メニューが関連付けられている表示リストオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	メニューが関連付けられている表示リストオブジェクトです。これは、マウスターゲット（<codeph>mouseTarget</codeph>）、または表示リストの祖先のいずれかになります。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get"><apiName>isMouseTargetInaccessible</apiName><shortdesc>
	 mouseTarget プロパティがセキュリティ上の理由で null に設定されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>mouseTarget</codeph> プロパティがセキュリティ上の理由で <codeph>null</codeph> に設定されているかどうかを示します。<codeph>menuTarget</codeph> の公称値が別のセキュリティサンドボックスにある <codeph>DisplayObject</codeph> への参照である場合、このサンドボックスの境界をまたいで両方向に権限がある場合を除いては、<codeph>menuTarget</codeph> は <codeph>null</codeph> に設定されます。権限を確立するには、SWF ファイルから <codeph>Security.allowDomain()</codeph> を呼び出すか、イメージファイルのサーバーからポリシーファイルを提供し、<codeph>LoaderContext.checkPolicyFile</codeph> フラグを設定してイメージを読み込みます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/mouseTarget"><linktext>ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get"><apiName>mouseTarget</apiName><shortdesc>
	ユーザーがコンテキストメニューを表示するために右クリックした表示リストオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	ユーザーがコンテキストメニューを表示するために右クリックした表示リストオブジェクトです。これは、メニューが関連付けられている表示リストオブジェクト（<codeph>contextMenuOwner</codeph>）、またはその表示リストの子孫のいずれかになります。
	<p>このプロパティの値は、マウスターゲットがない場合（例えばマウスが背景上にある場合）、またはマウスターゲットはあるがアクセスできないセキュリティサンドボックスの中にある場合の 2 つの状況の場合に、<codeph>null</codeph> になる可能性があります。<codeph>isMouseTargetInaccessible()</codeph> プロパティを使用して、どの理由が適用されるかを判別します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible"><linktext>ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
 SQLEvent オブジェクトは、SQLConnection インスタンスまたは SQLStatement インスタンスによって実行された操作の 1 つが正常に完了したときに、Adobe AIR によって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLEvent オブジェクトは、SQLConnection インスタンスまたは SQLStatement インスタンスによって実行された操作の 1 つが正常に完了したときに、Adobe AIR によって送出されます。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
     イベントリスナーにパラメーターとして渡す SQLEvent オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。これは <codeph>type</codeph> プロパティを通じてアクセスできます。
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。デフォルト値は <codeph>false</codeph> です。
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。デフォルト値は <codeph>false</codeph> です。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>新しい SQLEvent オブジェクトの作成に使用されます。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     イベントリスナーにパラメーターとして渡す SQLEvent オブジェクトを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone"><apiName>clone</apiName><shortdesc>
	 SQLEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい SQLEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 SQLEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     SQLEvent.ANALYZE 定数は、analyze イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.ANALYZE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>analyze</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.analyze()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>analyze</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     SQLEvent.ATTACH 定数は、attach イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.ATTACH</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>attach</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.attach()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>attach</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     SQLEvent.BEGIN 定数は、begin イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.BEGIN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>begin</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.begin()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>begin</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL"><apiName>CANCEL</apiName><shortdesc>
     SQLEvent.CANCEL 定数は、cancel イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.CANCEL</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>cancel</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.cancel()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>cancel</codeph> イベントには、次のプロパティがあります。
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトまたは SQLStatement オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     SQLEvent.CLOSE 定数は、close イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.CLOSE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>close</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.close()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>close</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     SQLEvent.COMMIT 定数は、commit イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.COMMIT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>commit</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.commit()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>commit</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     SQLEvent.COMPACT 定数は、compact イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.COMPACT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>compact</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.compact()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>compact</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     SQLEvent.DEANALYZE 定数は、deanalyze イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.DEANALYZE</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>deanalyze</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.deanalyze()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>deanalyze</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH"><apiName>DETACH</apiName><shortdesc>
     SQLEvent.DETACH 定数は、detach イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.DETACH</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>detach</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.detach()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。
     
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
     SQLEvent.OPEN 定数は、open イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.OPEN</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>open</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.open()</codeph> メソッドまたは <codeph>SQLConnection.openAsync()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>open</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     SQLEvent.REENCRYPT 定数は、reencrypt イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.REENCRYPT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>reencrypt</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.reencrypt()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>reencrypt</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT"><apiName>RESULT</apiName><shortdesc>
     SQLEvent.RESULT 定数は、result イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>result</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.RESULT</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>result</codeph> イベントオブジェクト）の値を定義します。<codeph>SQLStatement.execute()</codeph> メソッドまたは <codeph>SQLStatement.next()</codeph> メソッドが正常に完了したときに送出されます。<codeph>SQLEvent.RESULT</codeph> イベントが送出されたら、<codeph>SQLStatement.getResult()</codeph> メソッドを呼び出して結果データにアクセスできます。<codeph>result</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLStatement オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     SQLEvent.ROLLBACK 定数は、rollback イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.ROLLBACK</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>rollback</codeph> イベントオブジェクト）の値を定義します。このタイプのイベントは、<codeph>SQLConnection.rollback()</codeph> メソッドの呼び出しが正常に完了したときに送出されます。<codeph>rollback</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     SQLEvent.SCHEMA 定数は、schema イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.SCHEMA</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>schema</codeph> イベントオブジェクト）の値を定義します。<codeph>SQLConnection.loadSchema()</codeph> メソッドが正常に完了したときに送出されます。<codeph>SQLEvent.SCHEMA</codeph> イベントが送出されたら、<codeph>SQLConnection.getSchemaResult()</codeph> メソッドを使用してスキーマ情報を取得できます。<codeph>schema</codeph> イベントには、次のプロパティがあります。
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作を実行した SQLConnection オブジェクトです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
 SQLUpdateEvent オブジェクトは、SQLConnection インスタンスに関連付けられたテーブルでデータ変更が発生したときに、SQLConnection オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLUpdateEvent オブジェクトは、SQLConnection インスタンスに関連付けられたテーブルでデータ変更が発生したときに、SQLConnection オブジェクトによって送出されます。データ変更は、SQL <codeph>INSERT</codeph>、<codeph>UPDATE</codeph> または <codeph>DELETE</codeph> ステートメントを直接実行した結果、またはステートメントの実行に関連して発生したトリガーの結果として起こります。
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as"> <codeph>update</codeph> イベントへの応答での SQLUpdateEvent インスタンスの使用の例を次に示します。
<codeblock>

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete"><apiName>delete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert"><apiName>insert</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update"><apiName>update</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
     新しい SQLUpdateEvent インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。これは <codeph>type</codeph> プロパティを通じてアクセスできます。
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。デフォルト値は <codeph>false</codeph> です。
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。デフォルト値は <codeph>false</codeph> です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>データが変更されたテーブルの名前を示します。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>挿入、削除または更新された行の一意の行識別子です。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>新しい SQLUpdateEvent オブジェクトの作成に使用されます。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     新しい SQLUpdateEvent インスタンスを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone"><apiName>clone</apiName><shortdesc>
     SQLUpdateEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい SQLUpdateEvent オブジェクトです。
     
     </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     SQLUpdateEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE"><apiName>DELETE</apiName><shortdesc>
     SQLUpdateEvent.DELETE 定数は、SQLConnection delete イベントの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLUpdateEvent.DELETE</codeph> 定数は、<codeph>type</codeph> プロパティ（SQLConnection <codeph>delete</codeph> イベント）の値を定義します。<codeph>delete</codeph> イベントには、次のプロパティがあります。
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>rowID</codeph></entry><entry>挿入、削除または更新された行の一意の行識別子です。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作が実行された SQLConnection オブジェクトです。</entry></row><row><entry><codeph>table</codeph></entry><entry>変更が発生したテーブルの名前です。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT"><apiName>INSERT</apiName><shortdesc>
     SQLUpdateEvent.INSERT 定数は、SQLConnection insert イベントの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insert</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLUpdateEvent.INSERT</codeph> 定数は、<codeph>type</codeph> プロパティ（SQLConnection <codeph>insert</codeph> イベント）の値を定義します。<codeph>insert</codeph> イベントには、次のプロパティがあります。
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>rowID</codeph></entry><entry>挿入、削除または更新された行の一意の行識別子です。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作が実行された SQLConnection オブジェクトです。</entry></row><row><entry><codeph>table</codeph></entry><entry>変更が発生したテーブルの名前です。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 SQLUpdateEvent.UPDATE 定数は、SQLConnection update イベントの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>SQLUpdateEvent.UPDATE</codeph> 定数は、<codeph>type</codeph> プロパティ（SQLConnection <codeph>update</codeph> イベント）の値を定義します。
	 
	 <p><codeph>update</codeph> イベントには、次のプロパティがあります。</p>
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>rowID</codeph></entry><entry>挿入、削除または更新された行の一意の行識別子です。</entry></row><row><entry><codeph>target</codeph></entry><entry>操作が実行された SQLConnection オブジェクトです。</entry></row><row><entry><codeph>table</codeph></entry><entry>変更が発生したテーブルの名前です。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get"><apiName>rowID</apiName><shortdesc>
     挿入、削除または更新された行の一意の行識別子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     挿入、削除または更新された行の一意の行識別子です。
	 
	 <p>行識別子は、データベース内のテーブルの行を一意に識別するために使用されます。この値は、データベースによって頻繁に生成されます。</p>
	 
	 <p>単一の SQL <codeph>INSERT</codeph> ステートメントを実行した場合、挿入された行の行識別子は、<codeph>lastInsertRowID</codeph> プロパティ（SQLStatement オブジェクトの <codeph>getResult()</codeph> メソッドから返される SQLResult オブジェクトのプロパティ）を通じて取得できます（SQLStatement の <codeph>result</codeph> イベントが送出された後に getResult() メソッドが呼び出された場合）。</p>
	 
	 <p>主キーと生成される行識別子の詳細については、「<xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref>」および「<xref href="../../localDatabaseSQLSupport.html#expressions">式</xref>」のセクション（どちらも付録「<xref href="../../localDatabaseSQLSupport.html">ローカルデータベースでの SQL サポート</xref>」にあります）を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get"><apiName>table</apiName><shortdesc>
     イベントが送出された原因となるデータ変更が発生したテーブルの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     イベントが送出された原因となるデータ変更が発生したテーブルの名前です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
	NetStream オブジェクトが DRM (デジタル著作権管理) 暗号化ファイルを再生しようとしたときに DRM 関連のエラーを検出すると、AIR は DRMErrorEvent オブジェクトを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>DRM 対応オブジェクトのイベントオブジェクトです。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	NetStream オブジェクトが DRM（デジタル著作権管理）暗号化ファイルを再生しようとしたときに DRM 関連のエラーを検出すると、AIR は DRMErrorEvent オブジェクトを送出します。例えば、コンテンツプロバイダーがアプリケーションの表示をサポートしない場合やユーザー認証が失敗した場合、DRMErrorEvent オブジェクトが送出されます。その理由として、ユーザーが対象のコンテンツを購入していなかったことが考えられます。
	<p>
	ユーザー資格情報が無効である場合、DRMAuthenticateEvent オブジェクトは、ユーザーが有効な資格情報を入力するまで、または AIR アプリケーションがそれ以上の入力を拒否するまで、繰り返し送出することによってエラーを処理します。アプリケーションは、DRM 関連のエラーの検出、特定、および処理を行うために、他の DRM エラーイベントを監視する必要があります。
	</p>
	<p>
	このクラスは、例外をスローするオブジェクトが含まれているプロパティ、エラーコード、および適用可能な場合は、サブエラーコードとエラーに関連する情報が含まれているテキストメッセージを提供します。
	</p> 
	
	<adobetable class="innertable">
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
 	  
 	  
 	  
 	  
 	  
	<tgroup cols="4"><thead><row><entry>エラーコード</entry><entry>サブエラーコード</entry><entry>エラーの詳細</entry><entry>説明</entry></row></thead><tbody><row>
	    <entry><codeph>3300</codeph></entry>
	    <entry><codeph><i>Adobe Policy Server エラーコード</i></codeph></entry>
	    <entry>該当せず</entry>
	    <entry>アプリケーションはコンテンツに関連付けられた無効なバウチャーを検出しました。</entry>
	  </row><row>
	    <entry><codeph>3301</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>ユーザー認証に失敗しました。</entry>
	  </row><row>
	    <entry><codeph>3302</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>Secure Sockets Layer（SSL）は、Flash Media Rights Management Server（FMRMS）ではサポートされていません。</entry>
	  </row><row>
	    <entry><codeph>3303</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>コンテンツの有効期限が過ぎていて表示できません。</entry>
	  </row><row>
	    <entry><codeph>3304</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>ユーザー承認に失敗しました。 これは、ユーザーが認証されている場合であっても、例えば、ユーザーがコンテンツを表示する権利を購入していなかった場合には発生する可能性があります。</entry>
	  </row><row>
	    <entry><codeph>3305</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>サーバー URL</i></codeph></entry>
	    <entry>サーバーに接続できません。</entry>
	  </row><row>
	    <entry><codeph>3306</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>クライアントの更新が必要です。つまり、Flash Media Rights Management Server が新しい DRM（デジタル著作権管理）エンジンを必要としています。</entry>
	  </row><row>
	    <entry><codeph>3307</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>汎用内部デジタル著作権管理の失敗。</entry>
	  </row><row>
	    <entry><codeph>3308</codeph></entry>
	    <entry><codeph><i>詳細な復号化エラーコード</i></codeph></entry>
	    <entry>該当せず</entry>
	    <entry>ライセンスキーが正しくありません。</entry>
	  </row><row>
	    <entry><codeph>3309</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>ビデオコンテンツが破損しています。</entry>
	  </row><row>
	    <entry><codeph>3310</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>publisherID</i>:<i>applicationID</i></codeph></entry>
	    <entry>表示アプリケーションの ID が、コンテンツ発行者でサポートされている有効な ID と一致しません。コンテンツプロバイダーはアプリケーションをサポートしていません。</entry>
	  </row><row>
	    <entry><codeph>3311</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph>Min=x:max=y</codeph></entry>
	    <entry>アプリケーションのバージョンが、バウチャーで指定されているバージョンと一致しません。</entry>
	  </row><row>
	    <entry><codeph>3312</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>暗号化コンテンツに関連付けられたバウチャーの検証に失敗しました。コンテンツが壊れている可能性があります。</entry>
	  </row><row>
	    <entry><codeph>3313</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>暗号化コンテンツに関連付けられたバウチャーを Microsafe に保存できませんでした。</entry>
	  </row><row>
	    <entry><codeph>3314</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>FLV ヘッダーの整合性の検証に失敗しました。コンテンツが壊れている可能性があります。</entry>
	  </row><row>
	    <entry><codeph>3315</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>該当せず</entry>
	    <entry>DRM で保護されたコンテンツのリモート再生は許可されていません。</entry>
	  </row><row>
 	    <entry><codeph>3316</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>該当せず</entry>
 	    <entry>AdobeCP モジュールが見つかりません。</entry>
 	  </row><row>
 	    <entry><codeph>3317</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>該当せず</entry>
 	    <entry>AdobeCP モジュールのロードが失敗しました。</entry>
 	  </row><row>
 	    <entry><codeph>3318</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>該当せず</entry>
 	    <entry>AdobeCP と互換性がないバージョンが検出されました。</entry>
 	  </row><row>
 	    <entry><codeph>3319</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>該当せず</entry>
 	    <entry>AdobeCP API エントリポイントが見つかりません。</entry>
 	  </row><row>
 	    <entry><codeph>3320</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>該当せず</entry>
 	    <entry>AdobeCP モジュールが認証されません。 </entry>
 	  </row></tbody></tgroup></adobetable>
 	
 	</apiDesc><example conref="examples\DRMErrorEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR"><linktext>DRMErrorEvent.DRM_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError"><apiName>drmError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
 	    DRM エラーイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。DRMAuthenticate イベントのタイプは <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> の 1 つのみです。
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
		</apiDesc></apiParam><apiParam><apiItemName>inErrorDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>エラーに関する構文的な詳細情報です（該当する場合）。
  		</apiDesc></apiParam><apiParam><apiItemName>inErrorCode</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>メジャーエラーコードです。
		</apiDesc></apiParam><apiParam><apiItemName>insubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>マイナーエラー ID です。
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
 	    DRM エラーイベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone"><apiName>clone</apiName><shortdesc>
		DRMErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい DRMErrorEvent オブジェクトです。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		DRMErrorEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString"><apiName>toString</apiName><shortdesc>
		DRMErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DRMErrorEvent オブジェクトのすべてのプロパティを含むストリングです。
  		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		DRMErrorEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。 
     	<p><codeph>[DRMErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> errroID=<i>value</i> subErrorID=<i>value</i> text=<i>value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR"><apiName>DRM_ERROR</apiName><shortdesc>
		DRMErrorEvent.DRM_ERROR 定数は、drmError イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMErrorEvent.DRM_ERROR</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>drmError</codeph> イベントオブジェクト）の値を定義します。 
		
		<p>このイベントには、次のプロパティがあります。</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>errorID</codeph></entry><entry>問題に割り当てられた数値のエラーコードです。</entry></row><row><entry><codeph>subErrorID</codeph></entry><entry>基になるプログラムに関する詳細な情報を示すエラーコードです。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream オブジェクトです。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
		基になる問題に関する詳細な情報を示すエラー ID です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		基になる問題に関する詳細な情報を示すエラー ID です。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 メディアファイルの DRMContentData です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 メディアファイルの DRMContentData です。
		 
		 <p><codeph>contentData</codeph> プロパティで参照されるオブジェクトを使用して、DRMManager バウチャーのキャッシュから関連する DRM バウチャーを取得できます。バウチャープロパティは、ユーザーが使用できるライセンスを表し、DRM で保護されたコンテンツを表示できない理由を表す場合もあります。</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
EventDispatcher クラスは、イベントを送出するすべてのランタイムクラスの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
EventDispatcher クラスは、イベントを送出するすべての<ph platform="javascript">ランタイム</ph>クラスの基本クラスです。 <ph platform="actionscript">EventDispatcher クラスは、IEventDispatcher インターフェイスを実装し、DisplayObject クラスの基本クラスです。EventDispatcher クラスでは、表示リストの任意のオブジェクトをイベントターゲットにすることができるので、IEventDispatcher インターフェイスのメソッドを使用できます。</ph>

<p platform="actionscript">イベントターゲットは、Flash<sup>®</sup> Player および Adobe AIR イベントモデルの重要な部分です。 <sup/><sup/>イベントターゲットは、イベントが表示リスト階層をどのように流れるかに関して中心的な役割を果たします。マウスのクリックやキー入力などのイベントが発生すると、Flash Player または AIR アプリケーションによって、イベントオブジェクトが表示リストのルートからイベントフローに送出されます。 イベントオブジェクトは、表示リストを移動してイベントターゲットに到達すると、そこから引き返して表示リストを往復します。このイベントターゲットとの往復は、概念として次の 3 つの段階に分けられます。キャプチャ段階は、ルートからイベントターゲットのノードの直前のノードまでが対象となります。ターゲット段階は、イベントのターゲットノードのみが対象となります。バブリング段階は、表示リストのルートまでの戻りにあるすべての後続ノードが対象となります。</p>

<p platform="actionscript">一般に、ユーザー定義クラスがイベント送出機能を得る最も簡単な方法は、EventDispatcher を拡張することです。クラスが既に別のクラスを拡張していて拡張が不可能な場合、代わりに IEventDispatcher インターフェイスを実装し、EventDispatcher メンバーを作成して、集約された EventDispatcher に呼び出しをルーティングする単純なフックを記述できます。</p>

<p platform="javascript">イベントを送出するオブジェクトの <codeph>addEventListener()</codeph> メソッドを呼び出すことで、ランタイムイベントを処理する関数を登録できます。</p>

</apiDesc><example conref="examples\EventDispatcherExample.as"> 次の例では、<codeph>EventDispatcherExample</codeph> クラスと <codeph>CustomDispatcher</codeph> クラス（<codeph>EventDispatcher</codeph> のサブクラス）を使用して、カスタムイベントの作成方法および送出方法を示します。この例では、次の処理を実行します。
 <ol>
     <li><codeph>EventDispatcherExample</codeph> のコンストラクターは、ローカル変数 <codeph>dispatcher</codeph> を作成し、それを新しい CustomDispatcher インスタンスに割り当てます。</li>
     <li><codeph>CustomDispatcher</codeph> では、イベントが <codeph>action</codeph> という名前で、<codeph>doAction()</codeph> メソッドを宣言するようにストリングが設定されています。このメソッドが呼び出されると、<codeph>action</codeph> イベントが作成され、<codeph>EventDispatcher.dispatchEvent()</codeph> を使用して送出されます。</li>
     <li><codeph>dispatcher</codeph> プロパティが使用されて、<codeph>action</codeph> イベントリスナーとそれに関連するサブスクライバメソッド <codeph>actionHandler()</codeph> が追加されます。このメソッドは、イベントが送出されるとイベントに関する情報のみを出力します。</li>
     <li><codeph>doAction()</codeph> メソッドが呼び出されると、<codeph>action</codeph> イベントが送出されます。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate"><apiName>deactivate</apiName><shortdesc>
 「ブロードキャストイベント」- Flash Player または AIR アプリケーションがオペレーティングシステムのフォーカスを失って、非アクティブになったときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [ブロードキャスト イベント] <ph platform="actionscript">Flash Player または</ph> AIR アプリケーションがオペレーティングシステムのフォーカスを失って、非アクティブになったときに送出されます。このイベントはブロードキャストイベントです。したがって、このイベントに対して登録されているリスナーを持つすべての EventDispatcher オブジェクトがこのイベントを送出します。 <ph platform="actionscript">ブロードキャストイベントの詳細については、DisplayObject クラスを参照してください。</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate"><apiName>activate</apiName><shortdesc>
 [ブロードキャストイベント] Flash Player または AIR アプリケーションがオペレーティングシステムのフォーカスを取得して、アクティブになったときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [ブロードキャスト イベント] <ph platform="actionscript">Flash Player または</ph> AIR アプリケーションがオペレーティングシステムのフォーカスを取得して、アクティブになったときに送出されます。このイベントはブロードキャストイベントです。したがって、このイベントに対して登録されているリスナーを持つすべての EventDispatcher オブジェクトがこのイベントを送出します。 <ph platform="actionscript">ブロードキャストイベントの詳細については、DisplayObject クラスを参照してください。</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	EventDispatcher クラスのインスタンスを集約します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.events:IEventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>EventDispatcher オブジェクトに送出されるイベントのターゲットオブジェクトです。<ph platform="actionscript">このパラメーターが使用されるのは、EventDispatcher インスタンスが、IEventDispatcher を実装するクラスによって集約される場合です。これは、含まれているオブジェクトをイベントのターゲットにするために必要です。クラスが単純に EventDispatcher を拡張する場合は、このパラメーターを使用しないでください。</ph> <ph platform="javascript">ターゲットオブジェクトは、ActionScript 3.0 表示リストアーキテクチャを使用する、SWF コンテンツ内の表示オブジェクトにのみ関連します。</ph>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	EventDispatcher クラスのインスタンスを集約します。
	
    <p>EventDispatcher クラスは通常、<ph platform="javascript">SWF コンテンツで使用される ActionScript 3.0 コード内で</ph>基本クラスとして使用されます。このため、ほとんどの<ph platform="actionscript"/><ph platform="javascript">JavaScript</ph> 開発者はこのコンストラクター関数を使用する必要はありません。<ph platform="actionscript">ただし、IEventDispatcher インターフェイスを実装する上級開発者は、このコンストラクターを使用する必要があります。EventDispatcher クラスを拡張できないため、代わりに IEventDispatcher インターフェイスを実装する必要がある場合は、このコンストラクターを使用して、EventDispatcher クラスのインスタンスを集約します。</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>listener</codeph> は関数ではありません。
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>イベントを処理するリスナー関数です。この関数は、次の例のように、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないもの<ph platform="actionscript">である必要があります。</ph> <ph platform="javascript"/>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>関数の名前は任意に付けられます。</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">このパラメーターは、SWF コンテンツで使用される ActionScript 3.0 の表示リストアーキテクチャの表示オブジェクトに適用されます。</ph> <ph platform="actionscript">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。 <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph>useCapture</codeph> を <codeph>false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph>addEventListener</codeph> を 2 回呼び出します。<codeph>useCapture</codeph> を <codeph>true</codeph> に設定して呼び出し、<codeph>useCapture</codeph> を <codeph>false</codeph> に設定してもう一度呼び出します。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>イベントリスナーの優先度レベルです。優先度は、符号付き 32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i>n</i> のすべてのリスナーは、優先度が <i>n</i>-1 のリスナーよりも前に処理されます。複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。デフォルトの優先度は 0 です。
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p>クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph>useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph>true</codeph> に設定できます。ネストされた内部の関数であるリスナーに対して <codeph>useWeakReference</codeph> を <codeph>true</codeph> に設定すると、その関数はガベージコレクションされ、永続的ではなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。<ph platform="actionscript">イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。</ph>
	
	<p platform="javascript">AIR ランタイムの JavaScript コードは、このメソッドを使用して AIR API によって定義されたイベント用のイベントリスナーを登録します。他の JavaScript イベント、例えば、<codeph>onload</codeph> イベント（DOM <codeph>body</codeph> オブジェクトのイベント）などの場合、ブラウザー内で実行されるコンテンツに対して行うように標準イベント処理テクニックを使用できます。</p>
	
	<p>イベントリスナーが正常に登録された後に、<codeph>addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph>removeListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。 </p>
	
	<p>リスナーが登録された後に、<codeph>addEventListener()</codeph>（<codeph>type</codeph> または <codeph>useCapture</codeph> に別の値を設定）を再度呼び出すと、別のリスナー登録が作成されることに注意してください。<ph platform="actionscript">例えば、最初にリスナーを登録するときに <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph>addEventListener()</codeph> を呼び出すと（このとき、<codeph>useCapture</codeph> に <codeph>false</codeph> を設定）、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</ph>
	</p>
	
	<p platform="actionscript">ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	
	<p>イベントリスナーが不要になった場合は、<codeph>removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクターは送出するオブジェクトがないとリスナーを削除しないので、イベントリスナーはメモリから自動的に削除されません（ただし、<codeph>useWeakReference</codeph> パラメーターが <codeph>true</codeph> に設定されている場合を除きます）。</p>
		
	<p>EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	
	
	<p platform="actionscript">イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	
	<p platform="actionscript">イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	イベントをイベントフローに送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>イベント送出再帰が上限に達しました。
	</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>値が <codeph>true</codeph> の場合、イベントは正常に送出されました。値が <codeph>false</codeph> の場合、イベントの送出に失敗したか、イベントで <codeph>preventDefault()</codeph> が呼び出されたことを示しています。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>イベントフローに送出されるイベントオブジェクトです。イベントが再度送出されると、イベントのクローンが自動的に作成されます。イベントが送出された後にそのイベントの <codeph>target</codeph> プロパティは変更できないため、再送出処理のためにはイベントの新しいコピーを作成する必要があります。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	イベントをイベントフローに送出します。イベントターゲットは EventDispatcher オブジェクトです。これに対して <codeph>dispatchEvent()</codeph> メソッドが呼び出されます。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	EventDispatcher オブジェクトに、特定のイベントタイプに対して登録されたリスナーがあるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定したタイプのリスナーが登録されている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	EventDispatcher オブジェクトに、特定のイベントタイプに対して登録されたリスナーがあるかどうかを確認します。これにより、EventDispatcher オブジェクトがイベントタイプの処理をイベントフロー階層のどこで変更したかを判断できます。特定のイベントタイプが実際にイベントリスナーをトリガーするかどうかを判別するには、<codeph>willTrigger()</codeph> を使用します。
	
	<p><codeph>hasEventListener()</codeph> と <codeph>willTrigger()</codeph> の違いは、<codeph>hasEventListener()</codeph> では自身が属するオブジェクトのみが検証され、<codeph>willTrigger()</codeph> では <codeph>type</codeph> パラメーターで指定されたイベントのイベントフロー全体が検証されることです。 <ph platform="javascript">イベントフローは、SWF コンテンツで使用される ActionScript 3.0 表示リストに適用されます。</ph>
	</p>
	
	<p><codeph>hasEventListener()</codeph> が LoaderInfo オブジェクトから呼び出された場合は、呼び出し側がアクセスできるリスナーのみ考慮されます。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#EventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	EventDispatcher オブジェクトからリスナーを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>削除するリスナーオブジェクトです。
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">このパラメーターは、SWF コンテンツで使用される ActionScript 3.0 の表示リストアーキテクチャの表示オブジェクトに適用されます。</ph> <ph platform="actionscript">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階に対して登録されたかどうかを示します。 リスナーがキャプチャ段階だけでなくターゲット段階とバブリング段階にも登録されている場合は、<codeph>removeEventListener()</codeph> を 2 回呼び出して両方のリスナーを削除する必要があります。1 回は <codeph>useCapture()</codeph> を <codeph>true</codeph> に設定し、もう 1 回は <codeph>useCapture()</codeph> を <codeph>false</codeph> に設定する必要があります。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	EventDispatcher オブジェクトからリスナーを削除します。対応するリスナーが EventDispatcher オブジェクトに登録されていない場合は、このメソッドを呼び出しても効果はありません。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	指定されたイベントタイプについて、この EventDispatcher オブジェクトまたはその祖先にイベントリスナーが登録されているかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定したタイプのリスナーがトリガーされた場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	指定されたイベントタイプについて、この EventDispatcher オブジェクトまたはその祖先にイベントリスナーが登録されているかどうかを確認します。指定されたタイプのイベントがこの EventDispatcher オブジェクトまたはその子孫に送出されたときに、イベントリスナーがイベントフローの任意の段階でトリガーされる場合、このメソッドは <codeph>true</codeph> を返します。
	
	<p><codeph>hasEventListener()</codeph> と <codeph>willTrigger()</codeph> メソッドの違いは、<codeph>hasEventListener()</codeph> では自身が属するオブジェクトのみが検証され、<codeph>willTrigger()</codeph> メソッドでは <codeph>type</codeph> パラメーターで指定されたイベントのイベントフロー全体が検証されることです。 <ph platform="javascript">イベントフローは、SWF コンテンツで使用される ActionScript 3.0 表示リストに適用されます。</ph></p>
	
	<p><codeph>willTrigger()</codeph> が LoaderInfo オブジェクトから呼び出された場合は、呼び出し側がアクセスできるリスナーのみが考慮されます。</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:EventPhase"><apiName>EventPhase</apiName><shortdesc>
 EventPhase クラスは、Event クラスの eventPhase プロパティの値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 EventPhase クラスは、Event クラスの <codeph>eventPhase</codeph> プロパティの値を提供します。
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#Event"><linktext>Event クラス</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>EventDispatcher クラス</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
	ターゲット段階（イベントフローの 2 番目の段階）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	ターゲット段階（イベントフローの 2 番目の段階）です。
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
	バブリング段階（イベントフローの 3 番目の段階）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	バブリング段階（イベントフローの 3 番目の段階）です。
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
	キャプチャ段階（イベントフローの最初の段階）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	キャプチャ段階（イベントフローの最初の段階）です。
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
 FocusEvent オブジェクトは、ユーザーが表示リストの 1 つのオブジェクトから別のオブジェクトにフォーカスを変更したときに、オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Focus イベントのイベントオブジェクトです。
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 FocusEvent オブジェクトは、ユーザーが表示リストの 1 つのオブジェクトから別のオブジェクトにフォーカスを変更したときに、オブジェクトによって送出されます。 次の 4 種類のフォーカスイベントがあります。
 <ul>
     <li><codeph>FocusEvent.FOCUS_IN</codeph></li>
     <li><codeph>FocusEvent.FOCUS_OUT</codeph></li>
     <li><codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph></li>
     <li><codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as"> 次の例では、<codeph>FocusEventExample</codeph> クラスと <codeph>CustomSprite</codeph> クラスを使用して、イベントのキャプチャや情報の出力のために、ステージに描画されたアイテムとフォーカスを組み合わせて使用する方法を示します。この例では、次の処理を実行します。
 <ol>
     <li>Sprite 型のプロパティ <codeph>child</codeph> と uint 型のプロパティ <codeph>childCount</codeph> を宣言します。</li>
    <li><codeph>for</codeph> ループによって、(0,0) の位置に明るい青色の四角形が 5 つ作成されます。ここでは、まず、新しい CustomSprite インスタンスに <codeph>child</codeph> を割り当てます。CustomSprite オブジェクトが作成されるたびに、次の処理が実行されます。
     <ul>
             <li>uint 型の <codeph>size</codeph> プロパティが 50 ピクセルに設定され、<codeph>bgColor</codeph> が明るい青色に設定されます。 </li>
             <li>Sprite クラスの <codeph>buttonMode</codeph> プロパティと <codeph>useHandCursor</codeph> プロパティは、コンストラクター内で <codeph>true</codeph> に設定されます。</li>
             <li>タイプが <codeph>click</codeph> のイベントリスナーが、関連するサブスクライバ <codeph>clickHandler()</codeph> と共にインスタンス化されます。このサブスクライバメソッドは、Sprite 型のローカル変数 <codeph>target</codeph> を作成し、クリックされたボックスにこの変数を割り当てます。続いて、ステージのフォーカスを <codeph>target</codeph> に割り当てます。</li>
             <li><codeph>draw()</codeph> メソッドが呼び出され、50 × 50 ピクセルの四角形が作成されます。そのために、Graphics クラスの <codeph>beginFill()</codeph>、<codeph>drawRect()</codeph>、<codeph>endFill()</codeph> の各メソッドとインスタンスプロパティが呼び出されます。</li>
      </ul></li>
         <li>for ループでは、<codeph>configureListeners()</codeph> メソッドが呼び出され、3 つのイベントリスナーとサブスクライバをインスタンス化します。
         <ul>
             <li><codeph>focusIn</codeph>/<codeph>focusInHandler()</codeph> は、クリックされた表示リストオブジェクト（ボックス）に対する <codeph>click</codeph> イベントの後で送出されます。</li>
             <li><codeph>focusOut</codeph>/<codeph>focusOutHandler()</codeph> は、別のボックスがクリックされたとき、またはフォーカスがステージを離れたとき（例えば、Flash Player の外側がクリックされた場合）に送出されます。</li>
             <li><codeph>keyFocusChange</codeph>/<codeph>keyFocusChangeHandler()</codeph> は、Tab キー、左矢印キー、または右矢印キーによって表示リストオブジェクトが選択されたときに送出されます。<codeph>keyFocusChangeHandler()</codeph> メソッドは、左矢印キーと右矢印キーをトラップします。ただし、これに加えて、この 2 つのキーを無効にするために <codeph>preventDefault()</codeph> メソッドを呼び出します。</li>
             
      </ul></li>
     <li><codeph>for</codeph> ループでは、<codeph>addChild()</codeph> を使用して各四角形が表示リストに追加され、すべて同じ領域に表示されます。</li>
     <li>次に、コンストラクターが <codeph>refreshLayout()</codeph> を呼び出します。これにより、オレンジ色の四角形が、ディスプレイの最上部（y = 0）に横一列に 5 ピクセルおきに表示されます。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn"><apiName>focusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut"><apiName>focusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange"><apiName>keyFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange"><apiName>mouseFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
    フォーカスイベントに関する特定の情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。有効な値は次のとおりです。<codeph>FocusEvent.FOCUS_IN</codeph>、<codeph>FocusEvent.FOCUS_OUT</codeph>、<codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph>、および <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph>
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスを示します。例えば、<codeph>focusIn</codeph> イベントが発生した場合、<codeph>relatedObject</codeph> はフォーカスを失った InteractiveObject を表します。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Shift キーモディファイアがアクティブになっているかどうかを示します。
	</apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc><codeph>keyFocusChange</codeph> イベントをトリガーするために押されたキーのコードを示します。
	</apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>none</apiData><apiDesc>ターゲットのインタラクティブオブジェクトがアクティブにされるのがどの方向からであるかを示します。すべてのイベントに対して <codeph>FocusDirection.NONE</codeph>（デフォルト値）に設定します（<codeph>focusIn</codeph> イベントを除く）。
    
	</apiDesc></apiParam><apiTipTexts><apiTipText>FocusEvent オブジェクトのコンストラクターです。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    フォーカスイベントに関する特定の情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
    
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone"><apiName>clone</apiName><shortdesc>
	FocusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい FocusEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	FocusEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString"><apiName>toString</apiName><shortdesc>
	FocusEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>FocusEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	FocusEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	<p><codeph>[FocusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> relatedObject=<i>value</i> shiftKey=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN"><apiName>FOCUS_IN</apiName><shortdesc>
	focusIn イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusIn</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>focusIn</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0。<codeph>keyFocusChange</codeph> イベントにのみ適用されます。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>。<codeph>keyFocusChange</codeph> イベントにのみ適用されます。</entry></row><row><entry><codeph>target</codeph></entry><entry>フォーカスを受け取った InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。
	</entry></row><row><entry><codeph>direction</codeph></entry><entry>フォーカスが割り当てられた元の方向です。このプロパティは、<codeph>direction</codeph> パラメーター（ステージの <codeph>assignFocus()</codeph> メソッドのパラメーター）の値を報告します。他の何らかの手段でフォーカスが変更された場合、この値は常に <codeph>FocusDirection.NONE</codeph> になります。<codeph>focusIn</codeph> イベントにのみ適用されます。他のすべてのフォーカスイベントの場合、値は <codeph>FocusDirection.NONE</codeph> になります。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT"><apiName>FOCUS_OUT</apiName><shortdesc>
	focusOut イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>focusOut</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0。<codeph>keyFocusChange</codeph> イベントにのみ適用されます。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>。<codeph>keyFocusChange</codeph> イベントにのみ適用されます。</entry></row><row><entry><codeph>target</codeph></entry><entry>フォーカスを失った InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE"><apiName>KEY_FOCUS_CHANGE</apiName><shortdesc>
	keyFocusChange イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>keyFocusChange</codeph> イベントオブジェクト）の値を定義します。 
	
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。デフォルトの動作を取り消すには、<codeph>preventDefault()</codeph> メソッドを呼び出します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry><codeph>keyFocusChange</codeph> イベントをトリガーするために押されたキーのキーコード値です。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>Shift キーモディファイアがアクティブになっている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>target</codeph></entry><entry>現在フォーカスを持っている InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE"><apiName>MOUSE_FOCUS_CHANGE</apiName><shortdesc>
	mouseFocusChange イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>type</codeph> プロパティ（<codeph>mouseFocusChange</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>。デフォルトの動作を取り消すには、<codeph>preventDefault()</codeph> メソッドを呼び出します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0。<codeph>keyFocusChange</codeph> イベントにのみ適用されます。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスです。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>。<codeph>keyFocusChange</codeph> イベントにのみ適用されます。</entry></row><row><entry><codeph>target</codeph></entry><entry>現在フォーカスを持っている InteractiveObject インスタンスです。<codeph>target</codeph> は、必ずしもイベントリスナーを登録した表示リスト内のオブジェクトとは限りません。現在イベントを処理している表示リスト内のオブジェクトにアクセスするには、<codeph>currentTarget</codeph> プロパティを使用します。
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get"><apiName>direction</apiName><shortdesc>
	focusIn イベントのフォーカス方向を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>focusIn</codeph> イベントのフォーカス方向を指定します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()"><linktext>flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 true の場合、relatedObject プロパティは、セキュリティサンドボックスに関連する理由により null に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>true</codeph> の場合、<codeph>relatedObject</codeph> プロパティは、セキュリティサンドボックスに関連する理由により、<codeph>null</codeph> に設定されます。<codeph>relatedObject</codeph> の公称値が別のサンドボックスにある DisplayObject への参照である場合、このサンドボックスの境界をまたいで両方向に権限がある場合を除いては、<codeph>relatedObject</codeph> は <codeph>null</codeph> に設定されます。権限を確立するには、SWF ファイルから <codeph>Security.allowDomain()</codeph> を呼び出すか、イメージファイルのサーバーからポリシーファイルを提供し、<codeph>LoaderContext.checkPolicyFile</codeph> プロパティを設定してイメージを読み込みます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/relatedObject"><linktext>FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	keyFocusChange イベントをトリガーするために押されたキーのキーコード値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>keyFocusChange</codeph> イベントをトリガーするために押されたキーのキーコード値です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	フォーカスの変更の影響を受ける補完的な InteractiveObject インスタンスへの参照です。例えば、<codeph>focusOut</codeph> イベントが発生した場合、<codeph>relatedObject</codeph> はフォーカスを得た InteractiveObject インスタンスを表します。
	<p>このプロパティの値は、関連オブジェクトがない場合、または関連オブジェクトはあるがアクセスできないセキュリティサンドボックスの中にある場合の 2 つの状況の場合に、<codeph>null</codeph> になる可能性があります。<codeph>isRelatedObjectInaccessible()</codeph> プロパティを使用して、どの理由が適用されるかを判別します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible"><linktext>FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Shift キーモディファイアがアクティブになっているかどうかを示します。アクティブな場合、値は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Shift キーモディファイアがアクティブになっているかどうかを示します。アクティブな場合、値は <codeph>true</codeph> です。これ以外の場合、値は <codeph>false</codeph> です。このプロパティは、FocusEvent のタイプが <codeph>keyFocusChange</codeph> の場合のみ使用されます。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 AIR アプリケーションの NativeApplication オブジェクトは、ブラウザー内の SWF ファイルがブラウザー呼び出し機能を使用した結果としてアプリケーションが呼び出されたときに browserInvoke イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 AIR アプリケーションの NativeApplication オブジェクトは、ブラウザー内の SWF ファイルがブラウザー呼び出し機能を使用した結果としてアプリケーションが呼び出されたときに <codeph>browserInvoke</codeph> イベントを送出します。NativeApplication オブジェクトによる <codeph>browserInvoke</codeph> イベントの送出は、ユーザーがブラウザー内でシームレスインストール機能をインスタンス化し、ブラウザー内の SWF ファイルが <codeph>arguments</codeph> パラメーター（air.swf ファイルの <codeph>launchApplication()</codeph> メソッドのパラメーター）に配列を渡したときにも発生します（詳しくは、AIR 開発者ガイドの「AIR アプリケーションの配布、インストール、実行」を参照してください）。
	 
	 <p>ブラウザー呼び出しが許可されるのは、アプリケーション記述ファイルで次のように指定されている場合のみです。</p>
	 
	 <codeblock>&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 <p>アプリケーションが実行されていない場合、NativeApplication オブジェクトは、ブラウザーから起動されたときに InvokeEvent イベントと <codeph>browserInvoke</codeph> イベントの両方を送出します。それ以外の場合、アプリケーションが<i>既に実行されていれば</i>、NativeApplication オブジェクトは、ブラウザーから起動されたときに <codeph>browserInvoke</codeph> イベントのみを送出します。 </p>
	 
	 <p> アプリケーションが（ユーザーがインストール時に起動することを選択したことにより）ブラウザーからのシームレスインストールの結果として起動された場合、NativeApplication オブジェクトは、（ブラウザー内の SWF ファイルが <codeph>arguments</codeph> パラメーター（air.swf ファイルの <codeph>installApplication()</codeph> メソッドのパラメーター）に配列を渡すことによって）引数が渡された場合に限り、BrowserInvoke イベントを送出します詳細については、AIR 開発者ガイドの「Distributing, Installing and Running AIR applications」を参照してください。</p>
	 
	 <p><codeph>invokeEvent</codeph> イベントと同様に、<codeph>browserInvokeEvent</codeph> オブジェクトも NativeApplication オブジェクト（<codeph>NativeApplication.nativeApplication</codeph>）によって送出されます。<codeph>browserInvoke</codeph> イベントを受け取るには、NativeApplication オブジェクトの <codeph>addEventListener()</codeph> メソッドを呼び出します。<codeph>browserInvoke</codeph> イベントのイベントリスナーを登録すると、そのイベントリスナーは、登録の前に発生した <codeph>browserInvoke</codeph> イベントもすべて受け取ります。これらは <codeph>addEventListener()</codeph> の呼び出しが戻った後に送出されますが、必ずしも、登録後に受け取る可能性がある他の <codeph>browserInvoke</codeph> イベントより先に送出されるとは限りません。これにより、初期化コードを実行する前（アプリケーションが最初にブラウザーから起動されたときなど）に発生した <codeph>browserInvoke</codeph> イベントも処理できます。実行中の後の段階（アプリケーションの初期化後）にイベントリスナーを追加した場合でも、アプリケーション起動時以降に発生したすべての <codeph>browserInvoke</codeph> イベントが受信される点に注意してください。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#InvokeEvent"><linktext>flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier>flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 BrowserInvokeEvent クラスのコンストラクター関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc><codeph>Event.type</codeph> としてアクセス可能なイベントタイプです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>BrowserInvokeEvent オブジェクトでは <codeph>false</codeph> に設定します。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>BrowserInvokeEvent オブジェクトでは <codeph>false</codeph> に設定します。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>アプリケーションに渡す引数（ストリング）の配列です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>sandboxType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ブラウザー内のコンテンツのサンドボックスタイプです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ブラウザー内のコンテンツのセキュリティドメインです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isHTTPS</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>ブラウザー内のコンテンツが HTTPS URL スキームを使用するかどうかを示します。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isUserEvent</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>ブラウザー呼び出しがユーザーイベントの結果として起こったかどうかを示します。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 BrowserInvokeEvent クラスのコンストラクター関数です。 通常、開発者が <codeph>BrowserInvokeEvent()</codeph> コンストラクターを直接呼び出すことはありません。BrowserInvokeEvent オブジェクトはランタイムによってのみ作成されます。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 このイベントの新しいコピーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>イベントのコピーです。
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 このイベントの新しいコピーを作成します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE"><apiName>BROWSER_INVOKE</apiName><shortdesc>
		 BrowserInvokeEvent.BROWSER_INVOKE 定数は、BrowserInvokeEvent オブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserInvoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>BrowserInvokeEvent.BROWSER_INVOKE</codeph> 定数は、BrowserInvokeEvent オブジェクトの <codeph>type</codeph> プロパティの値を定義します。
		 
		 <p>BrowserInvokeEvent オブジェクトには、次のプロパティがあります。</p>
		 <adobetable class="innertable">
		    
		     
		    
		    
		    
		    
		     
		    
		     
		        
		  <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>この呼び出し中に渡されるストリング引数の配列です。</entry></row><row><entry><codeph>sandBoxType</codeph></entry><entry>ブラウザーのコンテンツのサンドボックスタイプを表すストリング（<codeph>Security.APPLICATION</codeph>、<codeph>Security.LOCAL_TRUSTED</codeph>、<codeph>Security.LOCAL_WITH_FILE</codeph>、<codeph>Security.LOCAL_LOCAL_WITH_NETWORK</codeph>、<codeph>Security.REMOTE</codeph> のいずれか）。</entry></row><row><entry><codeph>securityDomain</codeph></entry><entry>ブラウザー内のコンテンツのセキュリティドメインを表すストリング（<codeph>"www.example.com"</codeph> など）です。</entry></row><row><entry><codeph>isHTTPS</codeph></entry><entry>ブラウザーコンテンツが HTTPS URL スキームを使用する（<codeph>true</codeph>）か、使用しない（<codeph>false</codeph>）かを示します。</entry></row><row><entry><codeph>isUserEvent</codeph></entry><entry>ブラウザー呼び出しがユーザーイベントの結果として起こったかどうかを示します（AIR 1.0 では常に <codeph>true</codeph> になります）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>なし。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで InvokeEvent オブジェクトをアクティブに処理しているオブジェクトを示します。</entry></row><row><entry><codeph>target</codeph></entry><entry>常に NativeApplication object オブジェクトです。 
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 アプリケーションに渡す引数（ストリング）の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 アプリケーションに渡す引数（ストリング）の配列です。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get"><apiName>isHTTPS</apiName><shortdesc>
		 ブラウザー内のコンテンツが HTTPS URL スキームを使用する（true）か、使用しない（false）かを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 ブラウザー内のコンテンツが HTTPS URL スキームを使用する（<codeph>true</codeph>）か、使用しない（<codeph>false</codeph>）かを示します。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get"><apiName>isUserEvent</apiName><shortdesc>
		 ブラウザー呼び出しがユーザーイベント（マウスのクリックなど）の結果として起こったかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 ブラウザー呼び出しがユーザーイベント（マウスのクリックなど）の結果として起こったかどうかを示します。AIR 1.0 では、これは常に <codeph>true</codeph> に設定されます。AIR では、ブラウザー呼び出し機能を呼び出すために常にユーザーイベントが必要となります。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
		 ブラウザー内のコンテンツのサンドボックスタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 ブラウザー内のコンテンツのサンドボックスタイプです。 これは次のいずれかの値に設定できます。
		 
		 <ul>
		 
		 	<li><codeph>Security.APPLICATION</codeph> — コンテンツはアプリケーションセキュリティサンドボックス内にあります。</li>
		 
		 	<li><codeph>Security.LOCAL_TRUSTED</codeph> — コンテンツは、信頼できるローカルのセキュリティサンドボックス内にあります。</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_FILE</codeph> — コンテンツは local-with-filesystem セキュリティサンドボックス内にあります。</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_NETWORK</codeph> — コンテンツは local-with-networking セキュリティサンドボックス内にあります。</li>
		 
		 	<li><codeph>Security.REMOTE</codeph> — コンテンツはリモート（ネットワーク）ドメイン内にあります。</li>
		 
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get"><apiName>securityDomain</apiName><shortdesc>
		 ブラウザー内のコンテンツのセキュリティドメイン（"www.adobe.com" や "www.example.org" など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 ブラウザー内のコンテンツのセキュリティドメイン（<codeph>"www.adobe.com"</codeph> や <codeph>"www.example.org"</codeph> など）です。このプロパティはリモートセキュリティサンドボックス内のコンテンツ (ネットワークドメイン内のコンテンツ) に対してのみ設定されます。ローカルまたはアプリケーションセキュリティサンドボックス内のコンテンツには設定されません。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
 OutputProgressEvent オブジェクトは、保留中の非同期ファイル書き込み操作が実行されたときに、FileStream オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>非同期ファイル書き込み操作の出力プログレスイベントのイベントオブジェクトです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 OutputProgressEvent オブジェクトは、保留中の非同期ファイル書き込み操作が実行されたときに、FileStream オブジェクトによって送出されます。OutputProgress イベントのタイプは <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph> の 1 つのみです。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
    OutputProgress イベントに関する情報を含む Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。エラーイベントのタイプは <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph> の 1 つのみです。
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。 
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。 
    </apiDesc></apiParam><apiParam><apiItemName>bytesPending</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>まだ書き込まれていないバイト数です。
    </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>すでに書き込まれたバイト数と書き込みが保留されているバイト数の合計です。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>OutputProgressEvent オブジェクトのコンストラクターです。
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    OutputProgress イベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone"><apiName>clone</apiName><shortdesc>
    OutputProgressEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい OutputProgressEvent オブジェクトです。
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    OutputProgressEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString"><apiName>toString</apiName><shortdesc>
    OutputProgressEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>OutputProgressEvent オブジェクトのすべてのプロパティを含むストリングです。
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    OutputProgressEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
    
    <p><codeph>[OutputProgressEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> bytesPending=<i>value</i> bytesTotal=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS"><apiName>OUTPUT_PROGRESS</apiName><shortdesc>
    outputProgress イベントオブジェクトの type プロパティの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outputProgress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>type</codeph> プロパティ（<codeph>outputProgress</codeph> イベントオブジェクト）の値を定義します。
    
    <p>このイベントには、次のプロパティがあります。</p>
    
    <adobetable class="innertable">
        
        
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesPending</codeph></entry><entry>リスナーがイベントを処理する時点でまだ書き込まれていないバイト数です。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>書き込みプロセスが成功した場合に最終的に書き込まれるバイトの総数です。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>進行状況をレポートする FileStream オブジェクトです。 </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get"><apiName>bytesPending</apiName><shortdesc>
    リスナーがイベントを処理する時点でまだ書き込まれていないバイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    リスナーがイベントを処理する時点でまだ書き込まれていないバイト数です。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
    すでに書き込まれたバイト数と書き込みが保留されているバイト数の合計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    すでに書き込まれたバイト数と書き込みが保留されているバイト数の合計です。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
 SyncEvent オブジェクトは、リモート共有オブジェクトがサーバーによって更新されると、リモート共有オブジェクトを表す SharedObject オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>SyncEvent イベントのイベントオブジェクトです。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 SyncEvent オブジェクトは、リモート共有オブジェクトがサーバーによって更新されると、リモート共有オブジェクトを表す SharedObject オブジェクトによって送出されます。<codeph>sync</codeph> イベントのタイプは <codeph>SyncEvent.SYNC</codeph> のみです。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject"><linktext>SharedObject クラス</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync"><apiName>sync</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier>flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
	 sync イベントに関する情報を含んでいる Event オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。sync イベントのタイプは <codeph>SyncEvent.SYNC</codeph> の 1 つのみです。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。
	 </apiDesc></apiParam><apiParam><apiItemName>changeList</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>リモート SharedObject との同期を記述するオブジェクトの配列です。イベントリスナーは、<codeph>changeList</codeph> プロパティを通じてこのオブジェクトにアクセスできます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>SyncEvent オブジェクトのコンストラクターです。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 <codeph>sync</codeph> イベントに関する情報を含む Event オブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SyncEvent/changeList"><linktext>changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone"><apiName>clone</apiName><shortdesc>
	 SyncEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい SyncEvent オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 SyncEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString"><apiName>toString</apiName><shortdesc>
	 SyncEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>SyncEvent オブジェクトのすべてのプロパティを含むストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 SyncEvent オブジェクトのすべてのプロパティを含むストリングを返します。ストリングは次の形式です。
	 <p><codeph>[SyncEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> list=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC"><apiName>SYNC</apiName><shortdesc>
     sync イベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sync</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>type</codeph> プロパティ（<codeph>sync</codeph> イベントオブジェクト）の値を定義します。
	 <p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>changeList</codeph></entry><entry>配列のステータスを記述するプロパティを持つ配列です。</entry></row><row><entry><codeph>target</codeph></entry><entry>サーバーによって更新された SharedObject インスタンスです。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get"><apiName>changeList</apiName><shortdesc>
     オブジェクトの配列です。各オブジェクトには、リモート共有オブジェクトの変更されたメンバーを記述したプロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     オブジェクトの配列です。各オブジェクトには、リモート共有オブジェクトの変更されたメンバーを記述したプロパティが含まれています。各オブジェクトのプロパティは、<codeph>code</codeph>、<codeph>name</codeph>、および <codeph>oldValue</codeph> です。 
     <p>ローカルまたはサーバーに永続化されているリモート共有オブジェクトに初めて接続するときに、このオブジェクトのすべてのプロパティは空ストリングに設定されます。</p><p>そうでない場合、Flash は、<codeph>code</codeph> を <codeph>"clear"</codeph>、<codeph>"success"</codeph>、<codeph>"reject"</codeph>、<codeph>"change"</codeph>、または <codeph>"delete"</codeph> に設定します。 </p>
     <ul><li><codeph>"clear"</codeph> という値は、ユーザーがサーバーまたはクライアント上にある永続リモート共有オブジェクトへの接続に成功したこと、または、（例えば、Flash Player がクライアントオブジェクトとサーバーオブジェクトとの同期を取り直すほどクライアント上にあるオブジェクトのコピーとサーバー上にあるオブジェクトのコピーとの間に差異が生じてしまっているときなどに）そのオブジェクトのプロパティがすべて削除されたことを示します。後者の場合、<codeph>SyncEvent.SYNC</codeph> が送出され、"code" 値が <codeph>"change"</codeph> に設定されます。 </li>
     <li><codeph>"success"</codeph> という値は、クライアントが共有オブジェクトを変更したことを意味します。 </li>
     <li><codeph>"reject"</codeph> という値は、クライアントがオブジェクトの変更に失敗し、別のクライアントがそのオブジェクトを変更したことを意味します。 </li>
     <li><codeph>"change"</codeph> という値は、別のクライアントがオブジェクトを変更したか、またはサーバーがオブジェクトの同期を取り直したことを意味します。 </li>
     <li><codeph>"delete"</codeph> という値は、属性が削除されたことを意味します。 </li></ul>
     <p><codeph>name</codeph> プロパティには、変更されたプロパティの名前が示されます。</p>
     <p><codeph>oldValue</codeph> プロパティには、変更されたプロパティの元の値が示されます。このパラメーターは、<codeph>null</codeph> です（コードに <codeph>"reject"</codeph> または <codeph>"change"</codeph> という値が含まれない限り）。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection クラス</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
ActivityEvent オブジェクトは、カメラまたはマイクから自身のステータスがアクティブまたは非アクティブに変わったと報告されるたびに、Camera オブジェクトまたは Microphone オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ActivityEvent イベントのイベントオブジェクトです。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
ActivityEvent オブジェクトは、カメラまたはマイクから自身のステータスがアクティブまたは非アクティブに変わったと報告されるたびに、Camera オブジェクトまたは Microphone オブジェクトによって送出されます。アクティビティイベントのタイプは <codeph>ActivityEvent.ACTIVITY</codeph> の 1 つのみです。

</apiDesc><example conref="examples\ActivityEventExample.as"> 次の例は、ActivityEvent クラスの使用方法を示すもので、<codeph>activityHandler()</codeph> という名前のイベントリスナーメソッドをマイクに関連付け、マイクが <codeph>activity</codeph> イベントを生成するたびにテキスト情報を生成します。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity"><apiName>activity</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
	アクティビティイベントに関する情報を含むイベントオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> イベントのタイプです。イベントリスナーは、継承された <codeph>type</codeph> プロパティを通じてこの情報にアクセスできます。アクティビティイベントのタイプは <codeph>ActivityEvent.ACTIVITY</codeph> の 1 つのみです。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがイベントフローのバブリング段階で処理されるかどうかを判断します。イベントリスナーは、継承された <codeph>bubbles</codeph> プロパティを通じてこの情報にアクセスできます。  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Event オブジェクトがキャンセル可能かどうかを判断します。イベントリスナーは、継承された <codeph>cancelable</codeph> プロパティを通じてこの情報にアクセスできます。 
	</apiDesc></apiParam><apiParam><apiItemName>activating</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>デバイスがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。イベントリスナーは、<codeph>activating</codeph> プロパティを通じてこの情報にアクセスできます。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ActivityEvent オブジェクトのコンストラクターです。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	アクティビティイベントに関する情報を含むイベントオブジェクトを作成します。イベントリスナーには Event オブジェクトがパラメーターとして渡されます。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone"><apiName>clone</apiName><shortdesc>
	ActivityEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>元のオブジェクトと同じプロパティ値を含む新しい ActivityEvent オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ActivityEvent オブジェクトのコピーを作成して、各プロパティの値を元のプロパティの値と一致するように設定します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString"><apiName>toString</apiName><shortdesc>
	ActivityEvent オブジェクトのすべてのプロパティを含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ActivityEvent オブジェクトのすべてのプロパティを含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	ActivityEvent オブジェクトのすべてのプロパティを含むストリングを返します。次の形式が使用されます。
	<p><codeph>[ActivityEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> activating=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY"><apiName>ACTIVITY</apiName><shortdesc>
	ActivityEvent.ACTIVITY 定数は、アクティビティイベントオブジェクトの type プロパティ値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ActivityEvent.ACTIVITY</codeph> 定数は、<codeph>type</codeph> プロパティ（<codeph>activity</codeph> イベントオブジェクト）の値を定義します。 
	<p>このイベントには、次のプロパティがあります。</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>値</entry></row></thead><tbody><row><entry><codeph>activating</codeph></entry><entry>デバイスがアクティブになっている場合は <codeph>true</codeph>、非アクティブになっている場合は <codeph>false</codeph> です。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> は、キャンセルするデフォルトの動作がないことを示します。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>イベントリスナーで Event オブジェクトをアクティブに処理しているオブジェクトです。</entry></row><row><entry><codeph>target</codeph></entry><entry>Camera オブジェクトや Microphone オブジェクトなど、セッションを開始または終了しているオブジェクトです。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get"><apiName>activating</apiName><shortdesc>
	デバイスがアクティブになっているか（true）非アクティブになっているか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	デバイスがアクティブになっているか（<codeph>true</codeph>）非アクティブになっているか（<codeph>false</codeph>）を示します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>