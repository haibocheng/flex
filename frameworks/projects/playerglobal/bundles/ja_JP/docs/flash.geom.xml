<?xml version="1.0"?>
<apiPackage id="flash.geom"><apiName>flash.geom</apiName><apiDetail/><apiClassifier id="flash.geom:Utils3D"><apiName>Utils3D</apiName><shortdesc> 
 Utils3D クラスには、特定の 3 次元マトリックス操作の実装を単純化する静的メソッドが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>特定の 3 次元操作の実装を単純化する静的メソッドを持つユーティリティクラスです。 
 
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
 Utils3D クラスには、特定の 3 次元マトリックス操作の実装を単純化する静的メソッドが含まれます。
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Vector3D"><linktext>flash.geom.Vector3D</linktext></link><link href="flash.geom.xml#Transform"><linktext>flash.geom.Transform</linktext></link><link href="flash.geom.xml#PerspectiveProjection"><linktext>flash.geom.PerspectiveProjection</linktext></link><link href="flash.display.xml#Graphics"><linktext>flash.display.Graphics</linktext></link><link href="flash.display.xml#GraphicsTrianglePath"><linktext>flash.display.GraphicsTrianglePath</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links><apiOperation id="flash.geom:Utils3D:pointTowards"><apiName>pointTowards</apiName><shortdesc>
    位置に対するオブジェクトの方向を補間します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>2 番目のパラメーターで指定される、変更された Matrix3D オブジェクトです。<codeph>pointTowards()</codeph> メソッドを使用して表示オブジェクトを変換するには、表示オブジェクトの Matrix3D プロパティを返される Matrix3D オブジェクトに設定します。
    
    </apiDesc><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>percent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトをターゲットの方に増分しながら回転させる 0 ～ 1 の数値です。
    
    </apiDesc></apiParam><apiParam><apiItemName>mat</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>変換されるオブジェクトの Matrix3D プロパティです。 
    
    </apiDesc></apiParam><apiParam><apiItemName>pos</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>ターゲットオブジェクトのワールドを基準とする位置です。ワールド基準により、すべてのオブジェクトが配置される範囲空間と座標を基準とするオブジェクトの変換が定義されます。  
    
    </apiDesc></apiParam><apiParam><apiItemName>at</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiData>null</apiData><apiDesc>表示オブジェクトの位置を定義する、オブジェクトを基準とするベクターです。オブジェクト基準により、オブジェクト空間、つまりオブジェクトの参照フレームと座標系を基準とするオブジェクトの変換が定義されます。デフォルト値は（0,0,-1）です。
    
    </apiDesc></apiParam><apiParam><apiItemName>up</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiData>null</apiData><apiDesc>表示オブジェクトの「上方向」を定義する、オブジェクトを基準とするベクターです。オブジェクトを見下ろして描画する場合、<i>+z</i> 軸は「上方向」へのベクトルになります。オブジェクト基準により、オブジェクト空間、つまりオブジェクトの参照フレームと座標系を基準とするオブジェクトの変換が定義されます。デフォルト値は（0,-1.0）です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    位置に対するオブジェクトの方向を補間します。<codeph>pointTowards()</codeph> メソッドは、<codeph>Matrix3D.pointAt()</codeph> メソッドと <codeph>Matrix3D.interpolateTo()</codeph> メソッドの機能を組み合わせたものです。  
    
    <p><codeph>pointTowards()</codeph> メソッドにより、方向をその場で変更できます。表示オブジェクトの Matrix3D を分解し、回転エレメントをターゲットの位置の方に 1 ％回転させるエレメントに置き換えます。オブジェクトをそれ自身の方向に移動しつつ、ターゲットの方に増分しながら回転できます。変換メソッドの後に <codeph>pointTowards()</codeph> を呼び出すことで、移動するターゲットの後を追って動くオブジェクトのアニメーションを作成できます。まず、オブジェクトをターゲットの方に 1 パーセントポイント向けてから、オブジェクトを軸に沿って増分しながら移動します。</p> 
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/pointAt()"><linktext>flash.geom.Matrix3D.pointAt()</linktext></link><link href="flash.geom.xml#Matrix3D/interpolateTo()"><linktext>flash.geom.Matrix3D.interpolateTo()</linktext></link><link href="flash.geom.xml#Matrix3D/interpolate()"><linktext>flash.geom.Matrix3D.interpolate()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Utils3D:projectVector"><apiName>projectVector</apiName><shortdesc>
    投影 Matrix3D オブジェクトを使用して、ある空間座標から別の空間座標に Vector3D オブジェクトを投影します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>変換された空間座標を持つ新しい Vector3D です。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>m</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>投影変換を実装する投影 Matrix3D オブジェクトです。表示オブジェクトに PerspectiveProjection オブジェクトがある場合、<codeph>perspectiveProjection.toMatrix()</codeph> メソッドを使用して、表示オブジェクトの子に適用される投影 Matrix3D オブジェクトを作成できます。 高度な投影の場合は、<codeph>matrix3D.rawData</codeph> プロパティを使用してカスタム投影マトリックスを作成します。投影 Matrix3D オブジェクトを作成するためのビルトイン Matrix3D メソッドはありません。
    
    </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>新しい空間座標に投影される Vector3D オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    投影 Matrix3D オブジェクトを使用して、ある空間座標から別の空間座標に Vector3D オブジェクトを投影します。<codeph>projectVector()</codeph> メソッドは <codeph>Matrix3D.transformVector()</codeph> メソッドに似ていますが、<codeph>projectVector()</codeph> メソッドは、元の Vector3D オブジェクトの <i>x</i>、<i>y</i> および <i>z</i> の各エレメントを投影の奥行きの値で除算する点が異なります。奥行きの値とは、視点からビューまたは視点空間の Vector3D オブジェクトまでの距離です。この距離のデフォルト値は、<i>z</i> エレメントの値です。
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/transformVector()"><linktext>flash.geom.Matrix3D.transformVector()</linktext></link><link href="flash.geom.xml#Utils3D/projectVectors()"><linktext>projectVectors()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Utils3D:projectVectors"><apiName>projectVectors</apiName><shortdesc>
    投影 Matrix3D オブジェクトを使用して、3 次元空間座標のベクター（verts）を 2 次元空間座標のベクター（projectedVerts）に投影します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>m</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>投影変換を実装する投影 Matrix3D オブジェクトです。 <codeph>Matrix3D.rawData</codeph> プロパティを使用して、投影 Matrix3D オブジェクトを作成できます。
    </apiDesc></apiParam><apiParam><apiItemName>verts</apiItemName><apiType value="Vector$Number"/><apiDesc>数値のベクトルで、3 つの数値ごとに、3 次元空間の <i>x</i>、<i>y</i> および <i>z</i> の各座標を表します。例えば、<codeph>Vector3D(x,y,z)</codeph> のようになります。 
    
    </apiDesc></apiParam><apiParam><apiItemName>projectedVerts</apiItemName><apiType value="Vector$Number"/><apiDesc>数値のベクトルで、2 つの数値ごとに、投影された 2 次元座標を表します。例えば、<codeph>Point(x,y)</codeph> のようになります。ベクトルを事前に割り当てる必要があります。<codeph>projectVectors()</codeph> メソッドは、投影された各ポイントの値を設定します。
    
    </apiDesc></apiParam><apiParam><apiItemName>uvts</apiItemName><apiType value="Vector$Number"/><apiDesc>数値のベクトルで、3 つの数値ごとに、<i>u</i>、<i>v</i> および <i>t</i> の各エレメント（<codeph>uvt</codeph> データの）を表します。<i>u</i> と <i>v</i> は、投影された各ポイントのテクスチャ座標です。<i>t</i> 値は投影の奥行きの値、つまり視点からビューまたは視点空間の Vector3D オブジェクトまでの距離です。ベクターを事前に割り当て、<i>u</i> 値と <i>v</i> 値を指定する必要があります。<codeph>projectVectors</codeph> メソッドは、投影された各ポイントの <i>t</i> 値を設定します。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>3 次元空間座標のベクトルを 2 次元空間座標のベクトルに投影します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    投影 Matrix3D オブジェクトを使用して、3 次元空間座標のベクトル（<i>verts</i>）を 2 次元空間座標のベクトル（<codeph>projectedVerts</codeph>）に投影します。投影された Vector オブジェクトがパラメーターとして使用される前に、事前に割り当てる必要があります。 
    
    <p><codeph>projectVectors()</codeph> メソッドは、<i>t</i> 値（<i>uvt</i> データの）も設定します。座標の投影されたベクターのセットごとに <i>uvts</i> データを保持できるベクターを事前に割り当てる必要があります。<i>u</i> 値と <i>v</i> 値（<i>uvt</i> データの）も指定します。<i>uvt</i> データは、テクスチャマッピングに使用される正規化された座標のベクターです。UV 座標では、（0,0）はビットマップの左上隅で、（1,1）はビットマップの右下隅です。</p>
    
    <p>このメソッドは、<codeph>Graphics.drawTriangles()</codeph> メソッドおよび <codeph>GraphicsTrianglePath</codeph> クラスと組み合わせて使用できます。</p>  
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.display.xml#Graphics/drawTriangles()"><linktext>flash.display.Graphics.drawTriangles()</linktext></link><link href="flash.display.xml#GraphicsTrianglePath"><linktext>flash.display.GraphicsTrianglePath</linktext></link><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Utils3D/projectVector()"><linktext>projectVector()</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flash.geom:Vector3D"><apiName>Vector3D</apiName><shortdesc> 
 Vector3D クラスは、極座標 x、y、および z を使用して 3 次元空間でのポイントまたは位置を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
 Vector3D クラスは、極座標 x、y、および z を使用して 3 次元空間でのポイントまたは位置を表します。2 次元空間と同様に、<codeph>x</codeph> プロパティは水平軸を表し、<codeph>y</codeph> プロパティは垂直軸を表します。3 次元空間では、<codeph>z</codeph> プロパティが奥行きを表します。<codeph>x</codeph> プロパティの値は、オブジェクトが右に移動するにつれて増加します。<codeph>y</codeph> プロパティの値は、オブジェクトが下に移動するにつれて増加します。<codeph>z</codeph> プロパティの値は、オブジェクトが視点から離れるにつれて増加します。遠近法に基づく投影と拡大 / 縮小を使用すると、オブジェクトは近いと大きく表示され、画面から離れると小さく表示されます。右の 3 次元座標系のように、正の z 軸は閲覧者から離れる方向を指し、オブジェクトが閲覧者の目から離れるにつれて <codeph>z</codeph> プロパティの値が増加します。グローバル空間の起点（0,0,0）は、ステージの左上隅です。 
   
 <p><adobeimage alt="X 軸、Y 軸、Z 軸" href="../../images/xyzAxes.jpg"/></p>
 
 <p>Vector3D クラスは方向、つまり（0,0,0）などの座標の起点からエンドポイントまでの矢印、または RGB（赤、緑、青）カラーモデルの浮動小数点成分を表すこともできます。</p> 
 
 <p>四元数表記では、4 番目のエレメントとして <codeph>w</codeph> プロパティが作成されます。これにより、方向情報が追加されます。例えば、<codeph>w</codeph> プロパティは Vector3D オブジェクトの回転角度を定義できます。回転角度と座標 x、y、および z の組み合わせにより、表示オブジェクトの方向を決定できます。Vector3D エレメントをマトリックス表記で表現すると、次のようになります。</p>
 
 <p><adobeimage alt="Vector3D エレメント" href="../../images/Vector3Delements.jpg"/></p>
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Utils3D"><linktext>flash.geom.Utils3D</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links><apiConstructor id="flash.geom:Vector3D:Vector3D"><apiName>Vector3D</apiName><shortdesc>
     Vector3D オブジェクトのインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.</apiData><apiDesc>最初のエレメント（x 座標など）です。 
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.</apiData><apiDesc>2 番目のエレメント（y 座標など）です。 
     </apiDesc></apiParam><apiParam><apiItemName>z</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.</apiData><apiDesc>3 番目のエレメント（z 座標など）です。 
     </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.</apiData><apiDesc>追加データのオプションエレメント（回転角度など）です。 
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Vector3D オブジェクトのインスタンスを作成します。コンストラクターのパラメーターを指定しない場合、Vector3D オブジェクトはエレメント（0,0,0,0）で作成されます。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:Vector3D:add"><apiName>add</apiName><shortdesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、別の Vector3D オブジェクトの x、y、および z の各エレメントの値に加算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Vector3D オブジェクトを別の Vector3D オブジェクトに加算した結果である Vector3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>現在の Vector3D オブジェクトに加算される Vector3D オブジェクトです。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>新しい Vector3D オブジェクトを作成するために、現在の Vector3D オブジェクトを別の Vector3D オブジェクトに加算します。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、別の Vector3D オブジェクトの x、y、および z の各エレメントの値に加算します。<codeph>add()</codeph> メソッドは、現在の Vector3D オブジェクトを変更しません。代わりに、新しい値を持つ新しい Vector3D オブジェクトを返します。
    
    <p>2 つのベクトルを加算した結果は、合成ベクトルになります。結果を視覚化するには、最初のベクトルの起点（テール）から、2 番目のベクトルの終点（ヘッド）までベクトルを描画するという方法があります。合成ベクトルは、最初のベクトルの起点と 2 番目のベクトルの終点の間の距離です。</p>   
    
    <p><adobeimage alt="合成された Vector3D" href="../../images/resultantVector3D.jpg"/></p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/incrementBy()"><linktext>incrementBy()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:angleBetween"><apiName>angleBetween</apiName><shortdesc>
    2 つのベクトル間の角度をラジアンで返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>2 つの Vector3D オブジェクト間の角度です。
    
    </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>最初の Vector3D オブジェクトです。
    </apiDesc></apiParam><apiParam><apiItemName>b</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>2 番目の Vector3D オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    2 つのベクトル間の角度をラジアンで返します。返された角度は、最初の Vector3D オブジェクトが 2 番目の Vector3D オブジェクトに整列するまで回転する最小ラジアンです。 
    
    <p><codeph>angleBetween()</codeph> メソッドは静的メソッドです。Vector3D クラスのメソッドとして直接使用できます。</p>
    
    <p>角度をラジアンに変換するには、次の式を使用できます。</p> 
    
    <p><codeph>ラジアン = Math.PI/180 ~~ 度</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:clone"><apiName>clone</apiName><shortdesc>
    現在の Vector3D オブジェクトを正確にコピーした新しい Vector3D オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Vector3D オブジェクトをコピーした新しい Vector3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトを正確にコピーした新しい Vector3D オブジェクトを返します。
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:crossProduct"><apiName>crossProduct</apiName><shortdesc>
    現在の Vector3D オブジェクトと別の Vector3D オブジェクトに対して垂直（直角）である新しい Vector3D オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Vector3D オブジェクトとパラメーターとして指定された Vector3D オブジェクトに対して垂直である新しい Vector3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>2 番目の Vector3D オブジェクトです。 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトと別の Vector3D オブジェクトに対して垂直（直角）である新しい Vector3D オブジェクトを返します。返された Vector3D オブジェクトの座標が（0,0,0）の場合、2 つの Vector3D オブジェクトは互いに垂直です。
    
    <p><adobeimage alt="クロス積" href="../../images/crossproduct.jpg"/></p>
    
    <p>カメラまたは視点の正規化されたベクトルを持つ多角形表面の 2 つの頂点の正規化されたクロス積を使用して、ドット積を取得できます。ドット積の値により、3 次元オブジェクトの表面が視点から隠れているかどうかを識別できます。</p>
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/dotProduct()"><linktext>dotProduct()</linktext></link><link href="flash.geom.xml#Vector3D/normalize()"><linktext>normalize()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:decrementBy"><apiName>decrementBy</apiName><shortdesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、指定された Vector3D オブジェクトの x、y、および z の各エレメントの値ずつデクリメントします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>現在の Vector3D から減算される値を含む Vector3D オブジェクトです。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>現在の Vector3D オブジェクトを別の Vector3D オブジェクトずつデクリメントします。  
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、指定された Vector3D オブジェクトの x、y、および z の各エレメントの値ずつデクリメントします。<codeph>Vector3D.subtract()</codeph> メソッドとは異なり、<codeph>decrementBy()</codeph> メソッドは現在の Vector3D オブジェクトを変更し、新しい Vector3D オブジェクトを返しません。
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/subtract()"><linktext>subtract()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:distance"><apiName>distance</apiName><shortdesc>
    2 つの Vector3D オブジェクト間の距離を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>2 つの Vector3D オブジェクト間の距離です。
    
    </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>pt1</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>最初の 3 次元ポイントとしての Vector3D オブジェクトです。 
    </apiDesc></apiParam><apiParam><apiItemName>pt2</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>2 番目の 3 次元ポイントとしての Vector3D オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    2 つの Vector3D オブジェクト間の距離を返します。<codeph>distance()</codeph> メソッドは静的メソッドです。Vector3D クラスのメソッドとして直接使用することで、2 つの 3 次元ポイント間のユークリッド距離を取得できます。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:dotProduct"><apiName>dotProduct</apiName><shortdesc>
    現在の Vector3D オブジェクトとパラメーターとして指定された Vector3D オブジェクトが単位頂点の場合、このメソッドは 2 つの頂点間の角度のコサインを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Vector3D オブジェクトと指定された Vector3D オブジェクトのドット積であるスカラーです。
    
    </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>2 番目の Vector3D オブジェクトです。 
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>現在の Vector3D オブジェクトと別の Vector3D オブジェクトのドット積を返します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトとパラメーターとして指定された Vector3D オブジェクトが単位頂点の場合、このメソッドは 2 つの頂点間の角度のコサインを返します。単位頂点とは、同じ方向を指し、長さが 1 の頂点です。結果の要素からベクトルの長さが削除されます。 <codeph>normalize()</codeph> メソッドを使用して、ベクトルを単位ベクトルに変換できます。 
    
    <p><codeph>dotProduct()</codeph> メソッドは、2 つの頂点の間の角度を求めます。バックフェースカリングやライティング計算でも使用されます。バックフェースカリングとは、視点から隠す表面を決定するための手順です。カメラ、目、または視点からの正規化された角度と、多角形表面の頂点のクロス積を使用して、ドット積を取得できます。ドット積が 0 未満の場合、表面はカメラまたは閲覧者の方を向いています。2 つの単位頂点が互いに垂直である場合、それらは直交しており、ドット積は 0 になります。2 つの頂点が互いに平行である場合、ドット積は 1 になります。</p>
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/crossProduct()"><linktext>crossProduct()</linktext></link><link href="flash.geom.xml#Vector3D/normalize()"><linktext>normalize()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:equals"><apiName>equals</apiName><shortdesc>
    現在の Vector3D オブジェクトと指定された Vector3D オブジェクトの x、y、および z の各エレメントを比較して、2 つの Vector3D オブジェクトが等しいかどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された Vector3D オブジェクトが現在の Vector3D オブジェクトと等しい場合は、<codeph>true</codeph> が返されます。等しくない場合は、<codeph>false</codeph> が返されます。
    
    </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>toCompare</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>現在の Vector3D オブジェクトと比較される Vector3D オブジェクトです。
    </apiDesc></apiParam><apiParam><apiItemName>allFour</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Vector3D オブジェクトの <codeph>w</codeph> プロパティが比較に使用されるかどうかを指定するオプションパラメーターです。  
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトと指定された Vector3D オブジェクトの x、y、および z の各エレメントを比較して、2 つの Vector3D オブジェクトが等しいかどうかを判断します。これらのエレメントの値が同じ場合、2 つの Vector3D オブジェクトは等しくなります。2 番目のオプションパラメーターが <codeph>true</codeph> に設定されている場合、Vector3D オブジェクトの 4 つのエレメントすべて（<codeph>w</codeph> プロパティを含みます）が比較されます。 
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/nearEquals()"><linktext>nearEquals()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:incrementBy"><apiName>incrementBy</apiName><shortdesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、指定された Vector3D オブジェクトの x、y、および z の各エレメントの値ずつインクリメントします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>現在の Vector3D オブジェクトに加算される Vector3D オブジェクトです。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>現在の Vector3D オブジェクトを別の Vector3D オブジェクトずつインクリメントします。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、指定された Vector3D オブジェクトの x、y、および z の各エレメントの値ずつインクリメントします。<codeph>Vector3D.add()</codeph> メソッドとは異なり、<codeph>incrementBy()</codeph> メソッドは現在の Vector3D オブジェクトを変更し、新しい Vector3D オブジェクトを返しません。
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/add()"><linktext>add()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:nearEquals"><apiName>nearEquals</apiName><shortdesc>
    現在の Vector3D オブジェクトのエレメントと指定された Vector3D オブジェクトのエレメントを比較して、オブジェクトがほぼ等しいかどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された Vector3D オブジェクトが現在の Vector3D オブジェクトとほぼ等しい場合は、<codeph>true</codeph> が返されます。等しくない場合は、<codeph>false</codeph> が返されます。
    
    </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>toCompare</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>現在の Vector3D オブジェクトと比較される Vector3D オブジェクトです。 
    </apiDesc></apiParam><apiParam><apiItemName>tolerance</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>許容係数を決定する数値です。<codeph>toCompare</codeph> パラメーターで指定された Vector3D の値と現在の Vector3D エレメントの値の差異が許容値よりも小さい場合、2 つの値はほぼ等しいと見なされます。  
    </apiDesc></apiParam><apiParam><apiItemName>allFour</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Vector3D オブジェクトの <codeph>w</codeph> プロパティが比較に使用されるかどうかを指定するオプションパラメーターです。  
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトのエレメントと指定された Vector3D オブジェクトのエレメントを比較して、オブジェクトがほぼ等しいかどうかを判断します。2 つの頂点のすべてのエレメントの値が等しいか、比較の結果が許容範囲内の場合、2 つの Vector3D オブジェクトはほぼ等しくなります。2 つのエレメントの差異は、<codeph>tolerance</codeph> パラメーターとして指定された数値よりも小さくなる必要があります。3 番目のオプションパラメーターが <codeph>true</codeph> に設定されている場合、Vector3D オブジェクトの 4 つのエレメントすべて（<codeph>w</codeph> プロパティを含みます）が比較されます。それ以外の場合は、x、y、および z の各エレメントのみが比較の対象になります。
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/equals()"><linktext>equals()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:negate"><apiName>negate</apiName><shortdesc>
    現在の Vector3D オブジェクトをその反転に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトをその反転に設定します。反転オブジェクトは、元のオブジェクトの逆とも見なされます。 現在の Vector3D オブジェクトの <codeph>x</codeph>、<codeph>y</codeph> および <codeph>z</codeph> の各プロパティの値は、<codeph>-x</codeph>、<codeph>-y</codeph> および <codeph>-z</codeph> に変更されます。 
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:normalize"><apiName>normalize</apiName><shortdesc>
    最初の 3 つのエレメント（x, y, z）をベクトルの長さで除算して、Vector3D オブジェクトを単位ベクトルに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Vector3D オブジェクトの長さです。
    
    </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    最初の 3 つのエレメント（x, y, z）をベクトルの長さで除算して、Vector3D オブジェクトを単位ベクトルに変換します。単位頂点とは、方向を持ち、長さが 1 の頂点です。 長さの要素を削除することで、ベクトル計算を単純化します。
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:project"><apiName>project</apiName><shortdesc>
     現在の Vector3D オブジェクトの x、y、および z の各プロパティの値を、w プロパティの値で除算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     現在の Vector3D オブジェクトの <codeph>x</codeph>、<codeph>y</codeph> および <codeph>z</codeph> の各プロパティの値を、<codeph>w</codeph> プロパティの値で除算します。 
     
     <p>現在の Vector3D オブジェクトが、Vector3D オブジェクトに投影 Matrix3D オブジェクトを乗算した結果の場合、<codeph>w</codeph> プロパティは変換値を保持できます。<codeph>project()</codeph> メソッドは、エレメントを <codeph>w</codeph> プロパティで除算することで投影を完了できます。投影 Matrix3D オブジェクトを作成するには、<codeph>Matrix3D.rawData</codeph> プロパティを使用します。</p>
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:scaleBy"><apiName>scaleBy</apiName><shortdesc>
    現在の Vector3D オブジェクトをスカラー（大きさ）で拡大 / 縮小します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Vector3D オブジェクトの拡大 / 縮小に使用される乗数（スカラー）です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトをスカラー（大きさ）で拡大 / 縮小します。Vector3D オブジェクトの x、y、および z の各エレメントに、パラメーターで指定されたスカラー数を乗算します。例えば、ベクトルに 10 を乗算すると、結果は 10 倍長いベクトルになります。スカラーはベクトルの方向を変更することもできます。ベクトルに負の数値を乗算すると、方向が逆になります。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:subtract"><apiName>subtract</apiName><shortdesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、別の Vector3D オブジェクトの x、y、および z の各エレメントの値から減算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Vector3D オブジェクトと指定された Vector3D オブジェクトの間の差異である新しい Vector3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>現在の Vector3D オブジェクトから減算される Vector3D オブジェクトです。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>新しい Vector3D オブジェクトを作成するために、現在の Vector3D オブジェクトを別の Vector3D オブジェクトから減算します。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    現在の Vector3D オブジェクトの x、y、および z の各エレメントの値を、別の Vector3D オブジェクトの x、y、および z の各エレメントの値から減算します。<codeph>subtract()</codeph> メソッドは、現在の Vector3D オブジェクトを変更しません。代わりに、新しい値を持つ新しい Vector3D オブジェクトを返します。
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Vector3D/decrementBy()"><linktext>decrementBy()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:toString"><apiName>toString</apiName><shortdesc>
     現在の Vector3D オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>x</codeph>、<codeph>y</codeph> および <codeph>z</codeph> の各プロパティの値を含む文字列です。
     
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     現在の Vector3D オブジェクトのストリング表現を返します。文字列は、<codeph>x</codeph>、<codeph>y</codeph> および <codeph>z</codeph> の各プロパティの値を含みます。
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Vector3D:X_AXIS"><apiName>X_AXIS</apiName><shortdesc>
    座標（1,0,0）を持つ Vector3D オブジェクトとして定義される x 軸です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc>
    座標（1,0,0）を持つ Vector3D オブジェクトとして定義される x 軸です。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:Y_AXIS"><apiName>Y_AXIS</apiName><shortdesc>
    座標（0,1,0）を持つ Vector3D オブジェクトとして定義される y 軸です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc>
    座標（0,1,0）を持つ Vector3D オブジェクトとして定義される y 軸です。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:Z_AXIS"><apiName>Z_AXIS</apiName><shortdesc>
    座標（0,0,1）を持つ Vector3D オブジェクトとして定義される z 軸です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc>
    座標（0,0,1）を持つ Vector3D オブジェクトとして定義される z 軸です。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:w"><apiName>w</apiName><shortdesc>
     Vector3D オブジェクトの 4 番目のエレメント（x、y、および z の各プロパティ以外）は、回転角度などのデータを保持できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Vector3D オブジェクトの 4 番目のエレメント（<codeph>x</codeph>、<codeph>y</codeph> および <codeph>z</codeph> の各プロパティ以外）は、回転角度などのデータを保持できます。デフォルト値は 0 です。
     
     <p>四元数表記では、3 次元回転の計算の 4 番目のエレメントとして角度が使用されます。<codeph>w</codeph> プロパティを使用すると、Vector3D オブジェクトの回転角度を定義できます。回転角度と座標（x,y,z）の組み合わせにより、表示オブジェクトの方向が決まります。 </p>
     <p><codeph>w</codeph> プロパティは、投影された 3 次元位置の遠近法のワープ係数、または 2 次元空間に投影された 3 次元座標を表すときの投影変換値として使用することもできます。例えば、<codeph>Matrix3D.rawData</codeph> プロパティを使用して投影マトリックスを作成できます。このプロパティを Vector3D オブジェクトに適用すると、Vector3D オブジェクトの 4 番目のエレメント（<codeph>w</codeph> プロパティ）で変換値が作成されます。Vector3D オブジェクトの他のエレメントを変換値で除算すると、投影された Vector3D オブジェクトが作成されます。<codeph>Vector3D.project()</codeph> メソッドを使用すると、Vector3D オブジェクトの最初の 3 つのエレメントを 4 番目のエレメントで除算できます。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Vector3D/project()"><linktext>プロジェクト()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Vector3D:x"><apiName>x</apiName><shortdesc>
     Vector3D オブジェクトの最初のエレメント（3 次元空間のポイントの x 座標など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Vector3D オブジェクトの最初のエレメント（3 次元空間のポイントの x 座標など）です。デフォルト値は 0 です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:y"><apiName>y</apiName><shortdesc>
     Vector3D オブジェクトの 2 番目のエレメント（3 次元空間のポイントの y 座標など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Vector3D オブジェクトの 2 番目のエレメント（3 次元空間のポイントの y 座標など）です。デフォルト値は 0 です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:z"><apiName>z</apiName><shortdesc>
     Vector3D オブジェクトの 3 番目のエレメント（3 次元空間のポイントの z 座標など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Vector3D オブジェクトの 3 番目のエレメント（3 次元空間のポイントの z 座標など）です。デフォルト値は 0 です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:length:get"><apiName>length</apiName><shortdesc>
    起点（0,0,0）からオブジェクトの x、y、および z の各座標までの現在の Vector3D オブジェクトの長さ（大きさ）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>現在の Vector3D オブジェクトの長さです。 
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    起点（0,0,0）からオブジェクトの x、y、および z の各座標までの現在の Vector3D オブジェクトの長さ（大きさ）です。<codeph>w</codeph> プロパティは無視されます。単位ベクトルの長さ（大きさ）は 1 です。
    
    </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Vector3D/lengthSquared"><linktext>lengthSquared</linktext></link></related-links></apiValue><apiValue id="flash.geom:Vector3D:lengthSquared:get"><apiName>lengthSquared</apiName><shortdesc>
    現在の Vector3D オブジェクトの長さの平方です。x、y、および z の各プロパティを使用して計算されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>現在の Vector3D オブジェクトの長さの平方です。 
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    現在の Vector3D オブジェクトの長さの平方です。<codeph>x</codeph>、<codeph>y</codeph> および <codeph>z</codeph> の各プロパティを使用して計算されます。<codeph>w</codeph> プロパティは無視されます。可能であれば <codeph>lengthSquared()</codeph> メソッドを使用します。これは、<codeph>Math.sqrt()</codeph> メソッド呼び出し（<codeph>Vector3D.length()</codeph> メソッド）は時間がかかるためです。
    
    </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Vector3D/length"><linktext>length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.geom:Matrix3D"><apiName>Matrix3D</apiName><shortdesc>
 Matrix3D クラスは、3 次元 (3D) 表示オブジェクトの位置と方向を決定する変換マトリックスを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>Removed the following since it was very unclear. It could be used for a future example however:
 <p>To support a camera viewpoint and motion, create a camera class that keeps a Matrix3D object for 
 handling the movement of the display objects relative to the camera. In the camera space, the display objects 
 move in the opposite direction of the camera movement. For example, when the camera moves closer, the objects 
 become bigger. In other words, if the camera moves down the world z axis, the objects moves up 
 the z axis. One way to produce this effect is by setting the Matrix3D object of the camera class 
 to the inverse of the display objects' transformation. If the display objects are children of the <code>root</code> 
 display object, the Matrix3D object of the camera class can be set to the inverse of the <code>root</code> 
 display object. Another option is to have the display objects as children of a camera object.</p>
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Matrix3D クラスは、3 次元（3D）表示オブジェクトの位置と方向を決定する変換マトリックスを表します。マトリックスでは、平行移動（x 軸、y 軸および z 軸に沿った位置変更）、回転、拡大 / 縮小などの変換機能を実行できます。Matrix3D クラスでは、遠近法に基づく投影を実行し、3D 座標空間のポイントを 2 次元（2D）ビューにマッピングすることもできます。 
 
 <p>1 つのマトリックスで複数の変換を結合し、3D 表示オブジェクトに一括して適用することができます。例えば、マトリックスを 3D 座標に適用して、回転の後に平行移動を実行できます。 </p> 
 
 <p>表示オブジェクトの <codeph>z</codeph> プロパティまたは回転や拡大 / 縮小のプロパティを明示的に設定すると、対応する Matrix3D オブジェクトが自動的に作成されます。</p>
 
 <p>3D 表示オブジェクト内の Matrix3D オブジェクトは、<codeph>transform.matrix3d</codeph> プロパティを通じてアクセスできます。2D オブジェクト内には Matrix3D オブジェクトがありません。 </p>
 
 <p>2D オブジェクトの <codeph>z</codeph> プロパティの値は 0 で、その <codeph>matrix3D</codeph> プロパティの値は <codeph>null</codeph> です。</p> 
 
 <p><b>注意：</b>同じ Matrix3D オブジェクトを 2 つの異なる表示オブジェクトに割り当てると、ランタイムエラーが発生します。</p>
 
 <p>Matrix3D クラスは 4 × 4 正方マトリックスを使用します。これは、変換用のデータを保持する 4 行 × 4 列の数値のテーブルです。マトリックスの最初の 3 行は 3D の各軸（x、y、z）のデータを保持します。平行移動情報は最後の列に格納されます。方向と拡大 / 縮小のデータは、最初の 3 列に格納されます。倍率は、最初の 3 列の対角線上の数値です。Matrix3D エレメントは次のように表現されます。</p>  
 
 <p><adobeimage alt="Matrix3D エレメント" href="../../images/Matrix3Delements.jpg"/></p>
 
 <p>マトリックスを数学的に理解できなくても Matrix3D クラスを使用できます。Matrix3D クラスには、<codeph>appendTranslation()</codeph>、<codeph>appendRotation()</codeph>、<codeph>interpolateTo()</codeph> などのメソッドがあり、これらを使用して平行移動や投影の作業を簡単に実行できます。<codeph>decompose()</codeph> メソッド、<codeph>recompose()</codeph> メソッドまたは <codeph>rawData</codeph> プロパティを使用して、基になっているマトリックスエレメントも使用できます。</p>
 
 <p>表示オブジェクトは軸回転プロパティをキャッシュして、軸ごとに個別に回転を実行し、回転の異なる組み合わせを管理します。表示オブジェクトを変換するために Matrix3D オブジェクトのメソッドが呼び出されると、オブジェクトの回転キャッシュが無効化されます。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Transform"><linktext>flash.geom.Transform</linktext></link><link href="flash.geom.xml#PerspectiveProjection"><linktext>flash.geom.PerspectiveProjection</linktext></link><link href="flash.geom.xml#Vector3D"><linktext>flash.geom.Vector3D</linktext></link><link href="flash.geom.xml#Orientation3D"><linktext>flash.geom.Orientation3D</linktext></link><link href="flash.geom.xml#Utils3D"><linktext>flash.geom.Utils3D</linktext></link><link href="flash.geom.xml#Matrix"><linktext>flash.geom.Matrix</linktext></link></related-links><apiConstructor id="flash.geom:Matrix3D:Matrix3D"><apiName>Matrix3D</apiName><shortdesc>
    Matrix3D オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>v</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>数値の数が 16 のベクターです。4 つのエレメントごとに 4 × 4 マトリックスの 1 行または 1 列になります。
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Matrix3D オブジェクトを作成します。Matrix3D オブジェクトは数値の数が 16 のベクターで初期化できます。4 つのエレメントごとに 1 行または 1 列になります。Matrix3D オブジェクトが作成されると、<codeph>rawData</codeph> プロパティを使用してマトリックスエレメントにアクセスできます。 
    
    <p>パラメーターが定義されていない場合、コンストラクターは単位 Matrix3D オブジェクトを作成します。マトリックス表記では、単位マトリックスは、メインの対角線上の位置にあるすべてのエレメントには値 1 を使用し、その他のすべてのエレメントには値 0 を使用します。単位マトリックスの <codeph>rawData</codeph> プロパティの値は、<codeph>1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1</codeph> です。単位マトリックスの位置または平行移動の値は <codeph>Vector3D(0,0,0)</codeph>、回転設定は <codeph>Vector3D(0,0,0)</codeph>、拡大 / 縮小の値は <codeph>Vector3D(1,1,1)</codeph> です。</p> 
    
    </apiDesc></apiConstructorDetail><related-links><link href="flash.geom.xml#Matrix3D/identity()"><linktext>identity()</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links></apiConstructor><apiOperation id="flash.geom:Matrix3D:append"><apiName>append</apiName><shortdesc>
    別の Matrix3D オブジェクトに現在の Matrix3D オブジェクトを乗算して、マトリックスの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lhs</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>現在の Matrix3D オブジェクトを乗算した左側のマトリックスです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    別の Matrix3D オブジェクトに現在の Matrix3D オブジェクトを乗算して、マトリックスの末尾に追加します。結果により、両方のマトリックス変換が結合されます。1 つの Matrix3D オブジェクトに複数のマトリックスを乗算できます。最後の Matrix3D オブジェクトには、すべての変換の結果が格納されます。
    
    <p>マトリックスの乗算は、マトリックスの加算とは異なります。マトリックスの乗算は可換ではありません。つまり、A の B 倍は B の A 倍ではありません。<codeph>append()</codeph> メソッドを使用すると、乗算は左側から行われます。つまり、<codeph>lhs</codeph> Matrix3D オブジェクトは乗算演算子の左側にあります。</p>
    
    <codeph>thisMatrix = lhs ~~ thisMatrix;</codeph>
      
    <p><codeph>append()</codeph> メソッドを初めて呼び出すと、親空間を基準にして変更が加えられます。後続の呼び出しは、末尾に追加された Matrix3D オブジェクトの参照フレームを基準とします。</p>
    
    <p><codeph>append()</codeph> メソッドは、現在のマトリックスを末尾に追加されたマトリックスに置き換えます。現在のマトリックスを変更せずに 2 つのマトリックスを末尾に追加するには、<codeph>clone()</codeph> メソッドを使用して現在のマトリックスをコピーした後、<codeph>append()</codeph> メソッドをコピーに適用します。</p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/prepend()"><linktext>flash.geom.Matrix3D.prepend()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:appendRotation"><apiName>appendRotation</apiName><shortdesc>
    Matrix3D オブジェクトの末尾にインクリメンタルな回転を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>degrees</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>回転の角度です。
    </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>回転の軸または方向です。通常の軸は、<codeph>X_AXIS</codeph>（<codeph>Vector3D(1,0,0)</codeph>）、<codeph>Y_AXIS</codeph>（<codeph>Vector3D(0,1,0)</codeph>）および <codeph>Z_AXIS</codeph>（<codeph>Vector3D(0,0,1)</codeph>）です。 
    </apiDesc></apiParam><apiParam><apiItemName>pivotPoint</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiData>null</apiData><apiDesc>オブジェクトの回転の中心を決定するポイントです。オブジェクトのデフォルトの回転軸は基準点です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    Matrix3D オブジェクトの末尾にインクリメンタルな回転を追加します。Matrix3D オブジェクトが表示オブジェクトに適用されると、マトリックスは Matrix3D オブジェクトの他の変換の後に回転を実行します。 
    
    <p>表示オブジェクトの回転は、軸、軸を中心とした回転の増分角度、およびオブジェクトの回転の中心となるオプションの回転軸によって定義されます。軸は通常の方向になります。一般的な軸は、<codeph>X_AXIS</codeph>（<codeph>Vector3D(1,0,0)</codeph>）、<codeph>Y_AXIS</codeph>（<codeph>Vector3D(0,1,0)</codeph>）および <codeph>Z_AXIS</codeph>（<codeph>Vector3D(0,0,1)</codeph>）です。航空用語では、y 軸を中心とした回転は偏揺れと呼ばれます。x 軸を中心とした回転は縦揺れと呼ばれます。z 軸を中心とした回転は横揺れと呼ばれます。</p> 
    
    <p>変換の順序は重要です。回転に続いて平行移動変換を行うと、平行移動に続いて回転変換を行う場合とは異なる結果になります。</p>
    
    <p>回転結果は絶対的ではありません。現在の位置と方向に対して相対的に行われます。変換マトリックスの絶対変更を行うには、<codeph>recompose()</codeph> メソッドを使用します。<codeph>appendRotation()</codeph> メソッドは、表示オブジェクトの軸回転プロパティ（<codeph>rotationX</codeph> プロパティなど）とも異なります。回転プロパティは常に平行移動の前に実行されますが、<codeph>appendRotation()</codeph> メソッドは既にマトリックスに存在するものを基準にして行われます。表示オブジェクトの軸回転プロパティと同様の効果を得るには、<codeph>prependRotation()</codeph> メソッドを使用します。このメソッドは、マトリックスでの他の変換の前に回転を実行します。</p>
    
    <p><codeph>appendRotation()</codeph> メソッドの変換が表示オブジェクトの Matrix3D オブジェクトに適用されると、表示オブジェクトのキャッシュされた回転プロパティ値が無効化されます。</p> 
    
    <p>表示オブジェクトをその位置を基準として特定のポイントを中心に回転させるには、オブジェクトの平行移動を指定されたポイントに設定し、<codeph>appendRotation()</codeph> メソッドを使用してオブジェクトを回転させ、オブジェクトを元の位置に戻すという方法があります。次の例では、<codeph>myObject</codeph> 3D 表示オブジェクトは、座標（10,10,0）を中心として y 軸を回転します。</p>
    
    <codeblock rev="3.0">
    
    myObject.z = 1; 
    myObject.transform.matrix3D.appendTranslation(10,10,0);
    myObject.transform.matrix3D.appendRotation(1, Vector3D.Y_AXIS);
    myObject.transform.matrix3D.appendTranslation(-10,-10,0);
     
    </codeblock>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/prependRotation()"><linktext>prependRotation()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:appendScale"><apiName>appendScale</apiName><shortdesc>
    x 軸、y 軸、z 軸上のインクリメンタルな拡大 / 縮小の変更を Matrix3D オブジェクトの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを x 軸方向に拡大 / 縮小するために使用される乗数です。
    </apiDesc></apiParam><apiParam><apiItemName>yScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを y 軸方向に拡大 / 縮小するために使用される乗数です。
    </apiDesc></apiParam><apiParam><apiItemName>zScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを z 軸方向に拡大 / 縮小するために使用される乗数です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    x 軸、y 軸、z 軸上のインクリメンタルな拡大 / 縮小の変更を Matrix3D オブジェクトの末尾に追加します。Matrix3D オブジェクトが表示オブジェクトに適用されると、マトリックスは Matrix3D オブジェクトの他の変換の後に拡大 / 縮小の変更を行います。デフォルトの拡大 / 縮小率は（1.0, 1.0, 1.0）です。
    
    <p>拡大 / 縮小は、3 つの軸（x,y,z）上の 3 つの増分変更のセットとして定義されます。各軸に異なる数値を乗算できます。拡大 / 縮小の変更が表示オブジェクトに適用されると、オブジェクトのサイズが増加または減少します。例えば、x、y、および z の各軸を 2 に設定するとオブジェクトのサイズが 2 倍になり、軸を <codeph>0.5</codeph> に設定するとサイズが半分になります。拡大 / 縮小の変換が特定の軸のみに影響するようにするには、他のパラメーターを 1 に設定します。パラメーター 1 は、特定の軸に沿った拡大 / 縮小の変更は行われないことを意味します。</p>
    
    <p><codeph>appendScale()</codeph> メソッドは、サイズ変更と歪みの処理の両方に使用できます。例えば、表示オブジェクトの拡大や縮小、ある位置でのズームインやズームアウトなどです。拡大 / 縮小変換は、表示オブジェクトの回転および平行移動中に自動的に実行されます。</p>
    
    <p>変換の順序は重要です。サイズ変更に続いて平行移動変換を行うと、平行移動に続いてサイズ変更変換を行う場合とは異なる結果になります。</p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/prependScale()"><linktext>prependScale()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:appendTranslation"><apiName>appendTranslation</apiName><shortdesc>
    x 軸、y 軸、z 軸上のインクリメンタルな位置の変更を Matrix3D オブジェクトの末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>x 軸上のインクリメンタルな位置の変更です。
    </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>y 軸上のインクリメンタルな位置の変更です。
    </apiDesc></apiParam><apiParam><apiItemName>z</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>z 軸上のインクリメンタルな位置の変更です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    x 軸、y 軸、z 軸上のインクリメンタルな位置の変更を Matrix3D オブジェクトの末尾に追加します。Matrix3D オブジェクトが表示オブジェクトに適用されると、マトリックスは Matrix3D オブジェクトの他の変換の後に平行移動の変更を行います。
    
    <p>平行移動は、3 つの軸（x,y,z）上の 3 つの増分変更のセットとして定義されます。変換が表示オブジェクトに適用されると、表示オブジェクトは、パラメーターの指定に従って、現在の位置から x、y、および z の各軸に沿って移動します。平行移動が特定の軸のみに影響するようにするには、他のパラメーターを 0 に設定します。パラメーター 0 は、特定の軸に沿った変更が行われないことを意味します。</p> 
    
    <p>平行移動の変更は絶対的ではありません。マトリックスの現在の位置と方向に対して相対的に行われます。変換マトリックスの絶対変更を行うには、<codeph>recompose()</codeph> メソッドを使用します。変換の順序も重要です。平行移動に続いて回転変換を行うと、回転に続いて平行移動を行う場合とは異なる結果になります。</p>
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/prependTranslation()"><linktext>prependTranslation()</linktext></link><link href="flash.geom.xml#Matrix3D/position"><linktext>position</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:clone"><apiName>clone</apiName><shortdesc>
    現在の Matrix3D オブジェクトを正確にコピーした新しい Matrix3D オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の Matrix3D オブジェクトを正確にコピーした新しい Matrix3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    現在の Matrix3D オブジェクトを正確にコピーした新しい Matrix3D オブジェクトを返します。      
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix3D:decompose"><apiName>decompose</apiName><shortdesc>
    変換マトリックスの平行移動、回転、および拡大 / 縮小の各設定を、3 つの Vector3D オブジェクトのベクターとして返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>3 つの Vector3D オブジェクトのベクターです。それぞれが、平行移動、回転、および拡大 / 縮小の設定を保持します。 
    
    </apiDesc><apiType value="Vector$flash.geom:Vector3D"/></apiReturn><apiParam><apiItemName>orientationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>eulerAngles</apiData><apiDesc>マトリックス変換に使用される方向スタイルを決定するオプションパラメーターです。方向スタイルには、<codeph>eulerAngles</codeph>（定数 <codeph>EULER_ANGLES</codeph>）、<codeph>axisAngle</codeph>（定数 <codeph>AXIS_ANGLE</codeph>）および <codeph>quaternion</codeph>（定数 <codeph>QUATERNION</codeph>）の 3 種類があります。様々な方向スタイルの詳細については、<codeph>geom.Orientation3D</codeph> クラスを参照してください。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    変換マトリックスの平行移動、回転、および拡大 / 縮小の各設定を、3 つの Vector3D オブジェクトのベクターとして返します。最初の Vector3D オブジェクトは、変換エレメントを保持します。2 番目の Vector3D オブジェクトは、回転エレメントを保持します。最初の Vector3D オブジェクトは、拡大 /縮小エレメントを保持します。 
    
    <p><codeph>interpolateTo()</codeph> メソッドなど、一部の Matrix3D メソッドは、マトリックスを自動的に分解および再構成して変換を実行します。</p> 
       
    <p>絶対親参照フレームを使用してマトリックスの変換を変更するには、<codeph>decompose()</codeph> メソッドを使用して設定を取得し、適切な変更を行います。次に、<codeph>recompose()</codeph> メソッドを使用して、Matrix3D オブジェクトを変更された変換に設定します。</p>
    
    <p><codeph>decompose()</codeph> メソッドのパラメーターは、変換に使用される方向スタイルを指定します。デフォルトの方向は <codeph>eulerAngles</codeph> です。これは、各軸に異なる 3 つの回転角度を使用して方向を定義します。回転は連続して行われ、それぞれの軸は変更されません。表示オブジェクトの軸回転プロパティは、Euler 角度方向スタイル変換を実行します。その他の方向スタイルオプションは、<codeph>axisAngle</codeph> と <codeph>quaternion</codeph> です。軸角度方向は、軸と角度の組み合わせを使用して方向を決定します。オブジェクトの回転の中心となる軸は、方向を表す単位ベクトルです。角度は、ベクトルに関する回転の大きさを表します。方向は表示オブジェクトの向きも決定し、角度はどちらが上かを決定します。<codeph>appendRotation()</codeph> メソッドと <codeph>prependRotation()</codeph> メソッドは、軸角度方向を使用します。四元数方向は、複素数とベクターの 4 番目のエレメントを使用します。3 つの回転軸（x,y,z）と 1 つの回転角度（w）は、方向を表します。<codeph>interpolate()</codeph> メソッドは四元数を使用します。</p> 
    
    </apiDesc><example conref="examples\Matrix3DdecomposeExample.as"> この例では、<codeph>decompose()</codeph> メソッドと <codeph>recompose()</codeph> メソッドを使用して、楕円を消失点の方に移動しながら水平方向に伸張します。<codeph>decompose()</codeph> メソッドによって返される最初の Vector3D オブジェクトは、平行移動座標を保持します。3 番目の Vector3D オブジェクトは、拡大 / 縮小設定を保持します。Vector3D オブジェクトの <codeph>incrementBy()</codeph> メソッドは、マトリックスの絶対平行移動および拡大 / 縮小の設定をインクリメントします。
<codeblock>
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.geom.*;
    import flash.events.Event;
    
    public class Matrix3DdecomposeExample extends MovieClip {
        private var ellipse:Shape = new Shape();

        public function Matrix3DdecomposeExample():void {
            
            ellipse.x = (this.stage.stageWidth / 2);
            ellipse.y = (this.stage.stageHeight - 40);
            ellipse.z = 1;
            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(0, 0, 50, 40);
            ellipse.graphics.endFill();
            addChild(ellipse);

            ellipse.addEventListener(Event.ENTER_FRAME, enterFrameHandler);
        }

        private function enterFrameHandler(e:Event):void {  

            var v3:Vector.&lt;Vector3D> = new Vector.&lt;Vector3D>(3);
            v3 = ellipse.transform.matrix3D.decompose();
            v3[0].incrementBy(new Vector3D(0,0,1));
            v3[2].incrementBy(new Vector3D(0.01,0,0));
            ellipse.transform.matrix3D.recompose(v3);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Orientation3D"><linktext>flash.geom.Orientation3D</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()"><linktext>recompose()</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:deltaTransformVector"><apiName>deltaTransformVector</apiName><shortdesc>
    平行移動エレメントのない変換マトリックスを使用して、Vector3D オブジェクトをある空間座標から別の空間座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された座標を持つ Vector3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>変換される座標を保持する Vector3D オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    平行移動エレメントのない変換マトリックスを使用して、Vector3D オブジェクトをある空間座標から別の空間座標に変換します。返された Vector3D オブジェクトは、回転および拡大 / 縮小変換が適用された後の新しい座標を保持します。<codeph>deltaTransformVector()</codeph> メソッドが、平行移動変換のみを含むマトリックスに適用される場合、返される Vector3D は元の Vector3D オブジェクトと同じになります。
    
    <p><codeph>deltaTransformVector()</codeph> メソッドを使用すると、ある座標空間の表示オブジェクトを、2 番目の表示オブジェクトの回転変換に応答させることができます。オブジェクトは回転をコピーするのではなく、位置のみを変更して、回転に変更を反映します。例えば、<codeph>display.Graphics</codeph> API を使用して回転する 3D 表示オブジェクトを描画するには、オブジェクトの回転座標を 2D ポイントにマッピングする必要があります。まず、<codeph>deltaTransformVector()</codeph> メソッドを使用して、各回転の後にオブジェクトの 3D 座標を取得します。次に、表示オブジェクトの <codeph>local3DToGlobal()</codeph> メソッドを適用して 3D 座標を 2D ポイントに変換します。その後に 2D ポイントを使用して、回転する 3D オブジェクトを描画できます。</p> 
    
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/transformVectors()"><linktext>transformVectors()</linktext></link><link href="flash.geom.xml#Matrix3D/transformVector()"><linktext>transformVector()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:identity"><apiName>identity</apiName><shortdesc>
    現在のマトリックスを単位マトリックスに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
    現在のマトリックスを単位マトリックスに変換します。単位マトリックスは、メインの対角線上にあるエレメントには値 1 を使用し、その他のすべてのエレメントには値 0 を使用します。結果は、<codeph>rawData</codeph> 値が <codeph>1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1</codeph> のマトリックスになり、回転設定は <codeph>Vector3D(0,0,0)</codeph>、位置または平行移動の設定は <codeph>Vector3D(0,0,0)</codeph>、拡大 / 縮小は <codeph>Vector3D(1,1,1)</codeph> に設定されます。単位マトリックスは次のように表現されます。
    
    <p><adobeimage alt="単位マトリックス" href="../../images/identityMatrix.jpg"/></p>
    
    <p>単位マトリックスの適用によって変換されたオブジェクトは、変換を実行しません。つまり、マトリックスに単位マトリックスを乗算すると、結果は元のマトリックスと同じマトリックスになります。</p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix3D:interpolate"><apiName>interpolate</apiName><shortdesc>
    表示オブジェクトがターゲットの表示オブジェクトに 1 パーセントポイント近くなるように補間することで、ある参照フレームから別の参照フレームへの補間を単純化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>元のマトリックスとターゲットマトリックスの間にマトリックスの値を配置するエレメントを持つ Matrix3D オブジェクトです。返されたマトリックスが <codeph>this</codeph> 表示オブジェクトに適用されると、オブジェクトは指定されたパーセント分ターゲットオブジェクトに近づきます。
    
    </apiDesc><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>thisMat</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>補間される Matrix3D オブジェクトです。
    </apiDesc></apiParam><apiParam><apiItemName>toMat</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>ターゲットの Matrix3D オブジェクトです。
    </apiDesc></apiParam><apiParam><apiItemName>percent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc><codeph>0</codeph> ～ <codeph>1</codeph> の値です。<codeph>thisMat</codeph> Matrix3D オブジェクトがターゲットの Matrix3D オブジェクトに向かって補間されるパーセントを決定します。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>表示オブジェクトがターゲットの表示オブジェクトに 1 パーセントポイント近くなるように補間します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    表示オブジェクトがターゲットの表示オブジェクトに 1 パーセントポイント近くなるように補間することで、ある参照フレームから別の参照フレームへの補間を単純化します。その結果、新しい Matrix3D オブジェクトが作成されます。この新しい Matrix3D オブジェクトでは、平行移動、回転、および拡大 / 縮小のすべてのエレメントが、現在の表示オブジェクトとターゲットの表示オブジェクトの間の値に補間されます。
    
    <p><codeph>interpolate()</codeph> メソッドは、表示オブジェクトの軸回転プロパティなどのメソッドを使用するときに発生する一部の不要な結果を回避します。<codeph>interpolate()</codeph> メソッドは、表示オブジェクトの回転プロパティのキャッシュされた値を無効化し、補間前に表示オブジェクトのマトリックスの方向エレメントを四元数に変換します。このメソッドにより、最も効率的な最短の回転パスが保証されます。また、回転はスムーズでジンバルロックは発生しません。ジンバルロックは、各軸が独立して扱われる Euler 角度を使用する場合に発生する可能性があります。2 つ以上の軸を中心として回転しているときに、軸が重なり、予期しない結果が生じる可能性があります。四元数回転により、ジンバルロックが回避されます。</p> 
    
    <p><codeph>interpolate()</codeph> メソッドを連続して呼び出すと、表示オブジェクトは素早く変化した後、別の表示オブジェクトにゆっくり近づきます。例えば、<codeph>thisMat</codeph> パラメーターを返された Matrix3D オブジェクトに、<codeph>toMat</codeph> パラメーターをターゲットの表示オブジェクトの関連する Matrix3D オブジェクトに、<codeph>percent</codeph> パラメーターを <codeph>0.1</codeph> に設定すると、表示オブジェクトはターゲットオブジェクトの方に 10 ％移動します。その後の呼び出しまたは後続のフレームで、オブジェクトは残りの 90 ％の 10 ％を移動した後、ターゲットに到達するまで、残りの 80 ％の 10 ％を移動します。</p>  
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/interpolateTo()"><linktext>interpolateTo()</linktext></link><link href="flash.geom.xml#Utils3D/pointTowards()"><linktext>flash.geom.Utils3D.pointTowards()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:interpolateTo"><apiName>interpolateTo</apiName><shortdesc>
    表示オブジェクトのマトリックスが、ターゲットのマトリックスに 1 ％近づくように補間します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toMat</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>ターゲットの Matrix3D オブジェクトです。  
    </apiDesc></apiParam><apiParam><apiItemName>percent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ターゲットを基準として表示オブジェクトの位置を決定する、<codeph>0</codeph> ～ <codeph>1</codeph> の値です。値が <codeph>1.0</codeph> に近づくほど、表示オブジェクトは現在の位置に近くなります。値が <codeph>0</codeph> に近づくほど、表示オブジェクトはターゲットに近くなります。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    表示オブジェクトのマトリックスが、ターゲットのマトリックスに 1 ％近づくように補間します。表示オブジェクトの平行移動、回転、および拡大 / 縮小のすべてのエレメントが、現在の表示オブジェクトとターゲットの表示オブジェクトのマトリックスの間の値に補間されます。 
    
    <p><codeph>interpolateTo()</codeph> メソッドは、表示オブジェクトの軸回転プロパティなどのメソッドを使用するときに発生する不要な結果を回避します。<codeph>interpolateTo()</codeph> メソッドは、表示オブジェクトの回転プロパティのキャッシュされた値を無効化し、補間前に表示オブジェクトのマトリックスの方向エレメントを四元数に変換します。このメソッドにより、最も効率的な最短の回転パスが保証されます。また、回転はスムーズでジンバルロックは発生しません。ジンバルロックは、各軸が独立して扱われる Euler 角度を使用する場合に発生する可能性があります。2 つ以上の軸を中心として回転しているときに、軸が重なり、予期しない結果が生じる可能性があります。四元数回転により、ジンバルロックが回避されます。</p> 
    
    <p><codeph>interpolateTo()</codeph> メソッドを連続して呼び出すと、表示オブジェクトは素早く変化した後、別の表示オブジェクトにゆっくり近づきます。例えば、percent パラメーターを <codeph>0.1</codeph> に設定すると、表示オブジェクトは、<codeph>toMat</codeph> パラメーターで指定されたターゲットオブジェクトに向かって 10 % 移動します。その後の呼び出しまたは後続のフレームで、オブジェクトは残りの 90 ％の 10 ％を移動した後、ターゲットに到達するまで、残りの 80 ％の 10 ％を移動します。</p>  
    
    </apiDesc><example conref="examples\InterpolateToExample.as"> この例では、<codeph>ellipse2</codeph>（3 次元表示オブジェクト）は、<codeph>ellipse1</codeph>（別の 3 次元表示オブジェクト）に向かって移動します。<codeph>ellipse2</codeph> は <codeph>ellipse1</codeph> に追随して追いつこうとします。 <codeph>ellipse1</codeph> が y 軸を中心として回転しない場合、<codeph>ellipse2</codeph> は <codeph>ellipse1</codeph> の上部にたどり着きます。2 つの楕円は同じように描画されますが、別の 3 次元ワールド空間の位置に配置されます。 
<codeblock>
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.display.Graphics;
    import flash.geom.*;
    import flash.events.Event;

    public class InterpolateToExample extends MovieClip {
        private var ellipse1:Shape = new Shape();
        private var ellipse2:Shape = new Shape();

        public function InterpolateToExample():void {

            ellipse1 = myEllipses(250, 100, 500, 0xFF0000);
            addChild(ellipse1);
            
            ellipse2 = myEllipses(-30, 120, 1, 0x00FF00);
            addChild(ellipse2);

            addEventListener(Event.ENTER_FRAME, enterFrameHandler);
        }

        private function myEllipses(x:Number, y:Number, z:Number, c:Number):Shape {
            var s:Shape = new Shape();                            
            s.x = x;
            s.y = y;
            s.z = z;
            s.graphics.beginFill(c);
            s.graphics.lineStyle(2);
            s.graphics.drawEllipse(100, 50, 100, 80);
            s.graphics.endFill();
            return s;
        }

        private function enterFrameHandler(e:Event) {
            ellipse1.rotationY += 1;

            ellipse2.transform.matrix3D.interpolateTo(ellipse1.transform.matrix3D, 0.1);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/interpolate()"><linktext>interpolate()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:invert"><apiName>invert</apiName><shortdesc>
    現在のマトリックスを反転します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>マトリックスが正常に反転された場合、<codeph>true</codeph> を返します。 
    
    </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    現在のマトリックスを反転します。反転されたマトリックスのサイズは元のマトリックスと同じですが、元のマトリックスの逆の変換を実行します。例えば、元のマトリックスが x 軸を中心にオブジェクトを 1 方向に回転させる場合、マトリックスの反転は、軸を中心にオブジェクトを逆方向に回転させます。反転されたマトリックスをオブジェクトに適用すると、元のマトリックスによって実行された変換が取り消されます。マトリックスに反転マトリックスを乗算すると、結果は単位マトリックスになります。 
    
    <p>マトリックスの反転を使用して、あるマトリックスを別のマトリックスで除算できます。マトリックス A をマトリックス B で除算するには、マトリックス A にマトリックス B の反転を乗算します。反転マトリックスは、カメラ空間でも使用できます。カメラがワールド空間を移動する場合、ワールド内のオブジェクトは反対方向に移動して、ワールドビューをカメラまたはビュー空間に変換する必要があります。例えば、カメラが近づくと、オブジェクトは大きくなります。つまり、カメラがワールド z 軸を下に移動すると、オブジェクトはワールド z 軸を上に移動します。</p> 
    
    <p><codeph>invert()</codeph> メソッドは、現在のマトリックスを反転されたマトリックスに置き換えます。現在のマトリックスを変更せずにマトリックスを反転するには、<codeph>clone()</codeph> メソッドを使用して現在のマトリックスをコピーした後、<codeph>invert()</codeph> メソッドをコピーに適用します。</p>
    
    <p>Matrix3D オブジェクトは反転可能である必要があります。</p> 
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/determinant"><linktext>determinant</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:pointAt"><apiName>pointAt</apiName><shortdesc>
    表示オブジェクトが指定された位置を向くように回転します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pos</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>ターゲットオブジェクトのワールドを基準とする位置です。ワールド基準により、すべてのオブジェクトが配置されるワールド空間と座標を基準とするオブジェクトの変換が定義されます。
    
    </apiDesc></apiParam><apiParam><apiItemName>at</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiData>null</apiData><apiDesc>表示オブジェクトの位置を定義する、オブジェクトを基準とするベクターです。オブジェクト基準により、オブジェクト空間、つまりオブジェクトの参照フレームと座標系を基準とするオブジェクトの変換が定義されます。デフォルト値は <i>-z</i> 軸（0,0,-1）です。
    
    </apiDesc></apiParam><apiParam><apiItemName>up</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiData>null</apiData><apiDesc>表示オブジェクトの「上方向」を定義する、オブジェクトを基準とするベクターです。オブジェクトを見下ろして描画する場合、<i>+z</i> 軸は「上方向」へのベクトルになります。オブジェクト基準により、オブジェクト空間、つまりオブジェクトの参照フレームと座標系を基準とするオブジェクトの変換が定義されます。デフォルト値は <i>-y</i> 軸（0,-1,0）です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    表示オブジェクトが指定された位置を向くように回転します。このメソッドにより、方向をその場で変更できます。表示オブジェクトの前方ベクトル（<codeph>at</codeph> Vector3D オブジェクト）は、指定されたワールドを基準とする位置を指します。表示オブジェクトの上方向は、<codeph>up</codeph> Vector3D オブジェクトで指定されます。 
    
    <p><codeph>pointAt()</codeph> メソッドは、表示オブジェクトのキャッシュされた回転プロパティ値を無効化します。このメソッドは表示オブジェクトのマトリックスを分解し、オブジェクトが指定された位置を向くように回転エレメントを変更します。次に、変換を実行する表示オブジェクトのマトリックスを再構成（更新）します。オブジェクトが移動するターゲット（移動するオブジェクトの位置など）を指している場合、後続の呼び出しのたびに、メソッドは移動するターゲットの方にオブジェクトを回転させます。</p>
    
    </apiDesc><example conref="examples\PointAtExample.as"> この例では、三角形は楕円の移動のパスを指して追随します。楕円と三角形は異なる場所に設定されます。その後、楕円はステージの隅に向かって上に移動します。三角形は平行移動する楕円に追随します。三角形のシェイプと <codeph>pointAt()</codeph> の「at」および「up」パラメーターを変更すると、三角形の移動への影響を確認できます。
<codeblock>
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.display.Graphics;
    import flash.geom.*;
    import flash.events.Event;

    public class PointAtExample extends MovieClip {
        private var ellipse:Shape = new Shape();
        private var triangle:Shape = new Shape();

        public function PointAtExample():void {
            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(30, 40, 50, 40);
            ellipse.graphics.endFill();
            ellipse.x = 100;
            ellipse.y = 150;
            ellipse.z = 1;

            triangle.graphics.beginFill(0x0000FF);
            triangle.graphics.moveTo(0, 0);
            triangle.graphics.lineTo(40, 40);
            triangle.graphics.lineTo(80, 0);
            triangle.graphics.lineTo(0, 0);
            triangle.graphics.endFill();
            triangle.x = 200;
            triangle.y = 50;
            triangle.z = 1;

            addChild(ellipse);
            addChild(triangle);

            ellipse.addEventListener(Event.ENTER_FRAME, ellipseEnterFrameHandler);
            triangle.addEventListener(Event.ENTER_FRAME, triangleEnterFrameHandler);
        }

        private function ellipseEnterFrameHandler(e:Event) {
            if(e.target.y > 0) {
                e.target.y -= 1;
                e.target.x -= 1;
            }
        }
        
        private function triangleEnterFrameHandler(e:Event) {
            e.target.transform.matrix3D.pointAt(ellipse.transform.matrix3D.position,
                                                Vector3D.X_AXIS, Vector3D.Y_AXIS);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Utils3D/pointTowards()"><linktext>flash.geom.Utils3D.pointTowards()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prepend"><apiName>prepend</apiName><shortdesc>
    現在の Matrix3D オブジェクトに別の Matrix3D オブジェクトを乗算して、マトリックスの先頭に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rhs</apiItemName><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier><apiDesc>現在の Matrix3D が乗算されるマトリックスの右側です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    現在の Matrix3D オブジェクトに別の Matrix3D オブジェクトを乗算して、マトリックスの先頭に追加します。結果により、両方のマトリックス変換が結合されます。 
    
    <p>マトリックスの乗算は、マトリックスの加算とは異なります。マトリックスの乗算は可換ではありません。つまり、A の B 倍は B の A 倍ではありません。<codeph>prepend()</codeph> メソッドを使用すると、乗算は右側から行われます。つまり、<codeph>rhs</codeph> Matrix3D オブジェクトは乗算演算子の右側にあります。</p>
    
    <codeph>thisMatrix = thisMatrix ~~ rhs</codeph>
      
    <p><codeph>prepend()</codeph> メソッドによる変更は、オブジェクト空間を基準としています。つまり、常にオブジェクトの最初の参照フレームを基準とします。</p>
    
    <p><codeph>prepend()</codeph> メソッドは、現在のマトリックスを先頭に追加されたマトリックスに置き換えます。現在のマトリックスを変更せずに 2 つのマトリックスを先頭に追加するには、<codeph>clone()</codeph> メソッドを使用して現在のマトリックスをコピーした後、<codeph>prepend()</codeph> メソッドをコピーに適用します。</p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/append()"><linktext>append()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prependRotation"><apiName>prependRotation</apiName><shortdesc>
    Matrix3D オブジェクトの先頭にインクリメンタルな回転を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>degrees</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>回転の角度です。
    </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>回転の軸または方向です。通常の軸は、<codeph>X_AXIS</codeph>（<codeph>Vector3D(1,0,0)</codeph>）、<codeph>Y_AXIS</codeph>（<codeph>Vector3D(0,1,0)</codeph>）および <codeph>Z_AXIS</codeph>（<codeph>Vector3D(0,0,1)</codeph>）です。 
    </apiDesc></apiParam><apiParam><apiItemName>pivotPoint</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiData>null</apiData><apiDesc>回転の中心を決定するポイントです。オブジェクトのデフォルトの回転軸は基準点です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    Matrix3D オブジェクトの先頭にインクリメンタルな回転を追加します。Matrix3D オブジェクトが表示オブジェクトに適用されると、マトリックスは Matrix3D オブジェクトの他の変換の前に回転を実行します。 
    
    <p>表示オブジェクトの回転は、軸、軸を中心とした回転の増分角度、およびオブジェクトの回転の中心となるオプションの回転軸によって定義されます。軸は通常の方向になります。一般的な軸は、<codeph>X_AXIS</codeph>（<codeph>Vector3D(1,0,0)</codeph>）、<codeph>Y_AXIS</codeph>（<codeph>Vector3D(0,1,0)</codeph>）および <codeph>Z_AXIS</codeph>（<codeph>Vector3D(0,0,1)</codeph>）です。航空用語では、y 軸を中心とした回転は偏揺れと呼ばれます。x 軸を中心とした回転は縦揺れと呼ばれます。z 軸を中心とした回転は横揺れと呼ばれます。</p> 
    
    <p>変換の順序は重要です。回転に続いて平行移動変換を行うと、平行移動に続いて回転を行う場合とは異なる結果になります。</p>
    
    <p>回転結果は絶対的ではありません。結果はオブジェクト基準です。つまり、元の位置と方向の参照フレームを基準とします。変換の絶対変更を行うには、<codeph>recompose()</codeph> メソッドを使用します。</p>
    
    <p><codeph>prependRotation()</codeph> メソッドの変換が表示オブジェクトの Matrix3D オブジェクトに適用されると、表示オブジェクトのキャッシュされた回転プロパティ値が無効化されます。</p> 
    
    <p>表示オブジェクトをその位置を基準として特定のポイントを中心に回転させるには、オブジェクトの平行移動を指定されたポイントに設定し、<codeph>prependRotation()</codeph> メソッドを使用してオブジェクトを回転させ、オブジェクトを元の位置に戻すという方法があります。次の例では、<codeph>myObject</codeph> 3D 表示オブジェクトは、座標（10,10,0）を中心として y 軸を回転します。</p>
    
    <codeblock rev="3.0">
    
    myObject.z = 1; 
    myObject.transform.matrix3D.prependTranslation(10,10,0);
    myObject.transform.matrix3D.prependRotation(1, Vector3D.Y_AXIS);
    myObject.transform.matrix3D.prependTranslation(-10,-10,0);
     
    </codeblock>
    
    </apiDesc><example conref="examples\Matrix3DprependRotationExample.as"> この例では、ユーザーはマウスを移動して、楕円を <i>x</i> 軸と <i>y</i> 軸を中心として回転させることができます。楕円は、中央の基準点に合わせて描画されます。楕円は、<i>y</i> 軸を中心として、マウスの <i>x</i> 座標を使用して回転します。楕円は、<i>x</i> 軸を中心として、マウスの <i>y</i> 座標を使用して回転します。
 
<codeblock>
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.geom.*;
    import flash.events.MouseEvent;
    
    public class Matrix3DprependRotationExample extends MovieClip {
        private var ellipse:Shape = new Shape();

        public function Matrix3DprependRotationExample():void {

            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(-50, -40, 100, 80);
            ellipse.graphics.endFill();

            ellipse.x = (this.stage.stageWidth / 2);
            ellipse.y = (this.stage.stageHeight / 2);
            ellipse.z = 1;
            
            addChild(ellipse);

            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function mouseMoveHandler(e:MouseEvent):void {
            var y:int;
            var x:int;
            
            if(e.localX > ellipse.x) {
                y = (Math.round(e.localX) / 100);   
            } else {
                y = -(Math.round(e.localX) / 10);   
            }
            
            if(e.localY > ellipse.y) {
                x = (Math.round(e.localY) / 100);
            } else {
                x = -(Math.round(e.localY) / 100);
            }
            
            ellipse.transform.matrix3D.prependRotation(y, Vector3D.Y_AXIS);
            ellipse.transform.matrix3D.prependRotation(x, Vector3D.X_AXIS);
        }
        
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/appendRotation()"><linktext>appendRotation()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prependScale"><apiName>prependScale</apiName><shortdesc>
    x 軸、y 軸、z 軸上のインクリメンタルな拡大 / 縮小の変更を Matrix3D オブジェクトの先頭に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを x 軸方向に拡大 / 縮小するために使用される乗数です。
    </apiDesc></apiParam><apiParam><apiItemName>yScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを y 軸方向に拡大 / 縮小するために使用される乗数です。
    </apiDesc></apiParam><apiParam><apiItemName>zScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを z 軸方向に拡大 / 縮小するために使用される乗数です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    x 軸、y 軸、z 軸上のインクリメンタルな拡大 / 縮小の変更を Matrix3D オブジェクトの先頭に追加します。Matrix3D オブジェクトが表示オブジェクトに適用されると、マトリックスは Matrix3D オブジェクトの他の変換の前に拡大 / 縮小の変更を行います。変更はオブジェクト基準です。つまり、元の位置と方向の参照フレームを基準とします。デフォルトの拡大 / 縮小率は（1.0, 1.0, 1.0）です。
    
    <p>拡大 / 縮小は、3 つの軸（x,y,z）上の 3 つの増分変更のセットとして定義されます。各軸に異なる数値を乗算できます。拡大 / 縮小の変更が表示オブジェクトに適用されると、オブジェクトのサイズが増加または減少します。例えば、x、y、および z の各軸を 2 に設定するとオブジェクトのサイズが 2 倍になり、軸を <codeph>0.5</codeph> に設定するとサイズが半分になります。拡大 / 縮小の変換が特定の軸のみに影響するようにするには、他のパラメーターを 1 に設定します。パラメーター 1 は、特定の軸に沿った拡大 / 縮小の変更は行われないことを意味します。</p>
    
    <p><codeph>prependScale()</codeph> メソッドは、サイズ変更と歪みの処理の両方に使用できます。例えば、表示オブジェクトの拡大や縮小などです。ある位置でのズームインやズームアウトにも使用できます。拡大 / 縮小変換は、表示オブジェクトの回転および平行移動中に自動的に実行されます。</p>
    
    <p>変換の順序は重要です。サイズ変更に続いて平行移動変換を行うと、平行移動に続いてサイズ変更変換を行う場合とは異なる結果になります。</p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/appendScale()"><linktext>appendScale()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prependTranslation"><apiName>prependTranslation</apiName><shortdesc>
    x 軸、y 軸、z 軸上のインクリメンタルな位置の変更を Matrix3D オブジェクトの先頭に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>x 軸上のインクリメンタルな位置の変更です。
    </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>y 軸上のインクリメンタルな位置の変更です。
    </apiDesc></apiParam><apiParam><apiItemName>z</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>z 軸上のインクリメンタルな位置の変更です。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    x 軸、y 軸、z 軸上のインクリメンタルな位置の変更を Matrix3D オブジェクトの先頭に追加します。Matrix3D オブジェクトが表示オブジェクトに適用されると、マトリックスは Matrix3D オブジェクトの他の変換の前に平行移動の変更を行います。 
       
    <p>平行移動は、表示オブジェクトが現在の位置から x 軸、y 軸、および z 軸に沿って移動する距離を指定します。<codeph>prependTranslation()</codeph> メソッドは、3 つの軸（x,y,z）上の 3 つの増分変更のセットとして平行移動を設定します。平行移動の変更が特定の軸のみに影響するようにするには、他のパラメーターを 0 に設定します。パラメーター 0 は、特定の軸に沿った変更が行われないことを意味します。</p>
    
    <p>平行移動の変更は絶対的ではありません。結果はオブジェクト基準です。つまり、元の位置と方向の参照フレームを基準とします。変換マトリックスの絶対変更を行うには、<codeph>recompose()</codeph> メソッドを使用します。変換の順序も重要です。平行移動に続いて回転変換を行うと、回転に続いて平行移動変換を行う場合とは異なる結果になります。<codeph>prependTranslation()</codeph> を使用すると、表示オブジェクトは他の変換に関係なく向いている方向に移動し続けます。例えば、表示オブジェクトが正の x 軸の方を向いている場合、オブジェクトがどのように回転されたかに関係なく、<codeph>prependTranslation()</codeph> メソッドで指定された方向に移動し続けます。平行移動の変更が他の変換の後に行われるようにするには、<codeph>appendTranslation()</codeph> メソッドを使用します。</p> 
    
    
    </apiDesc><example conref="examples\Matrix3DprependTranslationExample.as"> この例では、ユーザーはマウスを使用して楕円をステージの <i>y</i> 軸の上方に向かって動かすことができます。ユーザーがマウスを楕円に合わせると、楕円は <i>y</i> 軸を 10 座標上に移動します。マウスを楕円から移動すると、楕円が上端まで到達していない場合、楕円は再び <i>y</i> 軸を 10 座標上に移動します。楕円は上端に到達すると、ステージの下部に戻ります。
<codeblock>
package {
    import flash.display.MovieClip;
    import flash.display.Sprite;
    import flash.geom.*;
    import flash.events.MouseEvent;

    public class Matrix3DprependTranslationExample extends MovieClip {
        private var ellipse:Sprite = new Sprite();

        public function Matrix3DprependTranslationExample():void {
            ellipse.x = this.stage.stageWidth / 2;
            ellipse.y = this.stage.stageHeight - 100;
            ellipse.z = 1;
            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(0, 0, 60, 50);
            ellipse.graphics.endFill();
            addChild(ellipse);

            ellipse.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
            ellipse.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        }

        private function mouseOverHandler(e:MouseEvent):void {
            if(ellipse.y > 0) { 
                ellipse.transform.matrix3D.prependTranslation(0, -10, 0);
            } 
        }
        
        private function mouseOutHandler(e:MouseEvent):void {
            if(ellipse.y > 0) { 
                ellipse.transform.matrix3D.prependTranslation(0, -10, 0);
            } else {
                ellipse.transform.matrix3D.prependTranslation(0, 
                                     (this.stage.stageHeight - 100), 0);
            }   
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/appendTranslation()"><linktext>appendTranslation()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:recompose"><apiName>recompose</apiName><shortdesc>
    変換マトリックスの平行移動、回転、および拡大 / 縮小を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>拡大 / 縮小エレメントのいずれかが 0 の場合は、<codeph>false</codeph> を返します。
    
    </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>components</apiItemName><apiType value="Vector$flash.geom:Vector3D"/><apiDesc>Matrix3D オブジェクトの平行移動、回転、および拡大 / 縮小の各要素を置き換える 3 つの Vector3D オブジェクトのベクターです。 
    
    </apiDesc></apiParam><apiParam><apiItemName>orientationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>eulerAngles</apiData><apiDesc>マトリックス変換に使用される方向スタイルを決定するオプションパラメーターです。方向スタイルには、<codeph>eulerAngles</codeph>（定数 <codeph>EULER_ANGLES</codeph>）、<codeph>axisAngle</codeph>（定数 <codeph>AXIS_ANGLE</codeph>）および <codeph>quaternion</codeph>（定数 <codeph>QUATERNION</codeph>）の 3 種類があります。様々な方向スタイルの詳細については、<codeph>geom.Orientation3D</codeph> クラスを参照してください。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    変換マトリックスの平行移動、回転、および拡大 / 縮小を設定します。表示オブジェクトの回転プロパティまたは Matrix3D オブジェクトの回転メソッドによって行われる増分変化とは異なり、<codeph>recompose()</codeph> メソッドは絶対変化です。<codeph>recompose()</codeph> メソッドは、マトリックスの変換を上書きします。
    
    <p>絶対親参照フレームを使用してマトリックスの変換を変更するには、<codeph>decompose()</codeph> メソッドを使用して設定を取得し、適切な変更を行います。次に、<codeph>recompose()</codeph> メソッドを使用して、Matrix3D オブジェクトを変更された変換に設定します。</p>
    
    <p><codeph>recompose()</codeph> メソッドのパラメーターは、変換に使用された方向スタイルを指定します。デフォルトの方向は <codeph>eulerAngles</codeph> です。これは、各軸に異なる 3 つの回転角度を使用して方向を定義します。回転は連続して行われ、それぞれの軸は変更されません。表示オブジェクトの軸回転プロパティは、Euler 角度方向スタイル変換を実行します。その他の方向スタイルオプションは、<codeph>axisAngle</codeph> と <codeph>quaternion</codeph> です。軸角度方向は、軸と角度の組み合わせを使用して方向を決定します。オブジェクトの回転の中心となる軸は、方向を表す単位ベクトルです。角度は、ベクトルに関する回転の大きさを表します。方向は表示オブジェクトの向きも決定し、角度はどちらが上かを決定します。<codeph>appendRotation()</codeph> メソッドと <codeph>prependRotation()</codeph> メソッドは、軸角度方向を使用します。四元数方向は、複素数とベクターの 4 番目のエレメントを使用します。方向は、3 つの回転軸（x,y,z）と 1 つの回転角度（w）で表されます。<codeph>interpolate()</codeph> メソッドは四元数を使用します。</p> 
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Orientation3D"><linktext>flash.geom.Orientation3D</linktext></link><link href="flash.geom.xml#Matrix3D/decompose()"><linktext>decompose()</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:transformVector"><apiName>transformVector</apiName><shortdesc>
    変換マトリックスを使用して、Vector3D オブジェクトをある空間座標から別の空間座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された座標を持つ Vector3D オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>flash.geom:Vector3D</apiOperationClassifier><apiDesc>変換される座標を保持する Vector3D オブジェクトです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    変換マトリックスを使用して、Vector3D オブジェクトをある空間座標から別の空間座標に変換します。返された Vector3D オブジェクトは、変換後の新しい座標を保持します。平行移動を含むすべてのマトリックス変換が Vector3D オブジェクトに適用されます。
    
    <p><codeph>transformVector()</codeph> メソッドの結果が表示オブジェクトの位置に適用されると、表示オブジェクトの位置のみが変更されます。表示オブジェクトの回転エレメントおよび拡大 / 縮小エレメントは同じ状態のままです。</p> 
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/transformVectors()"><linktext>transformVectors()</linktext></link><link href="flash.geom.xml#Matrix3D/deltaTransformVector()"><linktext>deltaTransformVector()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:transformVectors"><apiName>transformVectors</apiName><shortdesc>
    変換マトリックスを使用して、数値のベクターをある空間座標から別の空間座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>vin</apiItemName><apiType value="Vector$Number"/><apiDesc>数値のベクターでは、3 つの数値ごとに、変換される 3D 座標（x,y,z）を表します。
    </apiDesc></apiParam><apiParam><apiItemName>vout</apiItemName><apiType value="Vector$Number"/><apiDesc>数値のベクターでは、3 つの数値ごとに、変換された 3D 座標（x,y,z）を表します。
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    変換マトリックスを使用して、数値のベクターをある空間座標から別の空間座標に変換します。<codeph>tranformVectors()</codeph> メソッドは、<codeph>vin</codeph> Vector オブジェクトの 3 つの数値ごとに数値を 3D 座標（x,y,z）として読み取り、変換された 3D 座標を <codeph>vout</codeph> Vector オブジェクトに配置します。平行移動を含むすべてのマトリックス変換が <codeph>vin</codeph> Vector オブジェクトに適用されます。<codeph>transformVectors()</codeph> メソッドを使用すると、3D オブジェクトをメッシュとして描画および変換できます。メッシュとは、オブジェクトのシェイプを定義する頂点のコレクションです。
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D/transformVector()"><linktext>transformVector()</linktext></link><link href="flash.geom.xml#Matrix3D/deltaTransformVector()"><linktext>deltaTransformVector()</linktext></link><link href="#Vector"><linktext>Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:transpose"><apiName>transpose</apiName><shortdesc>
    現在の Matrix3D オブジェクトを、行と列が入れ替わったマトリックスに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
    現在の Matrix3D オブジェクトを、行と列が入れ替わったマトリックスに変換します。例えば、現在の Matrix3D オブジェクトの <codeph>rawData</codeph> に <codeph>1,2,3,4,11,12,13,14,21,22,23,24,31,32,33,34</codeph> という 16 の数値が含まれる場合、<codeph>transpose()</codeph> メソッドは 4 つのエレメントごとに 1 行として読み取り、行を列に変換します。結果は、<codeph>rawData</codeph> が <codeph>1,11,21,31,2,12,22,32,3,13,23,33,4,14,24,34</codeph> のマトリックスになります。 
    
    <p><codeph>transpose()</codeph> メソッドは、現在のマトリックスを転置されたマトリックスに置き換えます。現在のマトリックスを変更せずにマトリックスを転置するには、<codeph>clone()</codeph> メソッドを使用して現在のマトリックスをコピーした後、<codeph>transpose()</codeph> メソッドをコピーに適用します。</p>
    
    <p>直交マトリックスとは、転置が反転と等しい正方マトリックスです。</p> 
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Matrix3D:determinant:get"><apiName>determinant</apiName><shortdesc>
    マトリックスが反転可能かどうかを決定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    マトリックスが反転可能かどうかを決定する数値です。 
    
    <p>Matrix3D オブジェクトは反転可能である必要があります。<codeph>determinant</codeph> プロパティを使用すると、Matrix3D オブジェクトが反転可能かどうかを確認できます。determinant が 0 の場合、マトリックスの反転は存在しません。例えば、マトリックスの行または列全体が 0 か、2 つの行または列が同じ場合、determinant は 0 になります。determinant は一連の式の解決にも使用されます。</p> 
    
    <p>Matrix3D クラスのように、determinant を持つのは正方マトリックスのみです。</p>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Matrix3D/invert()"><linktext>invert()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Matrix3D:position:set"><apiName>position</apiName><shortdesc>
    変換の参照フレーム内に、表示オブジェクトの位置、つまり 3D 座標（x,y,z）を保持する Vector3D オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc>
    変換の参照フレーム内に、表示オブジェクトの位置、つまり 3D 座標（x,y,z）を保持する Vector3D オブジェクトです。<codeph>position</codeph> プロパティでは、マトリックスを分解して再構成しなくても、表示オブジェクトのマトリックスの変換ベクターにすばやくアクセスできます。 
    
    <p><codeph>position</codeph> プロパティを使用すると、変換マトリックスの変換エレメントを取得および設定できます。</p>
    
    
    </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.geom.xml#position/appendTranslation()"><linktext>appendTranslation()</linktext></link><link href="" invalidHref="flash.geom.xml#position/prependTranslation()"><linktext>prependTranslation()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Matrix3D:rawData:get"><apiName>rawData</apiName><shortdesc>
    数値の数が 16 のベクターです。4 つのエレメントごとに 4 × 4 マトリックスの 1 行または 1 列になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
    数値の数が 16 のベクターです。4 つのエレメントごとに 4 × 4 マトリックスの 1 行または 1 列になります。 
    
    <p><codeph>rawData</codeph> プロパティが反転できないマトリックスに設定されている場合、例外がスローされます。Matrix3D オブジェクトは反転可能である必要があります。反転できないマトリックスが必要な場合は、Matrix3D オブジェクトのサブクラスを作成します。</p>
    
    </apiDesc></apiValueDetail><related-links><link href="#Vector"><linktext>Vector</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.geom:Transform"><apiName>Transform</apiName><shortdesc>
 Transform クラスは、表示オブジェクトに適用されるカラー調整プロパティと 2 次元または 3 次元の変換オブジェクトへのアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>表示オブジェクトに適用されるカラーと 2 次元または 3 次元の変換オブジェクトおよびマトリックスへのアクセスを提供します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Transform クラスは、表示オブジェクトに適用されるカラー調整プロパティと 2 次元または 3 次元の変換オブジェクトへのアクセスを提供します。変換時に、表示オブジェクトのカラーまたは方向と位置が、現在の値または座標から新しい値または座標に調整（オフセット）されます。Transform クラスは、表示オブジェクトおよびすべての親オブジェクトに適用されるカラー変換と 2 次元マトリックス変換に関するデータも収集します。<codeph>concatenatedColorTransform</codeph> プロパティと <codeph>concatenatedMatrix</codeph> プロパティを使用して、これらの結合された変換にアクセスできます。
 
 <p>カラー変換を適用するには、ColorTransform オブジェクトを作成し、オブジェクトのメソッドとプロパティを使用してカラー調整を設定した後、<codeph>colorTransformation</codeph> プロパティ（表示オブジェクトの <codeph>transform</codeph> プロパティの）を新しい ColorTransformation オブジェクトに割り当てます。</p>
 
 <p>2 次元変換を適用するには、Matrix オブジェクトを作成し、マトリックスの 2 次元変換を設定した後、表示オブジェクトの <codeph>transform.matrix</codeph> プロパティを新しい Matrix オブジェクトに割り当てます。</p>
 
 <p>3 次元変換の適用は、3 次元表示オブジェクトで開始します。3 次元表示オブジェクトには、0 以外の <codeph>z</codeph> プロパティ値が設定されます。Matrix3D オブジェクトを作成する必要はありません。すべての 3 次元オブジェクトについて、<codeph>z</codeph> 値を表示オブジェクトに割り当てたときに Matrix3D オブジェクトが自動的に作成されます。表示オブジェクトの <codeph>transform</codeph> プロパティを使用して、表示オブジェクトの Matrix3D オブジェクトにアクセスできます。Matrix3D クラスのメソッドを使用して、既存の変換設定に対する追加または変更を実施できます。カスタム Matrix3D オブジェクトを作成し、カスタム Matrix3D オブジェクトの変換エレメントを設定した後、<codeph>transform.matrix</codeph> プロパティを使用して、新しい Matrix3D オブジェクトを表示オブジェクトに割り当てることもできます。</p>
 
 <p>ステージまたはルートオブジェクトの遠近法に基づく投影を変更するには、ルート表示オブジェクトの <codeph>transform.matrix</codeph> プロパティを使用して、PerspectiveProjection オブジェクトへのアクセスを取得します。 または、表示オブジェクトの親の遠近法に基づく投影プロパティを設定することで、別の遠近法に基づく投影プロパティを表示オブジェクトに適用します。子表示オブジェクトは、新しいプロパティを継承します。具体的には、PerspectiveProjection オブジェクトを作成してプロパティを設定した後、PerspectiveProjection オブジェクトを <codeph>perspectiveProjection</codeph> プロパティ（親表示オブジェクトの <codeph>transform</codeph> プロパティの）に割り当てます。次に、指定された投影変換をすべての表示オブジェクトの 3 次元の子に適用します。</p>
 
 <p>PerspectiveProjection オブジェクトと Matrix3D オブジェクトはどちらも遠近法に基づく変形を実行するため、両方を同時に表示オブジェクトに割り当てないでください。焦点の長さと投影の中心を変更するには、PerspectiveProjection オブジェクトを使用します。遠近法に基づく変換をより正確に制御するには、遠近法に基づく投影の Matrix3D オブジェクトを作成します。</p>
 
 
 </apiDesc><example conref="examples\TransformExample.as"> 次の例では、TransformExample クラスを使用して、グラデーションのパターンで塗りつぶされた正方形のスプライトの下側を傾斜させます。 ユーザーが正方形をクリックするたびに、次の手順でスプライトを傾斜させて変形させます。
 
 <ol>
  <li><codeph>TransformExample()</codeph> コンストラクターが新しい Sprite オブジェクト <codeph>target</codeph> を作成します。</li>
 
  <li><codeph>TransformExample()</codeph> コンストラクターは <codeph>draw()</codeph> メソッドを呼び出します。このメソッドは、グラデーションの四角形をスプライトに描画します。</li>
 
  <li><codeph>TransformExample()</codeph> コンストラクターはスプライトに click イベントリスナーを追加します。これは <codeph>clickHandler()</codeph> メソッドによって処理されます。 </li>
 
     <li><codeph>clickHandler()</codeph> メソッドは、新しい Matrix オブジェクト <codeph>skewMatrix</codeph> を作成し、傾斜効果を適用します。もう 1 つの行列 <codeph>tempMatrix</codeph> は、スプライトの現在の変換行列に割り当てられ、<codeph>skewMatrix</codeph> と <codeph>concat()</codeph> メソッドによって結合されます。この行列は正方形のスプライトの <codeph>transform.matrix</codeph> プロパティに割り当てられます。ユーザーが正方形をクリックするたびに <codeph>clickHandler()</codeph> を呼び出して、正方形のシェイプを傾斜させて変更します。  </li>
  <li>また、<codeph>clickHandler()</codeph> メソッドは、新しい ColorTransform オブジェクトを作成します。 新しい ColorTransform オブジェクトの <codeph>redOffset</codeph> プロパティは redOffset の現在の値に設定され、25 ずつ増加します。同様に、<codeph>blueOffset</codeph> プロパティは 25 ずつ減少します。クリックするたびに、スプライトのカラーが変化します。 </li>
  </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.GradientType;
    import flash.geom.Matrix;
    import flash.geom.ColorTransform;
    import flash.events.MouseEvent;

    public class TransformExample extends Sprite {
        public function TransformExample() { 
            var target:Sprite = new Sprite();
            draw(target);
            addChild(target);
            target.useHandCursor = true;
            target.buttonMode = true;
            target.addEventListener(MouseEvent.CLICK, clickHandler)
        }
        public function draw(sprite:Sprite):void {
            var red:uint = 0xFF0000;
            var green:uint = 0x00FF00;
            var blue:uint = 0x0000FF;
            var size:Number = 100;
            sprite.graphics.beginGradientFill(GradientType.LINEAR, [red, blue, green], [1, 0.5, 1], [0, 200, 255]);
            sprite.graphics.drawRect(0, 0, 100, 100);
        }
        public function clickHandler(event:MouseEvent):void {
            var skewMatrix:Matrix = new Matrix();
            skewMatrix.c = 0.25;
            var tempMatrix:Matrix = this.transform.matrix;
            tempMatrix.concat(skewMatrix);
            this.transform.matrix = tempMatrix;
            
            var rOffset:Number = this.transform.colorTransform.redOffset + 25;
            var bOffset:Number = this.transform.colorTransform.blueOffset - 25;
            this.transform.colorTransform = new ColorTransform(1, 1, 1, 1, rOffset, 0, bOffset, 0);            
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/transform"><linktext>flash.display.DisplayObject.transform</linktext></link><link href="flash.geom.xml#ColorTransform"><linktext>flash.geom.ColorTransform</linktext></link><link href="flash.geom.xml#Matrix"><linktext>flash.geom.Matrix</linktext></link><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#PerspectiveProjection"><linktext>flash.geom.PerspectiveProjection</linktext></link></related-links><apiOperation id="flash.geom:Transform:getRelativeMatrix3D"><apiName>getRelativeMatrix3D</apiName><shortdesc>
     Matrix3D オブジェクトを返します。Matrix3D オブジェクトは、現在の表示オブジェクトの空間を基準にして、指定された表示オブジェクトの空間を変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>空間を <codeph>relativeTo</codeph> 表示オブジェクトから現在の表示オブジェクト空間に変換するために使用できる Matrix3D オブジェクトです。
     
     </apiDesc><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeTo</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiDesc>変換の基準になる表示オブジェクトです。ステージを基準にした Matrix3D オブジェクトを取得するには、パラメーターを <codeph>root</codeph> オブジェクトまたは <codeph>stage</codeph> オブジェクトに設定します。表示オブジェクトのワールドを基準とするマトリックスを取得するには、パラメーターを遠近法に基づく変形が適用された表示オブジェクトに設定します。
         
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Matrix3D オブジェクトを返します。Matrix3D オブジェクトは、現在の表示オブジェクトの空間を基準にして、指定された表示オブジェクトの空間を変換します。<codeph>getRelativeMatrix3D()</codeph> メソッドを使用すると、ある 3 次元表示オブジェクトを基準にして別の 3 次元表示オブジェクトを移動できます。 
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link></related-links></apiOperation><apiValue id="flash.geom:Transform:colorTransform:get"><apiName>colorTransform</apiName><shortdesc>
     表示オブジェクトのカラーを全体的に調整する値を格納している ColorTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example applies the ColorTransform object <code>blueColorTransform</code> to 
    the Transform object <code>trans</code>.  This ColorTransform converts the color of the MovieClip 
    <code>rect</code> from red to blue.
    <listing version="2.0">
    import flash.geom.Transform;
    import flash.geom.ColorTransform;
    
    var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
    
    var trans:Transform = new Transform(rect);
    trace(trans.colorTransform);          
    // (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=0, alphaOffset=0)
    
    var blueColorTransform:ColorTransform = new ColorTransform(0, 1, 1, 1, 0, 0, 255, 0);
    
    parentTrans.colorTransform = blueColorTransform;
    trace(trans.colorTransform);          
    // (redMultiplier=0, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=255, alphaOffset=0)
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:ColorTransform</apiValueClassifier><apiException><apiDesc>ColorTransform は、設定時に null に設定されます。
     
    </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     表示オブジェクトのカラーを全体的に調整する値を格納している ColorTransform オブジェクトです。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#ColorTransform"><linktext>flash.geom.ColorTransform</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:concatenatedColorTransform:get"><apiName>concatenatedColorTransform</apiName><shortdesc>
     この表示オブジェクトおよびルートレベルまでのすべての親オブジェクトに適用される、結合されたカラー変換を表す ColorTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example applies two Transform objects to both a parent and child MovieClip.
    A <code>blueColorTransform</code> is then applied to the Transform object <code>parentTrans</code> which
    adjusts the color of both parent and child MovieClips towards blue.  Notice how <code>child.concatenatedColorTransform</code> is the
    combination of <code>parentTrans</code> and <code>childTrans</code>. 
    <listing version="2.0">
    import flash.geom.Transform;
    import flash.geom.ColorTransform;
    
    var parentRect:MovieClip = createRectangle(20, 80, 0xFF0000);
    var childRect:MovieClip = createRectangle(10, 40, 0x00FF00, parentRect);
    
    var parentTrans:Transform = new Transform(parentRect);
    var childTrans:Transform = new Transform(childRect);
    
    var blueColorTransform:ColorTransform = new ColorTransform(0, 1, 1, 1, 0, 0, 255, 0);
    
    parentTrans.colorTransform = blueColorTransform;
    
    trace(childTrans.concatenatedColorTransform);     
    // (redMultiplier=0, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=255, alphaOffset=0)
    trace(childTrans.colorTransform);                 
    // (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=0, alphaOffset=0)
    trace(parentTrans.concatenatedColorTransform);    
    // (redMultiplier=0, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=255, alphaOffset=0)
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:ColorTransform</apiValueClassifier></apiValueDef><apiDesc>
     この表示オブジェクトおよびルートレベルまでのすべての親オブジェクトに適用される、結合されたカラー変換を表す ColorTransform オブジェクトです。異なるレベルで異なるカラー変換を適用した場合、すべての変換が連結されて、このプロパティ用の 1 つの ColorTransform オブジェクトになります。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#ColorTransform"><linktext>flash.geom.ColorTransform</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:concatenatedMatrix:get"><apiName>concatenatedMatrix</apiName><shortdesc>
     この表示オブジェクトおよびルートレベルまでのそのすべての親オブジェクトの結合された変換行列を表す Matrix オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example applies two Transform objects to a parent movie clip and to a child movie clip.
    A <code>scaleMatrix</code> is then applied to the Transform object <code>parentTrans</code> which
    scales both parent and child MovieClips.  Notice how <code>child.concatenatedMatrix</code> is the
    combination of <code>parentTrans</code> and <code>childTrans</code>. 
    
    <listing version="2.0">
    import flash.geom.Transform;
    import flash.geom.Matrix;
    
    var parentRect:MovieClip = createRectangle(20, 80, 0xFF0000);
    var childRect:MovieClip = createRectangle(10, 40, 0x00FF00, parentRect);
    
    var parentTrans:Transform = new Transform(parentRect);
    var childTrans:Transform = new Transform(childRect);
    
    var scaleMatrix:Matrix = new Matrix();
    scaleMatrix.scale(2, 2);
    
    parentTrans.matrix = scaleMatrix;
    
    trace(childTrans.concatenatedMatrix);     // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(childTrans.matrix);                 // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    trace(parentTrans.concatenatedMatrix);    // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Matrix</apiValueClassifier></apiValueDef><apiDesc>
     この表示オブジェクトおよびルートレベルまでのそのすべての親オブジェクトの結合された変換行列を表す Matrix オブジェクトです。異なるレベルで異なる変換マトリックスを適用した場合、すべてのマトリックスが連結されて、このプロパティ用の 1 つのマトリックスになります。 また、ブラウザーで実行されるサイズ変更可能な SWF コンテンツの場合、このプロパティでは、ウィンドウのサイズ変更に伴って生じるステージ座標とウィンドウ座標との差異が考慮されます。このため、このプロパティは、ローカル座標をウィンドウ座標に変換しますが、そのウィンドウ座標はステージの座標空間とは異なる場合があります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Transform:matrix:get"><apiName>matrix</apiName><shortdesc>
     表示オブジェクトの拡大 / 縮小、回転、および変換を変更する値を格納している Matrix オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example applies the Matrix object <code>scaleMatrix</code> to the Transform
     object <code>trans</code>.  This Matrix scales the MovieClip <code>rect</code> by a factor of two.
     <listing version="2.0">
     import flash.geom.Transform;
     import flash.geom.Matrix;
     
     var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
     
     var trans:Transform = new Transform(rect);
     trace(trans.matrix);         // (a=1, b=0, c=0, d=1, tx=0, ty=0)
          
     var scaleMatrix:Matrix = new Matrix();
     scaleMatrix.scale(2, 2);
     
     trans.matrix = scaleMatrix;
     trace(trans.matrix);         // (a=2, b=0, c=0, d=2, tx=0, ty=0)
     
     function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
     }
    </listing>
    </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Matrix</apiValueClassifier><apiException><apiDesc>行列は、設定時に null に設定されます。
     
     </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     表示オブジェクトの拡大 / 縮小、回転、および変換を変更する値を格納している Matrix オブジェクトです。
     
     <p><codeph>matrix</codeph> プロパティが <codeph>null</codeph> 以外の値に設定されていると、<codeph>matrix3D</codeph> プロパティは <codeph>null</codeph> になります。また、<codeph>matrix3D</codeph> プロパティが <codeph>null</codeph> 以外の値に設定されていると、<codeph>matrix</codeph> プロパティは <codeph>null</codeph> になります。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Matrix"><linktext>flash.geom.Matrix</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:matrix3D:get"><apiName>matrix3D</apiName><shortdesc>
     3 次元表示オブジェクトの Matrix3D オブジェクトへのアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Matrix3D</apiValueClassifier></apiValueDef><apiDesc>
     3 次元表示オブジェクトの Matrix3D オブジェクトへのアクセスを提供します。Matrix3D オブジェクトは、表示オブジェクトの位置と方向を決定する変換マトリックスを表します。Matrix3D オブジェクトは、遠近法に基づく投影を実行することもできます。
     
     <p><codeph>matrix</codeph> プロパティが <codeph>null</codeph> 以外の値に設定されていると、<codeph>matrix3D</codeph> プロパティは <codeph>null</codeph> になります。また、<codeph>matrix3D</codeph> プロパティが <codeph>null</codeph> 以外の値に設定されていると、<codeph>matrix</codeph> プロパティは <codeph>null</codeph> になります。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:perspectiveProjection:get"><apiName>perspectiveProjection</apiName><shortdesc>
     3 次元表示オブジェクトの PerspectiveProjection オブジェクトへのアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:PerspectiveProjection</apiValueClassifier></apiValueDef><apiDesc>
     3 次元表示オブジェクトの PerspectiveProjection オブジェクトへのアクセスを提供します。PerspectiveProjection オブジェクトを使用して、ステージの遠近法に基づく変形を変更したり、遠近法に基づく変形を表示オブジェクトの 3 次元の子すべてに割り当てることができます。
     
     <p>視点とステージの縦横比（サイズ）に基づいて、デフォルトの PerspectiveProjection オブジェクトがルートオブジェクトに割り当てられます。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#PerspectiveProjection"><linktext>flash.geom.PerspectiveProjection</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:pixelBounds:get"><apiName>pixelBounds</apiName><shortdesc>
     ステージ上の表示オブジェクトの境界を示す矩形を定義する Rectangle オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a Transform object <code>trans</code> and traces out
    its <code>pixelBounds</code>.  Notice that pixel bounds returns a bounding box with values 
    equal to MovieClip's <code>getBounds()</code> and <code>getRect()</code> methods.
    <listing version="2.0">
    import flash.geom.Transform;
    
    var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
    var trans:Transform = new Transform(rect);
    trace(trans.pixelBounds);         // (x=0, y=0, w=20, h=80)
    
    var boundsObj:Object = rect.getBounds();
    trace(boundsObj.xMin);            // 0
    trace(boundsObj.yMin);            // 0
    trace(boundsObj.xMax);            // 20
    trace(boundsObj.yMax);            // 80
    
    var rectObj:Object = rect.getRect();
    trace(rectObj.xMin);              // 0
    trace(rectObj.yMin);              // 0
    trace(rectObj.xMax);              // 20
    trace(rectObj.yMax);              // 80
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     ステージ上の表示オブジェクトの境界を示す矩形を定義する Rectangle オブジェクトです。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.geom:Matrix"><apiName>Matrix</apiName><shortdesc>
 Matrix クラスは、2 つの座標空間の間におけるポイントのマッピング方法を決定する変換マトリックス（変換行列）を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
 
 </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>標準の 2 次元同次 Matrix クラスです。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Matrix クラスは、2 つの座標空間の間におけるポイントのマッピング方法を決定する変換マトリックス（変換行列）を表します。Matrix オブジェクトのプロパティを設定し、Matrix オブジェクトを Transform オブジェクトの <codeph>matrix</codeph> プロパティに適用し、次に Transform オブジェクトを表示オブジェクトの <codeph>transform</codeph> プロパティとして適用することで、表示オブジェクトに対する各種グラフィック変換を実行できます。これらの変換機能には、平行移動（<i>x</i> と <i>y</i> の位置変更）、回転、拡大 / 縮小、傾斜などが含まれます。 
 
 <p>このような変換を<i>アフィン変換</i>と言います。アフィン変換では、変換中に線分の直線性が保たれるため、平行線は平行のままになります。</p>
 
 <p>変換行列を表示オブジェクトに適用するには、Transform オブジェクトを作成して、そのオブジェクトの <codeph>matrix</codeph> プロパティを変換行列に設定し、表示オブジェクトの <codeph>transform</codeph> プロパティに Transform オブジェクトを設定します。Matrix オブジェクトは、次のようないくつかのメソッドのパラメーターとしても使用します。</p>
 
 <ul>
 
 <li>BitmapData オブジェクトの <codeph>draw()</codeph> メソッド</li>
 
 <li>Graphics オブジェクトの <codeph>beginBitmapFill()</codeph> メソッド、<codeph>beginGradientFill()</codeph> メソッドまたは <codeph>lineGradientStyle()</codeph> メソッド</li>
 
 </ul>
 
 <p>変換行列オブジェクトは、次の内容を備えた 3 × 3 の行列です。</p>
 
 <p><adobeimage alt="Matrix クラスのプロパティのマトリックス表記" href="../../images/matrix_props1.jpg"/></p>
 
 <p>従来の変換行列では、<codeph>u</codeph>、<codeph>v</codeph>、および <codeph>w</codeph> プロパティによって特別な機能を提供します。Matrix クラスは 2 次元空間でのみ演算できるので、<codeph>u</codeph> プロパティと <codeph>v</codeph> プロパティの値は 0.0 で、<codeph>w</codeph> プロパティの値は 1.0 です。この行列の有効値は次のとおりです。</p>
 
 <p><adobeimage alt="u、v、w の前提値を示した Matrix クラスのプロパティのマトリックス表記" href="../../images/matrix_props2.jpg"/></p>
 
 <p>Matrix オブジェクトの他の 6 つのプロパティ、<codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph>、<codeph>d</codeph>、<codeph>tx</codeph>、および <codeph>ty</codeph> の値をすべて取得および設定できます。</p>
 
 <p>Matrix クラスは、主要な 4 種類の変換機能（平行移動、拡大 / 縮小、回転、傾斜）に対応しています。専用メソッドを使用して、これらのうち 3 つの変換機能を設定できます。以下の表に示します。 </p>
 
 <adobetable class="innertable">
   
   
   
   
   
 <tgroup cols="5"><thead><row><entry>変換</entry><entry>メソッド</entry><entry>マトリックスの値</entry><entry>表示結果</entry><entry>説明</entry></row></thead><tbody><row valign="top">
  <entry>平行移動（変位）</entry>
  <entry outputclass="nowrap"><codeph>translate(tx, ty)</codeph> </entry>
  <entry><adobeimage alt="変換メソッドのパラメーターのマトリックス表記" height="104" href="../../images/matrix_translate.jpg" width="150"/></entry>
  <entry><adobeimage alt="変換メソッドの効果を示す図" height="91" href="../../images/matrix_translate_image.jpg" width="111"/></entry>
  <entry>イメージを右に <codeph>tx</codeph> ピクセル、下に <codeph>ty</codeph> ピクセル移動します。</entry>
   </row><row valign="top">
  <entry>拡大 / 縮小</entry>
  <entry><codeph>scale(sx, sy)</codeph></entry>
  <entry><adobeimage alt="拡大 / 縮小メソッドのパラメーターのマトリックス表記" height="105" href="../../images/matrix_scale.jpg" width="140"/></entry>
  <entry><adobeimage alt="拡大 / 縮小メソッドの効果を示す図" height="84" href="../../images/matrix_scale_image.jpg" width="111"/></entry>
  <entry>各ピクセルの位置を <i>x</i> 軸方向に <codeph>sx</codeph> 倍、<i>y</i> 軸方向に <codeph>sy</codeph> 倍することで、イメージの大きさを変更します。</entry>
   </row><row valign="top">
  <entry>回転</entry>
  <entry><codeph>rotate(q)</codeph></entry>
  <entry><adobeimage alt="回転メソッドのプロパティのマトリックス表記" height="105" href="../../images/matrix_rotate.jpg" width="219"/></entry>
  <entry><adobeimage alt="回転メソッドの効果を示す図" height="91" href="../../images/matrix_rotate_image.jpg" width="111"/></entry>
  <entry>イメージを角度 <codeph>q</codeph>（単位はラジアン）だけ回転します。</entry>
   </row><row valign="top">
  <entry>傾斜または変形 </entry>
  <entry>なし。プロパティ <codeph>b</codeph> と <codeph>c</codeph> に設定する必要があります。</entry>
  <entry><adobeimage alt="傾斜機能のプロパティのマトリックス表記" href="../../images/matrix_skew.jpg"/></entry>
  <entry><adobeimage alt="傾斜機能の効果を示す図" height="77" href="../../images/matrix_skew_image.jpg" width="111"/></entry>
  <entry><i>x</i> 軸または <i>y</i> 軸に平行な方向にイメージをスライドします。Matrix オブジェクトの <codeph>b</codeph> プロパティは、<i>y</i> 軸に沿った傾斜角度のタンジェントを表し、Matrix オブジェクトの <codeph>c</codeph> プロパティは、<i>x</i> 軸に沿った傾斜角度のタンジェントを表します。</entry>
   </row></tbody></tgroup></adobetable>
 <p>効果的に複数の変換を組み合わせることができるように、変換関数はそれぞれ現在の行列プロパティを変更します。これを行うには、対象の表示オブジェクトの <codeph>transform</codeph> プロパティを使用して行列を適用する前に、複数の変換関数を呼び出します。</p>
 
 <p>Matrix オブジェクトのメソッドを呼び出す前に、<codeph>new Matrix()</codeph> コンストラクターを使用して Matrix オブジェクトを作成する必要があります。</p>
 
 </apiDesc><example conref="examples\MatrixExample.as"> 次の例では、<codeph>MatrixExample</codeph> クラスを使用してグラデーション塗りの大きな正方形を作成する方法を示します。これを行うには、以下の手順を実行します。
 <ol>
     <li>新しい Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>trace()</codeph> メソッドを使用して、<codeph>myMatrix</codeph> オブジェクトのプロパティのデフォルト値を出力します。</li>
     <li>アプリケーションは、<codeph>createGradientBox()</codeph> を、<codeph>width</codeph> および <codeph>height</codeph> のパラメーターを 200 ピクセル、回転なし、<i>x</i> 軸および <i>y</i> 軸に沿う平行移動距離を 50 ピクセルに設定して呼び出します。</li>
     <li><codeph>myMatrix</codeph> オブジェクトを <codeph>createGradientBox()</codeph> の呼び出し後に再びプリントし、変更内容を表示します。</li>
     <li>3 つの変数を設定してグラデーションボックスを塗る方法を制御します。
     <ul>
         <li><codeph>colors</codeph>：グラデーションカラーを赤から青の範囲で設定します。</li>
         <li><codeph>alphas</codeph>：透明度を不透明に設定します。</li>
         <li><codeph>ratios</codeph>：カラーの分布を、赤と青が共に等しくなるように設定します。</li>
  </ul></li>
     <li>グラフィックメソッド <codeph>beginGradientFill()</codeph> を呼び出します。このメソッドは、<codeph>myMatrix</codeph> オブジェクトを操作し、<codeph>lineTo()</codeph> メソッドを呼び出して、グラデーション塗りの四角形を作成します。</li>
 </ol>
<codeblock>
package {
    import flash.geom.Matrix;
    import flash.display.Sprite;
    import flash.display.GradientType;

    public class MatrixExample extends Sprite {

        public function MatrixExample() {
            var myMatrix:Matrix = new Matrix();
            trace(myMatrix.toString());    // (a=1, b=0, c=0, d=1, tx=0, ty=0)

            myMatrix.createGradientBox(200, 200, 0, 50, 50);
            trace(myMatrix.toString());    // (a=0.1220703125, b=0, c=0, d=0.1220703125, tx=150, ty=150)

            var colors:Array = [0xFF0000, 0x0000FF];
            var alphas:Array = [1, 1];
            var ratios:Array = [0, 0xFF];
            graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, myMatrix);
            graphics.lineTo(0, 300);
            graphics.lineTo(300, 300);
            graphics.lineTo(300, 0);
            graphics.lineTo(0, 0);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/transform"><linktext>flash.display.DisplayObject.transform</linktext></link><link href="flash.geom.xml#Transform"><linktext>flash.geom.Transform</linktext></link><link href="flash.display.xml#BitmapData/draw()"><linktext>flash.display.BitmapData.draw()</linktext></link><link href="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link><link href="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link><link href="flash.display.xml#Graphics/lineGradientStyle()"><linktext>flash.display.Graphics.lineGradientStyle()</linktext></link></related-links><apiConstructor id="flash.geom:Matrix:Matrix"><apiName>Matrix</apiName><shortdesc>
    指定されたパラメーターで新しい Matrix オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
    
	</helpid></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>a</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1</apiData><apiDesc>イメージを拡大 / 縮小または回転するときに <i>x</i> 軸方向のピクセルの配置に影響を与える値です。
    </apiDesc></apiParam><apiParam><apiItemName>b</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>イメージを回転または傾斜させるときに <i>y</i> 軸方向のピクセルの配置に影響を与える値です。
    </apiDesc></apiParam><apiParam><apiItemName>c</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>イメージを回転または傾斜させるときに <i>x</i> 軸方向のピクセルの配置に影響を与える値です。
    </apiDesc></apiParam><apiParam><apiItemName>d</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1</apiData><apiDesc>イメージを拡大 / 縮小または回転するときに <i>y</i> 軸方向のピクセルの配置に影響を与える値です。
    </apiDesc></apiParam><apiParam><apiItemName>tx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc><i>x</i> 軸方向に各ポイントを平行移動する距離です。
    </apiDesc></apiParam><apiParam><apiItemName>ty</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc><i>y</i> 軸方向に各ポイントを平行移動する距離です。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>新しい 2 次元の Matrix オブジェクトを作成します。
    
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    指定されたパラメーターで新しい Matrix オブジェクトを作成します。行列表記の場合、プロパティは次のようになります。
    
    <p><adobeimage alt="u、v、w の前提値を示した Matrix クラスのプロパティのマトリックス表記" href="../../images/matrix_props2.jpg"/></p>
    
    <p><codeph>new Matrix()</codeph> コンストラクターにパラメーターが指定されない場合は、次の値で構成される<i>単位マトリックス（単位行列）</i>を作成します。</p>
    <adobetable class="innertable">
    
    
    
    <tgroup cols="2"><tbody><row>
      <entry><pre>a = 1</pre></entry>
      <entry><pre>b = 0</pre></entry>
    </row><row>
      <entry><pre>c = 0</pre></entry>
      <entry><pre>d = 1</pre></entry>
    </row><row>
      <entry><pre>tx = 0</pre></entry>
      <entry><pre>ty = 0</pre></entry>
    </row></tbody></tgroup></adobetable>
    <p>行列表記の場合、単位行列は次のようになります。</p>
    
    <p><adobeimage alt="Matrix クラスのプロパティのマトリックス表記" href="../../images/matrix_identity.jpg"/></p>
    
    </apiDesc><example conref="examples\Matrix.1.as"> 次の例では、<codeph>matrix_1</codeph> を作成する際に <codeph>Matrix()</codeph> コンストラクターにパラメーターを渡していません。さらに、同じコンストラクターにパラメーターを渡して <codeph>matrix_2</codeph> を作成しています。パラメーターを渡さずに作成した <codeph>matrix_1</codeph> は、値（<codeph>a</codeph>=1, <codeph>b</codeph>=0, <codeph>c</codeph>=0, <codeph>d</codeph>=1, <codeph>tx</codeph>=0, <codeph>ty</codeph>=0）を持つ単位行列です。
<codeblock>
import flash.geom.Matrix;

var matrix_1:Matrix = new Matrix();
trace(matrix_1);  // (a=1, b=0, c=0, d=1, tx=0, ty=0)

var matrix_2:Matrix = new Matrix(1, 2, 3, 4, 5, 6);
trace(matrix_2);  // (a=1, b=2, c=3, d=4, tx=5, ty=6)
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:Matrix:clone"><apiName>clone</apiName><shortdesc>
    新しい Matrix オブジェクトとして、このマトリックスのクローンを返します。含まれるオブジェクトはまったく同じコピーになります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates <code>clonedMatrix</code> from <code>myMatrix</code>.
    Notice that the Matrix class does not have an equals method, so the following example
    uses a custom written function to test the equality of two Matricies.
    
    <listing version="2.0">
    import flash.geom.Matrix;
       
    var myMatrix:Matrix = new Matrix(2, 0, 0, 2, 0, 0);
    var clonedMatrix:Matrix = new Matrix();
    
    trace(myMatrix);                        // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(clonedMatrix);                    // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    trace(equals(myMatrix, clonedMatrix));  // false
    
    clonedMatrix = myMatrix.clone(); 
    
    trace(myMatrix);                        // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(clonedMatrix);                    // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(equals(myMatrix, clonedMatrix));  // true
    
    function equals(m1:Matrix, m2:Matrix):Boolean {
        return m1.toString() == m2.toString();
    }
    </listing>
     </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrix オブジェクトです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Matrix</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>新しい Matrix オブジェクトとして、現在の行列のコピーを返します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    新しい Matrix オブジェクトとして、このマトリックスのクローンを返します。含まれるオブジェクトはまったく同じコピーになります。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:concat"><apiName>concat</apiName><shortdesc>
    マトリックスを現在のマトリックスと連結して、2 つのマトリックスの図形効果を効果的に組み合わせます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates three Matricies that define transformations for
    three rectangle MovieClips.  The first two Matricies <code>rotate45Matrix</code>
    and <code>doubleScaleMatrix</code> are applied to the two rectangles 
    <code>rectangleMc_1</code> and <code>rectangleMc_2</code>.  Then, the third
    Matrix is created using the <code>concat()</code> method on <code>rotate45Matrix</code> and 
    <code>doubleScaleMatrix</code> to create <code>scaleAndRotateMatrix</code>. 
    This Matrix is then applied to <code>rectangleMc_3</code> to scale and rotate it.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    var rectangleMc_0:MovieClip = createRectangle(20, 80, 0x000000);
    var rectangleMc_1:MovieClip = createRectangle(20, 80, 0xFF0000);   
    var rectangleMc_2:MovieClip = createRectangle(20, 80, 0x00FF00);   
    var rectangleMc_3:MovieClip = createRectangle(20, 80, 0x0000FF);
    
    var rectangleTrans_1:Transform = new Transform(rectangleMc_1);
    var rectangleTrans_2:Transform = new Transform(rectangleMc_2);
    var rectangleTrans_3:Transform = new Transform(rectangleMc_3);
    
    var rotate45Matrix:Matrix = new Matrix();
    rotate45Matrix.rotate(Math.PI/4);
    rectangleTrans_1.matrix = rotate45Matrix;
    rectangleMc_1._x = 100;
    trace(rotate45Matrix.toString());    // (a=0.707106781186548, b=0.707106781186547, c=-0.707106781186547, d=0.707106781186548, tx=0, ty=0)
    
    var doubleScaleMatrix:Matrix = new Matrix();
    doubleScaleMatrix.scale(2, 2);
    rectangleTrans_2.matrix = doubleScaleMatrix;
    rectangleMc_2._x = 200;
    trace(doubleScaleMatrix.toString());  // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    
    var scaleAndRotateMatrix:Matrix = doubleScaleMatrix.clone();
    scaleAndRotateMatrix.concat(rotate45Matrix);
    rectangleTrans_3.matrix = scaleAndRotateMatrix;
    rectangleMc_3._x = 300;
    trace(scaleAndRotateMatrix.toString());   // (a=1.4142135623731, b=1.41421356237309, c=-1.41421356237309, d=1.4142135623731, tx=0, ty=0)
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
        var depth:Number = this.getNextHighestDepth();
        var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
        mc.beginFill(color);
        mc.lineTo(0, height);
        mc.lineTo(width, height);
        mc.lineTo(width, 0);
        mc.lineTo(0, 0);
        return mc;
    }
    
    </listing>
    
    </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>m</apiItemName><apiOperationClassifier>flash.geom:Matrix</apiOperationClassifier><apiDesc>ソースマトリックスに連結するマトリックスです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    マトリックスを現在のマトリックスと連結して、2 つのマトリックスの図形効果を効果的に組み合わせます。数学的に言うと、2 つのマトリックスを連結することは、マトリックスの乗算を使って組み合わせることと同じです。
    
    <p>例えば、行列 <codeph>m1</codeph> はオブジェクトの大きさを 4 倍にし、行列 <codeph>m2</codeph> はオブジェクトを 1.5707963267949（<codeph>Math.PI/2</codeph>）ラジアン回転する場合、<codeph>m1.concat(m2)</codeph> は、オブジェクトの大きさを 4 倍にし、そのオブジェクトを <codeph>Math.PI/2</codeph> ラジアン回転する行列に <codeph>m1</codeph> を変換します。 </p>
    
    <p>このメソッドは、連結された行列でソース行列を置き換えます。2 つのソース行列をどちらも変更せずに 2 つの行列を連結する場合は、クラスの例に示されているように、まず <codeph>clone()</codeph> メソッドを使用して、ソース行列をコピーします。</p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:createBox"><apiName>createBox</apiName><shortdesc>
     拡大 / 縮小、回転、平行移動に関するパラメーターなどがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scaleX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>水平方向の拡大 / 縮小倍率です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>垂直方向の拡大 / 縮小倍率です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>回転量（ラジアン単位）です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>tx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc><i>x</i> 軸に沿って右方向に平行移動するピクセル数です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>ty</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc><i>y</i> 軸に沿って下方向に平行移動するピクセル数です。  
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>拡大 / 縮小、回転、平行移動の値を持つマトリックスを作成します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     拡大 / 縮小、回転、平行移動に関するパラメーターなどがあります。マトリックスに適用する際に、これらのパラメーターに基づいて、マトリックスの値を設定します。
     
     <p><codeph>createBox()</codeph> メソッドを使用すると、<codeph>identity()</codeph>、<codeph>rotate()</codeph>、<codeph>scale()</codeph>、<codeph>translate()</codeph> の各メソッドを続けて適用するのと効果が同じになる行列を取得できます。例えば、<codeph>mat1.createBox(2,2,Math.PI/4,100,100)</codeph> の効果は次のステートメントのものと同じです。</p>
     
     <codeblock platform="actionscript">
     import flash.geom.Matrix;
     
     var mat1:Matrix = new Matrix();
     mat1.identity();
     mat1.rotate(Math.PI/4);
     mat1.scale(2,2);
     mat1.translate(10,20);
     </codeblock>
     
     <codeblock platform="javascript">
     var mat1 = new air.Matrix();
     mat1.identity();
     mat1.rotate(Math.PI/4);
     mat1.scale(2, 2);
     mat1.translate(10, 20);
     </codeblock>
     
     </apiDesc><example conref="examples\Matrix_createBox.as"> 次の例では、<codeph>myMatrix</codeph> の x の尺度、y の尺度、回転、x の位置および y の位置を、<codeph>createBox()</codeph> メソッドを呼び出すことで設定しています。
<codeblock>

package
{
    import flash.display.Shape;
    import flash.display.Sprite;
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    public class Matrix_createBox extends Sprite
    {
        public function Matrix_createBox()
        {
             var myMatrix:Matrix = new Matrix();
             trace(myMatrix.toString());  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
             
             myMatrix.createBox(1, 2, Math.PI/4, 50, 100);
             trace(myMatrix.toString());  
             // (a=0.7071067811865476, b=1.414213562373095, c=-0.7071067811865475, 
             //  d=1.4142135623730951, tx=100, ty=200)
             
             var rectangleShape:Shape = createRectangle(20, 80, 0xFF0000);   
             addChild(rectangleShape);
              
             var rectangleTrans:Transform = new Transform(rectangleShape);
             rectangleTrans.matrix = myMatrix;
        }
        
        public function createRectangle(w:Number, h:Number, color:Number):Shape 
        {
            var rect:Shape = new Shape();
            rect.graphics.beginFill(color);
            rect.graphics.drawRect(0, 0, w, h);
            addChild(rect);
            return rect;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix:createGradientBox"><apiName>createGradientBox</apiName><shortdesc>
     Graphics クラスの beginGradientFill() メソッドで使用する特定のスタイルを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><category>Method
     
     </category></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>グラデーションボックスの幅です。
     
     </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>グラデーションボックスの高さです。
     
     </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>回転量（ラジアン単位）です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>tx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc><i>x</i> 軸に沿って右方向に平行移動（移動）する距離（ピクセル単位）です。この値は、<codeph>width</codeph> パラメーターの半分だけオフセットされます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>ty</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc><i>y</i> 軸に沿って下方向に平行移動（移動）する距離（ピクセル単位）です。この値は、<codeph>height</codeph> パラメーターの半分だけオフセットされます。 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Graphics クラスの beginGradientFill() メソッドで使用する特定のスタイルを作成します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     Graphics クラスの <codeph>beginGradientFill()</codeph> メソッドおよび <codeph>lineGradientStyle()</codeph> メソッドで使用する特定のスタイルを作成します。width と height は <codeph>scaleX</codeph> と <codeph>scaleY</codeph> のペアで拡大 / 縮小されます。<codeph>tx</codeph> と <codeph>ty</codeph> の値は、width と height の半分だけオフセットされます。
     
     <p>例えば、次の性質を持つグラデーションを作成するとします。</p>
     
     <ul>
     
     <li><codeph>GradientType.LINEAR</codeph></li>
     <li>グリーンとブルーの 2 色、ratios 配列を <codeph>[0, 255]</codeph> に設定</li>
     <li><codeph>SpreadMethod.PAD</codeph></li>
     <li><codeph>InterpolationMethod.LINEAR_RGB</codeph></li>
     
     </ul>
     
     <p>パラメーターの異なる <codeph>createGradientBox()</codeph> メソッドを使用して定義された行列のグラデーションは、次の図のとおりです。</p>
     
     <adobetable class="innertable">
     
      
     
     
     
     
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry><codeph>createGradientBox()</codeph> の設定</entry><entry>グラデーションの結果</entry></row></thead><tbody><row>
     
      <entry><pre>width = 25;
     height = 25; 
     rotation = 0; 
     tx = 0; 
     ty = 0;</pre></entry>
     
     <entry align="center"><adobeimage alt="生成される線状グラデーション" href="../../images/createGradientBox-1.jpg"/></entry>
     
     </row><row>
     
      <entry><pre>width = 25; 
     height = 25; 
     rotation = 0; 
     tx = 25; 
     ty = 0;</pre></entry>
     
     <entry align="center"><adobeimage alt="生成される線状グラデーション" href="../../images/createGradientBox-2.jpg"/></entry>
     
     </row><row>
     
      <entry><pre>width = 50; 
     height = 50; 
     rotation = 0; 
     tx = 0; 
     ty = 0;</pre></entry>
     
     <entry align="center"><adobeimage alt="生成される線状グラデーション" href="../../images/createGradientBox-3.jpg"/></entry>
     
     </row><row>
     
      <entry><pre>width = 50;
     height = 50; 
     rotation = Math.PI / 4; // 45 degrees
     tx = 0; 
     ty = 0;</pre></entry>
     
     <entry align="center"><adobeimage alt="生成される線状グラデーション" href="../../images/createGradientBox-4.jpg"/></entry>
     
     </row></tbody></tgroup></adobetable>
     
     </apiDesc><example conref="examples\Matrix_createGradientBox.as"> 次の例では、<codeph>myMatrix</codeph> の x の尺度、y の尺度、回転、x の位置および y の位置を、<codeph>createBox()</codeph> メソッドを呼び出すことで設定しています。
<codeblock>

package
{
    import flash.display.GradientType;
    import flash.display.Sprite;
    import flash.geom.Matrix;
    
    public class Matrix_createGradientBox extends Sprite
    {
        public function Matrix_createGradientBox()
        {
             var myMatrix:Matrix = new Matrix();
             trace(myMatrix.toString());          // (a=1, b=0, c=0, d=1, tx=0, ty=0)
             
             myMatrix.createGradientBox(200, 200, 0, 50, 50);
             trace(myMatrix.toString());          // (a=0.1220703125, b=0, c=0, d=0.1220703125, tx=150, ty=150)
             
             var colors:Array = [0xFF0000, 0x0000FF];
             var alphas:Array = [100, 100];
             var ratios:Array = [0, 0xFF];
             
             this.graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, myMatrix);
             this.graphics.drawRect(0, 0, 300, 200);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link><link href="flash.display.xml#Graphics/lineGradientStyle()"><linktext>flash.display.Graphics.lineGradientStyle()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix:deltaTransformPoint"><apiName>deltaTransformPoint</apiName><shortdesc>
    変換前の座標空間内のポイントが指定されると、そのポイントの変換後の座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example uses the <code>deltaTransformPoint()</code> method 
    to create <code>deltaTransformedPoint</code> from <code>myPoint</code>.  Notice that
    the <code>translate()</code> method has no affect on the position of <code>deltaTransformedPoint</code>.
    In the example, however, <code>scale()</code> does affect the position.  It
    increases the original <code>x</code> value by a factor of three from 50 to 150.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Point;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    myMatrix.translate(100, 0);
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=100, ty=0)
    
    myMatrix.scale(3, 3);
    trace(myMatrix);  // (a=3, b=0, c=0, d=3, tx=300, ty=0)
    
    var myPoint:Point = new Point(50,0);
    trace(myPoint);   // (50, 0)              
    
    var deltaTransformedPoint:Point = myMatrix.deltaTransformPoint(myPoint);
    trace(deltaTransformedPoint); // (150, 0)
    
    var pointMc_0:MovieClip = createRectangle(10, 10, 0xFF0000);
    pointMc_0._x = myPoint.x;
    
    var pointMc_1:MovieClip = createRectangle(10, 10, 0x00FF00);
    pointMc_1._x = deltaTransformedPoint.x;
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>行列変換を適用した結果のポイントです。
    
    </apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiParam><apiItemName>point</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>行列変換の結果として得られるポイントです。
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    変換前の座標空間内のポイントが指定されると、そのポイントの変換後の座標を返します。<codeph>transformPoint()</codeph> メソッドを使用して適用される通常の変換とは異なり、<codeph>deltaTransformPoint()</codeph> メソッドの変換では平行移動パラメーター <codeph>tx</codeph> と <codeph>ty</codeph> が考慮されません。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:identity"><apiName>identity</apiName><shortdesc>
    各行列プロパティを null 変換になる値に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><category>Method
    </category></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
    各行列プロパティを null 変換になる値に設定します。単位行列を適用して変形したオブジェクトは、元のオブジェクトと同じになります。
    
    <p><codeph>identity()</codeph> メソッドを呼び出すと、結果として得られる行列のプロパティは、<codeph>a</codeph>=1, <codeph>b</codeph>=0, <codeph>c</codeph>=0, <codeph>d</codeph>=1, <codeph>tx</codeph>=0, <codeph>ty</codeph>=0 になります。</p>
    
    <p>行列表記の場合、単位行列は次のようになります。</p>
    
    <p><adobeimage alt="Matrix クラスのプロパティのマトリックス表記" href="../../images/matrix_identity.jpg"/></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:invert"><apiName>invert</apiName><shortdesc>
     元のマトリックスの逆の変換を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     元のマトリックスの逆の変換を実行します。逆マトリックスをオブジェクトに適用して、元のマトリックスの適用時に実行された変換を取り消すことができます。
     
     </apiDesc><example conref="examples\Matrix_invert.as"> 次の例では、<codeph>halfScaleMatrix</codeph> を作成するために <codeph>invert()</codeph> メソッド（<codeph>doubleScaleMatrix</codeph>）を呼び出しています。その後、この 2 つのマトリックスが他方のマトリックスの逆マトリックス、つまり、他方のマトリックスで実行された変換を取り消すマトリックスであることを <codeph>originalAndInverseMatrix</codeph>（<codeph>noScaleMatrix</codeph> と同等）を作成することによって示します。
<codeblock>

package
{
    import flash.display.Shape;
    import flash.display.Sprite;
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    public class Matrix_invert extends Sprite
    {
        public function Matrix_invert()
        {
            var rect0:Shape = createRectangle(20, 80, 0xFF0000);   
            var rect1:Shape = createRectangle(20, 80, 0x00FF00);   
            var rect2:Shape = createRectangle(20, 80, 0x0000FF);
            var rect3:Shape = createRectangle(20, 80, 0x000000);
            
            var trans0:Transform = new Transform(rect0);
            var trans1:Transform = new Transform(rect1);
            var trans2:Transform = new Transform(rect2);
            var trans3:Transform = new Transform(rect3);
             
            var doubleScaleMatrix:Matrix = new Matrix(2, 0, 0, 2, 0, 0);
            trans0.matrix = doubleScaleMatrix;
            trace(doubleScaleMatrix.toString());  // (a=2, b=0, c=0, d=2, tx=0, ty=0)
             
            var noScaleMatrix:Matrix = new Matrix(1, 0, 0, 1, 0, 0);
            trans1.matrix = noScaleMatrix;
            rect1.x = 50;
            trace(noScaleMatrix.toString());  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
             
            var halfScaleMatrix:Matrix = doubleScaleMatrix.clone();
            halfScaleMatrix.invert();
            trans2.matrix = halfScaleMatrix;
            rect2.x = 100;
            trace(halfScaleMatrix.toString());  // (a=0.5, b=0, c=0, d=0.5, tx=0, ty=0)
             
            var originalAndInverseMatrix:Matrix = doubleScaleMatrix.clone();
            originalAndInverseMatrix.concat(halfScaleMatrix);
            trans3.matrix = originalAndInverseMatrix;
            rect3.x = 150;
            trace(originalAndInverseMatrix.toString());  // (a=1, b=0, c=0, d=1, tx=0, ty=0)            
        }
        
        public function createRectangle(w:Number, h:Number, color:Number):Shape 
        {
            var rect:Shape = new Shape();
            rect.graphics.beginFill(color);
            rect.graphics.drawRect(0, 0, w, h);
            addChild(rect);
            return rect;
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:rotate"><apiName>rotate</apiName><shortdesc>
     Matrix オブジェクトに回転変換を適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example the <code>rotate()</code> method rotates <code>rectangleMc</code>
    30 degrees clockwise.  Notice that applying <code>myMatrix</code> to <code>rectangleMc</code>
    resets its <i>_x</i> value leaving us to reset it to 100 manually.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix.toString());           // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    var degrees:Number = 30;
    var radians:Number = (degrees/180) ~~ Math.PI;
    myMatrix.rotate(radians);
    trace(myMatrix.toString());           // (a=0.866025403784439, b=0.5, c=-0.5, d=0.866025403784439, tx=0, ty=0)
    
    var rectangleMc:MovieClip = createRectangle(20, 80, 0xFF0000);
    trace(rectangleMc._x);                // 0
    rectangleMc._x = 100;
    trace(rectangleMc._x);                // 100
    
    var rectangleTrans:Transform = new Transform(rectangleMc);
    rectangleTrans.matrix = myMatrix;
    trace(rectangleMc._x);                // 0
    rectangleMc._x = 100;
    trace(rectangleMc._x);                // 100
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    The above example uses the <code>_x</code> property of the MovieClip object 
    to position <code>rectangleMc</code>.  Generally, when dealing with Matrix
    positioning, mixing positioning techniques is considered bad style.  The  
    example above written in good style would concatenate a translation Matrix to
    <code>myMatrix</code> to change the horizontal location of <code>rectangleMc</code>. 
    The following example demonstrates this. 
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix.toString());   // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    var degrees:Number = 30;
    var radians:Number = (degrees/180) ~~ Math.PI;
    myMatrix.rotate(radians);
    trace(myMatrix.toString());   // (a=0.866025403784439, b=0.5, c=-0.5, d=0.866025403784439, tx=0, ty=0)
    
    var translateMatrix:Matrix = new Matrix();
    translateMatrix.translate(100, 0);
    myMatrix.concat(translateMatrix);
    trace(myMatrix.toString());   // (a=0.866025403784439, b=0.5, c=-0.5, d=0.866025403784439, tx=100, ty=0)
    
    var rectangleMc:MovieClip = createRectangle(20, 80, 0xFF0000);
    trace(rectangleMc._x);        // 0
    rectangleMc._x = 100;
    trace(rectangleMc._x);        // 100
    
    var rectangleTrans:Transform = new Transform(rectangleMc);
    rectangleTrans.matrix = myMatrix;
    trace(rectangleMc._x);        // 100
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>回転角度（ラジアン単位）です。
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Matrix オブジェクトに回転変換を適用します。 
     
     <p><codeph>rotate()</codeph> メソッドは、Matrix オブジェクトの <codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph> および <codeph>d</codeph> の各プロパティを変更します。行列表記の場合、これは現在の行列を次の行列と連結することと同じです。</p>
     
     <p><adobeimage alt="拡大 / 縮小メソッドのパラメーターのマトリックス表記" height="105" href="../../images/matrix_rotate.jpg" width="219"/></p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:scale"><apiName>scale</apiName><shortdesc>
     行列に拡大 / 縮小の変換を適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example uses the <code>scale()</code> method to
    scale <code>myMatrix</code> by a factor of 3 horizontally and a factor of 4 
    vertically.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    
    var myMatrix:Matrix = new Matrix(2, 0, 0, 2, 100, 100);
    trace(myMatrix.toString());   // (a=2, b=0, c=0, d=2, tx=100, ty=100)
    
    myMatrix.scale(3, 4);
    trace(myMatrix.toString());   // (a=6, b=0, c=0, d=8, tx=300, ty=400)
    </listing>
     </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを <i>x</i> 軸方向に拡大 / 縮小するために使用される乗数です。
     </apiDesc></apiParam><apiParam><apiItemName>sy</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>オブジェクトを <i>y</i> 軸方向に拡大 / 縮小するために使用される乗数です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     行列に拡大 / 縮小の変換を適用します。<i>x</i> 軸方向に <codeph>sx</codeph> 倍、<i>y</i> 軸方向に <codeph>sy</codeph> 倍に変更されます。
     
     <p><codeph>scale()</codeph> メソッドは、Matrix オブジェクトの <codeph>a</codeph> プロパティと <codeph>d</codeph> プロパティを変更します。行列表記の場合、これは現在の行列を次の行列と連結することと同じです。</p>
     <p><adobeimage alt="拡大 / 縮小メソッドのパラメーターのマトリックス表記" height="105" href="../../images/matrix_scale.jpg" width="140"/></p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:toString"><apiName>toString</apiName><shortdesc>
     Matrix オブジェクトのプロパティを列挙するテキスト値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates <code>myMatrix</code> and converts its values 
     to a String in the format of (a=A, b=B, c=C, d=D, tx=TX, ty=TY).
     
     <listing version="2.0">
     import flash.geom.Matrix;
     
     var myMatrix:Matrix = new Matrix();
     trace("myMatrix: " + myMatrix.toString()); // (a=1, b=0, c=0, d=1, tx=0, ty=0)
     </listing>
      
     </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrix オブジェクトのプロパティ（<codeph>a</codeph>、<codeph>b</codeph>、<codeph>c</codeph>、<codeph>d</codeph>、<codeph>tx</codeph>、<codeph>ty</codeph>）の値が含まれるストリング。
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>この Matrix オブジェクトのプロパティを列挙するテキスト値を返します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     Matrix オブジェクトのプロパティを列挙するテキスト値を返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:transformPoint"><apiName>transformPoint</apiName><shortdesc>
     Matrix オブジェクトで表現される図形変換を、指定されたポイントに適用した結果を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example uses the <code>transformPoint()</code> method 
    to create <code>transformedPoint</code> from <code>myPoint</code>.  Notice that
    the <code>translate()</code> method does have an affect on the position of <code>transformedPoint</code>.
    In the example, <code>scale()</code> increases the original <code>x</code> 
    value by a factor of three from 50 to 150, and <code>translate()</code> increases 
    <code>x</code> by 300 for a total value of 450.
    
    <listing version="2.0">
    import flash.geom.Matrix;     
    import flash.geom.Point;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    myMatrix.translate(100, 0);
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=100, ty=0)
    
    myMatrix.scale(3, 3);
    trace(myMatrix);  // (a=3, b=0, c=0, d=3, tx=300, ty=0)
    
    var myPoint:Point = new Point(50,0);
    trace(myPoint);                   // (50, 0)
          
    var transformedPoint:Point = myMatrix.transformPoint(myPoint);
    trace(transformedPoint);  // (450, 0)
    
    var pointMc_0:MovieClip = createRectangle(10, 10, 0xFF0000);
    pointMc_0._x = myPoint.x;
    
    var pointMc_1:MovieClip = createRectangle(10, 10, 0x00FF00);
    pointMc_1._x = transformedPoint.x;
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>行列変換を適用した結果のポイントです。
    
    
    </apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiParam><apiItemName>point</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>行列変換の結果として得られるポイントです。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>Point オブジェクトに図形変換の結果を返します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     Matrix オブジェクトで表現される図形変換を、指定されたポイントに適用した結果を返します。 
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:translate"><apiName>translate</apiName><shortdesc>
    行列を x 軸と y 軸に沿って、dx パラメーターと dy パラメーターで指定された量だけ平行移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example uses the <code>translate()</code> method to position 
    <code>rectangleMc</code> x:100 and y:50. Notice that <code>translate()</code> affects 
    the translate values <code>tx</code> and <code>ty</code> but not <code>a</code>, <code>b</code>,
    <code>c</code>, or <code>d</code>.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    
    var myMatrix:Matrix = new Matrix(2, 0, 0, 2, 100, 100);
    trace(myMatrix.toString());   // (a=2, b=0, c=0, d=2, tx=100, ty=100)
    
    myMatrix.translate(100, 50);
    trace(myMatrix.toString());   // (a=2, b=0, c=0, d=2, tx=200, ty=150)
    </listing>
    </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc><i>x</i> 軸に沿って右方向に移動する量（ピクセル単位）です。
    
    </apiDesc></apiParam><apiParam><apiItemName>dy</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc><i>y</i> 軸に沿って下方向に移動する量（ピクセル単位）です。
    
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>行列を x 軸および y 軸に沿って平行移動します。
    
    <p><codeph>translate()</codeph> メソッドは、Matrix オブジェクトの <codeph>tx</codeph> プロパティと <codeph>ty</codeph> プロパティを変更します。行列表記の場合、これは現在の行列を次の行列と連結することと同じです。</p>
    
    <p><adobeimage alt="拡大 / 縮小メソッドのパラメーターのマトリックス表記" height="105" href="../../images/matrix_translate.jpg" width="150"/></p>
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    <i>x</i> 軸と <i>y</i> 軸に沿って、<codeph>dx</codeph> パラメーターと <codeph>dy</codeph> パラメーターで指定された量だけ行列を平行移動します。
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Matrix:a"><apiName>a</apiName><shortdesc>
     イメージを拡大 / 縮小または回転するときに x 軸方向のピクセルの配置に影響を与える値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>イメージを拡大 / 縮小または回転するときに x 軸方向のピクセルの配置に影響を与える値です。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     イメージを拡大 / 縮小または回転するときに <i>x</i> 軸方向のピクセルの配置に影響を与える値です。
     
     </apiDesc><example conref="examples\Matrix.a.1.as"> 次の例では、Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>a</codeph> の値を設定します。
<codeblock>
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.a);  // 1

myMatrix.a = 2;
trace(myMatrix.a);  // 2
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:b"><apiName>b</apiName><shortdesc>
     イメージを回転または傾斜させるときに y 軸方向のピクセルの配置に影響を与える値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>イメージを回転または傾斜させるときに y 軸方向のピクセルの配置に影響を与える値です。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     イメージを回転または傾斜させるときに <i>y</i> 軸方向のピクセルの配置に影響を与える値です。
     
     </apiDesc><example conref="examples\Matrix.b.1.as"> 次の例では、Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>b</codeph> の値を設定します。
<codeblock>
import flash.geom.Matrix;
 
var myMatrix:Matrix = new Matrix();
trace(myMatrix.b);  // 0

var degrees:Number = 30;
var radians:Number = (degrees/180) ~~ Math.PI;
myMatrix.b = Math.tan(radians);
trace(myMatrix.b);  // 0.5773502691896257
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:c"><apiName>c</apiName><shortdesc>
     イメージを回転または傾斜させるときに x 軸方向のピクセルの配置に影響を与える値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>イメージを回転または傾斜させるときに x 軸方向のピクセルの配置に影響を与える値です。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     イメージを回転または傾斜させるときに <i>x</i> 軸方向のピクセルの配置に影響を与える値です。
     
     </apiDesc><example conref="examples\Matrix.c.1.as"> 次の例では、Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>c</codeph> の値を設定します。
<codeblock>
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.c);  // 0

var degrees:Number = 30;
var radians:Number = (degrees/180) ~~ Math.PI;
myMatrix.c = Math.tan(radians);
trace(myMatrix.c);  // 0.5773502691896257
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:d"><apiName>d</apiName><shortdesc>
     イメージを拡大 / 縮小または回転するときに y 軸方向のピクセルの配置に影響を与える値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>イメージを拡大 / 縮小または回転するときに y 軸方向のピクセルの配置に影響を与える値です。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     イメージを拡大 / 縮小または回転するときに <i>y</i> 軸方向のピクセルの配置に影響を与える値です。
     
     </apiDesc><example conref="examples\Matrix.d.1.as"> 次の例では、Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>d</codeph> の値を設定します。
<codeblock>
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.d);  // 1

myMatrix.d = 2;
trace(myMatrix.d);  // 2
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:tx"><apiName>tx</apiName><shortdesc>
     x 軸方向に各ポイントを平行移動する距離です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>x 軸方向に各ポイントを平行移動する距離です。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     <i>x</i> 軸方向に各ポイントを平行移動する距離です。
     
     </apiDesc><example conref="examples\Matrix.tx.1.as"> 次の例では、Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>tx</codeph> の値を設定します。
<codeblock>
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.tx);  // 0

myMatrix.tx = 50;  // 50
trace(myMatrix.tx);
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:ty"><apiName>ty</apiName><shortdesc>
     y 軸方向に各ポイントを平行移動する距離です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>y 軸方向に各ポイントを平行移動する距離です。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     <i>y</i> 軸方向に各ポイントを平行移動する距離です。
     
     </apiDesc><example conref="examples\Matrix.ty.1.as"> 次の例では、Matrix オブジェクト <codeph>myMatrix</codeph> を作成し、<codeph>ty</codeph> の値を設定します。
<codeblock>
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.ty);  // 0

myMatrix.ty = 50;
trace(myMatrix.ty);  // 50
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.geom:Rectangle"><apiName>Rectangle</apiName><shortdesc>
 Rectangle オブジェクトは、その位置（左上隅のポイント (x, y) で示される）、および幅と高さで定義される領域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Rectangle オブジェクトは、その位置（左上隅のポイント (x, y) で示される）、および幅と高さで定義される領域です。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Rectangle オブジェクトは、その位置（左上隅のポイント (<i>x</i>, <i>y</i>) で示される)、および幅と高さで定義される領域です。 
 
 <p>Rectangle クラスの <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティは、互いに独立しているため、あるプロパティの値を変更しても、他のプロパティに影響はありません。ただし、<codeph>right</codeph> プロパティと <codeph>bottom</codeph> プロパティはこれら 4 つのプロパティと不可分に関連しています。例えば、<codeph>right</codeph> プロパティの値を変更すると <codeph>width</codeph> プロパティの値も変更されます。<codeph>bottom</codeph> プロパティの値を変更すると、<codeph>height</codeph> プロパティの値も変更されます。 </p>
 
 <p platform="actionscript">次のメソッドおよびプロパティでは、Rectangle オブジェクトを使用します。</p>
 
 <ul platform="actionscript">
 
 	<li>BitmapData クラスの <codeph>applyFilter()</codeph>、<codeph>colorTransform()</codeph>、<codeph>copyChannel()</codeph>、<codeph>copyPixels()</codeph>、<codeph>draw()</codeph>、<codeph>fillRect()</codeph>、<codeph>generateFilterRect()</codeph>、<codeph>getColorBoundsRect()</codeph>、<codeph>getPixels()</codeph>、<codeph>merge()</codeph>、<codeph>paletteMap()</codeph>、<codeph>pixelDisolve()</codeph>、<codeph>setPixels()</codeph>、<codeph>threshold()</codeph> の各メソッドおよび <codeph>rect</codeph> プロパティ</li>
 
 	<li>DisplayObject クラスの <codeph>getBounds()</codeph> メソッドと <codeph>getRect()</codeph> メソッド、および <codeph>scrollRect</codeph> プロパティと <codeph>scale9Grid</codeph> プロパティ</li>
 
 	<li>TextField クラスの <codeph>getCharBoundaries()</codeph> メソッド</li>
 
 	<li>Transform クラスの <codeph>pixelBounds</codeph> プロパティ</li>
 
 	<li>Sprite クラスの <codeph>startDrag()</codeph> メソッドの <codeph>bounds</codeph> パラメーター</li>
 
 	<li>PrintJob クラスの <codeph>addPage()</codeph> メソッドの <codeph>printArea</codeph> パラメーター</li>
 
 </ul>
 
 <p>Rectangle オブジェクトを作成するには、<codeph>new Rectangle()</codeph> コンストラクターを使用します。</p>
 
 <p platform="actionscript"><b>注意：</b>Rectangle クラスは矩形シェイプの表示オブジェクトを定義しません。矩形シェイプオブジェクトを画面上に描画するには、Graphics クラスの <codeph>drawRect()</codeph> メソッドを使用します。</p>
 
 </apiDesc><example conref="examples\RectangleExample.as"> 次の例では、RectangleExample クラスを使用して新しい 3 つの Rectangle オブジェクトをさまざまな <i>x</i> 座標、<i>y</i> 座標、高さ、幅で作成します。また、<codeph>trace()</codeph> メソッドを使用して、Rectangle インスタンスが正常に作成されたことを確認します。次に、ブール型変数 <codeph>isContained</codeph> が、<codeph>containsRect()</codeph> メソッドの呼び出し結果に代入されます。このメソッドは、2 番目の矩形が 3 番目の矩形を完全には囲んでいないことを判別します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.geom.Rectangle;

    public class RectangleExample extends Sprite {

        public function RectangleExample() {
            var firstRect:Rectangle = new Rectangle();
            trace(firstRect);  // (x=0, y=0, w=0, h=0)
            var secondRect:Rectangle = new Rectangle(1, 3, 11, 13);
            trace(secondRect); // (x=1, y=3, w=11, h=13)
            var thirdRect:Rectangle = new Rectangle(5, 8, 17, 19);
            trace(thirdRect);  // (x=5, y=8, w=17, h=19)
            var isContained:Boolean = secondRect.containsRect(thirdRect);
            trace(isContained); // false
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/scrollRect"><linktext>flash.display.DisplayObject.scrollRect</linktext></link><link href="flash.display.xml#BitmapData"><linktext>flash.display.BitmapData</linktext></link><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link><link href="flash.text.xml#TextField/getCharBoundaries()"><linktext>flash.text.TextField.getCharBoundaries()</linktext></link><link href="flash.geom.xml#Transform/pixelBounds"><linktext>flash.geom.Transform.pixelBounds</linktext></link><link href="flash.display.xml#Sprite/startDrag()"><linktext>flash.display.Sprite.startDrag()</linktext></link><link href="flash.printing.xml#PrintJob/addPage()"><linktext>flash.printing.PrintJob.addPage()</linktext></link></related-links><apiConstructor id="flash.geom:Rectangle:Rectangle"><apiName>Rectangle</apiName><shortdesc>
	左上隅が x パラメーターと y パラメーターで指定され、幅と高さが width パラメーター height パラメーターで指定された新しい Rectangle オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a new Rectangle with with specific parameters.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 10, 50, 100);
	trace(rect.toString()); // (x=5, y=10, w=50, h=100)
	</listing>
	 </maelexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>矩形の左上隅の <i>x</i> 座標です。
	</apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>矩形の左上隅の <i>y</i> 座標です。
	</apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>矩形の幅（ピクセル単位）です。
	</apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>矩形の高さ（ピクセル単位）です。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>x パラメーターと y パラメーターで指定された左上隅と、指定された幅と高さを使用して、新しい Rectangle オブジェクトを作成します。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	左上隅が <codeph>x</codeph> パラメーターと <codeph>y</codeph> パラメーターで指定され、<codeph>width</codeph> パラメーターと <codeph>height</codeph> パラメーターが指定された新しい Rectangle オブジェクトを作成します。パラメーターなしでこの関数を呼び出すと、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティが 0 に設定された矩形が作成されます。
	
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiConstructor><apiOperation id="flash.geom:Rectangle:clone"><apiName>clone</apiName><shortdesc>
	元の Rectangle オブジェクトと x、y、width、および height の各プロパティの値が同じである、新しい Rectangle オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example demonstrates the <code>clone</code> member.
	<listing version="2.0">
	import flash.geom.Rectangle;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	var shadow:Rectangle = rect.clone();
	shadow.offset(5, 5);
	trace(rect); // (x=1, y=2, w=4, h=8)
	trace(shadow); // (x=6, y=7, w=4, h=8)
	</listing>

	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元の Rectangle オブジェクトと <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティの値が同じである、新しい Rectangle オブジェクトです。
	
	</apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>この Rectangle オブジェクトのコピーを返します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	元の Rectangle オブジェクトと <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティの値が同じである、新しい Rectangle オブジェクトを返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:contains"><apiName>contains</apiName><shortdesc>
	指定されたポイントがこの Rectangle オブジェクトで定義される矩形領域内にあるかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Do the coordinates fall inside of the Rectangle?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(10, 10, 50, 50);
	var doesContain_1:Boolean = rect.contains(59, 59);
	trace(doesContain_1); // true
	var doesContain_2:Boolean = rect.contains(10, 10);
	trace(doesContain_2); // true
	var doesContain_3:Boolean = rect.contains(60, 60);
	trace(doesContain_3); // false
	</listing>

	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Rectangle オブジェクトに指定されたオブジェクトが含まれる場合は <codeph>true</codeph> を返します。含まれない場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ポイントの <i>x</i> 座標（水平位置）です。  
	</apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ポイントの <i>y</i> 座標（垂直位置）です。
	</apiDesc></apiParam><apiTipTexts><apiTipText>指定されたポイントが矩形領域内にあるかどうかを判別します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	指定されたポイントがこの Rectangle オブジェクトで定義される矩形領域内にあるかどうかを判別します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:containsPoint"><apiName>containsPoint</apiName><shortdesc>
	指定されたポイントがこの Rectangle オブジェクトで定義される矩形領域内にあるかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Do the specified Points fall inside of the Rectangle?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(10, 10, 50, 50);
	var containsPoint_1:Boolean = rect.containsPoint(new Point(10, 10));
	trace(containsPoint_1); // true
	var containsPoint_2:Boolean = rect.containsPoint(new Point(59, 59));
	trace(containsPoint_2); // true
	var containsPoint_3:Boolean = rect.containsPoint(new Point(60, 60));
	trace(containsPoint_3); // false
	</listing>
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Rectangle オブジェクトに指定されたオブジェクトが含まれる場合は <codeph>true</codeph> を返します。含まれない場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>point</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc><i>x</i> および <i>y</i> の座標値で表されるポイントです。  
	</apiDesc></apiParam><apiTipTexts><apiTipText>指定されたポイントが、Point オブジェクトをパラメーターとして使用したこの Rectangle オブジェクトで定義される矩形領域内にあるかどうかを判別します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	指定されたポイントがこの Rectangle オブジェクトで定義される矩形領域内にあるかどうかを判別します。このメソッドは、Point オブジェクトをパラメーターとして使用することを除けば、<codeph>Rectangle.contains()</codeph> メソッドと似ています。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/contains()"><linktext>contains()</linktext></link><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:containsRect"><apiName>containsRect</apiName><shortdesc>
	rect パラメーターで指定された Rectangle オブジェクトがこの Rectangle オブジェクト内にあるかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>A Rectangle is said to contain another if that second 
	Rectangle falls entirely within the boundaries of the first.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rectA:Rectangle = new Rectangle(10, 10, 50, 50);
	var rectB:Rectangle = new Rectangle(10, 10, 50, 50);
	var rectC:Rectangle = new Rectangle(10, 10, 51, 51);
	var rectD:Rectangle = new Rectangle(15, 15, 45, 45);
	var rectAContainsB:Boolean = rectA.containsRect(rectB); // true
	var rectAContainsC:Boolean = rectA.containsRect(rectC); // false
	var rectAContainsD:Boolean = rectA.containsRect(rectD); // true
	</listing>
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定した Rectangle オブジェクトがこの Rectangle オブジェクトに含まれる場合は <codeph>true</codeph> を返します。含まれない場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>rect</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>チェック対象の Rectangle オブジェクトです。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>rect パラメーターで指定された Rectangle オブジェクトがこの Rectangle オブジェクト内にあるかどうかを判別します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	<codeph>rect</codeph> パラメーターで指定された Rectangle オブジェクトがこの Rectangle オブジェクト内にあるかどうかを判別します。2 番目の Rectangle オブジェクトが最初の Rectangle オブジェクトの境界内に完全に収まる場合、最初の Rectangle オブジェクトは 2 番目の Rectangle オブジェクトを包含していると言います。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:equals"><apiName>equals</apiName><shortdesc>
	toCompare パラメーターで指定されたオブジェクトがこの Rectangle オブジェクトと等しいかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Even though the method signature only expects an abstract Object
	only other Rectangle instances will ever be treated as equal.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(0, 0, 50, 100);
	var nonRect:Object = new Object();
	nonRect.x = 0;
	nonRect.y = 0;
	nonRect.width = 50;
	nonRect.height = 100;
	trace(rect_1.equals(nonRect));
	</listing>
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> は、オブジェクトの <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティの値がこの Rectangle オブジェクトと等しいｋとを示します。等しくない場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>toCompare</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>この Rectangle オブジェクトと比較する矩形です。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>toCompare パラメーターで指定されたオブジェクトがこの Rectangle オブジェクトと等しいかどうかを判別します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	<codeph>toCompare</codeph> パラメーターで指定されたオブジェクトがこの Rectangle オブジェクトと等しいかどうかを判別します。このメソッドは、オブジェクトの <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティを、この Rectangle オブジェクトの同じプロパティと比較します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:inflate"><apiName>inflate</apiName><shortdesc>
	Rectangle オブジェクトのサイズを、指定された量（ピクセル単位）だけ大きくします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a Rectangle and increase its <code>width</code> by 16 ~~ 2 (32) and it's <code>height</code> by 32 ~~ 2 (64)
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	trace(rect.toString()); // (x=1, y=2, w=4, h=8)
	rect.inflate(16, 32);
	trace(rect.toString()); // (x=-15, y=-30, w=36, h=72)	
	</listing>
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Rectangle オブジェクトの左右に加わる値です。次の等式を使用して、矩形の新しい幅と位置が計算されます。
	
	<codeblock>
	x -= dx;
	width += 2 ~~ dx;
	</codeblock>
	
	</apiDesc></apiParam><apiParam><apiItemName>dy</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Rectangle オブジェクトの上下に加わる値です。次の等式を使用して、矩形の新しい高さと位置が計算されます。
	
	<codeblock>
	y -= dy;
	height += 2 ~~ dy;
	</codeblock>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Rectangle オブジェクトのサイズを、指定された量（ピクセル単位）だけ大きくします。Rectangle オブジェクトの中心点は変わりませんが、サイズは <codeph>dx</codeph> 値に応じて左右に大きくなり、<codeph>dy</codeph> 値に応じて上下に大きくなります。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:inflatePoint"><apiName>inflatePoint</apiName><shortdesc>
	 Rectangle オブジェクトのサイズを大きくします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a Rectangle and inflate it by the <i>x</i> <i>horizontal</i> and <i>y</i> <i>vertical</i> amounts found in Point
	 
	 <listing version="2.0">
	 import flash.geom.~~;
	 var rect:Rectangle = new Rectangle(0, 0, 2, 5);
	 var myPoint:Point = new Point(2, 2);
	 rect.inflatePoint(myPoint);
	 trace(rect.toString()); // (x=-2, y=-2, w=6, h=9)
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>この Point オブジェクトの <codeph>x</codeph> プロパティは、Rectangle オブジェクトの水平方向のサイズを大きくするために使用します。<codeph>y</codeph> プロパティは、Rectangle オブジェクトの垂直方向のサイズを大きくするために使用します。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Point オブジェクトをパラメーターとして使用して、Rectangle オブジェクトのサイズを大きくします。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Rectangle オブジェクトのサイズを大きくします。このメソッドは、Point オブジェクトをパラメーターとして使用することを除けば、<codeph>Rectangle.inflate()</codeph> メソッドと似ています。
	 
	  <p>次の 2 つのコード例の結果は同じになります。</p>
	 
	 <codeblock platform="actionscript">
	 var rect1:Rectangle = new Rectangle(0,0,2,5);
	 rect1.inflate(2,2)
	 </codeblock>
	 
	 <codeblock platform="actionscript">
	 var rect1:Rectangle = new Rectangle(0,0,2,5);
	 var pt1:Point = new Point(2,2);
	 rect1.inflatePoint(pt1)
	 </codeblock>
	 
	 <codeblock platform="javascript">
	 var rect1 = new air.Rectangle(0,0,2,5);
	 rect1.inflate(2,2)
	 </codeblock>
	 
	 <codeblock platform="javascript">
	 var rect1 = new air.Rectangle(0,0,2,5);
	 var pt1 = new air.Point(2,2);
	 rect1.inflatePoint(pt1)
	 </codeblock>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:intersection"><apiName>intersection</apiName><shortdesc>
	toIntersect パラメーターで指定された Rectangle オブジェクトがこの Rectangle オブジェクトと交差する場合に、交差領域を Rectangle オブジェクトとして返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>What area overlaps <code>rect_1</code> between <code>rect_2</code>?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(0, 0, 50, 50);
	var rect_2:Rectangle = new Rectangle(25, 25, 100, 100);
	var intersectingArea:Rectangle = rect_1.intersection(rect_2);
	trace(intersectingArea.toString()); // (x=25, y=25, w=25, h=25)
	</listing>
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>交差領域と等しい Rectangle オブジェクトです。矩形が交差しない場合、このメソッドは <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティが 0 に設定された空の Rectangle オブジェクトを返します。
	
	</apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>toIntersect</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>この Rectangle オブジェクトと交差するかどうかを調べる対象の Rectangle オブジェクトです。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>交差領域を返します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	<codeph>toIntersect</codeph> パラメーターで指定された Rectangle オブジェクトがこの Rectangle オブジェクトと交差する場合に、交差領域を Rectangle オブジェクトとして返します。矩形が交差しない場合、このメソッドは、プロパティが 0 に設定された空の Rectangle オブジェクトを返します。
	
    <p><adobeimage alt="結果として生成される交差矩形。" href="../../images/rectangle_intersect.jpg"/></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:intersects"><apiName>intersects</apiName><shortdesc>
	toIntersect パラメーターで指定されたオブジェクトがこの Rectangle オブジェクトと交差するかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Does <code>rect_1</code> intersect with <code>rect_2</code>?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rectA:Rectangle = new Rectangle(10, 10, 50, 50);
	var rectB:Rectangle = new Rectangle(59, 59, 50, 50);
	var rectC:Rectangle = new Rectangle(60, 60, 50, 50);
	var rectAIntersectsB:Boolean = rectA.intersects(rectB);
	var rectAIntersectsC:Boolean = rectA.intersects(rectC);
	trace(rectAIntersectsB); // true
	trace(rectAIntersectsC); // false
	
	var firstPixel:Rectangle = new Rectangle(0, 0, 1, 1);
	var adjacentPixel:Rectangle = new Rectangle(1, 1, 1, 1);
	var pixelsIntersect:Boolean = firstPixel.intersects(adjacentPixel);
	trace(pixelsIntersect); // false
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたオブジェクトがこの Rectangle オブジェクトと交差する場合は <codeph>true</codeph> を返します。交差しない場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>toIntersect</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>この Rectangle オブジェクトと比較する Rectangle オブジェクトです。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>toIntersect パラメーターで指定されたオブジェクトがこの Rectangle オブジェクトと交差するかどうかを判別します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	<codeph>toIntersect</codeph> パラメーターで指定されたオブジェクトがこの Rectangle オブジェクトと交差するかどうかを判別します。このメソッドは、指定された Rectangle オブジェクトの <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティをチェックして、この Rectangle オブジェクトと交差するかどうかを調べます。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:isEmpty"><apiName>isEmpty</apiName><shortdesc>
	この Rectangle オブジェクトが空かどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a non-empty Rectangle and make it become empty.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	trace(rect.isEmpty()); // false
	rect.width = 0;
	trace(rect.isEmpty()); // true
	rect.width = 4;
	trace(rect.isEmpty()); // false
	rect.height = 0;
	trace(rect.isEmpty()); // true
	</listing>
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Rectangle オブジェクトの幅と高さが 0 以下の場合は <codeph>true</codeph> を返します。それ以外の場合は <codeph>false</codeph> を返します。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	この Rectangle オブジェクトが空かどうかを判別します。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:offset"><apiName>offset</apiName><shortdesc>
	 Rectangle オブジェクトの位置（左上隅で決定される）を、指定された量だけ調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a Rectangle and offset it's <i>x</i> and <i>y</i> values by 5 and 10 respectively
	 
	 <listing version="2.0">
	 import flash.geom.~~;
	 var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	 rect.offset(16, 32);
	 trace(rect.toString()); // (x=17, y=34, w=4, h=8)
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Rectangle オブジェクトの <i>x</i> 値をこの量だけ移動します。
	 </apiDesc></apiParam><apiParam><apiItemName>dy</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Rectangle オブジェクトの <i>y</i> 値をこの量だけ移動します。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Rectangle オブジェクトの位置を調整します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Rectangle オブジェクトの位置（左上隅で決定される）を、指定された量だけ調整します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:offsetPoint"><apiName>offsetPoint</apiName><shortdesc>
	 Point オブジェクトをパラメーターとして使用して、Rectangle オブジェクトの位置を調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Offset a Rectangle by using the values found in a Point
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	var myPoint:Point = new Point(16, 32);
	rect.offsetPoint(myPoint);
	trace(rect.toString()); // (x=17, y=34, w=4, h=8)
	</listing>
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>この Rectangle オブジェクトをオフセットするための Point オブジェクトです。
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>Point オブジェクトをパラメーターとして使用して、Rectangle オブジェクトの位置を調整します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Point オブジェクトをパラメーターとして使用して、Rectangle オブジェクトの位置を調整します。このメソッドは、Point オブジェクトをパラメーターとして使用することを除けば、<codeph>Rectangle.offset()</codeph> メソッドと似ています。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:setEmpty"><apiName>setEmpty</apiName><shortdesc>
	Rectangle オブジェクトのすべてのプロパティを 0 に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a non-empty Rectangle and make it empty.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 10, 50, 100);
	trace(rect.isEmpty()); // false
	rect.setEmpty();
	trace(rect.isEmpty()); // true
	</listing>
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiTipTexts><apiTipText>すべてのプロパティを 0 に設定します。
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	Rectangle オブジェクトのすべてのプロパティを 0 に設定します。その幅または高さが 0 以下の場合、Rectangle オブジェクトは空です。
	
	<p> このメソッドは、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティの値を 0 に設定します。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:toString"><apiName>toString</apiName><shortdesc>
	Rectangle オブジェクトの水平位置と垂直位置、および幅と高さを列挙するストリングを作成して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Concatenate a String representation of <code>rect_1</code> with some helpful 
	debugging text.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(0, 0, 50, 100);
	trace("Rectangle 1 : " + rect_1.toString()); // Rectangle 1 : (x=0, y=0, w=50, h=100)
	</listing>
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Rectangle オブジェクトの <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティの値を列挙するストリング。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Rectangle オブジェクトの水平位置と垂直位置、および幅と高さを列挙するストリングを作成して返します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:union"><apiName>union</apiName><shortdesc> 
	 2 つの矩形間の水平と垂直の空間を塗りつぶすことにより、2 つの矩形を加算して新しい Rectangle オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a new Rectangle out of the Union of two others.
	<p>For example, consider a rectangle with properties <code>x=20</code>, <code>y=50</code>, <code>width=60</code>, and 
	<code>height=30</code> (20, 50, 60, 30) and a second rectangle with properties (150, 130, 50, 30). 
	The union of these two rectangles would be a larger rectangle encompassing the two rectangles 
	with the properties (20, 50, 180, 110).</p>
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(20, 50, 60, 30);
	var rect_2:Rectangle = new Rectangle(150, 130, 50, 30);
	var combined:Rectangle = rect_1.union(rect_2);
	trace(combined.toString()); // (x=20, y=50, w=180, h=110)
	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>2 つの矩形の和集合である新しい Rectangle オブジェクトです。
	
	</apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>toUnion</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>この Rectangle オブジェクトに追加する Rectangle オブジェクトです。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>2 つの矩形を加算して新しい Rectangle オブジェクトを作成します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc> 
	 2 つの矩形間の水平と垂直の空間を塗りつぶすことにより、2 つの矩形を加算して新しい Rectangle オブジェクトを作成します。
	 
    <p><adobeimage alt="結果として生成される和集合矩形。" href="../../images/rectangle_union.jpg"/></p>
	<p><b>注意：</b><codeph>union()</codeph> メソッドは、高さまたは幅の値が <codeph>0</codeph> である矩形（<codeph>var rect2:Rectangle = new Rectangle(300,300,50,0);</codeph> など）を無視します。</p>
	
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Rectangle:height"><apiName>height</apiName><shortdesc>
	矩形の高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a Rectangle and change its <i>width</i> property 
	from 10 to 20. Notice that <code>rect.right</code> is also
	changed.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.width); // 10
	trace(rect.right); // 15
	rect.width = 20;
	trace(rect.width); // 20
	trace(rect.right); // 25
	</listing>
	
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>矩形の高さ（ピクセル単位）です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	矩形の高さ（ピクセル単位）です。Rectangle オブジェクトの <codeph>height</codeph> の値を変更しても、<codeph>x</codeph>、<codeph>y</codeph>、および <codeph>width</codeph> の各プロパティに影響はありません。
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:width"><apiName>width</apiName><shortdesc>
	矩形の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a Rectangle object and change its <code>width</code> property 
	from 10 to 20. Notice that <code>rect.right</code> also
	changes.

	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.width); // 10
	trace(rect.right); // 15
	rect.width = 20;
	trace(rect.width); // 20
	trace(rect.right); // 25
	</listing>
    </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>矩形の幅です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	矩形の幅（ピクセル単位）です。Rectangle オブジェクトの <codeph>width</codeph> の値を変更しても、<codeph>x</codeph>、<codeph>y</codeph>、および <codeph>height</codeph> の各プロパティに影響はありません。
	
	<p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:x"><apiName>x</apiName><shortdesc>
	矩形の左上隅の x 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates an empty Rectangle and sets its <i>x</i> property 
	to 10. Notice that <code>rect.left</code> is also changed.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.x); // 0
	trace(rect.left); // 0
	rect.x = 10;
	trace(rect.x); // 10
	trace(rect.left); // 10
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>矩形の左上隅の x 座標です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	矩形の左上隅の <i>x</i> 座標です。Rectangle オブジェクトの <codeph>x</codeph> プロパティ値を変更しても、<codeph>y</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティに影響はありません。 
	
	<p><codeph>x</codeph> プロパティの値は、<codeph>left</codeph> プロパティの値と等価です。</p>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/left"><linktext>left</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:y"><apiName>y</apiName><shortdesc>
	矩形の左上隅の y 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates an empty Rectangle and sets its <i>y</i> property
	to 10. Notice that <code>rect.top</code> is also changed.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.y); // 0
	trace(rect.top); // 0
	rect.y = 10;
	trace(rect.y); // 10
	trace(rect.top); // 10
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>左上隅の y 座標です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	矩形の左上隅の <i>y</i> 座標です。Rectangle オブジェクトの <codeph>y</codeph> プロパティ値を変更しても、<codeph>x</codeph>、<codeph>width</codeph>、および <codeph>height</codeph> の各プロパティに影響はありません。
	
	<p><codeph>y</codeph> プロパティの値は、<codeph>top</codeph> プロパティの値と等価です。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link><link href="flash.geom.xml#Rectangle/top"><linktext>top</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:bottom:get"><apiName>bottom</apiName><shortdesc>
	y プロパティと height プロパティの合計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a Rectangle and change its <i>bottom</i> property 
	from 15 to 30. Notice that <code>rect.height</code> is also
	changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.height); // 10
	trace(rect.bottom); // 15
	rect.bottom = 30;
	trace(rect.height); // 25
	trace(rect.bottom); // 30
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>y プロパティと height プロパティの合計です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	<codeph>y</codeph> プロパティと <codeph>height</codeph> プロパティの合計です。
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:bottomRight:get"><apiName>bottomRight</apiName><shortdesc>
	Rectangle オブジェクトの右下隅の位置で、right プロパティと bottom プロパティの値で決まります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Get the Rectangle <code>bottomRight</code> property as a Point object.
	<listing version="2.0">
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	trace(rect.bottom); // 5
	trace(rect.right); // 10
	var myBottomRight:Point = rect.bottomRight;
	trace(myBottomRight.x); // 5
	trace(myBottomRight.y); // 10
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Point</apiValueClassifier><apiTipTexts><apiTipText>Rectangle オブジェクトの右下隅の位置で、そのポイントの right プロパティと bottom プロパティで決まります。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	Rectangle オブジェクトの右下隅の位置で、<codeph>right</codeph> プロパティと <codeph>bottom</codeph> プロパティの値で決まります。
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:left:get"><apiName>left</apiName><shortdesc>
	矩形の左上隅の x 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Change the <i>left</i> property and notice that 
	<code>rect.x</code> is also changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.left); // 0
	trace(rect.x); // 0
	rect.left = 10;
	trace(rect.left); // 10
	trace(rect.x); // 10
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>矩形の左上隅の x 座標です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	矩形の左上隅の <i>x</i> 座標です。Rectangle オブジェクトの <codeph>left</codeph> プロパティ値を変更しても、<codeph>y</codeph> および <codeph>height</codeph> の各プロパティに影響はありません。ただし、<codeph>width</codeph> プロパティには影響します。一方、<codeph>x</codeph> 値を変更しても <i/><codeph>width</codeph> プロパティに影響はありません。
	
	<p><codeph>left</codeph> プロパティの値は、<codeph>x</codeph> プロパティの値と等価です。</p>
	
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:right:get"><apiName>right</apiName><shortdesc>
	x プロパティと width プロパティの合計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a Rectangle and change its <i>right</i> property 
	from 15 to 30. Notice that <code>rect.width</code> is also
	changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.width); // 10
	trace(rect.right); // 15
	rect.right = 30;
	trace(rect.width); // 25
	trace(rect.right); // 30
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>x プロパティと width プロパティの合計です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	<codeph>x</codeph> プロパティと <codeph>width</codeph> プロパティの合計です。
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:size:get"><apiName>size</apiName><shortdesc>
	Rectangle オブジェクトのサイズで、width プロパティと height プロパティの値を持つ Point オブジェクトとして表現されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a new Rectangle, retrieves it's <code>size</code>,
	changes the <code>size</code> and sets the new values on the Rectangle instance.
	It is critical to remember that the <code>Point</code> object used by <code>size</code>
	uses x and y values to represent the <code>width</code> and <code>height</code> properties
	of the Rectangle.
	<listing version="2.0">
	import flash.geom.Rectangle;
	import flash.geom.Point;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	
	var size:Point = rect.size;
	trace(size.x); // 4;
	trace(size.y); // 8;
	
	size.x = 16;
	size.y = 32;
	rect.size = size;
	trace(rect.x); // 1
	trace(rect.y); // 2
	trace(rect.width); // 16
	trace(rect.height); // 32
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Point</apiValueClassifier><apiTipTexts><apiTipText>Rectangle オブジェクトのサイズで、width と height の値を持つ Point オブジェクトとして表現されます。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	Rectangle オブジェクトのサイズで、<codeph>width</codeph> プロパティと <codeph>height</codeph> プロパティの値を持つ Point オブジェクトとして表現されます。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:top:get"><apiName>top</apiName><shortdesc>
	矩形の左上隅の y 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Change the <i>top</i> property and notice that 
	<code>rect.y</code> is also changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.top); // 0
	trace(rect.y); // 0
	rect.top = 10;
	trace(rect.top); // 10
	trace(rect.y); // 10
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>矩形の左上隅の y 座標です。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	矩形の左上隅の <i>y</i> 座標です。Rectangle オブジェクトの <codeph>top</codeph> プロパティ値を変更しても、<codeph>x</codeph> および <codeph>width</codeph> の各プロパティに影響はありません。ただし、<codeph>height</codeph> プロパティには影響します。一方、<codeph>y</codeph> 値を変更しても <i/><codeph>height</codeph> プロパティに影響はありません。
	
	<p><codeph>top</codeph> プロパティの値は、<codeph>y</codeph> プロパティの値と等価です。</p>
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link><link href="flash.geom.xml#Rectangle/width"><linktext>width</linktext></link><link href="flash.geom.xml#Rectangle/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:topLeft:get"><apiName>topLeft</apiName><shortdesc>
	Rectangle オブジェクトの左上隅の位置で、そのポイントの x 座標と y 座標で決まります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Get the Rectangle <code>topLeft</code> property as a Point object.
	<listing version="2.0">
	var rect:Rectangle = new Rectangle(5, 15);
	var myTopLeft:Point = rect.topLeft;
	trace(myTopLeft.x); // 5;
	trace(myTopLeft.y); // 15;
	</listing>
	</maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Point</apiValueClassifier><apiTipTexts><apiTipText>Rectangle オブジェクトの左上隅の位置で、そのポイントの x 座標と y 座標で決まります。
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc>
	Rectangle オブジェクトの左上隅の位置で、そのポイントの <i>x</i> 座標と <i>y</i> 座標で決まります。
	
    <p><adobeimage alt="位置プロパティと測定プロパティを示す矩形イメージ。" href="../../images/rectangle.jpg"/></p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Point"><linktext>flash.geom.Point</linktext></link><link href="flash.geom.xml#Rectangle/x"><linktext>x</linktext></link><link href="flash.geom.xml#Rectangle/y"><linktext>y</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.geom:ColorTransform"><apiName>ColorTransform</apiName><shortdesc>
 ColorTransform クラスを使用すると、表示オブジェクトのカラー値を調整することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ColorTransform クラスを使用すると、表示オブジェクトのカラー値を調整することができます。カラー調整、つまり "カラー変換" は、赤、緑、青、アルファ透明度の 4 つのチャンネルすべてに適用できます。<i/>
 
 <p>ColorTransform オブジェクトを表示オブジェクトに適用するときに、各カラーチャンネルの新しい値を算出する方法は次のとおりです。</p>
 
 <ul>
 <li>新しい red 値 = (古い red 値 * <codeph>redMultiplier</codeph> ) + <codeph>redOffset</codeph></li>
 <li>新しい green 値 = (古い green 値 * <codeph>greenMultiplier</codeph> ) + <codeph>greenOffset</codeph></li>
 <li>新しい blue 値 = (古い blue 値 * <codeph>blueMultiplier</codeph> ) + <codeph>blueOffset</codeph></li>
 <li>新しい alpha 値 = (古い alpha 値 * <codeph>alphaMultiplier</codeph> ) + <codeph>alphaOffset</codeph></li>
 </ul>
 
 <p>算出後、カラーチャンネル値が 255 よりも大きい場合は 255 に設定されます。0 より小さい場合は 0 に設定されます。</p>
 
 <p>ColorTransform オブジェクトは次のように使用できます。</p>
 
 <ul>
 
 	<li><codeph>colorTransform</codeph> パラメーター（BitmapData クラスの <codeph>colorTransform()</codeph> メソッド）に設定します。</li>
 
 	<li>Transform オブジェクトの <codeph>colorTransform</codeph> プロパティとして使用します。Transform オブジェクトは表示オブジェクトの <codeph>transform</codeph> プロパティとして使用できます。</li>
 
 </ul>
 
 <p>ColorTransform オブジェクトのメソッドを呼び出すには、コンストラクター <codeph>new ColorTransform()</codeph> を使用して ColorTransform オブジェクトを作成する必要があります。</p>
 
 <p>カラー変換は、ムービークリップ（ロードした SWF オブジェクトなど）の背景色には適用されません。ムービークリップに割り当てられているグラフィックとシンボルにのみ適用されます。</p>
 
 </apiDesc><example conref="examples\ColorTransformExample.as"> 次の例では、TransformExample クラスを使用して、グラデーションのパターンで塗りつぶされた正方形のシェイプの単純なスプライトを作成します。ユーザーが正方形をクリックするたびに、アプリケーションは正方形のスプライトのカラーを変換します。変換時は赤のカラーチャンネルを濃くし、青のカラーチャンネルを薄くします。これを行うには、以下の手順を実行します。
 
 <ol>
     <li>コンストラクターが新しい Sprite オブジェクト <codeph>target</codeph> を作成します。</li>
 
     <li><codeph>CustomButton()</codeph> コンストラクターは <codeph>draw()</codeph> メソッドを呼び出します。このメソッドは、グラデーションの四角形をスプライトに描画します。</li>
 
     <li><codeph>CustomButton()</codeph> コンストラクターはスプライトに click イベントリスナーを追加します。これは <codeph>clickHandler()</codeph> メソッドによって処理されます。  </li>
 
     <li><codeph>clickHandler()</codeph> メソッドでは、2 つのプロパティが現在のカラー変換の <codeph>redOffset</codeph> プロパティと <codeph>blueOffset</codeph> プロパティに設定されます。それぞれ 25 に調整されます。次に正方形のスプライトの <codeph>transform.colorTransform</codeph> プロパティが新しいオフセット値を使用するように変更されます。ユーザーが正方形をクリックするたびに、<codeph>clickHandler()</codeph> メソッドを呼び出して、赤のカラー値を増やし、青のカラー値を減らして、正方形の色を変更します。  </li>
  </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.GradientType;
    import flash.geom.ColorTransform;
    import flash.events.MouseEvent;

    public class ColorTransformExample extends Sprite {
        public function ColorTransformExample() {
            var target:Sprite = new Sprite();
            draw(target);
            addChild(target);
            target.useHandCursor = true;
            target.buttonMode = true;
            target.addEventListener(MouseEvent.CLICK, clickHandler)
        }
        public function draw(sprite:Sprite):void {
            var red:uint = 0xFF0000;
            var green:uint = 0x00FF00;
            var blue:uint = 0x0000FF;
            var size:Number = 100;
            sprite.graphics.beginGradientFill(GradientType.LINEAR, [red, blue, green], [1, 0.5, 1], [0, 200, 255]);
            sprite.graphics.drawRect(0, 0, 100, 100);
        }
        public function clickHandler(event:MouseEvent):void {
            var rOffset:Number = transform.colorTransform.redOffset + 25;
            var bOffset:Number = transform.colorTransform.redOffset - 25;
            this.transform.colorTransform = new ColorTransform(1, 1, 1, 1, rOffset, 0, bOffset, 0);
        }
    }
}    
</codeblock></example></apiClassifierDetail><related-links><link href="flash.geom.xml#Transform"><linktext>flash.geom.Transform</linktext></link><link href="flash.display.xml#DisplayObject/transform"><linktext>flash.display.DisplayObject.transform</linktext></link><link href="flash.display.xml#BitmapData/colorTransform()"><linktext>flash.display.BitmapData.colorTransform()</linktext></link></related-links><apiConstructor id="flash.geom:ColorTransform:ColorTransform"><apiName>ColorTransform</apiName><shortdesc>
	 指定されたカラーチャンネル値とアルファ値を持つ ColorTransform オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>new ColorTransform, constructor
 	 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>redMultiplier</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>赤の乗数の値（0 ～ 1）です。
	 </apiDesc></apiParam><apiParam><apiItemName>greenMultiplier</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>緑の乗数の値（0 ～ 1）です。
	 </apiDesc></apiParam><apiParam><apiItemName>blueMultiplier</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>青の乗数の値（0 ～ 1）です。
	 </apiDesc></apiParam><apiParam><apiItemName>alphaMultiplier</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>アルファ透明度の乗数の値（0 ～ 1）です。
	 </apiDesc></apiParam><apiParam><apiItemName>redOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>赤のカラーチャンネルのオフセット値（-255 ～ 255）です。
	 </apiDesc></apiParam><apiParam><apiItemName>greenOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>緑のカラーチャンネルのオフセット値（-255 ～ 255）です。
	 </apiDesc></apiParam><apiParam><apiItemName>blueOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>青のカラーチャンネルのオフセット値（-255 ～ 255）です。
	 </apiDesc></apiParam><apiParam><apiItemName>alphaOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>アルファ透明度のチャンネル値のオフセット（-255 ～ 255）です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>表示オブジェクト用の ColorTransform オブジェクトを作成します。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 指定されたカラーチャンネル値とアルファ値を持つ ColorTransform オブジェクトを作成します。 
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:ColorTransform:concat"><apiName>concat</apiName><shortdesc>
	 2 番目のパラメーターで指定された ColorTranform オブジェクトと現在の ColorTransform オブジェクトを連結し、2 つのカラー変換を加算的に組み合わせた結果を現在のオブジェクトに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example concatenates the ColorTransform object <code>colorTrans_2</code>
	to <code>colorTrans_1</code> resulting in a full red offset combined with a .5 alpha multiplier.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans_1:ColorTransform = new ColorTransform(1, 1, 1, 1, 255, 0, 0, 0);
	trace(colorTrans_1);		// (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=255, greenOffset=0, blueOffset=0, alphaOffset=0)
	
	var colorTrans_2:ColorTransform = new ColorTransform(1, 1, 1, .5, 0, 0, 0, 0);
	trace(colorTrans_2);		// (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=0.5, redOffset=0, greenOffset=0, blueOffset=0, alphaOffset=0)
	
	colorTrans_1.concat(colorTrans_2);
	trace(colorTrans_1);		// (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=0.5, redOffset=255, greenOffset=0, blueOffset=0, alphaOffset=0)
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans_1;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>second</apiItemName><apiOperationClassifier>flash.geom:ColorTransform</apiOperationClassifier><apiDesc>現在の ColorTransform オブジェクトと結合する ColorTransform オブジェクトです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>second</codeph> パラメーターで指定された ColorTranform オブジェクトと現在の ColorTransform オブジェクトを連結し、2 つのカラー変換を加算的に組み合わせた結果を現在のオブジェクトに設定します。連結された ColorTransform オブジェクトを適用する場合、その効果は <codeph>second</codeph> のカラー変換を元のカラー変換の後に適用した場合と同じです。<i/>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:ColorTransform:toString"><apiName>toString</apiName><shortdesc>
	 ColorTransform オブジェクトのすべてのプロパティが列挙されたストリングを書式設定して返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and calls its <code>toSting()</code> method.  This method results in a string with the format
	(redMultiplier=RM, greenMultiplier=GM, blueMultiplier=BM, alphaMultiplier=AM, redOffset=RO, greenOffset=GO, blueOffset=BO, alphaOffset=AO).
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
 	var colorTrans:ColorTransform = new ColorTransform(1, 2, 3, 4, -255, -128, 128, 255);
 	trace(colorTrans.toString());		// (redMultiplier=1, greenMultiplier=2, blueMultiplier=3, alphaMultiplier=4, redOffset=-255, greenOffset=-128, blueOffset=128, alphaOffset=255)
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ColorTransform オブジェクトのすべてのプロパティを列挙するストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ColorTransform オブジェクトのすべてのプロパティが列挙されたストリングを書式設定して返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:ColorTransform:alphaMultiplier"><apiName>alphaMultiplier</apiName><shortdesc>
	 アルファ透明度チャンネル値に乗算する 10 進数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>alphaMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	import flash.geom.Transform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.alphaMultiplier);		// 1
	
	colorTrans.alphaMultiplier = .5;	
	trace(colorTrans.alphaMultiplier);		// .5
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 アルファ透明度チャンネル値に乗算する 10 進数値です。
	 
	 <p>DisplayObject インスタンスの <codeph>alpha</codeph> プロパティを使用して表示オブジェクトのアルファ透明度の値を直接設定すると、<codeph>alphaMultiplier</codeph> プロパティ値（その表示オブジェクトの <codeph>transform.colorTransform</codeph> プロパティ）に影響します。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.geom:ColorTransform:alphaOffset"><apiName>alphaOffset</apiName><shortdesc>
	 アルファ透明度チャンネル値に alphaMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>alphaOffset</code> from 0 to -128.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.alphaOffset);			// 0
	
	colorTrans.alphaOffset = -128;
	trace(colorTrans.alphaOffset);			// -128
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>アルファ透明度チャンネル値に alphaMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
   	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 アルファ透明度チャンネル値に <codeph>alphaMultiplier</codeph> 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:blueMultiplier"><apiName>blueMultiplier</apiName><shortdesc>
	 青チャンネル値に乗算する 10 進数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>blueMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.blueMultiplier);		// 1
	
	colorTrans.blueMultiplier = .5;
	trace(colorTrans.blueMultiplier);		// .5
	
	var rect:MovieClip = createRectangle(20, 80, 0x0000FF);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 青チャンネル値に乗算する 10 進数値です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:blueOffset"><apiName>blueOffset</apiName><shortdesc>
	 青チャンネル値に blueMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>blueOffset</code> from 0 to 255.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.blueOffset);			// 0
	
	colorTrans.blueOffset = 255;
	trace(colorTrans.blueOffset);			// 255
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>青チャンネル値に blueMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 青チャンネル値に <codeph>blueMultiplier</codeph> 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:greenMultiplier"><apiName>greenMultiplier</apiName><shortdesc>
	 緑チャンネル値に乗算する 10 進数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>greenMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.greenMultiplier);		// 1
	
	colorTrans.greenMultiplier = .5;
	trace(colorTrans.greenMultiplier);		// .5
	
	var rect:MovieClip = createRectangle(20, 80, 0x00FF00);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 緑チャンネル値に乗算する 10 進数値です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:greenOffset"><apiName>greenOffset</apiName><shortdesc>
	 緑チャンネル値に greenMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>greenOffset</code> from 0 to 255.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.greenOffset);			// 0
	
	colorTrans.redOffset = 255;
	trace(colorTrans.greenOffset);			// 255
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>緑チャンネル値に greenMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 緑チャンネル値に <codeph>greenMultiplier</codeph> 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:redMultiplier"><apiName>redMultiplier</apiName><shortdesc>
	 赤チャンネル値に乗算する 10 進数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>redMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
 	var colorTrans:ColorTransform = new ColorTransform();
 	trace(colorTrans.redMultiplier);		// 1
 	
 	colorTrans.redMultiplier = .5;
 	trace(colorTrans.redMultiplier);		// .5
 	
 	var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
 	var trans:Transform = new Transform(rect);
 	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 赤チャンネル値に乗算する 10 進数値です。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:redOffset"><apiName>redOffset</apiName><shortdesc>
	 赤チャンネル値に redMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>redOffset</code> from 0 to 255.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.redOffset);			// 0
	
	colorTrans.redOffset = 255;
	trace(colorTrans.redOffset);			// 255
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>赤チャンネル値に redMultiplier 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 赤チャンネル値に <codeph>redMultiplier</codeph> 値を乗算した後に加算する数値です。数値の範囲は -255 ～ 255 です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:color:get"><apiName>color</apiName><shortdesc>
	 ColorTransform オブジェクトの RGB カラー値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><oldexample>This example sets the RGB color value for the movie clip <code>my_mc</code>.<span class="flashonly"> To see this code work, place a movie clip on the Stage with the instance name <code>my_mc</code>. Then place the following code on Frame 1 in the main Timeline and select Control > Test Movie:</span>
	 <pre>
	 <code>var my_color:Color = new Color(my_mc);</code>
	 <code>my_color.setRGB(0xFF0000); // my_mc turns red</code>
	 </pre>
	  
	  </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ColorTransform オブジェクトの RGB カラー値です。
	 
	 <p>このプロパティを設定すると、それに応じて 3 つのカラーオフセット値（<codeph>redOffset</codeph>、<codeph>greenOffset</codeph>、<codeph>blueOffset</codeph>）が変更され、3 つのカラー乗数値（<codeph>redMultiplier</codeph>、<codeph>greenMultiplier</codeph>、<codeph>blueMultiplier</codeph>）が 0 に設定されます。 アルファ透明度の乗数値とオフセット値は変更されません。</p>
	 
	 <p>このプロパティに値を渡す場合は、書式 0x <i>RRGGBB</i> を使用します。 <i>RR</i>、<i>GG</i>、および <i>BB</i> はそれぞれ、各カラー成分のオフセットを指定する 2 桁の 16 進数で構成されます。0x は、数値が 16 進数であることを ActionScript コンパイラーに伝えるものです。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.geom:Point"><apiName>Point</apiName><shortdesc>
 Point オブジェクトは 2 次元の座標系の位置を表します。x は水平方向の軸を表し、y は垂直方向の軸を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Point クラスは、2 次元の座標系内の位置を表します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Point オブジェクトは 2 次元の座標系の位置を表します。<i>x</i> は水平方向の軸を表し、<i>y</i> は垂直方向の軸を表します。 
 
 <p>次のコードでは、位置 (0,0) に配置されるポイントを作成します。</p>
 
 <codeblock platform="actionscript">var myPoint:Point = new Point();</codeblock>
 
 <codeblock platform="javascript">var myPoint = new Point();</codeblock>
 
 <p>次のクラスのメソッドとプロパティで Point オブジェクトを使用します。</p>
 
 <ul>
 
 <li platform="actionscript">BitmapData</li>
 
 <li platform="actionscript">DisplayObject</li>
 
 <li platform="actionscript">DisplayObjectContainer</li>
 
 <li platform="actionscript">DisplacementMapFilter</li>
 
 <li>NativeWindow</li>
 
 <li platform="actionscript">Matrix</li>
 
 <li>Rectangle</li>
 
 </ul>
 
 <p>Point オブジェクトを作成するには、<codeph>new Point()</codeph> コンストラクターを使用します。</p>
 
 </apiDesc><example conref="examples\PointExample.as"> 次の例では、PointExample クラスを使用して多数の新しい Point オブジェクトをさまざまな <i>x,y</i> 座標に作成し、<codeph>trace()</codeph> メソッドを使用して各種クラスメソッドの結果を出力します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.geom.Point;

    public class PointExample extends Sprite {

        public function PointExample() {
        var point1:Point = new Point();
        trace(point1);  // (x=0, y=0)
        
        var point2:Point = new Point(6, 8);
        trace(point2); // (x=6, y=8)
        
        trace(Point.interpolate(point1, point2, 0.5)); // (x=3, y=4)
        
        trace(Point.distance(point1, point2)); // 10
        
        trace(point1.add(point2)); // (x=6, y=8)
        
        var point3:Point = point2.clone();
        trace(point2.equals(point3)); // true
        
        point3.normalize(2.5);
        trace(point3); // (x=1.5, y=2)
        
        trace(point2.subtract(point3)); // (x=4.5, y=6)
        
        trace(point1.offset(2, 3)); // 
        
        var angle:Number = Math.PI * 2 * (30 / 360); // 30Â°
        trace(Point.polar(4, angle)) // (x=3.464101615137755, y=1.9999999999999998)   
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#BitmapData"><linktext>flash.display.BitmapData</linktext></link><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.display.xml#DisplayObjectContainer"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flash.filters.xml#DisplacementMapFilter"><linktext>flash.filters.DisplacementMapFilter</linktext></link><link href="flash.geom.xml#Matrix"><linktext>flash.geom.Matrix</linktext></link><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link></related-links><apiConstructor id="flash.geom:Point:Point"><apiName>Point</apiName><shortdesc>
	 新しいポイントを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The first example creates <code>point_1</code> with the default constructor.
	 <listing version="2.0">
	 import flash.geom.Point;
	 var point_1:Point = new Point();
	 trace(point_1.x); // 0
	 trace(point_1.y); // 0
	 </listing>
	 The second example creates <code>point_2</code> with the coordinates x = 1 and y = 2.
     <listing version="2.0">
	 import flash.geom.Point;
	 var point_2:Point = new Point(1, 2);
	 trace(point_2.x); // 1
	 trace(point_2.y); // 2
	 </listing>
	 
	  
	 </maelexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>水平座標です。 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>垂直座標です。 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しいポイントを作成します。パラメーターを渡さずにこのメソッドを呼び出すと、(0,0) にポイントが作成されます。
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:Point:add"><apiName>add</apiName><shortdesc>
      	 このポイントの座標に他のポイントの座標を加算して、新しいポイントを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a Point object <code>resultPoint</code> by adding <code>point_2</code> to 
	 <code>point_1</code>.
   	 
   	 <listing version="2.0">
   	 import flash.geom.Point;
   	 var point_1:Point = new Point(4, 8);
   	 var point_2:Point = new Point(1, 2);
   	 var resultPoint:Point = point_1.add(point_2);
   	 trace(resultPoint.toString()); // (x=5, y=10)
   	 </listing>
	 
   	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新しいポイントです。
   	 
	 </apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>追加するポイントです。
	 
      	 </apiDesc></apiParam></apiOperationDef><apiDesc>
      	 このポイントの座標に他のポイントの座標を加算して、新しいポイントを作成します。
	 
      	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:clone"><apiName>clone</apiName><shortdesc>
	 この Point オブジェクトのコピーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a <code>clonedPoint</code> from the values found in 
 	 <code>myPoint</code>.  The <code>clonedPoint</code> contains all the
	 the values from <code>myPoint</code> but is not the same object.
	 
	 <listing version="2.0">
	 import flash.geom.Point;
	 var myPoint:Point = new Point(1, 2);
	 var clonedPoint:Point = myPoint.clone();
	 trace(clonedPoint.x); // 1
	 trace(clonedPoint.y); // 2
	 trace(myPoint.equals(clonedPoint)); // true
	 trace(myPoint === clonedPoint); // false
	 </listing>
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新しい Point オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>Point オブジェクトのコピーを作成します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 この Point オブジェクトのコピーを作成します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:distance"><apiName>distance</apiName><shortdesc>
	 pt1 と pt2 との距離を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>最初のポイントと 2 番目のポイント間の距離です。
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>pt1</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>最初のポイントです。
	 </apiDesc></apiParam><apiParam><apiItemName>pt2</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>2 番目のポイントです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>pt1</codeph> と <codeph>pt2</codeph> との距離を返します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:equals"><apiName>equals</apiName><shortdesc>
	 2 つのポイントが等しいかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトがこの Point オブジェクトと等しい場合は <codeph>true</codeph> を返します。等しくない場合は <codeph>false</codeph> を返します。
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>toCompare</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>比較するポイントです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 2 つのポイントが等しいかどうかを判別します。<i>x</i> 値と <i>y</i> 値が同じ場合、2 つのポイントは等しいことになります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:interpolate"><apiName>interpolate</apiName><shortdesc>
    2 つの指定されたポイント間にあるポイントを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example locates the interpolated point (<code>interpolatedPoint</code>) half way (50%) between <code>point_1</code> and <code>point_2</code>.
   	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var point_1:Point = new Point(-100, -100);
   	var point_2:Point = new Point(50, 50);
   	var interpolatedPoint:Point = Point.interpolate(point_1, point_2, .5);
   	trace(interpolatedPoint.toString()); // (x=-25, y=-25)
   	</listing> 
	
	
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>新しい補間ポイントです。 
   	
   	</apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiParam><apiItemName>pt1</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>最初のポイントです。
	</apiDesc></apiParam><apiParam><apiItemName>pt2</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>2 番目のポイントです。
	</apiDesc></apiParam><apiParam><apiItemName>f</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>2 つのポイント間の補間のレベルです。<codeph>pt1</codeph> と <codeph>pt2</codeph> 間の線に沿って新しいポイントがある位置を示します。<codeph>f</codeph>=1 の場合は <codeph>pt1</codeph> が返されます。<codeph>f</codeph>=0 の場合は <codeph>pt2</codeph> が返されます。
   	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
    2 つの指定されたポイント間にあるポイントを判別します。パラメーター <codeph>f</codeph> はパラメーター <codeph>pt1</codeph> および <codeph>pt2</codeph> で指定された 2 つの端点に対する、新しい補間ポイントの場所を決定します。パラメーター <codeph>f</codeph> の値が <codeph>1.0</codeph> に近づくほど、補間ポイントは最初のポイント（パラメーター <codeph>pt1</codeph>）に近づきます。パラメーター <codeph>f</codeph> の値が 0 に近づくほど、補間ポイントは 2 番目のポイント（パラメーター <codeph>pt2</codeph>）に近づきます。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:normalize"><apiName>normalize</apiName><shortdesc>
	(0,0) と現在のポイント間の線のセグメントを設定された長さに拡大 / 縮小します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example extends the length of the <code>normalizedPoint</code> object from 5 to 10.
   	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var normalizedPoint:Point = new Point(3, 4);
   	trace(normalizedPoint.length); // 5
   	trace(normalizedPoint.toString()); // (x=3, y=4)
   	normalizedPoint.normalize(10);
   	trace(normalizedPoint.length); // 10
   	trace(normalizedPoint.toString()); // (x=6, y=8)
   	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>正規化されたポイントです。
	
   	</apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>拡大 / 縮小値です。例えば、現在のポイントが (0,5) で、1 に正規化すると、返されるポイントは (0,1) になります。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	(0,0) と現在のポイント間の線のセグメントを設定された長さに拡大 / 縮小します。 
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Point/length"><linktext>length</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Point:offset"><apiName>offset</apiName><shortdesc>
	 Point オブジェクトを指定された量だけオフセットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dx</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>水平座標 <i>x</i> をオフセットする量です。
	 </apiDesc></apiParam><apiParam><apiItemName>dy</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>垂直座標 <i>y</i> をオフセットする量です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Point オブジェクトを指定された量だけオフセットします。<codeph>dx</codeph> の値を <i>x</i> の元の値に加算して、新しい <i>x</i> 値を作成します。<codeph>dy</codeph> の値を <i>y</i> の元の値に加算して、新しい <i>y</i> 値を作成します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:polar"><apiName>polar</apiName><shortdesc>
	極座標ペアを直交点座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a Point object <code>cartesianPoint</code> from the value of <code>angleInRadians</code>
	and a line length of 5.  The <code>angleInRadians</code> value equal to Math.atan(3/4)
   	is used because of the characteristics of right triangles with sides that 
   	have ratios of 3:4:5.
	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var len:Number = 5;
   	var angleInRadians:Number = Math.atan(3/4);
   	var cartesianPoint:Point = Point.polar(len, angleInRadians);
   	trace(cartesianPoint.toString()); // (x=4, y=3)
   	</listing>
	
	When computers work with transcendental numbers such as pi, some round-off
	error occurs because floating-point arithmetic has only finite precision.
	When you use <code>Math.PI</code>, consider using the <code>Math.round()</code> function, as shown 
	in the following example.
	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var len:Number = 10;
   	var angleInRadians:Number = Math.PI;
    	var cartesianPoint:Point = Point.polar(len, angleInRadians);
   	trace(cartesianPoint.toString()); // should be (x=-10, y=0), but is (x=-10, y=1.22460635382238e-15)
   	trace(Math.round(cartesianPoint.y)); // 0
   	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>直交ポイントです。
   	
   	</apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiParam><apiItemName>len</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>極座標ペアの長さ座標です。
	</apiDesc></apiParam><apiParam><apiItemName>angle</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>極座標ペアの角度（ラジアン単位）です。
   	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	極座標ペアを直交点座標に変換します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Point/length"><linktext>length</linktext></link><link href="#Math/round()"><linktext>Math.round()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Point:subtract"><apiName>subtract</apiName><shortdesc>
	このポイントの座標から他のポイントの座標を減算して、新しいポイントを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates <code>point_3</code> by subtracting <code>point_2</code> from <code>point_1</code>.
   	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var point_1:Point = new Point(4, 8);
   	var point_2:Point = new Point(1, 2);
   	var resultPoint:Point = point_1.subtract(point_2);
   	trace(resultPoint.toString()); // (x=3, y=6)
   	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新しいポイントです。
   	
     	</apiDesc><apiOperationClassifier>flash.geom:Point</apiOperationClassifier></apiReturn><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>flash.geom:Point</apiOperationClassifier><apiDesc>減算するポイントです。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	このポイントの座標から他のポイントの座標を減算して、新しいポイントを作成します。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:toString"><apiName>toString</apiName><shortdesc>
	 x 座標の値と y 座標の値を格納するストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>座標のストリング表現です。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>x 座標の値と y 座標の値を格納するストリングを返します。 

	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <i>x</i> 座標の値と <i>y</i> 座標の値を格納するストリングを返します。ストリングの書式が <codeph> "(x= <i>x</i> , y= <i>y</i> )" </codeph> となっているため、23,17 にあるポイントに対して <codeph>toString()</codeph> メソッドを呼び出すと、<codeph>"(x=23, y=17)"</codeph> という値が返されます。
   	 
   	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Point:x"><apiName>x</apiName><shortdesc>
	 ポイントの水平座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example sets the <i>x</i> (horizontal) coordinate of <code>myPoint</code> and gets <code>myX</code> from <code>myPoint.x</code>.
	 
     <listing version="2.0">	
	 import flash.geom.Point;
	 var myPoint:Point = new Point();
	 trace(myPoint.x); // 0
	 myPoint.x = 5;
	 trace(myPoint.x); // 5
	 var myX:Number = myPoint.x;
	 trace(myX); // 5
     </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 ポイントの水平座標です。デフォルト値は 0 です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Point:y"><apiName>y</apiName><shortdesc>
	 ポイントの垂直座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example sets the <i>y</i> (vertical) coordinate of <code>myPoint</code> and gets <code>myY</code> from <code>myPoint.y</code>.
     
     <listing version="2.0">	
	 import flash.geom.Point;
	 var myPoint:Point = new Point();
	 trace(myPoint.y); // 0
	 myPoint.y = 5;
	 trace(myPoint.y); // 5
	 var myY:Number = myPoint.y;
	 trace(myY); // 5
  	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 ポイントの垂直座標です。デフォルト値は 0 です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Point:length:get"><apiName>length</apiName><shortdesc>
	 (0,0) からこのポイントまでの線のセグメントの長さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a new Point, <code>myPoint</code>, and determines the length of a line from (0, 0) to that Point.
	 
	 <listing version="2.0">
	 import flash.geom.Point;
	 var myPoint:Point = new Point(3,4);
	 trace(myPoint.length); // 5
	 </listing>
	 
   	  
   	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 (0,0) からこのポイントまでの線のセグメントの長さです。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Point/polar()"><linktext>Point.polar()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.geom:PerspectiveProjection"><apiName>PerspectiveProjection</apiName><shortdesc> 
 PerspectiveProjection クラスを使用すると、遠近法に基づく変形を表示オブジェクトおよびそのオブジェクトのすべての子に簡単に割り当てることができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
 PerspectiveProjection クラスを使用すると、遠近法に基づく変形を表示オブジェクトおよびそのオブジェクトのすべての子に簡単に割り当てることができます。複雑な変形やカスタムの遠近法に基づく変形の場合は、Matrix3D クラスを使用します。PerspectiveProjection クラスは基本的な 3 次元表示プロパティを提供しますが、Matrix3D クラスは表示オブジェクトの 3 次元表示をより詳細に制御します。
 
 <p>投影とは、コンピューター画面に投影された立方体のように、3 次元オブジェクトを 2 次元空間に表示する方法です。遠近法に基づく投影では、視野錐台（四角錐）を使用して、3 次元空間とそのオブジェクトを画面上にモデル化して投影します。視野錐台は、視点の原点から離れるにつれて幅が広くなります。視点の原点は、カメラや画面の前にいる閲覧者の視点になる場合もあります。投影された遠近画により、奥行きと距離を持つ 3 次元の錯覚を生み出します。この場合、画面に近いオブジェクトほど、画面から遠いオブジェクトよりも大きく表示されます。</p>
 
 <p><adobeimage alt="錐台表示領域" href="../../images/frustum.jpg"/></p>
 
 <p>デフォルトの PerspectiveProjection オブジェクトは、視野およびステージの縦横比（サイズ）に基づいて、ルートオブジェクトの遠近法に基づく変形用に定義されたフレームワークです。投影の中心である消失点は、ステージの中央に設定されます。つまり、3 次元の表示オブジェクトは、z 軸を後方に移動しながら、ステージの中央に向かって消えていきます。デフォルトの視点は、正の z 軸を見下ろしている点（0,0）にあります。y 軸は、画面の下部に向かっています。<codeph>root</codeph> 表示オブジェクトの遠近法に基づく投影設定にアクセスし、<codeph>perspectiveProjection</codeph> プロパティの視野および投影の中心のプロパティを変更できます（<codeph>root</codeph> オブジェクトの <codeph>DisplayObject.transform</codeph> プロパティを使用）。</p> 
 
 <p>親の遠近法に基づく投影を使用して、表示オブジェクトの各種の遠近法に基づく投影を設定することもできます。まず、PerspectiveProjection オブジェクトを作成し、<codeph>fieldOfView</codeph> プロパティと <codeph>projectionCenter</codeph> プロパティを設定します。次に、<codeph>DisplayObject.transform</codeph> プロパティを使用して、PerspectiveProjection オブジェクトを親表示オブジェクトに割り当てます。指定した投影マトリックスと変換が、表示オブジェクトの 3 次元の子すべてに適用されます。</p>
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/transform"><linktext>flash.display.DisplayObject.transform</linktext></link><link href="flash.geom.xml#Transform"><linktext>flash.geom.Transform</linktext></link><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Utils3D"><linktext>flash.geom.Utils3D</linktext></link></related-links><apiConstructor id="flash.geom:PerspectiveProjection:PerspectiveProjection"><apiName>PerspectiveProjection</apiName><shortdesc>
     PerspectiveProjection オブジェクトのインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><helpid>
     </helpid></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     PerspectiveProjection オブジェクトのインスタンスを作成します。 
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:PerspectiveProjection:toMatrix3D"><apiName>toMatrix3D</apiName><shortdesc>
     表示オブジェクトの基になる Matrix3D オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>基になる Matrix3D オブジェクトです。 
     
     </apiDesc><apiOperationClassifier>flash.geom:Matrix3D</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     表示オブジェクトの基になる Matrix3D オブジェクトを返します。  
     
     <p>表示オブジェクトは、ルートオブジェクトと同様に、変換に対して定義されている Matrix3D プロパティがなくても PerspectiveProjection オブジェクトを持つことができます。実際には、PerspectiveProjection オブジェクトまたは Matrix3D オブジェクトを使用して、遠近法に基づく変形を指定します。 PerspectiveProjection オブジェクトを使用しているときに Matrix3D オブジェクトが必要になった場合、<codeph>toMatrix3D()</codeph> メソッドは、表示オブジェクトの基になる Matrix3D オブジェクトを取得できます。例えば、<codeph>toMatrix3D()</codeph> メソッドは <codeph>Utils3D.projectVectors()</codeph> メソッドと一緒に使用できます。</p> 
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link></related-links></apiOperation><apiValue id="flash.geom:PerspectiveProjection:fieldOfView:set"><apiName>fieldOfView</apiName><shortdesc>
     3 次元の視野について、角度を 0 ～ 180 度で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>3 次元の視野について、角度を 0 ～ 180 度で指定します。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     3 次元の視野について、角度を <codeph>0</codeph> ～ <codeph>180</codeph> 度で指定します。この値は、0 以外の z 座標の 3 次元の表示オブジェクトに適用される、遠近法に基づく変形と歪みの強さを決定します。
     
     <p><codeph>0</codeph> に近い角度は、画面の 2 次元の x 座標と y 座標が、ほとんどまたはまったく歪みのない 3 次元の x 座標、y 座標、および z 座標とほぼ同じであることを意味します。つまり、小さい角度の場合、z 軸を下に移動する表示オブジェクトは、ほぼ同じサイズを維持し、ほとんど移動しません。 </p>
     
     <p><codeph>180</codeph> 度に近い値は、魚眼レンズ効果があります。つまり、<codeph>z</codeph> 値が <codeph>0</codeph> より小さい場合、その位置は拡大され、<codeph>z</codeph> 値が <codeph>0</codeph> より大きい場合、その位置は最小化されます。大きい角度の場合、z 軸を下に移動する表示オブジェクトは、サイズがすばやく変わり、大きく移動します。視野が <codeph>0</codeph> または <codeph>180</codeph> に設定されている場合、画面には何も表示されません。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:PerspectiveProjection:focalLength:get"><apiName>focalLength</apiName><shortdesc>
     視点または視点の原点（0,0,0）と z 軸上に位置する表示オブジェクトとの距離です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     視点または視点の原点（0,0,0）と z 軸上に位置する表示オブジェクトとの距離です。遠近法に基づく変形が行われるとき、視野の角度とステージの縦横比（ステージの幅をステージの高さで除算）を使用して、<codeph>focalLength</codeph> が動的に計算されます。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#PerspectiveProjection/fieldOfView"><linktext>fieldOfView</linktext></link></related-links></apiValue><apiValue id="flash.geom:PerspectiveProjection:projectionCenter:set"><apiName>projectionCenter</apiName><shortdesc>
     投影の中心を表す 2 次元のポイントで、表示オブジェクトの消失点です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Point</apiValueClassifier></apiValueDef><apiDesc>
     投影の中心を表す 2 次元のポイントで、表示オブジェクトの消失点です。 
     
     <p><codeph>projectionCenter</codeph> プロパティは、ステージの左上、ポイント（0,0）にあるデフォルトの基準点へのオフセットです。デフォルトの投影変換の中心は、ステージの中央にあります。つまり、3 次元の表示オブジェクトは、z 軸を後方に移動しながら、ステージの中央に向かって消えていきます。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.geom:Orientation3D"><apiName>Orientation3D</apiName><shortdesc>
Orientation3D クラスは、Matrix3D オブジェクトの方向スタイルを表すための定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Orientation3D クラスは、Matrix3D オブジェクトの方向スタイルを表すための定数値の列挙です。3 種類の方向は、Euler 角度、軸角度、および四元数です。Matrix3D オブジェクトの <codeph>decompose</codeph> メソッドと <codeph>recompose</codeph> メソッドは、これらの列挙型の 1 つを使用して、マトリックスの回転コンポーネントを識別します。

</apiDesc></apiClassifierDetail><related-links><link href="flash.geom.xml#Matrix3D"><linktext>flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Transform"><linktext>flash.geom.Transform</linktext></link><link href="flash.geom.xml#PerspectiveProjection"><linktext>flash.geom.PerspectiveProjection</linktext></link></related-links><apiValue id="flash.geom:Orientation3D:AXIS_ANGLE"><apiName>AXIS_ANGLE</apiName><shortdesc>
    軸角度方向は、軸と角度の組み合わせを使用して方向を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>axisAngle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    軸角度方向は、軸と角度の組み合わせを使用して方向を決定します。3 次元球体の中心から表面までの線またはベクトルは、軸の例です。オブジェクトの回転の中心となる軸は、3 次元空間における任意の方向を表す単位ベクトルです。角度は、ベクトルに関する回転の大きさを表します。方向は表示オブジェクトの向きを決定し、回転角度はどちらが上かを決定します。Vector3D オブジェクトと Matrix3D オブジェクトを使用すると、様々なマトリックス変換を決定し、2 つのオブジェクトの交差までの距離（3 次元オブジェクト間の単純な衝突の検出に使用できる）など、重要な 3 次元プログラミング値を決定できます。
    
    <p><codeph>Matrix3D.appendRotation()</codeph> メソッドと <codeph>Matrix3D.prependRotation()</codeph> メソッドは、軸角度の方向を使用します。</p>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Matrix3D/decompose()"><linktext>flash.geom.Matrix3D.decompose()</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()"><linktext>flash.geom.Matrix3D.recompose()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Orientation3D:EULER_ANGLES"><apiName>EULER_ANGLES</apiName><shortdesc> 
    Euler 角度は、decompose() メソッドと recompose() メソッドのデフォルトの方向で、軸ごとに異なる 3 つの回転角度を使用して方向を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>eulerAngles</apiData><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>軸ごとに異なる 3 つの回転角度を使用して方向を定義します。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc> 
    Euler 角度は、<codeph>decompose()</codeph> メソッドと <codeph>recompose()</codeph> メソッドのデフォルトの方向で、軸ごとに異なる 3 つの回転角度を使用して方向を定義します。通常は、x 軸を中心にした回転、y 軸を中心にした回転、z 軸を中心にした回転の順に行われます。 
    
    <p>x 軸を中心にした回転またはジンバルロックにおける特異な状態などの問題により、Euler 角度でアニメーションエラーが発生することもあります。例えば、Euler 角度では各軸は独立して扱われるため、2 つ以上の軸を中心にして回転するときにジンバルロックが発生する可能性があります。軸が重なるため、予期しない結果が生じる可能性があります。</p>
    
    <p>表示オブジェクトの軸回転プロパティは、Euler 軸回転を実行します。</p>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Matrix3D/decompose()"><linktext>flash.geom.Matrix3D.decompose()</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()"><linktext>flash.geom.Matrix3D.recompose()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Orientation3D:QUATERNION"><apiName>QUATERNION</apiName><shortdesc>
    四元数方向は複素数を使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>quaternion</apiData><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>四元数の方向は、3 つの軸（x,y,z）と 1 つの回転角度（w）を使用します。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    四元数方向は複素数を使用します。四元数の方向は、3 つの回転軸（x,y,z）と 1 つの回転角度（w）を使用します。四元数により、最も効率的な最短の回転パスが保証されます。また、回転はスムーズでジンバルロックは発生しません。ジンバルロックは 2 つ以上の軸を中心とした回転において軸が重なったときに発生することがあり、予期しない結果の原因となる可能性があります。 
    
    <p><codeph>Matrix3D.interpolate()</codeph> メソッドは四元数を使用します。</p> 
    
    </apiDesc></apiValueDetail><related-links><link href="flash.geom.xml#Matrix3D/decompose()"><linktext>flash.geom.Matrix3D.decompose()</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()"><linktext>flash.geom.Matrix3D.recompose()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>