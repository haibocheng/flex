<?xml version="1.0"?>
<apiPackage id="flash.media"><apiName>flash.media</apiName><apiDetail/><apiClassifier id="flash.media:SoundCodec"><apiName>SoundCodec</apiName><shortdesc>
SoundCodec クラスは、Microphone クラスの codec プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
SoundCodec クラスは、<codeph>Microphone</codeph> クラスの <codeph>codec</codeph> プロパティの設定で使用される定数値の列挙です。

</apiDesc></apiClassifierDetail><apiValue id="flash.media:SoundCodec:NELLYMOSER"><apiName>NELLYMOSER</apiName><shortdesc> 
	Nellymoser コーデックをオーディオ圧縮に使用するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>NellyMoser</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Nellymoser コーデックをオーディオ圧縮に使用するように指定します。この定数は <codeph>Microphone.codec</codeph> プロパティのデフォルト値です。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundCodec:SPEEX"><apiName>SPEEX</apiName><shortdesc> 
	Speex コーデックをオーディオ圧縮に使用するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Speex</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Speex コーデックをオーディオ圧縮に使用するように指定します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.media:ID3Info"><apiName>ID3Info</apiName><shortdesc>
	 ID3Info クラスには、ID3 メタデータが反映されるプロパティが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 ID3Info クラスには、ID3 メタデータが反映されるプロパティが含まれます。Sound クラスの <codeph>id3</codeph> プロパティにアクセスして、MP3 ファイルから追加のメタデータを取得できます。例えば、<codeph>mySound.id3.TIME</codeph> です。詳細については、<codeph>Sound.id3</codeph> の項目と ID3 タグの定義（<xref href="http://www.id3.org">http://www.id3.org</xref>）を参照してください。
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Sound/id3"><linktext>Sound.id3</linktext></link></related-links><apiValue id="flash.media:ID3Info:album"><apiName>album</apiName><shortdesc>
		 アルバム名です。ID3 2.0 タグ TALB に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 アルバム名です。ID3 2.0 タグ TALB に対応します。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:artist"><apiName>artist</apiName><shortdesc>
		 アーチスト名です。ID3 2.0 タグ TPE1 に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 アーチスト名です。ID3 2.0 タグ TPE1 に対応します。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:comment"><apiName>comment</apiName><shortdesc>
		 録音に関するコメントです。ID3 2.0 タグ COMM に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 録音に関するコメントです。ID3 2.0 タグ COMM に対応します。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:genre"><apiName>genre</apiName><shortdesc>
		 曲のジャンルです。ID3 2.0 タグ TCON に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 曲のジャンルです。ID3 2.0 タグ TCON に対応します。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:songName"><apiName>songName</apiName><shortdesc>
		 曲名です。ID3 2.0 タグ TIT2 に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 曲名です。ID3 2.0 タグ TIT2 に対応します。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:track"><apiName>track</apiName><shortdesc>
		 トラック番号です。ID3 2.0 タグ TRCK に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 トラック番号です。ID3 2.0 タグ TRCK に対応します。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:year"><apiName>year</apiName><shortdesc>
		 録音された年です。ID3 2.0 タグ TYER に対応します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="AS3"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 録音された年です。ID3 2.0 タグ TYER に対応します。
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.media:Microphone"><apiName>Microphone</apiName><shortdesc>
 Microphone クラスを使用すると、Flash Player または Adobe AIR を実行するコンピューターに接続されたマイクからオーディオをキャプチャできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 Microphone クラスを使用すると、<ph platform="actionScript">Flash Player</ph> または Adobe AIR を実行するコンピューターに接続されたマイクからオーディオをキャプチャできます。Microphone クラスは、オーディオをローカルで監視するために使用します。NetConnection および NetStream クラスは、Flash Media Server にオーディオを送信するために使用します。Flash Media Server は、他のサーバーにオーディオを送信し、<ph platform="actionScript">Flash Player</ph> または Adobe AIR を実行する他のクライアントにブロードキャストできます。
 
 <p>
 ビデオのキャプチャについて詳しくは、Camera クラスのトピックを参照してください。
 </p>
 
 <p>
 <b>重要：</b>ユーザーがマイクへのアクセスを許可するか拒否するかを選択できるように、Flash Player でプライバシーダイアログボックスが表示されます。アプリケーションウィンドウのサイズは必ず 215 × 138 ピクセル以上に設定してください。これは、ダイアログボックスを表示するために必要な最小サイズです。
 </p>
 
 <p>
 Microphone オブジェクトを作成または参照するには、<codeph>Microphone.getMicrophone()</codeph> メソッドを使用します。
 </p>
 
 <p platform="actionscript"><b>注意：</b>アプリケーションサンドボックス外のコンテンツでは、ユーザーがマイクへのアクセスを許可するかどうかを選択できるプライバシーダイアログボックスが表示されます。 このダイアログボックスには、最小限のアプリケーションウィンドウサイズ（215 × 138 ピクセル以上）が必要です。アプリケーションサンドボックス内の Adobe AIR コンテンツでは、アクセスが許可され、ダイアログボックスは表示されません。</p>
 
 </apiDesc><example conref="examples\MicrophoneExample.as"> 次の例では、コンピューターのマイクへのアクセスを許可した後に、エコー抑制を使用してマイクからサウンドをキャプチャします。<codeph>Security.showSettings()</codeph> メソッドは、ユーザーのマイクにアクセス許可を要求する Flash Player ダイアログボックスを表示します。<codeph>setLoopBack(true)</codeph> を呼び出すと、入力をローカルスピーカーに切り替えるため、例を実行中にサウンドを聴くことができます。
 
 <p>2 つのリスナーは、<codeph>activity</codeph> および <codeph>status</codeph> のイベントを受け取ります。<codeph>activity</codeph> イベントはセッションの開始時と終了時（存在する場合）に送出され、<codeph>activityHandler()</codeph> メソッドによって捕捉されます。このメソッドはイベントの情報をトレースします。<codeph>status</codeph> イベントは、関連付けられた Microphone オブジェクトがステータス情報をレポートした場合に送出され、<codeph>statusHandler()</codeph> メソッドを使用して捕捉、トレースされます。</p>
 
 <p><b>注意：</b>この例を正しく機能させるには、コンピューターにマイクを接続しておく必要があります。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Microphone;
    import flash.system.Security;

    public class MicrophoneExample extends Sprite {
        public function MicrophoneExample() {
            var mic:Microphone = Microphone.getMicrophone();
            Security.showSettings("2");
            mic.setLoopBack(true);
                    
            if (mic != null) {
                mic.setUseEchoSuppression(true);
                mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
                mic.addEventListener(StatusEvent.STATUS, statusHandler);
            }
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("activityHandler: " + event);
        }

        private function statusHandler(event:StatusEvent):void {
            trace("statusHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link></related-links><adobeApiEvent id="flash.media:Microphone_flash.events.StatusEvent.STATUS_status"><apiName>status</apiName><shortdesc>
 マイクがそのステータスをレポートしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier>flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 マイクがそのステータスをレポートしたときに送出されます。<codeph>code</codeph> プロパティの値が <codeph>"Microphone.Muted"</codeph> である場合、SWF ファイルのマイクへのアクセスをユーザーが拒否しています。<codeph>code</codeph> プロパティの値が <codeph>"Microphone.Unmuted"</codeph> である場合、SWF ファイルのマイクへのアクセスをユーザーが許可しています。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>Microphone.getMicrophone()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Microphone_flash.events.ActivityEvent.ACTIVITY_activity"><apiName>activity</apiName><shortdesc>
 マイクがセッションを開始または終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ActivityEvent.ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events.ActivityEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 マイクがセッションを開始または終了したときに送出されます。 
 
 <p>
 <codeph>activating</codeph> プロパティを <codeph>true</codeph> に設定して、このイベントをトリガーするために必要な音量を指定するか、<codeph>activating</codeph> プロパティを <codeph>false</codeph> に設定して、このイベントをトリガーするためにサウンドなしで経過する必要がある時間を指定するには、<codeph>Microphone.setSilenceLevel()</codeph> を使用します。
 </p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Microphone/setSilenceLevel()"><linktext>setSilenceLevel()</linktext></link></related-links></adobeApiEvent><apiOperation id="flash.media:Microphone:getMicrophone"><apiName>getMicrophone</apiName><shortdesc>
	 
	 オーディオをキャプチャする Microphone オブジェクトの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, Microphone.getMicropone, getMicrophone
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>オーディオをキャプチャする Microphone オブジェクトの参照です。
	 
 	 </apiDesc><apiOperationClassifier>flash.media:Microphone</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>マイクのインデックス値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 オーディオをキャプチャする Microphone オブジェクトの参照を返します。オーディオのキャプチャを開始するには、Microphone オブジェクトを NetStream オブジェクトに接続する必要があります。<codeph>NetStream.attachAudio()</codeph> のトピックを参照してください。
	 
	 <p>
	 <codeph>Microphone.get()</codeph> を複数回呼び出すと、同じマイクが参照されます。このため、コードに <codeph>mic1 = Microphone.get()</codeph> という行と <codeph>mic2 = Microphone.get()</codeph> という行が含まれている場合、<codeph>mic1</codeph> と <codeph>mic2</codeph> は両方とも同じデフォルトのマイクを参照します。</p>
	 <p>
	 デフォルトのマイクを取得するには、-1 を指定して <codeph>getMicrophone()</codeph> を呼び出す必要があります。パラメーターを指定せずに getMicrophone() を呼び出すと、リスト内の最初のマイクが返されます。
	 </p>
	 
	 <p>
	 現在の Microphone オブジェクトのインデックス値を取得するには、<codeph>index</codeph> プロパティを使用します。次に、Microphone クラスの他のメソッドにこの値を渡します。
	 </p>
	 
	 <p>
	 通常は、<codeph>index</codeph> の値を渡さないでください。デフォルトのマイクを参照するには、単に、<codeph>Microphone.getMicrophone()</codeph> メソッドを使用します。[マイク] パネルを使用することで、アプリケーションで使用するデフォルトのマイクをユーザーが指定できます。<codeph>index</codeph> で値を渡すと、ユーザーが使用するのとは異なるマイクが参照される可能性があります。<codeph>index</codeph> を使用できるのは、アプリケーションで 2 つのマイクから同時にオーディオをキャプチャする場合など、特殊な場合です。
	 </p>
	 
	 <p>
	 SWF ファイルで <codeph>Microphone.getMicrophone()</codeph> メソッドから返されたマイクにアクセスしようとすると (<codeph>NetStream.attachAudio()</codeph> を呼び出すなど)、[プライバシー] ダイアログボックスが表示され、そのマイクへのアクセスを許可するか拒否するかをユーザーが選択できます。ステージのサイズは必ず 215 × 138 ピクセル以上に設定してください。これは、ダイアログボックスを表示するために必要な最小サイズです。
	 </p>
	 
	 <p>
     ユーザーがこのダイアログボックスに応答すると、ユーザーの応答を示す <codeph>status</codeph> イベントが送出されます。<codeph>Microphone.muted</codeph> プロパティを確認して、ユーザーがマイクへのアクセスを許可したか、拒否したかを判別することもできます。 
	 </p>
	 
	 <p>
	 <codeph>Microphone.getMicrophone()</codeph> が <codeph>null</codeph> を返した場合は、マイクが別のアプリケーションで使用されているか、そのシステムにマイクがインストールされていません。マイクがインストールされているかどうかを調べるには、<codeph>Microphones.names.length</codeph> を使用します。Flash Player の [マイク] パネルを表示して、<codeph>Microphone.getMicrophone</codeph> で参照するマイクをユーザーが選択できるようにするには、<codeph>Security.showSettings()</codeph> を使用します。 
	 
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Microphone/event:status"><linktext>Microphone.status</linktext></link><link href="flash.net.xml#NetStream/attachAudio()"><linktext>flash.net.NetStream.attachAudio()</linktext></link><link href="flash.system.xml#Security/showSettings()"><linktext>flash.system.Security.showSettings()</linktext></link></related-links><adobeApiEvent id="flash.media:Microphone:getMicrophone_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>マイクがそのステータスをレポートしたときに送出されます。<codeph>code</codeph> プロパティの値が <codeph>"Microphone.Muted"</codeph> である場合、SWF ファイルのマイクへのアクセスをユーザーが拒否しています。<codeph>code</codeph> プロパティの値が <codeph>"Microphone.Unmuted"</codeph> である場合、SWF ファイルのマイクへのアクセスをユーザーが許可しています。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>マイクがそのステータスをレポートしたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.media:Microphone:setLoopBack"><apiName>setLoopBack</apiName><shortdesc>
	 マイクによってキャプチャされたオーディオをローカルスピーカーに転送します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Document this better with examples.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
	 マイクによってキャプチャされたオーディオをローカルスピーカーに転送します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:Microphone:setSilenceLevel"><apiName>setSilenceLevel</apiName><shortdesc>
	 サウンドと見なす最小入力レベルと、実際に無音状態が始まったと見なすまでの無音時間の長さを設定します。後者は省略可能です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.setSilenceLevel, setSilenceLevel
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>silenceLevel</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>マイクを有効化したり、<codeph>activity</codeph> イベントを送出するために必要な音量です。使用可能な値の範囲は 0 ～ 100 です。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>timeout</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>アクティビティがない場合に、サウンドが停止したと Flash Player または Adobe AIR が判定し <codeph>dispatch</codeph> イベントを送出するまでの時間（ミリ秒単位）です。 デフォルト値は 2000（2 秒）です。（<b>注意：</b>シグネチャで示されたデフォルト値（-1）は、2000 を使用することを Flash Player または Adobe AIR に伝える内部値です。）
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 サウンドと見なす最小入力レベルと、実際に無音状態が始まったと見なすまでの無音時間の長さを設定します。後者は省略可能です。
	 <ul>
	   <li>マイクがサウンドをまったく検知しないようにするには、<codeph>silenceLevel</codeph> に値 100 を渡します。こうすると、<codeph>activity</codeph> イベントが送出されることはありません。 </li>
	   <li>マイクが現在検知している音量を調べるには、<codeph>Microphone.activityLevel</codeph> を使用します。 </li>
	 </ul>
	 
	 <p>アクティビティ検知とは、人が話していることをオーディオレベルに基づいて検知する機能のことです。誰も話していないときは、関連付けられているオーディオストリームを送信する必要がないので、帯域幅を節約できます。この情報を利用して、ユーザー（または他の誰か）が話していないことを視覚的なフィードバックとして示すこともできます。</p>
	 
	 <p>サイレンス値はアクティビティ値に直接対応します。完全なサイレンスのアクティビティ値は 0 です。継続的な大音量（現在のゲイン設定に基づく最大の音量）のアクティビティ値は 100 です。ゲイン（増幅率）を適切に調整すると、話していないときにはアクティビティ値がサイレンス値よりも小さくなります。話しているときには、アクティビティ値はサイレンス値よりも大きくなります。</p>
	 
	 <p>このメソッドは <codeph>Camera.setMotionLevel()</codeph> に似ています。どちらのメソッドも、<codeph>activity</codeph> イベントの送出タイミングを指定するために使用します。ただし、パブリッシュするストリームに対する影響という点では、この 2 つのメソッドは大きく異なります。</p>
	 
	 <ul>
	   <li><codeph>Camera.setMotionLevel()</codeph> はモーションを検知し、使用する帯域幅には影響しないように設計されています。ビデオストリームでモーションが検知されない間も、ビデオは送信されます。</li>
	 
	   <li><codeph>Microphone.setSilenceLevel()</codeph> は帯域幅を最適化するように設計されています。オーディオストリームが無音と考えられる場合には、オーディオデータは送信されません。代わりに、無音状態が始まったことを示すメッセージが送信されます。 </li>
	 </ul>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Camera/setMotionLevel()"><linktext>flash.media.Camera.setMotionLevel()</linktext></link><link href="flash.media.xml#Microphone/activityLevel"><linktext>flash.media.Microphone.activityLevel</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link><link href="flash.media.xml#Microphone/gain"><linktext>flash.media.Microphone.gain</linktext></link><link href="flash.media.xml#Microphone/silenceLevel"><linktext>flash.media.Microphone.silenceLevel</linktext></link><link href="flash.media.xml#Microphone/silenceTimeout"><linktext>flash.media.Microphone.silenceTimeout</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Microphone:setUseEchoSuppression"><apiName>setUseEchoSuppression</apiName><shortdesc>
	 オーディオコーデックのエコー抑制機能を使用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.setUseEchoSuppression, setUseEchoSuppression
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>useEchoSuppression</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>エコー抑制を使用するか（<codeph>true</codeph>）使用しないか（<codeph>false</codeph>）を示すブール値です。 	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 オーディオコーデックのエコー抑制機能を使用するかどうかを指定します。Flash Player 設定パネルの「マイク」でユーザーが「エコーを減らす」を選択していない限り、デフォルト値は <codeph>false</codeph> です。
	 
	 <p>エコー抑制とは、スピーカーから出たサウンドが同じコンピューターのマイクによって拾われるオーディオフィードバックの影響を減らす機能のことです。これは、フィードバックを完全に除去するエコー除去機能とは異なります。</p>
	 
	 <p>一般に、キャプチャするサウンドをヘッドセットではなく同じコンピューターのスピーカーで再生する場合には、エコー抑制機能を使用することが推奨されます。サウンド出力デバイスをユーザーが選択できるようにした SWF ファイルでは、ユーザーがスピーカーを選択し、マイクも使用する場合に <codeph>Microphone.setUseEchoSuppression(true)</codeph> を呼び出すことをお勧めします。 </p>
	 
	 <p>ユーザーは、Flash Player 設定パネルの「マイク」でこれらの設定を調整することもできます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Microphone/setUseEchoSuppression()"><linktext>flash.media.Microphone.setUseEchoSuppression()</linktext></link><link href="flash.media.xml#Microphone/useEchoSuppression"><linktext>flash.media.Microphone.useEchoSuppression</linktext></link></related-links></apiOperation><apiValue id="flash.media:Microphone:activityLevel:get"><apiName>activityLevel</apiName><shortdesc>
	 マイクが検知している音量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.activityLevel, activityLevel
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 マイクが検知している音量です。値の範囲は 0（サウンドが検知されていない）～ 100（非常に大音量が検知されている）です。このプロパティ値に基づいて、<codeph>Microphone.setSilenceLevel()</codeph> メソッドに渡す適切な値を判断できます。
	 
	 <p>マイクを利用できる状態であっても、<codeph>Microphone.getMicrophone()</codeph> がまだ呼び出されていないためにまだ使用されていない場合は、このプロパティは -1 に設定されます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/setSilenceLevel()"><linktext>flash.media.Microphone.setSilenceLevel()</linktext></link><link href="flash.media.xml#Microphone/gain"><linktext>flash.media.Microphone.gain</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:codec:get"><apiName>codec</apiName><shortdesc>
	 オーディオ圧縮に使用するコーデックです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.getCodec, getCodec
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 オーディオ圧縮に使用するコーデックです。使用できるコーデックは、Nellymoser（デフォルト）と Speex です。列挙クラス <codeph>SoundCodec</codeph> は、<codeph>codec</codeph> プロパティに対して有効な各値を含みます。
	 
	 <p>Nellymoser コーデックを使用する場合、<codeph>Microphone.rate()</codeph> を使用してサンプルレートを設定できます。Speex コーデックを使用する場合、サンプルレートは 16 kHz に設定されます。</p>
	 
	 <p>Speex には Voice Activity Detection（VAD）が搭載されており、音声が検出されない場合は自動的に帯域幅を減らします。Speex コーデックを使用する場合は、サイレンスレベルを 0 に設定することをお勧めします。サイレンスレベルを設定するには、<codeph>Microphone.setSilenceLevel()</codeph> メソッドを使用します。</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/setSilenceLevel()s"><linktext>setSilenceLevel()s</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:encodeQuality:get"><apiName>encodeQuality</apiName><shortdesc>
	 Speex コーデックを使用する場合の、エンコードされた音質です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound,
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Speex コーデックを使用する場合の、エンコードされた音質です。指定できる値は、0 ～ 10 です。デフォルト値は 6 です。次の表に示すとおり、値が大きいほど質は高くなりますが、必要な帯域幅も増えます。リストされたビットレートの値はネットのビットレートを表し、パケットのオーバーヘッドは含まれません。
	 <p>
	  <adobetable class="innertable">
	 
	    
	    
	    
	    
	    
	    
	    
	    
	 
	    
	    
	  <tgroup cols="2"><thead><row><entry>質の値</entry><entry>必要なビットレート（1 秒あたりのキロビット数）</entry></row></thead><tbody><row>
	      <entry>0</entry>
	      <entry> 3.95</entry>
	    </row><row>
	      <entry>1</entry>
	      <entry>5.75</entry>
	    </row><row>
	      <entry>2</entry>
	      <entry>7.75</entry>
	    </row><row>
	      <entry>3</entry>
	      <entry>9.80</entry>
	    </row><row>
	      <entry>4</entry>
	      <entry>12.8</entry>
	    </row><row>
	      <entry>5</entry>
	      <entry>16.8</entry>
	    </row><row>
	      <entry>6</entry>
	      <entry>20.6</entry>
	    </row><row>
	      <entry>7</entry>
	      <entry>23.8</entry>
	    </row><row>
	 <entry>8</entry>
	 <entry>27.8</entry>
	    </row><row>
	      <entry>9</entry>
	      <entry>34.2</entry>
	    </row><row>
	      <entry>10</entry>
	      <entry>42.2</entry>
	    </row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/codec"><linktext>コーデック</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:framesPerPacket:get"><apiName>framesPerPacket</apiName><shortdesc>
	 1 パケット（メッセージ）で送信される Speex 音声フレームの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound,
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 1 パケット（メッセージ）で送信される Speex 音声フレームの数です。各フレームの長さは 20 ミリ秒です。デフォルト値は、1 パケットあたり 2 フレームです。
	 
	 <p>メッセージ内の Speex フレームが増えるほど、必要な帯域幅は減りますが、メッセージの送信が遅れます。Speex フレームが少ないほど、必要な帯域幅は増えますが、遅延が軽減されます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:gain:get"><apiName>gain</apiName><shortdesc>
	 マイクが信号を増強する量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.gain, gain
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 マイクが信号を増強する量です。指定できる値は 0 ～ 100 です。デフォルト値は 50 です。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/gain"><linktext>flash.media.Microphone.gain</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:index:get"><apiName>index</apiName><shortdesc>
	 マイクのインデックスです。これは、Microphone.names から返される配列のインデックスと同じです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.index, index
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 マイクのインデックスです。これは、<codeph>Microphone.names</codeph> から返される配列のインデックスと同じです。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/names"><linktext>flash.media.Microphone.names</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:muted:get"><apiName>muted</apiName><shortdesc>
	 ユーザーがマイクへのアクセスを拒否している（true）か、許可している（false）かを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.muted, muted
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 ユーザーがマイクへのアクセスを拒否しているか（<codeph>true</codeph>）、許可しているか（<codeph>false</codeph>）を指定します。この値が変わると、<codeph>status</codeph> イベントが送出されます。詳細については、<codeph>Microphone.getMicrophone()</codeph> を参照してください。 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:name:get"><apiName>name</apiName><shortdesc>
	 サウンドキャプチャハードウェアから返される現在のサウンドキャプチャデバイスの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.name, name
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 サウンドキャプチャハードウェアから返される現在のサウンドキャプチャデバイスの名前です。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/names"><linktext>flash.media.Microphone.names</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:names:get"><apiName>names</apiName><shortdesc>
	 使用可能なすべてのサウンドキャプチャデバイスの名前を含むストリングの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.names, names
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 使用可能なすべてのサウンドキャプチャデバイスの名前を含むストリングの配列です。この名前は、ユーザーにMacromedia Flash Player 設定パネルの「プライバシー」を表示せずに返されます。この配列により、各サウンドキャプチャデバイスの 0 から始まるインデックスと、システム上の各サウンドキャプチャデバイスの数（<codeph>Microphone.names.length</codeph> プロパティ）を調べることができます。詳細については、Array クラスのエントリを参照してください。
	 
	 <p><codeph>Microphone.names</codeph> プロパティを呼び出すと、ハードウェアを広範囲にわたって調べる必要があり、配列を作成するまでに数秒間かかることがあります。ほとんどの場合は、デフォルトのマイクをそのまま使用できます。</p>
	 
	 <p><b>注意：</b>現在のマイクの名前を調べるには、<codeph>name</codeph> プロパティを使用します。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="#Array"><linktext>Array</linktext></link><link href="flash.media.xml#Microphone/name"><linktext>flash.media.Microphone.name</linktext></link><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:rate:get"><apiName>rate</apiName><shortdesc>
	 マイクがサウンドをキャプチャしているレート（kHz）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.rate, rate
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 マイクがサウンドをキャプチャしているレート（kHz）です。使用できる値は 5、8、11、22、および 44 です。デフォルト値は 8 kHz ですが、サウンドキャプチャデバイスがこの値に対応している必要があります。対応していない場合、デフォルト値はそのサウンドキャプチャデバイスが対応している 8 kHz よりも高いレートのうち、8 kHz に最も近い値になります。通常は 11 kHz です。Flash Player 10 および AIR 1.5 以降では、16kHz レート値がサポートされています。
	 
	 <p><b>メモ：</b>Flash Player 10 および AIR 1.5 以降に Speex コーデックを使用している場合（<codeph>Microphone.codec = SoundCodec.SPEEX</codeph>）、レートのデフォルト値は 16kHz です。Speex コーデックを使用していて、コーデックの値を Nellymoser に変更する場合（<codeph>Microphone.codec = SoundCodec.NELLYMOSER</codeph>）、新しいレート値を明示的に設定するまで、レートは引き続き 16kHz に設定されます。Flash Player 10 および AIR 1.5 より前のリリースを使用してオーディオを受信するには、オーディオをパブリッシュする際にコーデックとレート値の両方を変更します。</p>
	 
	 
 	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/codec"><linktext>flash.media.Microphone.codec</linktext></link><link href="flash.media.xml#SoundCodec"><linktext>flash.media.SoundCodec</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:silenceLevel:get"><apiName>silenceLevel</apiName><shortdesc>
	 マイクを有効化したり、activity イベントを送出するために必要な音量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.silenceLevel, silenceLevel
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 マイクを有効化したり、<codeph>activity</codeph> イベントを送出するために必要な音量です。デフォルト値は 10 です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/gain"><linktext>flash.media.Microphone.gain</linktext></link><link href="flash.media.xml#Microphone/setSilenceLevel()"><linktext>flash.media.Microphone.setSilenceLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:silenceTimeout:get"><apiName>silenceTimeout</apiName><shortdesc>
	 マイクがサウンド検知を停止してから activity イベントが送出されるまでの時間（ミリ秒単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.silenceTimeout, silenceTimeout
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 マイクがサウンド検知を停止してから、<codeph>activity</codeph> イベントが送出されるまでの時間（ミリ秒単位）です。デフォルト値は 2000（2 秒）です。
	 
	 <p>この値を設定するには、<codeph>Microphone.setSilenceLevel()</codeph> メソッドを使用します。</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/setSilenceLevel()"><linktext>flash.media.Microphone.setSilenceLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:soundTransform:get"><apiName>soundTransform</apiName><shortdesc>
	 loopback モードになっているとき、この microphone オブジェクトのサウンドを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Document this better with examples.
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc>
	 loopback モードになっているとき、この microphone オブジェクトのサウンドを制御します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:useEchoSuppression:get"><apiName>useEchoSuppression</apiName><shortdesc>
	 エコー抑制が有効になっている場合は true、それ以外の場合は false に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Microphone, audio, sound, Microphone.useEchoSuppression, useEchoSuppression
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 エコー抑制が有効になっている場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> に設定します。Flash Player 設定パネルの「マイク」でユーザーが「エコーを減らす」を選択していない限り、デフォルト値は <codeph>false</codeph> です。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Microphone/setUseEchoSuppression()"><linktext>flash.media.Microphone.setUseEchoSuppression()</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:flash.media:scanHardware"><apiName>scanHardware</apiName><shortdesc>
	 システム上のマイクとカメラを強制的に再スキャンします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 システム上のマイクとカメラを強制的に再スキャンします。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiClassifier id="flash.media:Camera"><apiName>Camera</apiName><shortdesc>
 Camera クラスを使用すると、Flash Player を実行するコンピューターに接続されたカメラからビデオをキャプチャできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 Camera クラスを使用すると、Flash Player を実行するコンピューターに接続されたカメラからビデオをキャプチャできます。Video クラスは、ビデオをローカルで監視するために使用します。NetConnection クラスおよび NetStream クラスは、Flash Media Server にビデオを送信するために使用します。Flash Media Server は、他のサーバーにそのビデオストリームを送信し、Flash Player を実行する他のクライアントにブロードキャストできます。
 
 <p>
 オーディオのキャプチャに関する詳細については、Microphone クラスのトピックを参照してください。
 </p>
 
 <p>
 <b>重要：</b>ユーザーがカメラへのアクセスを許可するか拒否するかを選択できるように、Flash Player でプライバシーダイアログボックスが表示されます。アプリケーションウィンドウのサイズは 215 × 138 ピクセル以上に設定してください。これは、ダイアログボックスを表示するために必要な最小サイズです。
 </p>
 
 <p>Camera オブジェクトを作成または参照するには、<codeph>getCamera()</codeph> メソッドを使用します。</p>
 
 </apiDesc><example conref="examples\CameraExample.as"> 次の例では、セキュリティ警告を承認した後のカメラからのイメージを示しています。ステージは拡大 / 縮小されないように設定され、Flash Player のウィンドウの左上に揃えられます。<codeph>activity</codeph> イベントはセッションの開始時と終了時（存在する場合）に送出され、<codeph>activityHandler()</codeph> メソッドによって捕捉されます。このメソッドはイベントの情報を出力します。
 
 <p><b>注意：</b>この例を正しく機能させるには、コンピューターにカメラを接続しておく必要があります。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.*;
    import flash.media.Camera;
    import flash.media.Video;

    public class CameraExample extends Sprite {
        private var video:Video;
        
        public function CameraExample() {
            stage.scaleMode = StageScaleMode.NO_SCALE;
            stage.align = StageAlign.TOP_LEFT;
            
            var camera:Camera = Camera.getCamera();
            
            if (camera != null) {
                camera.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
                video = new Video(camera.width * 2, camera.height * 2);
                video.attachCamera(camera);
                addChild(video);
            } else {
                trace("You need a camera.");
            }
        }
        
        private function activityHandler(event:ActivityEvent):void {
            trace("activityHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link></related-links><adobeApiEvent id="flash.media:Camera_flash.events.StatusEvent.STATUS_status"><apiName>status</apiName><shortdesc>
 カメラがそのステータスをレポートしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier>flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 カメラがそのステータスをレポートしたときに送出されます。<codeph>code</codeph> プロパティの値が <codeph>"Camera.Muted"</codeph> である場合、SWF ファイルのカメラへのアクセス許可を拒否したことになります。<codeph>code</codeph> プロパティの値が <codeph>"Camera.Unmuted"</codeph> の場合、SWF ファイルがユーザーのカメラにアクセスすることをユーザーが許可しています。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/getCamera()"><linktext>Camera.getCamera()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Camera_flash.events.ActivityEvent.ACTIVITY_activity"><apiName>activity</apiName><shortdesc>
 カメラがセッションを開始または終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ActivityEvent.ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events.ActivityEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 カメラがセッションを開始または終了したときに送出されます。<codeph>Camera.setMotionLevel()</codeph> を呼び出して、<codeph>activity</codeph> イベントをトリガーするために必要なモーション量を指定するか（<codeph>activating</codeph> 値を <codeph>true</codeph> に設定）、<codeph>activity</codeph> イベントをトリガーする前に経過する必要があるアクティビティを実行しない時間を指定します（<codeph>activating</codeph> 値を <codeph>false</codeph> に設定）。
 
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.media:Camera:getCamera"><apiName>getCamera</apiName><shortdesc>
	 ビデオをキャプチャする Camera オブジェクトへの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, constructor, Camera.getCamera, getCamera
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc><codeph>name</codeph> パラメーターを指定しない場合は、デフォルトのカメラへの参照を返します。デフォルトのカメラが他のアプリケーションで使用されている場合は、使用できる最初のカメラへの参照を返します。複数のカメラがインストールされている場合、ユーザーは Macromedia Flash Player 設定パネルの「カメラ」でデフォルトのカメラを指定できます。利用できるカメラがない場合、またはカメラがインストールされていない場合は、<codeph>null</codeph> を返します。 
 	  
 	 </apiDesc><apiOperationClassifier>flash.media:Camera</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>取得するカメラを <codeph>names</codeph> プロパティで返される配列から決定します。多くのアプリケーションでは、パラメーターを省略してデフォルトのカメラを取得します。このパラメーターの値を指定するには、Camera.names 配列内の 0 ベースのインデックス位置のストリング表現を使用します。例えば、配列内の 3 番目のカメラを指定するには、<codeph>Camera.getCamera("2")</codeph> を使用します。 
 	 
 	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ビデオをキャプチャする Camera オブジェクトへの参照を返します。ビデオのキャプチャを開始するには、Camera オブジェクトを Video オブジェクトに関連付ける必要があります。詳細については、<codeph>Video.attachCamera()</codeph> のトピックを参照してください。ビデオを Flash Media Server に送信するには、<codeph>NetStream.attachCamera()</codeph> を呼び出して、Camera オブジェクトを NetStream オブジェクトに関連付けます。
	 
	 <p><codeph>getCamera()</codeph> メソッドを複数回呼び出した場合は、同じカメラドライバーへの参照が返されます。したがって、<codeph>firstCam:Camera = getCamera()</codeph> と <codeph>secondCam:Camera = getCamera()</codeph> のようなコードが含まれている場合、<codeph>firstCam</codeph> と <codeph>secondCam</codeph> はどちらも、ユーザーのデフォルトである同じカメラを参照します。</p>
	 
	 <p>一般には、<codeph>name</codeph> パラメーターの値は指定せず、単に <codeph>getCamera()</codeph> を使用してデフォルトのカメラへの参照を取得します。ユーザーは、このセクションで後述する「カメラ」ボックスで、Flash Player で使用するデフォルトのカメラを指定できます。 </p>
	 
  	 <p>ActionScript を使用してユーザーによるカメラへのアクセスの許可または拒否を設定することはできませんが、ユーザーによるカメラのアクセス許可の設定が可能な Adobe Flash Player 設定のカメラ設定ダイアログボックスを表示することができます。 <codeph>attachCamera()</codeph> メソッドを使用する SWF ファイルが <codeph>getCamera()</codeph> メソッドによって返されたカメラを Video オブジェクトまたは NetStream オブジェクトに接続しようとすると、Flash Player はカメラへのアクセスの許可または拒否をユーザーに選択させるダイアログボックスを表示します。アプリケーションウィンドウのサイズは必ず 215×138 ピクセル以上に設定してください。これは、ダイアログボックスを表示するために必要な Flash Player の最小サイズです。ユーザーがカメラ設定のダイアログボックスに応答すると、Flash Player はユーザーの応答を示す <codeph>status</codeph> イベント内の情報オブジェクトを返します。 <codeph>Camera.muted</codeph> と <codeph>Camera.Unmuted</codeph> はそれぞれ、ユーザーによるカメラへのアクセスの拒否と許可を示します。 <codeph>status</codeph> イベントを使用せずにユーザーがカメラへのアクセスを拒否したか許可したかを判断するには、<codeph>muted</codeph> プロパティを使用します。</p>
  	 
 	 <p>再生中の SWF ファイルを右クリック（Windows および Linux）または Control キーを押しながらクリック（Macintosh）し、設定を選択してプライバシーダイアログで「後で確認」を選択すると、ユーザーは特定のドメインに対する永続的なプライバシー設定を指定できます。ユーザーが [後で確認] を選択していた場合、SWF ファイルがこのドメインからカメラにアクセスすることを許可するか拒否するかを確認するメッセージは表示されません。</p>
  	 
  	 <p><b>注意：</b>ユーザーが Flash Player の設定ダイアログボックスで「後で確認」を選択して既にアクセスを拒否している場合、<codeph>attachCamera()</codeph> メソッドではカメラへのアクセスの許可または拒否を確認するダイアログボックスは表示されません。この場合、<codeph>Security.showSettings(SecurityPanel.PRIVACY)</codeph> を使用するユーザーに対してAdobe Flash Player 設定パネルの「プライバシー」を表示して許可または拒否の設定を変更するように要求することができます。</p>
 	 
 	 <p><codeph>getCamera()</codeph> が <codeph>null</codeph> を返した場合、カメラは他のアプリケーションによって使用されているか、そのシステムにはカメラがインストールされていません。カメラがインストールされているかどうかを調べるには、<codeph>names.length</codeph> プロパティを使用します。Flash Player 設定パネルの「カメラ」を表示して、<codeph>getCamera()</codeph> が参照するカメラをユーザーが選択できるようにするには、<codeph>Security.showSettings(SecurityPanel.CAMERA)</codeph> を使用します。 </p>
 	 
	 <p>カメラのハードウェアスキャンには時間がかかります。カメラが 1 つでも見つかると、その Flash Player インスタンスの存続中は、ハードウェアが再びスキャンされることはありません。しかし、カメラが見つからなかった場合は、<codeph>getCamera</codeph> が呼び出されるたびにハードウェアがスキャンされます。この動作は、ユーザーがカメラを接続するのを忘れた場合に便利です。<codeph>getCamera</codeph> を呼び出すための [再試行] ボタンを SWF ファイルに用意すると、ユーザーが SWF ファイルを再起動しなくてもカメラを見つけることができます。</p>
 	 
	 </apiDesc><example conref="examples\Camera_getCameraExample.as"> 次の例では、ユーザーがカメラへのアクセスを許可した場合、接続されたカメラを使用してビデオイメージをキャプチャします。 ビデオストリームに関する情報（現在の 1 秒あたりのフレーム数など）も表示します。
 
 <p><codeph>Camera.getCamera()</codeph> メソッドは、カメラオブジェクトへの参照を返します。利用できるカメラがない場合、またはカメラが取り付けられていない場合は、null を返します。カメラが見つかったかどうか、およびユーザーがカメラへのアクセスを許可したかどうかを if ステートメントでチェックします。 ユーザーがアクセスを拒否した場合、<codeph>muted</codeph> プロパティは <codeph>true</codeph> に設定されます。</p> 
 
 <p>通常は <codeph>attachCamera()</codeph> メソッドが呼び出されると、Flash Player によるカメラへのアクセスを許可するかどうかをユーザーに確認するダイアログボックスが表示されます。 ただし、ユーザーがアクセスを拒否し、<codeph>「後で確認」</codeph>オプションを選択した場合、ダイアログボックスなどは何も表示されません。 ユーザーがカメラへのアクセスを許可するオプションを使用できるように、Flash Player 設定ダイアログボックスを起動するためにテキストフィールドをクリックするようにという指示が <codeph>myTextField</codeph> テキストフィールドに表示されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドは <codeph>Security.showSettings()</codeph> メソッドを呼び出します。これにより、設定ダイアログボックスの<codeph>プライバシー</codeph>パネルが表示されます。 ユーザーがアクセスを許可した場合、<codeph>StatusEvent.STATUS</codeph> イベントが送出され、イベントの <codeph>code</codeph> プロパティの値が <codeph>Camera.Unmuted</codeph> に設定されます。 （同時にカメラオブジェクトの <codeph>mute</codeph> プロパティが <codeph>false</codeph> に設定されます。）</p>
 
 <p>ユーザーがアクセスを許可した場合、ユーザーの設定のステータス変更をリスニングするために追加された <codeph>statusHandler()</codeph> メソッドにより、<codeph>connectCamera()</codeph> メソッドが呼び出されます。 <codeph>connectCamera()</codeph> メソッドは、キャプチャされたストリームの幅と高さを使用してビデオオブジェクトをインスタンス化します。カメラでキャプチャされたビデオを表示するため、ビデオストリームへの参照をビデオオブジェクトに関連付けて、ビデオオブジェクトを表示リストに追加します。</p>
 
 <p>さらに、Timer オブジェクトを開始します。1 秒ごとに Timer オブジェクトのタイマーイベントが送出され、<codeph>timerHandler()</codeph> メソッドが呼び出されます。<codeph>timerHandler()</codeph> メソッドが表示され、Camera オブジェクトのいくつかのプロパティが更新されます。 </p> 
 <p><b>注意：</b>この例では、変更されるプロパティは <codeph>currentFPS</codeph> プロパティのみです。</p>    
    
<codeblock>
package {
    import flash.display.Sprite;
    import flash.media.Camera;
    import flash.media.Video;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.StatusEvent;
    import flash.events.MouseEvent;
    import flash.system.SecurityPanel;
    import flash.system.Security;

    public class Camera_getCameraExample extends Sprite {
        private var myTextField:TextField;
        private var cam:Camera;
        private var t:Timer = new Timer(1000);
        
        public function Camera_getCameraExample() {
            myTextField = new TextField();
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.selectable = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;    
        
            cam = Camera.getCamera();
            
            if (!cam) {
                myTextField.text = "No camera is installed.";
                
            } else if (cam.muted) {
                myTextField.text = "To enable the use of the camera,\n"
                                 + "please click on this text field.\n" 
                                 + "When the Flash Player Settings dialog appears,\n"
                                 + "make sure to select the Allow radio button\n" 
                                 + "to grant access to your camera.";

                myTextField.addEventListener(MouseEvent.CLICK, clickHandler);

            }else {
                myTextField.text = "Connecting";
                connectCamera(); 
            }
   
            addChild(myTextField);

            t.addEventListener(TimerEvent.TIMER, timerHandler);
        }

        private function clickHandler(e:MouseEvent):void {
            Security.showSettings(SecurityPanel.PRIVACY);

            cam.addEventListener(StatusEvent.STATUS, statusHandler);

            myTextField.removeEventListener(MouseEvent.CLICK, clickHandler);
        }

        private function statusHandler(event:StatusEvent):void {

            if (event.code == "Camera.Unmuted") {
                connectCamera(); 
                cam.removeEventListener(StatusEvent.STATUS, statusHandler);
            }
        }

        private function connectCamera():void {
                var vid:Video = new Video(cam.width, cam.height);
                vid.x = 10;
                vid.y = 10;
                vid.attachCamera(cam);
                addChild(vid);    

                t.start();
        }

        private function timerHandler(event:TimerEvent):void {
            myTextField.y = cam.height + 20;
            myTextField.text = "";
            myTextField.appendText("bandwidth: " + cam.bandwidth + "\n");
            myTextField.appendText("currentFPS: " + Math.round(cam.currentFPS) + "\n");
            myTextField.appendText("fps: " + cam.fps + "\n");
            myTextField.appendText("keyFrameInterval: " + cam.keyFrameInterval + "\n");
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.media.xml#Camera/index"><linktext>index</linktext></link><link href="flash.media.xml#Camera/muted"><linktext>muted</linktext></link><link href="flash.media.xml#Camera/names"><linktext>names</linktext></link><link href="flash.media.xml#Camera/setMode()"><linktext>setMode()</linktext></link><link href="flash.media.xml#Camera/event:status"><linktext>status</linktext></link><link href="flash.media.xml#Video/attachCamera()"><linktext>Video.attachCamera()</linktext></link></related-links><adobeApiEvent id="flash.media:Camera:getCamera_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>カメラがそのステータスをレポートしたときに送出されます。<codeph>code</codeph> プロパティの値が <codeph>"Camera.muted"</codeph> である場合、SWF ファイルのカメラへのアクセス許可を拒否したことになります。<codeph>code</codeph> プロパティの値が <codeph>"Camera.Unmuted"</codeph> の場合、SWF ファイルがユーザーのカメラにアクセスすることをユーザーが許可しています。
 	 </apiDesc></adobeApiEventDetail><shortdesc>カメラがそのステータスをレポートしたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.media:Camera:setKeyFrameInterval"><apiName>setKeyFrameInterval</apiName><shortdesc>
	 ビデオ圧縮アルゴリズムによって補間されずに完全に送信されるビデオフレーム（キーフレームと呼ばれる）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>keyFrameInterval</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>ビデオ圧縮アルゴリズムによって補間されるのではなく、（キーフレームとして）完全送信されるビデオフレームを指定する値です。1 を指定すると、すべてのフレームがキーフレームになり、3 を指定すると、3 つのフレームごとにフレームがキーフレームになります（以下同様）。有効な値は、1 ～ 48 です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ビデオ圧縮アルゴリズムによって補間されるのではなく、（<i>キーフレーム</i>と呼ばれる）完全送信されるビデオフレームを指定します。このメソッドは、Flash Media Server を使用してビデオを送信している場合にだけ使用できます。
	 
	 <p>Flash Video 圧縮アルゴリズムでは、ビデオの最後のフレームからの変更のみを送信して、ビデオを圧縮します。これらの変更部分が補間フレームと見なされます。ビデオのフレームは、前のフレームの内容に応じて補間されます。ただし、キーフレームは完全なビデオフレームであるため、前のフレームから補間されることはありません。</p> 
	 
	 <p><codeph>keyFrameInterval</codeph> パラメーターの値を設定する方法を判別するには、帯域幅の使用量とビデオ再生アクセシビリティの両方を検討します。例えば、<codeph>keyFrameInterval</codeph> に対して大きい値を指定すると（キーフレームの送信が少なくなる）、帯域幅の使用量が減少します。ただし、これはビデオの特定のポイントで再生ヘッドの位置を指定する際に要する時間を増やすことになります。つまり、ビデオを再開する際、より多くの先行ビデオフレームを補間しなければならない場合があります。</p> 
	 
	 <p>逆に、<codeph>keyFrameInterval</codeph> に対して小さい値を指定すると（キーフレームの送信が多くなる）、ビデオフレーム全体の送信が多くなるため、帯域幅の使用量が増加しますが、録画済みのビデオ内で特定のビデオフレームをシークする際に要する時間は減ります。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Camera/keyFrameInterval"><linktext>keyFrameInterval</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setLoopback"><apiName>setLoopback</apiName><shortdesc>
	 カメラのローカルビューに対して圧縮したビデオストリームを使用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>compress</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>カメラが受け取るローカルビューに対して、圧縮したビデオストリーム（<codeph>true</codeph>）を使用するか、または圧縮されていないストリーム（<codeph>false</codeph>）を使用するかを指定します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 カメラのローカルビューに対して圧縮したビデオストリームを使用するかどうかを指定します。このメソッドは、Flash Media Server を使用してビデオを送信している場合にだけ使用できます。<codeph>compress</codeph> を <codeph>true</codeph> に設定すると、リアルタイムで表示したときの、ユーザーに対するビデオの表示状態をより正確に確認できます。
	 
	 <p>圧縮したストリームは、ビデオの品質設定のプレビューなど、テスト目的で使用する場合には役立ちますが、ローカルビューは単に圧縮されるだけではないので、非常に処理コストがかかります。ローカルビューは圧縮された後、ライブ接続で送信する場合と同じように編集され、さらにローカルで表示するために解凍されます。</p>
	 
	 <p><codeph>compress</codeph> を <codeph>true</codeph> に設定した場合に使用する圧縮率を設定するには、<codeph>Camera.setQuality()</codeph> を使用します。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Camera/setQuality()"><linktext>setQuality()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setMode"><apiName>setMode</apiName><shortdesc>
	 カメラのキャプチャモードを指定の要件に最も近いネイティブモードに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.setMode, setMode
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要求されたキャプチャの幅（ピクセル単位）です。デフォルト値は 160 です。	 
	 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要求されたキャプチャの高さ（ピクセル単位）です。デフォルト値は 120 です。	 
	 </apiDesc></apiParam><apiParam><apiItemName>fps</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>要求されたデータキャプチャレート（1 秒あたりのフレーム数）です。デフォルト値は 15 です。	 
	 </apiDesc></apiParam><apiParam><apiItemName>favorArea</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>指定要件に合うネイティブモードがカメラにない場合に、幅、高さ、フレームレートをどのように操作するかを指定します。デフォルト値は <codeph>true</codeph> で、キャプチャサイズを維持することを示します。このパラメーターを使用すると、<codeph>width</codeph> 値と <codeph>height</codeph> 値に最も近いモードが選択されます。ただし、これによりフレームレートが低下し、パフォーマンスに悪影響を及ぼすことがあります。カメラの高さと幅よりも最大フレームレートを優先するには、<codeph>false</codeph> を <codeph>favorArea</codeph> パラメーターに指定します。
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 カメラのキャプチャモードを指定の要件に最も近いネイティブモードに設定します。指定したすべてのパラメーターに一致するネイティブモードがカメラにない場合は、要求したモードに最も近いキャプチャモードが選択されます。これにより、画像の一部が切り取られたり、フレームが削除される可能性があります。 
	 
	 <p>デフォルトでは、画像のサイズを維持するために、必要に応じてフレームが削除されます。削除されるフレームの数を最小限に抑えるには、<codeph>false</codeph> を <codeph>favorArea</codeph> パラメーターで渡します。ただし、これによって画像のサイズは小さくなります。</p>
	 
	 <p>ネイティブモードを選択した場合は、指定した縦横比ができる限り維持されます。例えば、<codeph>myCam.setMode(400, 400, 30)</codeph> コマンドを実行し、そのカメラで利用できる最大の幅と高さが 320 および 288 である場合は、幅と高さがともに 288 に設定されます。幅と高さを同じ値に設定することで、要求された 1:1 の縦横比が維持されます。</p>
	 
	 <p>要求した値に最も近いモードが選択された後に、割り当てられた幅、高さ、ビデオキャプチャレートを調べるには、<codeph>width</codeph>、<codeph>height</codeph>、および <codeph>fps</codeph> の各プロパティを使用します。</p>
	 
	 <p>
	 Flash Media Server を使用する場合は、単一のフレームのキャプチャまたはコマ撮り写真の作成もできます。詳細については、<codeph>NetStream.attachCamera()</codeph> のトピックを参照してください。
	 </p>
	 
	 </apiDesc><example conref="examples\Camera_setModeExample.as"> 次の例では、ユーザーがステージをクリックするとビデオのサイズが変更され、キャプチャレート（1 秒あたりのフレーム数）が新しい値に設定されます。  
 
 <p>ステージは拡大 / 縮小されないように設定されます。<codeph>Camera.getCamera()</codeph> メソッドは、カメラオブジェクトへの参照を返します。利用できるカメラがない場合、またはカメラが取り付けられていない場合は、null を返します。カメラが存在する場合は、<codeph>connectCamera()</codeph> メソッドが呼び出されます。<codeph>connectCamera()</codeph> メソッドは、ビデオオブジェクトをインスタンス化します。カメラでキャプチャされたビデオを表示するため、ビデオストリームへの参照をビデオオブジェクトに関連付けて、ビデオオブジェクトを表示リストに追加します。<codeph>MouseEvent.CLICK</codeph> イベントのイベントリスナーも設定します。ユーザーがステージをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。 このメソッドはキャプチャされたビデオの幅を確認し、カメラキャプチャモードの幅、高さおよび必要なキャプチャレート（1 秒あたりのフレーム数）を設定します。これらの設定を有効にするために、ビデオオブジェクトを削除して再作成する必要があります。また、ビデオの幅と高さをカメラオブジェクトの幅と高さに設定する必要があります。</p>      
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.media.Camera;
    import flash.media.Video;
    import flash.events.MouseEvent;
    import flash.display.StageScaleMode;

    public class Camera_setModeExample extends Sprite {
        private var cam:Camera;
        private var vid:Video;

        public function Camera_setModeExample() {
            stage.scaleMode = StageScaleMode.NO_SCALE;

            cam = Camera.getCamera();
            
            if (!cam) {
                trace("No camera is installed.");
            }else {
                connectCamera();
            }
        }

        private function connectCamera():void {
            vid = new Video();
            vid.width = cam.width;
            vid.height = cam.height; 
            vid.attachCamera(cam);
            addChild(vid);    

            stage.addEventListener(MouseEvent.CLICK, clickHandler);
        }
    
        private function clickHandler(e:MouseEvent):void {

            switch (cam.width) {
                case 160:
                cam.setMode(320, 240, 10); 
                break;
                case 320:
                cam.setMode(640, 480, 5); 
                break;
                default:
                cam.setMode(160, 120, 15); 
                break;
            } 

            removeChild(vid);           
            connectCamera();
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.media.xml#Camera/fps"><linktext>fps</linktext></link><link href="flash.media.xml#Camera/height"><linktext>height</linktext></link><link href="flash.media.xml#Camera/width"><linktext>width</linktext></link><link href="flash.net.xml#NetStream/attachCamera()"><linktext>flash.net.NetStream.attachCamera()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setMotionLevel"><apiName>setMotionLevel</apiName><shortdesc>
	 activity イベントを送出するために必要なモーションの量を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.setMotionLevel, setMotionLevel
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>motionLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc><codeph>activity</codeph> イベントを送出するために必要なモーションの量を指定します。使用可能な値の範囲は 0 ～ 100 です。デフォルト値は 50 です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>timeout</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>2000</apiData><apiDesc>アクティビティがない場合に、アクティビティが停止したと判定して <codeph>activity</codeph> イベントを送出するまでの経過時間をミリ秒単位で指定します。デフォルト値は 2000 ミリ秒（2 秒）です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>activity</codeph> イベントを送出するために必要なモーションの量を指定します。アクティビティがない場合に、モーションが停止したと判定してイベントを送出するまでの時間をミリ秒単位で設定することもできます。 
	 <p><b>注意：</b>ビデオは <codeph>motionLevel</codeph> パラメーターの値に関係なく表示できます。このパラメーターは、ビデオを実際にキャプチャまたは表示するかどうかではなく、イベントを送出するタイミングと状況のみを決定します。</p>
	 <p>
	 カメラがモーションをまったく検知しないようにするには、<codeph>motionLevel</codeph> パラメーターに 100 を指定します。この場合、<codeph>activity</codeph> イベントは送出されません。この値は、通常はテスト目的にのみ使用します。例えば、イベントが送出されたときに通常トリガーされるハンドラーを一時的に無効にする場合などに使用します。
	 </p>
	 <p>
	 カメラが現在検知しているモーションの量を調べるには、<codeph>activityLevel</codeph> プロパティを使用します。モーションの精度（sensitivity）の値がアクティビティの値に直接対応します。モーションがまったく存在しない場合、アクティビティ値は 0 です。継続的にモーションが発生している場合、アクティビティ値は 100 です。移動していない場合、アクティビティ値はモーション精度値よりも低くなります。移動している場合、アクティビティ値は頻繁にモーション精度値を超えます。
	 </p>
	 <p>
	 このメソッドの目的は <codeph>Microphone.setSilenceLevel()</codeph> メソッドに似ています。どちらのメソッドも、<codeph>activity</codeph> イベントの送出方法を指定するために使用します。ただし、パブリッシュするストリームに対する影響という点では、この 2 つのメソッドは大きく異なります。
	 </p>
	 
	 <ul>
	   <li><codeph>Microphone.setSilenceLevel()</codeph> は帯域幅を最適化するように設計されています。オーディオストリームが無音と考えられる場合には、オーディオデータは送信されません。代わりに、無音状態が始まったことを示すメッセージが送信されます。 </li>
	   <li><codeph>Camera.setMotionLevel()</codeph> はモーションを検知し、使用する帯域幅には影響しないように設計されています。ビデオストリームでモーションが検知されない間も、ビデオは送信されます。</li>
	 </ul>
	   
	 
	 
	 </apiDesc><example conref="examples\Camera_setMotionLevelExample.as"> 次の例では、ユーザーのカメラをモニターまたは監視カメラとして使用します。カメラがモーションを検知すると、テキストフィールドにアクティビティレベルが表示されます。この例を拡張して、アラームを鳴らしたり、Web サービスを通じて他のアプリケーションにメッセージを送信したりすることも可能です。
 
 <p><codeph>Camera.getCamera()</codeph> メソッドは、カメラオブジェクトへの参照を返します。利用できるカメラがない場合、またはカメラが取り付けられていない場合は、null を返します。if ステートメントでカメラが利用できるかどうかをチェックし、利用できる場合は <codeph>connectCamera()</codeph> メソッドを呼び出します。<codeph>connectCamera()</codeph> メソッドは、キャプチャされたストリームの幅と高さを使用してビデオオブジェクトをインスタンス化します。カメラでキャプチャされたビデオを表示するため、ビデオストリームへの参照をビデオオブジェクトに関連付けて、ビデオオブジェクトを表示リストに追加します。通常は <codeph>attachCamera()</codeph> メソッドが呼び出されると、Flash Player によるカメラへのアクセスを許可するかどうかをユーザーに確認するダイアログボックスが表示されます。 ただし、ユーザーがアクセスを拒否し、<codeph>「後で確認」</codeph>オプションを選択した場合、ダイアログボックスは表示されず、何も表示されません。 ユーザーがカメラへのアクセスを許可するオプションを確実に設定できるようにするため、<codeph>system.Security.showSettings()</codeph> メソッドを使用して Flash Player 設定ダイアログボックスを表示します。</p>
 
 <p>アクティビティイベントが呼び出される前に、<codeph>setMotionLevel()</codeph> メソッドによってアクティビティのレベル（モーションの量）を 5（わずかな動きも検出する）に設定します。カメラがモーション検知を停止してからアクティビティイベントが呼び出されるまでの時間を 1 秒（1000 ミリ秒）に設定します。アクティビティなしの状態で 1 秒が経過するか、またはアクティビティのレベルが 5 に達すると、<codeph>ActivityEvent.ACTIVITY</codeph> イベントが送出され、<codeph>activityHandler()</codeph> メソッドが呼び出されます。アクティビティのレベルによってイベントがトリガーされた場合、<codeph>activating</codeph> プロパティが <codeph>true</codeph> に設定され、Timer オブジェクトが開始されます。1 秒ごとに Timer オブジェクトのタイマーイベントが送出され、<codeph>timerHandler()</codeph> メソッドが呼び出され、現在のアクティビティレベルが表示されます。（5 以上のレベルによりタイマーがトリガーされますが、表示される現在のアクティビティのレベルはそれより小さい数値になる場合があります。）</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.media.Camera;
    import flash.media.Video;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.ActivityEvent;

    public class Camera_setMotionLevelExample extends Sprite {
        private var myTextField:TextField;
        private var cam:Camera;
        private var t:Timer = new Timer(1000);

        public function Camera_setMotionLevelExample() {
            myTextField = new TextField();
            myTextField.background = true;
            myTextField.selectable = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;    
        
            cam = Camera.getCamera();
            
            if (!cam) {
                myTextField.text = "No camera is installed.";

            }else {
                myTextField.text = "Waiting to connect.";
                connectCamera(); 
            }

            addChild(myTextField);

            t.addEventListener(TimerEvent.TIMER, timerHandler);
        }

        private function connectCamera():void {
                var vid:Video = new Video(cam.width, cam.height);
                vid.x = 10;
                vid.y = 10;
                vid.attachCamera(cam);
                addChild(vid);    

                cam.setMotionLevel(5, 1000);
                cam.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(e:ActivityEvent):void {
            if (e.activating == true) {
                t.start();    
            } else {
                myTextField.text = "Everything is quiet.";
                t.stop();
            }    
        }

        private function timerHandler(event:TimerEvent):void {
             myTextField.x = 10;
             myTextField.y = cam.height + 20;
             myTextField.text = "There is some activity. Level: " + cam.activityLevel;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.media.xml#Camera/motionLevel"><linktext>motionLevel</linktext></link><link href="flash.media.xml#Camera/motionTimeout"><linktext>motionTimeout</linktext></link><link href="flash.media.xml#Microphone/setSilenceLevel()"><linktext>Microphone.setSilenceLevel()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setQuality"><apiName>setQuality</apiName><shortdesc>
	 現在の送信ビデオフィードの 1 秒あたりの最大帯域幅、または必要な画質を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera.setQuality, setQuality
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bandwidth</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>現在の送信ビデオフィードで使用できる最大帯域幅（1 秒あたりのバイト数）を指定します。<codeph>quality</codeph> の値を維持するために必要な帯域幅を Flash Player のビデオが使用できるように指定するには、<codeph>bandwidth</codeph> で 0 を渡します。デフォルト値は 16384 です。	 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>quality</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>必要な画質レベルを指定する整数です。各ビデオフレームに適用される圧縮率によって決まります。指定できる値は 1（最低品質、最大圧縮率）から 100（最高品質、圧縮なし）までです。帯域幅を超過するのを避けるために必要に応じて画質を変更するには、<codeph>quality</codeph> に 0 を指定します。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 現在の送信ビデオフィードの 1 秒あたりの最大帯域幅、または必要な画質を設定します。一般に、このメソッドは、Flash Media Server を使用してビデオを送信している場合にだけ使用します。
	 
	 <p>このメソッドを使用して、送信ビデオフィードの要素として帯域幅と画質のどちらがそのアプリケーションにとって重要かを指定します。</p>
	 
	 <ul>
	   <li>帯域幅の使用量を優先する場合は、<codeph>bandwidth</codeph> に数値を、<codeph>quality</codeph> に 0 を指定します。こうすると、指定した帯域幅内で最高品質のビデオが送信されます。必要であれば、指定の帯域幅を超えるのを防ぐために、画質が下げられます。一般には、モーションが増えるほど、画質は下がります。</li>
	   <li>画質を優先する場合は、<codeph>bandwidth</codeph> に 0 を、<codeph>quality</codeph> に数値を指定します。こうすると、指定した画質を維持するために必要なだけの帯域幅が使われます。必要であれば、画質を維持するためにフレームレートが下げられます。一般には、モーションが増えるほど、使用する帯域幅も増加します。</li>
	   <li>帯域幅と品質の両方の重要性が同程度である場合は、両方のパラメーターに数値を指定します。指定の品質を達成でき、指定の帯域幅を超えない範囲のビデオが送信されます。必要であれば、指定の帯域幅を超えることなく画質を維持するために、フレームレートが下げられます。</li>
	 </ul>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Camera/getCamera()"><linktext>getCamera()</linktext></link><link href="flash.media.xml#Camera/quality"><linktext>quality</linktext></link></related-links></apiOperation><apiValue id="flash.media:Camera:activityLevel:get"><apiName>activityLevel</apiName><shortdesc>
	 カメラが検知しているモーション量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 カメラが検知しているモーション量です。0（モーションは検知されていない）から 100（大量のモーションが検知されている）までの値が設定されます。このプロパティの値は、<codeph>setMotionLevel()</codeph> メソッドに設定を渡す必要があるかどうかを判断するのに役立ちます。
	 <p><codeph>Video.attachCamera()</codeph> メソッドが呼び出されていないため、使用可能なカメラがまだ使用されていない場合は、このプロパティが -1 に設定されます。</p>
	 <p>圧縮されていないローカルビデオだけをストリーミングする場合、このプロパティはイベントハンドラーに関数を割り当て済みであるときに限り設定されます。それ以外の場合は undefined になります。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/motionLevel"><linktext>motionLevel</linktext></link><link href="flash.media.xml#Camera/setMotionLevel()"><linktext>setMotionLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:bandwidth:get"><apiName>bandwidth</apiName><shortdesc>
	 現在の送信ビデオフィードで使用できる最大帯域幅（バイト単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.bandwidth, bandwidth
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 現在の送信ビデオフィードで使用できる最大帯域幅（バイト単位）です。値 0 は、ビデオのフレーム品質を維持するために必要な帯域幅をフィードで使用できることを示します。
	 <p>このプロパティの値を設定するには、<codeph>setQuality()</codeph> メソッドを使用します。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setQuality()"><linktext>setQuality()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:currentFPS:get"><apiName>currentFPS</apiName><shortdesc>	
	 現在のデータキャプチャレート（1 秒あたりのフレーム数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.currentFPS, currentFPS
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>	
	 現在のデータキャプチャレート（1 秒あたりのフレーム数）です。このプロパティを設定することはできません。ただし、<codeph>setMode()</codeph> メソッドを使用すると、これに関係する <codeph>fps</codeph> プロパティを設定することができます。このプロパティは、データをキャプチャする際の希望最大フレームレートを指定します。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setMode()"><linktext>setMode()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:fps:get"><apiName>fps</apiName><shortdesc>
	 カメラの最大データキャプチャレート（1 秒あたりのフレーム数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.fps, fps
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 カメラの最大データキャプチャレート（1 秒あたりのフレーム数）です。最大データキャプチャレートは、カメラの性能によって異なります。このフレームレートを実現できない場合があります。
	 <ul>
	   <li>このプロパティに必要な値を設定するには、<codeph>setMode()</codeph> メソッドを使用します。</li>
	   <li>現在のデータキャプチャレートを調べるには、<codeph>currentFPS</codeph> プロパティを使用します。</li>
	 </ul>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/currentFPS"><linktext>currentFPS</linktext></link><link href="flash.media.xml#Camera/setMode()"><linktext>setMode()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:height:get"><apiName>height</apiName><shortdesc>
	 現在のキャプチャの高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.height, height
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 現在のキャプチャの高さ（ピクセル単位）です。このプロパティに値を設定するには、<codeph>setMode()</codeph> メソッドを使用します。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/width"><linktext>width</linktext></link><link href="flash.media.xml#Camera/setMode()"><linktext>setMode()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:index:get"><apiName>index</apiName><shortdesc>
	 カメラのインデックスを指定するゼロから始まる整数です。これは、names プロパティから返される配列のインデックスと同じです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.index, index
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 カメラのインデックスを指定するゼロから始まる整数です。これは、<codeph>names</codeph> プロパティから返される配列のインデックスと同じです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/names"><linktext>names</linktext></link><link href="flash.media.xml#Camera/getCamera()"><linktext>getCamera()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:keyFrameInterval:get"><apiName>keyFrameInterval</apiName><shortdesc>
	 ビデオ圧縮アルゴリズムによって補間されるのではなく、完全送信されるビデオフレーム（キーフレームと呼ばれる）の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 ビデオ圧縮アルゴリズムによって補間されるのではなく、完全送信されるビデオフレーム（<i>キーフレーム</i>と呼ばれる）の数です。デフォルト値は 15 で、15 のフレームごとにフレームがキーフレームになります。1 はすべてのフレームがキーフレームであることを意味します。設定できる値は、1 ～ 48 です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setKeyFrameInterval()"><linktext>setKeyFrameInterval()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:loopback:get"><apiName>loopback</apiName><shortdesc>
	 カメラがキャプチャするローカルビューを、Flash Media Server を使用したライブ送信で使用されるように圧縮および解凍する（true）か、または圧縮されていない状態にする（false）かを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 カメラがキャプチャするローカルビューを、Flash Media Server を使用したライブ送信で使用されるように圧縮および解凍する（<codeph>true</codeph>）か、または圧縮されていない状態にする（<codeph>false</codeph>）かを示します。デフォルト値は <codeph>false</codeph> です。 
	 
	 <p>
	 圧縮したストリームは、ビデオの品質設定のプレビューなど、テスト目的で使用する場合には役立ちますが、非常に処理コストがかかります。ローカルビューは圧縮され、送信するためにライブ接続で使用されるように編集され、さらにローカルで表示するために解凍されます。
	 </p>
	 
	 <p>この値を設定するには、<codeph>Camera.setLoopback()</codeph> を使用します。このプロパティが true である場合に使用する圧縮率を設定するには、<codeph>Camera.setQuality()</codeph> を使用します。</p>
	  
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setLoopback()"><linktext>setLoopback()</linktext></link><link href="flash.media.xml#Camera/setQuality()"><linktext>setQuality()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:motionLevel:get"><apiName>motionLevel</apiName><shortdesc>
	 activity イベントを送出するために必要なモーションの量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.motionLevel, motionLevel
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>activity</codeph> イベントを送出するために必要なモーションの量です。使用可能な値の範囲は 0 ～ 100 です。デフォルト値は 50 です。
	 <p>ビデオは <codeph>motionLevel</codeph> プロパティの値に関係なく表示できます。詳細については、<codeph>setMotionLevel()</codeph>を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setMotionLevel()"><linktext>setMotionLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:motionTimeout:get"><apiName>motionTimeout</apiName><shortdesc>
	 カメラがモーション検知を停止してから、activity イベントが呼び出されるまでの時間（ミリ秒単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.motionTimeout, motionTimeout
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 カメラがモーション検知を停止してから、<codeph>activity</codeph> イベントが呼び出されるまでの時間（ミリ秒単位）です。デフォルト値は 2000（2 秒）です。 
	 <p>この値を設定するには、<codeph>setMotionLevel()</codeph> を使用します。 </p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setMotionLevel()"><linktext>setMotionLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:muted:get"><apiName>muted</apiName><shortdesc>
	 ユーザーが Flash Player のプライバシーダイアログボックスでカメラへのアクセスを拒否した（true）か、許可した（false）かを示すブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.muted, muted
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 ユーザーが Flash Player のプライバシーダイアログボックスでカメラへのアクセスを拒否した（<codeph>true</codeph>）か、許可した（<codeph>false</codeph>）かを示すブール値です。この値が変わると、<codeph>status</codeph> イベントが送出されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/getCamera()"><linktext>getCamera()</linktext></link><link href="flash.media.xml#Camera/event:status"><linktext>status</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:name:get"><apiName>name</apiName><shortdesc>
	 カメラのハードウェアから返される、現在のカメラの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.name, name
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 カメラのハードウェアから返される、現在のカメラの名前です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/names"><linktext>names</linktext></link><link href="flash.media.xml#Camera/getCamera()"><linktext>getCamera()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:names:get"><apiName>names</apiName><shortdesc>
	 Adobe Flash Player 設定パネルの「プライバシー」を表示せずに、使用できるすべてのカメラの名前を示すストリング配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.names, names
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Adobe Flash Player 設定パネルの「プライバシー」を表示せずに、使用できるすべてのカメラの名前を示すストリング配列です。この配列は ActionScript の他の配列と同じように動作します。この配列を使用して、それぞれのカメラの 0 から始まるインデックスと、システム上のカメラの数（<codeph>names.length</codeph>）を調べることができます。詳細については、Array クラスの <codeph>names</codeph> を参照してください。
	 
	 <p><codeph>names</codeph> プロパティが呼び出されると、ハードウェアを広範囲にわたって調べる必要があります。このため、配列を作成するまでに数秒間かかることがあります。ほとんどの場合は、デフォルトのカメラを使用できます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/getCamera()"><linktext>getCamera()</linktext></link><link href="flash.media.xml#Camera/index"><linktext>index</linktext></link><link href="flash.media.xml#Camera/name"><linktext>name</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:quality:get"><apiName>quality</apiName><shortdesc>
	 必要な画質レベルです。各ビデオフレームに適用される圧縮率によって決まります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.quality, quality
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 必要な画質レベルです。各ビデオフレームに適用される圧縮率によって決まります。指定できる品質値は 1（最低品質、最大圧縮率）～ 100（最高品質、圧縮なし）です。デフォルト値は 0 です。これは、使用できる帯域幅を超えることがないように、画質が必要に応じて変更されることを示します。
	 
	 <p>このプロパティの値を設定するには、<codeph>setQuality()</codeph> メソッドを使用します。</p>
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setQuality()"><linktext>setQuality()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:width:get"><apiName>width</apiName><shortdesc>
	 現在のキャプチャの幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Camera.width, width
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 現在のキャプチャの幅（ピクセル単位）です。このプロパティに必要な値を設定するには、<codeph>setMode()</codeph> メソッドを使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/setMode()"><linktext>setMode()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.media:SoundTransform"><apiName>SoundTransform</apiName><shortdesc>
 SoundTransform クラスにはボリュームとパンのプロパティが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
 </refpath></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SoundTransform クラスにはボリュームとパンのプロパティが含まれます。 
 
 </apiDesc><example conref="examples\SoundTransformExample.as"> 次の例では、MP3 ファイルをロードして再生します。MP3 ファイルの再生中にマウスを移動します。マウスをステージ上に移動すると、ボリュームとパンが変更されます。この例を実行するには、MySound.mp3 ファイルを SWF ファイルと同じディレクトリに配置します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.*;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.SoundTransform;
    import flash.net.URLRequest;
    import flash.utils.Timer;

    public class SoundTransformExample extends Sprite {
        private var url:String = "MySound.mp3";
        private var soundFactory:Sound;
        private var channel:SoundChannel;
        private var positionTimer:Timer;

        public function SoundTransformExample() {
            stage.align = StageAlign.TOP_LEFT;
            stage.scaleMode = StageScaleMode.NO_SCALE;

            var request:URLRequest = new URLRequest(url);
            soundFactory = new Sound();
            soundFactory.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            soundFactory.load(request);
            channel = soundFactory.play();
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function ioErrorHandler(event:Event):void {
            trace("ioErrorHandler: " + event);
        }

        private function setPan(pan:Number):void {
            trace("setPan: " + pan.toFixed(2));
            var transform:SoundTransform = channel.soundTransform;
            transform.pan = pan;
            channel.soundTransform = transform;
        }

        private function setVolume(volume:Number):void {
            trace("setVolume: " + volume.toFixed(2));
            var transform:SoundTransform = channel.soundTransform;
            transform.volume = volume;
            channel.soundTransform = transform;
        }

        private function mouseMoveHandler(event:MouseEvent):void {
            var halfStage:uint = Math.floor(stage.stageWidth / 2);
            var xPos:uint = event.stageX;
            var yPos:uint = event.stageY;
            var value:Number;
            var pan:Number;

            if (xPos > halfStage) {
                value = xPos / halfStage;
                pan = value - 1;
            } else if (xPos &lt; halfStage) {
                value = (xPos - halfStage) / halfStage;
                pan = value;
            } else {
                pan = 0;
            }

            var volume:Number = 1 - (yPos / stage.stageHeight);

            setVolume(volume);
            setPan(pan);
            
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#SimpleButton/soundTransform"><linktext>flash.display.SimpleButton.soundTransform</linktext></link><link href="flash.display.xml#Sprite/soundTransform"><linktext>flash.display.Sprite.soundTransform</linktext></link><link href="flash.media.xml#Microphone/soundTransform"><linktext>flash.media.Microphone.soundTransform</linktext></link><link href="flash.media.xml#SoundChannel/soundTransform"><linktext>flash.media.SoundChannel.soundTransform</linktext></link><link href="flash.media.xml#SoundMixer/soundTransform"><linktext>flash.media.SoundMixer.soundTransform</linktext></link><link href="flash.net.xml#NetStream/soundTransform"><linktext>flash.net.NetStream.soundTransform</linktext></link></related-links><apiConstructor id="flash.media:SoundTransform:SoundTransform"><apiName>SoundTransform</apiName><shortdesc>
	 SoundTransform オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 
	 </refpath></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>vol</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1</apiData><apiDesc>ボリュームです。範囲は 0（無音）～ 1（フルボリューム）です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>panning</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>サウンドの左から右へのパンです。範囲は -1（完全に左へパン）～ 1（完全に右へパン）です。0 はパンなし（中央）を表します。 
	 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 SoundTransform オブジェクトを作成します。 
	 
	 </apiDesc><example conref="examples\SoundTransform_constructorExample.as"> 次の例では、サウンドは右チャンネルからのみ再生され、ボリュームは 50 ％に設定されます。
 
 <p>コンストラクターで、サウンドがロードされ、サウンドチャンネル（<codeph>channel</codeph>）に割り当てられます。 SoundTranform オジェクト（<codeph>transform</codeph>）も作成されます。最初の引数では、ボリュームが 50% に設定されます（範囲は 0.0 ～ 1.0）。2 番目の引数では、パンが設定されます。この例では、パンは 1.0 に設定され、サウンドが右スピーカーからのみ再生されることを意味します。これらの設定を有効にするために、<codeph>transform</codeph> SoundTranform オブジェクトを、サウンドチャンネルの <codeph>souundTransform</codeph> プロパティに割り当てます。</p> 
<p> <b>注意：</b>この例には、限定されたエラー処理が記述されています。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.SoundTransform;
    import flash.events.IOErrorEvent;

    public class SoundTransform_constructorExample extends Sprite
    {
        public function SoundTransform_constructorExample() {
            var mySound:Sound = new Sound();
            var url:URLRequest = new URLRequest("mySound.mp3");
            var channel:SoundChannel;
            var transform:SoundTransform = new SoundTransform(0.5, 1.0);

            mySound.load(url);    
            channel = mySound.play();
            channel.soundTransform = transform;

            mySound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace("The sound could not be loaded: " + errorEvent.text);
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.media:SoundTransform:leftToLeft:set"><apiName>leftToLeft</apiName><shortdesc>
	 左スピーカーで再生する左入力データの量を指定する値 0（なし）～ 1（すべて）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 左スピーカーで再生する左入力データの量を指定する値 0（なし）～ 1（すべて）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:leftToRight:set"><apiName>leftToRight</apiName><shortdesc>
	 右スピーカーで再生する左入力データの量を指定する値 0（なし）～ 1（すべて）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 右スピーカーで再生する左入力データの量を指定する値 0（なし）～ 1（すべて）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:pan:set"><apiName>pan</apiName><shortdesc>
	 サウンドの左から右へのパンです。範囲は -1（完全に左へパン）～ 1（完全に右へパン）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 サウンドの左から右へのパンです。範囲は -1（完全に左へパン）～ 1（完全に右へパン）です。0 はパンなし（左右のバランスをとった中央）を表します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:rightToLeft:set"><apiName>rightToLeft</apiName><shortdesc>
	 左スピーカーで再生する右入力データの量を指定する値 0（なし）～ 1（すべて）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 左スピーカーで再生する右入力データの量を指定する値 0（なし）～ 1（すべて）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:rightToRight:set"><apiName>rightToRight</apiName><shortdesc>
	 右スピーカーで再生する右入力データの量を指定する値 0（なし）～ 1（すべて）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 右スピーカーで再生する右入力データの量を指定する値 0（なし）～ 1（すべて）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:volume:set"><apiName>volume</apiName><shortdesc>
	 ボリュームです。範囲は 0（無音）～ 1（フルボリューム）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 ボリュームです。範囲は 0（無音）～ 1（フルボリューム）です。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.media:Sound"><apiName>Sound</apiName><shortdesc>
  Sound クラスを使用すると、アプリケーション内のサウンドを処理することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
  </refpath></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Sound クラスを使用すると、アプリケーション内のサウンドを処理することができます。Sound クラスを使用すると、Sound オブジェクトの作成や、外部 MP3 ファイルのオブジェクトへのロードと再生ができます。また、サウンドストリームを閉じたり、サウンド関連のデータ（ストリームおよび ID3 メタデータのバイト数などの情報）にアクセスしたりできます。サウンドのサウンドソース（SoundChannel オブジェクトまたは Microphone オブジェクト）と、コンピューターのスピーカーへのサウンド出力を制御する SoundTransform クラスのプロパティを使用して、サウンドを詳細に制御できます。 
  
  <p>Flash Player 10 以降と AIR 1.5以降では、このクラスを使用して、動的に生成されたサウンドを処理することもできます。この場合、サウンドデータのポーリングには、<codeph>sampleData</codeph> イベントハンドラーに割り当てられた関数が使用されます。サウンドは、サウンドデータに設定された ByteArray オブジェクトから取得され、再生されます。<codeph>Sound.extract()</codeph> を使用すると、Sound オブジェクトからサウンドデータを抽出できます。抽出したサウンドデータは、ストリームに書き戻して再生する前に処理できます。</p>
  
  <p>SWF ファイルに埋め込まれたサウンドを制御するには、SoundMixer クラスのプロパティを使用します。</p>
  
  <p platform="actionscript"><b>注意：</b>ActionScript 3.0 の Sound API は、ActionScript 2.0 とは異なります。ActionScript 3.0 では、取得して階層内に配置した Sound オブジェクトのプロパティを制御することができません。</p>
  
  <p>このクラスを使用するときは、次のセキュリティモデルを考慮してください。 </p>
  
  <ul>
  
      <li>呼び出し元ファイルがネットワークサンドボックスにあり、ロードするサウンドファイルがローカルにある場合、サウンドのロードおよび再生はできません。</li>
  
      <li>呼び出し元 ファイルがローカルにあり、リモートサウンドのロードおよび再生を試行する場合、デフォルトでは、サウンドのロードや再生ができません。この種のアクセスを許可するには、ユーザーが明示的な許可を与える必要があります。</li>
  
      <li>サウンドを処理する特定の操作が制限されます。ロードされたサウンドのデータには、クロスドメインポリシーファイルを実装していない限り、別のドメインに存在するファイルからアクセスできないことに注意してください。この制限の対象となるサウンド関連の API は、<codeph>Sound.id3</codeph>、<codeph>SoundMixer.computeSpectrum()</codeph>、<codeph>SoundMixer.bufferTime</codeph>、および <codeph>SoundTransform</codeph> クラスです。</li>
  
  </ul>
  
  <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
  
  <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
  
  <ul>
  
  <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
  <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
  
    <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
  
  </ul>
  
  </apiDesc><example conref="examples\SoundExample.as"> 次の例では、MP3 ファイルを開い再生すると発生するサウンドイベントに関する情報が表示されます。この例を実行するには、MySound.mp3 ファイルを SWF ファイルと同じディレクトリに配置します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLRequest;

    public class SoundExample extends Sprite {
        private var url:String = "MySound.mp3";
        private var song:SoundChannel;

        public function SoundExample() {
            var request:URLRequest = new URLRequest(url);
            var soundFactory:Sound = new Sound();
            soundFactory.addEventListener(Event.COMPLETE, completeHandler);
            soundFactory.addEventListener(Event.ID3, id3Handler);
            soundFactory.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            soundFactory.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            soundFactory.load(request);
            song = soundFactory.play();
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function id3Handler(event:Event):void {
            trace("id3Handler: " + event);
        }

        private function ioErrorHandler(event:Event):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.media.xml#Microphone"><linktext>Microphone</linktext></link><link href="flash.media.xml#SoundChannel"><linktext>SoundChannel</linktext></link><link href="flash.media.xml#SoundMixer"><linktext>SoundMixer</linktext></link><link href="flash.media.xml#SoundTransform"><linktext>SoundTransform</linktext></link></related-links><adobeApiEvent id="flash.media:Sound_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
 ロード処理の実行中にデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ロード処理の実行中にデータを受信したときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.OPEN_open"><apiName>open</apiName><shortdesc>
 ロード操作が開始したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ロード操作が開始したときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 入出力エラーが発生してロード操作が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 入出力エラーが発生してロード操作が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.ID3_id3"><apiName>id3</apiName><shortdesc>
 MP3 サウンドで ID3 データを使用できる場合に、Sound オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ID3</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 MP3 サウンドで ID3 データを使用できる場合に、Sound オブジェクトによって送出されます。 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/id3"><linktext>Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 データが正常にロードされたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 データが正常にロードされたときに送出されます。 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><shortdesc>
  Flash Player が新しいオーディオデータを要求するときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events.SampleDataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Flash Player が新しいオーディオデータを要求するときに送出されます。 
 
 </apiDesc><example conref="examples\Sound_SampleDataExample.as"> 次の例は、単純な正弦波を再生します。
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(Event.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/extract()"><linktext>extract()</linktext></link><link href="flash.media.xml#Sound/play()"><linktext>play()</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.media:Sound:Sound"><apiName>Sound</apiName><shortdesc>
     新しい Sound オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>stream</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiData>null</apiData><apiDesc> 外部の MP3 ファイルを指定する URL です。
     
	 </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiOperationClassifier>flash.media:SoundLoaderContext</apiOperationClassifier><apiData>null</apiData><apiDesc> オプションの SoundLoader コンテクストオブジェクト。バッファー時間（Sound オブジェクトのバッファー内に保持する MP3 データの最小ミリ秒数）を定義でき、サウンドをロードする前にクロスドメインポリシーファイルをチェックするかどうかを指定できます。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     新しい Sound オブジェクトを作成します。Sound コンストラクターに有効な URLRequest オブジェクトを渡すと、コンストラクターは自動的に Sound オブジェクトの <codeph>load()</codeph> 関数を呼び出します。Sound コンストラクターに有効な URLRequest オブジェクトを渡さない場合は、ユーザー自身が Sound オブジェクトの <codeph>load()</codeph> 関数を呼び出す必要があります。呼び出さないと、ストリームがロードされません。
     
     <p>Sound オブジェクトで <codeph>load()</codeph> が呼び出された後は、その Sound オブジェクトに別のサウンドファイルをロードすることはできません。別のサウンドファイルをロードするには、新しい Sound オブジェクトを作成します。</p>
     
     Flash Player 10 以降と AIR 1.5 以降では、<codeph>load()</codeph> の代わりに <codeph>sampleData</codeph> イベントハンドラーを使用して、サウンドを Sound オブジェクトに動的にロードできます。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:Sound:close"><apiName>close</apiName><shortdesc>
     ストリームを閉じて、データのダウンロードを中止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ストリームを閉じることができないか、またはストリームが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ストリームを閉じて、データのダウンロードを中止します。<codeph>close()</codeph> メソッドの呼び出し後は、ストリームからデータを読み込みません。
     
     </apiDesc><example conref="examples\Sound_closeExample.as"> 次の例では、ユーザーが「停止」ボタンをクリックしたときに、<codeph>Sound.close()</codeph> メソッドが呼び出され、サウンドがストリーミングを停止します。
 
 <p>コンストラクターで、「開始」ボタンおよび「停止」ボタン用のテキストフィールドが作成されます。ユーザーがテキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。このメソッドは、サウンドファイルの開始と停止を処理します。ネットワーク接続によって、またはユーザーが「停止」ボタンを押したときにファイルの多くがロードされてしまっているため、サウンドファイルの再生を停止するのにしばらく時間がかかる場合があります。ストリームを閉じている間に発生する可能性のある IO エラーをキャッチするために、<codeph>try...catch</codeph> ブロックが使用されます。例えば、サウンドがローカルディレクトリからロードされ、ストリームされない場合、エラー 2029 がキャッチされ、"この URLStream オブジェクトには開いているストリームがありません" というメッセージが表示されます。</p> 
 
<codeblock> 
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;    
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;

    public class Sound_closeExample extends Sprite {
        private var snd:Sound = new Sound();
        private var button:TextField = new TextField();
        private var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
        
        public function Sound_closeExample() {
            button.x = 10;
            button.y = 10;
            button.text = "START";
            button.border = true;
            button.background = true;
            button.selectable = false;
            button.autoSize = TextFieldAutoSize.LEFT;

            button.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(button);
        }

        private function clickHandler(e:MouseEvent):void {

            if(button.text == "START") {

                snd.load(req);
                snd.play();        

                snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);

                button.text = "STOP";
            }
            else if(button.text == "STOP") {
                    
                try {
                    snd.close();
                    button.text = "Wait for loaded stream to finish.";
                }
                catch (error:IOError) {
                    button.text = "Couldn't close stream " + error.message;    
                }
            }
        }
        
        private function errorHandler(event:IOErrorEvent):void {
                button.text = "Couldn't load the file " + event.text;
        }
    }
}


</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:Sound:extract"><apiName>extract</apiName><shortdesc>
      Sound オブジェクトから生のサウンドデータを抽出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Sound オブジェクトで使用できるサンプルの数です。
     
     </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>抽出されるサウンドサンプリングの配置先の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>抽出するサウンドサンプリングの数です。サンプルには、2 つの 32 ビット浮動小数点数を意味する左チャンネルと右チャンネルがあります。
          
     </apiDesc></apiParam><apiParam><apiItemName>startPosition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>-1</apiData><apiDesc>抽出を開始するサンプルです。値を指定しない場合、<codeph>Sound.extract()</codeph> の最初の呼び出しはサウンドの先頭から開始され、<codeph>startPosition</codeph> の値が設定されていない後続の呼び出しでは、ファイル全体が順に処理されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sound オブジェクトから生のサウンドデータを抽出します。
     
      <p>このメソッドは、動的に生成されたオーディオを処理する場合に、別の Sound オブジェクトの <codeph>sampleData</codeph> イベントに割り当てられた関数を使って使用するように設計されています。つまり、このメソッドを使用して Sound オブジェクトからサウンドデータを抽出できます。次に、別の Sound オブジェクトによってダイナミックオーディオのストリーミングに使用されているバイト配列に、そのデータを書き込むことができます。</p>
     
      <p>オーディオデータは、対象のバイト配列に、現在の位置から配置されます。オーディオデータは、通常、44,100 Hz ステレオで公開されます。サンプルの型は 32 ビット浮動小数値で、<codeph>ByteArray.readFloat()</codeph> を使用して Number に変換できます。 </p>
     
     </apiDesc><example conref="examples\Sound_extractExample.as"> 次の例では、mp3 ファイルを読み込み、Sound クラスの <codeph>extract()</codeph> メソッドを使用してオーディオデータにアクセスします。
 <p>mp3 データは <codeph>sourceSnd</codeph> Sound オブジェクト内に読み込まれます。アプリケーションが mp3 データを読み込むと、<codeph>loaded()</codeph> 関数が呼び出されます。この関数は、<codeph>sourceSnd</codeph> オブジェクトの <codeph>complete</codeph> イベントのイベントハンドラーです。2 番目の Sound オブジェクト <codeph>outputSound</codeph> を使用して、変更されたオーディオが再生されます。<codeph>outputSound</codeph> オブジェクトには <codeph>sampleData</codeph> イベントリスナーがあり、オブジェクトの <codeph>play()</codeph> メソッドを呼び出すと、この <codeph>sampleData</codeph> イベントが定期的に送出されます。<codeph>upOctave()</codeph> メソッドは、ソースのオーディオデータに基づいて、変更されたオーディオデータのバイト配列を返します。ソースデータのオーディオサンプルを 1 つおきにスキップすることにより、1 オクターブ高いオーディオが返されます。<codeph>sampleData</codeph> イベントのイベントハンドラーによって、返されたバイト配列が <codeph>outoputSound</codeph> オブジェクトの <codeph>data</codeph> プロパティに書き込まれます。<codeph>data</codeph> バイト配列は <codeph>outputSound</codeph> オブジェクトの出力オーディオデータに追加されます。</p>
 <p>この例をテストするには、test.mp3 ファイルを SWF ファイルと同じディレクトリに追加してください。</p>
<codeblock>

var sourceSnd:Sound = new Sound();
var outputSnd:Sound = new Sound();
var urlReq:URLRequest = new URLRequest("test.mp3");

sourceSnd.load(urlReq);
sourceSnd.addEventListener(Event.COMPLETE, loaded);

function loaded(event:Event):void
{
    outputSnd.addEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
    outputSnd.play();
}

function processSound(event:SampleDataEvent):void
{
    var bytes:ByteArray = new ByteArray();
    sourceSnd.extract(bytes, 4096);
    event.data.writeBytes(upOctave(bytes));
}

function upOctave(bytes:ByteArray):ByteArray
{
    var returnBytes:ByteArray = new ByteArray();
    bytes.position = 0;
    while(bytes.bytesAvailable > 0)
    {
        returnBytes.writeFloat(bytes.readFloat());
        returnBytes.writeFloat(bytes.readFloat());
        if (bytes.bytesAvailable > 0)
        {
            bytes.position += 8;
        }
    }
    return returnBytes;
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.media.xml#Sound/play()"><linktext>play()</linktext></link><link href="flash.media.xml#Sound/event:sampleData"><linktext>sampleData</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Sound:load"><apiName>load</apiName><shortdesc>
     指定した URL から外部 MP3 ファイルのロードを開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>このロードの失敗原因であるネットワークエラーです。
	 
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>信頼されていないローカルファイルはインターネットへの接続を許可されません。この問題は、このファイルを <ph platform="actionscript">local-with-networking</ph> または trusted として分類し直すことで回避できます。
	 
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとしている場合。ブロックされているポートの完全な一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>stream</codeph> オブジェクトの <codeph>digest</codeph> プロパティが <codeph>null</codeph> ではありません。RLRequest オブジェクトの <codeph>digest</codeph> プロパティを設定できるのは、<codeph>URLLoader.load()</codeph> メソッドを呼び出して SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込む場合のみです。
     
      </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとしている場合。ブロックされているポートの完全な一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stream</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc> 外部の MP3 ファイルを指定する URL です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>context</apiItemName><apiOperationClassifier>flash.media:SoundLoaderContext</apiOperationClassifier><apiData>null</apiData><apiDesc> オプションの SoundLoader コンテクストオブジェクト。バッファー時間（Sound オブジェクトのバッファー内に保持する MP3 データの最小ミリ秒数）を定義でき、サウンドをロードする前にクロスドメインポリシーファイルをチェックするかどうかを指定できます。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定した URL から外部 MP3 ファイルのロードを開始します。Sound コンストラクターに有効な URLRequest オブジェクトを渡すと、コンストラクターは <codeph>Sound.load()</codeph> を呼び出します。ユーザー自身で <codeph>Sound.load()</codeph> を呼び出す必要があるのは、Sound コンストラクターに有効な URLRequest オブジェクトを渡さない場合、または <codeph>null</codeph> 値を渡す場合のみです。
     
     <p>Sound オブジェクトで <codeph>load()</codeph> が呼び出された後は、その Sound オブジェクトに別のサウンドファイルをロードすることはできません。別のサウンドファイルをロードするには、新しい Sound オブジェクトを作成します。</p>
     
	 <p platform="actionscript">このメソッドを使用するときは、次のセキュリティモデルを考慮してください。</p>
     
     <ul platform="actionscript">
     
     <li>呼び出し元ファイルが local-with-file-system サンドボックスにあり、サウンドがネットワークサンドボックスにある場合、<codeph>Sound.load()</codeph> を呼び出すことはできません。</li>
     
     <li>信頼できるローカルのサンドボックスまたはネットワーク接続したローカルのサンドボックスからアクセスするには、URL ポリシーファイルを使用して Web サイトで許可する必要があります。</li>
     
      <li>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/> </li>
     
     <li>SWF ファイルがこのメソッドを使用しないようにするには、<codeph>allowNetworking</codeph> パラメーター（SWF コンテンツを含んでいる HTML ページの <codeph>object</codeph> タグおよび <codeph>embed</codeph> タグのパラメーター）を設定します。</li>
     
     </ul>
     
     <p platform="actionscript"> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
	 <ul platform="actionscript">
	 <li>POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li>
	 <li>POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li>
	 </ul>
     <p platform="actionscript">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     <p platform="actionscript">Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p platform="actionscript">セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul platform="actionscript">
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li>『Developing AIR Applications』の「Getting started with Adobe AIR」の「Understanding AIR Security」<i/></li>
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
     </apiDesc><example conref="examples\Sound_loadExample.as"> 次の例では、サウンドファイルのロードの進行状況を表示します。
 
 <p>コンストラクターで、アドビ システムズ社のポッドキャストであるサウンドファイルの位置を識別する <codeph>URLRequest</codeph> オブジェクトが作成されます。ファイルのロード中に発生する可能性のあるエラーをキャッチするために、ファイルが <codeph>try...catch</codeph> ブロックにロードされます。IO エラーが発生すると、<codeph>errorHandler()</codeph> メソッドも呼び出され、進行状況をレポートするテキストフィールドにエラーメッセージが書き出されます。ロード操作が進行している間に、<codeph>ProgressEvent.PROGRESS</codeph> イベントが送出され、<codeph>progressHandler()</codeph> メソッドが呼び出されます。ここでは、<codeph>ProgressEvent.PROGRESS</codeph> イベントがロードの進行状況を計算するタイマとして使用されます。</p> 
  
 <p><codeph>progressHandler()</codeph> メソッドによって、<codeph>ProgressEvent</codeph> オブジェクトで渡される <codeph>bytesLoaded</codeph> 値が <codeph>bytesTotal</codeph> 値で除算され、ロードされるサウンドデータの割合（パーセント）が算出されます。次に、これらの値がテキストフィールドに表示されます。ファイルが小さいか、キャッシュされているか、ローカルディレクトリにある場合、進行状況が目立たない場合があります。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.ProgressEvent;
    import flash.events.IOErrorEvent;
    
    public class Sound_loadExample extends Sprite {
        private var snd:Sound = new Sound();
        private var statusTextField:TextField  = new TextField();

        public function Sound_loadExample(){

            statusTextField.autoSize = TextFieldAutoSize.LEFT;
            var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
            
            try {
            snd.load(req);
            
            snd.play();
            }
            catch (err:Error) {
                trace(err.message);
            }
 
            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            snd.addEventListener(ProgressEvent.PROGRESS, progressHandler);
                     
            this.addChild(statusTextField);
        }
    
        private function progressHandler(event:ProgressEvent):void {
            var loadTime:Number = event.bytesLoaded / event.bytesTotal;
            var LoadPercent:uint = Math.round(100 * loadTime);
              
            statusTextField.text = "Sound file's size in bytes: " + event.bytesTotal + "\n" 
                                 + "Bytes being loaded: " + event.bytesLoaded + "\n" 
                                 + "Percentage of sound file that is loaded " + LoadPercent + "%.\n";
        }
 
        private function errorHandler(errorEvent:IOErrorEvent):void {
            statusTextField.text = "The sound could not be loaded: " + errorEvent.text;
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:Sound:play"><apiName>play</apiName><shortdesc>
     サウンドを再生する SoundChannel オブジェクトを新しく作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>サウンドの制御に使用する SoundChannel オブジェクトです。このメソッドは、サウンドカードがない場合、または使用できるサウンドチャンネルが不足した場合は <codeph>null</codeph> を返します。一度に使用できるサウンドチャンネルの最大数は 32 チャネルです。
     
     </apiDesc><apiOperationClassifier>flash.media:SoundChannel</apiOperationClassifier></apiReturn><apiParam><apiItemName>startTime</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>再生を開始する初期位置（ミリ秒単位）です。
     </apiDesc></apiParam><apiParam><apiItemName>loops</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>サウンドチャネルの再生が停止するまで <codeph>startTime</codeph> 値に戻ってサウンドの再生を繰り返す回数を定義します。 
     </apiDesc></apiParam><apiParam><apiItemName>sndTransform</apiItemName><apiOperationClassifier>flash.media:SoundTransform</apiOperationClassifier><apiData>null</apiData><apiDesc>サウンドチャンネルに割り当てられた初期 SoundTransform オブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     サウンドを再生する SoundChannel オブジェクトを新しく作成します。このメソッドは SoundChannel オブジェクトを返します。このオブジェクトにアクセスして、サウンドの停止、およびボリュームの監視を行います。ボリュームの制御、パン、バランスの設定を行うには、サウンドチャンネルに割り当てられた SoundTransform オブジェクトにアクセスします。
     
     </apiDesc><example conref="examples\Sound_playExample1.as"> 次の例では、ファイルがロードされると、グラフィックバーを使用するユーザーは、サウンドファイルの開始位置（開始時点）を選択できます。
 
 <p>コンストラクターが <codeph>Sound.load()</codeph> メソッドを呼び出して、サウンドデータのロードを開始します。次に、<codeph>Sound.play()</codeph> メソッドを呼び出して、十分なデータがロードされ次第、サウンドの再生を開始します。<codeph>Sound.play()</codeph> メソッドによって、サウンドの再生を制御するために使用される SoundChannel オブジェクトが返されます。テキストフィールドにはユーザーに対する説明が表示されます。ユーザーが再生を開始しようとしているサウンドの内容が確実にロードされているようにするため、ファイルのロードが完了してから <codeph>bar</codeph> Sprite オブジェクトが作成され、表示されます。ファイルが正常にロードされると、<codeph>Event.COMPLETE</codeph> イベントが送出され、そのイベントによって <codeph>completeHandler()</codeph> メソッドがトリガーされます。次に、<codeph>completeHandler()</codeph> メソッドによってバーが作成され、表示リストに追加されます。インタラクティブ機能をサポートするために、Shape オブジェクトの代わりに Sprite オブジェクトが使用されます。ユーザーがバーをクリックすると、<codeph>clickHandler()</codeph> メソッドがトリガーされます。</p> 
 
 <p><codeph>clickHandler()</codeph> メソッドで、ユーザーがクリックした x 座標の位置 <codeph>event.localX</codeph> を使用して、ユーザーがファイルの開始を指定した場所が特定されます。バーは 100 ピクセルであり、x 座標の 100 ピクセルの位置から開始するので、位置の割合（パーセント）は簡単に特定されます。また、ファイルがロードされるため、サウンドファイルの <codeph>length</codeph> プロパティに、完全なファイルの長さ（ミリ秒単位）が設定されます。サウンドファイルの長さと行内の位置を使用して、サウンドファイルの開始位置が特定されます。サウンドの再生を停止した後は、<codeph>startTime</codeph> パラメーターとして <codeph>play()</codeph> メソッドに渡される選択した開始位置からサウンドファイルの再生が再開されます。</p>
 
<codeblock> 
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;
    import flash.media.Sound;;
    import flash.net.URLRequest;
    import flash.media.SoundChannel;
    import flash.events.ProgressEvent;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.IOErrorEvent;
    
    public class Sound_playExample1 extends Sprite {
        private var snd:Sound = new Sound();
        private var channel:SoundChannel = new SoundChannel();
        private var infoTextField:TextField = new TextField();
    
        public function Sound_playExample1() {

            var req:URLRequest = new URLRequest("MySound.mp3");
            
            infoTextField.autoSize = TextFieldAutoSize.LEFT;
            infoTextField.text = "Please wait for the file to be loaded.\n" 
                                + "Then select from the bar to decide where the file should start.";
            
            snd.load(req);               
            channel = snd.play();

            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            snd.addEventListener(Event.COMPLETE, completeHandler);


            this.addChild(infoTextField);
        }

        private function completeHandler(event:Event):void {                
            infoTextField.text = "File is ready.";

            var bar:Sprite = new Sprite();

            bar.graphics.lineStyle(5, 0xFF0000);
            bar.graphics.moveTo(100, 100);
            bar.graphics.lineTo(200, 100);

            bar.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(bar);
        }
    
        private function clickHandler(event:MouseEvent):void {
            
                var position:uint = event.localX;
                var percent:uint = Math.round(position) - 100;   
                var cue:uint = (percent / 100) * snd.length;

                channel.stop();
                channel = snd.play(cue);    
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            infoTextField.text = "The sound could not be loaded: " + errorEvent.text;
        }
    }
}
</codeblock></example><example conref="examples\Sound_playExample2.as"> 次の例では、ユーザーがボタンをシングルクリックするか、ダブルクリックするかに応じて、サウンドを 1 回または 2 回再生します。
 
 <p>コンストラクターで、サウンドがロードされ、単純な矩形の <codeph>button</codeph> Sprite オブジェクトが作成されます。インタラクティブ機能をサポートするために、Shape オブジェクトの代わりに Sprite オブジェクトが使用されます。ここでは、サウンドファイルが SWF ファイルと同じディレクトリにあると想定しています。この例には、エラー処理コードはありません。</p>
 
 <p>マウスのシングルクリックとダブルクリックに応答するために、2 つのイベントリスナーが設定されます。ユーザーがボタンをシングルクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出され、サウンドが再生されます。ユーザーがボタンをダブルクリックすると、<codeph>doubleClickHandler()</codeph> メソッドが呼び出され、サウンドファイルが 2 回再生されます。<codeph>play()</codeph> メソッドの 2 番目の引数が <codeph>1</codeph> に設定されます。これは、サウンドが開始時点に 1 回ループバックされ、再び再生されることを意味します。1 つ目の引数（開始時点）は <codeph>0</codeph> に設定されます。これは、ファイルが最初から再生されることを意味します。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.media.Sound;
    import flash.net.URLRequest;

    public class Sound_playExample2 extends Sprite {
        private var button:Sprite = new Sprite(); 
        private var snd:Sound = new Sound();
            
        public function Sound_playExample2() {

            var req:URLRequest = new URLRequest("click.mp3");
            snd.load(req);               
     
            button.graphics.beginFill(0x00FF00);
            button.graphics.drawRect(10, 10, 50, 30);
            button.graphics.endFill();
     
            button.addEventListener(MouseEvent.CLICK, clickHandler);
            button.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
     
            this.addChild(button);
        }

        private function clickHandler(event:MouseEvent):void {
            snd.play();            
        }

        private function doubleClickHandler(event:MouseEvent):void {
            snd.play(0, 2);        
        }
    }
}
</codeblock></example><example conref="examples\Sound_playExample3.as"> 次の例では、サウンドファイルのロードと再生の進行状況を表示します。
 
 <p>コンストラクターで、ファイルのロード中に発生する可能性のあるエラーをキャッチするために、ファイルが <codeph>try...catch</codeph> ブロックにロードされます。リスナーが <codeph>errorHandler()</codeph> メソッドを呼び出すことで <codeph>IOErrorEvent</codeph> イベントに応答するサウンドオブジェクトに追加されます。もう 1 つのリスナーが <codeph>Event.ENTER_FRAME</codeph> イベントに応答するメインアプリケーションに追加されます。このイベントは、再生の進行状況を表示するタイミング制御メカニズムとして使用されます。最後に、3 番目のリスナーが <codeph>soundCompleteHandler()</codeph> メソッドを呼び出すことで <codeph>Event.SOUND_COMPLETE</codeph> イベントに（サウンドの再生が終了したときに）応答するサウンドチャンネルに追加されます。<codeph>soundCompleteHandler()</codeph> メソッドによって、<codeph>Event.ENTER_FRAME</codeph> イベントのイベントリスナーの削除も実行されます。</p>
 
 <p><codeph>enterFrameHandler()</codeph> メソッドによって、<codeph>ProgressEvent</codeph> オブジェクトで渡される <codeph>bytesLoaded</codeph> 値が <codeph>bytesTotal</codeph> 値で除算され、ロードされるサウンドデータの割合（パーセント）が算出されます。再生されるサウンドデータの割合（パーセント）は、サウンドチャンネルの <codeph>position</codeph> プロパティの値をサウンドデータの長さで除算することで算出される場合があります。ただし、サウンドデータが完全にロードされていない場合、サウンドオブジェクトの <codeph>length</codeph> プロパティは、現在ロードされているサウンドデータのみのサイズを表示します。完全なサウンドファイルの最終的なサイズの推定値は、現在のサウンドオブジェクトの <codeph>length</codeph> の値を <codeph>bytesLoaded</codeph> プロパティの値で除算してから、<codeph>bytesTotal</codeph> プロパティの値で除算することで算出されます。</p>
 
 <p>ファイルが小さいか、キャッシュされているか、ローカルディレクトリにある場合、ロードの進行状況が目立たない場合があります。また、サウンドデータのロードが開始されてから、ロードされたデータの再生が開始されるまでの遅延時間は、<codeph>SoundLoaderContext.buffertime</codeph> プロパティの値によって指定されます。この値は、デフォルトで 1000 ミリ秒であり、リセットできます。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.Event;
    import flash.events.IOErrorEvent;
    
    public class Sound_playExample3 extends Sprite {
        private var snd:Sound = new Sound();
        private var channel:SoundChannel;
        private var statusTextField:TextField  = new TextField();

        public function Sound_playExample3(){

            statusTextField.autoSize = TextFieldAutoSize.LEFT;

           var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
            
            try {
                snd.load(req);
            
                channel = snd.play();
            }
            catch (err:Error) {
                trace(err.message);
            }
                    
            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            addEventListener(Event.ENTER_FRAME, enterFrameHandler);
            channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);
                    
            this.addChild(statusTextField);
        }
    
        private function enterFrameHandler(event:Event):void {    
            var loadTime:Number = snd.bytesLoaded / snd.bytesTotal;
            var loadPercent:uint = Math.round(100 * loadTime);
            var estimatedLength:int = Math.ceil(snd.length / (loadTime));
            var playbackPercent:uint = Math.round(100 * (channel.position / estimatedLength));
      
            statusTextField.text = "Sound file's size is " + snd.bytesTotal + " bytes.\n" 
                                   + "Bytes being loaded: " + snd.bytesLoaded + "\n" 
                                   + "Percentage of sound file that is loaded " + loadPercent + "%.\n"
                                   + "Sound playback is " + playbackPercent + "% complete.";     
        }
 
        private function errorHandler(errorEvent:IOErrorEvent):void {
            statusTextField.text = "The sound could not be loaded: " + errorEvent.text;
        }

        private function soundCompleteHandler(event:Event):void {
            statusTextField.text = "The sound has finished playing.";
            removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.media.xml#SoundChannel/stop()"><linktext>SoundChannel.stop()</linktext></link><link href="flash.media.xml#SoundMixer/stopAll()"><linktext>SoundMixer.stopAll()</linktext></link></related-links></apiOperation><apiValue id="flash.media:Sound:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
     この Sound オブジェクトで現在利用できるデータのバイト数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     この Sound オブジェクトで現在利用できるデータのバイト数を返します。このプロパティは、通常、外部から読み込むファイルのみに使用します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
     この Sound オブジェクトの合計バイト数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
     この Sound オブジェクトの合計バイト数を返します。 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:id3:get"><apiName>id3</apiName><shortdesc>
     MP3 ファイルの一部であるメタデータに対するアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>sound, Sound.id3, id3, mp3
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.media:ID3Info</apiValueClassifier></apiValueDef><apiDesc>
     MP3 ファイルの一部であるメタデータに対するアクセスを提供します。
     
     <p>MP3 サウンドファイルには、ファイルについてのメタデータを示す ID3 タグを含めることができます。<codeph>Sound.load()</codeph> メソッドを使用してロードした MP3 サウンドに ID3 タグが含まれる場合は、これらのプロパティを調べることができます。サポートされているのは、UTF-8 文字セットを使用する ID3 タグだけです。</p>
     
	 <p><ph outputclass="actionscript">Flash Player 9 以降と AIR ランタイムサポート</ph> <ph platform="javascript">AIR ランタイムでは</ph>、ID3 2.0 (厳密には 2.3 および 2.4) のタグのサポートが追加されました。次の表に、標準の ID3 2.0 タグと、そのタグが表すコンテンツタイプを示します。<codeph>Sound.id3</codeph> プロパティは <codeph>my_sound.id3.COMM</codeph>、<codeph>my_sound.id3.TIME</codeph> などの形式を使用してこれらのタグにアクセスできます。最初の表は、ID3 2.0 プロパティ名または ActionScript プロパティ名のいずれかを使用してアクセスできるタグを示します。2 番目の表は、サポートされているものの、ActionScript に定義済みのプロパティが存在しない ID3 タグを示します。 </p>
     
     <adobetable class="innertable">
       
      
      
      
     
     
     
     
     <tgroup cols="2"><tbody><row>
         <entry><b>ID3 2.0 タグ</b></entry>
	    <entry><b>対応する Sound クラスプロパティ</b></entry>
      </row><row>
        <entry>COMM</entry>
        <entry>Sound.id3.comment</entry>
      </row><row>
        <entry>TALB</entry>
        <entry>Sound.id3.album </entry>
      </row><row>
     
       <entry>TCON</entry>
       <entry>Sound.id3.genre</entry>
      </row><row>
       <entry>TIT2</entry>
       <entry>Sound.id3.songName </entry>
     </row><row>
       <entry>TPE1</entry>
       <entry>Sound.id3.artist</entry>
     </row><row>
       <entry>TRCK</entry>
       <entry>Sound.id3.track </entry>
     </row><row>
       <entry>TYER</entry>
       <entry>Sound.id3.year </entry>
     </row></tbody></tgroup></adobetable>
     
     <p>次の表は、サポートされているものの、Sound クラスに定義済みのプロパティが存在しない ID3 タグを示します。これらのタグにアクセスするには、<codeph>mySound.id3.TFLT</codeph>、<codeph>mySound.id3.TIME</codeph> などを呼び出します。</p>  
      <adobetable class="innertable">
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <tgroup cols="2"><tbody><row>
          <entry><b>プロパティ</b></entry>
          <entry><b>説明</b></entry>
        </row><row>
          <entry>TFLT</entry>
          <entry>ファイル形式</entry>
        </row><row>
          <entry>TIME</entry>
          <entry>時刻</entry>
        </row><row>
          <entry>TIT1</entry>
          <entry>内容の属するグループの説明</entry>
        </row><row>
          <entry>TIT2</entry>
          <entry>タイトル/曲名/内容の説明</entry>
        </row><row>
          <entry>TIT3</entry>
          <entry>サブタイトル/説明の追加情報</entry>
        </row><row>
          <entry>TKEY</entry>
          <entry>最初の調</entry>
        </row><row>
          <entry>TLAN</entry>
          <entry>言語</entry>
        </row><row>
          <entry>TLEN</entry>
          <entry>長さ</entry>
        </row><row>
          <entry>TMED</entry>
          <entry>メディアタイプ</entry>
        </row><row>
          <entry>TOAL</entry>
          <entry>オリジナルのアルバム/ムービー/ショーのタイトル</entry>
        </row><row>
          <entry>TOFN</entry>
          <entry>オリジナルのファイル名</entry>
        </row><row>
          <entry>TOLY</entry>
          <entry>オリジナルの作詞家/文書作成者</entry>
        </row><row>
          <entry>TOPE</entry>
          <entry>オリジナルのアーティスト/演奏者</entry>
        </row><row>
          <entry>TORY</entry>
          <entry>オリジナルのリリース年</entry>
        </row><row>
          <entry>TOWN</entry>
          <entry>ファイルの所有者/ライセンス保持者</entry>
        </row><row>
          <entry>TPE1</entry>
          <entry>主な演奏者/ソリスト</entry>
        </row><row>
          <entry>TPE2</entry>
          <entry>バンド/オーケストラ/伴奏</entry>
        </row><row>
          <entry>TPE3</entry>
          <entry>指揮者/演奏者詳細情報</entry>
        </row><row>
          <entry>TPE4</entry>
          <entry>翻訳、リミックス、その他の修正を行った人</entry>
        </row><row>
          <entry>TPOS</entry>
          <entry>セット中の位置</entry>
        </row><row>
          <entry>TPUB</entry>
          <entry>発行者</entry>
        </row><row>
          <entry>TRCK</entry>
          <entry>トラック番号/セット内の位置</entry>
        </row><row>
          <entry>TRDA</entry>
          <entry>録音日</entry>
        </row><row>
          <entry>TRSN</entry>
          <entry>インターネットラジオ局の名前</entry>
        </row><row>
          <entry>TRSO</entry>
          <entry>インターネットラジオ局の所有者</entry>
        </row><row>
          <entry>TSIZ</entry>
          <entry>サイズ</entry>
        </row><row>
          <entry>TSRC</entry>
          <entry>ISRC（国際標準録音資料コード）</entry>
        </row><row>
          <entry>TSSE</entry>
          <entry>エンコードに使用したソフトウェア/ハードウェアと設定</entry>
        </row><row>
          <entry>TYER</entry>
          <entry>年</entry>
        </row><row>
          <entry>WXXX</entry>
          <entry>URL リンクフレーム</entry>
        </row></tbody></tgroup></adobetable>
     
     
     <p>このプロパティを使用するときは、Flash Player セキュリティモデルを考慮してください。</p>
     
     <ul>
     
     <li>Sound オブジェクトの <codeph>id3</codeph> プロパティは、サウンドファイルと同じセキュリティサンドボックス内にある SWF ファイルで常に使用できます。他のサンドボックス内のファイルには、セキュリティチェックがあります。</li>
     
     <li>サウンドをロードするとき、Sound クラスの <codeph>load()</codeph> メソッドを使用すると、SoundLoaderContext オブジェクトである <codeph>context</codeph> パラメーターを指定できます。SoundLoaderContext オブジェクトの <codeph>checkPolicyFile</codeph> プロパティを <codeph>true</codeph> に設定した場合、Flash Player は、サウンドがロードされるサーバー上に URL ポリシーファイルがあるかどうかをチェックします。ポリシーファイルが存在しており、そのファイルでロード元 SWF ファイルのドメインからのアクセスが許可されている場合、Sound オブジェクトの <codeph>id3</codeph> プロパティにアクセスできます。それ以外の場合は、アクセスできません。</li>
     
     </ul>
     
     <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul>
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
     
     

     
     </apiDesc><example conref="examples\Sound_id3Example.as"> 次の例では、サウンドファイルから ID3 情報を読み取り、テキストフィールドに表示します。
 
 <p>コンストラクターで、サウンドファイルがロードされますが、再生するように設定されていません。ここでは、ファイルが SWF ディレクトリにあると想定しています。ロードされるサウンドファイルの ID3 タグを読み取るために、システムにアクセス権がある必要があります。ファイル内に ID3 情報が存在し、プログラムに読み取ることが許可されている場合、<codeph>Event.ID3</codeph> イベントが送出され、サウンドファイルの <codeph>id3</codeph> プロパティに値が設定されます。<codeph>id3</codeph> プロパティには、すべての ID3 情報を持つ <codeph>ID3Info</codeph> オブジェクトが格納されています。</p>
 
 <p><codeph>id3Handler()</codeph> メソッドで、ファイルの ID3 タグが ID3Info クラスのオブジェクトである <codeph>id3</codeph> に保存されます。テキストフィールドがインスタンス化され、ID3 タグの一覧が表示されます。for ループによってすべての ID3 2.0 タグが繰り返し処理され、テキストフィールドの内容に名前と値が追加されます。ID3 info（<codeph>ID3Info</codeph>）プロパティを使用して、アーティスト、曲名、およびアルバムも追加されます。ActionScript 3.0 および Flash Player 9 以降では、ID3 2.0 タグ、特に 2.3 と 2.4 がサポートされます。この for ループのようにプロパティの反復処理を実行すると、ID3 2.0 タグだけが表示されます。ただし、以前のバージョンからのデータも曲の <codeph>id3</codeph> プロパティに保存され、ID3 info クラスのプロパティを使用してアクセスできます。ID3 1.0 のタグはファイルに末尾にあります。一方、ID3 2.0 タグはファイルの先頭にあります。以前のバージョンと最新バージョンのタグがファイルの同じ場所にある場合があります。ファイルが、ファイルの先頭と末尾にあるバージョン 1.0 タグと 2.0 タグの両方でエンコードされている場合、<codeph>id3Handler()</codeph> メソッドが 2 回呼び出されます。最初にバージョン 2.0 が読み込まれ、次にバージョン 1.0 が読み込まれます。ID3 1.0 タグだけが使用できる場合、<codeph>id3.songname</codeph> などと記述して、ID3 info プロパティを介して情報にアクセスできます。ID3 2.0 では、新しいタグ（TITS）を使用して <codeph>id3.TITS</codeph> プロパティによって曲名が取得されます。</p>
 
 <p>この例にはエラー処理の記述がないため、ID3 の内容が長い場合、結果が表示可能領域を超える場合があります。</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.net.URLRequest;
    import flash.media.ID3Info;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.Event;

    public class Sound_id3Example extends Sprite {
        private var snd:Sound = new Sound();       
        private var myTextField:TextField = new TextField();

        public function Sound_id3Example() {
            snd.addEventListener(Event.ID3, id3Handler);
            snd.load(new URLRequest("mySound.mp3"));
        }
    
        private function id3Handler(event:Event):void {
            var id3:ID3Info = snd.id3;

            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.border = true;

            myTextField.appendText("Received ID3 Info: \n");
              
            for (var propName:String in id3) {
                myTextField.appendText(propName + " = " + id3[propName] + "\n");
            }
 
            myTextField.appendText("\n" + "Artist: " + id3.artist + "\n");
            myTextField.appendText("Song name: " + id3.songName + "\n");
            myTextField.appendText("Album: " + id3.album + "\n\n"); 
 
            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.media.xml#SoundLoaderContext/checkPolicyFile"><linktext>SoundLoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.media:Sound:isBuffering:get"><apiName>isBuffering</apiName><shortdesc>
     外部 MP3 ファイルのバッファリング状態を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     外部 MP3 ファイルのバッファリング状態を返します。値が <codeph>true</codeph> の場合、再生は現在中断され、オブジェクトがデータを待機しています。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:length:get"><apiName>length</apiName><shortdesc>
     現在のサウンドの継続時間を示すミリ秒数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     現在のサウンドの継続時間を示すミリ秒数です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:url:get"><apiName>url</apiName><shortdesc>
     サウンドがロードされる URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     サウンドがロードされる URL です。このプロパティは <codeph>Sound.load()</codeph> メソッドを使用してロードされた Sound オブジェクトにのみ適用できます。SWF ファイルのライブラリのサウンドアセットに関連付けられた Sound オブジェクトでは、<codeph>url</codeph> プロパティの値は <codeph>null</codeph> です。
     
     <p>初めて <codeph>Sound.load()</codeph> を呼び出す際は最終的な URL が不明なため、<codeph>url</codeph> プロパティの初期値は <codeph>null</codeph> になります。<codeph>url</codeph> プロパティは、Sound オブジェクトから <codeph>open</codeph> イベントが送出されると同時に、null 以外の値になります。</p>
     
     <p><codeph>url</codeph> プロパティには、サウンドがロードされる元の最終的な絶対 URL が格納されます。<codeph>url</codeph> の値は、通常 <codeph>stream</codeph> パラメーター（<codeph>Sound.load()</codeph>）に渡される値と同じです。ただし、<codeph>Sound.load()</codeph> に相対 URL を渡しても、<codeph>url</codeph> プロパティの値は絶対 URL を表します。また、元の URL 要求が HTTP サーバーによってリダイレクトされると、<codeph>url</codeph> プロパティの値はサウンドファイルが実際にダウンロードされた URL を示します。この最終的な絶対 URL の報告は、<codeph>LoaderInfo.url</codeph> の動作と同じです。</p>
     
     
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/load()"><linktext>load()</linktext></link><link href="flash.display.xml#LoaderInfo/url"><linktext>flash.display.LoaderInfo.url</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.media:SoundLoaderContext"><apiName>SoundLoaderContext</apiName><shortdesc>
 SoundLoaderContext クラスはサウンドをロードするファイルのセキュリティチェックを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SoundLoaderContext クラスはサウンドをロードするファイルのセキュリティチェックを提供します。SoundLoaderContext オブジェクトは、コンストラクターと Sound クラスの <codeph>load()</codeph> メソッドにパラメーターとして渡されます。
 
 <p>このクラスを使用するときは、次のセキュリティモデルを考慮してください。 </p>
 
 <ul>
 <li>呼び出し元ファイルがネットワークサンドボックスにあり、ロードするサウンドファイルがローカルにある場合、サウンドのロードおよび再生はできません。</li>
 
 	<li>呼び出し元がローカルにあり、リモートサウンドのロードおよび再生を試行する場合、デフォルトでは、サウンドのロードや再生ができません。これを行うには、ユーザーが明示的な許可を与える必要があります。</li>
 
 	<li>サウンドを処理する特定の操作が制限されます。ロードされたサウンドのデータには、URL ポリシーファイルを実装していない限り、別のドメインに存在する ファイルからアクセスできないことに注意してください。この制限の対象となるサウンド関連の API は <codeph>Sound.id3</codeph> プロパティおよび <codeph>SoundMixer.computeSpectrum()</codeph> メソッド、<codeph>SoundMixer.bufferTime</codeph> メソッド、<codeph>SoundTransform()</codeph> メソッドです。</li>
 
 </ul>
 
 <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
 
 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
 
 <ul>
 
 <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li>『Developing AIR Applications』の「Getting started with Adobe AIR」の「Understanding AIR Security」<i/></li>
 
   <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/devnet/flashplayer/security.html" scope="external"> セキュリティ（英語）</xref></li>
 
 </ul>
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.media:SoundLoaderContext:SoundLoaderContext"><apiName>SoundLoaderContext</apiName><shortdesc>
     新しいサウンドローダーコンテキストオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bufferTime</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000</apiData><apiDesc>サウンドのストリーミングを開始するまでに、バッファーにストリーミングサウンドをプリロードする秒数です。
     
     </apiDesc></apiParam><apiParam><apiItemName>checkPolicyFile</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>オブジェクトのロード時に URL ポリシーファイルの存在を確認するかどうかを指定します（確認する場合は <codeph>true</codeph>）。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     新しいサウンドローダーコンテキストオブジェクトを作成します。  
     
     </apiDesc><example conref="examples\SoundLoaderContextExample.as"> 次の例では、ロードされるサウンドのバッファーが 3 秒に設定されます。
 
 <p>SoundLoaderContext オブジェクトの 1 つ目のパラメーター（<codeph>context</codeph>）を使用して、バッファーのデフォルト値（1 秒）を 3 秒に増やしています。 値はミリ秒単位です。SoundLoaderContext オブジェクトの 2 つ目のパラメーターが <codeph>true</codeph> に設定されている場合、オブジェクトのロード時にクロスドメインポリシーファイルが調べられます。ここでは、デフォルト値の <codeph>false</codeph> に設定されているため、ポリシーファイルは調べられません。 サウンドオブジェクトの <codeph>load()</codeph> メソッドによってコンテキスト設定が使用され、サウンドがストリームを開始する前に、バッファーにストリーミングサウンドをプリロードするために 3 秒間待機します。アドビ システムズ社のポッドキャストである <codeph>URLRequest</codeph> オブジェクトによってファイルの位置が決定されます。サウンドファイルのロード中に <codeph>IOErrorEvent.IO_ERROR</codeph> エラーが発生すると、<codeph>errorHandler()</codeph> メソッドが呼び出されます。</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundLoaderContext;
    import flash.events.IOErrorEvent;
    
    public class SoundLoaderContextExample extends Sprite {

        public function SoundLoaderContextExample() {
            var snd:Sound = new Sound();
            var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
            var context:SoundLoaderContext = new SoundLoaderContext(3000, false);

            snd.load(req, context);
            snd.play();      
 
            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace("The sound could not be loaded: " + errorEvent.text);
        }

    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.media:SoundLoaderContext:bufferTime"><apiName>bufferTime</apiName><shortdesc>
	 サウンドのストリーミングを開始するまでに、バッファーにストリーミングサウンドをプリロードするミリ秒数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1000</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 サウンドのストリーミングを開始するまでに、バッファーにストリーミングサウンドをプリロードするミリ秒数です。
	 
	 <p><codeph>SoundLoaderContext.bufferTime</codeph> の値を、グローバル <codeph>SoundMixer.bufferTime</codeph> プロパティを設定してオーバーライドすることはできません。<ph platform="actionscript"><codeph>SoundMixer.bufferTime</codeph> プロパティは SWF ファイルに埋め込まれたストリーミングサウンドのバッファー時間には影響しますが、動的に作成される Sound オブジェクト（ActionScript で作成される Sound オブジェクト）には影響しません。</ph></p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundLoaderContext:checkPolicyFile"><apiName>checkPolicyFile</apiName><shortdesc>
	 サウンドのロードを開始する前に、アプリケーションが、ロードされるサウンドのサーバーからの URL ポリシーファイルのダウンロードを試行するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>: please review at same time: checkPolicyFile property in LoaderContext, NetStream
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 サウンドのロードを開始する前に、アプリケーションが、ロードされるサウンドのサーバーからの URL ポリシーファイルのダウンロードを試行するかどうかを指定します。このプロパティは、呼び出し元のファイル自体のドメインの外部から <codeph>Sound.load()</codeph> メソッドを使用してロードされたサウンドに適用されます。
	 
	 <p platform="javascript">このプロパティは、AIR アプリケーションサンドボックスの外部で実行されている SWF コンテンツにのみ適用されます。 </p>
	 
	 <p platform="actionscript">呼び出し元のファイル自体のドメインの外部からサウンドをロードし、呼び出し元のファイルのコードがサウンドのデータに低レベルアクセスを必要とする場合は、このプロパティを <codeph>true</codeph> に設定します。サウンドデータへの低レベルアクセスの例です。ID3Info オブジェクトを取得するための <codeph>Sound.id3</codeph> プロパティへの参照、またはロードされたサウンドからサウンドサンプリングを取得する <codeph>SoundMixer.computeSpectrum()</codeph> メソッドの呼び出しが含まれます。ロード時に <codeph>checkPolicyFile</codeph> プロパティを <codeph>true</codeph> に設定せずにサウンドデータにアクセスしようとした場合、必要なポリシーファイルがダウンロードされていないために SecurityError 例外を受け取る場合があります。</p>
	 
	 <p platform="actionscript">ロードするサウンドデータへの低レベルのアクセスを必要としない場合は、<codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定しないでください。ポリシーファイルの確認はネットワーク帯域幅を消費し、ダウンロードの開始が遅れる場合があるため、必要な場合にのみ行ってください。</p>
	 
	 <p platform="actionscript"><codeph>Sound.load()</codeph> を呼び出すときに <codeph>SoundLoaderContext.checkPolicyFile</codeph> を <codeph>true</codeph> に設定すると、Flash Player または AIR は、関連する URL ポリシーファイルを正常にダウンロードするか、指定されたサウンドのダウンロードを開始する前に、そのようなポリシーファイルが存在しないことを判別する必要があります。ポリシーファイルの存在を確認するため、<ph platform="actionscript">Flash Player または</ph> AIR は次のアクションをこの順番で実行します。</p>
	 
	 <ul platform="actionscript">
	 
	 <li>Flash Player または AIR は、既にダウンロードされているポリシーファイルを考慮します。</li>
	 
	 <li>Flash Player または AIR は、<codeph>Security.loadPolicyFile()</codeph> の呼び出しで指定された保留されているポリシーファイルのダウンロードを試行します。</li>
	 
	 <li>Flash Player または AIR は、サウンドの URL に対応するデフォルトの場所、<codeph>/crossdomain.xml</codeph>（<codeph>URLRequest.url</codeph> と同じサーバー）からポリシーファイルをダウンロードしようとします。  サウンドの URL は URLRequest オブジェクトの <codeph>url</codeph> プロパティで指定します。URLRequest オブジェクトは <codeph>Sound.load()</codeph> または Sound() コンストラクター関数に渡されます。</li>
	 </ul>
	 
	 <p platform="actionscript">どのような場合でも、Flash Player または AIR では、適切なポリシーファイルがサウンドのサーバー上に存在していること、ポリシーファイルの場所に基づいて <codeph>URLRequest.url</codeph> にあるサウンドファイルへのアクセスが可能であること、およびポリシーファイルの <codeph>&lt;allow-access-from></codeph> タグによって呼び出し元ファイルのドメインによるサウンドへのアクセスが許可されていることが必要となります。
	 </p>
	 
	 <p platform="actionscript"><codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定した場合、Flash Player または AIR は、ポリシーファイルが検証されるまで待機してからサウンドを読み込みます。 サウンドデータに対する低レベルの操作（<codeph>Sound.id3</codeph> の呼び出しまたは <codeph>SoundMixer.computeSpectrum()</codeph> の呼び出しなど）は、Sound オブジェクトから <codeph>progress</codeph> イベントおよび <codeph>complete</codeph> イベントが送出されるまで待つ必要があります。
	 </p>
	 
	 <p platform="actionscript"><codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定していて、適切なポリシーファイルが見つからない場合は、ポリシーファイルを必要とする操作を実行するまでエラーは表示されません。ポリシーファイルが必要になると、Flash Player または AIR は <codeph>SecurityError</codeph> 例外をスローします。 <codeph>complete</codeph> イベントを受け取ると、<codeph>Sound.id3</codeph> の値（<codeph>try</codeph> ブロック内）を取得して <codeph>SecurityError</codeph> がスローされたかどうかを確認し、関連するポリシーファイルが見つかったかどうかをテストできます。</p>
	 
	 
	 <p platform="actionscript">サーバーサイド HTTP リダイレクトを使用する URL からサウンドをダウンロードする場合は、<codeph>checkPolicyFile</codeph> に注意してください。Flash Player または AIR は、URLRequest オブジェクトの <codeph>url</codeph> プロパティに対応するポリシーファイルを取得しようとします。URLRequest オブジェクトは <codeph>Sound.load()</codeph> に渡されます。  最終的なサウンドファイルが HTTP リダイレクトによって別の URL から取得される場合、最初にダウンロードされたポリシーファイルはサウンドの最終的な URL（セキュリティ判定においてはこの URL が重要となります）に適用できないことがあります。</p>
	 
	 <p platform="actionscript">このような状況になった場合の解決方法が 1 つあります。<codeph>progress</codeph> イベントまたは <codeph>complete</codeph> イベントを受け取った後、<codeph>Sound.url</codeph> プロパティの値を調べることができます。ここには、サウンドの最終的な URL が格納されています。次に、サウンドの最終的な URL に基づいて算出したポリシーファイルの URL で <codeph>Security.loadPolicyFile()</codeph> メソッドを呼び出します。最後に、例外がスローされなくなるまで <codeph>Sound.id3</codeph> の値をポーリングします。</p>
	 
	 <p platform="actionscript">これは、AIR アプリケーションサンドボックス内のコンテンツには適用されません。アプリケーションサンドボックス内のコンテンツは、起点に関係なく、常にプログラムによってサウンドコンテンツにアクセスします。</p>
	 
	 <p platform="actionscript">ポリシーファイルの詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「Flash Player セキュリティ」の章を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/load()"><linktext>flash.media.Sound.load()</linktext></link><link href="flash.media.xml#Sound/id3"><linktext>flash.media.Sound.id3</linktext></link><link href="flash.media.xml#SoundMixer/computeSpectrum()"><linktext>flash.media.SoundMixer.computeSpectrum()</linktext></link><link href="flash.media.xml#Sound/url"><linktext>flash.media.Sound.url</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()"><linktext>flash.system.Security.loadPolicyFile()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.media:SoundChannel"><apiName>SoundChannel</apiName><shortdesc>
 SoundChannel クラスはアプリケーション内でサウンドを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
 </refpath></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 SoundChannel クラスはアプリケーション内でサウンドを制御します。サウンドはすべてサウンドチャンネルに割り当てられます。アプリケーションでは、複数のチャンネルを組み合わせて使用することができます。 SoundChannel クラスには、<codeph>stop()</codeph> メソッド、チャンネルの振幅（ボリューム）を監視するためのプロパティ、および SoundTransform オブジェクトをチャンネルに割り当てるためのプロパティがあります。
 
 </apiDesc><example conref="examples\SoundChannelExample.as"> 次の例では MP3 ファイルがロードされて再生され、それによって発生するサウンドイベントに関する情報が表示されます。Timer オブジェクトによって、再生ヘッドの位置に関する更新情報が、50 ミリ秒ごとに提供されます。この例を実行するには、MySound.mp3 ファイルを SWF ファイルと同じディレクトリに配置します。

<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLRequest;
    import flash.utils.Timer;

    public class SoundChannelExample extends Sprite {
        private var url:String = "MySound.mp3";
        private var soundFactory:Sound;
        private var channel:SoundChannel;
        private var positionTimer:Timer;

        public function SoundChannelExample() {
            var request:URLRequest = new URLRequest(url);
            soundFactory = new Sound();
            soundFactory.addEventListener(Event.COMPLETE, completeHandler);
            soundFactory.addEventListener(Event.ID3, id3Handler);
            soundFactory.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            soundFactory.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            soundFactory.load(request);

            channel = soundFactory.play();
            channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);

            positionTimer = new Timer(50);
            positionTimer.addEventListener(TimerEvent.TIMER, positionTimerHandler);
            positionTimer.start();
        }
        

        private function positionTimerHandler(event:TimerEvent):void {
            trace("positionTimerHandler: " + channel.position.toFixed(2));
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function id3Handler(event:Event):void {
            trace("id3Handler: " + event);
        }

        private function ioErrorHandler(event:Event):void {
            trace("ioErrorHandler: " + event);
            positionTimer.stop();       
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler: " + event);
        }

        private function soundCompleteHandler(event:Event):void {
            trace("soundCompleteHandler: " + event);
            positionTimer.stop();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>Sound</linktext></link><link href="flash.media.xml#SoundTransform"><linktext>SoundTransform</linktext></link></related-links><adobeApiEvent id="flash.media:SoundChannel_flash.events.Event.SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><shortdesc>
 サウンドの再生が終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 サウンドの再生が終了したときに送出されます。 
 </apiDesc><example conref="examples\SoundChannel_event_soundCompleteExample.as"> 次の例では、ユーザーが再生リストから曲を選択し、[再生] をクリックして、選択した順序で曲を再生します。
 
 <p>コンストラクターには、テキストフィールドが定義され、曲リスト、および再生を選択するための行が保持されます。（通常、曲の再生にはボタンが使用され、曲リストにはリストボックスが使用されます。）選択された曲の行の書式をイタリックに変更するテキストフォーマットオブジェクトが定義されます。ユーザーがテキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p> 
 
<p><codeph>clickHandler()</codeph> メソッドでは、テキストフィールドオブジェクトの <codeph>getLineIndexAtPoint()</codeph> メソッドによってユーザーがクリックした行のインデックスが返されます。 行のインデックスを使用して、<codeph>getLineText()</codeph> メソッドによってテキストの内容が取得されます。次に、if ステートメントで、ユーザーが曲の再生と再生リストへの追加のいずれを選択したかがチェックされます。 ユーザーが再生を選択し、曲が選択された場合、マウスのクリックに対するイベントリスナーが削除され、<codeph>playNext()</codeph> メソッドが呼び出されて、曲の再生が開始されます。ユーザーが曲のタイトルを選択した場合、行の内容が <codeph>songList</codeph> 配列に追加され、行の書式がイタリックに設定されます。</p>
 
 <p><codeph>playNext()</codeph> メソッドによって配列リストが反復処理され、各曲がロードおよび再生されます。曲のサウンドチャンネルへの割り当ても行われます。曲の再生が終了し、<codeph>Event.SOUND_COMPLETE</codeph> イベントが送出されるときに応答するために、そのサウンドチャンネルに対するイベントリスナーが追加されます。次に、<codeph>soundCompleteHandler()</codeph> メソッドによって <codeph>playNext()</codeph> メソッドが呼び出され、次の曲が再生されます。この処理は、配列にリストされたすべての曲の再生が完了するまで続行します。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.text.TextFormat;
    import flash.net.URLRequest;
    import flash.events.Event;
    import flash.events.IOErrorEvent;

    public class SoundChannel_event_soundCompleteExample extends Sprite {
        private var channel:SoundChannel = new SoundChannel();
        private var songList:Array = new Array();
        private var listTextField:TextField = new TextField();
        private var songFormat:TextFormat = new TextFormat();
        private var arrayIndex:int = 0;
        private var songSelected:Boolean = false;
        
        public function SoundChannel_event_soundCompleteExample() {
            
            listTextField.autoSize = TextFieldAutoSize.LEFT;
            listTextField.border = true
            listTextField.background = true;
            listTextField.text = "Song1.mp3\n" + "Song2.mp3\n" 
                                + "Song3.mp3\n" + "Song4.mp3\n" + "PLAY";
        
            songFormat.italic = true;
 
            listTextField.addEventListener(MouseEvent.CLICK, clickHandler);
                        
            addChild(listTextField);
        }
        
        private function clickHandler(e:MouseEvent):void {
            var index:int = listTextField.getLineIndexAtPoint(e.localX, e.localY);
            var line:String = listTextField.getLineText(index);
            var firstIndex:uint = listTextField.getLineOffset(index);
            var playLine:uint = listTextField.numLines - 1;

                if((index == playLine) &amp;&amp; (songSelected == true)) {
                    listTextField.removeEventListener(MouseEvent.CLICK, clickHandler);
                    playNext();       

                } else if (index != playLine) {
                     songList.push(line.substr(0, (line.length - 1)));
                     listTextField.setTextFormat(songFormat, firstIndex, 
                                (firstIndex + listTextField.getLineLength(index)));     
                    songSelected = true;
                 }
        }

        private function playNext():void {
 
             if(arrayIndex &lt; songList.length) {
                var snd:Sound = new Sound();
                snd.load(new URLRequest(songList[arrayIndex]));
                channel = snd.play();
                
                channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);
                arrayIndex++;
 
            } else {
                songSelected = false;
                    
                while(arrayIndex > 0) {
                    songList.pop();
                    arrayIndex--;
                }
            }
        }    

        private function soundCompleteHandler(e:Event):void {
            playNext();
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.media:SoundChannel:stop"><apiName>stop</apiName><shortdesc> 
	 チャンネルで再生しているサウンドを停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 
	 </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	 チャンネルで再生しているサウンドを停止します。
	 
	 </apiDesc><example conref="examples\SoundChannel_stopExample.as"> 次の例では、ユーザーがボタンをクリックして、サウンドファイルを一時停止および再生できます。
 
 <p>コンストラクターで、サウンドファイルがロードされます。（この例では、ファイルが SWF ファイルと同じディレクトリにあると想定しています。）ユーザーがサウンドの再生または一時停止を実行するボタンとして、テキストフィールドが使用されます。ユーザーが <codeph>button</codeph> テキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドで、ユーザーが初めてテキストフィールドをクリックしたときに、サウンドが再生するように設定され、サウンドチャンネルに割り当てられます。 次に、ユーザーが一時停止するテキストフィールドをクリックすると、サウンドが再生を停止します。 サウンドチャンネルの <codeph>position</codeph> プロパティは、停止時のサウンドの位置を記録します。このプロパティを使用して、ユーザーがテキストフィールドをクリックして再生を再開した後、その位置でサウンドが再開されます。 <codeph>Sound.play()</codeph> メソッドが呼び出されるたびに、新しい SoundChannel オブジェクトが作成され、<codeph>channel</codeph> 変数に割り当てられます。サウンドチャンネルの <codeph>stop()</codeph> メソッドを使用してサウンドを一時停止するためには、Sound オブジェクトを SoundChannel オブジェクトに割り当てる必要があります。</p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.text.TextFieldAutoSize;
            
    public class SoundChannel_stopExample extends Sprite {
        private var snd:Sound = new Sound();
        private var channel:SoundChannel = new SoundChannel();
        private var button:TextField = new TextField();

        public function SoundChannel_stopExample() {
            var req:URLRequest = new URLRequest("MySound.mp3");
            snd.load(req);
            
            button.x = 10;
            button.y = 10;
            button.text = "PLAY";
            button.border = true;
            button.background = true;
            button.selectable = false;
            button.autoSize = TextFieldAutoSize.CENTER;

            button.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(button);
        }

        private function clickHandler(e:MouseEvent):void {
            var pausePosition:int = channel.position;

            if(button.text == "PLAY") {
                channel = snd.play(pausePosition);
                button.text = "PAUSE";
            } 
            else {
                channel.stop();
                button.text = "PLAY";
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.media:SoundChannel:leftPeak:get"><apiName>leftPeak</apiName><shortdesc> 
	 左チャンネルの現在の振幅（ボリューム）、0（無音）～ 1（完全な振幅）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
	 左チャンネルの現在の振幅（ボリューム）、0（無音）～ 1（完全な振幅）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundChannel:position:get"><apiName>position</apiName><shortdesc>
	 サウンドの再生中、position プロパティは、サウンドファイル内で再生されている現在のポイント（ミリ秒単位）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 サウンドの再生中、<codeph>position</codeph> プロパティは、サウンドファイル内で再生されている現在のポイント（ミリ秒単位）を示します。サウンドを停止または一時停止すると、<codeph>position</codeph> プロパティはサウンドファイル内で再生された最後のポイントを示します。
	 
	 <p>一般的な使用方法は、サウンドを停止したときに <codeph>position</codeph> プロパティの値を保存することです。その保存した位置からサウンドを再起動して、後でサウンドを再開できます。
	 </p>
	 
	 <p>サウンドをループしている場合、サウンド<codeph>位置</codeph>は各ループの最初に 0 にリセットされます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundChannel:rightPeak:get"><apiName>rightPeak</apiName><shortdesc> 
	 右チャンネルの現在の振幅（ボリューム）、0（無音）～ 1（完全な振幅）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
	 右チャンネルの現在の振幅（ボリューム）、0（無音）～ 1（完全な振幅）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundChannel:soundTransform:get"><apiName>soundTransform</apiName><shortdesc> 
	 サウンドチャンネルに割り当てられた SoundTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc> 
	 サウンドチャンネルに割り当てられた SoundTransform オブジェクトです。SoundTransform オブジェクトには、ボリューム、パン、左スピーカーの割り当て、および右スピーカーの割り当てを設定するプロパティが含まれます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundTransform"><linktext>SoundTransform</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.media:Video"><apiName>Video</apiName><shortdesc>
 
 Video クラスは、ビデオを SWF ファイルに埋め込むことなく、ライブビデオまたは録画ビデオをアプリケーションに表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, NetStream
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:DisplayObject</apiBaseClassifier></apiClassifierDef><apiDesc>
 
 Video クラスは、ビデオを SWF ファイルに埋め込むことなく、ライブビデオまたは録画ビデオをアプリケーションに表示します。このクラスは、ビデオを再生する Adobe Flash インターフェイスまたは Adobe Flex インターフェイスに Video オブジェクトを作成します。インターフェイスで再生されるビデオの種類は、サーバーまたはローカルに保存された録画 FLV ファイル、またはユーザーのコンピューターでキャプチャされたライブビデオです。Video オブジェクトは、アプリケーションの表示リスト上の表示オブジェクトであり、ユーザーインターフェイスで実行されるビデオのビジュアルスペースを表します。
 
 <p>
 Flash Media Server で使用する場合、Video オブジェクトにより、ユーザーのコンピューターからサーバーにライブビデオを送信し、サーバーから他のユーザーにブロードキャストできるようになります。これらの機能を使用することで、単純なビデオプレーヤー、あるサーバーから別のサーバーへのマルチポイントパブリッシュ機能を持つビデオプレーヤー、ユーザーコミュニティ用のビデオ共有アプリケーションなどのメディアアプリケーションを開発できます。
 </p>
 
 <p>
 Flash Player 9 では、Sorenson Spark または On2 VP6 コーデックでエンコーディングされた FLV ファイルのパブリッシュと再生をサポートし、アルファチャンネルもサポートしています。On2 VP6 ビデオコーデックは、古いテクノロジよりも少ない帯域幅を使用し、追加の非ブロックフィルターとリンギング除去フィルターを提供します。 ビデオ再生の詳細については、flash.net.NetStream クラスを参照してください。</p>
 
 
 <p>
 Flash Player 9.0.115.0 以降のバージョンでは、実行時レンダリングの品質とパフォーマンスを最適化するミップマッピングがサポートされます。ビデオ再生では、Video オブジェクトの <codeph>smoothing</codeph> プロパティを <codeph>true</codeph> に設定すると、Flash Player がミップマッピング最適化を使用します。 
 </p> 
 
 <p>
 表示リスト上の他の表示オブジェクトと同様に、Video オブジェクトの各種プロパティを制御できます。例えば、<codeph>x</codeph> プロパティおよび <codeph>y</codeph> プロパティを使用したステージ上での Video オブジェクトの移動、<codeph>height</codeph> プロパティおよび <codeph>width</codeph> プロパティを使用したサイズの変更などができます。 
 </p>
 
 <p>
 ビデオストリームを再生するには、<codeph>attachCamera()</codeph> または <codeph>attachNetStream()</codeph> を使用して、ビデオを Video オブジェクトに関連付けます。次に、<codeph>addChild()</codeph> を使用して、Video オブジェクトを表示リストに追加します。
 </p>
 
 <p product="flash">
 Flash オーサリングツールを使用する場合は、<codeph>addChild()</codeph> を使用して追加するのではなく、次のようにステージに Video オブジェクトを配置することもできます。
 </p>
 
 <ol product="flash">
   <li>ライブラリパネルを表示していない場合は、ウィンドウ／ライブラリを選択して表示します。</li>
   <li>ライブラリパネルのタイトルバーの右側にある「オプション」メニューをクリックして「新規ビデオ」を選択し、埋め込み Video オブジェクトをライブラリに追加します。</li>
   <li>ビデオのプロパティダイアログボックスで、ライブラリで使用する埋め込み Video オブジェクトの名前を付け、「OK」をクリックします。</li>
   <li>Video オブジェクトをステージにドラッグし、プロパティインスペクターを使用して一意のインスタンス名（<codeph>my_video</codeph> など）を付けます。"Video" という名前にはしないでください。</li>
 </ol>
 
 <p><b>注意：</b>Video クラスは InteractiveObject クラスのサブクラスではないため、マウスイベントを送出できません。ただし、Video オブジェクトを格納する表示オブジェクトコンテナで <codeph>addEventListener()</codeph> メソッドを呼び出すことができます。
 </p>
 
 </apiDesc><example conref="examples\VideoExample.as"> 次の例では、Video オブジェクトを NetConnection クラスおよび NetStream クラスと共に使用して、FLV ファイルをロードして再生します。この例を実行するには、<codeph>videoURL</codeph> に渡される変数と、ファイル名および場所が一致する FLV ファイルが必要です。この場合は、SWF ファイルと同じディレクトリにある Video.flv という名前の FLV ファイルです。
 <p>この例では、Video オブジェクトと NetStream オブジェクトを作成し、<codeph>Video.attachNetStream()</codeph> および <codeph>NetStream.play()</codeph> メソッドを呼び出すコードがハンドラー関数に配置されます。ハンドラーは、NetConnection オブジェクトへの接続が成功した場合にのみ呼び出されます。つまり、<codeph>netStatus</codeph> イベントが、成功したことを示す <codeph>code</codeph> プロパティと共に info オブジェクトを返す場合です。接続に成功するまで待ってから、<codeph>NetStream.play()</codeph> を呼び出すことをお勧めします。 </p>
 <codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class VideoExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function VideoExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            stream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }
    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Video/attachCamera()"><linktext>attachCamera()</linktext></link><link href="flash.media.xml#Video/attachNetStream()"><linktext>attachNetStream()</linktext></link><link href="flash.media.xml#Camera/getCamera()"><linktext>flash.media.Camera.getCamera()</linktext></link><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.display.xml#DisplayObjectContainer/addChild()"><linktext>flash.display.DisplayObjectContainer.addChild()</linktext></link><link href="flash.display.xml#Stage/addChild()"><linktext>flash.display.Stage.addChild()</linktext></link></related-links><apiConstructor id="flash.media:Video:Video"><apiName>Video</apiName><shortdesc>
     新しい Video インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, NetStream
     </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>320</apiData><apiDesc>ビデオの幅（ピクセル単位）です。
     </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>240</apiData><apiDesc>ビデオの高さ（ピクセル単位）です。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     新しい Video インスタンスを作成します。<codeph>width</codeph> パラメーターと <codeph>height</codeph> パラメーターの値が指定されていない場合は、デフォルト値が使用されます。Video オブジェクトの初期構築後に、<codeph>Video.width</codeph> と <codeph>Video.height</codeph> を使用して幅と高さのプロパティを設定することもできます。新しい Video オブジェクトを作成する際に、幅または高さに 0 は設定できません。0 を渡すと、デフォルト値が適用されます。
     
     <p>Video オブジェクトの作成後、<codeph>DisplayObjectContainer.addChild()</codeph> メソッドまたは <codeph>DisplayObjectContainer.addChildAt()</codeph> メソッドを呼び出して、親 DisplayObjectContainer オブジェクトに Video オブジェクトを追加できます。</p>
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:Video:attachCamera"><apiName>attachCamera</apiName><shortdesc>
     アプリケーション内の Video オブジェクトの境界内に表示するカメラからのビデオストリームを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Video.attachCamera, attachCamera()
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>camera</apiItemName><apiOperationClassifier>flash.media:Camera</apiOperationClassifier><apiDesc>ビデオデータをキャプチャする Camera オブジェクトです。Video オブジェクトへの接続を閉じるには、<codeph>null</codeph> を渡します。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     アプリケーション内の Video オブジェクトの境界内に表示するカメラからのビデオストリームを指定します。
     
     <p>
     このメソッドを使用して、ユーザーのコンピューターのライブビデオを Video オブジェクトに関連付けます。ライブビデオをキャプチャした同じコンピューターで、ローカルにライブビデオを再生することも、Flash Media Server に送信し、サーバーを使用して、他のユーザーにストリームすることもできます。
     </p>
     
     </apiDesc><example>このメソッドの使用方法について詳しくは、<xref href="Camera.html#getCamera()">Camera.getCamera()</xref> メソッドの例を参照してください。 
     </example></apiOperationDetail><related-links><link href="flash.media.xml#Video/attachNetStream()"><linktext>Video.attachNetStream()</linktext></link><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Video:attachNetStream"><apiName>attachNetStream</apiName><shortdesc>
     アプリケーション内の Video オブジェクトの境界内に表示するビデオストリームを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream, video, Video.attachNetStream, attachNetStream()
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>netStream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiDesc>NetStream オブジェクトです。Video オブジェクトへの接続を閉じるには、<codeph>null</codeph> を渡します。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     アプリケーション内の Video オブジェクトの境界内に表示するビデオストリームを指定します。ビデオストリームは、<codeph>NetStream.play()</codeph> で再生される FLV ファイル、Camera オブジェクト、または <codeph>null</codeph> です。FLV ファイルを使用する場合、ファイルはローカルファイルシステムまたは Flash Media Server に保存できます。<codeph>netStream</codeph> 引数の値に <codeph>null</codeph> を指定すると、Video オブジェクト内でビデオが再生されなくなります。
     
     <p>
     FLV ファイルにオーディオしか含まれない場合は、このメソッドを使用する必要はありません。FLV ファイルのオーディオ部分は、<codeph>NetStream.play()</codeph> が呼び出されると自動的に再生されます。FLV ファイルに関連付けられたオーディオを制御するには、FLV ファイルを再生する NetStream オブジェクトの <codeph>soundTransform</codeph> プロパティを使用します。
     </p>
     
     </apiDesc><example>このメソッドの使用方法の詳細については、このクラスの末尾の例を参照してください。 
     </example></apiOperationDetail><related-links><link href="flash.media.xml#Video/attachCamera()"><linktext>Video.attachCamera()</linktext></link><link href="flash.net.xml#NetStream/soundTransform"><linktext>flash.net.NetStream.soundTransform</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>flash.net.NetStream.play()</linktext></link><link href="flash.media.xml#SoundTransform"><linktext>SoundTransform</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Video:clear"><apiName>clear</apiName><shortdesc>
     Video オブジェクトに現在表示されているイメージ（ビデオストリームではない）をクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Video.clear, clear
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Video オブジェクトに現在表示されているイメージ（ビデオストリームではない）をクリアします。このメソッドは、現在のイメージを処理する場合に便利です。例えば、最後のイメージをクリアしたり、Video オブジェクトを非表示にせずにスタンバイ情報を表示したりできます。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#Video/attachCamera()"><linktext>Video.attachCamera()</linktext></link></related-links></apiOperation><apiValue id="flash.media:Video:deblocking:get"><apiName>deblocking</apiName><shortdesc>
     事後処理中に、デコードされたビデオに適用されるフィルターのタイプを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Video.deblocking, deblocking
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
     事後処理中に、デコードされたビデオに適用されるフィルターのタイプを示します。デフォルト値の 0 に設定すると、ビデオコンプレッサは必要に応じて非ブロックフィルターを適用します。
     
     <p>ビデオの圧縮によって、好ましくない生成結果となる場合があります。<codeph>deblocking</codeph> プロパティを使用して、ブロッキングと、On2 コーデックを使用して圧縮されたビデオのリンギングを低減するフィルターを設定できます。</p>
     
     <p><i>ブロッキング</i>とは、各ビデオフレームを構成するブロックの境界と境界の間に見られる不具合のことです。<i>リンギング</i>とは、ビデオイメージ内の要素の周囲が歪曲することです。</p>
     
     <p>次の 2 つの非ブロックフィルターを使用できます。1 つは Sorenson コーデックにあり、もう 1 つは On2 VP6 コーデックにあります。さらに、On2 VP6 コーデックを使用する際にはリンギング除去フィルターを使用できます。フィルターを設定するには、次のいずれかの値を使用します。</p>
     
     <ul>
       <li>0 - ビデオコンプレッサは必要に応じて非ブロックフィルターを適用します。</li>
       <li>1 - 非ブロックフィルターを使用しません。</li>
       <li>2 - Sorenson 非ブロックフィルターを使用します。</li>
       <li>3 - On2 ビデオにのみ、On2 非ブロックフィルターを使用し、リンギング除去フィルターは使用しません。</li>
       <li>4 - On2 ビデオにのみ、On2 非ブロックフィルターとリンギング除去フィルターを使用します。</li>
       <li>5 - On2 ビデオにのみ、On2 非ブロックフィルターとパフォーマンスが向上した On2 リンギング除去フィルターを使用します。</li>
     </ul>
     
     <p>Sorenson コーデックの使用時にビデオに 2 より大きい値を選択すると、Sorenson デコーダはデフォルトで 2 になります。</p>
     
     <p>非ブロックフィルターを使用すると、全体的な再生のパフォーマンスに影響します。高帯域幅のビデオには、通常は必要ありません。非ブロックフィルターを有効にしたビデオは、処理能力の低いシステムでは再生が困難なことがあります。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Video:smoothing:get"><apiName>smoothing</apiName><shortdesc>
     ビデオを拡大 / 縮小する際にスムージング（補間）するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Video.smoothing, smoothing
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     ビデオを拡大 / 縮小する際にスムージング (補間) するかどうかを指定します。スムージングを行うには、Flash Player が高品質モードである必要があります。デフォルト値は <codeph>false</codeph> (スムージングなし) です。
     <p>Flash Player 9.0.115.0 以降のバージョンを使用するビデオ再生では、このプロパティを <codeph>true</codeph> に設定して、ミップマッピングイメージ最適化を利用します。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Video:videoHeight:get"><apiName>videoHeight</apiName><shortdesc>
      ビデオストリームの高さをピクセル単位で指定する整数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Video.height, height
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
      ビデオストリームの高さをピクセル単位で指定する整数です。ライブストリームの場合、この値はビデオストリームをキャプチャしている Camera オブジェクトの <codeph>Camera.height</codeph> プロパティと同じです。FLV ファイルの場合、この値は FLV として書き出されたファイルの高さになります。
     <p>このプロパティは、ステージ上の実際の Video オブジェクトのサイズとは関係なく、キャプチャしたのと同じサイズでユーザーに対してビデオを表示する場合などに使用します。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/height"><linktext>flash.media.Camera.height</linktext></link></related-links></apiValue><apiValue id="flash.media:Video:videoWidth:get"><apiName>videoWidth</apiName><shortdesc>
      ビデオストリームの幅をピクセル単位で指定する整数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Camera, video, Video.width, width
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
      ビデオストリームの幅をピクセル単位で指定する整数です。ライブストリームの場合、この値はビデオストリームをキャプチャしている Camera オブジェクトの <codeph>Camera.width</codeph> プロパティと同じです。FLV ファイルの場合、この値は FLV ファイルとして書き出されたファイルの幅になります。
     <p>このプロパティは、ステージ上の実際の Video オブジェクトのサイズとは関係なく、キャプチャしたのと同じサイズでユーザーに対してビデオを表示する場合などに使用します。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/width"><linktext>flash.media.Camera.width</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.media:SoundMixer"><apiName>SoundMixer</apiName><shortdesc>
SoundMixer クラスには、静的プロパティやアプリケーションのグローバルサウンドコントロールのメソッドが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
SoundMixer クラスには、静的プロパティやアプリケーションのグローバルサウンドコントロールのメソッドが含まれます。SoundMixer クラスは、アプリケーションに埋め込まれたストリーミングサウンドを制御します。動的に作成されるサウンド（つまり、<codeph>sampleData</codeph> イベントを送出する Sound オブジェクトに応答して生成されるサウンド）は制御しません。

</apiDesc></apiClassifierDetail><apiOperation id="flash.media:SoundMixer:areSoundsInaccessible"><apiName>areSoundsInaccessible</apiName><shortdesc> 
     セキュリティ上の制限のためにサウンドが使用できないかどうかを調べます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ブール値のストリング表現です。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
     セキュリティ上の制限のためにサウンドが使用できないかどうかを調べます。例えば、このメソッドの呼び出し元コンテンツのドメイン以外のドメインからロードされたサウンドは、そのサウンドのサーバー上に、該当するドメインから自ドメインへのアクセスを許可する URL ポリシーファイルが存在していなければ、アクセスできません。サウンドをロードしたり、再生することはできますが、アクセス不可のサウンドに対して、サウンドの ID3 メタデータの取得などの低レベルの操作は実行できません。
     
     <p>アプリケーションセキュリティサンドボックス内の AIR アプリケーションコンテンツでは、このメソッドを呼び出すと常に <codeph>false</codeph> が返されます。 すべてのサウンド（他のドメインからロードされたサウンドを含む）は、アプリケーションセキュリティサンドボックス内のコンテンツにアクセスできます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.media.xml#SoundMixer/computeSpectrum()"><linktext>computeSpectrum()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:SoundMixer:computeSpectrum"><apiName>computeSpectrum</apiName><shortdesc>
     現在のサウンド波形からスナップショットを取得し、指定した ByteArray オブジェクトに配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Should confirm if the floating point numbers are single- or double-precision.
     
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>outputArray</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>サウンドに関連する値を保持する ByteArray オブジェクトです。セキュリティ上の制限のためにサウンドが使用できない場合（<codeph>areSoundsInaccessible == true</codeph>）、<codeph>outputArray</codeph> オブジェクトは変更されません。すべてのサウンドが停止している場合、<codeph>outputArray</codeph> オブジェクトには 0 が詰められます。
     
     </apiDesc></apiParam><apiParam><apiItemName>FFTMode</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>サウンドデータに対して最初にフーリエ変換を実行するかどうかを示すブール値です。このパラメーターを <codeph>true</codeph> に設定すると、このメソッドは未処理のサウンド波形ではなく周波数スペクトルを返します。周波数スペクトルでは、低い周波数は左側に、高い周波数は右側に表されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>stretchFactor</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>サウンドサンプリングの解像度です。例えば、<codeph>stretchFactor</codeph> 値に 0 を設定した場合、データは 44.1 KHz でサンプリングされ、1 の場合は 22.05 KHz、2 の場合は 11.025 KHz となります。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在のサウンド波形からスナップショットを取得し、指定した ByteArray オブジェクトに配置します。値の形式は正規化された浮動小数値で、範囲は -1.0 ～ 1.0 です。<codeph>outputArray</codeph> パラメーターに渡す ByteArray オブジェクトは、新しい値で上書きされます。作成される ByteArray オブジェクトのサイズは 512 に固定され（値は浮動小数値）、最初の 256 個は左チャンネルを表し、次の 256 個は右チャンネルを表します。
     
     <p><b>注意：</b>このメソッドは、ローカルファイルのセキュリティ制限とドメイン間のデータロードに関する制限に従います。 ローカルファイルを操作する場合、または呼び出し元コンテンツとは異なるドメインに存在するサーバーからロードしたサウンドを操作する場合は、クロスドメインポリシーファイルを使用してサンドボックスの制限に対処しなければならないことがあります。 詳細については、Sound クラスの説明を参照してください。また、このメソッドは、RTMP サーバーと同じドメインに存在するコンテンツから呼び出された場合でも、RTMP ストリームからデータを抽出するために使用することはできません。</p>
     
     
     <p>このメソッドは、Flash Player 9.0.115.0 以降と Adobe AIR の RTMP 上でサポートされています。サーバーサイドスクリプトで、Flash Media Server 上のストリームへのアクセスを制御することができます。詳細については、<codeph>Client.audioSampleAccess</codeph> プロパティおよび <codeph>Client.videoSampleAccess</codeph> プロパティのトピック（<xref href="http://www.adobe.com/go/documentation_jp" scope="external">『Server-Side ActionScript Language Reference for Adobe Flash Media Server』<i/></xref>）を参照してください。</p>
     
     </apiDesc><example conref="examples\SoundMixer_computeSpectrumExample.as"> 次の例では、<codeph>computeSpectrum()</codeph> メソッドを使用して、サウンド波形データのグラフィック表現を生成します。 
 
 <p>コンストラクターで、サウンドファイルがロードされ、再生に設定されます。この例では、エラー処理はありません。また、サウンドファイルが SWF ファイルと同じディレクトリにあると想定しています。この例では、サウンドの再生中に <codeph>Event.ENTER_FRAME</codeph> イベントを待機し、<codeph>onEnterFrame()</codeph> メソッドを繰り返しトリガーして、サウンドデータ値のグラフを描画します。サウンドの再生が終了すると、<codeph>Event.ENTER_FRAME</codeph> イベントのリスナーを削除することにより、<codeph>onPlaybackComplete()</codeph> メソッドによって描画処理が停止されます。</p>
 
 <p><codeph>onEnterFrame()</codeph> メソッドで、<codeph>computeSpectrum()</codeph> メソッドによって <codeph>bytes</codeph> バイト配列オブジェクトに生のサウンドが保存されます。データは 44.1 KHz でサンプリングされます。512 バイトのデータを含む各バイト配列には、-1 ～ 1 の浮動小数値が含まれます。前半の 256 バイトの値は左チャンネルを表し、後半の 256 バイトの値は右チャンネルを表します。1 つ目の for ループは、前半の 256 バイトのデータ値（左ステレオチャンネル）を読み取り、<codeph>Graphics.lineTo()</codeph> メソッドを使用して、各ポイントから次のポイントまでの間に線を描画します。サウンド波形のベクターグラフィック表示は、クラスの Sprite オブジェクトに直接記述されます。バイトストリームから 32 ビット浮動小数点数としてサウンドのバイトが読み取られ、グラフの垂直方向の範囲に適合するようにプロットの高さで乗算されます。幅はチャンネルの長さの 2 倍に設定されます。2 つ目の for ループは、後半の 256 バイトの値（右ステレオチャンネル）を読み取り、逆の順序で線を描画します。<codeph>g.lineTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);</codeph> メソッドおよび <codeph>g.lineTo(0, PLOT_HEIGHT);</codeph> メソッドにより波形のベースラインが描画されます。生成される波形プロットから、鏡像効果が生まれます。</p>  

<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.Event;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.SoundMixer;
    import flash.net.URLRequest;
    import flash.utils.ByteArray;
    import flash.text.TextField;

    public class SoundMixer_computeSpectrumExample extends Sprite {

        public function SoundMixer_computeSpectrumExample() {
            var snd:Sound = new Sound();
            var req:URLRequest = new URLRequest("Song1.mp3");
            snd.load(req);
            
            var channel:SoundChannel;
            channel = snd.play();
            addEventListener(Event.ENTER_FRAME, onEnterFrame);
            channel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);
        }

        private function onEnterFrame(event:Event):void {
            var bytes:ByteArray = new ByteArray();
            const PLOT_HEIGHT:int = 200;
            const CHANNEL_LENGTH:int = 256;

            SoundMixer.computeSpectrum(bytes, false, 0);
            
            var g:Graphics = this.graphics;
            
            g.clear();
       
            g.lineStyle(0, 0x6600CC);
            g.beginFill(0x6600CC);
            g.moveTo(0, PLOT_HEIGHT);
            
            var n:Number = 0;
            
            for (var i:int = 0; i &lt; CHANNEL_LENGTH; i++) {
                n = (bytes.readFloat() * PLOT_HEIGHT);
                g.lineTo(i * 2, PLOT_HEIGHT - n);
            }

            g.lineTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);
            g.endFill();
 
            g.lineStyle(0, 0xCC0066);
            g.beginFill(0xCC0066, 0.5);
            g.moveTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);
            
            for (i = CHANNEL_LENGTH; i > 0; i--) {
                n = (bytes.readFloat() * PLOT_HEIGHT);
                g.lineTo(i * 2, PLOT_HEIGHT - n);
            }
  
            g.lineTo(0, PLOT_HEIGHT);
            g.endFill();
        }
        
        private function onPlaybackComplete(event:Event):void {
            removeEventListener(Event.ENTER_FRAME, onEnterFrame);
        }
    }
}

</codeblock></example></apiOperationDetail><related-links><link href="flash.media.xml#SoundMixer/areSoundsInaccessible()"><linktext>areSoundsInaccessible()</linktext></link><link href="flash.utils.xml#ByteArray"><linktext>flash.utils.ByteArray</linktext></link><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link><link href="flash.media.xml#SoundLoaderContext/checkPolicyFile"><linktext>flash.media.SoundLoaderContext.checkPolicyFile</linktext></link></related-links></apiOperation><apiOperation id="flash.media:SoundMixer:stopAll"><apiName>stopAll</apiName><shortdesc>
     再生中のサウンドをすべて停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     再生中のサウンドをすべて停止します。 
     
     <p product="flash">再生ヘッドは停止されません。ストリーミングするために設定されたサウンドは、そのサウンドが置かれているフレームに再生ヘッドが移動すると再生を再開します。</p>
     
     <p platform="actionscript">このプロパティを使用するときは、次のセキュリティモデルを考慮してください。</p>
     
     <ul platform="actionscript">
     
     <li> デフォルトでは、<codeph>SoundMixer.stopAll()</codeph> メソッドを呼び出すと、呼び出し元のオブジェクトと同じセキュリティサンドボックス内にあるサウンドのみを停止します。呼び出し元のオブジェクトと同じサンドボックスから再生を開始しなかったサウンドは、停止されません。</li>
     
     <li>サウンドをロードするとき、Sound クラスの <codeph>load()</codeph> メソッドを使用すると、SoundLoaderContext オブジェクトである <codeph>context</codeph> パラメーターを指定できます。SoundLoaderContext オブジェクトの <codeph>checkPolicyFile</codeph> プロパティを <codeph>true</codeph> に設定した場合、<ph platform="actionscript">Flash Player または</ph> Adobe AIR は、サウンドのロード元のサーバー上にクロスドメインポリシーファイルがあるかどうかをチェックします。 サーバーにクロスドメインポリシーファイルが存在しており、そのファイルで呼び出し元コンテンツのドメインが許可されている場合、<codeph>SoundMixer.stopAll()</codeph> メソッドを使用してロードされたサウンドを停止することができます。許可されていない場合は、停止できません。</li>
     
     </ul>
     
     <p platform="actionscript">ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p platform="actionscript">詳しくは、次のトピックを参照してください。</p>
     
     <ul platform="actionscript">
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
     </apiDesc><example conref="examples\SoundMixer_stopAllExample.as"> 次の例では、<codeph>stopAll()</codeph> メソッドを使用して、同時に再生される 2 つのサウンドをミュートします。 
 
 <p>コンストラクターで、2 つの異なるサウンドファイルがロードされ、再生するように設定されます。1 つ目のサウンドは、ローカルにロードされ、サウンドチャンネルに割り当てられます。ファイルが SWF ファイルと同じディレクトリにあると想定しています。2 つ目のファイルは、アドビ システムズ社のサイトからロードされ、ストリームされます。<codeph>SoundMixer.stopAll()</codeph> メソッドを使用するには、すべてのサウンドがアクセス可能である必要があります。SoundLoaderContext オブジェクトを使用して、クロスドメインポリシーファイルをチェックできます。それぞれのサウンドには、サウンドファイルのロード中に IO エラーが発生した場合に呼び出されるイベントリスナーもあります。<codeph>muteButton</codeph> テキストフィールドも作成されます。マウスのクリックを待機し、<codeph>muteButtonClickHandler()</codeph> メソッドを呼び出します。</p>
 
 <p><codeph>muteButtonClickHandler()</codeph> メソッドで、テキストフィールドの内容が "MUTE" の場合、<codeph>areSoundsInaccessible()</codeph> メソッドにより、サウンドミキサーがファイルにアクセスできるかどうかがチェックされます。ファイルがアクセス可能の場合、<codeph>stopAll()</codeph> メソッドによってサウンドが停止されます。テキストフィールドをもう一度クリックすると、1 つ目のサウンドの再生が開始され、テキストフィールドの内容が再び "MUTE" に変わります。今度は、<codeph>stopAll()</codeph> メソッドによって、実行中の 1 つのサウンドがミュートされます。サウンドチャンネルの <codeph>stop()</codeph> メソッドを使用して、チャンネルに割り当てられた特定のサウンドを停止することもできます。チャンネルの機能を使用するには、<codeph>play()</codeph> メソッドを呼び出すたびに、サウンドをチャンネルに再割り当てする必要があります。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundLoaderContext;
    import flash.media.SoundChannel;
    import flash.media.SoundMixer;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.events.IOErrorEvent;

    public class SoundMixer_stopAllExample extends Sprite  {
        private var firstSound:Sound = new Sound();
        private var secondSound:Sound = new Sound();
        private var muteButton:TextField = new TextField();
        private var channel1:SoundChannel = new SoundChannel();
        
        public function SoundMixer_stopAllExample() {
            firstSound.load(new URLRequest("mySound.mp3"));
            secondSound.load(new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3"));

            firstSound.addEventListener(IOErrorEvent.IO_ERROR, firstSoundErrorHandler);
            secondSound.addEventListener(IOErrorEvent.IO_ERROR, secondSoundErrorHandler);
            
            channel1 = firstSound.play();
            secondSound.play();
            
            muteButton.autoSize = TextFieldAutoSize.LEFT;
            muteButton.border = true;
            muteButton.background = true;
            muteButton.text = "MUTE";
        
            muteButton.addEventListener(MouseEvent.CLICK, muteButtonClickHandler);         
        
            this.addChild(muteButton);
        }

        private function muteButtonClickHandler(event:MouseEvent):void {

            if(muteButton.text == "MUTE") {        
  
                if(SoundMixer.areSoundsInaccessible() == false) {
                    SoundMixer.stopAll();
                    muteButton.text = "click to play only one of sound.";
                }
                else {
                    muteButton.text = "The sounds are not accessible.";
                }
            }
           else {
                firstSound.play();        
                muteButton.text = "MUTE";
           }
        } 

        private function firstSoundErrorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }

        private function secondSoundErrorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.media:SoundMixer:bufferTime:get"><apiName>bufferTime</apiName><shortdesc>
     サウンドのストリーミングを開始するまでに、埋め込まれたストリーミングサウンドをバッファーにプリロードする秒数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
     サウンドのストリーミングを開始するまでに、埋め込まれたストリーミングサウンドをバッファーにプリロードする秒数です。ロードされたサウンドのデータ（バッファー時間も含む）には、クロスドメインポリシーファイルを実装していない限り、別のドメインに存在する SWF ファイルからアクセスできません。セキュリティとサウンドの詳細については、Sound クラスの説明を参照してください。ストリーミングします。<ph platform="actionscript">ロードされたサウンドのデータ（バッファー時間も含む）には、クロスドメインポリシーファイルを実装していない限り、別のドメインに存在するファイルのコードからはアクセスできません。ただし、AIR アプリケーションのアプリケーションサンドボックスでは、コードは任意のソースからのサウンドファイルにあるデータにアクセスできます。セキュリティとサウンドの詳細については、Sound クラスの説明を参照してください。</ph> 
     
     <p><codeph>SoundMixer.bufferTime</codeph> プロパティは SWF に埋め込まれたストリーミングサウンドのバッファー時間のみに影響し、動的に作成される Sound オブジェクト（ActionScript で作成される Sound オブジェクト）には影響しません。<codeph>SoundMixer.bufferTime</codeph> の値は、<codeph>Sound.load()</codeph> メソッドに渡される SoundLoaderContext オブジェクトで指定されたバッファー時間のデフォルト値に対して、オーバーライドや設定はできません。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound"><linktext>Sound</linktext></link></related-links></apiValue><apiValue id="flash.media:SoundMixer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc> 
     グローバルサウンドプロパティを制御する SoundTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc> 
     グローバルサウンドプロパティを制御する SoundTransform オブジェクトです。SoundTransform オブジェクトには、ボリューム、パン、左スピーカーの割り当て、および右スピーカーの割り当てを設定するプロパティが含まれます。このプロパティで使用される SoundTransform オブジェクトは、個々のサウンド設定が適用された後にすべてのサウンドに適用される最終的なサウンド設定を提供します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundTransform"><linktext>SoundTransform</linktext></link></related-links></apiValue></apiClassifier></apiPackage>