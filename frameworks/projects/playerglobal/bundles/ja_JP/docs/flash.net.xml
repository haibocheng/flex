<?xml version="1.0"?>
<apiPackage id="flash.net"><apiName>flash.net</apiName><apiDetail/><apiClassifier id="flash.net:XMLSocket"><apiName>XMLSocket</apiName><shortdesc>
 
 XMLSocket クラスはクライアントソケットを実装しており、Flash Player または AIR アプリケーションはこのソケットを使用して、IP アドレスまたはドメイン名で識別されるサーバーコンピューターと通信できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLsocket, XMLsocket object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 
 XMLSocket クラスはクライアントソケットを実装しており、<ph platform="actionscript">Flash Player</ph> または AIR アプリケーションはこのソケットを使用して、IP アドレスまたはドメイン名で識別されるサーバーコンピューターと通信できます。 XMLSocket クラスは、リアルタイムのチャットシステムなど待ち時間を短くすることが求められるクライアント/サーバーアプリケーションに適しています。従来の HTTP ベースチャットソリューションは頻繁にサーバーをポーリングし、HTTP 要求を使用して新しいメッセージをダウンロードします。それに対して、XMLSocket チャットソリューションはサーバーに対して開いた接続を維持するため、サーバーはクライアントから要求を受けずにただちに着信メッセージを送ることができます。XMLSocket クラスを使用するには、サーバーコンピューターは XMLSocket クラスで使用されるプロトコルに対応したデーモンを実行する必要があります。プロトコルの説明を次の一覧に示します。 
 <ul>
   <li>XML メッセージは、全二重 TCP/IP ストリームソケット接続を介して送られます。</li>
   <li>個々の XML メッセージは完全な XML ドキュメントであり、ゼロ（0）バイトで終了します。</li>
   <li>1 つの XMLSocket 接続を使用して送受信できる XML メッセージの数に制限はありません。</li>
 </ul>
 
 <p>XMLSocket オブジェクトと通信するようにサーバーを設定すると、問題が発生する可能性があります。 アプリケーションがリアルタイムのインタラクティブ機能を必要としない場合は、XMLSocket クラスの代わりに、URLLoader クラスを使用します。 </p>
 
 <p>XMLSocket クラスのメソッドを使用するには、まず <codeph>new XMLSocket</codeph> コンストラクターを使用して XMLSocket オブジェクトを作成します。</p>
 
 <p>ローカルファイルシステムのサンドボックス内の SWF ファイルはソケットを使用できません。</p>
      
  <p> ターゲットホスト上のソケットポリシーファイルで、SWF ファイルがソケット接続できるホストと、その接続ができるポートを指定します。<i/>Flash Player の最近のリリースでは、ソケットポリシーファイルに関するセキュリティ要件が以前より厳密になっています。Flash Player のすべてのバージョンで、ソケットポリシーファイルを使用することをお勧めします。環境によっては、ソケットポリシーファイルの使用が必須となっています。このため、XMLSocket オブジェクトを使用している場合は、必要に応じてターゲットホストがソケットポリシーファイルを提供するようにしてください。 </p>
 
  <p>次の一覧は、Flash Player の各バージョンにおけるソケットポリシーファイルの要件をまとめたものです。</p>
 
  <ul>
  
   <li> Flash Player 9.0.124.0 以降のバージョンでは、XMLSocket 接続にソケットポリシーファイルが必要です。つまり、接続しているポートには関係なく、ターゲットホスト上にソケットポリシーファイルが必要ということです。また、SWF ファイルを提供している同じホスト上のポートに接続している場合でも同様です。 </li>
 
   <li> Flash Player 9.0.115.0 以前のバージョンでは、1024 未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときは、ターゲットホスト上にソケットポリシーファイルが必要です。 </li>
 
  <li> Flash Player 9.0.115.0 では、ソケットポリシーファイルが不要な場合でも、ターゲットホストがソケットポリシーファイルを提供していないときに Flash Debug Player を使うと警告が表示されます。 </li>
 
  </ul>
 
 <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
 
 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
 
 <ul>
 
 <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
 </ul>
 
 </apiDesc><example conref="examples\XMLSocketExample.as"> 次の例では、クラス XMLSocketExample を使用して、XMLSocket でデータを送信し、XMLSocket イベント時に情報をプリントします。ここでは以下の手順を実行します。
 <ol>
  <li>XMLSocketExample コンストラクターが <codeph>socket</codeph> という名前の XMLSocket インスタンスを作成し、<codeph>socket</codeph> を後述の <codeph>ConfigureListeners()</codeph> に渡します。次に XMLSocket の <codeph>connect()</codeph> メソッドを呼び出します。この呼び出しには、ホスト名 "localhost" とポート番号 <codeph>8080</codeph> を使用します。</li>
  <li><codeph>configureListeners()</codeph>メソッドを呼び出して、サポートされる各 XMLSocket イベントのリスナーを追加します。
  <ul>
      <li><codeph>closeHandler()</codeph>：<codeph>close</codeph> イベントをリッスンします。このイベントはネットワーク接続が閉じられた後に送出されます。</li>
      <li><codeph>connectHandler()</codeph>：<codeph>connect</codeph> イベントをリッスンします。このイベントはネットワーク接続が確立されたときに送出されます。</li>
      <li><codeph>dataHandler()</codeph>：<codeph>data</codeph> イベントをリッスンします。このイベントは XMLSocket が新しいデータを受け取るたびに送出されます。</li>
      <li><codeph>progressHandler()</codeph>：<codeph>progress</codeph> イベントをリッスンします。このイベントは <codeph>send()</codeph> が呼び出されたとき、送信中に送出されます。</li>
      <li><codeph>securityErrorHandler()</codeph>：<codeph>securityError</codeph> イベントをリッスンします。このイベントは、ローカルでの再生に関するセキュリティを誤って設定して、または 1024 より小さいポートを使用して、XMLSocket にアクセスしようとしたときに送出されます。</li>  
      <li><codeph>ioErrorHandler()</codeph>：<codeph>ioError</codeph> イベントをリッスンします。このイベントはデータの送信または受信操作に失敗すると発生します。</li>  
  </ul></li>
 </ol>
 <p><b>注意：</b>
 <ul>
  <li>「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。</li>
  <li>このコード例が動作するには、ポート 8080 を使用して、ドメイン名上で実行しているサーバーが必要です。</li>
  <li>Flash Player 9.0.124.0 以降のバージョンを実行しているときは、ドメインからポート 8080 へのソケット接続を許可するソケットポリシーファイルをサーバー上に置く必要があります。ソケットポリシーファイルの提供については、Flash Player デベロッパーセンターのトピック<xref href="http://www.adobe.com/jp/devnet/flashplayer/articles/socket_policy_files.html" scope="external">ソケットポリシーファイルサーバーの設定</xref>を参照してください。</li>
  </ul>
 </p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.XMLSocket;

    public class XMLSocketExample extends Sprite {
        private var hostName:String = "localhost";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function XMLSocketExample() {
            socket = new XMLSocket();
            configureListeners(socket);
            if (hostName &amp;&amp; port) {
                socket.connect(hostName, port);
            }
        }

        public function send(data:Object):void {
            socket.send(data);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CLOSE, closeHandler);
            dispatcher.addEventListener(Event.CONNECT, connectHandler);
            dispatcher.addEventListener(DataEvent.DATA, dataHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        }

        private function closeHandler(event:Event):void {
            trace("closeHandler: " + event);
        }

        private function connectHandler(event:Event):void {
            trace("connectHandler: " + event);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>flash.net.URLLoader.load()</linktext></link><link href="flash.net.xml#URLLoader"><linktext>flash.net.URLLoader</linktext></link></related-links><adobeApiEvent id="flash.net:XMLSocket_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 XMLSocket.connect() メソッドの呼び出しによって、呼び出し元のセキュリティサンドボックスの外にあるサーバーや 1024 未満のポート番号に対して接続しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>XMLSocket.connect()</codeph> メソッドの呼び出しによって、呼び出し元のセキュリティサンドボックスの外にあるサーバーや 1024 未満のポート番号に対して接続しようとしたときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/connect()"><linktext>XMLSocket.connect()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 入出力エラーが発生して送信または受信操作が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 入出力エラーが発生して送信または受信操作が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.DataEvent.DATA_data"><apiName>data</apiName><shortdesc>
 未処理のデータが送受信された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.DataEvent.DATA</apiEventType><adobeApiEventClassifier>flash.events.DataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 未処理のデータが送受信された後に送出されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.Event.CONNECT_connect"><apiName>connect</apiName><shortdesc>
 XMLSocket.connect() メソッドの呼び出しが成功したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>XMLSocket.connect()</codeph> メソッドの呼び出しが成功した後に送出されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket_flash.events.Event.CLOSE_close"><apiName>close</apiName><shortdesc>
 サーバーによりソケット接続が閉じられたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 サーバーによりソケット接続が閉じられたときに送出されます。<codeph>close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph>XMLSocket.close()</codeph> メソッドを呼び出しても送出されません。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:XMLSocket:XMLSocket"><apiName>XMLSocket</apiName><shortdesc>
    新しい XMLSocket オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>host</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>FQDN（完全修飾ドメイン名）、つまり <i>111.222.333.444</i> という形式の IP アドレスです。Flash Player 9.0.115.0 および AIR 1.0 以降では、rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f] などの IPv6 アドレスを指定できます。<codeph>null</codeph> を指定して、SWF ファイルが存在するホストサーバーに接続することもできます。呼び出し元の SWF ファイルが Web ブラウザー内で実行されている場合は、<codeph>host</codeph> が SWF ファイルと同じドメイン内に存在する必要があります。
    
    </apiDesc></apiParam><apiParam><apiItemName>port</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>接続の確立に使用するターゲットホスト上の TCP ポート番号です。Flash Player 9.0.124.0 以降のバージョンでは、ターゲットホストは、SWF ファイルを提供するホストから指定のポートへのソケット接続を許可するように指定した、ソケットポリシーファイルを提供する必要があります。以前のバージョンの Flash Player では、1024 番未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときのみ、ソケットポリシーファイルが必要です。
    
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    新しい XMLSocket オブジェクトを作成します。 パラメーターを指定しないと、初期状態では未接続のソケットが作成されます。パラメーターを指定すると、指定したホストおよびポートへの接続が試行されます。
    
    <p><b>注意：</b><b>パラメーターを指定せずに</b>コンストラクターフォームを使用し、さらにいずれかのイベントリスナーを追加し、<codeph>connect</codeph> メソッドを呼び出すことを強く推奨します（<codeph>ホスト</codeph>および<codeph>ポート</codeph>をパラメーターに指定する）。このシーケンスによって、すべてのイベントリスナーが正しく動作するようになります。</p>
    
    </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket/connect()"><linktext>connect()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:XMLSocket:close"><apiName>close</apiName><shortdesc>
     XMLSocket オブジェクトで指定された接続を閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>xmlsocket.close, close
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     XMLSocket オブジェクトで指定された接続を閉じます。<codeph>close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph>close()</codeph> メソッドを呼び出しても送出されません。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#XMLSocket/connect()"><linktext>connect()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:XMLSocket:connect"><apiName>connect</apiName><shortdesc>
     指定された TCP ポートを使用して指定されたインターネットホストへの接続を確立します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>xmlsocket.connect, connect
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>信頼されていないローカルファイルはインターネットへの接続を許可されません。このファイルを local-with-networking または trusted として分類し直すことで、この制限を回避します。
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>65535 より大きいソケットポートを指定することはできません。
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>host</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>FQDN（完全修飾ドメイン名）、つまり <i>111.222.333.444</i> という形式の IP アドレスです。<codeph>null</codeph> を指定して、SWF ファイルが存在するホストサーバーに接続することもできます。呼び出し元ファイルが Web ブラウザー内で実行されている SWF ファイルである場合は、<codeph>host</codeph> がこのファイルと同じドメイン内に存在する必要があります。
     
     </apiDesc></apiParam><apiParam><apiItemName>port</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>接続の確立に使用するターゲットホスト上の TCP ポート番号です。Flash Player 9.0.124.0 以降のバージョンでは、ターゲットホストは、SWF ファイルを提供するホストから指定のポートへのソケット接続を許可するように指定した、ソケットポリシーファイルを提供する必要があります。以前のバージョンの Flash Player では、1024 番未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときのみ、ソケットポリシーファイルが必要です。
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定された TCP ポートを使用して指定されたインターネットホストへの接続を確立します。
     
     <p><codeph>null</codeph> を <codeph>host</codeph> パラメーターに対して指定した場合は、<codeph>XMLSocket.connect()</codeph> を呼び出すファイルが存在するホストに接続します。例えば、www.adobe.com から呼び出し元ファイルをダウンロードした場合は、host パラメーターに <codeph>null</codeph> を指定することは、www.adobe.com に接続することを意味します。</p>
     
     
     <p platform="actionscript">ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。</p>
     
     <p>詳しくは、次のトピックを参照してください。</p>
	 
     <ul>
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/CONNECT"><linktext>flash.events.Event.CONNECT</linktext></link></related-links><adobeApiEvent id="flash.net:XMLSocket:connect_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>接続操作で、呼び出し側のセキュリティサンドボックスの外部のホスト、またはソケットポリシーファイルが必要なポートに接続しようとしました。ターゲットホスト上でソケットポリシーファイルを使用することで、両方の問題を回避します。
     </apiDesc></adobeApiEventDetail><shortdesc>接続操作で、呼び出し側のセキュリティサンドボックスの外部のホスト、またはソケットポリシーファイルが必要なポートに接続しようとしました。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket:connect_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>未処理のデータを受信したときに送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc>未処理のデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:XMLSocket:connect_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ネットワーク接続が確立されたときに送出されます。 
     </apiDesc></adobeApiEventDetail><shortdesc>ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:XMLSocket:send"><apiName>send</apiName><shortdesc>
     object パラメーターで指定された XML オブジェクトまたはデータをストリングに変換し、その後ろにゼロ（0）バイトを付加してサーバーに転送します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>xmlsocket.send, send
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>XMLSocket オブジェクトはサーバーに接続されません。
     
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value=""/><apiDesc>サーバーに転送する XML オブジェクトまたは他のデータです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>object</codeph> パラメーターで指定された XML オブジェクトまたはデータをストリングに変換し、その後ろにゼロ（0）バイトを付加してサーバーに転送します。<codeph>object</codeph> が XML オブジェクトである場合、ストリングは XML オブジェクトの XML テキスト表現です。送信操作は非同期です。つまり、転送処理はただちに終了しますが、データが転送されるのは、その後です。<codeph>XMLSocket.send()</codeph> メソッドは、データが正常に転送されたかどうかを示す値を返しません。
     
     <p><codeph>XMLSocket.connect()</codeph> を使用して、XMLSocket オブジェクトをサーバーに接続していない場合、<codeph>XMLSocket.send()</codeph> 操作は失敗します。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#XMLSocket/connect()"><linktext>connect()</linktext></link></related-links></apiOperation><apiValue id="flash.net:XMLSocket:connected:get"><apiName>connected</apiName><shortdesc>
     この XMLSocket オブジェクトが現在、接続されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     この XMLSocket オブジェクトが現在、接続されているかどうかを示します。<codeph>connect</codeph> イベントと <codeph>ioError</codeph> イベントに対して登録を行い、接続が成功したかどうかを調べることもできます。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:connect"><linktext>connect</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>ioError</linktext></link></related-links></apiValue><apiValue id="flash.net:XMLSocket:timeout:set"><apiName>timeout</apiName><shortdesc>
     接続までの待ち時間（ミリ秒数）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
     接続までの待ち時間（ミリ秒数）を示します。
     
     <p>指定した時間内に接続できなかったときは、接続が失敗することになります。デフォルト値は 20,000（20 秒）です。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:ObjectEncoding"><apiName>ObjectEncoding</apiName><shortdesc>
 ObjectEncoding クラスを使用すると、オブジェクトを直列化するクラス（FileStream、NetStream、NetConnection、SharedObject、ByteArray など）で直列化の設定を定義する際に、以前のバージョンの ActionScript を使用できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>ObjectEncoding, ObjectEncoding object, built-in class, AMF, Action Message Format
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ObjectEncoding クラスを使用すると、オブジェクトを直列化するクラス（FileStream、NetStream、NetConnection、SharedObject、ByteArray など）で直列化の設定を定義する際に、以前のバージョンの ActionScript を使用できます。 
 
 <p>オブジェクトエンコーディングは、AMF（Action Message Format）によるオブジェクトの表現方法を制御します。Flash Player は AMF を使用することで、アプリケーションとリモートサーバーとの間で効率的に通信を行えるようにします。AMF では、リモートプロシージャコールはコンパクトなバイナリ表現にエンコードされます。このバイナリ表現は、HTTP/HTTPS プロトコルまたは、Flash Media Server が使用する RTMP/RTMPS プロトコルで転送可能です。オブジェクトとデータ値は、このバイナリ形式内に直列化されます。これは通常、XML などの他の表現よりもコンパクトです。</p>
 
 <p>Adobe AIR および Flash Player 9 では、AMF3 および AMF0 の 2 つの異なる形式で直列化を実行できます。 AMF3 はデフォルトの直列化形式で、ActionScript 3.0 で使用されます。ActionScript 1.0 および 2.0 で使用される AMF0 と比べて様々な利点があります。 AMF3 では、ネットワーク経由でのデータの送信が AMF0 より効率化されています。 <ph platform="actionscript">AMF3 は、<codeph>int</codeph> オブジェクトと <codeph>uint</codeph> オブジェクトの整数としての送信と、ByteArray、XML、IExternalizable などの、ActionScript 3.0 でのみ使用できるデータ型をサポートしています。AMF3 は、ActionScript 3.0 で、Flex 2 などの AMF3 エンコードを使用するサーバーを使用している場合にのみ使用できます。</ph></p>
 
 <p>ByteArray、FileStream、NetConnection、NetStream、<ph platform="actionscript">SharedObject、</ph>Socket、URLStream の各クラスには、<codeph>objectEncoding</codeph> プロパティが含まれます。このプロパティには ObjectEncoding クラスから定数が割り当てられます。 <codeph>objectEncoding</codeph> プロパティの動作は、オブジェクトによって異なります。各クラスの <codeph>objectEncoding</codeph> プロパティの説明に、この動作についての詳細な説明があります。</p>
 
 
 </apiDesc></apiClassifierDetail><apiValue id="flash.net:ObjectEncoding:AMF0"><apiName>AMF0</apiName><shortdesc>
	 オブジェクトが ActionScript 1.0 および 2.0 の Action Message Format 形式を使用して直列化されることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 オブジェクトが ActionScript 1.0 および 2.0 の Action Message Format 形式を使用して直列化されることを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:AMF3"><apiName>AMF3</apiName><shortdesc>
	 オブジェクトが ActionScript 3.0 の Action Message Format 形式を使用して直列化されることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 オブジェクトが ActionScript 3.0 の Action Message Format 形式を使用して直列化されることを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	 現在のランタイムにデフォルト（最新）の形式を指定します（Flash&amp;#xAE; Player または Adobe&amp;#xAE; AIR&amp;#xAE;）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 現在のランタイムにデフォルト（最新）の形式を指定します（Flash<sup>®</sup> Player または Adobe<sup>®</sup> AIR<sup>®</sup>）。オブジェクトエンコーディング制御は Flash Player 9 以降および Adobe AIR でのみ使用できるので、使用される最も古い形式は ActionScript 3.0 対応の Action Message Format 形式ということになります。
	 
	 <p>例えば、オブジェクトの <codeph>objectEncoding</codeph> プロパティが <codeph>ObjectEncoding.DEFAULT</codeph> に設定されている場合は、AMF3 エンコーディングが使用されます。将来、Flash Player または Adobe AIR の後のバージョンで新しい AMF バージョンが導入され、コンテンツを再パブリッシュすると、アプリケーションはその新しい AMF バージョンを使用します。この定数は、以前のバージョンの Flash Player との相互運用性について特に注意する必要がない場合に限り使用できます。</p>
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:ObjectEncoding:dynamicPropertyWriter:get"><apiName>dynamicPropertyWriter</apiName><shortdesc>
	 動的オブジェクトの動的プロパティの直列化をさらに細かく制御できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net:IDynamicPropertyWriter</apiValueClassifier></apiValueDef><apiDesc>
	 動的オブジェクトの動的プロパティの直列化をさらに細かく制御できます。このプロパティがデフォルト値の <codeph>null</codeph> に設定されている場合、動的プロパティはネイティブコードを使用して直列化されます。これにより、値が関数である動的プロパティを除くすべての動的プロパティが書き込まれます。
     <p>この値は、ダイナミックオブジェクト（ダイナミッククラス内で宣言したオブジェクト）のプロパティに対して、または <codeph>new</codeph> 演算子を使用して宣言したオブジェクトに対してのみ、呼び出されます。</p>
	 
	 <p platform="actionscript">このプロパティを使用して、動的オブジェクトのプロパティの直列化からの除外、動的オブジェクトのプロパティへの値の書き込み、または新しいプロパティの作成を実行できます。これらの操作を実行するには、IDynamicPropertyWriter インターフェイスを実装するオブジェクトにこのプロパティを設定します。詳細については、IDynamicPropertyWriter インターフェイスを参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#IDynamicPropertyWriter"><linktext>IDynamicPropertyWriter</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:Socket"><apiName>Socket</apiName><shortdesc>
 Socket クラスを使用すると、コードでソケット接続を確立して生のバイナリデータを読み書きできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 Socket クラスを使用すると、コードでソケット接続を確立して生のバイナリデータを読み書きできます。これは XMLSocket に似ていますが、送受信するデータの形式に制約がありません。
 
 <p>Socket クラスは、バイナリプロトコルを使用するサーバーとの通信に役立ちます。</p>
 
 <p>Socket クラスのメソッドを使用するには、まず <codeph>new Socket</codeph> コンストラクターを使用して Socket オブジェクトを作成する必要があります。</p>
 
 <p>ローカルファイルシステムのサンドボックス内の SWF ファイルはソケットを使用できません。</p>
      
  <p> ターゲットホスト上のソケットポリシーファイルで、SWF ファイルがソケット接続できるホストと、その接続ができるポートを指定します。<i/>Flash Player の最近のリリースでは、ソケットポリシーファイルに関するセキュリティ要件が以前より厳密になっています。Flash Player のすべてのバージョンで、ソケットポリシーファイルを使用することをお勧めします。環境によっては、ソケットポリシーファイルの使用が必須となっています。このため、XMLSocket オブジェクトを使用している場合は、必要に応じてターゲットホストがソケットポリシーファイルを提供するようにしてください。 </p>
 
  <p>次の一覧は、Flash Player の各バージョンにおけるソケットポリシーファイルの要件をまとめたものです。</p>
 
  <ul>
  
   <li> Flash Player 9.0.124.0 以降のバージョンでは、Socket 接続にソケットポリシーファイルが必要です。つまり、接続しているポートには関係なく、ターゲットホスト上にソケットポリシーファイルが必要ということです。また、SWF ファイルを提供している同じホスト上のポートに接続している場合でも同様です。 </li>
 
   <li> Flash Player 9.0.115.0 以前のバージョンでは、1024 未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときは、ターゲットホスト上にソケットポリシーファイルが必要です。 </li>
 
  <li> Flash Player 9.0.115.0 では、ソケットポリシーファイルが不要な場合でも、ターゲットホストがソケットポリシーファイルを提供していないときに Flash Debug Player を使うと警告が表示されます。 </li>
 
  </ul>
 
 <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
  
 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
 
 <ul>
 
 <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
 </ul>
 
 </apiDesc><example conref="examples\SocketExample.as"> 次の例では、ソケットに対して読み取りおよび書き込みを行い、socket イベント中に転送される情報を出力します。この例のハイライトは、次のとおりです。
 <ol>
    <li>コンストラクターが <codeph>CustomSocket</codeph> インスタンスの <codeph>socket</codeph> を作成し、ホスト名 <codeph>localhost</codeph> とポート 80 をパラメーターとして渡します。<codeph>CustomSocket</codeph> は Socket を継承するので、<codeph>super()</codeph> を呼び出すと Socket のコンストラクターが呼び出されます。</li>
    <li>次に <codeph>configureListeners()</codeph> メソッドが呼び出され、このメソッドにより Socket イベントのリスナーが追加されます。</li>
      <li>最後に、ソケット <codeph>connect()</codeph> メソッドがホスト名 <codeph>localhost</codeph>、ポート番号 80 で呼び出されます。</li>
 </ol>
 
 <p> <b>メモ：</b>この例を実行するには、SWF が存在するドメインと同じドメインで実行され、ポート 80 でリッスンするサーバー（この例では <codeph>localhost</codeph>）が必要です。</p>
<codeblock>

package {
    import flash.display.Sprite;

    public class SocketExample extends Sprite {

        public function SocketExample() {
            var socket:CustomSocket = new CustomSocket("localhost", 80);
        }
    }
}

import flash.errors.*;
import flash.events.*;
import flash.net.Socket;

class CustomSocket extends Socket {
    private var response:String;

    public function CustomSocket(host:String = null, port:uint = 0) {
        super();
        configureListeners();
        if (host &amp;&amp; port)  {
            super.connect(host, port);
        }
    }

    private function configureListeners():void {
        addEventListener(Event.CLOSE, closeHandler);
        addEventListener(Event.CONNECT, connectHandler);
        addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);
    }

    private function writeln(str:String):void {
        str += "\n";
        try {
            writeUTFBytes(str);
        }
        catch(e:IOError) {
            trace(e);
        }
    }

    private function sendRequest():void {
        trace("sendRequest");
        response = "";
        writeln("GET /");
        flush();
    }

    private function readResponse():void {
        var str:String = readUTFBytes(bytesAvailable);
        response += str;
    }

    private function closeHandler(event:Event):void {
        trace("closeHandler: " + event);
        trace(response.toString());
    }

    private function connectHandler(event:Event):void {
        trace("connectHandler: " + event);
        sendRequest();
    }

    private function ioErrorHandler(event:IOErrorEvent):void {
        trace("ioErrorHandler: " + event);
    }

    private function securityErrorHandler(event:SecurityErrorEvent):void {
        trace("securityErrorHandler: " + event);
    }

    private function socketDataHandler(event:ProgressEvent):void {
        trace("socketDataHandler: " + event);
        readResponse();
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.net:Socket_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 Socket.connect() の呼び出しによって、呼び出し元のセキュリティサンドボックスの外にあるサーバーや 1024 未満のポート番号に対して接続しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>BRS check this info
 </internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>Socket.connect()</codeph> の呼び出しによって、呼び出し元のセキュリティサンドボックスの外にあるサーバーや 1024 未満のポート番号に対して接続しようとしたときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/connect()"><linktext>Socket.connect()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.ProgressEvent.SOCKET_DATA_socketData"><apiName>socketData</apiName><shortdesc>
 ソケットがデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ソケットがデータを受信したときに送出されます。<codeph>socketData</codeph> タイプのイベントでは、<codeph>ProgressEvent.bytesTotal</codeph> プロパティは使用されません。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 入出力エラーが発生して送信またはロード操作が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 入出力エラーが発生して送信またはロード操作が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.Event.CONNECT_connect"><apiName>connect</apiName><shortdesc>
 ネットワーク接続が確立されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CONNECT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ネットワーク接続が確立されたときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:Socket_flash.events.Event.CLOSE_close"><apiName>close</apiName><shortdesc>
 サーバーによりソケット接続が閉じられたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 サーバーによりソケット接続が閉じられたときに送出されます。<codeph>close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph>Socket.close()</codeph> メソッドを呼び出しても送出されません。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:Socket:Socket"><apiName>Socket</apiName><shortdesc>
    Socket オブジェクトを新規作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>BRS determine if all above events are accurate, and which ones also apply
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>このエラーは SWF コンテンツで<ph platform="javascript"/><ph platform="actionscript">次の理由により発生します。</ph>
	 
     <ul platform="actionscript">
       <li>Local-with-filesystem ファイルはインターネットと通信できません。この問題は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。 この制限は、アプリケーションセキュリティサンドボックス内の AIR アプリケーションコンテンツには適用されません。</li>
	 
      <li>65535 より大きいソケットポートを指定することはできません。</li>
    </ul>
	 
    </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiParam><apiItemName>host</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>FQDN（完全修飾ドメイン名）、つまり <i>111.222.333.444</i> という形式の IP アドレスです。Flash Player 9.0.115.0 および AIR 1.0 以降では、rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f] などの IPv6 アドレスを指定できます。<codeph>null</codeph> を指定して、SWF ファイルが存在するホストサーバーに接続することもできます。呼び出し元の SWF ファイルが Web ブラウザー内で実行されている場合は、<codeph>host</codeph> が SWF ファイルと同じドメイン内に存在する必要があります。
    
    </apiDesc></apiParam><apiParam><apiItemName>port</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>接続の確立に使用するターゲットホスト上の TCP ポート番号です。Flash Player 9.0.124.0 以降のバージョンでは、ターゲットホストは、SWF ファイルを提供するホストから指定のポートへのソケット接続を許可するように指定した、ソケットポリシーファイルを提供する必要があります。以前のバージョンの Flash Player では、1024 番未満のポートに接続するか、SWF ファイルを提供しているホスト以外のホストに接続するときのみ、ソケットポリシーファイルが必要です。
    
    
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Socket オブジェクトを新規作成します。パラメーターを指定しないと、初期状態では未接続のソケットが作成されます。パラメーターを指定すると、指定したホストおよびポートへの接続が試行されます。
    
    <p><b>注意：</b><b>パラメーターを指定せずに</b>コンストラクターフォームを使用し、さらにいずれかのイベントリスナーを追加し、<codeph>connect</codeph> メソッドを呼び出すことを強く推奨します（<codeph>ホスト</codeph>および<codeph>ポート</codeph>をパラメーターに指定する）。このシーケンスによって、すべてのイベントリスナーが正しく動作するようになります。</p>
    
    </apiDesc></apiConstructorDetail><adobeApiEvent id="flash.net:Socket:Socket_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ネットワーク接続が確立されたときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:Socket_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>入出力エラーが発生して接続が失敗すると送信されます。
	 </apiDesc></adobeApiEventDetail><shortdesc>入出力エラーが発生して接続が失敗すると送信されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:Socket_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc><ph platform="javascript">このエラーは SWF コンテンツで発生します。</ph><ph platform="actionscript"><codeph>Socket.connect()</codeph> の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。ソケットポリシーファイルの詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「Flash Player セキュリティ」の章を参照してください。</ph>
	 
    </apiDesc></adobeApiEventDetail><shortdesc>このエラーは SWF コンテンツで発生します。Socket.connect() の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。</shortdesc></adobeApiEvent></apiConstructor><apiOperation id="flash.net:Socket:close"><apiName>close</apiName><shortdesc>
     ソケットを閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットを閉じることができないか、またはソケットが開いていません。.
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ソケットを閉じます。<codeph>close()</codeph> メソッドが呼び出された後は、データの読み書きはできません。
     
     <p><codeph>close</codeph> イベントは、サーバーにより接続が閉じられたときのみ送出されます。<codeph>close()</codeph> メソッドを呼び出しても送出されません。</p>
     
     <p>Socket オブジェクトで <codeph>connect()</codeph> メソッドをもう一度呼び出すことで、その Socket オブジェクトを再使用できます。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:connect"><apiName>connect</apiName><shortdesc>
     指定されたホストおよびポートにソケットを接続します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>BRS compare this entire description with XMLSocket.connect() and make consistent
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ホストが指定されていないので、接続に失敗しました。
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは SWF コンテンツで<ph platform="javascript"/><ph platform="actionscript">次の理由により発生します。</ph>
	 
          <ul platform="actionscript">
              <li>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この制限は、このファイルを local-with-networking または trusted として分類し直すことで回避できます。</li>
               <li>65535 より大きいソケットポートを指定することはできません。</li>
           <li>SWF コンテンツがある HTML ページでは、<codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）は <codeph>"none"</codeph> に設定します。</li>
	 
          </ul>
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>host</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>接続するホストのホスト名または IP アドレスです。ホストを指定しないと、接続するホストは、呼び出す ファイルが存在するホストになります。ホストを指定しない場合は、イベントリスナーを使用して接続が成功したかどうかを判定します。
     </apiDesc></apiParam><apiParam><apiItemName>port</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>接続先のポート番号です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定されたホストおよびポートにソケットを接続します。直後に接続が失敗した場合、イベントが送出されるか例外がスローされます。ホストが指定されている場合はエラーイベントが送出され、ホストが指定されていない場合は例外がスローされます。接続が成功した場合は、接続のステータスがイベントにより報告されます。ソケットが既に接続済みの場合、最初に既存の接続が閉じられます。
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:Socket:connect_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ネットワーク接続が確立されたときに送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc>ネットワーク接続が確立されたときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:connect_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ホストが指定されていて、入出力エラーが発生して接続が失敗した場合に送出されます。
     </apiDesc></adobeApiEventDetail><shortdesc>ホストが指定されていて、入出力エラーが発生して接続が失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:Socket:connect_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc><codeph>Socket.connect()</codeph> の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「Flash Player セキュリティ」の章を参照してください。
     </apiDesc></adobeApiEventDetail><shortdesc>Socket.connect() の呼び出しによって、ソケットポリシーファイルを提供しないサーバーや、特定のポートに対して呼び出し元のホストアクセスを許可しないポリシーファイルを持つサーバーに接続しようとしたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:Socket:flush"><apiName>flush</apiName><shortdesc>
     ソケットの出力バッファーに蓄積されたデータをフラッシュします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。       
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ソケットの出力バッファーに蓄積されたデータをフラッシュします。<codeph>write</codeph> メソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readBoolean"><apiName>readBoolean</apiName><shortdesc>
     ソケットからブール値を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>読み取られたバイトがゼロ以外の場合に値は <codeph>true</codeph> になり、それ以外の場合は <codeph>false</codeph> になります。
     
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットからブール値を読み取ります。1 バイトを読み取った後、メソッドはバイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> を返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readByte"><apiName>readByte</apiName><shortdesc>
     ソケットから符号付きバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>値は -128 ～ 127 です。
     
     </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから符号付きバイトを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readBytes"><apiName>readBytes</apiName><shortdesc>
     ソケットから、length パラメーターで指定したデータバイト数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データの読み込み先の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>データの読み取りを開始するバイト配列のオフセットです。
     </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>読み取るバイト数です。デフォルト値の 0 に設定すると、すべてのデータが読み取られます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットから、<codeph>length</codeph> パラメーターで指定したデータバイト数を読み取ります。このバイトは、指定したバイト配列の、<codeph>offset</codeph> で指定された位置以降に読み込まれます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readDouble"><apiName>readDouble</apiName><shortdesc>
     ソケットから IEEE 754 倍精度浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>IEEE 754 倍精度浮動小数点数です。
     
     </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから IEEE 754 倍精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readFloat"><apiName>readFloat</apiName><shortdesc>
     ソケットから IEEE 754 単精度浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>IEEE 754 単精度浮動小数点数です。
     </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから IEEE 754 単精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readInt"><apiName>readInt</apiName><shortdesc>
     ソケットから符号付き 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>値は -2147483648 ～ 2147483647 です。
     
     </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから符号付き 32 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readMultiByte"><apiName>readMultiByte</apiName><shortdesc>
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Socket, Socket.readMultiByte, readMultiByte
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 エンコードされたストリングです。
     
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>バイトストリームから読み取るバイト数です。
     </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift_jis"</codeph>、<codeph>"CN-GB"</codeph>、および <codeph>"iso-8859-1"</codeph> があります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。
     
     <p><b>注意：</b><codeph>charSet</codeph> パラメーターの値が現在のシステムによって認識されない場合、アプリケーションはシステムのデフォルトコードページを文字セットとして使用します。例えば、<codeph>charSet</codeph> パラメーターの指定で <codeph>myTest.readMultiByte(22, "iso-8859-01")</codeph> のように <codeph>01</codeph> を <codeph>1</codeph> の代わりに使用した場合、その文字セットパラメーターは開発マシンでは認識されるかもしれませんが、別のマシンでは認識されない可能性があります。もう一方のマシンでは、アプリケーションがシステムのデフォルトコードページを使用することになります。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readObject"><apiName>readObject</apiName><shortdesc>
     ソケットから AMF 直列化形式でエンコードされたオブジェクトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>非直列化されたオブジェクトです。
     
     </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
     ソケットから AMF 直列化形式でエンコードされたオブジェクトを読み取ります。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:readShort"><apiName>readShort</apiName><shortdesc>
     ソケットから符号付き 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>値は -32768 ～ 32767 です。
     
     </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから符号付き 16 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUTF"><apiName>readUTF</apiName><shortdesc>
     ソケットから UTF-8 ストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 ストリング。
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから UTF-8 ストリングを読み取ります。このストリングには、バイト単位の長さを示す符号なし short 型整数が前に付いているものと見なされます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUTFBytes"><apiName>readUTFBytes</apiName><shortdesc>
     ソケットから length パラメーターで指定した UTF-8 バイト数を読み取り、ストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 ストリング。
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>読み取るバイト数です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットから <codeph>length</codeph> パラメーターで指定した UTF-8 バイト数を読み取り、ストリングを返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedByte"><apiName>readUnsignedByte</apiName><shortdesc>
     ソケットから符号なしバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>値は 0 ～ 255 です。
     
     </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから符号なしバイトを読み取ります。  
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedInt"><apiName>readUnsignedInt</apiName><shortdesc>
     ソケットから符号なし 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>値は 0 ～ 4294967295 です。
     
     </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから符号なし 32 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:readUnsignedShort"><apiName>readUnsignedShort</apiName><shortdesc>
     ソケットから符号なし 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>値は 0 ～ 65535 です。
     
     </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ソケットから符号なし 16 ビット整数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:Socket:writeBoolean"><apiName>writeBoolean</apiName><shortdesc>
     ソケットにブール値を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>ソケットに書き込まれる値は、1（<codeph>true</codeph> の場合）または 0（<codeph>false</codeph> の場合）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットにブール値を書き込みます。このメソッドは 1 バイトを書き込みます。1（<codeph>true</codeph> の場合）または 0（<codeph>false</codeph> の場合）のいずれかの値が使用されます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeByte"><apiName>writeByte</apiName><shortdesc>
     ソケットに 1 バイトを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>ソケットに書き込む値です。値の下位 8 ビットが使用されます。上位 24 ビットは無視されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに 1 バイトを書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeBytes"><apiName>writeBytes</apiName><shortdesc>
     指定したバイト配列のバイトのシーケンスを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データの書き込み元の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>データの書き込みを開始する、<codeph>bytes</codeph> ByteArray オブジェクトへのゼロから始まるオフセットです。
     </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>書き込むバイト数です。デフォルト値の 0 に設定すると、<codeph>offset</codeph> パラメーターで指定した値以降にバッファー全体が書き込まれます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定したバイト配列のバイトのシーケンスを書き込みます。書き込み操作は、<codeph>offset</codeph> で指定された位置から開始されます。
     
     <p><codeph>length</codeph> パラメーターを省略するとデフォルトの長さ 0 が使用され、<codeph>offset</codeph> の位置からバッファー全体が書き込まれます。</p>
     
     <p><codeph>offset</codeph> パラメーターを省略した場合も、バッファー全体が書き込まれます。</p> 
      
     <p><codeph>offset</codeph> または <codeph>length</codeph> が範囲外の場合は、<codeph>bytes</codeph> 配列の始まりと終わりに合うように調整されます。</p>
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeDouble"><apiName>writeDouble</apiName><shortdesc>
     ソケットに IEEE 754 倍精度浮動小数点数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに IEEE 754 倍精度浮動小数点数を書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeFloat"><apiName>writeFloat</apiName><shortdesc>
     ソケットに IEEE 754 単精度浮動小数点数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに IEEE 754 単精度浮動小数点数を書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeInt"><apiName>writeInt</apiName><shortdesc>
     ソケットに 32 ビット符号付き整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに 32 ビット符号付き整数を書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeMultiByte"><apiName>writeMultiByte</apiName><shortdesc>
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Socket, Socket.writeMultiByte, writeMultiByte
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
     </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift_jis"</codeph>、<codeph>"CN-GB"</codeph>、および <codeph>"iso-8859-1"</codeph> があります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定した文字セットを使用して、バイトストリームからマルチバイトストリングを書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeObject"><apiName>writeObject</apiName><shortdesc>
     ソケットに AMF 直列化形式でオブジェクトを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value=""/><apiDesc>直列化されるオブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに AMF 直列化形式でオブジェクトを書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeShort"><apiName>writeShort</apiName><shortdesc>
     ソケットに 16 ビット整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに 16 ビット整数を書き込みます。次のようにバイトが書き込まれます。
     
     <pre><codeph>(v >> 8) &amp; 0xff v &amp; 0xff</codeph></pre>
     
     <p>パラメーターの下位 16 ビットが使用されます。上位 16 ビットは無視されます。</p>
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUTF"><apiName>writeUTF</apiName><shortdesc>
     指定された UTF-8 ストリングの長さ（バイト単位）を示す 16 ビット符号なし整数をソケットに書き込み、その後にストリング自体を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>長さが 65535 を超えています。
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ソケットに書き込むストリングです。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定された UTF-8 ストリングの長さ（バイト単位）を示す 16 ビット符号なし整数をソケットに書き込み、その後にストリング自体を書き込みます。
     
     <p>ストリングを書き込む前に、メソッドによってストリングのすべての文字を表すのに必要なバイト数が計算されます。</p>
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUTFBytes"><apiName>writeUTFBytes</apiName><shortdesc>
     ソケットに UTF-8 ストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ソケットに書き込むストリングです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに UTF-8 ストリングを書き込みます。 
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:Socket:writeUnsignedInt"><apiName>writeUnsignedInt</apiName><shortdesc>
     ソケットに 32 ビット符号なし整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ソケットで I/O エラーが発生したか、ソケットが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>ソケットに書き込む値です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ソケットに 32 ビット符号なし整数を書き込みます。
     
     <p><b>注意：</b>このメソッドで書き込まれるデータは、すぐには転送されません。<codeph>flush()</codeph> メソッドが呼び出されるまでキューに置かれます。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Socket/flush()"><linktext>flush()</linktext></link></related-links></apiOperation><apiValue id="flash.net:Socket:bytesAvailable:get"><apiName>bytesAvailable</apiName><shortdesc>
     入力バッファーで読み取ることができるデータのバイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     入力バッファーで読み取ることができるデータのバイト数です。
     
     <p>コードでは、<codeph>bytesAvailable</codeph> にアクセスして入力バッファーの空き容量を確認してから、<codeph>read</codeph> メソッドの 1 つを使用してデータを読み取る必要があります。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:Socket:connected:get"><apiName>connected</apiName><shortdesc>
     この Socket オブジェクトが現在、接続されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     この Socket オブジェクトが現在、接続されているかどうかを示します。このプロパティの呼び出しは、現在ソケットが接続されている場合に値 <codeph>true</codeph> を、それ以外の場合は <codeph>false</codeph> を返します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:Socket:endian:get"><apiName>endian</apiName><shortdesc>
     データのバイト順序を示します。指定できる値は flash.utils.Endian クラスの定数で、Endian.BIG_ENDIAN または Endian.LITTLE_ENDIAN です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>Endian.BIG_ENDIAN
     </apiDefaultValue></apiValueDef><apiDesc>
     データのバイト順序を示します。指定できる値は flash.utils.Endian クラスの定数で、<codeph>Endian.BIG_ENDIAN</codeph> または <codeph>Endian.LITTLE_ENDIAN</codeph> です。
     </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Endian"><linktext>flash.utils.Endian</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     オブジェクトの書き込みまたは読み取り時に使用される AMF のバージョンを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Property documented; needs review
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     オブジェクトの書き込みまたは読み取り時に使用される AMF のバージョンを制御します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link><link href="flash.net.xml#Socket/readObject()"><linktext>readObject()</linktext></link><link href="flash.net.xml#Socket/writeObject()"><linktext>writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.net:Socket:timeout:set"><apiName>timeout</apiName><shortdesc>
     接続までの待ち時間（ミリ秒数）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     接続までの待ち時間（ミリ秒数）を示します。
     
     <p>指定した時間内に接続できなかったときは、接続が失敗することになります。デフォルト値は 20,000 (20 秒) です。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:URLLoader"><apiName>URLLoader</apiName><shortdesc>
 URLLoader クラスは、指定した URL からテキスト、バイナリデータ、または URL エンコード形式の変数をダウンロードする際に使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 URLLoader クラスは、指定した URL からテキスト、バイナリデータ、または URL エンコード形式の変数をダウンロードする際に使用します。動的なデータ駆動アプリケーションで使用するテキストファイル、XML、その他の情報をダウンロードする場合に便利です。
 
 <p>URLLoader オブジェクトは、アプリケーションのコードでデータを使用できるように、事前にすべてのデータを URL からダウンロードします。 URLLoader オブジェクトは、ダウンロードの進捗に関する通知を送信します。この通知は、送出済みのイベントと、<codeph>bytesLoaded</codeph> プロパティおよび <codeph>bytesTotal</codeph> プロパティで監視できます。</p>
 
 <p>FLV のように非常に大きなビデオファイルをロードする場合、メモリ不足のエラーが起こることがあります。
 </p>
 
 
 
 <p><ph platform="actionscript">Flash Player、および</ph>アプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内の AIR アプリケーションコンテンツでこのクラスを使用するときは、次のセキュリティモデルを考慮してください。</p>
 
 <ul>
 <li>ローカルファイルシステムのサンドボックスの SWF ファイルは、ネットワーク上のサンドボックス内のリソースからデータを読み込んだり、リソースにデータを書き込んだりしないことがあります。 </li>
 
 <li> デフォルトで、呼び出し元の SWF ファイルおよびロードする URL は同じドメインに置かれている必要があります。例えば、www.adobe.com に置かれている SWF ファイルは www.adobe.com に置かれているソースからのみデータをロードできます。 異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</li>
 </ul>
  
 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
 
 <ul>
 
 <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
   <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
 
 </ul>
 
 
 </apiDesc><example conref="examples\URLLoaderExample.as"> 次の例では、ローカルテキストファイルで検出されたデータを読み込んで表示します。また、イベント処理情報も出力します。
 
 <p><b>注意：</b>この例を実行するには、urlLoaderExample.txt ファイルを SWF ファイルと同じディレクトリに配置します。このファイルには、次のテキスト行のみが含まれています。<codeph>answer=42&amp;question=unknown</codeph>
 </p>
 <p>コード例では、次の処理が実行されます。</p>
 <ol>
    <li>コンストラクター関数が <codeph>loader</codeph> という URLLoader インスタンスと、ロードされるファイルの場所と名前を含む <codeph>request</codeph> という URLRequest インスタンスを作成します。</li>
    <li><codeph>loader</codeph> オブジェクトが <codeph>configureListeners()</codeph> メソッドに渡されます。このメソッドは、サポートされる各 URLLoader イベントのリスナーを追加します。</li>
    <li>次に <codeph>request</codeph> オブジェクトが、テキストファイルをロードする <codeph>loader.load()</codeph> に渡されます。</li>
      <li>URLLoader によるテキストファイルのロードが終了すると、<codeph>Event.COMPLETE event</codeph> イベントが発生し、<codeph>completeHandler()</codeph> メソッドがトリガーされます。<codeph>completeHandler()</codeph> メソッドはファイルからロードされたテキストから URLVariables オブジェクトを作成します。URLVariables オブジェクトは、URL エンコードされた名前と値のペアを ActionScript プロパティに変換し、読み込まれたデータを操作しやすくします。</li>
 </ol>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLLoaderExample extends Sprite {
        public function URLLoaderExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("urlLoaderExample.txt");
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
    
            var vars:URLVariables = new URLVariables(loader.data);
            trace("The answer is " + vars.answer);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLRequest"><linktext>URLRequest</linktext></link><link href="flash.net.xml#URLVariables"><linktext>URLVariables</linktext></link><link href="flash.net.xml#URLStream"><linktext>URLStream</linktext></link></related-links><adobeApiEvent id="flash.net:URLLoader_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><shortdesc>
 load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。  
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
 URLLoader.load() が HTTP 経由でデータにアクセスしようとすると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLLoader.load()</codeph> が HTTP 経由でデータにアクセスしようとすると送出されます。 <ph platform="actionscript">Flash Player で実行されているコンテンツでは、このイベントは、現在の Flash Player 環境が要求のステータスコードを検出して返すことができる場合にのみ送出されます （一部のブラウザー環境ではこの情報を提供できません）。</ph><codeph>httpStatus</codeph> イベントが送出される場合、このイベントは、<codeph>complete</codeph> イベントまたは <codeph>error</codeph> イベントの前に、これらのイベントとは別に送信されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 URLLoader.load() の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータを読み込もうとすると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLLoader.load()</codeph> の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータをロードしようとすると送出されます。また、<codeph>URLLoader.load()</codeph> の呼び出しによって SWZ ファイルをロードしようとした場合に、証明書が無効であるか、ダイジェストのストリングがコンポーネントと一致しないときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 URLLoader.load() の呼び出し時に致命的なエラーが発生してダウンロードが終了した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLLoader.load()</codeph> の呼び出しによってダウンロードが終了するという致命的なエラーが発生する場合に送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
 ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ダウンロード処理を実行中にデータを受信したときに送出されます。
 
 <p>URLLoader オブジェクトでは、完全にデータが受信されるまではデータにアクセスできません。このため、progress イベントの通知でしかダウンロードの進行状況を確認できません。完全にダウンロードされる前にデータにアクセスするには、URLStream オブジェクトを使用します。 </p>
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 受信したすべてのデータがデコードされ、URLLoader オブジェクトの data プロパティに配置された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 受信したすべてのデータがデコードされ、URLLoader オブジェクトの <codeph>data</codeph> プロパティに配置された後に送出されます。このイベントが送出されると、受信したデータにアクセスできます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader_flash.events.Event.OPEN_open"><apiName>open</apiName><shortdesc>
 URLLoader.load() メソッドの呼び出しによりダウンロード処理が開始されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLLoader.load()</codeph> メソッドの呼び出しによりダウンロード処理が開始されると送出されます。 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:URLLoader:URLLoader"><apiName>URLLoader</apiName><shortdesc>
	 URLLoader オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiData>null</apiData><apiDesc>ダウンロードする URL を指定する URLRequest オブジェクトです。このパラメーターを省略すると、ロード操作は開始されません。指定すると、直ちにロード操作が開始されます。詳細については、<codeph>load</codeph> を参照してください。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 URLLoader オブジェクトを作成します。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#URLLoader/load()"><linktext>URLLoader.load()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:URLLoader:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>イベントのタイプです。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>イベントを処理するリスナー関数です。この関数は、次の例のように、Event オブジェクトを唯一のパラメーターとして受け取り、何も返さないもの<ph platform="actionscript">である必要があります。</ph> <ph platform="javascript"/>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>関数の名前は任意に付けられます。</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">このパラメーターは、SWF コンテンツで使用される ActionScript 3.0 の表示リストアーキテクチャの表示オブジェクトに適用されます。</ph> <ph platform="actionscript">リスナーが、キャプチャ段階、またはターゲットおよびバブリング段階で動作するかどうかを判断します。 <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、リスナーはキャプチャ段階のみでイベントを処理し、ターゲット段階またはバブリング段階では処理しません。<codeph>useCapture</codeph> を <codeph>false</codeph> に設定すると、リスナーはターゲット段階またはバブリング段階のみでイベントを処理します。3 つの段階すべてでイベントを受け取るには、<codeph>addEventListener</codeph> を 2 回呼び出します。<codeph>useCapture</codeph> を <codeph>true</codeph> に設定して呼び出し、<codeph>useCapture</codeph> を <codeph>false</codeph> に設定してもう一度呼び出します。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>イベントリスナーの優先度レベルです。優先度は、符号付き 32 ビット整数で指定します。数値が大きくなるほど優先度が高くなります。優先度が <i>n</i> のすべてのリスナーは、優先度が <i>n</i>-1 のリスナーよりも前に処理されます。複数のリスナーに対して同じ優先度が設定されている場合、それらは追加された順番に処理されます。デフォルトの優先度は 0 です。
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>リスナーへの参照が強参照と弱参照のいずれであるかを判断します。デフォルトである強参照の場合は、リスナーのガベージコレクションが回避されます。弱参照では回避されません。 <p>クラスレベルメンバー関数はガベージコレクションの対象外であるため、クラスレベルメンバー関数の <codeph>useWeakReference</codeph> は、ガベージコレクションの制限とは無関係に <codeph>true</codeph> に設定できます。ネストされた内部の関数であるリスナーに対して <codeph>useWeakReference</codeph> を <codeph>true</codeph> に設定すると、その関数はガベージコレクションされ、永続的ではなくなります。inner 関数に対する参照を作成（別の変数に保存）した場合、その関数はガベージコレクションされず、永続化された状態のままになります。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	
	イベントリスナーオブジェクトを EventDispatcher オブジェクトに登録し、リスナーがイベントの通知を受け取るようにします。<ph platform="actionscript">イベントリスナーは、特定のタイプのイベント、段階、および優先度に関する表示リスト内のすべてのノードに登録できます。</ph>
	
	<p platform="javascript">AIR ランタイムの JavaScript コードは、このメソッドを使用して AIR API によって定義されたイベント用のイベントリスナーを登録します。他の JavaScript イベント、例えば、<codeph>onload</codeph> イベント（DOM <codeph>body</codeph> オブジェクトのイベント）などの場合、ブラウザー内で実行されるコンテンツに対して行うように標準イベント処理テクニックを使用できます。</p>
	
	<p>イベントリスナーが正常に登録された後に、<codeph>addEventListener()</codeph> をさらに呼び出して優先度を変更することはできません。リスナーの優先度を変更するには、最初に <codeph>removeListener()</codeph> を呼び出す必要があります。その後、同じリスナーを新しい優先度レベルで再度登録できます。 </p>
	
	<p>リスナーが登録された後に、<codeph>addEventListener()</codeph>（<codeph>type</codeph> または <codeph>useCapture</codeph> に別の値を設定）を再度呼び出すと、別のリスナー登録が作成されることに注意してください。<ph platform="actionscript">例えば、最初にリスナーを登録するときに <codeph>useCapture</codeph> を <codeph>true</codeph> に設定すると、そのリスナーはキャプチャ段階のみでリスニングします。同じリスナーオブジェクトを使用して再度 <codeph>addEventListener()</codeph> を呼び出すと（このとき、<codeph>useCapture</codeph> に <codeph>false</codeph> を設定）、異なる 2 つのリスナーが登録されます。1 つはキャプチャ段階でリスニングするリスナーで、もう 1 つはターゲット段階とバブリング段階でリスニングするリスナーです。</ph>
	</p>
	
	<p platform="actionscript">ターゲット段階またはバブリング段階のみを対象とするイベントリスナーを登録することはできません。登録時にこれらの段階が組み合わされるのは、バブリングはターゲットノードの祖先にしか適用されないためです。</p>
	
	<p>イベントリスナーが不要になった場合は、<codeph>removeEventListener()</codeph> を呼び出して、イベントリスナーを削除します。削除しない場合、メモリの問題が発生する可能性があります。ガベージコレクターは送出するオブジェクトがないとリスナーを削除しないので、イベントリスナーはメモリから自動的に削除されません（ただし、<codeph>useWeakReference</codeph> パラメーターが <codeph>true</codeph> に設定されている場合を除きます）。</p>
		
	<p>EventDispatcher インスタンスをコピーしても、それに関連付けられているイベントリスナーはコピーされません。新しく作成したノードにイベントリスナーが必要な場合は、ノードを作成した後に、リスナーを関連付ける必要があります。ただし、EventDispatcher インスタンスを移動した場合は、関連付けられているイベントリスナーも一緒に移動されます。</p>
	
	
	<p platform="actionscript">イベントがノードで処理されるときに、イベントリスナーがそのノードに登録中であれば、イベントリスナーは現在の段階ではトリガーされません。ただし、バブリング段階など、イベントフローの後の段階でトリガーすることができます。</p>
	
	<p platform="actionscript">イベントがノードで処理されているときにイベントリスナーがノードから削除された場合でも、イベントは現在のアクションによってトリガーされます。削除された後は、その後の処理で再び登録されない限り、イベントリスナーは二度と呼び出されません。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLLoader:close"><apiName>close</apiName><shortdesc>
	 進行中のロード操作は直ちに終了します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 進行中のロード操作は直ちに終了します。進行中のロード操作は直ちに終了します。URL が現在ストリーミングされていない場合、無効なストリームエラーがスローされます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLLoader:load"><apiName>load</apiName><shortdesc>
	 指定された URL からデータを送信およびロードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>URLRequest.requestHeader</codeph> オブジェクトには、禁止されている特定の HTTP リクエストヘッダーを含めることはできません。詳細については、URLRequestHeader クラスの説明を参照してください。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、次の理由で発生する可能性があります。1) <ph platform="actionscript">Flash Player または</ph> AIR では <codeph>URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。このエラーは、<codeph>load()</codeph> に渡された URLRequest オブジェクトが <codeph>GET</codeph> 操作を行うように設定されている場合、および <codeph>System.useCodePage</codeph> が <codeph>true</codeph> に設定されている場合に発生することがあります。2) <ph platform="actionscript">Flash Player または</ph> AIR では <codeph>POST</codeph> データにメモリを割り当てることができません。このエラーは、<codeph>load</codeph> に渡された URLRequest オブジェクトが <codeph>POST</codeph> 操作を行うように設定されている場合に発生することがあります。
	 
	 </apiDesc><apiItemName>MemoryError</apiItemName><apiOperationClassifier>flash.errors:MemoryError</apiOperationClassifier></apiException><apiException><apiDesc>信頼されていないローカルファイルはインターネットへの接続を許可されません。この問題は、このファイルを local-with-networking または trusted として分類し直すことで回避できます。
	 
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとした場合。ブロックされているポートの完全な一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
     
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>要求パラメーターの値、または渡された URLRequest オブジェクトの <codeph>URLRequest.url</codeph> プロパティの値は <codeph>null</codeph> です。
	 
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>ダウンロードする URL を指定する URLRequest オブジェクトです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された URL からデータを送信およびロードします。<codeph>dataFormat</codeph> プロパティに設定した値に基づき、テキスト、生のバイナリデータ、または URL エンコードされた変数としてデータを受け取ることができます。<codeph>dataFormat</codeph> プロパティのデフォルト値はテキストです。データを指定された URL に送信する場合は、URLRequest オブジェクトの <codeph>data</codeph> プロパティを設定できます。
	 
	 <p><b>注意：</b>読み込み中のファイルに ASCII 文字以外の文字（英語以外の多くの言語に存在する）が含まれている場合は、ASCII のような非 Unicode 形式ではなく UTF-8 または UTF-16 エンコーディング形式でファイルを保存することをお勧めします。</p>
	 
	 <p> ローカルファイルシステムのサンドボックスの SWF ファイルは、ネットワーク上のサンドボックス内のリソースからデータを読み込んだり、リソースにデータを書き込んだりしないことがあります。</p> 
	  
	 <p> デフォルトで、呼び出し元の SWF ファイルおよびロードする URL は同じドメインに置かれている必要があります。例えば、www.adobe.com に置かれている SWF ファイルは www.adobe.com に置かれているソースからのみデータをロードできます。 異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</p>
	 
      <p>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
     
     <p> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
	 <ul>
	 <li>POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li>
	 <li>POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li>
	 </ul>
     <p>また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
	 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
	 
     <ul>
     
     
	 <li>『<i>Developing AIR Applications</i>』の「Getting started with Adobe AIR」の「Understanding AIR Security」</li>
	 
	 <li><xref href="http://www.adobe.com/go/fp9_0_security_jp" scope="external">Flash Player 9 セキュリティに関するホワイトペーパー</xref></li>
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
	 
	 </apiDesc><example conref="examples\URLLoader_loadExample.as"> 次の例は、XML ファイルを読み込み、そのエレメントの最初の引数の内容をテキストフィールドに表示します。
 
 <p>XML ファイルの場所を示す <codeph>URLRequest</codeph> オブジェクトを作成します。この例では、XML ファイルは SWF ファイルと同じディレクトリにあります。発生する可能性のあるエラーをキャッチするために、<codeph>try...catch</codeph> ブロックにファイルをロードします。この例では、<codeph>SecurityError</codeph> エラーをキャッチします。<codeph>IO_ERROR</codeph> イベントが発生すると、<codeph>errorHandler()</codeph> メソッドを呼び出します。このメソッドは、<codeph>xmlTextField</codeph> テキストフィールドにエラーメッセージを書き込みます。XML ファイルのデータを受信して <codeph>loader</codeph> URLLoader オブジェクトのデータプロパティに格納した後、<codeph>Event.COMPLETE</codeph> イベントを送出し、<codeph>loaderCompleteHandler()</codeph> メソッドを呼び出します。</p>
 
 <p><codeph>loaderCompleteHandler()</codeph> メソッドで、<codeph>try...catch</codeph> ブロックを使用して、ロードしたデータをファイルから XML オブジェクトに変換する際に発生する解析エラーをキャッチします。次に、<codeph>readNodes()</codeph> メソッドで XML ドキュメントのノード内にあるすべてのエレメントを回帰的に読み取り、すべてのエレメントの先頭にある属性のリストを <codeph>xmlTextField</codeph> テキストフィールドに付加します。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.xml.*;
    import flash.events.IOErrorEvent;
  
    public class URLLoader_loadExample extends Sprite {
        private var xmlTextField:TextField = new TextField();
        private var externalXML:XML;    
        private var loader:URLLoader;

        public function URLLoader_loadExample() {
            var request:URLRequest = new URLRequest("xmlFile.xml");

            loader = new URLLoader();
            
            try {
                loader.load(request);
            }
            catch (error:SecurityError)
            {
                trace("A SecurityError has occurred.");
            }

             loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);

            xmlTextField.x = 10;
            xmlTextField.y = 10;
            xmlTextField.background = true;
            xmlTextField.autoSize = TextFieldAutoSize.LEFT;

            addChild(xmlTextField);
        }

        private function loaderCompleteHandler(event:Event):void {

                try {
                    externalXML = new XML(loader.data);
                    readNodes(externalXML);    
                } catch (e:TypeError) {
                    trace("Could not parse the XML file.");
                }
        }

        private function readNodes(node:XML):void {

                for each (var element:XML in node.elements()) {
                    xmlTextField.appendText(element.attributes()[0] + "\n");

                    readNodes(element);
                }    
        }

        private function errorHandler(e:IOErrorEvent):void {
            xmlTextField.text = "Had problem loading the XML File.";
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>URLRequestHeader</linktext></link><link href="flash.net.xml#URLRequest/requestHeaders"><linktext>URLRequest.requestHeaders</linktext></link><link href="flash.net.xml#URLRequest/data"><linktext>URLRequest.data</linktext></link><link href="flash.net.xml#URLRequest/digest"><linktext>URLRequest.digest</linktext></link></related-links><adobeApiEvent id="flash.net:URLLoader:load_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>データが正常にロードされた後に送出されます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>データが正常にロードされた後に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アクセスが HTTP 経由で、現在の Flash Player 環境がステータスコードの取得をサポートしている場合、<codeph>complete</codeph> または <codeph>error</codeph> イベントに加えて、これらのイベントを受け取る場合があります。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>アクセスが HTTP 経由で、現在の Flash Player 環境がステータスコードの取得をサポートしている場合、完了イベントやエラーイベントに加えて、これらのイベントを受け取る場合があります。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ロード操作を完了できませんでした。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>ロード操作を完了できませんでした。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ダウンロード処理を実行中にデータを受信したときに送出されます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。これはサーバー上のポリシーファイルを使用すると回避できます。
	 </apiDesc></adobeApiEventDetail><shortdesc>呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ロード操作で SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込もうとしましたが、証明書が無効であるか、ダイジェストがコンポーネントと一致しません。
	 </apiDesc></adobeApiEventDetail><shortdesc>ロード操作で SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込もうとしましたが、証明書が無効であるか、ダイジェストがコンポーネントと一致しません。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ロード操作が開始したときに送出されます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>ロード操作が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLLoader:load_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc><codeph>load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:URLLoader:bytesLoaded"><apiName>bytesLoaded</apiName><shortdesc>
	 ロード操作中に、既にロード済みのデータのバイト数を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ロード操作中に、既にロード済みのデータのバイト数を示します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoader:bytesTotal"><apiName>bytesTotal</apiName><shortdesc>
	 ダウンロードデータの合計バイト数を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ダウンロードデータの合計バイト数を示します。このプロパティは、ロード操作の進行中は 0 を格納し、操作が完了した時点で設定されます。また、Content-Length ヘッダーがない場合、bytesTotal の値が不確定になります。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoader:data"><apiName>data</apiName><shortdesc>
	 ロード操作によって受信したデータです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 ロード操作によって受信したデータです。このプロパティは、ロード操作が完了したときにのみ設定されます。データの形式は、<codeph>dataFormat</codeph> プロパティの設定によって決まります。
	 
	 <p><codeph>dataFormat</codeph> プロパティが <codeph>URLLoaderDataFormat.TEXT</codeph> の場合、受け取るデータは、ロードされたファイルのテキストを含むストリングです。</p>
	 
	 <p><codeph>dataFormat</codeph> プロパティが <codeph>URLLoaderDataFormat.BINARY</codeph> の場合、受け取るデータは、生のバイナリデータを含む ByteArray オブジェクトです。</p>
	 
	 <p><codeph>dataFormat</codeph> プロパティが <codeph>URLLoaderDataFormat.VARIABLES</codeph> の場合、受け取るデータは、URL エンコードされた変数を含む URLVariables オブジェクトです。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLLoaderDataFormat"><linktext>URLLoaderDataFormat</linktext></link><link href="flash.net.xml#URLLoader/dataFormat"><linktext>URLLoader.dataFormat</linktext></link></related-links></apiValue><apiValue id="flash.net:URLLoader:dataFormat"><apiName>dataFormat</apiName><shortdesc>
	 ダウンロードしたデータがテキスト（URLLoaderDataFormat.TEXT）生のバイナリデータ（URLLoaderDataFormat.BINARY）、または URL エンコードされた変数（URLLoaderDataFormat.VARIABLES）のいずれであるかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>text</apiData><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>URLLoaderDataFormat.TEXT
	 
	 </apiDefaultValue></apiValueDef><apiDesc>
	 ダウンロードしたデータがテキスト（<codeph>URLLoaderDataFormat.TEXT</codeph>）、生のバイナリデータ（<codeph>URLLoaderDataFormat.BINARY</codeph>）、または URL エンコードされた変数（<codeph>URLLoaderDataFormat.VARIABLES</codeph>）のいずれであるかを制御します。
	 
	 <p><codeph>dataFormat</codeph> プロパティの値が <codeph>URLLoaderDataFormat.TEXT</codeph> の場合、受け取るデータは、ロードされたファイルのテキストを含むストリングです。</p>
	 
	 <p><codeph>dataFormat</codeph> プロパティの値が <codeph>URLLoaderDataFormat.BINARY</codeph> の場合、受け取るデータは、生のバイナリデータを含む ByteArray オブジェクトです。</p>
	 
	 <p><codeph>dataFormat</codeph> プロパティの値が <codeph>URLLoaderDataFormat.VARIABLES</codeph> の場合、受け取るデータは、URL エンコードされた変数を含む URLVariables オブジェクトです。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLLoaderDataFormat"><linktext>URLLoaderDataFormat</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:NetStreamPlayOptions"><apiName>NetStreamPlayOptions</apiName><shortdesc>
 
 NetStreamPlayOptions クラスでは、NetStream.play2() メソッドに渡すことができる様々なオプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>NetStreamPlayOptions クラスでは、NetStream.play2() メソッドに渡すことができる様々なオプションを指定します。 
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 
 NetStreamPlayOptions クラスでは、<codeph>NetStream.play2()</codeph> メソッドに渡すことができる様々なオプションを指定します。NetStreamPlayOptions オブジェクトを <codeph>play2()</codeph> に渡し、クラスのプロパティで様々なオプションを指定します。このクラスの主な使用方法は、ストリーム間で動的にトランザクションを実装して、異なるビットレートおよびサイズのストリームに切り替えたり、再生リストの異なるコンテンツに入れ替えたりすることです。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:NetStreamPlayOptions:NetStreamPlayOptions"><apiName>NetStreamPlayOptions</apiName><shortdesc>
     
     NetStreamPlayOptions オブジェクトを作成し、NetStream.play2() メソッドに渡すオプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     
     NetStreamPlayOptions オブジェクトを作成し、<codeph>NetStream.play2()</codeph> メソッドに渡すオプションを指定します。 
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link></related-links></apiConstructor><apiValue id="flash.net:NetStreamPlayOptions:len"><apiName>len</apiName><shortdesc>
    streamName で指定されているストリームの再生の継続時間（秒単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>streamName で指定されているストリームの再生の継続時間（秒単位）。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    <codeph>streamName</codeph> で指定されているストリームの再生の継続時間（秒単位）。デフォルト値は -1 で、-1 を指定すると Flash Player は使用できなるまでライブストリームを再生するか、記録されているストリームの最後まで再生します。<codeph>len</codeph> に 0 を指定すると、記録されているストリームの最初から <codeph>start</codeph> 秒の単一フレームを再生します（<codeph>start</codeph> に 0 以上が設定されている場合）。
    <p><codeph>len</codeph> に正の値を設定すると、Flash Player はライブストリームが使用可能になった後、<codeph>len</codeph> 秒再生するか、記録されているストリームを <codeph>len</codeph> 秒再生します（ストリームが<codeph>len</codeph> 秒より短い場合は、ストリームが終了した時点で再生は終了します）。</p> 
    <p><codeph>len</codeph> に -1 以外の負の数を指定すると、Flash Player は値に -1 が指定されたものと解釈します。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/start"><linktext>start</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:oldStreamName"><apiName>oldStreamName</apiName><shortdesc>
    前のストリームの名前またはトランジション元のストリームの名前。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    前のストリームの名前またはトランジション元のストリームの名前。トランジションは実行せずにストリームを再生するためだけに <codeph>NetStream.play2()</codeph> を使用するときは、このプロパティの値は null または未定義にしておきます。トランジションを実行するときは、トランジション元のストリームを指定します。   
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamPlayOptions/streamName"><linktext>streamName</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:start"><apiName>start</apiName><shortdesc>
    streamName の開始時間（秒単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>streamName の開始時間（秒単位）。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    <codeph>streamName</codeph> の開始時間（秒単位）。有効な値は -2、-1、および 0 です。
    
    <p><codeph>start</codeph> のデフォルト値は -2 で、-2 を指定すると Flash Player は <codeph>streamName</codeph> で指定されているライブストリームを最初に再生しようとします。この名前のライブストリームが見つからない場合、Flash Player は <codeph>streamName</codeph> で指定されている記録されたストリームを再生します。ライブストリームも記録されたストリームも見つからない場合、Flash Player は、だれもパブリッシュしていなくても <codeph>streamName</codeph> という名前のライブストリームを開きます。だれかがそのストリームのパブリッシュを開始すると、Flash Player はそのストリームの再生を開始します。</p>
    
    <p><codeph>start</codeph> に -1 を指定すると、Flash Player は <codeph>streamName</codeph> で指定されているライブストリームだけを再生します。ライブストリームが見つからない場合で <codeph>len</codeph> が -1 に設定されていると、Flash Player は待ち状態のままになります。<codeph>len</codeph> が -1 以外に設定されていると、Flash Player は <codeph>len</codeph> 秒の間待った後、再生リストの次のアイテムの再生を開始します。</p>
    
    <p> <codeph>start</codeph> に 0 または正の値を設定すると、Flash Player は <codeph>streamName</codeph> という名前の記録されたストリームだけを、ストリームの最初から <codeph>start</codeph> 秒の位置から再生を始めます。記録されたストリームが見つからない場合は、Flash Player は直ちに再生リストの次のアイテムの再生を開始します。</p>
    
    <p><codeph>start</codeph> に -1 および -2 以外の負の数を設定すると、Flash Player は値に -2 が指定されたものと解釈します。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions/len"><linktext>長さ</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:streamName"><apiName>streamName</apiName><shortdesc>
    トランジションまたは再生する新しいストリームの名前。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    トランジションまたは再生する新しいストリームの名前。<codeph>oldStreamName</codeph> が null または未定義のときは、<codeph>NetStream.play2()</codeph> を呼び出すだけで <codeph>streamName</codeph> の再生が開始されます。<codeph>oldStreamName</codeph> が指定されていると、<codeph>NetStream.play2()</codeph> を呼び出すことで、<codeph>oldStreamName</codeph> が <codeph>streamName</codeph> にトランジションされます（<codeph>transition</codeph> プロパティで指定されている移行モードを使用）。 
    
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamPlayOptions/oldStreamName"><linktext>oldStreamName</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamPlayOptions:transition"><apiName>transition</apiName><shortdesc>
    streamName が再生または移行されるモード。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>streamName が再生または移行されるモード。
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    <codeph>streamName</codeph> が再生または移行されるモード。正の値は、NetStreamPlayTransitions クラスの定数です。<codeph>Netstream.play2()</codeph> が再生のために呼び出されたのか移行のために呼び出されたのかによって、移行モードの動作は異なります。移行モードについて詳しくは、NetStreamPlayTransitions クラスを参照してください。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamPlayTransitions"><linktext>NetStreamPlayTransitions</linktext></link><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:IDynamicPropertyOutput"><apiName>IDynamicPropertyOutput</apiName><shortdesc>
	 このインターフェイスは、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 このインターフェイスは、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。このインターフェイスは、IDynamicPropertyWriter インターフェイスおよび <codeph>ObjectEncoding.dynamicPropertyWriter</codeph> プロパティと組み合わせて使用します。
	 
     </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#IDynamicPropertyWriter"><linktext>IDynamicPropertyWriter</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter"><linktext>ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links><apiOperation id="flash.net:IDynamicPropertyOutput:flash.net:IDynamicPropertyOutput:writeDynamicProperty"><apiName>writeDynamicProperty</apiName><shortdesc>
		 ダイナミックプロパティを、直列化オブジェクトのバイナリ出力に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>プロパティの名前です。このパラメーターは、ダイナミックオブジェクトの既存のプロパティ名を指定する場合、または新しいプロパティを作成する場合に使用できます。  
		 
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>指定されたプロパティに書き込む値です。
		 
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 ダイナミックプロパティを、直列化オブジェクトのバイナリ出力に追加します。続いて、<codeph>readObject</codeph> などのメソッドを使用してオブジェクトが読み取られると、新しいプロパティが設定されます。このメソッドを使用して、動的オブジェクトのプロパティの直列化からの除外、動的オブジェクトのプロパティへの値の書き込み、または新しいプロパティの作成を実行できます。
		 
         </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#IDynamicPropertyWriter"><linktext>IDynamicPropertyWriter</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter"><linktext>ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flash.net:URLVariables"><apiName>URLVariables</apiName><shortdesc>
 
 URLVariables クラスを使用すると、アプリケーションとサーバーの間で変数を転送できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>URLVariables, constructor
</keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 
 URLVariables クラスを使用すると、アプリケーションとサーバーの間で変数を転送できます。URLVariables オブジェクトは、URLLoader クラスのメソッド、URLRequest クラスの <codeph>data</codeph> プロパティ、および flash.net パッケージ関数で使用します。
 
 </apiDesc><example conref="examples\URLVariablesExample.as"> 次の例では、新しいブラウザーウィンドウで http://www.[yourDomain].com/application.jsp でホストされるリモートアプリケーションを開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータをアプリケーションに渡します。 
  
 <p>この例のハイライトは、次のとおりです。</p>
 <ol>
    <li>コンストラクター関数が <codeph>request</codeph> という名前の URLRequest インスタンスを作成します。このとき、リモートアプリケーションの URL をパラメーターとして取ります。</li>
    <li>URLVariables オブジェクトが作成され、その 2 つのプロパティに値が割り当てられます。</li>
    <li>URLVariables オブジェクトが URLRequest オブジェクトの <codeph>data</codeph> プロパティに割り当てられます。</li>
    <li><codeph>navigateToURL</codeph> を呼び出して、リモートアプリケーションの URL 用の新しいブラウザーウィンドウを開きます。</li>
 </ol>
 <p> <b>注意：</b>この例を実行するには、この例のリモートアプリケーションの URL を実際の URL に置き換える必要があります。さらに、URLVariables オブジェクトの Flash Player で捕捉した情報を処理するためのサーバーコードが必要です。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class URLVariablesExample extends Sprite {

        public function URLVariablesExample() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLLoader"><linktext>URLLoader</linktext></link></related-links><apiConstructor id="flash.net:URLVariables:URLVariables"><apiName>URLVariables</apiName><shortdesc>
	 新しい URLVariables オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>名前と値のペアを含む、URL エンコードされたストリングです。
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい URLVariables オブジェクトを作成します。URLVariables オブジェクトを URLRequest オブジェクトの <codeph>data</codeph> プロパティに渡します。
	 
	 <p>ストリングを指定して URLVariables コンストラクターを呼び出すと、<codeph>decode()</codeph> メソッドが自動的に呼び出されて、そのストリングが URLVariables オブジェクトのプロパティに変換されます。</p>
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:URLVariables:decode"><apiName>decode</apiName><shortdesc>
	 変数ストリングを、指定された URLVariables オブジェクトのプロパティに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>URLVariables, URLVariables.decode, decode
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>source パラメーターは、名前と値のペアを含む、URL エンコードされたクエリストリングでなければなりません。
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>名前と値のペアを含む、URL エンコードされたクエリストリングです。	 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 変数ストリングを、指定された URLVariables オブジェクトのプロパティに変換します。
	 <p>このメソッドは、URLVariables イベントによって内部的に使用されます。ほとんどの場合、ユーザーが直接このメソッドを呼び出す必要はありません。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLVariables:toString"><apiName>toString</apiName><shortdesc>
	 列挙可能な変数をすべて含むストリングを、MIME コンテンツエンコード application/x-www-form-urlencoded で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>URLVariables, URLVariables.toString, toString
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>名前と値のペアを含む、URL エンコードされたストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 列挙可能な変数をすべて含むストリングを、MIME コンテンツエンコード <i>application/x-www-form-urlencoded</i> で返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.net:IDynamicPropertyWriter"><apiName>IDynamicPropertyWriter</apiName><shortdesc>
     このインターフェイスを IDynamicPropertyOutput インターフェイスと共に使用して、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
     このインターフェイスを IDynamicPropertyOutput インターフェイスと共に使用して、ダイナミックオブジェクトのダイナミックプロパティの直列化を制御します。このインターフェイスを使用するには、IDynamicPropertyWriter インターフェイスを実装するオブジェクトを <codeph>ObjectEncoding.dynamicPropertyWriter</codeph> プロパティに割り当てます。
      
     </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#IDynamicPropertyOutput"><linktext>IDynamicPropertyOutput</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter"><linktext>ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links><apiOperation id="flash.net:IDynamicPropertyWriter:flash.net:IDynamicPropertyWriter:writeDynamicProperties"><apiName>writeDynamicProperties</apiName><shortdesc>
         IDynamicPropertyOutput オブジェクトの名前と値を、ダイナミックプロパティが指定されたオブジェクトに書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>書き込むオブジェクトです。
		 </apiDesc></apiParam><apiParam><apiItemName>output</apiItemName><apiOperationClassifier>flash.net:IDynamicPropertyOutput</apiOperationClassifier><apiDesc>オブジェクトに動的に書き込む名前と値が含まれる、IDynamicPropertyOutput オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
         IDynamicPropertyOutput オブジェクトの名前と値を、ダイナミックプロパティが指定されたオブジェクトに書き込みます。<codeph>ObjectEncoding.dynamicPropertyWriter</codeph> が設定されている場合、ダイナミックプロパティが指定されているオブジェクトごとに、このメソッドが呼び出されます。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#IDynamicPropertyOutput"><linktext>IDynamicPropertyOutput</linktext></link><link href="flash.net.xml#ObjectEncoding/dynamicPropertyWriter"><linktext>ObjectEncoding.dynamicPropertyWriter</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flash.net:URLRequestDefaults"><apiName>URLRequestDefaults</apiName><shortdesc>
 URLRequestDefaults クラスには、URLRequest クラスのプロパティのデフォルト値を定義するために設定できる静的プロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 URLRequestDefaults クラスには、URLRequest クラスのプロパティのデフォルト値を定義するために設定できる静的プロパティが含まれています。また、静的メソッドの <codeph>URLRequestDefaults.setLoginCredentialsForHost()</codeph> も含まれています。このメソッドを使用すると、要求のデフォルトの認証資格情報を定義できます。URLRequest クラスは、HTTP 要求で使用される情報を定義します。 
 
 <p>URLRequest オブジェクトで設定されるプロパティは、URLRequestDefaults クラスに対し設定される静的プロパティをオーバーライドします。</p>
 
 <p>URLRequestDefault の設定は、呼び出し側のアプリケーションドメイン内にあるコンテンツにのみ適用されますが、1 つ例外があります。<codeph>URLRequestDefaults.setLoginCredentialsForHost()</codeph> を呼び出して行われる設定は、現在実行中のアプリケーションのすべてのアプリケーションドメインに適用されます。</p>
 
 <p>アプリケーションセキュリティサンドボックスで実行される Adobe<sup>®</sup> AIR<sup>®</sup> コンテンツだけが URLRequestDefaults クラスを使用できます。他のコンテンツがこのクラスのメンバーまたはプロパティにアクセスすると、SecurityError がスローされます。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#URLRequest"><linktext>URLRequest</linktext></link></related-links><apiOperation id="flash.net:URLRequestDefaults:setLoginCredentialsForHost"><apiName>setLoginCredentialsForHost</apiName><shortdesc>
	選択したホストのデフォルトユーザーおよびパスワード情報を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>hostname</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ユーザー名およびパスワードを適用する先のホストの名前。これには、<codeph>"www.example.com"</codeph> などのドメインを指定すること、または <codeph>"www.example.com:80"</codeph> など、ドメインとポート番号を指定することができます。<codeph>"example.com"</codeph>、<codeph>"www.example.com"</codeph> および<codeph>"sales.example.com"</codeph> はそれぞれ別のホストと見なされますので注意してください。 
	
	</apiDesc></apiParam><apiParam><apiItemName>user</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定したホストの要求認証で使用するデフォルトユーザー名。
	
	</apiDesc></apiParam><apiParam><apiItemName>password</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定したホストの要求認証で使用するデフォルトパスワード。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	選択したホストのデフォルトユーザーおよびパスワード情報を設定します。これらの設定は、このメソッドを呼び出したオブジェクトのアプリケーションメイン内の URLRequest オブジェクトだけではなく、アプリケーションのすべてのアプリケーションドメイン内の URLRequest オブジェクトに適用されます（一方、URLRequest クラスの静的プロパティは、呼び出し元のアプリケーションドメインにのみ適用されます）。これにより、アプリケーションの別の部分がログインするとき、アプリケーション全体のコンテンツが（コンテンツのアプリケーションドメインに関係なく）ログインできます。
	
	<p><i>Mac OS で実行されるアプリケーションに関する注意：</i>Mac OS では、このメソッドを呼び出すと、アプリケーションは、アプリケーションが閉じられるまで指定したホストのこれらの資格情報を使用します。これは、同じホストに対し <codeph>URLRequestDefaults.setLoginCredentialsForHost()</codeph> を以後に呼び出した場合も同じです。ただし、このメソッドが指定する資格情報をサーバーが拒否した場合、以後の（同じホストに対する）<codeph>URLRequestDefaults.setLoginCredentialsForHost()</codeph> メソッドの呼び出しは認識されます。</p>
	
	<p><i/>注意：このメソッドは、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:URLRequestDefaults:authenticate:get"><apiName>authenticate</apiName><shortdesc>
	URLRequest オブジェクトの authenticate プロパティのデフォルト設定。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	URLRequest オブジェクトの <codeph>authenticate</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph>authenticate</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。
	
	<p><i>注意：</i>この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/authenticate"><linktext>URLRequest.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:cacheResponse:get"><apiName>cacheResponse</apiName><shortdesc>
	URLRequest オブジェクトの cacheResponse プロパティのデフォルト設定。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	URLRequest オブジェクトの <codeph>cacheResponse</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph>cacheResponse</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。<codeph>true</codeph> に設定すると、AIR アプリケーションのデフォルト動作では、オペレーティングシステムの HTTP キャッシュが使用されます。この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/cacheResponse"><linktext>URLRequest.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:followRedirects:get"><apiName>followRedirects</apiName><shortdesc>
	URLRequest オブジェクトの followRedirects プロパティのデフォルト設定。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	URLRequest オブジェクトの <codeph>followRedirects</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph>followRedirects</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/followRedirects"><linktext>URLRequest.followRedirects</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:manageCookies:get"><apiName>manageCookies</apiName><shortdesc>
	URLRequest オブジェクトの manageCookies プロパティのデフォルト設定。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	URLRequest オブジェクトの <codeph>manageCookies</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph>manageCookies</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。
	
	<p><i>注意：</i>この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/manageCookies"><linktext>URLRequest.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:useCache:get"><apiName>useCache</apiName><shortdesc>
	URLRequest オブジェクトの useCache プロパティのデフォルト設定。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	URLRequest オブジェクトの <codeph>useCache</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph>useCache</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。この設定は、ファイルのアップロードまたは RTMP 要求で使用される URLRequest オブジェクトには適用されません。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/useCache"><linktext>URLRequest.useCache</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequestDefaults:userAgent:get"><apiName>userAgent</apiName><shortdesc>
	URLRequest オブジェクトの userAgent プロパティのデフォルト設定。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	URLRequest オブジェクトの <codeph>userAgent</codeph> プロパティのデフォルト設定。URLRequest オブジェクトの <codeph>userAgent</codeph> プロパティを設定すると、このデフォルト設定がオーバーライドされます。
	
	<p>これは、(HTMLLoader オブジェクトの <codeph>load()</codeph> メソッドを呼び出すと使用される) すべての HTMLLoader オブジェクトのデフォルトのユーザーエージェントストリングでもあります。HTMLLoader オブジェクトの <codeph>userAgent</codeph> プロパティを設定すると、<codeph>URLRequestDefaults.userAgent</codeph> 設定がオーバーライドされます。</p>
	
	<p>このデフォルト値は、次の例に示すように、実行時のオペレーティングシステム（Mac OS、Linux または Windows など）、実行時の言語および実行時のバージョンによって異なります。</p>
	
	<ul>
	
		<li><codeph>"Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li>
		<li><codeph>"Mozilla/5.0 (Windows; U; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li>
     <li><codeph>"Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li>
	
	</ul>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/userAgent"><linktext>flash.net.URLRequest.userAgent</linktext></link><link href="../../flash/html/HTMLLoader.html#userAgent"><linktext>flash.html.HTMLLoader.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:flash.net:getClassByAlias"><apiName>getClassByAlias</apiName><shortdesc>
     registerClassAlias() メソッドの呼び出しを介して以前にエイリアスを登録したクラスを検索します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\GetClassByAliasExample.as -noswf
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エイリアスが登録されていません。
     
     </apiDesc><apiItemName>ReferenceError</apiItemName><apiOperationClassifier>ReferenceError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたエイリアスに関連付けられたクラスです。見つからない場合は、例外がスローされます。
     
     </apiDesc><apiOperationClassifier>Class</apiOperationClassifier></apiReturn><apiParam><apiItemName>aliasName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>検索するエイリアスです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     既に <codeph>registerClassAlias()</codeph> メソッドの呼び出しによってエイリアスが登録されているクラスを検索します。
     <p>このメソッドは <codeph>flash.utils.getDefinitionByName()</codeph> メソッドとやり取りを行いません。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#/registerClassAlias()"><linktext>registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:navigateToURL"><apiName>navigateToURL</apiName><shortdesc>
     Flash Player のコンテナを含むアプリケーション（通常はブラウザー）でウィンドウを開くか、置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError The "digest" and "importToSandbox" properties of URLRequest
     are not supported by URLLoader.navigate.
     
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>request</codeph> オブジェクトの <codeph>digest</codeph> プロパティが <codeph>null</codeph> ではありません。URLRequest オブジェクトの <codeph>digest</codeph> プロパティを設定できるのは、<codeph>URLLoader.load()</codeph> メソッドを呼び出して SWZ ファイル（Adobe プラットフォームコンポーネント）を読み込む場合のみです。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Flash Player（および Adobe AIR のアプリケーションサンドボックスコンテンツ以外）では、このエラーは次の条件でスローされます。
     <ul>
       <li>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。</li>
     
       <li>スクリプティング疑似 URL を評価するために試行された移動操作です。ただし、含まれるドキュメント（一般にブラウザー内の HTML ドキュメント）はアクセス権限が与えられていないサンドボックスからのものです。この問題は、含まれるドキュメントに <codeph>allowScriptAccess="always"</codeph> を指定することで回避できます。</li>
     
       <li>HTML ファイルと SWF ファイルのドメインが一致しないとき、特別なウィンドウ <codeph>"_self"</codeph>、<codeph>"_top"</codeph>、または <codeph>"_parent"</codeph> の移動は、<codeph>allowScriptAccess</codeph> が <codeph>"none"</codeph> または <codeph>"sameDomain"</codeph> に設定されている HTML ページに SWF ファイルがある場合はできません。</li>
     
       <li>デフォルト以外の名前を持つウィンドウを、ローカルファイルシステムのサンドボックスにある SWF ファイル内から移動することはできません。</li>
     
      <li>一般的な予約ポートには接続できません。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/> </li>
     
     </ul>
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。この要件は Flash Player のコンテンツおよび Adobe AIR のアプリケーションサンドボックスコンテンツ以外にのみ適用されます。
     
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>移動先の URL を指定する URLRequest オブジェクトです。
     
     <p><ph platform="actionscript">Adobe AIR で実行中のコンテンツの場合、</ph><ph platform="javascript">When</ph> で <codeph>navigateToURL()</codeph> 関数を使用すると、ランタイムでは、POST メソッドを使用する URLRequest（<codeph>method</codeph> プロパティが <codeph>URLRequestMethod.POST</codeph> に設定されているもの）は、GET メソッドとして処理されます。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>window</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>request</codeph> パラメーターで指定されたドキュメントを表示するブラウザーウィンドウまたは HTML フレームです。特定のウィンドウの名前を入力するか、次の値のいずれかを使用します。
     <ul>
     <li><codeph>"_self"</codeph> は、現在のウィンドウ内の現在のフレームを指定します。</li>
     <li><codeph>"_blank"</codeph> は、新規ウィンドウを指定します。</li>
     <li><codeph>"_parent"</codeph> は、現在のフレームの親を指定します。</li>
     <li><codeph>"_top"</codeph> は、現在のウィンドウ内の最上位のフレームを指定します。</li>
     </ul>
     <p>このパラメーターに値を指定しない場合は、新しい空のウィンドウが作成されます。スタンドアローン Flash Player では、新しい（<codeph>"_blank"</codeph>）ウィンドウまたは名前付きのウィンドウのいずれかを指定できます。その他の値は適用されません。</p>
     
     <p platform="actionscript"><b>注意：</b>ローカルファイルシステムのサンドボックスで実行される SWF ファイル内のコードが <codeph>navigateToURL()</codeph> 関数を呼び出して <codeph>window</codeph> パラメーターにカスタムウィンドウ名を指定すると、そのウィンドウ名はランダム名に受け継がれます。<codeph>"_flashXXXXXXXX"</codeph> の形式の名前になります。X はそれぞれがランダム 16 進数字を表します。同じセッション内で（含まれるブラウザーウィンドウを閉じるまでに）再度この関数を呼び出して <codeph>window</codeph> パラメーターに同じ名前を指定した場合は、同じランダムストリングが使用されます。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <ph platform="actionscript">Flash Player のコンテナを含むアプリケーション（通常はブラウザー）でウィンドウを開くか、置き換えます。Adobe AIR では、関数は URL をデフォルトシステム Web ブラウザーで開きます。</ph><ph platform="javascript">URL をデフォルトシステム Web ブラウザーで開きます。</ph>
     
	 	<p>  <b><i>重要なセキュリティメモ </i></b> </p>
     	<p>開発者は URL 値を FlashVars などの外部ソースから取得した <codeph>navigateToURL()</codeph> 関数に渡すことがよくあります。攻撃側は、クロスサイトスクリプティングなどの攻撃を実行するためにこれらの外部ソースを操作しようとする場合があります。したがって、開発者は URL 値をこの関数に渡す前にすべての URL を検証する必要があります。 </p>
     	
     <p>URL の適切なデータ検証方法は、アプリケーション全体での URL の使用状況によって異なります。最も一般的なデータ検証方法では、URL が適切なスキームかどうかも検証します。例えば、javascript の意図しない許可です。URL はクロスサイトスクリプティングになる場合があります。URL が独自のドメイン内のものであることを検証することにより、フィッシング攻撃を行うユーザーによってオープンリダイレクタとして SWF ファイルが使用されないようにします。さらにセキュリティを強化するには、URL のパスを検証し、URL が RFC のガイドラインに準拠していることを確認することもできます。</p>
     
     <p platform="actionscript">例えば、次に示す簡単なコードの例では、データの検証として、http:// または https:// で始まっていない URL を拒否し、URL が自分のドメイン名に含まれることを確認しています。すべての Web アプリケーションにこの例が適用できるとは限らないため、URL に対して追加のチェックが必要かどうかを検討することをお勧めします。 </p>
	 
     	<codeblock platform="actionscript">
     // AS3 Regular expression pattern match for URLs that start with http:// and https:// plus your domain name.
     function checkProtocol (flashVarURL:String):Boolean {
        // Get the domain name for the SWF if it is not known at compile time.
        // If the domain is known at compile time, then the following two lines can be replaced with a hard coded string.
        var my_lc:LocalConnection = new LocalConnection();
        var domainName:String = my_lc.domain;
        // Build the RegEx to test the URL.
        // This RegEx assumes that there is at least one "/" after the
        // domain. http://www.mysite.com will not match.
        var pattern:RegExp = new RegExp("^http[s]?\:\\/\\/([^\\/]+)\\/");
        var result:Object = pattern.exec(flashVarURL);
        if (result == null || result[1] != domainName || flashVarURL.length >= 4096) {
          return (false);
        }
        return (true);
     }  
     
     	</codeblock>
	 <p platform="actionscript">ブラウザー内で実行される <i>ローカル</i>コンテンツの場合、<codeph>navigateToURL()</codeph> メソッドを呼び出すときに <codeph>"javascript:"</codeph> 擬似プロトコルを（最初のパラメーターとして渡される <codeph>URLRequest</codeph> オブジェクトを介して）指定できるのは、SWF ファイルとそれが含まれる Web ページ（存在する場合）が、信頼できるローカルのセキュリティサンドボックス内にある場合のみです。一部のブラウザーでは、javascript プロトコルを <codeph>navigateToURL()</codeph> メソッドと共に使用することをサポートしていません。代わりに、<codeph>call()</codeph> メソッド（<codeph>ExternalInterface</codeph> API）を使用し、JavaScript メソッドを取り込んでいる HTML ページ内で呼び出すことを検討してください。</p>
     
      <p platform="actionscript">Flash Player、および Adobe AIR のアプリケーションサンドボックス以外では、一般的な予約ポートに接続することはできません。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/></p>
     
     <p platform="actionscript">ブラウザーで実行される Flash Player 10 以降では、このメソッドをプログラムで使用してポップアップウィンドウを開く方法は有効でない場合があります。ブラウザー（およびブラウザーの設定）によってはポップアップウィンドウがブロックされる場合があり、すべてのポップアップウィンドウが表示される保証はありません。ただし、ユーザー操作の直接の結果として実行されるコード（マウスのクリックやキー入力イベントのイベントハンドラーなど）に限っては、このクラスを使用してポップアップウィンドウを開く方法が有効です。</p>
     
     <p platform="actionscript"> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
	 <ul platform="actionscript">
	 <li>POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li>
	 <li>POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li>
	 </ul>
     <p platform="actionscript">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     <p platform="actionscript">セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul platform="actionscript">
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
     
     </apiDesc><example conref="examples\NavigateToURLExample.as"> 次の例では、新しいブラウザーウィンドウで URL http://www.adobe.com を開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータを Web サーバーに渡します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class NavigateToURLExample extends Sprite {

        public function NavigateToURLExample() {
            var url:String = "http://www.adobe.com";
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "Your Name";
            var request:URLRequest = new URLRequest(url);
            request.data = variables;
            try {            
                navigateToURL(request);
            }
            catch (e:Error) {
                // handle error here
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.external.xml#ExternalInterface/call()"><linktext>flash.external.ExternalInterface.call()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:registerClassAlias"><apiName>registerClassAlias</apiName><shortdesc>
     AMF（Action Message Format）でオブジェクトがエンコードされるとき、オブジェクトのクラス（タイプ）を維持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>いずれかのパラメーターが <codeph>null</codeph> の場合。
     
     </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>aliasName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>使用するエイリアスです。
     </apiDesc></apiParam><apiParam><apiItemName>classObject</apiItemName><apiOperationClassifier>Class</apiOperationClassifier><apiDesc>指定されたエイリアスに関連付けられたクラスです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     AMF（Action Message Format）でオブジェクトがエンコードされるとき、オブジェクトのクラス（タイプ）を維持します。オブジェクトを AMF にエンコードする場合、この関数は、そのクラスのエイリアスを保存し、オブジェクトのデコード時にクラスを復元できるようにします。エンコードコンテキストで、オブジェクトのクラスのエイリアスが登録されていない場合、オブジェクトは匿名オブジェクトとしてエンコードされます。同様に、デコードコンテキストで、同じエイリアスが登録されていない場合、デコードするデータに対して、匿名オブジェクトが作成されます。
     
     <p>LocalConnection、ByteArray、SharedObject、NetConnection、および NetStream はすべて、AMF でオブジェクトをエンコードするクラスの例です。</p>
     
     <p>エンコードおよびデコードコンテキストでは、エイリアスに同じクラスを使用する必要はありません。エンコード先およびデコード先のクラスに、ソースクラスによって直列化されたすべてのメンバーが含まれている限り、クラスを意図的に変更できます。</p>
     
     </apiDesc><example conref="examples\RegisterClassAliasExample.as"> この例では、<codeph>registerClassAlias()</codeph> 関数を使用して、クラス ExampleClass のエイリアス（<codeph>com.example.eg</codeph>）を登録します。クラスのエイリアスが登録されると、オブジェクトを ExampleClass のインスタンスとして非直列化できるようになり、コードは <codeph>true</codeph> を出力します。<codeph>registerClassAlias()</codeph> 呼び出しが削除されると、コードは <codeph>false</codeph> を出力します。 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.registerClassAlias;
    import flash.utils.ByteArray;

    public class RegisterClassAliasExample extends Sprite {
        public function RegisterClassAliasExample() {
            registerClassAlias("com.example.eg", ExampleClass);
            var eg1:ExampleClass = new ExampleClass();
            var ba:ByteArray = new ByteArray();
            ba.writeObject(eg1);
            ba.position = 0;
            var eg2:* = ba.readObject();
            trace(eg2 is ExampleClass); // true
        }
    }
}

class ExampleClass {}
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.net:sendToURL"><apiName>sendToURL</apiName><shortdesc>
     URL リクエストをサーバーに送信しますが、応答は無視します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError The "digest" and "importToSandbox" properties of URLRequest
         are not supported by URLLoader.send.
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。
     
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートには接続できません。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/> 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>データの送信先の URL を指定する URLRequest オブジェクトです。
         </apiDesc></apiParam></apiOperationDef><apiDesc>
     URL リクエストをサーバーに送信しますが、応答は無視します。
     <p>サーバーの応答を調べるには、代わりに <codeph>URLLoader.load()</codeph> メソッドを使用します。</p>
     
      <p>一般的な予約ポートには接続できません。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/></p>
     
     <p>SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグのパラメーター）を設定します。</p>
	 
     <p> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
	 <ul>
	 <li>POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li>
	 <li>POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li>
	 </ul>
     <p>また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul>
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
         
         </apiDesc><example conref="examples\SendToURLExample.as"> 次の例では、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータを、http://www.yourDomain.com/application.jsp にあるアプリケーションに渡します。
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.net.URLVariables;
    import flash.net.sendToURL;

    public class SendToURLExample extends Sprite {

        public function SendToURLExample() {
            var url:String = "http://www.yourDomain.com/application.jsp";
            var variables:URLVariables = new URLVariables();
            variables.sessionId = new Date().getTime();
            variables.userLabel = "Your Name";

            var request:URLRequest = new URLRequest(url);
            request.data = variables;
            trace("sendToURL: " + request.url + "?" + request.data);
            try {
                sendToURL(request);
            }
            catch (e:Error) {
                // handle error here
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiClassifier id="flash.net:Responder"><apiName>Responder</apiName><shortdesc>
 Responder クラスは、NetConnection.call() で個々の操作の成否に関するサーバーからの戻り値を処理するために使用されるオブジェクトを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Responder クラスは、<codeph>NetConnection.call()</codeph> で個々の操作の成否に関するサーバーからの戻り値を処理するために使用されるオブジェクトを提供します。<codeph>NetConnection.call()</codeph> を使用すると、現在の操作に固有なネットワーク操作の失敗や現在の接続状態に関する障害が報告されるようになります。エラー処理を容易にする目的から、操作エラーは、NetConnection オブジェクトではなく Responder オブジェクトをターゲットとします。
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection/call()"><linktext>NetConnection.call()</linktext></link></related-links><apiConstructor id="flash.net:Responder:Responder"><apiName>Responder</apiName><shortdesc>
	 新しい Responder オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>result</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>サーバーの呼び出しが成功して結果が返された場合に呼び出される関数です。
	 </apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiData>null</apiData><apiDesc>サーバーがエラーを返したときに呼び出される関数です。
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい Responder オブジェクトを作成します。Responder オブジェクトを <codeph>NetConnection.call()</codeph> に渡して、サーバーからの戻り値を処理します。一方または両方のパラメーターに <codeph>null</codeph> を渡すことができます。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.net:URLRequestHeader"><apiName>URLRequestHeader</apiName><shortdesc>
 URLRequestHeader オブジェクトは 1 つの HTTP のリクエストヘッダーをカプセル化し、名前と値のペアを構成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 URLRequestHeader オブジェクトは 1 つの HTTP のリクエストヘッダーをカプセル化し、名前と値のペアを構成します。URLRequestHeader オブジェクトは URLRequest クラスの <codeph>requestHeaders</codeph> プロパティで使用されます。
 
 <p>Adobe<sup>®</sup> AIR では、アプリケーションセキュリティサンドボックス内のコンテンツ (AIR アプリケーションと共にインストールされたコンテンツなど) は、どのようなリクエストヘッダーでもエラーなしで使用できます。ただし、異なるセキュリティサンドボックス内の、Adobe AIR で実行されているコンテンツ<ph outputclass="actionscript">または Flash<sup>®</sup> Player で実行されているコンテンツでは、</ph>次のリクエストヘッダーを使用するとランタイムエラーがスローされます。これらの制限対象の項では大文字と小文字は区別されません (たとえば、<codeph>Get</codeph>、<codeph>get</codeph>、<codeph>GET</codeph> はすべて使用できません)。 </p>
 
 <p>Flash Player およびアプリケーションセキュリティサンドボックス外の Adobe AIR コンテンツでは、次のリクエストヘッダーを使用できません。これらの制限対象の項では大文字と小文字は区別されません（例えば、<codeph>Get</codeph>、<codeph>get</codeph>、<codeph>GET</codeph> はすべて使用できません）。また、アンダースコア文字が使用されている場合は、ハイフンのある項が該当します（例えば、<codeph>Content-Length</codeph> と <codeph>Content_Length</codeph> は共に禁止されています）。 </p>
 
 <p><codeph>Accept-Charset</codeph>、<codeph>Accept-Encoding</codeph>、<codeph>Accept-Ranges</codeph>、<codeph>Age</codeph>、<codeph>Allow</codeph>、<codeph>Allowed</codeph>、<codeph>Authorization</codeph>、<codeph>Charge-To</codeph>、<codeph>Connect</codeph>、<codeph>Connection</codeph>、<codeph>Content-Length</codeph>、<codeph>Content-Location</codeph>、<codeph>Content-Range</codeph>、<codeph>Cookie</codeph>、<codeph>Date</codeph>、<codeph>Delete</codeph>、<codeph>ETag</codeph>、<codeph>Expect</codeph>、<codeph>Get</codeph>、<codeph>Head</codeph>、<codeph>Host</codeph>、<codeph>Keep-Alive</codeph>、<codeph>Last-Modified</codeph>、<codeph>Location</codeph>、<codeph>Max-Forwards</codeph>、<codeph>Options</codeph>、<codeph>Origin</codeph>、<codeph>Post</codeph>、<codeph>Proxy-Authenticate</codeph>、<codeph>Proxy-Authorization</codeph>、<codeph>Proxy-Connection</codeph>、<codeph>Public</codeph>、<codeph>Put</codeph>、<codeph>Range</codeph>、<codeph>Referer</codeph>、<codeph>Request-Range</codeph>、<codeph>Retry-After</codeph>、<codeph>Server</codeph>、<codeph>TE</codeph>、<codeph>Trace</codeph>、<codeph>Trailer</codeph>、<codeph>Transfer-Encoding</codeph>、<codeph>Upgrade</codeph>、<codeph>URI</codeph>、<codeph>User-Agent</codeph>、<codeph>Vary</codeph>、<codeph>Via</codeph>、<codeph>Warning</codeph>、<codeph>WWW-Authenticate</codeph>、<codeph>x-flash-version</codeph>。</p>
 
 <p>URLRequestHeader オブジェクトの長さは制限されています。URLRequestHeader オブジェクトの累積長（<codeph>name</codeph> プロパティの長さに <codeph>value</codeph> プロパティの長さを足したもの）または <codeph>URLRequest.requestHeaders</codeph> プロパティで使用する URLRequestHeader オブジェクトの配列が許容長を超えると、例外がスローされます。</p>
 
 <p>Adobe AIR で実行されているコンテンツでは、<codeph>ACCEPT</codeph> ヘッダーに以下を設定します。ただし、URLRequest クラスの <codeph>ACCEPT</codeph> ヘッダー（<codeph>requestHeaders</codeph> プロパティ）に設定を指定している場合は除きます。</p>
 
 <codeph>text/xml, application/xml, application/xhtml+xml, text/html;q=0.9, text/plain;q=0.8, image/png, application/x-shockwave-flash, video/mp4;q=0.9, flv-application/octet-stream;q=0.8, video/x-flv;q=0.7, audio/mp4, ~~/~~;q=0.5</codeph>
 <p>URLRequest パラメーターを受け取るメッソドすべてが <codeph>requestHeaders</codeph> プロパティをサポートしているわけではありません。呼び出すメソッドのマニュアルを参照してください。例えば、<codeph>FileReference.upload()</codeph> メソッドおよび <codeph>FileReference.download()</codeph> メソッドは、<codeph>URLRequest.requestHeaders</codeph> プロパティをサポートしていません。</p>
 <p>ブラウザーの制限により、カスタム HTTP リクエストヘッダーは <codeph>POST</codeph> リクエストだけをサポートし、<codeph>GET</codeph> リクエストはサポートしません。</p>  
 
 </apiDesc><example conref="examples\URLRequestHeaderExample.as"> 次の例では、単一の HTTP リクエストヘッダー <codeph>header</codeph> を、<codeph>requestHeaders</codeph> プロパティの配列に追加します。ヘッダーは、要求されたものがキャッシュされていても、アプリケーションから元のサーバーに要求を転送する必要があることを示します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.net.URLRequestHeader;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;

    public class URLRequestHeaderExample extends Sprite {
        public function URLRequestHeaderExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var header:URLRequestHeader = new URLRequestHeader("pragma", "no-cache");
            var request:URLRequest = new URLRequest("http://www.[yourdomain].com/greeting.cfm");
            request.data = new URLVariables("name=John+Doe");
            request.method = URLRequestMethod.POST;
            request.requestHeaders.push(header);
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLRequest"><linktext>URLRequest</linktext></link><link href="flash.net.xml#URLLoader"><linktext>URLLoader</linktext></link></related-links><apiConstructor id="flash.net:URLRequestHeader:URLRequestHeader"><apiName>URLRequestHeader</apiName><shortdesc>
	 1 つの HTTP リクエストヘッダーをカプセル化する新しい URLRequestHeader オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>HTTP リクエストヘッダー名（<codeph>Content-Type</codeph> や <codeph>SOAPAction</codeph> など）です。
	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc><codeph>name</codeph> プロパティに関連付けられた値（<codeph>text/plain</codeph> など）です。
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 1 つの HTTP リクエストヘッダーをカプセル化する新しい URLRequestHeader オブジェクトを作成します。URLRequestHeader オブジェクトは URLRequest クラスの <codeph>requestHeaders</codeph> プロパティで使用されます。
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.net:URLRequestHeader:name"><apiName>name</apiName><shortdesc>
	 HTTP リクエストヘッダー名（Content-Type や SOAPAction など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 HTTP リクエストヘッダー名（<codeph>Content-Type</codeph> や <codeph>SOAPAction</codeph> など）です。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestHeader:value"><apiName>value</apiName><shortdesc>
	 name プロパティに関連付けられた値（text/plain など）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>name</codeph> プロパティに関連付けられた値（<codeph>text/plain</codeph> など）です。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:URLRequestMethod"><apiName>URLRequestMethod</apiName><shortdesc>
 URLRequestMethod クラスは、URLRequest オブジェクトが POST または GET のどちらのメソッドを使用するかを指定する値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 URLRequestMethod クラスは、URLRequest オブジェクトがデータをサーバーに送信するときに <codeph>POST</codeph> または <codeph>GET</codeph> のどちらのメソッドを使用するかを指定する値を提供します。
 
 </apiDesc><example conref="examples\URLRequestMethodExample.as"> 次の例では、ローカルテキストファイルで検出されたデータをロードして表示します。また、イベント処理情報も出力します。
 
 <p><b>注意：</b>この例を実行するには、example.txt ファイルを SWF ファイルと同じディレクトリに配置します。このファイルは、いくつかの単語またはテキスト行を含む単純なテキストファイルとする必要があります。
 </p>
 <p>コード例では、次の処理が実行されます。</p>
 <ol>
    <li>コンストラクター関数は <codeph>loader</codeph> という URLLoader インスタンスを作成します。</li>
    <li><codeph>loader</codeph> オブジェクトが <codeph>configureListeners()</codeph> メソッドに渡されます。このメソッドは、サポートされる各 URLLoader イベントのリスナーを追加します。</li>
  <li><codeph>request</codeph> という URLRequest インスタンスが作成されます。これは、ロードされるファイルの名前を指定します。</li>
  <li>要求の <codeph>method</codeph> プロパティは、<codeph>URLRequestMethod.POST</codeph> に設定されます。</li>
    <li>次に <codeph>request</codeph> オブジェクトが、テキストファイルをロードする <codeph>loader.load()</codeph> に渡されます。</li>
  <li>URLLoader によるテキストファイルのロードが終了すると、<codeph>Event.COMPLETE</codeph> イベントが発生し、<codeph>completeHandler()</codeph> メソッドがトリガーされます。<codeph>completeHandler()</codeph> メソッドは、単純にテキストファイルのコンテンツである <codeph>data</codeph> プロパティをトレースします。</li>
 </ol>
<codeblock>


package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLRequestMethodExample extends Sprite {

        public function URLRequestMethodExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("example.txt");
            
            request.method = URLRequestMethod.POST;
            loader.load(request);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLRequest"><linktext>URLRequest</linktext></link><link href="flash.net.xml#URLVariables"><linktext>URLVariables</linktext></link></related-links><apiValue id="flash.net:URLRequestMethod:DELETE"><apiName>DELETE</apiName><shortdesc>
	 URLRequest オブジェクトが DELETE であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DELETE</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URLRequest オブジェクトが <codeph>DELETE</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:GET"><apiName>GET</apiName><shortdesc>
	 URLRequest オブジェクトが GET であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>GET</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URLRequest オブジェクトが <codeph>GET</codeph> であることを指定します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:HEAD"><apiName>HEAD</apiName><shortdesc>
	 URLRequest オブジェクトが HEAD であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>HEAD</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URLRequest オブジェクトが <codeph>HEAD</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:OPTIONS"><apiName>OPTIONS</apiName><shortdesc>
	 URLRequest オブジェクトが OPTIONS であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>OPTIONS</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URLRequest オブジェクトが <codeph>OPTIONS</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:POST"><apiName>POST</apiName><shortdesc>
	 URLRequest オブジェクトが POST であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>POST</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URLRequest オブジェクトが <codeph>POST</codeph> であることを指定します。
	 
	 <p><i>注意：</i><ph platform="actionscript">Adobe AIR で実行中のコンテンツの場合、</ph><ph platform="javascript">When</ph> で <codeph>navigateToURL()</codeph> 関数を使用すると、ランタイムでは、POST メソッドを使用する URLRequest（<codeph>method</codeph> プロパティが <codeph>URLRequestMethod.POST</codeph> に設定されているもの）は、GET メソッドとして処理されます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequestMethod:PUT"><apiName>PUT</apiName><shortdesc>
	 URLRequest オブジェクトが PUT であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>PUT</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URLRequest オブジェクトが <codeph>PUT</codeph> であることを指定します。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:FileReferenceList"><apiName>FileReferenceList</apiName><shortdesc>
 FileReferenceList クラスは、ユーザーがアップロードするファイルを選択する手段を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>FileReferenceList
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>1 つまたは複数のファイルをアップロードする手段を提供します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 FileReferenceList クラスは、ユーザーがアップロードするファイルを選択する手段を提供します。FileReferenceList オブジェクトは、ユーザーのディスク上にあるローカルファイルを FileReference オブジェクトの配列として表現します。FileReference オブジェクトと FileReference クラスの詳細および重要な考慮事項については、FileReference クラスを参照してください。これらは FileReferenceList で使用します。
 
 <p>FileReferenceList クラスを使用するには</p>
 <ul>
 <li>このクラスのインスタンスを作成します。<codeph>var myFileRef = new FileReferenceList();</codeph></li>
 <li><codeph>FileReferenceList.browse()</codeph> メソッドを呼び出して、アップロードするファイルをユーザーが選択できるダイアログボックスを開きます。<codeph>myFileRef.browse();</codeph></li>
 <li><codeph>browse()</codeph> メソッドが正常に呼び出された後、FileReferenceList オブジェクトの <codeph>fileList</codeph> プロパティに FileReference オブジェクトの配列が設定されます。</li>
 <li><codeph>FileReference.upload()</codeph> を <codeph>fileList</codeph> 配列のエレメントごとに呼び出します。</li>
 </ul>
 
 <p>FileReferenceList クラスには、<codeph>browse()</codeph> メソッドや、複数のファイルを扱うための <codeph>fileList</codeph> プロパティなどが含まれます。<codeph>FileReferenceList.browse()</codeph> の呼び出しが実行されている間に、SWF ファイル再生は Linux および Mac OS X 10.1 以前の Flash Player のスタンドアローンバージョンと外部バージョンおよび AIR で一時停止します。</p>
 
 </apiDesc><example conref="examples\FileReferenceListExample.as"> 次の例は、イベントを使用して複数ファイルのアップロードを管理する方法を示しています。CustomFileReferenceList クラスは FileReferenceList を継承し、<codeph>complete</codeph> イベントを含んでいます。このイベントは、FileReferenceList オブジェクト内の個々のファイルがアップロードされるたびに送出されます。FileReferenceListExample クラスの <codeph>LIST_COMPLETE</codeph> イベントは、FileReferenceList オブジェクト内のすべてのファイルがアップロードされると送出されます。
 
 <p>この例を実行するには、ファイルアップロードの受け取り処理を記述したスクリプトを、http://www.[yourDomain].com/yourUploadHandlerScript.cfm に配置します。SWF ファイルの場所とファイルのアップロード先によっては、「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルするか、Flash<sup>®</sup> Player のセキュリティ設定を更新してこのファイルのネットワークアクセスを許可する必要がある場合もあります。アップロードサーバーがリモートで、この例をデスクトップコンピューターから実行する場合、サーバーには "crossdomain.xml" ファイルが必要です。</p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.FileReferenceList;
 
    public class FileReferenceListExample extends Sprite {
        public static var LIST_COMPLETE:String = "listComplete";
        public function FileReferenceListExample() {
            initiateFileUpload();
        }

        private function initiateFileUpload():void {
            var fileRef:CustomFileReferenceList = new CustomFileReferenceList();
            fileRef.addEventListener(FileReferenceListExample.LIST_COMPLETE, listCompleteHandler);
            fileRef.browse(fileRef.getTypes());
        }

        private function listCompleteHandler(event:Event):void {
            trace("listCompleteHandler");
        }
    }
}
 
import flash.events.*;
import flash.net.FileReference;
import flash.net.FileReferenceList;
import flash.net.FileFilter;
import flash.net.URLRequest;
 
class CustomFileReferenceList extends FileReferenceList {
    private var uploadURL:URLRequest;
    private var pendingFiles:Array;

    public function CustomFileReferenceList() {
        uploadURL = new URLRequest();
        uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
        initializeListListeners();
    }

    private function initializeListListeners():void {
        addEventListener(Event.SELECT, selectHandler);
        addEventListener(Event.CANCEL, cancelHandler);
    }

    public function getTypes():Array {
        var allTypes:Array = new Array();
        allTypes.push(getImageTypeFilter());
        allTypes.push(getTextTypeFilter());
        return allTypes;
    }
 
    private function getImageTypeFilter():FileFilter {
        return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
    }
 
    private function getTextTypeFilter():FileFilter {
        return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
    }
 
    private function doOnComplete():void {
        var event:Event = new Event(FileReferenceListExample.LIST_COMPLETE);
        dispatchEvent(event);
    }
 
    private function addPendingFile(file:FileReference):void {
        trace("addPendingFile: name=" + file.name);
        pendingFiles.push(file);
        file.addEventListener(Event.OPEN, openHandler);
        file.addEventListener(Event.COMPLETE, completeHandler);
        file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
        file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        file.upload(uploadURL);
    }
 
    private function removePendingFile(file:FileReference):void {
        for (var i:uint; i &lt; pendingFiles.length; i++) {
            if (pendingFiles[i].name == file.name) {
                pendingFiles.splice(i, 1);
                if (pendingFiles.length == 0) {
                    doOnComplete();
                }
                return;
            }
        }
    }
 
    private function selectHandler(event:Event):void {
        trace("selectHandler: " + fileList.length + " files");
        pendingFiles = new Array();
        var file:FileReference;
        for (var i:uint = 0; i &lt; fileList.length; i++) {
            file = FileReference(fileList[i]);
            addPendingFile(file);
        }
    }
 
    private function cancelHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("cancelHandler: name=" + file.name);
    }
 
    private function openHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("openHandler: name=" + file.name);
    }
 
    private function progressHandler(event:ProgressEvent):void {
        var file:FileReference = FileReference(event.target);
        trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
    }
 
    private function completeHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("completeHandler: name=" + file.name);
        removePendingFile(file);
    }
 
    private function httpErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("httpErrorHandler: name=" + file.name);
    }
 
    private function ioErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("ioErrorHandler: name=" + file.name);
    }
 
    private function securityErrorHandler(event:Event):void {
        var file:FileReference = FileReference(event.target);
        trace("securityErrorHandler: name=" + file.name + " event=" + event.toString());
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>FileReference</linktext></link></related-links><adobeApiEvent id="flash.net:FileReferenceList_flash.events.Event.SELECT_select"><apiName>select</apiName><shortdesc>
 ユーザーがアップロードするファイルをファイル参照ダイアログボックスから 1 つ以上選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example demonstrates the usage of the <code>select</code> event.
 <listing version="2.0">
 import flash.net.FileReferenceList;
 import flash.net.FileReference;
 
 var listener:Object = new Object();
 
 listener.onSelect = function(fileRefList:FileReferenceList) {
 	trace("onSelect");
 	var list:Array = fileRefList.fileList;
 	var item:FileReference;
 	for(var i:Number = 0; i &lt; list.length; i++) {
 		item = list[i];
 		trace("name: " + item.name);
 		trace(item.addListener(this));
 		item.upload("http://www.yourdomain.com/");
 	}
 }
 
 listener.onComplete = function(file:FileReference):void {
 	trace("onComplete: " + file.name);
 }
 
 var fileRef:FileReferenceList = new FileReferenceList();
 fileRef.addListener(listener);
 fileRef.browse();
 </listing>
 </maelexample></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ユーザーがアップロードするファイルをファイル参照ダイアログボックスから 1 つ以上選択したときに送出されます。（このダイアログボックスは、<codeph>FileReferenceList.browse()</codeph> メソッド、<codeph>FileReference.browse()</codeph> メソッド、または <codeph>FileReference.download()</codeph> メソッドを呼び出したときに開かれます。）ユーザーがファイルを選択し、「保存」などをクリックして操作を確定すると、ユーザーが選択したファイルを表す FileReference オブジェクトが <codeph>FileReferenceList</codeph> オブジェクトに設定されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReferenceList_flash.events.Event.CANCEL_cancel"><apiName>cancel</apiName><shortdesc>
 ユーザーがファイル参照ダイアログボックスを閉じると、送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>
 </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ユーザーがファイル参照ダイアログボックスを閉じると、送出されます。（このダイアログボックスは、<codeph>FileReferenceList.browse()</codeph> メソッド、<codeph>FileReference.browse()</codeph> メソッド、または <codeph>FileReference.download()</codeph> メソッドを呼び出したときに開かれます。）
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:FileReferenceList:FileReferenceList"><apiName>FileReferenceList</apiName><shortdesc>
 	 新しい FileReferenceList オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a new <code>FileReferenceList</code> object,
	 iterates over each selected file, and outputs their names.
	 <listing version="2.0">
	 import flash.net.FileReferenceList;
	 
	 var listener:Object = new Object();
	 listener.onSelect = function(fileRefList:FileReferenceList) {
	 	trace("onSelect");
	 	var arr:Array = fileRefList.fileList;
	 	for(var i:Number = 0; i &lt; arr.length; i++) {
	 		trace("name: " + arr[i].name);
	 	}
	 }
	 
	 var fileRef:FileReferenceList = new FileReferenceList();
	 fileRef.addListener(listener);
	 fileRef.browse();
	 </listing>
  	 
  	 </maelexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
 	 新しい FileReferenceList オブジェクトを作成します。FileReferenceList オブジェクトで <codeph>browse()</codeph> メソッドが呼び出され、ユーザーがファイルを選択するまでは、FileReferenceList オブジェクトには何も含まれません。FileReference オブジェクトで <codeph>browse()</codeph> を呼び出すと、このオブジェクトの <codeph>fileList</codeph> プロパティに <codeph>FileReference</codeph> オブジェクトの配列が設定されます。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#FileReference"><linktext>FileReference</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:FileReferenceList:browse"><apiName>browse</apiName><shortdesc>
	 アップロードするローカルファイルを 1 つ以上選択できるファイル参照ダイアログボックスを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><oldexample><pre>
	 // ask the user to choose an image file for upload
	 var fileRef = new FileReference();
	 if (fileRef.browse(["Images", "jpg;gif;png", "Flash Movies", "swf"])) {
	   trace("Opened " + fileRef.name);
	 } else {
	   trace("User canceled");
	 }
	 </pre>
	 
	 
	 </oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>次の理由によりスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>typeFilter</codeph> 配列に、正しい形式の FileFilter オブジェクトが含まれていないと、例外がスローされます。正しいフィルター形式について詳しくは、FileFilter の説明を参照してください。
	 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
     
	  
	  </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>パラメーターが有効で、ファイル参照ダイアログボックスが表示された場合に、<codeph>true</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>typeFilter</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>ダイアログボックスに表示するファイルをフィルターにかける場合に使用する FileFilter インスタンスの配列です。このパラメーターを省略すると、すべてのファイルが表示されます。詳細については、<xref href="FileFilter.html">FileFilter</xref> クラスを参照してください。 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>アップロードするローカルファイルを選択できるファイル参照ダイアログボックスを表示します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 アップロードするローカルファイルを 1 つ以上選択できるファイル参照ダイアログボックスを表示します。このダイアログボックスは、オペレーティングシステムのネイティブのダイアログボックスです。
	 
	 <p platform="actionscript">Flash Player 10 以降では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。</p>
	 
	 <p>このメソッドが呼び出されて、ユーザーが正常にファイルを選択すると、この FileReferenceList オブジェクトの <codeph>fileList</codeph> プロパティに FileReference オブジェクトの配列が設定されます。ユーザーが選択したファイル 1 つにつき 1 つの FileReference オブジェクトになります。これ以降 FileReferenceList.browse() メソッドが呼び出されるたびに、<codeph>FileReferenceList.fileList</codeph> プロパティは、ダイアログボックスでユーザーが選択したファイルに再設定されます。</p>
	 
	 <p>どのファイルをダイアログボックスに表示するかを決定するために、<codeph>typeFilter</codeph> パラメーターを使用できます。</p>
	 
	 <p>FileReferenceList オブジェクトでは、一度に 1 つの <codeph>FileReference.browse()</codeph> セッション、<codeph>FileReference.download()</codeph> セッション、または <codeph>FileReferenceList.browse()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか開けないからです。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference"><linktext>FileReference クラス</linktext></link><link href="flash.net.xml#FileFilter"><linktext>FileFilter class</linktext></link></related-links><adobeApiEvent id="flash.net:FileReferenceList:browse_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アップロード対象の項目をユーザーがダイアログボックスで正常に選択したときに呼び出されます。
	 </apiDesc></adobeApiEventDetail><shortdesc>アップロード対象の項目をユーザーがダイアログボックスで正常に選択したときに呼び出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReferenceList:browse_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ユーザーが「キャンセル」をクリックするかダイアログボックスを閉じたときに呼び出されます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>ユーザーが「キャンセル」をクリックするかダイアログボックスを閉じたときに呼び出されます。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:FileReferenceList:fileList:get"><apiName>fileList</apiName><shortdesc>
	 FileReference オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><oldexample>The following example demonstrates the <code>fileList</code> property.
	 <listing version="2.0">
	 import flash.net.FileReferenceList;
	 import flash.net.FileReference;
	 
	 var listener:Object = new Object();
	 listener.onSelect = function(fileRefList:FileReferenceList) {
	 	trace("onSelect");
	 	var list:Array = fileRefList.fileList;
	 	var item:FileReference;
	 	for(var i:Number = 0; i &lt; list.length; i++) {
	 		item = list[i];
	 		trace("name: " + item.name);
	 	}
	 }
	 
	 var fileRef:FileReferenceList = new FileReferenceList();
	 fileRef.addListener(listener);
	 fileRef.browse();
	 </listing>
	 
	  
	  </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier><apiTipTexts><apiTipText>FileReference オブジェクトの配列です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 <codeph>FileReference</codeph> オブジェクトの配列です。
	 
	 <p><codeph>FileReferenceList.browse()</codeph> メソッドが呼び出され、<codeph>browse()</codeph> メソッドが開いたダイアログボックスからユーザーがファイルを選択すると、このプロパティに FileReference オブジェクトの配列が設定されます。FileReference オブジェクトのそれぞれが、ユーザーが選択したファイルを表します。その後、この配列を使用して、<codeph>FileReference.upload()</codeph> メソッドで各ファイルをアップロードできます。一度に 1 つのファイルをアップロードする必要があります。</p>
	 
	 <p><codeph>fileList</codeph> プロパティは、browse() が FileReferenceList オブジェクトで呼び出されるたびに新しく設定されます。</p>
	 
	 <p><codeph>FileReference</codeph> オブジェクトのプロパティについては、FileReference クラスの説明を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference"><linktext>FileReference</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:FileReference"><apiName>FileReference</apiName><shortdesc>
  FileReference クラスには、ユーザーのコンピューターとサーバーとの間でファイルをアップロードおよびダウンロードするための手段があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>FileReference, FileReference.browse, FileReference.download, FileReference.create, browse, download, create
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileReference クラスには、ユーザーのコンピューターとサーバーとの間でファイルをアップロードおよびダウンロードするための手段があります。オペレーティングシステムのダイアログボックスを使用して、アップロードするファイルや、ダウンロード先の場所をユーザーが選択できるようにします。各 FileReference オブジェクトはユーザーのディスク上にある 1 つのファイルを参照し、ファイルのサイズ、タイプ、名前、作成日、変更日、クリエータータイプ（Macintosh のみ）に関する情報を保持するプロパティを備えています。 
  
  <p><b>注意：</b> Adobe AIR では、FileReference クラスを拡張する File クラスはより多くの機能を提供し、FileReference クラスよりもセキュリティの制限が小さくなっています。</p>
  
  <p>FileReference インスタンスは、次の方法で作成できます。</p>
  <ul>
  <li>FileReference コンストラクターで <codeph>new</codeph> 演算子を使用する方法：<codeph>var myFileReference = new FileReference();</codeph></li>
  
  <li><codeph>FileReferenceList.browse()</codeph> メソッドを呼び出す方法です。これによって FileReference オブジェクトの配列が作成されます。</li>
  </ul>
  
  <p>アップロード処理の実行中、FileReference オブジェクトのすべてのプロパティの値が、<codeph>FileReference.browse()</codeph> または <codeph>FileReferenceList.browse()</codeph> メソッドの呼び出しによって設定されます。ダウンロード処理の実行中、<codeph>name</codeph> プロパティの値は <codeph>select</codeph> イベントが送出されたときに設定されます。これ以外のすべてのプロパティの値は、<codeph>complete</codeph> イベントが送出されたときに設定されます。</p>
  
  <p><codeph>browse()</codeph> メソッドはオペレーティングシステムのダイアログボックスを開いて、ユーザーがアップロード対象のファイルを選択できるようにします。<codeph>FileReference.browse()</codeph> メソッドを使用すると、ユーザーは単一のファイルを選択できます。<codeph>FileReferenceList.browse()</codeph> メソッドを使用すると、複数のファイルを選択できます。<codeph>browse()</codeph> メソッドの呼び出しが正常に終了したら、<codeph>FileReference.upload()</codeph> メソッドを呼び出してファイルを 1 つずつアップロードします。<codeph>FileReference.download()</codeph> メソッドは、ファイルの保存先をユーザーに指定させ、リモート URL からのダウンロードを開始します。</p>
  
  <p><codeph>browse()</codeph> または <codeph>download()</codeph> メソッドによって生成されるダイアログボックスでのファイルのデフォルトの場所を、FileReference クラスおよび FileReferenceList クラスを使って設定することはできません。ダイアログボックスに表示されるデフォルトの場所は、最後に参照されたフォルダー（その場所を決定できる場合）またはデスクトップです。これらのクラスを使って、転送ファイルを読み込んだり、転送ファイルに書き込んだりすることはできません。これらのクラスを使用しても、アップロードまたはダウンロードを開始した SWF ファイルが、アップロードファイルやダウンロードファイル、またはユーザーのディスクのファイルの場所にアクセスすることはできません。</p>
  
  <p>また FileReference と FileReferenceList クラスは認証方法も提供しません。認証が必要なサーバーでは、Flash<sup>®</sup> Player ブラウザープラグインを使ってファイルをダウンロードできますが、すべての Player でのアップロード、およびスタンドアローンまたは外部 Player でのダウンロードは失敗します。FileReference イベントをリッスンして、処理が正常に終了したかどうかを確認して、エラー処理を行います。</p>
  
  <p><ph platform="actionscript">Flash Player で実行されるコンテンツの場合、または</ph>アプリケーションセキュリティサンドボックス外の、Adobe AIR で実行されるコンテンツの場合、アップロード操作およびダウンロード操作では、それ自身のドメイン内および URL ポリシーファイルが指定するドメイン内のファイルにのみアクセスできます。アップロードまたはダウンロードを開始しているコンテンツが、ファイルサーバーと同じドメインに属していない場合、ファイルサーバーにポリシーファイルを配置します。</p>
  
  <p>Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph>FileReference.browse()</codeph>、<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、<codeph>FileReference.load()</codeph> および <codeph>FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph>FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p>
  
  <p platform="actionscript"><codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph>、または <codeph>FileReference.download()</codeph> メソッド呼び出しの実行中、Linux および Mac OS X 10.1 以前でのスタンドアローンと外部バージョンの Flash Player および AIR では、SWF ファイルの再生が一時停止します。</p>
  
  <p platform="actionscript">パラメーターが指定されていない場合は、次のサンプルの HTTP <codeph>POST</codeph> 要求が Flash Player からサーバーサイドスクリプトに送信されます。
  </p>
  
  <pre platform="actionscript">
  POST /handler.cfm HTTP/1.1 
  Accept: text/~~
  Content-Type: multipart/form-data; 
  boundary=----------Ij5ae0ae0KM7GI3KM7 
  User-Agent: Shockwave Flash 
  Host: www.example.com 
  Content-Length: 421 
  Connection: Keep-Alive 
  Cache-Control: no-cache
  
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filename"
  
  MyFile.jpg
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filedata"; filename="MyFile.jpg"
  Content-Type: application/octet-stream
  
  FileDataHere
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Upload"
  
  Submit Query
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--
  </pre>
  
  <p platform="actionscript">Flash Player が次の HTTP <codeph>POST</codeph> 要求を送信するのは、ユーザーが <codeph>"api_sig"</codeph>、<codeph>"api_key"</codeph>、および <codeph>"auth_token"</codeph> パラメーターを指定した場合です。
  </p>
  
  <pre platform="actionscript">
  POST /handler.cfm HTTP/1.1 
  Accept: text/~~
  Content-Type: multipart/form-data; 
  boundary=----------Ij5ae0ae0KM7GI3KM7 
  User-Agent: Shockwave Flash 
  Host: www.example.com 
  Content-Length: 421 
  Connection: Keep-Alive 
  Cache-Control: no-cache
  
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filename"
  
  MyFile.jpg
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="api_sig"
  
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="api_key"
  
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="auth_token"
  
  XXXXXXXXXXXXXXXXXXXXXX
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Filedata"; filename="MyFile.jpg"
  Content-Type: application/octet-stream
  
  FileDataHere
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7
  Content-Disposition: form-data; name="Upload"
  
  Submit Query
  ------------Ij5GI3GI3ei4GI3ei4KM7GI3KM7KM7--
  </pre>
  </apiDesc><example conref="examples\FileReferenceExample.as"> 次の例では、実行時にロードされるファイルのデータフォーマットとステータス情報を表示します。  
 <p> <b>注意：</b>この例を実行するには、uploadURL.url プロパティを変更して、例の架空の URL ではなく実際の URL を参照するようにします。この URL は、指定した URL のルート Web ディレクトリ内の <codeph>yourUploadHandlerScript.cfm</codeph> という名前のファイルを参照している必要があります。設定に基づいて、「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合もあります。
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileFilter;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReferenceExample extends Sprite {
        private var uploadURL:URLRequest;
        private var file:FileReference;

        public function FileReferenceExample() {
            uploadURL = new URLRequest();
            uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
            file = new FileReference();
            configureListeners(file);
            file.browse(getTypes());
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
            dispatcher.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadCompleteDataHandler);
        }

        private function getTypes():Array {
            var allTypes:Array = new Array(getImageTypeFilter(), getTextTypeFilter());
            return allTypes;
        }

        private function getImageTypeFilter():FileFilter {
            return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
        }

        private function getTextTypeFilter():FileFilter {
            return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function uploadCompleteDataHandler(event:DataEvent):void {
            trace("uploadCompleteData: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
            file.upload(uploadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReferenceList"><linktext>flash.net.FileReferenceList</linktext></link><link href="flash.filesystem.xml#File"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference_flash.events.DataEvent.UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><shortdesc>
    アップロードの正常終了後、サーバーからデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.DataEvent.UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events.DataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
    アップロードの正常終了後、サーバーからデータを受信したときに送出されます。サーバーからデータが返されないと、このイベントは送出されません。
    </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><shortdesc>
	 upload() または uploadUnencoded() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <codeph>upload()</codeph> または <codeph>uploadUnencoded()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/upload()"><linktext>upload()</linktext></link><link href="flash.net.xml#FileReference/uploadUnencoded()"><linktext>uploadUnencoded()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
     アップロードに失敗し、HTTP ステータスコードを使用して失敗を記述することができない場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
     アップロードに失敗し、HTTP ステータスコードを使用して失敗を記述することができない場合に送出されます。<codeph>httpStatus</codeph> イベントが送出された後、<codeph>ioError</codeph> イベントが送出されます。
     
     <p><codeph>httpStatus</codeph> イベントは、アップロードが失敗した場合にのみ送出されます。Flash Player で実行されるコンテンツの場合、このイベントはダウンロードの失敗には適用されません。HTTP エラーのためにダウンロードが失敗した場合は、I/O エラーとして通知されます。</p>
     
     </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.SELECT_select"><apiName>select</apiName><shortdesc>
	ユーザーがアップロードするファイルまたはダウンロードするファイルをファイル参照ダイアログボックスから選択したときに、送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>
    </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	ユーザーがアップロードするファイルまたはダウンロードするファイルをファイル参照ダイアログボックスから選択したときに、送出されます。（このダイアログボックスは、<codeph>FileReference.browse()</codeph> メソッド、<codeph>FileReferenceList.browse()</codeph> メソッド、または <codeph>FileReference.download()</codeph> メソッドを呼び出したときに開かれます。）ユーザーがファイルを選択し、「OK」などをクリックして操作を確認すると、FileReference オブジェクトのプロパティに値が設定されます。
    
    <p><ph platform="actionscript">Flash Player または </ph><ph platform="actionscript">Adobe AIR ランタイム</ph>のアプリケーションセキュリティサンドボックス外で実行されるコンテンツの場合、<codeph>select</codeph> イベントは、どのメソッドがそのイベントを呼び出したかにより、わずかに異なった動作をします。<codeph>select</codeph> イベントが <codeph>browse()</codeph> 呼び出しの後に送出された場合、<ph platform="actionscript">Flash Player または </ph>AIR アプリケーションは、FileReference オブジェクトのすべてのプロパティを読み取ることができます。これは、ユーザーが選択したファイルが、ローカルファイルシステムに存在するためです。 <codeph>select</codeph> イベントが <codeph>download()</codeph> 呼び出しの後に発生した場合、<ph platform="actionscript">Flash Player または </ph>AIR アプリケーションは、<codeph>name</codeph> プロパティのみを読み取ることができます。これは、<codeph>select</codeph> イベントが送出された時点では、ファイルがまだローカルファイルシステムにダウンロードされていないためです。ファイルがダウンロードされ、<codeph>complete</codeph> イベントが送出された時点で、<ph platform="actionscript">Flash Player または </ph>AIR アプリケーションは FileReference オブジェクトの他のすべてのプロパティを読み取ることができます。</p>
    
    </apiDesc><example conref="examples\FileReference_event_select.as"> 次の例では、<codeph>select</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph>uploadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。この例をデスクトップから実行するには、サーバー側にも crossdomain.xml ファイルを置いておく必要があります。<codeph>ioErrorHandler()</codeph> 関数がトリガーされた場合には、問題の <codeph>uploadURL</codeph> を更新して、アップロードを受信するよう設定された有効な URL に 変更する必要があるかもしれません。
<codeblock>
 
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_select extends Sprite {
        private var uploadURL:URLRequest;
        private var file:FileReference;

        public function FileReference_event_select() {
            uploadURL = new URLRequest();
            uploadURL.url = "http://www.[yourDomain].com/yourUploadHandlerScript.cfm";
            file = new FileReference();
            file.addEventListener(Event.SELECT, selectHandler);
            file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            file.addEventListener(Event.COMPLETE, completeHandler);
            file.browse();
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + uploadURL.url);
            file.upload(uploadURL);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
     FileReference.upload() または FileReference.download() メソッドの呼び出しによって、サーバーにファイルをアップロードするか、呼び出し元のセキュリティサンドボックスの外部にあるサーバーからファイルを取得しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>
     
     </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
     <codeph>FileReference.upload()</codeph> または <codeph>FileReference.download()</codeph> メソッドの呼び出しによって、サーバーにファイルをアップロードするか、呼び出し元のセキュリティサンドボックスの外部にあるサーバーからファイルを取得しようとすると、送出されます。発生した特有のエラーを示す text プロパティの値は、通常 <codeph>"securitySandboxError"</codeph> です。呼び出し側の SWF ファイルが自分のドメインの外にある SWF ファイルにアクセスしようとして、アクセス権限がないと発生します。URL ポリシーファイルを使用することで、このエラーに対処できます。
     
     <p>Adobe AIR では、これらのセキュリティ制限は、アプリケーションセキュリティサンドボックス内のコンテンツには適用されません。</p>
     
	 <p>Adobe AIR では、これらのセキュリティ制限は、アプリケーションセキュリティサンドボックス内のコンテンツには適用されません。</p>
	 
     </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
	ファイルのアップロード処理中またはダウンロード処理中に定期的に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><helpid>
    </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	ファイルのアップロード処理中またはダウンロード処理中に定期的に送出されます。<codeph>progress</codeph> イベントは、Flash Player がバイトをサーバーに転送しているときに送出され、最終的に転送が成功しなくても、転送の実行中は定期的に送出されます。ファイルの転送が実際に成功して完了したかどうか、およびそのタイミングを確認するには、<codeph>complete</codeph> イベントを受け取ります。
    
    <p>場合によっては、<codeph>progress</codeph> イベントは受信されません。例えば、転送対象ファイルが非常に小さい場合や、アップロードやダウンロードが非常に短時間に終わる場合、<codeph>progress</codeph> イベントは送出されない場合があります。</p>
    
    <p>ファイルのアップロードの進捗状況は、OS X 10.3 より前の Macintosh プラットフォームでは確認できません。<codeph>progress</codeph> イベントは、アップロード処理中に呼び出されますが、progress イベントの <codeph>bytesLoaded</codeph> プロパティの値は、進捗状況を確認できないことを示す -1 です。</p>
    
    </apiDesc><example conref="examples\FileReference_event_progress.as"> 次の例では、<codeph>progress</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph>downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_progress extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_progress() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            file.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            file.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            file.addEventListener(Event.COMPLETE, completeHandler);
            file.download(downloadURL, fileName);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }
        
        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
        
        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:complete"><linktext>FileReference.complete</linktext></link><link href="flash.events.xml#ProgressEvent"><linktext>flash.events.ProgressEvent</linktext></link><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.OPEN_open"><apiName>open</apiName><shortdesc>
	アップロード処理またはダウンロード処理が開始するときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example shows the usage of the <code>open</code> event.
    It should be made clear that there is no way to actually track the progress
    of a download, just that it hasn't yet finished or failed.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onOpen = function(file:FileReference):void {
      trace("onOpen: " + file.name);
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    </maelexample></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	アップロード処理またはダウンロード処理が開始するときに送出されます。
    
    
    </apiDesc><example conref="examples\FileReference_download.as"> 次の例で、<codeph>download</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph>downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.FileFilter;

    public class FileReference_download extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_download() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
	アップロードまたはダウンロードが失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example shows the usage of the <code>ioError</code> event. 
    Note that for simplicity, none of the other event types are used in this
    example.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onIOError = function(file:FileReference):void {
      trace("onIOError");
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    fileRef.download("http://www.adobe.com/NonExistentFile.pdf", "NonExistentFile.pdf");
    
    </listing>
    
    </maelexample></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	アップロードまたはダウンロードが失敗したときに送出されます。次のいずれかの理由により、ファイル転送に失敗することがあります。
    
    <ul>
    <li>Player でファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生した場合。</li>
    <li>ユーザー名とパスワードなど、認証が必要なサーバーに <ph platform="actionscript">SWF ファイル</ph><ph platform="javascript">AIR アプリケーション</ph>がファイルをアップロードしようとした場合。 <ph platform="actionscript">Flash Player または </ph>Adobe AIR には、アップロード時にユーザーがパスワードを入力する手段が用意されていません。 認証が必要なサーバーに対して、<ph platform="actionscript">SWF ファイル</ph><ph platform="javascript">AIR アプリケーション</ph>がファイルをアップロードしようとすると、アップロードは失敗します。</li>
    <li>スタンドアローンまたは外部 Player 内で、認証が必要なサーバーから <ph platform="actionscript">SWF ファイル</ph><ph platform="javascript">AIR アプリケーション</ph>がファイルをダウンロードしようとした場合。 ダウンロードする際、スタンドアローンまたは外部 Player には、ユーザーがパスワードを入力する手段がありません。認証が必要なサーバーに対して、これらの Player 内の <ph platform="actionscript">SWF ファイル</ph> <ph platform="javascript">AIR アプリケーション</ph>がファイルをダウンロードしようとすると、ダウンロードは失敗します。 <ph platform="actionscript">ファイルのダウンロードは、ActiveX コントロール Player、ブラウザープラグイン Player、および Adobe AIR ランタイムでのみ成功する可能性があります。</ph></li>
    <li><codeph>url</codeph> パラメーター（<codeph>upload()</codeph> メソッド）に渡された値に、無効なプロトコルが含まれている場合。有効なプロトコルは HTTP と HTTPS です。</li>
    </ul>
    
    <p platform="actionscript"><b>重要：</b>ブラウザー内で実行される、つまり、ブラウザープラグインまたは ActiveX コントロールを使用するアプリケーションと、Adobe AIR で実行されるコンテンツでのみ、認証用のユーザー名とパスワードを入力できるダイアログボックスを表示できます。ただし、それはダウンロードの場合のみです。 Flash Player のプラグインまたは ActiveX コントロールバージョンを使用するアップロードの場合、または、スタンドアローンまたは外部 Player を使用するアップロードまたはダウンロードの場合、ファイル転送は失敗します。</p>
    
    </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
	ダウンロードが完了、またはアップロードで HTTP ステータスコード 200 が生成された場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example shows usage of the <code>complete</code> event 
    listener. It should be made clear that there is no way to actually track the progress
    of a download, just that it hasn't yet finished or failed.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onComplete = function(file:FileReference):void {
      trace("onComplete: " + file.name);
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    </maelexample></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	ダウンロードが完了、またはアップロードで HTTP ステータスコード 200 が生成された場合に送出されます。ファイルのダウンロードの場合、<ph platform="actionscript">Flash Player または </ph>Adobe AIR でディスクへのファイル全体のダウンロードが完了すると、このイベントが送出されます。 ファイルのアップロードの場合、転送を受信したサーバーから HTTP ステータスコード 200 を <ph platform="actionscript">Flash Player または </ph>Adobe AIR が受け取った後、このイベントが送出されます。
    
    </apiDesc><example conref="examples\FileReference_event_complete.as"> 次の例では、<codeph>complete</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph>downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_complete extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_complete() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:FileReference_flash.events.Event.CANCEL_cancel"><apiName>cancel</apiName><shortdesc>
	ユーザーがアップロードまたはダウンロードするファイルをファイル参照ダイアログボックスからキャンセルしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example traces a message if the user dismisses the file-
    browsing dialog box. This method
    is triggered only if the user selects Cancel or presses the escape key after
    the dialog box opens.
    
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    
    listener.onCancel = function(file:FileReference):void {
      trace("onCancel");
    }
    
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    if(!fileRef.download(url, "FlashPlatform.pdf")) {
      trace("dialog box failed to open.");
    }
    </listing>
    
    </maelexample></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	ユーザーがアップロードまたはダウンロードするファイルをファイル参照ダイアログボックスからキャンセルしたときに送出されます。ユーザーが他の手段（ブラウザーを閉じたり、現在のアプリケーションを停止したりすること）によってアップロードまたはダウンロードをキャンセルした場合、Flash Player はこのイベントを送出しません。
    
    </apiDesc><example conref="examples\FileReference_event_cancel.as"> 次の例では、<codeph>cancel</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph>downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. 「ローカルでの再生に関するセキュリティ」を「ネットワークにのみアクセスする」に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class FileReference_event_cancel extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_event_cancel() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            file.addEventListener(Event.CANCEL, cancelHandler);
            file.download(downloadURL, fileName);
        }
        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:FileReference:FileReference"><apiName>FileReference</apiName><shortdesc>
    新しい FileReference オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a new <code>FileReference</code> object and 
    initiates the download of a pdf file.
    <listing version="2.0">
    import flash.net.FileReference;
    
    var listener:Object = new Object();
    listener.onComplete = function(file:FileReference) {
      trace("onComplete : " + file.name);
    }
    
    var url:String = "http://www.adobe.com/platform/whitepapers/platform_overview.pdf";
    var fileRef:FileReference = new FileReference();
    fileRef.addListener(listener);
    fileRef.download(url, "FlashPlatform.pdf");
    </listing>
    
    </maelexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
    新しい FileReference オブジェクトを作成します。設定されると、FileReference オブジェクトはユーザーのローカルディスク上のファイルを表します。
    
    </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:FileReference:browse"><apiName>browse</apiName><shortdesc>
    アップロードするファイルを選択できるファイル参照ダイアログボックスを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>browse, FileReference.browse
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
  
  </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>typeFilter</codeph> 配列に、不正な形式の FileFilter オブジェクトが含まれていると、例外がスローされます。FileFilter オブジェクトの正しい形式の詳細については、<xref href="FileFilter.html">FileFilter</xref> クラスを参照してください。
  
    </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
    
    </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>パラメーターが有効で、ファイル参照ダイアログボックスが表示された場合に、<codeph>true</codeph> を返します。  
  
  </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>typeFilter</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>ダイアログボックスに表示するファイルをフィルターにかける場合に使用する FileFilter インスタンスの配列です。このパラメーターを省略すると、すべてのファイルが表示されます。詳細については、<xref href="FileFilter.html">FileFilter</xref> クラスを参照してください。
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    アップロードするファイルを選択できるファイル参照ダイアログボックスを表示します。このダイアログボックスは、オペレーティングシステムのネイティブのダイアログボックスです。ユーザーは、例えば Windows の UNC パスを使用して、ローカルコンピューターまたは他のコンピューターからファイルを選択できます。
    
    <p><b>注意：</b>Adobe AIR で利用可能な File クラスにはさらに固有のシステムファイル選択ダイアログボックスにアクセスするためのメソッドが含まれています。 これらのメソッドは <codeph>File.browseForDirectory()</codeph>、<codeph>File.browseForOpen()</codeph>、<codeph>File.browseForOpenMultiple()</codeph>、および <codeph>File.browseForSave()</codeph> です。</p>
    
    <p>このメソッドを呼び出して、ユーザーが正常にファイルを選択すると、この FileReference オブジェクトのプロパティにそのファイルのプロパティが設定されます。これ以降 <codeph>FileReference.browse()</codeph> メソッドが呼び出されるたびに、FileReference オブジェクトのプロパティは、ダイアログボックスでユーザーが選択したファイルに再設定されます。一度に 1 つの <codeph>browse()</codeph> セッションまたは <codeph>download()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか呼び出せないからです。</p>
    
    <p>どのファイルをダイアログボックスに表示するかを決定するために、<codeph>typeFilter</codeph> パラメーターを使用できます。</p>
    
    <p platform="actionscript">Flash Player 10 および Flash Player 9 Update 5 では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。</p>
    
    <p platform="actionscript">Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph>FileReference.browse()</codeph>、<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、<codeph>FileReference.load()</codeph> および <codeph>FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph>FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p> 
    
  </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#FileReferenceList/event:select"><linktext>select event</linktext></link><link href="flash.net.xml#FileReference/event:cancel"><linktext>cancel event</linktext></link><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForDirectory().xml"><linktext>File.browseForDirectory()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForOpen().xml"><linktext>File.browseForOpen()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForOpenMultiple().xml"><linktext>File.browseForOpenMultiple()</linktext></link><link href="" invalidHref="flash.filesystem.File.browseForSave().xml"><linktext>File.browseForSave()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:browse_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ユーザーが「参照」ファイル選択からアイテムを正しく選択すると、送出されます。
  </apiDesc></adobeApiEventDetail><shortdesc>ユーザーが「参照」ファイル選択からアイテムを正しく選択すると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:browse_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ユーザーがファイルアップロードの参照ウィンドウをキャンセルすると、送出されます。
  
  </apiDesc></adobeApiEventDetail><shortdesc>ユーザーがファイルアップロードの参照ウィンドウをキャンセルすると、送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:cancel"><apiName>cancel</apiName><shortdesc>
  この FileReference オブジェクトで進行中のアップロード処理またはダウンロード処理を取り消します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>cancel, FileReference.cancel
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiTipTexts><apiTipText>進行中のアップロードまたはダウンロードをキャンセルします。
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
  この FileReference オブジェクトで進行中のアップロード処理またはダウンロード処理を取り消します。このメソッドを呼び出しても <codeph>cancel</codeph> イベントは送出されません。このイベントは、ユーザーがファイルアップロードまたはダウンロードのダイアログボックスを閉じて処理をキャンセルした場合にのみ送出されます。
  
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:FileReference:download"><apiName>download</apiName><shortdesc>
    リモートサーバーからファイルをダウンロードするためのダイアログボックスを開きます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>次の状況でスローされます。1）他のブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2) <codeph>request</codeph> に渡された値に、無効なパスまたはプロトコルが含まれている場合。3) ダウンロードするファイルの名前に禁止文字が含まれている場合。4) ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    	</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>信頼されていないローカルコンテンツはインターネットへの接続を許可されません。この問題を回避するには、この SWF ファイルを、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類します。この例外がスローされると、ローカルファイルのセキュリティ制限が原因でアクセスできないファイル名および URL を示すメッセージが送信されます。
    
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとしている場合。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
    
    </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>url.data</codeph> が ByteArray 型の場合、例外がスローされます。<codeph>FileReference.upload()</codeph> メソッドおよび <codeph>FileReference.download()</codeph> メソッドと一緒に使用する場合、<codeph>url.data</codeph> は URLVariables 型または String 型のみになります。
    
    </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、次の理由で発生する可能性があります。1) Flash Player では <codeph>URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。このエラーは、<codeph>FileReference.download()</codeph> メソッドに渡された URLRequest オブジェクトが GET 操作を行うように設定されている場合、および <codeph>System.useCodePage</codeph> が <codeph>true</codeph> に設定されている場合に発生することがあります。2) Flash Player では <codeph>POST</codeph> データにメモリを割り当てることができません。このエラーは、<codeph>FileReference.download()</codeph> メソッドに渡された URLRequest オブジェクトが <codeph>POST</codeph> 操作を行うように設定されている場合に発生することがあります。
    
    </apiDesc><apiItemName>MemoryError</apiItemName><apiOperationClassifier>flash.errors:MemoryError</apiOperationClassifier></apiException><apiException><apiDesc>マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
    
    </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>URLRequest オブジェクトです。URLRequest オブジェクトの <codeph>url</codeph> プロパティには、ローカルコンピューターにダウンロードするファイルの URL を設定する必要があります。このパラメーターが <codeph>null</codeph> の場合、例外がスローされます。URLRequest オブジェクトの <codeph>requestHeaders</codeph> プロパティは無視されるため、カスタム HTTP リクエストヘッダーはアップロードまたはダウンロードでサポートされません。<codeph>POST</codeph> パラメーターまたは GET パラメーターをサーバーに送信するには、<codeph>URLRequest.data</codeph> の値に任意のパラメーターを設定し、<codeph>URLRequest.method</codeph> に <codeph>URLRequestMethod.POST</codeph> または <codeph>URLRequestMethod.GET</codeph> を設定します。
    
    	<p platform="actionscript">一部のブラウザーでは、URL ストリングの長さに制限があるものがあります。長さが 256 文字を超える場合、一部のブラウザーまたはサーバーでは失敗する場合があります。</p>
    
    </apiDesc></apiParam><apiParam><apiItemName>defaultFileName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ダウンロードするファイルとしてダイアログボックスに表示するデフォルトファイル名です。このストリングに、文字 / \ : ~~ ? " &lt; > | % を含めないでください。
    <p>このパラメーターを省略すると、リモート URL のファイル名が構文解析されて、デフォルトとして使用されます。 </p>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc>
    リモートサーバーからファイルをダウンロードするためのダイアログボックスを開きます。<ph platform="actionscript">Flash Player ではアップロードまたはダウンロードできるファイルのサイズに制限はありませんが、このプレーヤーが正式にサポートしているアップロードまたはダウンロードのサイズは最大 100 MB です。</ph>
    
    <p><codeph>download()</codeph> メソッドは、まず、オペレーティングシステムのダイアログボックスを表示して、ユーザーにファイル名を入力してもらった後、ファイルの保存先となるローカルコンピューター上の場所を選択してもらいます。ユーザーが保存場所を選択し、「保存」などをクリックして、ファイルをローカルに保存することを確認すると、リモートサーバーからのダウンロードが開始します。リスナーは、ダウンロードが進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。<codeph>download()</codeph> を呼び出した後にダイアログボックスやダウンロード処理の状態を確認するには、コードで <codeph>cancel</codeph>、<codeph>open</codeph>、<codeph>progress</codeph>、<codeph>complete</codeph> などのイベントをリッスンする必要があります。
    </p>
    
    <p><codeph>FileReference.upload()</codeph> 関数と <codeph>FileReference.download()</codeph> 関数はノンブロッキング処理を行います。これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないアップロードまたはダウンロードは、スコープから離れた時点でキャンセルされます。アップロードまたはダウンロードの続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p>ファイルが正常にダウンロードされると、FileReference オブジェクトのプロパティにローカルファイルのプロパティが設定されます。ダウンロードが成功した場合、<codeph>complete</codeph> イベントが送出されます。</p>
    
    <p>一度に 1 つの <codeph>browse()</codeph> セッションまたは <codeph>download()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか呼び出せないからです。</p>
    
    <p>このメソッドは、どのファイルタイプのダウンロードにも対応しており、HTTP と HTTPS のいずれも使用できます。</p>
    
     <p>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
    
    <p><b>注意：</b>サーバーでユーザー認証が必要な場合、ブラウザー内で実行される、つまり、ブラウザープラグインまたは ActiveX コントロールを使用する SWF ファイルでのみ、認証用のユーザー名とパスワードをユーザーが入力できるダイアログボックスを表示できます。ただし、それはダウンロードの場合のみです。プラグインまたは ActiveX コントロールを使用するアップロードの場合、または、スタンドアローンまたは外部 Player を使用するアップロードとダウンロードの場合、ファイル転送は失敗します。</p>
    
    <p>このメソッドを、<ph platform="javascript">アプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツで</ph>使用するときは、<ph platform="actionscript">Flash Player</ph> <ph platform="javascript">AIR</ph> セキュリティモデルを考慮してください。 </p>
    
    <ul>
    <li>呼び出し元 SWF ファイルが信頼されないコードとしてローカルのサンドボックスに置かれている場合、ロード操作は実行できません。</li>
    
    <li>デフォルトの動作では、サンドボックス間のアクセスは拒否されます。URL ポリシーファイルを追加することによって、Web サイトでリソースにアクセスできるようになります。</li>
    
    <li platform="actionscript">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグのパラメーター）を設定します。</li>
    
    <li platform="actionscript">Flash Player 10 および Flash Player 9 Update 5 では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。</li>
    
    </ul>
    
    <p>ただし、<ph platform="actionscript">Adobe AIR</ph> では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
    
    <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
    
    <ul>
           
    <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
    
    <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
    
    <li>『Developing AIR Applications』の「Getting started with Adobe AIR」の「Understanding AIR Security」<i/></li>
    
    <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
    
    </ul>
    
    <p>Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph>FileReference.browse()</codeph>、<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、<codeph>FileReference.load()</codeph> および <codeph>FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph>FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p> 
	
    </apiDesc><example conref="examples\FileReference_download.as"> 次の例で、<codeph>download</codeph> イベントオブジェクトの使用方法を示します。この例を実行するには、<codeph>downloadURL.url</codeph> プロパティを変更して、架空の http://www ではなく実際のドメインとファイルを参照するようにします。[yourDomain].com/SomeFile.pdf. [ローカルでの再生に関するセキュリティ] を [ネットワークにのみアクセスする] に設定して SWF ファイルをコンパイルする必要がある場合もあります。または Flash Player のセキュリティ設定を更新して、このファイルのネットワークアクセスを許可する必要がある場合があります。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;
    import flash.net.FileFilter;

    public class FileReference_download extends Sprite {
        private var downloadURL:URLRequest;
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function FileReference_download() {
            downloadURL = new URLRequest();
            downloadURL.url = "http://www.[yourDomain].com/SomeFile.pdf";
            file = new FileReference();
            configureListeners(file);
            file.download(downloadURL, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL.url);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>FileReference.upload()</linktext></link><link href="flash.net.xml#FileReference/save()"><linktext>FileReference.save()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:download_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ダウンロード処理が開始したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ダウンロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのダウンロード処理中に定期的に送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルのダウンロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのダウンロード処理が正常に完了したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルのダウンロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ユーザーがダイアログボックスを閉じると、送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ユーザーがダイアログボックスを閉じると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。 
    </apiDesc></adobeApiEventDetail><shortdesc>ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>セキュリティエラーが原因でダウンロードが失敗したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>セキュリティエラーが原因でダウンロードが失敗したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:download_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>次のいずれかの理由で送出されます。
    <ul>
    <li>ファイルの読み込み中または転送中に入出力エラーが発生した場合。</li>
    	<li>Flash Player のスタンドアローンバージョンまたは外部バージョンで実行される SWF コンテンツが、認証が必要なサーバーからファイルをダウンロードしようとした場合。ダウンロードする際、スタンドアローンまたは外部 Player には、ユーザーがパスワードを入力する手段がありません。認証が必要なサーバーに対して、これらの Player 内の SWF がファイルをダウンロードしようとすると、ダウンロードは失敗します。ファイルのダウンロードは、ActiveX コントロール Player やブラウザープラグイン Player でのみ成功する可能性があります。</li>
    </ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc>次のいずれかの理由で送出されます。ファイルの読み込み中または転送中に入出力エラーが発生した場合。もしくは、Flash Player のスタンドアローンバージョンまたは外部バージョンで実行される SWF コンテンツが、認証が必要なサーバーからファイルをダウンロードしようとした場合。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:load"><apiName>load</apiName><shortdesc>
    ユーザーが選択したローカルファイルの読み込みを開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>load, FileReference.load
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、アプリケーションがファイルにメモリを割り当てることができない場合に発生することがあります。ファイルが大きすぎるか、または使用可能なメモリが少なすぎる可能性があります。
    
    </apiDesc><apiItemName>MemoryError</apiItemName><apiOperationClassifier>flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiTipTexts><apiTipText>ローカルファイルの読み込みを開始します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    ユーザーが選択したローカルファイルの読み込みを開始します。<ph platform="actionscript">Flash Player ではアップロード、ダウンロード、ロードまたは保存できるファイルのサイズに制限はありませんが、正式にサポートしているサイズは最大 100 MB です。コンテンツを Flash Player で実行する場合は、<codeph>FileReference.browse()</codeph> メソッドまたは <codeph>FileReferenceList.browse()</codeph> メソッドを呼び出してから、<codeph>load()</codeph> メソッドを呼び出す必要があります。一方、コンテンツをアプリケーションサンドボックスの AIR で実行する場合は、File オブジェクトの <codeph>load()</codeph> メソッドを呼び出す前に、<codeph>browse()</codeph> メソッドを呼び出す必要はありません。AIR の File クラスが、FileReference クラスを拡張します。</ph>
    
    <p>リスナーは、読み込み処理が進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。FileReferenceList オブジェクトを使用すると、ユーザーが読み込むファイルを複数選択できるようになりますが、ファイルは 1 つずつ読み込む必要があります。個別にファイルを読み込むには、FileReference オブジェクトの <codeph>FileReferenceList.fileList</codeph> 配列を繰り返し処理します。</p>
    
    <p>Adobe AIR にはまた、ファイルを読み込むためのさらに多くのオプションを提供する FileStream クラスが含まれています。</p>
    
    <p><codeph>FileReference.upload()</codeph> 関数、<codeph>FileReference.download()</codeph> 関数、<codeph>FileReference.load()</codeph> 関数および <codeph>FileReference.save()</codeph> 関数はノンブロッキング処理を行います。 これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないトランザクションは、スコープから離れた時点でキャンセルされます。アップロード、ダウンロード、読み込みまたは保存の続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p>ファイルのロードが正常に終了すると、コンテンツは FileReference オブジェクトの <codeph>data</codeph> プロパティにバイト配列として格納されます。</p>
    
    <p platform="actionscript">次のセキュリティに関する考慮事項が適用されます。</p>
    
    <ul platform="actionscript">
    <li>呼び出し元 SWF ファイルが信頼されないコードとしてローカルのサンドボックスに置かれている場合、ロード操作は実行できません。</li>
    <li>デフォルトの動作では、サンドボックス間のアクセスは拒否されます。クロスドメインポリシーファイルを追加することによって、Web サイトでリソースにアクセスできるようになります。</li>
    <li>ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。</li>
    </ul>
    
    <p platform="actionscript">ただし、これらの考慮事項はアプリケーションサンドボックス内の AIR コンテンツには適用されません。</p>
    
    <p>Flash Player 10 または AIR 1.5 にパブリッシュする場合は、<codeph>FileReference.browse()</codeph>、<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、<codeph>FileReference.load()</codeph>、<codeph>FileReference.save()</codeph> の中で同時に実行できる操作は 1 つのみです。複数の操作を実行すると、アプリケーションでランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph>FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 および AIR 1.5 にのみ適用されます。Flash Player または AIR の以前のバージョンは同時に複数の操作を実行しても、この制限には影響されません。</p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/data"><linktext>FileReference.data</linktext></link><link href="flash.net.xml#FileReferenceList/fileList"><linktext>FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/save()"><linktext>FileReference.save()</linktext></link><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:load_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>読み込み処理が開始したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>読み込み処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルの読み込み処理中に定期的に送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルの読み込み処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルの読み込み処理が正常に完了したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルの読み込み処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:load_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アプリケーションによるファイルの読み込み中または書き込み中に入出力エラーにより読み込みが失敗した場合に呼び出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc>アプリケーションによるファイルの読み込み中または書き込み中に入出力エラーにより読み込みが失敗した場合に呼び出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:save"><apiName>save</apiName><shortdesc>
    ローカルファイルシステムにファイルを保存するためのダイアログボックスを開きます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>次の状況でスローされます。1）他のブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2）ダウンロードするファイルの名前に禁止文字が含まれている場合。3）ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>data</codeph> が ByteArray 型ではなく、<codeph>toString()</codeph> メソッドを持たない場合、例外がスローされます。<codeph>data</codeph> が XML 型ではなく、<codeph>toXMLString()</codeph> メソッドを持たない場合、例外がスローされます。
    
    </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>マウスイベントやキー入力イベントなどのユーザー操作に応じてメソッドが呼び出されない場合。
    
    </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、Flash Player がファイルにメモリを割り当てることができない場合に発生することがあります。ファイルが大きすぎるか、または使用可能なメモリが少なすぎる可能性があります。
    
    </apiDesc><apiItemName>MemoryError</apiItemName><apiOperationClassifier>flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value=""/><apiDesc>保存されるデータです。データは複数の形式のうちのいずれかになり、以下のように適切に処理されます。
    <ul>
    <li>値が <codeph>null</codeph> である場合、アプリケーションにより ArgumentError 例外がスローされます。</li> 
    <li>値が String の場合は、UTF-8 テキストファイルとして保存されます。</li>
    <li platform="actionscript">値が XML の場合は、XML 形式でテキストファイルに書き込まれます。形式はすべて保持されます。</li> 
    <li>値が ByteArray オブジェクトの場合は、データファイルにそのまま書き込まれます。</li> 
    <li>値が上記のいずれでもない場合、<codeph>save()</codeph> メソッドはオブジェクトの <codeph>toString()</codeph> メソッドを呼び出し、データをストリングに変換して、データをテキストファイルとして保存します。これに失敗すると、アプリケーションにより ArgumentError 例外がスローされます。</li> 
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>defaultFileName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>保存するファイルとしてダイアログボックスに表示するデフォルトファイル名です。このストリングに、文字 / \ : ~~ ? " &lt; > | % を含めないでください。
    <p><ph platform="javascript">Flash Player では、このパラメーターを省略すると、ファイル名はデフォルトでブランクになります。</ph>File オブジェクトがこのメソッドを呼び出すと、ファイル名は File オブジェクトが参照するファイルの名前になります（AIR File クラスは FileReference クラスを拡張します）。</p>
    
	</apiDesc></apiParam></apiOperationDef><apiDesc>
    ローカルファイルシステムにファイルを保存するためのダイアログボックスを開きます。<ph platform="actionscript">Flash Player ではアップロード、ダウンロード、読み込みまたは保存できるファイルのサイズに制限はありませんが、このプレーヤーが正式にサポートしているサイズは最大 100 MB です。</ph>
    
    <p><codeph>save()</codeph> メソッドは、まず、オペレーティングシステムのダイアログボックスを表示して、ユーザーにファイル名を入力してもらった後、ファイルの保存先となるローカルコンピューター上の場所を選択してもらいます。ユーザーが保存場所を選択し、「保存」などをクリックして、ファイルをローカルに保存することを確認すると、保存処理が開始されます。リスナーは、保存処理が進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。<codeph>save()</codeph> を呼び出した後のダイアログボックスや保存処理の状態を確認するには、コードで <codeph>cancel</codeph>、<codeph>open</codeph>、<codeph>progress</codeph> および <codeph>complete</codeph> などのイベントを待機する必要があります。
    </p>
    
    <p>Adobe AIR にはまた、ファイルをローカルで保存するためのさらに多くのオプションを提供する FileStream クラスが含まれています。</p>
    
    <p><codeph>FileReference.upload()</codeph> 関数、<codeph>FileReference.download()</codeph> 関数、<codeph>FileReference.load()</codeph> 関数および <codeph>FileReference.save()</codeph> 関数はノンブロッキング処理を行います。 これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないトランザクションは、スコープから離れた時点でキャンセルされます。アップロード、ダウンロード、読み込みまたは保存の続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p>ファイルが正常に保存されると、FileReference オブジェクトのプロパティにローカルファイルのプロパティが設定されます。保存が成功した場合、<codeph>complete</codeph> イベントが送出されます。</p>
    
    <p>一度に 1 つの <codeph>browse()</codeph> セッションまたは <codeph>save()</codeph> セッションだけを実行できます。これは、一度に 1 つのダイアログボックスしか呼び出せないからです。</p>
    
    <p platform="actionscript">Flash Player では、このメソッドの呼び出しは、マウスのクリックやキー入力などのユーザーイベントに応じてイベントハンドラーで呼び出した場合にのみ成功します。それ以外の場合は、このメソッドを呼び出すと、Flash Player から例外がスローされます。この制限は、アプリケーションサンドボックス内の AIR コンテンツには適用されません。</p>
    
    </apiDesc><example conref="examples\FileReference_save.as"> 次の例は、ファイルのテキストフィールドに入力されるコンテンツを保存します。この例では、編集可能なテキストフィールド（<codeph>MyTextField</codeph>）および編集できない別のテキストフィールド（<codeph>MyButtonField</codeph>）を作成して、マウスクリックに応答する「ボタン」として提供します。ユーザーは最初のテキストフィールドを編集して、テキストフィールドのコンテンツをローカルファイルに保存できます。 マウスクリックのイベントハンドラー <codeph>clickhandler</codeph> は <codeph>FileReference.save()</codeph> メソッド（<codeph>MyFileReference</codeph> という名前の FileReference オブジェクトの場合）を使用して、ユーザーの現在のオペレーティングシステム上でダイアログを開くので、ユーザーはコンテンツをユーザーが付ける名前でローカルファイルに保存できます。
<codeblock>
var MyTextField:TextField = new TextField();
var MyButtonField:TextField = new TextField();
var MyFile:FileReference = new FileReference();

MyTextField.border = true;
MyTextField.type = TextFieldType.INPUT;

MyButtonField.background = true;
MyButtonField.backgroundColor = 0x339933;
MyButtonField.x = 150;
MyButtonField.height = 20;
MyButtonField.text = "Click here to save";

addChild(MyTextField);
addChild(MyButtonField);
MyButtonField.addEventListener(MouseEvent.CLICK, clickhandler);

function clickhandler(e:MouseEvent): void {
    MyFile.save(MyTextField.text);
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/load()"><linktext>FileReferenceList.load()</linktext></link><link href="flash.net.xml#FileReferenceList/data"><linktext>FileReferenceList.data</linktext></link><link href="flash.net.xml#FileReferenceList/upload"><linktext>FileReferenceList.upload</linktext></link><link href="flash.net.xml#FileReferenceList/download"><linktext>FileReferenceList.download</linktext></link><link href="flash.filesystem.xml#FileStream"><linktext>FileStream</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:save_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ダウンロード処理が開始したときに送出されます。
	</apiDesc></adobeApiEventDetail><shortdesc>ダウンロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのダウンロード処理中に定期的に送出されます。
	</apiDesc></adobeApiEventDetail><shortdesc>ファイルのダウンロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのダウンロード処理が正常に完了したときに送出されます。
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルのダウンロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ユーザーがダイアログボックスを閉じると、送出されます。
	</apiDesc></adobeApiEventDetail><shortdesc>ユーザーがダイアログボックスを閉じると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。 
    </apiDesc></adobeApiEventDetail><shortdesc>ダウンロードするファイルをユーザーがダイアログボックスから選択すると、送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:save_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルの読み込み中または転送中に入出力エラーが発生した場合に送出されます。
    
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルの読み込み中または転送中に入出力エラーが発生した場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:upload"><apiName>upload</apiName><shortdesc>
    ユーザーが選択したファイルをリモートサーバーにアップロードする処理を開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>upload, FileReference.upload
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題を回避するには、この SWF ファイルを、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類します。この例外がスローされると、アクセスできないローカルファイルの名前および URL を示すメッセージが送信されます。
    
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとしている場合。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
     
    </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2) URL パラメーターが有効なパスまたはプロトコルでない場合。ファイルのアップロードでは HTTP を使用し、ファイルのダウンロードでは FTP または HTTP を使用する必要があります。3) <codeph>uploadDataFieldName</codeph> パラメーターが <codeph>null</codeph> に設定されている場合。4) ユーザーの mms.cfg ファイルの設定により、この操作が禁止されている場合。
    
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>次の状況でスローされます。1) <codeph>uploadDataFieldName</codeph> パラメーターが空のストリングの場合。2) <codeph>url.data</codeph> が ByteArray 型の場合。<codeph>FileReference.upload()</codeph> メソッドおよび <codeph>FileReference.download()</codeph> メソッドと一緒に使用する場合、<codeph>url.data</codeph> は URLVariables 型または String 型のみになります。3) AIR ランタイム（アプリケーションセキュリティサンドボックス内）で、URLRequest のメソッドが GET または POST でない場合（代わりに <codeph>uploadEncoded()</codeph> を使用します）。
    
    </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、次の理由で発生する可能性があります。1) Flash Player では <codeph>URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。このエラーは、<codeph>FileReference.upload()</codeph> に渡された URLRequest オブジェクトが GET 操作を行うように設定されている場合、および <codeph>System.useCodePage</codeph> が <codeph>true</codeph> に設定されている場合に発生することがあります。2) Flash Player では <codeph>POST</codeph> データにメモリを割り当てることができません。このエラーは、<codeph>FileReference.upload()</codeph> に渡された URLRequest オブジェクトが <codeph>POST</codeph> 操作を行うように設定されている場合に発生することがあります。
    
    </apiDesc><apiItemName>MemoryError</apiItemName><apiOperationClassifier>flash.errors:MemoryError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>URLRequest オブジェクトです。URLRequest オブジェクトの <codeph>url</codeph> プロパティには、HTTP の <codeph>POST</codeph> 呼び出しを使用してアップロードを処理するように設定したサーバースクリプトの URL を設定する必要があります。一部のブラウザーでは、URL ストリングの長さに制限があるものがあります。長さが 256 文字を超える場合、一部のブラウザーまたはサーバーでは失敗する場合があります。このパラメーターが <codeph>null</codeph> の場合、例外がスローされます。URLRequest オブジェクトの <codeph>requestHeaders</codeph> プロパティは無視されるため、カスタム HTTP リクエストヘッダーはアップロードまたはダウンロードでサポートされません。
     
    <p>この URL では、HTTP または HTTPS（セキュアアップロード）を使用できます。HTTPS を使用するには、<codeph>url</codeph> パラメーターで HTTPS url を使用します。<codeph>url</codeph> パラメーターにポート番号を指定しない場合、HTTP の場合はポート 80、HTTPS の場合はポート 443 がデフォルトでは使用されます。</p>
    
    <p><codeph>POST</codeph> パラメーターまたは <codeph>GET</codeph> パラメーターをサーバーに送信するには、URLRequest オブジェクトの <codeph>data</codeph> プロパティに任意のパラメーターを設定し、<codeph>method</codeph> プロパティを <codeph>URLRequestMethod.POST</codeph> または <codeph>URLRequestMethod.GET</codeph> に設定します。</p>
    
    
    </apiDesc></apiParam><apiParam><apiItemName>uploadDataFieldName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>Filedata</apiData><apiDesc>アップロード <codeph>POST</codeph> 操作のファイルデータに先行するフィールド名です。<codeph>uploadDataFieldName</codeph> 値は、null 以外、空白以外のストリングである必要があります。デフォルトでは、<codeph>uploadDataFieldName</codeph> の値は <codeph>"Filedata"</codeph> です。次のサンプル <codeph>POST</codeph> 要求を参照してください。
    <pre>
    Content-Type: multipart/form-data; boundary=AaB03x
    --AaB03x 
    Content-Disposition: form-data; name="Filedata"; filename="example.jpg" 
    Content-Type: application/octet-stream
    ... contents of example.jpg ... 
    --AaB03x-- 
    </pre>
    
    </apiDesc></apiParam><apiParam><apiItemName>testUpload</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>テストファイルアップロードを要求するための設定です。<codeph>testUpload</codeph> が <codeph>true</codeph> の場合、10 KB を超えるファイルに対し、Flash Player は、Content-Length を 0 としてテストファイルアップロードの <codeph>POST</codeph> を試行します。 テストアップロードでは、実際のファイルアップロードが成功するかどうか、必要な場合はサーバー認証が成功するかどうかがチェックされます。 テストアップロードは、Windows プレーヤーでのみ使用できます。
    
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>リモートサーバーへのファイルのアップロードを開始します。
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    ユーザーが選択したファイルをリモートサーバーにアップロードする処理を開始します。<ph platform="actionscript">Flash Player ではアップロードまたはダウンロードできるファイルのサイズに制限はありませんが、このプレーヤーが正式にサポートしているアップロードまたはダウンロードのサイズは最大 100 MB です。</ph>このメソッドを呼び出す前に、<codeph>FileReference.browse()</codeph> メソッドまたは <codeph>FileReferenceList.browse()</codeph> メソッドを呼び出す必要があります。
    
    <p>リスナーは、アップロードが進行中なのか、成功したのか、失敗したのかを示すイベントを受け取ります。FileReferenceList オブジェクトを使用すると、ユーザーが複数のファイルを選択してアップロードすることが可能になりますが、ファイルは 1 つずつアップロードする必要があります。この操作を実行するには、FileReference オブジェクトの <codeph>FileReferenceList.fileList</codeph> 配列で繰り返し処理を実行します。</p>
    
    <p><codeph>FileReference.upload()</codeph> 関数と <codeph>FileReference.download()</codeph> 関数はノンブロッキング処理を行います。これらの関数は呼び出された後、ファイル転送が完了する前に返されます。さらに、FileReference オブジェクトがスコープ外に移動した場合、そのオブジェクトに対して完了していないアップロードまたはダウンロードは、スコープから離れた時点でキャンセルされます。アップロードまたはダウンロードの続行を期待できる限りは、FileReference オブジェクトがスコープ内にあることを確認してください。</p>
    
    <p>ファイルは、<codeph>url</codeph> パラメーターに渡された URL にアップロードされます。URL は、アップロードを許可するよう設定されたサーバースクリプトである必要があります。Flash Player は、HTTP <codeph>POST</codeph> メソッドを使用してファイルをアップロードします。アップロードを処理するサーバースクリプトは、次のエレメントを持つ <codeph>POST</codeph> リクエストを想定しています。</p>
    <ul>
    <li><codeph>Content-Type</codeph> の <codeph>multipart/form-data</codeph></li>
    <li><codeph>Content-Disposition</codeph> の <codeph>name</codeph> 属性の設定がデフォルトの <codeph>"Filedata"</codeph>、<codeph>filename</codeph> 属性の設定がオリジナルファイルの名前</li>
    <li>ファイルのバイナリコンテンツ</li></ul>
    
     <p>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
    
    <p><codeph>POST</codeph> 要求のサンプルについては、<codeph>uploadDataFieldName</codeph> パラメーターの説明を参照してください。<codeph>POST</codeph> パラメーターまたは <codeph>GET</codeph> パラメーターを、<codeph>upload()</codeph> メソッドを使用してサーバーに送信できます。<codeph>request</codeph> パラメーターの説明を参照してください。</p>
    
    <p><codeph>testUpload</codeph> パラメーターが <codeph>true</codeph> で、アップロード対象のファイルが約 10 KB を超える場合、Windows 用の Flash Player は、転送が成功するかどうか検証するために、実際のファイルをアップロードする前にテストアップロードとして中身がゼロの <codeph>POST</codeph> 処理を送信します。その後 Flash Player は、実際のファイル内容を含む 2 番目の <codeph>POST</codeph> 処理を送信します。10 KB 未満のファイルの場合、Flash Player は、アップロード対象の実際のファイル内容を含むアップロード <codeph>POST</codeph> を 1 回だけ実行します。Macintosh 用の Flash Player は、テストアップロードの <codeph>POST</codeph> 処理を実行しません。</p>
    
    <p><b>注意：</b>サーバーでユーザー認証が必要な場合、ブラウザー内で実行される、つまり、ブラウザープラグインまたは ActiveX コントロールを使用する SWF ファイルでのみ、認証用のユーザー名とパスワードをユーザーが入力できるダイアログボックスを表示できます。ただし、それはダウンロードの場合のみです。プラグインまたは ActiveX コントロールを使用するアップロードの場合、または、スタンドアローンまたは外部 Player を使用するアップロードとダウンロードの場合、ファイル転送は失敗します。</p>
    
    <p>このメソッドを、<ph platform="javascript">アプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツで</ph>使用するときは、<ph platform="actionscript">Flash Player</ph> <ph platform="javascript">AIR</ph> セキュリティモデルを考慮してください。 </p>
    
    
    <ul>
    <li>呼び出し元 SWF ファイルが信頼されないコードとしてローカルのサンドボックスに置かれている場合、ロード操作は実行できません。</li>
    
    <li>デフォルトの動作では、サンドボックス間のアクセスは拒否されます。URL ポリシーファイルを追加することによって、Web サイトでリソースにアクセスできるようになります。</li>
    
	<li platform="actionscript">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグのパラメーター）を設定します。</li>
    
    </ul>
    
    <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
    
	<p>詳しくは、次のトピックを参照してください。</p>
    
    <ul>
    
    <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
    
    <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
    
    <li>『Developing AIR Applications』の「Getting started with Adobe AIR」の「Understanding AIR Security」<i/></li>
    
    <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
    </ul>
    <p>Flash Player に追加された新しい機能により、Flash Player 10 にパブリッシュする場合は、<codeph>FileReference.browse()</codeph>、<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、<codeph>FileReference.load()</codeph> および <codeph>FileReference.save()</codeph> の中で、同時に実行できる操作は 1 つのみです。複数の操作を実行すると、Flash Player でランタイムエラー（コード 2174）が発生します。進行中の操作を停止するには、<codeph>FileReference.cancel()</codeph> を使用します。この制限は Flash Player 10 にのみ適用されます。以前のバージョンの Flash Player については、同時に複数の操作を実行しても、この制限には影響されません。</p>
    
    </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/fileList"><linktext>FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/load()"><linktext>FileReference.load()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:upload_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アップロード処理が開始したときに送出されます。
	
    </apiDesc></adobeApiEventDetail><shortdesc>アップロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのアップロード処理中に定期的に送出されます。
	
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルのアップロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのアップロード処理が正常に完了したときに送出されます。
	
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルのアップロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。
	
    </apiDesc></adobeApiEventDetail><shortdesc>ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。
	
    </apiDesc></adobeApiEventDetail><shortdesc>セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>HTTP エラーが原因でアップロードが失敗した場合に送出されます。
	
 	</apiDesc></adobeApiEventDetail><shortdesc>HTTP エラーが原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。
	
    </apiDesc></adobeApiEventDetail><shortdesc>アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:upload_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>次のいずれかの場合に呼び出されます。
    <ul>
    <li><ph platform="actionscript">Flash Player または</ph> Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。</li>
    <li>ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。アップロード中、ユーザーがパスワードを入力する方法はありません。</li>
    <li><codeph>url</codeph> パラメーターに無効なプロトコルが含まれるために、アップロードが失敗した場合。<codeph>FileReference.upload()</codeph> は HTTP または HTTPS を使用する必要があります。</li>
    
    </ul>
    
    </apiDesc></adobeApiEventDetail><shortdesc>次のいずれかの場合に呼び出されます。Flash Player または Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:FileReference:uploadUnencoded"><apiName>uploadUnencoded</apiName><shortdesc>
    ファイルをエンコードせずに URL へのアップロードを開始します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この問題を回避するには、この SWF ファイルを、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類します。この例外がスローされると、アクセスできないローカルファイルの名前および URL を示すメッセージが送信されます。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>次の状況でスローされます。1）他の FileReference ブラウズセッション、または FileReferenceList ブラウズセッションが進行中の場合。ファイルブラウズのセッションは、一度に 1 つのみ実行できます。2) URL パラメーターが有効なパスまたはプロトコルでない場合。ファイルのアップロードには HTTP を使用する必要があります。
	
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>URLRequest オブジェクトです。URLRequest オブジェクトの <codeph>url</codeph> プロパティには、HTTP の <codeph>POST</codeph> 呼び出しを使用してアップロードを処理するように設定したサーバースクリプトの URL を設定する必要があります。一部のブラウザーでは、URL ストリングの長さに制限があるものがあります。長さが 256 文字を超える場合、一部のブラウザーまたはサーバーでは失敗する場合があります。このパラメーターが <codeph>null</codeph> の場合、例外がスローされます。  
	 
	<p>この URL では、HTTP または HTTPS（セキュアアップロード）を使用できます。HTTPS を使用するには、<codeph>url</codeph> パラメーターで HTTPS url を使用します。<codeph>url</codeph> パラメーターにポート番号を指定しない場合、HTTP の場合はポート 80、HTTPS の場合はポート 443 がデフォルトでは使用されます。</p>
	
	<p><codeph>POST</codeph> パラメーターまたは <codeph>GET</codeph> パラメーターをサーバーに送信するには、URLRequest オブジェクトの <codeph>data</codeph> プロパティに任意のパラメーターを設定し、<codeph>method</codeph> プロパティを <codeph>URLRequestMethod.POST</codeph> または <codeph>URLRequestMethod.GET</codeph> に設定します。</p>
   	
    </apiDesc></apiParam><apiTipTexts><apiTipText>ファイルをエンコードせずにリモートサーバーへのアップロードを開始します。 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
    ファイルをエンコードせずに URL へのアップロードを開始します。<codeph>upload()</codeph> メソッドはファイルを form-data エンベロープでエンコードしますが、<codeph>uploadUnencoded()</codeph> メソッドは HTTP 要求の本体でファイルコンテンツをそのまま渡します。送信しようとするデータが、受信するサーバーで理解可能な形式で既にエンコードされている場合、uploadUnencoded() メソッドを使用します。通常、<codeph>uploadeUnencoded()</codeph> メソッドを、<codeph>HTTP/WebDAV PUT</codeph> メソッドと共に使用します。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReferenceList/browse()"><linktext>FileReferenceList.browse()</linktext></link><link href="flash.net.xml#FileReference/download()"><linktext>FileReference.download()</linktext></link><link href="flash.net.xml#FileReferenceList/fileList"><linktext>FileReferenceList.fileList</linktext></link><link href="flash.net.xml#FileReference/upload()"><linktext>upload()</linktext></link></related-links><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アップロード処理が開始したときに送出されます。
	
	</apiDesc></adobeApiEventDetail><shortdesc>アップロード処理が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのアップロード処理中に定期的に送出されます。
	
	</apiDesc></adobeApiEventDetail><shortdesc>ファイルのアップロード処理中に定期的に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルのアップロード処理が正常に完了したときに送出されます。
	
	</apiDesc></adobeApiEventDetail><shortdesc>ファイルのアップロード処理が正常に完了したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。
	
	</apiDesc></adobeApiEventDetail><shortdesc>ファイルアップロードの正常終了後、サーバーからデータを受信したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。
	
	</apiDesc></adobeApiEventDetail><shortdesc>セキュリティ侵害が原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>HTTP エラーが原因でアップロードが失敗した場合に送出されます。
	
 	</apiDesc></adobeApiEventDetail><shortdesc>HTTP エラーが原因でアップロードが失敗した場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。
	
	</apiDesc></adobeApiEventDetail><shortdesc>アップロード操作が正常に完了すると、サーバーは応答 URL と応答ヘッダーを返します。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:FileReference:uploadUnencoded_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>次のいずれかの場合に呼び出されます。
    <ul>
	<li>Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。</li>
	<li>ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。アップロード中、ユーザーがパスワードを入力する方法はありません。</li>
	<li><codeph>url</codeph> パラメーターに無効なプロトコルが含まれるために、アップロードが失敗した場合。<codeph>FileReference.upload()</codeph> は HTTP または HTTPS を使用する必要があります。</li>
	</ul>
	
	</apiDesc></adobeApiEventDetail><shortdesc>次のいずれかの場合に呼び出されます。Adobe AIR によるファイルの読み込み中、書き込み中、または転送中に入出力エラーが発生したためにアップロードが失敗した場合。ユーザー名とパスワードなど、認証が必要なサーバーにファイルをアップロードしようとしたことが原因でアップロードが失敗した場合。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:FileReference:creationDate:get"><apiName>creationDate</apiName><shortdesc>
    ローカルディスク上に存在するファイルの作成日です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>creationDate, FileReference.creationDate
    
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Date</apiValueClassifier><apiException><apiDesc><codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph>、または <codeph>FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph>creationDate</codeph> プロパティの値は <codeph>null</codeph> です。
    
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>ファイル情報にアクセスできない場合、I/O エラーを示すメッセージとともにエラーがスローされます。
    
    </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>ファイルの作成日を Date オブジェクトとして取得します。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    ローカルディスク上に存在するファイルの作成日です。オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しが行われると <codeph>null</codeph> が返されます。
    
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:creator:get"><apiName>creator</apiName><shortdesc>
    Macintosh クリエータータイプのファイルです。このファイルは、Mac OS X より前のバージョンの Mac OS でのみ使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>creator, FileReference.creator
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Macintosh では、<codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph>、または <codeph>FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph>creator</codeph> プロパティの値は <codeph>null</codeph> です。
    
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>Macintosh クリエータータイプです。
    </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    ファイルの Macintosh クリエータータイプです。Macintosh クリエータータイプは、Mac OS X より前のバージョンの Mac OS でのみ使用されます。Windows または Linux では、このプロパティは <codeph>null</codeph> です。FileReference オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しが行われると <codeph>null</codeph> を返します。
    
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference/extension"><linktext>FileReference.extension</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:data:get"><apiName>data</apiName><shortdesc>
    load() メソッドの呼び出しが成功した後に読み込まれるファイルからのデータを表す ByteArray オブジェクト。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><refpath>
    </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier><apiException><apiDesc><codeph>load()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph>data</codeph> プロパティの値は <codeph>null</codeph> です。
    
    </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>ファイルを開くことや読み取ることができない場合、またはファイルへのアクセスで同様のエラーが発生した場合、例外がスローされ、ファイルの I/O エラーを知らせるメッセージが送信されます。この場合、<codeph>data</codeph> プロパティの値は <codeph>null</codeph> です。
    
    </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>ファイルの読み込まれた ByteArray データです。
    </apiTipText></apiTipTexts></apiValueDef><apiDesc>
    <codeph>load()</codeph> メソッドの呼び出しが成功した後に読み込まれるファイルからのデータを表す ByteArray オブジェクト。
    
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link><link href="flash.net.xml#FileReference/load()"><linktext>FileReference.load()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:extension:get"><apiName>extension</apiName><shortdesc>
	 ファイル名拡張子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>参照が初期化されていない場合。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 ファイル名拡張子です。
	 
	 <p>ファイルの拡張子は、名前内の最後のドット（"."）の後の部分です（ドットは含みません）。ファイル名内にドットがない場合、拡張子は <codeph>null</codeph> です。</p>
	 
	 <p><i/>注意：ファイルのタイプを確認するには、<codeph>extension</codeph> プロパティを使用する必要があります。<codeph>creator</codeph> プロパティまたは <codeph>type</codeph> プロパティは使用しないでください。<codeph>creator</codeph> プロパティと <codeph>type</codeph> プロパティは非推奨のプロパティと考えてください。これらのプロパティは、Mac OS の古いバージョンに適用されます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileReference:modificationDate:get"><apiName>modificationDate</apiName><shortdesc>
   ローカルディスク上に存在するファイルの最終変更日です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>modificationDate, FileReference.modificationDate
   
   </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Date</apiValueClassifier><apiException><apiDesc><codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph>、または <codeph>FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph>modificationDate</codeph> プロパティの値は <codeph>null</codeph> です。
   
   </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>ファイル情報にアクセスできない場合、I/O エラーを示すメッセージとともにエラーがスローされます。
   
   </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>ファイルの修正日を Date オブジェクトとして取得します。
   </apiTipText></apiTipTexts></apiValueDef><apiDesc>
   ローカルディスク上に存在するファイルの最終変更日です。FileReference オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しが行われると <codeph>null</codeph> を返します。
   
   </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:name:get"><apiName>name</apiName><shortdesc>
   ローカルディスク上に存在するファイルの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
   </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph> または <codeph>FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。
   
   </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>ファイルの名前をストリングとして取得します。
   </apiTipText></apiTipTexts></apiValueDef><apiDesc>
   ローカルディスク上に存在するファイルの名前です。(<codeph>FileReference.download()</codeph> または <codeph> FileReference.browse()</codeph> の有効な呼び出しにより) FileReference オブジェクトに値が設定されていない場合にこのプロパティの値を取得しようとすると、Flash Player はエラーをスローします。
   <p>FileReference オブジェクトのすべてのプロパティの値は、<codeph>browse()</codeph> メソッドを呼び出すことにより設定されます。<codeph>download()</codeph> メソッドを呼び出した場合、FileReference の他のプロパティと異なり、<codeph>name</codeph> プロパティの値は <codeph>select</codeph> イベントが送出されたときに設定されます。</p>
   
   </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:size:get"><apiName>size</apiName><shortdesc>
  ローカルディスク上に存在するファイルのサイズ（バイト単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><refpath>
  </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc><codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph> または <codeph>FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。
  
  </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>ファイルを開くことや読み取ることができない場合、またはファイルへのアクセスで同様のエラーが発生した場合、例外がスローされ、ファイルの I/O エラーを知らせるメッセージが送信されます。
  
  </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>バイト単位のファイルサイズです。
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  ローカルディスク上に存在するファイルのサイズ（バイト単位）です。<ph platform="actionscript"><codeph>size</codeph> が 0 の場合、例外がスローされます。</ph>
  
  <p platform="actionscript"><i/>注意：ActionScript 3.0 の初期のバージョンでは、<codeph>size</codeph> プロパティは、4 GB 程度までのサイズのファイルをサポートする uint オブジェクトとして定義されていました。現在では、それよりも大きいファイルをサポートする Number オブジェクトとして実装されています。 </p>
  
  </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/browse()"><linktext>FileReference.browse()</linktext></link></related-links></apiValue><apiValue id="flash.net:FileReference:type:get"><apiName>type</apiName><shortdesc>
  ファイル形式です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>type, FileReference.type
  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>FileReference.browse()</codeph>、<codeph>FileReferenceList.browse()</codeph>、または <codeph>FileReference.download()</codeph> メソッドの呼び出しが失敗すると、例外がスローされ、関数の呼び出しシーケンスが正しくないこと、または以前の呼び出しが失敗したことを知らせるメッセージが送信されます。この場合、<codeph>type</codeph> プロパティの値は <codeph>null</codeph> です。
  
  </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>ファイルのタイプまたは拡張子を取得します。
  </apiTipText></apiTipTexts></apiValueDef><apiDesc>
  ファイル形式です。 
  
  <p>Windows または Linux の場合、このプロパティはファイル拡張子になります。Macintosh では、このプロパティは 4 文字のファイルタイプです。これは、Mac OS X より前のバージョンの Mac OS でのみ使用されます。FileReference オブジェクトに値が設定されていない場合に、このプロパティの値を取得する呼び出しを行うと、<codeph>null</codeph> が返されます。</p>
    
	<p>Windows、Linux および Mac OS X の場合、ファイル拡張子（<codeph>name</codeph> プロパティの、最後のドット（.）の後の部分）でファイル形式を示します。</p>
	
  
  </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/extension"><linktext>FileReference.extension</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:SharedObjectFlushStatus"><apiName>SharedObjectFlushStatus</apiName><shortdesc>
 SharedObjectFlushStatus クラスは、SharedObject.flush() メソッドの呼び出しから返されるコードの値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SharedObjectFlushStatus クラスは、<codeph>SharedObject.flush()</codeph> メソッドの呼び出しから返されるコードの値を提供します。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject/flush()"><linktext>SharedObject.flush()</linktext></link></related-links><apiValue id="flash.net:SharedObjectFlushStatus:FLUSHED"><apiName>FLUSHED</apiName><shortdesc>
 フラッシュが正常に完了したことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flushed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 フラッシュが正常に完了したことを示します。
 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/flush()"><linktext>SharedObject.flush()</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObjectFlushStatus:PENDING"><apiName>PENDING</apiName><shortdesc>
 フラッシュが実行できるように、共有オブジェクトのディスク領域を増やすことを促すメッセージがユーザーに対して表示されることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pending</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 フラッシュが実行できるように、共有オブジェクトのディスク領域を増やすことを促すメッセージがユーザーに対して表示されることを示します。
 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/flush()"><linktext>SharedObject.flush()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:URLRequest"><apiName>URLRequest</apiName><shortdesc>
  URLRequest クラスは、すべての情報を 1 つの HTTP 要求にキャプチャします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>The above include is not a mistake, but rather code re-use.
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  URLRequest クラスは、すべての情報を 1 つの HTTP 要求にキャプチャします。URLRequest のオブジェクトは、Loader、URLStream、URLLoader の各クラスの <codeph>load()</codeph> メソッド、およびその他のロード処理に渡され、URL のダウンロードが開始されます。また、FileReference クラスの <codeph>upload()</codeph> メソッドおよび <codeph>download()</codeph> メソッドにも渡されます。
 
  <p platform="actionscript">ローカルファイルシステムのサンドボックスの SWF ファイルは、ネットワーク上のサンドボックス内のリソースからデータを読み込んだり、リソースにデータを書き込んだりしないことがあります。 </p>
 
  <p>デフォルトで、呼び出し元の <ph platform="actionscript">SWF</ph> ファイルおよびロードする URL は、同じドメインにある必要があります。例えば www.adobe.com に置かれている <ph platform="actionscript">SWF</ph> ファイルは、www.adobe.com に置かれているソースからのみデータをロードできます。<ph platform="actionscript">異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</ph></p>
 
  <p> ただし、Adobe AIR では、アプリケーションセキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。Adobe AIR で実行中のコンテンツの場合、アプリケーションセキュリティサンドボックス内のファイルは、次のいずれかの URL スキームを使って URL にアクセスできます。</p>

  <p platform="javascript"> アプリケーションセキュリティドメインのファイル（AIR アプリケーションと共にインストールされるファイル）は、次の URL スキームのいずれかを使用して URL にアクセスできます。</p>
 
 <ul>
 
  <li><codeph>http</codeph> および <codeph>https</codeph> </li>
 
  <li><codeph>file</codeph> </li>
 
  <li><codeph>app-storage</codeph> </li>
 
  <li><codeph>app</codeph> </li>
 
 </ul>
 
  <p>アプリケーションセキュリティサンドボックスにない、<ph platform="actionscript">Adobe AIR で実行される</ph>コンテンツには、<ph platform="actionscript">（Flash Player の)</ph>ブラウザーで実行されるコンテンツと同じ制限が適用され、コンテンツのドメイン<ph platform="actionscript">と URL ポリシーファイルで付与されたアクセス許可によりロード操作が管理されます</ph>。</p>
 
 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
 
 <ul>
 
 <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li>『Developing AIR Applications』の「Getting started with Adobe AIR」の「Understanding AIR Security」<i/></li>
 
  <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
 </ul>
 
 </apiDesc><example conref="examples\URLRequestExample.as"> 次の例では、新しい Loader オブジェクトを作成し、それに XML ファイルへのパスを含む URLRequest オブジェクトを渡します。ロード処理が成功した場合、<codeph>complete</codeph> イベントが送出され、XML ファイル内のデータが出力されます。追加のイベントハンドラーはエラーイベントを含む他のイベントをキャプチャします。
 <p>この例を実行するには、XMLFile.xml というファイルを SWF ファイルと同じディレクトリに配置します。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLRequestExample extends Sprite {

        public function URLRequestExample() {
            var loader:URLLoader = new URLLoader();
            configureListeners(loader);

            var request:URLRequest = new URLRequest("XMLFile.xml");
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Unable to load requested document.");
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            trace("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>FileReference</linktext></link><link href="flash.net.xml#URLRequestHeader"><linktext>URLRequestHeader</linktext></link><link href="flash.net.xml#URLRequestDefaults"><linktext>URLRequestDefaults</linktext></link><link href="flash.net.xml#URLLoader"><linktext>URLLoader</linktext></link><link href="flash.net.xml#URLStream"><linktext>URLStream</linktext></link><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader クラス</linktext></link></related-links><apiConstructor id="flash.net:URLRequest:URLRequest"><apiName>URLRequest</apiName><shortdesc>
     URLRequest オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>リクエストされる URL です。<codeph>url</codeph> プロパティを使用して、URL を後から設定できます。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     URLRequest オブジェクトを作成します。<codeph>System.useCodePage</codeph> が <codeph>true</codeph> の場合、リクエストは Unicode ではなく、システムのコードページを使ってエンコードされます。<codeph>System.useCodePage</codeph> が <codeph>false</codeph> の場合、リクエストはシステムのコードページではなく、Unicode を使ってエンコードされます。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#System/useCodePage"><linktext>flash.system.System.useCodePage</linktext></link></related-links></apiConstructor><apiValue id="flash.net:URLRequest:authenticate:get"><apiName>authenticate</apiName><shortdesc>
	この要求に関する認証要求を処理するかどうかを指定します（true または false）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	この要求に関する認証要求を処理するかどうかを指定します（<codeph>true</codeph> または <codeph>false</codeph>）。<codeph>false</codeph> の場合、認証チャレンジは HTTP エラーを返します。  
	
	<p>以下の認証メソッドがサポートされています。</p>
    
	<ul>
	
		<li>Windows — HTTP 認証（基本 / ダイジェスト）、Windows 統合認証（NTLM および Kerberos を含む）、SSL 証明書認証</li>
    
		<li>Mac — HTTP 認証（基本 / ダイジェスト）、NTLM 認証、SSL 証明書認証</li>
	
	</ul>
	
	<p><b/>注意：<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、および <codeph>HTMLLoader.load()</codeph> の各メソッドは、<codeph>URLRequest.authenticate</codeph> プロパティをサポートしていません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/authenticate"><linktext>flash.net.URLRequestDefaults.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:cacheResponse:get"><apiName>cacheResponse</apiName><shortdesc>
	この要求に対する正常な応答データをキャッシュするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	この要求に対する正常な応答データをキャッシュするかどうかを指定します。<codeph>true</codeph> に設定すると、AIR アプリケーションはオペレーティングシステムの HTTP キャッシュを使用します。
	
	<p><b/>注意：<codeph>HTMLLoader.load()</codeph> メソッドは <codeph>URLRequest.cacheResponse</codeph> プロパティをサポートしていません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/cacheResponse"><linktext>flash.net.URLRequestDefaults.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:contentType:get"><apiName>contentType</apiName><shortdesc>
     data プロパティのコンテンツの MIME コンテンツタイプ。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>data</codeph> プロパティのコンテンツの MIME コンテンツタイプ。
     
     <p>デフォルト値は <codeph>application/x-www-form-urlencoded</codeph> です。</p>
     
     <p><b>注意：</b><codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph> および <codeph>HTMLLoader.load()</codeph> の各メソッドは、<codeph>URLRequest.contentType</codeph> プロパティをサポートしていません。</p>
     
     <p>POST リクエストを送信する場合、<codeph>contentType</codeph> プロパティと <codeph>data</codeph> プロパティの値が正しく対応している必要があります。<codeph>contentType</codeph> プロパティの値は、<codeph>data</codeph> プロパティの値を解釈する方法をサーバーに指示します。 </p>
     
     <ul> 
     <li><codeph>data</codeph> プロパティの値が URLVariables オブジェクトの場合、<codeph>contentType</codeph> の値は <codeph>application/x-www-form-urlencoded</codeph> である必要があります。 </li>
     
     <li> <codeph>data</codeph> プロパティの値が他の型の場合、<codeph>contentType</codeph> の値は送信される POST データ（<codeph>data</codeph> プロパティの値に含まれるバイナリまたはストリングのデータ）の型を示す必要があります。 </li>
     
     <li><codeph>FileReference.upload()</codeph> の場合、リクエストの Content-Type は自動的に <codeph>multipart/form-data</codeph> に設定され、<codeph>contentType</codeph> プロパティの値は無視されます。</li>
     </ul>
     
     <p> Flash Player 10 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
	 <ul>
	 <li>POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li>
	 <li>POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li>
	 </ul>
     <p>また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/data"><linktext>data</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:data:get"><apiName>data</apiName><shortdesc>
     URL リクエストで送信されるデータを含むオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
     URL リクエストで送信されるデータを含むオブジェクトです。 
     
     <p>このプロパティは<codeph>メソッド</codeph>プロパティと一緒に使用します。<codeph>method</codeph> の値が <codeph>GET</codeph> のときは、HTTP クエリ文字列シンタックスを使って、<codeph>data</codeph> の値は <codeph>URLRequest.url</codeph> の値に追加されます。<codeph>method</codeph> の値が <codeph>POST</codeph>（または <codeph>GET</codeph> 以外の値）のときは、<codeph>data</codeph> の値は、HTTP 要求の本文に送信されます。</p>
     
     <p>URLRequest API は、ストリング以外に、バイナリ <codeph>POST</codeph> と URL エンコード変数もサポートします。データオブジェクトには、ByteArray、URLVariables、または String オブジェクトを指定できます。</p>
     
     <p>データが使用される方法は、使用されるオブジェクトの型によって異なります。</p>
     
     <ul>
     
         <li>オブジェクトが ByteArray オブジェクトの場合、ByteArray オブジェクトのバイナリデータは <codeph>POST</codeph> データとして使用されます。<codeph>GET</codeph> の場合、ByteArray 型のデータはサポートされません。<codeph>FileReference.upload()</codeph> および <codeph>FileReference.download()</codeph> の場合も、ByteArray 型のデータはサポートされません。</li>
     
         <li>オブジェクトが URLVariables オブジェクトで、メソッドが <codeph>POST</codeph> の場合、変数は <i>x-www-form-urlencoded</i> 形式を使用してエンコードされ、結果のストリングが <codeph>POST</codeph> データとして使用されます。例外は <codeph>FileReference.upload()</codeph> の呼び出しです。この場合、変数は、<codeph>multipart/form-data</codeph> ポストの個別のフィールドとして送信されます。</li>
     
      <li>オブジェクトが URLVariables オブジェクトで、メソッドが <codeph>GET</codeph> の場合、URLVariables オブジェクトは URLRequest オブジェクトによって送信される変数を定義します。</li>
     
         <li>それ以外の場合、オブジェクトはストリングに変換され、そのストリングが <codeph>POST</codeph> または <codeph>GET</codeph> データとして使用されます。</li>
     
     </ul>
     
     <p>このデータは、<codeph>navigateToURL()</codeph> や <codeph>FileReference.upload()</codeph> などのメソッドで URLRequest オブジェクトが使用されるまで送信されません。</p>
     
     <p><b>注意：</b><codeph>contentType</codeph> の値は、<codeph>data</codeph> プロパティのデータ型に対応させる必要があります。<codeph>contentType</codeph> プロパティの説明の注意を参照してください。</p>
     
     </apiDesc><example conref="examples\URLVariablesExample.as"> 次の例では、新しいブラウザーウィンドウで http://www.[yourDomain].com/application.jsp でホストされるリモートアプリケーションを開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータをアプリケーションに渡します。 
  
 <p>この例のハイライトは、次のとおりです。</p>
 <ol>
    <li>コンストラクター関数が <codeph>request</codeph> という名前の URLRequest インスタンスを作成します。このとき、リモートアプリケーションの URL をパラメーターとして取ります。</li>
    <li>URLVariables オブジェクトが作成され、その 2 つのプロパティに値が割り当てられます。</li>
    <li>URLVariables オブジェクトが URLRequest オブジェクトの <codeph>data</codeph> プロパティに割り当てられます。</li>
    <li><codeph>navigateToURL</codeph> を呼び出して、リモートアプリケーションの URL 用の新しいブラウザーウィンドウを開きます。</li>
 </ol>
 <p> <b>注意：</b>この例を実行するには、この例のリモートアプリケーションの URL を実際の URL に置き換える必要があります。さらに、URLVariables オブジェクトの Flash Player で捕捉した情報を処理するためのサーバーコードが必要です。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLVariables;

    public class URLVariablesExample extends Sprite {

        public function URLVariablesExample() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/method"><linktext>URLRequest.method</linktext></link><link href="flash.net.xml#URLRequestMethod"><linktext>URLRequestMethod</linktext></link><link href="flash.net.xml#URLVariables"><linktext>URLVariables</linktext></link><link href="flash.utils.xml#ByteArray"><linktext>flash.utils.ByteArray</linktext></link><link href="flash.net.xml#URLRequest/contentType"><linktext>contentType</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:digest:set"><apiName>digest</apiName><shortdesc>
     Flash Player キャッシュに保存される（または Flash Player キャッシュから取得される）署名付き Adobe プラットフォームコンポーネントを一意に識別するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>提供されるダイジェストは、ダウンロードされた署名付きファイルから抽出されたファイルのダイジェスト、またはキャッシュからロードされた署名付きファイルから抽出されたファイルのダイジェストとは一致しません。提供されたダイジェストの長さが誤っている場合、または提供されたダイジェストに無効な（16 進数以外の）文字が含まれている場合にも、このエラーがスローされます。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Flash Player キャッシュに保存される（または Flash Player キャッシュから取得される）署名付き Adobe プラットフォームコンポーネントを一意に識別するストリングです。<ph platform="actionscript"> Adobe プラットフォームコンポーネントは、ユーザーのコンピューターに永続的にキャッシュされる SWF コンテンツを含む署名付きファイル（SWZ ファイル）です。すべての SWZ ファイルはアドビ システムズ社によって署名されます。ダイジェストは単一のキャッシュされているファイルに対応します。ファイルを何らかの方法で変更すると、ダイジェストは予期しない方法で変更されます。ダイジェストを使用することにより、複数のドメインにまたがってキャッシュされているファイルを確認できます。同じダイジェストを持つ 2 つのファイルは同じファイルで、異なるダイジェストを持つ 2 つのファイルは同じファイルではありません。 ダイジェストに「なりすます」ファイル、ダイジェストを装うファイルを作成することは（実質的に）できません。 </ph><ph platform="javascript">このプロパティは SWF コンテンツのみに適用され、AIR で実行されている JavaScript コードには適用されません。</ph>
     
     <p platform="actionscript">ダイジェストは、SHA-256 メッセージダイジェストアルゴリズム（16 進数形式で 64 文字長）に基づきます。</p>
     
     <p platform="actionscript">例えば、Flex SDK は Flex フレームワークの SWZ を含みます（また、その SWZ ファイルのダイジェストストリングを提供します）。この SWZ を Web サーバーにポストし、それを URLLoader オブジェクトの <codeph>load()</codeph> メソッドを使用して SWF ファイルに読み込むことができます。エンドユーザーのコンピューターに一致する SWZ ファイルが既にキャッシュされている場合は、そのキャッシュされている SWZ ファイルが使用されます。SWZ ファイルの <codeph>digest</codeph> と提供したダイジェストが一致すると、SWZ ファイルは一致します。それ以外の場合は、指定した URL から SWZ ファイルがアプリケーションによってダウンロードされます。 </p>
     
     <p platform="actionscript">URLRequest オブジェクトの <codeph>digest</codeph> パラメーターは、<codeph>URLLoader.load()</codeph> メソッドを呼び出して SWZ ファイルを読み込む場合にのみ設定します。URLRequest オブジェクトの <codeph>digest</codeph> パロパティが、他のメソッドで設定済みである場合は、IOError 例外がスローされます。</p>
     
     </apiDesc><example conref="examples\URLRequest_digest.as"> 次の例では、キャッシュにリモートファイルをロードしています。ロードの最後で、バイト配列に（署名付きファイルでない）実際のファイルが格納されます。 この例では、<codeph>loadBytes()</codeph> を呼び出すことでロード操作を完了しています。
<codeblock>
 
var myURLReq:URLRequest = new URLRequest();
myURLReq.url = "http://yourdomain/users/jdoe/test01/_rsc/Automated/AssetCaching_rsc/test01/rsl.swz";
myURLReq.digest = "3B0AA28C7A990385E044D80F5637FB036317BB41E044D80F5637FB036317BB41";
var myURLLoader:URLLoader = new URLLoader();
myURLLoader.dataFormat = URLLoaderDataFormat.BINARY;
myURLLoader.addEventListener("complete", onC);

myURLLoad.load(myURLReq);

function onC(e) {
    var someLoader:Loader = new Loader();
    addChild(someLoader);
    someLoader.loadBytes((ByteArray)(myURLLoad.data)); 
}

</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:URLRequest:followRedirects:get"><apiName>followRedirects</apiName><shortdesc>
	リダイレクトを続行するか（true）、続行しないか（false）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	リダイレクトを続行するか（<codeph>true</codeph>）、続行しないか（<codeph>false</codeph>）を指定します。 
	
	<p><b/>注意：<codeph>FileReference.upload()</codeph>、<codeph>FileReference.download()</codeph>、および <codeph>HTMLLoader.load()</codeph> の各メソッドは、<codeph>URLRequest.followRedirects</codeph> プロパティをサポートしていません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/followRedirects"><linktext>URLRequestDefaults.followRedirects</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:manageCookies:get"><apiName>manageCookies</apiName><shortdesc>
	HTTP プロトコルスタックでこの要求のクッキーを管理するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true 
	
	</apiDefaultValue></apiValueDef><apiDesc>
	HTTP プロトコルスタックでこの要求のクッキーを管理するかどうかを指定します。<codeph>true</codeph> の場合、クッキーが要求に追加され、応答クッキーが記憶されます。<codeph>false</codeph> の場合、クッキーは要求に追加されず、応答クッキーは記憶されませんが、ユーザーは直接ヘッダーを操作することでクッキー自体を管理できます。<i/><i/> 
	
	<p>Mac OS では、クッキーは Safari と共有されます。Mac OS でクッキーを消去するには：</p>
	
	<ol>
		<li>Safari を開きます。</li>
      <li>Safari／Preferences を選択し、Security パネルをクリックします。</li>
      <li>「Show Cookies」ボタンをクリックします。</li>
		<li>「Remove All」ボタンをクリックします。</li>
	</ol>
	
	<p>Windows でクッキーを消去するには：</p>
	
	<ol>
		<li>インターネットのプロパティコントロールパネルを開き、「全般」タブをクリックします。</li>
		<li>「Cookie の削除」ボタンをクリックします。 </li>
	</ol>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/manageCookies"><linktext>flash.net.URLRequestDefaults.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:method:get"><apiName>method</apiName><shortdesc>
     HTTP フォーム送信メソッドを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>value</codeph> パラメーターが <codeph>URLRequestMethod.GET</codeph> でも <codeph>URLRequestMethod.POST</codeph> でもない場合。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>URLRequestMethod.GET
     
     </apiDefaultValue></apiValueDef><apiDesc>
     HTTP フォーム送信メソッドを制御します。 
     
     <p><ph platform="actionscript">（ブラウザーの）Flash Player で実行される SWF コンテンツの場合、このプロパティは GET 操作または POST 操作に制限されます。有効な値は <codeph>URLRequestMethod.GET</codeph> または <codeph>URLRequestMethod.POST</codeph> です。</ph></p>
     
     <p><ph platform="actionscript">Adobe AIR で実行されるコンテンツの場合、</ph><ph platform="javascript">そのコンテンツがアプリケーションセキュリティサンドボックス内にあれば、任意のストリング値を使用できます。</ph>それ以外の場合（<ph platform="actionscript">Flash Player で実行されるコンテンツの場合など</ph>）は、GET 操作または POST 操作に制限されます。<ph platform="javascript">有効な値は <codeph>URLRequestMethod.GET</codeph> または <codeph>URLRequestMethod.POST</codeph> です。</ph></p>
     
     <p><ph platform="actionscript">Adobe AIR で実行中のコンテンツの場合、</ph><ph platform="javascript">When</ph> で <codeph>navigateToURL()</codeph> 関数を使用すると、ランタイムでは、POST メソッドを使用する URLRequest（<codeph>method</codeph> プロパティが <codeph>URLRequestMethod.POST</codeph> に設定されているもの）は、GET メソッドとして処理されます。</p>
     
     <p><ph platform="actionscript"><b>注意：</b>Flash Player で実行されているときに、参照されるフォームに本文がない場合、Flash Player では自動的に GET 操作が使用されます。これは、メソッドが <codeph>URLRequestMethod.POST</codeph> に設定されている場合でも同じです。このため、正しいメソッドが使用されるように、ダミーの body を必ず含めることをお勧めします。</ph></p>
     
     </apiDesc><example conref="examples\URLRequest_method.as"> 次の例では、新しいブラウザーウィンドウで http://www.[yourDomain].com/application.jsp でホストされるリモートアプリケーションを開き、URLVariables オブジェクトで捕捉したユーザーセッションに関するデータをアプリケーションに渡します。<codeph>URLRequest.method</codeph> プロパティの値を、<codeph>URLRequestMethod.POST</codeph> に明示的に設定します。
 <p>この例のハイライトは、次のとおりです。</p>
 <ol>
    <li>コンストラクター関数が <codeph>request</codeph> という名前の URLRequest インスタンスを作成します。このとき、リモートアプリケーションの URL をパラメーターとして取ります。</li>
    <li>URLVariables オブジェクトが作成され、その 2 つのプロパティに値が割り当てられます。</li>
    <li>URLVariables オブジェクトが URLRequest オブジェクトの <codeph>data</codeph> プロパティに割り当てられます。</li>
  <li><codeph>URLRequest.method</codeph> プロパティの値が <codeph>URLRequestMethod.POST</codeph> に設定されます。</li>
    <li><codeph>navigateToURL</codeph> を呼び出して、リモートアプリケーションの URL 用の新しいブラウザーウィンドウを開きます。</li>
 </ol>
 <p> <b>注意：</b>この例を実行するには、この例のリモートアプリケーションの URL を実際の URL に置き換える必要があります。さらに、URLVariables オブジェクトの Flash Player で捕捉した情報を処理するためのサーバーコードが必要です。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.net.URLRequestMethod;
    import flash.net.URLVariables;

    public class URLRequest_method extends Sprite {

        public function URLRequest_method() {
            var url:String = "http://www.[yourDomain].com/application.jsp";
            var request:URLRequest = new URLRequest(url);
            
            var variables:URLVariables = new URLVariables();
            variables.exampleSessionId = new Date().getTime();
            variables.exampleUserLabel = "guest";
            request.data = variables;
            request.method = URLRequestMethod.POST;
            
            navigateToURL(request);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.net.xml#URLRequestMethod"><linktext>URLRequestMethod class</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:requestHeaders:get"><apiName>requestHeaders</apiName><shortdesc>
     HTTP リクエストヘッダーの配列が HTTP リクエストに追加されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     HTTP リクエストヘッダーの配列が HTTP リクエストに追加されます。配列は URLRequestHeader オブジェクトから構成されます。配列の各オブジェクトは、次のように名前ストリングと値ストリングを含む URLRequestHeader オブジェクトである必要があります。 
     <codeblock>
     var rhArray:Array = new Array(new URLRequestHeader("Content-Type", "text/html"));
     </codeblock>
     
     <p><ph platform="actionscript">Flash Player および AIR ランタイム</ph> <ph platform="javascript">AIR ランタイム</ph>には、リクエストヘッダーに一定の制限があります。詳細については、URLRequestHeader クラスの説明を参照してください。</p>
     
     <p>URLRequest パラメーターを受け取るメッソドすべてが <codeph>requestHeaders</codeph> プロパティをサポートしているわけではありません。呼び出すメソッドのマニュアルを参照してください。例えば、<codeph>FileReference.upload()</codeph> メソッドおよび <codeph>FileReference.download()</codeph> メソッドは、<codeph>URLRequest.requestHeaders</codeph> プロパティをサポートしていません。</p>
     <p>ブラウザーの制限により、カスタム HTTP リクエストヘッダーは <codeph>POST</codeph> リクエストだけをサポートし、<codeph>GET</codeph> リクエストはサポートしません。</p> 
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:url:get"><apiName>url</apiName><shortdesc>
     リクエストされる URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     リクエストされる URL です。 
     
     <p>Uniform Resource Locator 仕様で危険と説明されている文字（http://www.faqs.org/rfcs/rfc1738.html を参照）や、URLRequest オブジェクトの URL スキームで予約されている文字（予約されている目的以外に使用する場合）は、必ずエンコードしてください。例えば、パーセント（%）記号の場合は <codeph>"%25"</codeph> を、番号記号の場合は <codeph>"%23"</codeph> を使用し、<codeph>"http://www.example.com/orderForm.cfm?item=%23B-3&amp;discount=50%25"</codeph> などと示します。</p>
     
      <p>デフォルトで、URL は呼び出し元のファイルと同じドメインにある必要があります。ただし、コンテンツが <ph platform="actionscript">Adobe AIR</ph> アプリケーションセキュリティボックスで実行中の場合を除きます。<ph platform="actionscript">異なるドメインからデータをロードする必要があるときは、データをホストするサーバーに URL ポリシーファイルを配置します。</ph>詳細については、URLRequest クラスの説明を参照してください。</p>
     
     <p><ph platform="actionscript">Adobe AIR で実行されるコンテンツの場合、アプリケーションセキュリティサンドボックス内のファイル</ph> <ph platform="javascript">Files</ph>（AIR アプリケーションと共にインストールされるファイル）は、次の URL スキームのいずれかを使用して URL にアクセスできます。</p>
     
     <ul>
     
      <li><codeph>http</codeph> および <codeph>https</codeph> </li>
     
      <li><codeph>file</codeph> </li>
     
      <li><codeph>app-storage</codeph> </li>
     
      <li><codeph>app</codeph> </li>
     
     </ul>
     
     <p><b>注意：</b>IPv6（Internet Protocol version 6）は<ph platform="actionscript"> AIR および Flash Player 9.0.115.0 以降のバージョン</ph>でサポートされています。IPv6 は、128 ビットのアドレスをサポートするインターネットプロトコルのバージョンです（32 ビットのアドレスをサポートする、以前の IPv4 プロトコルの機能を向上したものです）。ネットワークインターフェイスでの IPv6 のアクティブ化が必要になる場合があります。詳細については、データをホストするオペレーティングシステムのヘルプを参照してください。ホストしているシステムで IPv6 がサポートされる場合、<ph platform="actionscript">次に示すように</ph>、角括弧（[]）内に URL の IPv6 数値リテラルアドレスを指定できます。 </p>
     
     <ph platform="actionscript">
     <pre>
     rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f]:1935/test
     </pre>
     </ph>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLRequest:useCache:get"><apiName>useCache</apiName><shortdesc>
	この URLRequest がデータを取得する前に、ローカルキャッシュを参照するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiDefaultValue>true
	
	</apiDefaultValue></apiValueDef><apiDesc>
	この URLRequest がデータを取得する前に、ローカルキャッシュを参照するかどうかを指定します。 
	
	<p><b/>注意：<codeph>HTMLLoader.load()</codeph> メソッドは <codeph>URLRequest.useCache</codeph> プロパティをサポートしていません。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/useCache"><linktext>flash.net.URLRequestDefaults.useCache</linktext></link></related-links></apiValue><apiValue id="flash.net:URLRequest:userAgent:get"><apiName>userAgent</apiName><shortdesc>
	HTTP 要求で使用されるユーザーエージェントストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>呼び出し元が AIR アプリケーションセキュリティサンドボックス内に存在しません。
	
	</apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	HTTP 要求で使用されるユーザーエージェントストリングを指定します。 
	
	<p platform="actionscript">デフォルト値は、Flash Player で使用されるユーザーエージェントストリングと同じです。これは、Macintosh、Linux、Windows で異なります。</p>
	
	<p><i/>注意：HTMLLoader オブジェクトの <codeph>load()</codeph> メソッドで URLRequest オブジェクトが使用される場合、このプロパティはユーザーエージェントストリングに影響しません。HTMLLoader オブジェクトに対しユーザーエージェントストリングを設定するには、HTMLLoader オブジェクトの <codeph>userAgent</codeph> プロパティを設定するか、静的な <codeph>URLRequestDefaults.userAgent</codeph> プロパティを設定します。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/userAgent"><linktext>flash.net.URLRequestDefaults.userAgent</linktext></link><link href="../../flash/html/HTMLLoader.html#userAgent"><linktext>flash.html.HTMLLoader.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:FileFilter"><apiName>FileFilter</apiName><shortdesc>
 FileFilter クラスは、FileReference.browse() メソッド、FileReferenceList.browse() メソッド、または File オブジェクト、FileReference オブジェクト、FileReferenceList オブジェクトの browse メソッドを呼び出したときに表示されるファイル参照ダイアログボックスに、ユーザーのシステム上のどのファイルを表示するかを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 FileFilter クラスは、<codeph>FileReference.browse()</codeph> メソッド、<codeph>FileReferenceList.browse()</codeph> メソッド、または File オブジェクト、FileReference オブジェクト、FileReferenceList オブジェクトの browse メソッドを呼び出したときに表示されるファイル参照ダイアログボックスに、ユーザーのシステム上のどのファイルを表示するかを示すために使用します。 FileFilter インスタンスは、オプションの <codeph>typeFilter</codeph> パラメーターの値としてメソッドに渡されます。 FileFilter インスタンスを使用する場合、FileFilter インスタンスに指定されていない拡張子およびファイルタイプは除外されます。つまり、ユーザーはそれらを選択できません。 FileFilter オブジェクトをメソッドに渡さないと、すべてのファイルがダイアログボックスに表示されます。
 
 <p>FileFilter インスタンスは次の 2 つの方法で使用できます。</p>
 
 <ul>
 
   <li>説明と ファイル拡張子のみ</li>
 
   <li>説明と ファイル拡張子および Macintosh ファイルタイプ</li>
 
 </ul>
 
 <p>これら 2 つの形式を browse メソッドの 1 回の呼び出しの中に混在させることはできません。 どちらか一方を使用する必要があります。</p>
 
 <p>次の例のように、browse メソッドには 1 つ以上の FileFilter インスタンスを渡すことができます。</p>
 
 <codeblock platform="actionscript">
 var imagesFilter:FileFilter = new FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter:FileFilter = new FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFileReference:FileReference = new FileReference();
 myFileReference.browse([imagesFilter, docFilter]);
 </codeblock>
 
 <p platform="actionscript">AIR アプリケーションでは次のようになります。</p>
 
 <codeblock platform="actionscript">
 var imagesFilter:FileFilter = new FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter:FileFilter = new FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFile:File = new File();
 myFile.browseForOpen("Open", [imagesFilter, docFilter]);
 </codeblock>
 
 <codeblock platform="javascript">
 var imagesFilter = new air.FileFilter("Images", "~~.jpg;~~.gif;~~.png");
 var docFilter = new air.FileFilter("Documents", "~~.pdf;~~.doc;~~.txt");
 var myFile = new air.File();
 myFile.browseForOpen("Open", [imagesFilter, docFilter]);
 </codeblock>
 
 <p><codeph>FileFilter.extension</codeph> プロパティの拡張子リストを使用して、ファイル参照ダイアログに表示されるファイルをフィルターにかけます。このリストは、ダイアログボックスに実際に表示されるわけではありません。ファイルタイプをユーザーに表示するには、拡張子リストのほか、説明用ストリングにもファイルタイプをリストする必要があります。説明用ストリングは、Windows および Linux のダイアログボックスに表示されます。(これは、Macintosh<sup>®</sup> では使用されません)。Macintosh で、Macintosh ファイルタイプのリストを指定する場合、このリストはファイルにフィルターをかけるために使用されます。これを指定しない場合は、ファイル拡張子リストが使用されます。 </p> 
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:FileFilter:FileFilter"><apiName>FileFilter</apiName><shortdesc>
	 新しい FileFilter インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>description</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ユーザーがアップロードするファイルを選択するときに表示される説明用ストリングです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>extension</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ユーザーがアップロードするファイルを選択するときに表示される ファイル形式を示すファイル拡張子のリストです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>macType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ユーザーがアップロードするファイルを選択したときに表示されるファイルタイプを示す Macintosh ファイルタイプのリストです。値を指定しないと、このパラメーターは <codeph>null</codeph> に設定されます。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい FileFilter インスタンスを作成します。
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.net:FileFilter:description:get"><apiName>description</apiName><shortdesc>
	 フィルターの説明用ストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 フィルターの説明用ストリングです。説明は、<codeph>FileReference.browse()</codeph> または <codeph>FileReferenceList.browse()</codeph> が呼び出されたときに開くダイアログボックスに表示されます。説明用ストリングには、<codeph>"Images (~~.gif, ~~.jpg, ~~.png)"</codeph> などのストリングが含まれ、ユーザーにアップロードまたはダウンロード可能なファイルタイプを指示できます。FileReference オブジェクトでサポートされる実際のファイルタイプは <codeph>extension</codeph> プロパティに格納されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileFilter:extension:get"><apiName>extension</apiName><shortdesc>
	 ファイル拡張子のリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ファイル拡張子のリストです。このリストは、ファイル参照ダイアログボックスに表示するファイルの種類を示します。(リストは表示されません。ユーザーには <codeph>description</codeph> プロパティの値のみが表示されます)。<codeph>extension</codeph> プロパティには、<codeph>"~~.jpg;~~.gif;~~.png"</codeph> のように、セミコロンで区切った ファイル拡張子のリストが含まれ、各拡張子の前にはワイルドカード（~~）を付けます。
	 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:FileFilter:macType:get"><apiName>macType</apiName><shortdesc>
	 Macintosh ファイルタイプのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Macintosh ファイルタイプのリストです。このリストは、ファイル参照ダイアログボックスに表示するファイルの種類を示します。（このリスト自体は表示されません。ユーザーには <codeph>description</codeph> プロパティの値のみが表示されます）。<codeph>macType</codeph> プロパティには、<codeph>"JPEG;jp2_;GIFF"</codeph> のように、Macintosh ファイルタイプをセミコロンで区切ったリストが含まれます。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:NetStream"><apiName>NetStream</apiName><shortdesc>
 NetStream クラスは、AIR または Flash Player アプリケーションと Flash Media Server との間、または AIR または Flash Player アプリケーションとローカルファイルシステムとの間で、単方向ストリーミング接続を開きます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 NetStream クラスは、AIR<ph platform="actionscript"> または Flash Player</ph> アプリケーションと Flash Media Server との間、または AIR<ph platform="actionscript"> または Flash Player</ph> アプリケーションとローカルファイルシステムとの間で、単方向ストリーミング接続を開きます。 NetStream オブジェクトは、NetConnection オブジェクト内のチャンネルです。このチャンネルは、<codeph>NetStream.publish()</codeph> を使用してストリームをパブリッシュするか、<codeph>NetStream.play()</codeph> を使用して、パブリッシュされたストリームにサブスクライブし、データを受信できます。ライブ (リアルタイム) データおよび以前に記録したデータをパブリッシュすることも、再生することもできます。また、<codeph>NetStream.send()</codeph> メソッドを呼び出すと、サブスクライブしているすべてのクライアントにテキストメッセージを送信できます。
 
 <p platform="actionscript">SWF ファイルにビデオを埋め込むよりも、外部のビデオファイルを再生した方が、パフォーマンスとメモリ管理の効率がよくなる、ビデオと SWF のフレームレートを独立化できるなどのメリットがあります。 </p>
 
 <p>Adobe AIR および Flash Player 9.0.115.0   以降では、H.264 ビデオや HEAAC V2 でエンコードされたオーディオを含む場合、F4V、MP4、M4A、MOV、MP4V、3GP、3G2 など、標準の MPEG-4 コンテナ形式から派生したファイルをサポートします。 H.264 では、Sorenson または On2 の同じエンコードプロファイルと比較して、低いビットレートで高品質のビデオが配信されます。 HE-AAC v2 は、Spectral Band Replication（SBR）技術と Parametric Stereo（PS）技術を使用して低いビットレートでのコーディング効率を向上させる AAC（MPEG-4 ビデオ標準で定義されている標準オーディオ形式）を拡張したものです。 サポートするコーデックとファイル形式について詳しくは、<xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external">http://www.adobe.com/go/hardware_scaling_jp</xref> および <xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。</p>
 
 <p><b>ストリームをパブリッシュして再生するためのワークフロー</b></p>
 
 <ol>
 <li>NetConnection オブジェクトを作成します。</li>
 <li><codeph>NetConnection.connect()</codeph> メソッドを呼び出して、サーバー上のアプリケーションインスタンスに接続します。</li>
 <li>NetStream オブジェクトを作成して、接続内にストリームを作成します。</li>
 <li>オーディオとビデオをキャプチャ、エンコードおよびパブリッシュするために、<codeph>NetStream.attachAudio()</codeph> メソッドと <codeph>NetStream.attachCamera()</codeph> メソッドを呼び出します。</li>
 <li><codeph>NetStream.publish()</codeph> メソッドを呼び出して、ストリームに一意の名前を付け、そのストリームを介してサーバーにデータを送信し、他のユーザーによる受信を可能にします。また、データを記録しながらパブリッシュすることもできます。記録すると、ユーザーがデータを後で再生できるようになります。</li>
 <li><codeph>NetStream.play()</codeph> メソッドを呼び出して、ライブストリームまたは記録済みストリームを再生します。<codeph>play()</codeph> メソッドには、<codeph>publish()</codeph> メソッドに渡したストリングの名前を渡します。</li>
 </ol>
 
 <p><b>Flash Media Server でのデータキーフレームの使用：</b>NetConnection オブジェクトと NetStream オブジェクトを作成した後、オーディオまたはビデオをサーバーにストリーミングするときに、<codeph>NetStream.send()</codeph> を使用してライブのオーディオまたはビデオにメタデータを追加できます。メタデータには、ビデオの高さまたは幅、ビデオの継続時間、作成者の名前などの情報を設定できます。メタデータを定義するには、特別なハンドラー名 <codeph>@setDataFrame</codeph> を、<codeph>NetStream.send()</codeph> に渡す最初の引数として使用します。</p>
 
 <p><b>Flash Media Server ストリーム、プログレッシブ F4V ファイルまたはプログレッシブ FLV ファイルからのデータの受信：</b>Flash Media Server、F4V ファイルおよび FLV ファイルは、ストリーミングまたは再生中に特定のデータポイントに対してデータを含むイベントオブジェクトを送信できます。再生中は、2 つの方法でストリームまたは FLV ファイルからのデータを処理できます。</p>
 
 <ul><li>client プロパティをイベントハンドラーと関連付けてデータオブジェクトを受信します。<codeph>NetStream.client</codeph> プロパティを使用して、特定のデータ処理関数の呼び出しにオブジェクトを割り当てます。<codeph>NetStream.client</codeph> プロパティに割り当てられたオブジェクトは、データポイント <codeph>onCuePoint()</codeph>、<codeph>onImageData()</codeph>、<codeph>onMetaData()</codeph>、<codeph>onPlayStatus()</codeph>、<codeph>onTextData()</codeph> および <codeph>onXMPData()</codeph> を監視します。次に、これらの関数内にプロシージャを書き込んで、再生中にストリームまたは FLV ファイルから返されたデータオブジェクトを処理します。詳しくは、<codeph>NetStream.client</codeph> プロパティを参照してください。</li>
 <li>client プロパティを NetStream クラスのサブクラスに関連付けて、データオブジェクトを受信するイベントハンドラーを書き込みます。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li></ul>
 
 <p><b>注意：</b>MP3 などのオーディオファイルでデータを送信するには、Sound クラスを使用してオーディオファイルと Sound オブジェクトを関連付けます。次に、<codeph>Sound.id3</codeph> プロパティを使用してサウンドファイルからメタデータを読み込みます。</p>
 
 </apiDesc><example conref="examples\NetConnectionExample.as"> 次の例では、Video オブジェクトを NetConnection クラスおよび NetStream クラスと共に使用して、FLV ファイルをロードして再生します。この例を実行するには、<codeph>videoURL</codeph> に渡される変数と、ファイル名および場所が一致する FLV ファイルが必要です。この場合は、SWF ファイルと同じディレクトリにある Video.flv という名前の FLV ファイルです。
 <p>この例では、Video オブジェクトと NetStream オブジェクトを作成し、<codeph>Video.attachNetStream()</codeph> メソッドと <codeph>NetStream.play()</codeph> メソッドを呼び出すコードがハンドラー関数に配置されます。ハンドラーは、NetConnection オブジェクトとの接続が成功した場合にのみ呼び出されます。つまり、<codeph>netStatus</codeph> イベントが返す <codeph>info</codeph> オブジェクトの <codeph>code</codeph> プロパティが成功を示しているときです。接続に成功するまで待ってから、<codeph>NetStream.play()</codeph> を呼び出すことをお勧めします。 </p>
 <codeblock>

package {
    import flash.display.Sprite;
    import flash.events.NetStatusEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import flash.events.Event;

    public class NetConnectionExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetConnectionExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Stream not found: " + videoURL);
                    break;
            }
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.client = new CustomClient();
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }
    }
}

class CustomClient {
    public function onMetaData(info:Object):void {
        trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);
    }
    public function onCuePoint(info:Object):void {
        trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Video"><linktext>flash.media.Video</linktext></link><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream/event:onImageData"><linktext>onImageData</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData"><linktext>onMetaData</linktext></link></related-links><adobeApiEvent id="flash.net:NetStream_flash.events.DRMStatusEvent.DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><shortdesc>
 DRM（デジタル著作権管理）で暗号化されたコンテンツの再生が開始されるときに送出されます（ユーザーが認証されてコンテンツの再生が許可された場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.DRMStatusEvent.DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events.DRMStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 DRM（デジタル著作権管理）で暗号化されたコンテンツの再生が開始されるときに送出されます（ユーザーが認証されてコンテンツの再生が許可された場合）。
 <p>
 DRMStatusEvent オブジェクトには、コンテンツをオフラインで使用可能にできるかどうか、またはいつ証明書が期限切れとなり、コンテンツを表示できなくなるかなど、証明書に関連する情報が含まれます。
 </p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.events.xml#DRMStatusEvent"><linktext>flash.events.DRMStatusEvent</linktext></link><link href="flash.net.xml#NetStream/resetDRMVouchers()"><linktext>resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMErrorEvent.DRM_ERROR_drmError"><apiName>drmError</apiName><shortdesc>
 NetStream オブジェクトが DRM（デジタル著作権管理）で暗号化されたファイルを再生しようとして、DRM に関連したエラーを検出したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.DRMErrorEvent.DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events.DRMErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 NetStream オブジェクトが DRM（デジタル著作権管理）で暗号化されたファイルを再生しようとして、DRM に関連したエラーを検出したときに送出されます。例えば、DRMErrorEvent オブジェクトは、ユーザー承認に失敗したときに送出されます。これは、ユーザーがコンテンツを表示する権利を購入していないためや、コンテンツプロバイダーが表示アプリケーションをサポートしていないためなどで発生します。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.events.xml#DRMErrorEvent"><linktext>flash.events.DRMErrorEvent</linktext></link><link href="flash.net.xml#NetStream/resetDRMVouchers()"><linktext>resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.DRMAuthenticateEvent.DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><shortdesc>
 NetStream オブジェクトが、再生の前にユーザーの認証資格情報を要求する、DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.DRMAuthenticateEvent.DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events.DRMAuthenticateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 NetStream オブジェクトが、再生の前にユーザーの認証資格情報を要求する、DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに送出されます。 
 
 <p>
 NetStream オブジェクトの<codeph> setDRMAuthenticationCredentials()</codeph> メソッドを使用してユーザーを認証します。ユーザー認証に失敗した場合、認証が再試行され、NetStream オブジェクトの新しい DRMAuthenticateEvent イベントが送出されます。
 </p>
 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.events.xml#DRMAuthenticateEvent"><linktext>flash.events.DRMAuthenticateEvent</linktext></link><link href="flash.net.xml#NetStream/resetDRMVouchers()"><linktext>resetDRMVouchers()</linktext></link><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>setDRMAuthenticationCredentials()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onDRMContentData"><apiName>onDRMContentData</apiName><shortdesc>
 AIR がメディアファイル内に埋め込まれた DRM コンテンツメタデータを抽出したときに応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 AIR がメディアファイル内に埋め込まれた DRM コンテンツメタデータを抽出したときに応答するリスナーを定義します。
 
 <p>DRMContentData オブジェクトには、DRM で保護されたメディアファイルの再生に求められるバウチャーを取得するために必要な情報が含まれています。DRMManager クラスを使用して、この情報でバウチャーをダウンロードします。</p>
 
 <p><codeph>onDRMContentData</codeph> は実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、ローカルメディアファイルから埋め込みデータをプリロードしたときにデータイベントに応答するので、Events セクションに記載されます。詳しくは、NetStream クラスの説明を参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onDRMContentData</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 <ul>
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
 </ul>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.drm.xml#DRMContentData"><linktext>flash.net.drm.DRMContentData</linktext></link><link href="flash.net.xml#NetStream/preloadEmbeddedData()"><linktext>preloadEmbeddedData()</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onPlayStatus"><apiName>onPlayStatus</apiName><shortdesc>
 NetStream オブジェクトによるストリームの再生が終了した場合に応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 NetStream オブジェクトによるストリームの再生が終了した場合に応答するリスナーを定義します。関連付けられたイベントオブジェクトは、<codeph>netStatus</codeph> イベントによって返される内容に加えて情報を提供します。このプロパティを使用すると、NetStream オブジェクトが再生リスト内のストリームを切り替えたとき（情報オブジェクト <codeph>NetStream.Play.Switch</codeph> で示される）、または NetStream オブジェクトが終わりまで再生したときに（情報オブジェクト <codeph>NetStream.Play.Complete</codeph> で示される）、コード内のアクションをトリガーできます。 
 
 <p><codeph>onPlayStaus</codeph> は、実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、Events セクションに記載されます。詳しくは、NetStream クラスの説明を参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onPlayStatus</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 
 <ul>
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
    
 </ul>
 
 <p>このイベントでは、次のプロパティが指定された情報オブジェクトを返すことができます。</p>
 
 <adobetable class="innertable">
  
  
  
   
 <tgroup cols="3"><thead><row><entry>code プロパティ</entry><entry>level プロパティ</entry><entry>説明</entry></row></thead><tbody><row>
    <entry><codeph>NetStream.Play.Switch</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>サブスクライバが、再生リストでストリームを切り替えています。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Complete</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>再生が終了しました。</entry>
  </row><row>
    <entry><codeph>NetStream.Play.TransitionComplete</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>ストリームのビットレートを切り替えた結果、サブスクライバは新しいストリームに切り替えています。</entry>
  </row></tbody></tgroup></adobetable>
 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link><link href="flash.net.xml#NetStream/event:asyncError"><linktext>asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData"><linktext>onMetaData</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint"><linktext>onCuePoint</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onCuePoint"><apiName>onCuePoint</apiName><shortdesc>
 ビデオファイルの再生中に埋め込まれたキューポイントに達した場合に応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ビデオファイルの再生中に埋め込まれたキューポイントに達した場合に応答するリスナーを定義します。このリスナーを使用して、ビデオが特定のキューポイントに達したときにコード内のアクションをトリガーすることができます。これにより、アプリケーションの他のアクションとビデオ再生イベントと同期させることができます。Flash Media Serverのサポートするビデオファイル形式について詳しくは、<xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。

 
 <p><codeph>onCuePoint</codeph> は実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、Events セクションに記載されます。詳しくは、NetStream クラスの説明を参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onCuePoint</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 
 <ul>
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
    
 </ul>
 
 <p>関連付けられたイベントリスナーは、<codeph>NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p>ビデオファイルに埋め込み可能なキューポイントには、次のタイプがあります。</p>
 
 <ul>
 <li>ナビゲーションキューポイントは、ビデオファイル内のキーフレームと、その厳密に一致するキーフレームに対応するキューポイントの <codeph>time</codeph> プロパティを指定します。ナビゲーションキューポイントは、ビデオファイル内の移動に使用できるブックマークやエントリポイントとしてよく使われます。</li>
 
 <li>イベントキューポイントは、時間で指定します。その時間が特定のキーフレームに対応しているかどうかは関係ありません。イベントキューポイントは、通常ビデオ内で何か処理が行われるときの時間を表し、他のアプリケーションイベントのトリガーに使用できます。</li>
 </ul>
 
 <p><codeph>onCuePoint</codeph> イベントオブジェクトには、次のプロパティが含まれます。</p>
 
 <adobetable class="innertable">
 
 
 
 
 
 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>説明</entry></row></thead><tbody><row>
   <entry><codeph>name</codeph></entry>
   <entry>キューポイントがビデオファイル内に埋め込まれたときに、キューポイントに指定された名前です。</entry></row><row>
   <entry><codeph>parameters</codeph></entry>
   <entry>このキューポイントに指定された名前と値のペアのストリングの結合配列です。パラメーター名または値には、任意の有効なストリングを使用できます。</entry>
 </row><row>
   <entry><codeph>time</codeph></entry>
   <entry>ビデオファイルの再生時にキューポイントが発生した時間（秒数）です。</entry>
 </row><row>
   <entry><codeph>type</codeph></entry>
   <entry>到達したキューポイントの種類です。ナビゲーションまたはイベントのいずれかです。</entry>
 </row></tbody></tgroup></adobetable>
 
 <p>最初にビデオファイルをエンコードするとき、または Flash オーサリングツールでビデオの読み込みウィザードを使用してビデオクリップを読み込むときに、ビデオファイルにキューポイントを定義できます。</p>
 
 <p><codeph>onMetaData</codeph> イベントも、ビデオファイル内のキューポイントに関する情報を取得します。ただし、<codeph>onMetaData</codeph> イベントは、ビデオの再生が開始される前に、すべてのキューポイントに関する情報を取得します。<codeph>onCuePoint</codeph> イベントは、1 つのキューポイントについて、再生時のそのキューポイントに指定された時間での情報を取得します。</p>
 
 <p>一般に、コードで特定のキューポイントの発生時に応答するには、<codeph>onCuePoint</codeph> イベントを使用して、コード内の特定のアクションをトリガーします。</p>
 
 <p><codeph>onMetaData</codeph> イベントに指定されたキューポイントのリストを使用すると、ビデオストリームの事前に定義されたポイントでユーザーにビデオの再生を開始させることができます。キューポイントの <codeph>time</codeph> プロパティの値を <codeph>NetStream.seek()</codeph> メソッドに渡して、そのキューポイントからビデオを再生します。</p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData"><linktext>onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onTextData"><apiName>onTextData</apiName><shortdesc>
  Flash Player が再生中のメディアファイルに埋め込まれたテキストデータを受信したときに応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Flash Player が再生中のメディアファイルに埋め込まれたテキストデータを受信したときに応答するリスナーを定義します。テキストデータは UTF-8 形式で、3GP timed text 仕様に基づいて形式に関する情報を含めることができます。
  <p><codeph>onTextData</codeph> は実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、Events セクションに記載されます。詳しくは、NetStream クラスの説明を参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onTextData</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 
 <ul>
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
    
 </ul>
 
 <p>関連付けられたイベントリスナーは、<codeph>NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
  
  <p>onTextData イベントオブジェクトには、テキストデータごとに 1 つのプロパティが含まれます。</p>
  
  </apiDesc><example conref="examples\OnTextDataExample.as"> この例のコードでは、<codeph>Netstream.client</codeph> プロパティを使用して、<codeph>onTextData</codeph> および <codeph>onImageData</codeph> のコールバック関数を処理しています。<codeph>onImageDataHandler()</codeph> 関数は、onImageData イベントオブジェクト <codeph>imageData</codeph> を使用してバイト配列を格納します。また、<codeph>onTextDataHandler()</codeph> 関数は、onTextData イベントオブジェクト <codeph>textData</codeph> を使用して複数のテキストデータを格納します（各データは、<codeph>textData</codeph> オブジェクトのプロパティです）。
 <p>コード中の場所 <codeph>yourURL</codeph> を、テキストまたはイメージメタデータを含むメディアファイルの実際の場所で置き換える必要があります。</p>
 <p> カスタムクラスを使用してイメージデータやテキストデータを処理することもできます。詳細および例については、記事「<xref href="http://www.adobe.com/devnet/flash/quickstart" scope="external">Flash Video のメタデータおよびキューポイントの処理（英語）</xref>」を参照してください。</p>
 <codeblock>
package {
    import flash.display.*;
    import flash.net.*;
    import flash.media.*;
    import flash.system.*;
    import flash.events.*;

        public class OnTextDataExample extends Sprite {
                                              
            public function OnTextDataExample():void {

                var customClient:Object = new Object();
                customClient.onImageData = onImageDataHandler;           
                customClient.onTextData = onTextDataHandler;               

                var my_nc:NetConnection = new NetConnection();
                my_nc.connect(null);
                var my_ns:NetStream = new NetStream(my_nc);
                my_ns.play("yourURL");
                my_ns.client = customClient;

                var my_video:Video = new Video();
                my_video.attachNetStream(my_ns);
                addChild(my_video);

            }

            public function onImageDataHandler(imageData:Object):void {

                trace("imageData length: " + imageData.data.length);
                var imageloader:Loader = new Loader();           
                imageloader.loadBytes(imageData.data); // imageData.data is a ByteArray object.
                addChild(imageloader);
            }

    
            public function onTextDataHandler(textData:Object):void {

                trace("--- textData properties ----");
                var key:String;

                for (key in textData) {
                    trace(key + ": " + textData[key]);
                }
            }

        }

}

</codeblock></example></adobeApiEventDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection</linktext></link><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError"><linktext>asyncError</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/event:onImageData"><linktext>onImageData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onImageData"><apiName>onImageData</apiName><shortdesc>
 再生中のメディアファイルにバイト配列として埋め込まれているイメージデータを Flash Player が受け取ったときに応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 再生中のメディアファイルにバイト配列として埋め込まれているイメージデータを Flash Player が受け取ったときに応答するリスナーを定義します。イメージデータは、JPEG、PNG または GIF のいずれかのコンテンツを作成できます。表示オブジェクトにバイト配列を読み込むには、<codeph>flash.display.Loader.loadBytes()</codeph> メソッドを使用します。
 <p><codeph>onImageData</codeph> は実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、Events セクションに記載されます。詳しくは、NetStream クラスの説明を参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onImageData</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 
 <ul>
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
    
 </ul>
 
 <p>関連付けられたイベントリスナーは、<codeph>NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p>onImageData イベントオブジェクトは、イメージデータを AMF0 データチャンネルを介して送信されるバイト配列として格納します。</p>
 
 </apiDesc><example conref="examples\OnTextDataExample.as"> この例のコードでは、<codeph>Netstream.client</codeph> プロパティを使用して、<codeph>onTextData</codeph> および <codeph>onImageData</codeph> のコールバック関数を処理しています。<codeph>onImageDataHandler()</codeph> 関数は、onImageData イベントオブジェクト <codeph>imageData</codeph> を使用してバイト配列を格納します。また、<codeph>onTextDataHandler()</codeph> 関数は、onTextData イベントオブジェクト <codeph>textData</codeph> を使用して複数のテキストデータを格納します（各データは、<codeph>textData</codeph> オブジェクトのプロパティです）。
 <p>コード中の場所 <codeph>yourURL</codeph> を、テキストまたはイメージメタデータを含むメディアファイルの実際の場所で置き換える必要があります。</p>
 <p> カスタムクラスを使用してイメージデータやテキストデータを処理することもできます。詳細および例については、記事「<xref href="http://www.adobe.com/devnet/flash/quickstart" scope="external">Flash Video のメタデータおよびキューポイントの処理（英語）</xref>」を参照してください。</p>
 <codeblock>
package {
    import flash.display.*;
    import flash.net.*;
    import flash.media.*;
    import flash.system.*;
    import flash.events.*;

        public class OnTextDataExample extends Sprite {
                                              
            public function OnTextDataExample():void {

                var customClient:Object = new Object();
                customClient.onImageData = onImageDataHandler;           
                customClient.onTextData = onTextDataHandler;               

                var my_nc:NetConnection = new NetConnection();
                my_nc.connect(null);
                var my_ns:NetStream = new NetStream(my_nc);
                my_ns.play("yourURL");
                my_ns.client = customClient;

                var my_video:Video = new Video();
                my_video.attachNetStream(my_ns);
                addChild(my_video);

            }

            public function onImageDataHandler(imageData:Object):void {

                trace("imageData length: " + imageData.data.length);
                var imageloader:Loader = new Loader();           
                imageloader.loadBytes(imageData.data); // imageData.data is a ByteArray object.
                addChild(imageloader);
            }

    
            public function onTextDataHandler(textData:Object):void {

                trace("--- textData properties ----");
                var key:String;

                for (key in textData) {
                    trace(key + ": " + textData[key]);
                }
            }

        }

}

</codeblock></example></adobeApiEventDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError"><linktext>asyncError</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/event:onTextData"><linktext>onTextData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onMetaData"><apiName>onMetaData</apiName><shortdesc>
 再生中のビデオに埋め込まれた記述的情報を Flash Player が受け取ったときに応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 再生中のビデオに埋め込まれた記述的情報を Flash Player が受け取ったときに応答するリスナーを定義します。Flash Media Serverのサポートするビデオファイル形式について詳しくは、<xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。
 
 <p><codeph>onMetaData</codeph> は実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、Events セクションに記載されます。NetStream クラスの説明について詳しくは、<codeph>NetStream.client</codeph> プロパティを参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onMetaData</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 
 <ul>
 
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
 
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
    
 </ul>
 
 <p>Flash Video Exporter ユーティリティ (バージョン 1.1 以降) は、ビデオの継続時間、作成日付、データレート、その他の情報をビデオファイルに埋め込みます。各ビデオエンコーダーは、それぞれ異なるメタデータのセットを埋め込みます。</p>
 
 <p>関連付けられたイベントリスナーは、<codeph>NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p>多くの場合、ストリームメタデータに埋め込まれた継続期間の値は実際の継続時間に近似したものになりますが、正確な値ではありません。つまり、再生ヘッドがビデオストリームの末尾にある場合、FLV メタデータに埋め込まれた継続期間の値は <codeph>NetStream.time</codeph> プロパティの値と必ずしも一致するわけではありません。</p>
 <p>onMetaData イベントハンドラーに渡されるイベントオブジェクトには、各データに 1 つのプロパティが含まれています。</p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection</linktext></link><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError"><linktext>asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint"><linktext>onCuePoint</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/time"><linktext>time</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream__onXMPData"><apiName>onXMPData</apiName><shortdesc>
 再生中のビデオに埋め込まれている Adobe Extensible Metadata Platform（XMP）独自の情報を Flash Player が受け取ったときに応答するリスナーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 再生中のビデオに埋め込まれている Adobe Extensible Metadata Platform（XMP）独自の情報を Flash Player が受け取ったときに応答するリスナーを定義します。Flash Media Serverのサポートするビデオファイル形式について詳しくは、<xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。
 
 <p><codeph>onXMPData</codeph> は実際は <codeph>NetStream.client</codeph> オブジェクトのプロパティです。イベントではありませんが、Flash Media Server を使用したメディアのストリーミング時または FLV ファイルの再生中にデータイベントに応答するので、Events セクションに記載されます。NetStream クラスの説明について詳しくは、<codeph>NetStream.client</codeph> プロパティを参照してください。<codeph>addEventListener()</codeph> メソッドまたはその他の EventDispatcher メソッドを使用して、<codeph>onMetaData</codeph> をイベントとして受け取ったり、処理したりすることはできません。代わりに、1 つのコールバック関数を定義して、以下のオブジェクトのいずれかを直接アタッチする必要があります。</p>
 
 <ul>
  <li>Netstream インスタンスの <codeph>client</codeph> プロパティで参照されるオブジェクトです。</li>    
  <li>Netstream サブクラスのインスタンスです。Netstream は sealed クラスで、実行時にプロパティまたはメソッドを Netstream オブジェクトに追加できないことを意味します。ただし、NetStream のサブクラスを作成し、そのサブクラス内にイベントハンドラーを定義することや、サブクラスをダイナミックにしてイベントハンドラー関数をサブクラスのインスタンスに追加することは可能です。</li>
    
 </ul>
 
 <p>関連付けられたイベントリスナーは、<codeph>NetStream.play()</codeph> メソッドの呼び出し後、ただしビデオ再生ヘッドが進むよりは前にトリガーされます。</p>
 
 <p><codeph>onXMPData()</codeph> イベント処理機能に渡されるオブジェクトは、1 つの<codeph>データ</codeph>プロパティ（ストリング）を持ちます。このストリングは最上位の UUID ボックスから生成されます（最上位ボックスの 128 ビット UUID は <codeph>BE7ACFCB-97A9-42E8-9C71-999491E3AFAC</codeph>）。この最上位 UUID ボックスには、null を持たない UTF-8 ストリングとして表される XML ドキュメントが 1 つだけ含まれます。</p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection</linktext></link><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link><link href="flash.net.xml#NetStream/event:asyncError"><linktext>asyncError</linktext></link><link href="flash.net.xml#NetStream/event:onCuePoint"><linktext>onCuePoint</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/time"><linktext>time</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.NetStatusEvent.NET_STATUS_netStatus"><apiName>netStatus</apiName><shortdesc>
 NetStream オブジェクトが、そのステータスまたはエラーの状態をレポートすると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 NetStream オブジェクトが、そのステータスまたはエラーの状態をレポートすると送出されます。<codeph>netStatus</codeph> イベントには、<codeph>info</codeph> プロパティが含まれます。このプロパティは、接続試行が成功したかどうかなど、イベントに関する特定の情報を含む情報オブジェクトです。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><shortdesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。このイベントは、サーバーが定義されていないメソッドをクライアント上で呼び出したときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:onPlayStatus"><linktext>NetStream.onPlayStatus</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData"><linktext>NetStream.onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetStream_flash.events.StatusEvent.STATUS_status"><apiName>status</apiName><shortdesc>
 アプリケーションが NetStream.play() メソッドを呼び出して DRM (デジタル著作権管理) で暗号化されたコンテンツを再生しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier>flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 アプリケーションが <codeph>NetStream.play()</codeph> メソッドを呼び出して DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに送出されます。ステータスコードプロパティの値は <codeph>"DRM.encryptedFLV"</codeph> です。 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>NetStream.play()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.net:NetStream:NetStream"><apiName>NetStream</apiName><shortdesc>
 	 指定された NetConnection オブジェクトを使用して、ビデオファイルを再生するためのストリームを生成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream, constructor
 	 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>NetConnection インスタンスは接続されていません。
 	 
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>connection</apiItemName><apiOperationClassifier>flash.net:NetConnection</apiOperationClassifier><apiDesc>NetConnection オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>peerID</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>connectToFMS</apiData><apiDesc>このパラメーターはオプションです。 Flash Player 10 以降で使用できます。FMS への接続では、<codeph>NetStream.CONNECT_TO_FMS</codeph> に値を設定します。ピアーに直接パブリッシュするには、<codeph>NetStream.DIRECT_CONNECTIONS</codeph> を指定します。特定のピアーから直接再生するには、ピアーの識別子を指定します（<codeph>NetConnection.nearID</codeph> および <codeph>NetConnection.farID</codeph> を参照してください）。<codeph>NetConnection.protocol</codeph> プロパティの値は<codeph>「rtmfp」</codeph>である必要があります（<codeph>peerID</codeph> パラメーターがピアーに設定されている場合）。RTMFP 以外の接続では、<codeph>peerID</codeph> パラメーターは無視されます。パラメーターとして、null 値が NetStream() メソッドに渡されると、プログラムによって、ActionScript がキャッチするために、デフォルト値の<codeph>「connectToFMS」</codeph>を <codeph>peerID</codeph> パラメーターに使用します。
     <p>ただし、<codeph>peerID</codeph> パラメーターはオプションのため、クライアントとサーバーが接続している間、以下がプログレッシブ再生の動作を継続します。</p>
     <codeblock>
     new NetStream(nc:NetConnection);
     </codeblock>
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 指定された NetConnection オブジェクトを使用して、ビデオファイルを再生するためのストリームを生成します。 
     
     <p>
     サポートするコーデックとファイル形式について詳しくは、<xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external">http://www.adobe.com/go/hardware_scaling_jp</xref> および <xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。
     </p>
	 
 	 </apiDesc><example conref="examples\NetStreamExample_constructor.as"> 次のコードは、変数 <codeph>videoURL</codeph> に割り当てられたビデオを連続的にダウンロードし、表示する接続を示しています。
<codeblock>
            var my_nc:NetConnection = new NetConnection();
            my_nc.connect(null);
            var my_ns:NetStream = new NetStream(my_nc);
            my_ns.play(videoURL);
            var my_video:Video = new Video();
            my_video.attachNetStream(my_ns);
            addChild(my_video);
</codeblock></example><example conref="examples\NetStreamExample_constructor2.as"> 次のコードは、（変数 <codeph>videoURL</codeph> に割り当てられた）ビデオを、<codeph>connect()</codeph> コマンドで指定されているリモート Flash Media Server インスタンスでストリーミングし、表示する接続を示しています。
<codeblock>
            var my_nc:NetConnection = new NetConnection();
            my_nc.connect("rtmp://www.yourfmsserver.com/someappname");
            var my_ns:NetStream = new NetStream(my_nc, NetStream.CONNECT_TO_FMS);
            my_ns.play(videoURL);
            var my_video:Video = new Video();
            my_video.attachNetStream(my_ns);
            addChild(my_video);
</codeblock></example></apiConstructorDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.media.xml#Video/attachCamera()"><linktext>flash.media.Video.attachCamera()</linktext></link><link href="flash.net.xml#NetStream/CONNECT_TO_FMS"><linktext>CONNECT_TO_FMS</linktext></link><link href="flash.net.xml#NetStream/DIRECT_CONNECTIONS"><linktext>DIRECT_CONNECTIONS</linktext></link><link href="flash.net.xml#NetConnection/nearID"><linktext>flash.net.NetConnection.nearID</linktext></link><link href="flash.net.xml#NetConnection/farID"><linktext>flash.net.NetConnection.farID</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetStream:attachAudio"><apiName>attachAudio</apiName><shortdesc>
	 ソースとして渡される Microphone オブジェクトから NetStream オブジェクトを介して送信されるオーディオストリームを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiDefaultValue>"null" 
	 </apiDefaultValue><apiParam><apiItemName>microphone</apiItemName><apiOperationClassifier>flash.media:Microphone</apiOperationClassifier><apiDesc>送信するオーディオストリームのソースです。
     
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ソースとして渡される Microphone オブジェクトから NetStream オブジェクトを介して送信されるオーディオストリームを指定します。このメソッドは、指定されたストリームの発行者だけが使用できます。
	 
	 <p><codeph>attachAudio</codeph> メソッドは、Flash Media Server で使用することを目的としています。このメソッドは、ユーザーがクライアントコンピューターからサーバーにライブオーディオ（またはオーディオ付きのライブビデオ）を送信するときに呼び出される場合があります。
	 </p>
	 
	 <p>このメソッドは、<codeph>publish()</codeph> メソッドを呼び出す前または後に呼び出すことができ、実際に送信を開始します。オーディオを聞きたいサブスクライバは <codeph>NetStream.play()</codeph> メソッドを呼び出す必要があります。マイクの <codeph>rate</codeph> をサウンドキャプチャデバイスのレートに合わせ、サイレンスレベルのしきい値を <codeph>setSilenceLevel()</codeph> メソッドを通じて設定します。マイクオブジェクトの <codeph>soundTransform</codeph> プロパティを使用して、このオーディオストリームのサウンドプロパティ（ボリュームとパン）を制御できます。</p>
     <codeblock>
     var conn:NetConnection = new NetConnection();
     conn.connect("rtmp://server.domain.com/path");
     var stream:NetStream = new NetStream(conn);
     var live_mic:Microphone = Microphone.get();
     live_mic.rate = 8;
     live_mic.setSilenceLevel(20,200);
     var soundTrans:SoundTransform = new SoundTransform();
     soundTrans.volume = 6;
     live_mic.soundTransform = soundTrans;
     stream.attachAudio(live_mic);
     stream.publish("mic_stream","live")
     </codeblock>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:attachCamera"><apiName>attachCamera</apiName><shortdesc>
	 カメラからビデオのキャプチャを開始します。または、theCamera が null に設定されると、キャプチャを停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>theCamera</apiItemName><apiOperationClassifier>flash.media:Camera</apiOperationClassifier><apiDesc>ビデオ転送のソースです。有効な値は、ビデオのキャプチャを開始する Camera オブジェクトと <codeph>null</codeph> です。<codeph>null</codeph> を渡すと、ビデオのキャプチャが停止され、ユーザーが送信した追加パラメーターはどれも無視されます。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>snapshotMilliseconds</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>ビデオストリームが連続的、単一のフレーム、コマ撮り写真の作成に使用する一連の単一フレームのいずれであるかを指定します。
	 
	 <ul>
     <li>このパラメーターを省略すると、値 <codeph>null</codeph> を <codeph>attachCamera</codeph> に渡すまで、すべてのビデオがキャプチャされます。</li>
	 <li>0 を渡すと、単一のビデオフレームのみがキャプチャされます。既存のストリーム内に "スナップショット" を転送するには、この値を使用します。<ph platform="actionscript">Flash Player または </ph> AIR では、無効なパラメーター、負のパラメーター、または非数値パラメーターは 0 と解釈されます。</li>
     <li>正の値を渡すと、単一のビデオフレームがキャプチャされた後、スナップショットのトレーラーとして、指定の長さの一時停止が追加されます。コマ撮り写真の効果を作成するには、この値を使用します。</li>
	 </ul>
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 カメラからビデオのキャプチャを開始します。または、<codeph>theCamera</codeph> が <codeph>null</codeph> に設定されると、キャプチャを停止します。このメソッドは、指定されたストリームの発行者だけが使用できます。 
	 
     <p>このメソッドは、Flash Media Server で使用することを目的としています。詳細については、クラスの説明を参照してください。</p>
	 
	 <p> ビデオソースのアタッチ後に、<codeph>NetStream.publish()</codeph> を呼び出して転送を開始する必要があります。ビデオを表示するサブスクライバは、<codeph>NetStream.play()</codeph> と <codeph>Video.attachCamera()</codeph> の各メソッドを呼び出して、ステージ上にビデオを表示する必要があります。</p>
	 
	 <p><codeph>snapshotMilliseconds</codeph> を使用して値 0 を指定すると、単一のスナップショットを送信できます。また、正の数を指定して、ビデオフィードに指定のミリ秒数のトレーラーを追加すると、一連のスナップショット、つまり事実上のコマ落としビデオを送信することができます。 トレーラーは、ビデオメッセージの表示時間を拡張します。<codeph>attachCamera()</codeph> を、<codeph>snapshotMilliseconds</codeph> に正の値を指定して繰り返し呼び出すと、スナップショットとトレーラーが交互に繰り返されるシーケンスになり、コマ落としビデオが作成されます。例えば、毎日 1 フレームずつキャプチャして、ビデオファイルに追加することができます。サブスクライバがファイルを再生すると、各フレームが指定のミリ秒間画面上に表示され、その後、次のフレームが表示されます。</p>
	 
	 <p>この <codeph>snapshotMilliseconds</codeph> パラメーターの目的は、<codeph>fps</codeph> パラメーター（<codeph>Camera.setMode()</codeph> で設定可能）とは異なります。<codeph>snapshotMilliseconds</codeph> は、記録されたフレーム間の経過時間を制御するために指定します。<codeph>fps</codeph> は、記録時と再生時の経過時間を制御するために <codeph>Camera.setMode()</codeph> を使用して指定します。</p>
	 
	 <p>例えば、5 分ごとにスナップショットを 1 枚撮り、合計で 100 枚のスナップショットを撮るとします。この操作を行うには、次の 2 つの方法があります。</p>
     
	 <ul>
	 <li><codeph>NetStream.attachCamera(myCamera, 500)</codeph> コマンドを 5 分に 1 回、合計 100 回実行できます。この場合、記録に 500 分かかりますが、生成されるファイルは 50 秒（100 フレーム、各フレーム間 500 ミリ秒）で再生されます。</li> 
	 
	 <li><codeph>Camera.setMode()</codeph> コマンドを、<codeph>fps</codeph> に 1/300（300 秒ごとに 1 回、つまり 5 分に 1 回）の値を指定して発行してから <codeph>NetStream.attachCamera(source)</codeph> コマンドを発行すると、カメラは 500 分間連続してキャプチャするようになります。生成されるファイルは、500 分、つまり記録に要した時間と同じ長さで再生され、各フレームは 5 分間表示されます。</li>
	 </ul>
     
	 <p>どちらの手法でも、同じ 500 個のフレームがキャプチャされます。どちらのアプローチも有用ですが、使用するアプローチは、主に再生要件によって異なります。例えば、後者の場合、始めから最後までオーディオを録音し続けることができます。また、どちらの場合もファイルサイズはほとんど同じです。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:close"><apiName>close</apiName><shortdesc>
	 ストリーム上のすべてのデータの再生を停止し、time プロパティを 0 に設定して、他の用途でストリームにアクセスできるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.close, close
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 ストリーム上のすべてのデータの再生を停止し、<codeph>time</codeph> プロパティを 0 に設定して、他のユーザーがストリームにアクセスできるようにします。また、このメソッドは、HTTP を使用してダウンロードされたビデオファイルのローカルコピーを削除します。アプリケーションでは、アプリケーションで作成したファイルのローカルコピーは削除されますが、コピーがキャッシュディレクトリに残る場合があります。ビデオファイルをキャッシュやローカル記憶域に一切残さないようにする必要がある場合には、Flash Media Server を使用してください。
     
     <p>
     Flash Media Server を使用している場合、パブリッシュしているストリームから <codeph>NetStream.play()</codeph> を呼び出すか、サブスクライブしているストリームから <codeph>NetStream.publish()</codeph> を呼び出すときに、このメソッドが暗黙的に呼び出されます。次の点に注意してください。
     </p>
     
     <ul>
     <li>
     パブリッシュしているストリームから <codeph>close()</codeph> を呼び出すと、ストリームのパブリッシュが停止し、発行者は別の目的でストリームを使用できるようになります。ストリームのパブリッシュが停止するため、サブスクライバはストリームでパブリッシュされた内容を受信できなくなります。 
     </li>
     <li>
     サブスクライブしているストリームから <codeph>close()</codeph> を呼び出すと、サブスクライバに対するストリームの再生が停止し、サブスクライバは別の目的でストリームを使用できるようになります。他のサブスクライバの再生は停止しません。
     </li>
     <li>
     サブスクライブしているストリームは、そのストリームを閉じたり、<codeph>flash.net.NetStream.play(false)</codeph> を使用してストリームの種類を変更したりせずに、再生を停止できます。
     </li>
     </ul>
     
     
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/pause()"><linktext>pause()</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/publish()"><linktext>publish()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:onPeerConnect"><apiName>onPeerConnect</apiName><shortdesc>
	 
     ピアーがパブリッシュするストリームが、ピアーがサブスクライブするストリームに一致する場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>subscriber</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
	 
     ピアーがパブリッシュするストリームが、ピアーがサブスクライブするストリームに一致する場合に呼び出されます。サブスクライバが発行者に接続する前にこのメソッドを呼び出すと、ActionScript コードはピアーツーピアーパブリッシュに対するアクセスを細かく制御できます。次のコードは、このメソッドのコールバック関数の作成方法の例です。
     <codeblock>
	 var c:Object = new Object;
	 c.onPeerConnect = function(subscriber:NetStream):Boolean {
	 if (accept)
	 	return true;
	  else
	      return false;
	  };
	  m_netStream.client = c;
     </codeblock>
     
     <p>ピアーの発行者がこのメソッドを実装していない場合、すべてのピアーはパブリッシュされたすべてのコンテンツを再生できます。</p>
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:pause"><apiName>pause</apiName><shortdesc>
	 ビデオストリームの再生を一時停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.pause, pause
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 ビデオストリームの再生を一時停止します。ビデオが既に一時停止している場合は、このメソッドを呼び出しても何も実行されません。ビデオを一時停止した後で再生を再開するには、<codeph>resume()</codeph> を呼び出します。一時停止と再生を切り替える（最初にビデオを一時停止し、次に再開する）には、<codeph>togglePause()</codeph> を呼び出します。
	 
	 <p>Flash Player 9.0.115.0 以降、Flash Player では、<codeph>NetStream.pause()</codeph> が呼び出されたときにバッファーをクリアしなくなりました。Flash Player 9.0.115.0 以前は、Flash Player はバッファーが満杯になるまで待機してから再生を開始していましたが、このため遅延がよく発生していました。</p>
	 
	 <p>1 回の一時停止の場合、<codeph>NetStream.bufferLength</codeph> プロパティには 60 秒または <codeph>NetStream.bufferTime</codeph> の値の 2 倍のうち、いずれか大きい方の値という制限があります。例えば、<codeph>bufferTime</codeph> が 20 秒の場合、Flash Player は <codeph>NetStream.bufferLength</codeph> が 20~~2（40）または 60 のうち、大きい方の値になるまでバッファーするため、この場合は、<codeph>bufferLength</codeph> が 60 秒になるまでバッファーします。<codeph>bufferTime</codeph> が 40 秒の場合、Flash Player は <codeph>bufferLength</codeph> が 40~~2 (80) または 60 のうち、大きい方の値になるまでバッファーするため、この場合は、<codeph>bufferLength</codeph> が 80 秒になるまでバッファーします。</p>
	 
	 <p><codeph>bufferLength</codeph> プロパティにも絶対制限があります。<codeph>pause()</codeph> の呼び出しによって <codeph>bufferLength</codeph> が 600 秒または<codeph>bufferTime</codeph> ~~ 2 の値のいずれか大きい方の値を超えた場合、Flash Player はバッファーをフラッシュし、<codeph>bufferLength</codeph> を 0 にリセットします。例えば、<codeph>bufferTime</codeph> が 120 秒の場合は、<codeph>bufferLength</codeph> が 600 秒に達すると、Flash Player はバッファーをフラッシュします。<codeph>bufferTime</codeph> が 360 秒の場合は、<codeph>bufferLength</codeph> が 720 秒に達すると、Flash Player はバッファーをフラッシュします。</p>
	 
	 <p><b>ヒント</b>：例えば、コードで <codeph>NetStream.pause()</codeph> を使用し、閲覧者がコマーシャルを見ている間、データをバッファーし、メインのビデオが開始されたときに一時停止を解除することができます。</p>
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/close()"><linktext>close()</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/resume()"><linktext>resume()</linktext></link><link href="flash.net.xml#NetStream/togglePause()"><linktext>togglePause()</linktext></link><link href="flash.net.xml#NetStream/bufferLength"><linktext>bufferLength</linktext></link><link href="flash.net.xml#NetStream/bufferTime"><linktext>bufferTime</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:play"><apiName>play</apiName><shortdesc>
     メディアファイルを再生します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>"at"see flash.media.Video#attachVideo()  This method no longer exists.  Replace with new method.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。この制限は、この SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。
	 
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>少なくとも 1 つのパラメーターを指定する必要があります。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>NetStream オブジェクトが無効です。このエラーは、NetConnection の失敗によって発生する場合があります。
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc><codeph>URLRequest.url</codeph> プロパティまたは変数参照のいずれかのストリングとして再生するメディアファイルの位置です。アプリケーションセキュリティサンドボックス外にある <ph platform="actionscript">Flash Player および</ph> AIR コンテンツの場合、SWF ファイルまたはサブディレクトリと同じディレクトリに保存されているローカルビデオファイルを再生できます。ただし、上位レベルのディレクトリに移動することはできません。
	 
	 <p>
	 Flash Media Server では、<codeph>play()</codeph> は次の引数を受け取ります。
	 </p>
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 <tgroup cols="3"><thead><row><entry>名前</entry><entry>必須</entry><entry>説明</entry></row></thead><tbody><row>
	   <entry><codeph>name:Object</codeph></entry>
	   <entry>必須 </entry>
       <entry> 記録されたファイルの名前、<codeph>NetStream.publish()</codeph> を使用してパブリッシュされたライブデータの識別子、または <codeph>false</codeph>。<codeph>false</codeph> の場合は、ストリームの再生が停止し、他のパラメーターは無視されます。ファイル名の構文の詳細については、この表の次にあるファイル形式一覧を参照してください。</entry>
	 </row><row>
	   <entry><codeph>start:Number</codeph></entry>
	   <entry>オプション</entry>
	   <entry> 開始時間（秒単位）。指定可能な値は、-2、-1、0、または正の数値です。デフォルト値は -2 です。この値のときは、ライブストリームを検索し、次に、記録されたストリームを検索します。いずれのストリームも検出されない場合は、ライブストリームが開きます。-1 の場合は、ライブストリームだけが再生されます。0 または正の数値の場合は、記録されたストリームの再生が、<codeph>start</codeph> に指定された秒数から開始されます。
	   </entry>
	 </row><row>
	   <entry> <codeph>len:Number</codeph> </entry>
	   <entry> オプション（<codeph>start</codeph> が指定されている場合） </entry>
	   <entry> 再生の継続時間（秒単位）。指定可能な値は、-1、0、または正の数値です。デフォルト値は -1 です。この値のときは、ライブストリームまたは記録されたストリームが最後まで再生されます。0 の場合、記録されたストリームの先頭を基準として、<codeph>start</codeph> で指定された秒数の位置にある単一のフレームが再生されます。正の数値の場合、ライブストリームまたは記録されたストリームが、<codeph>len</codeph> で指定された秒数だけ再生されます。
	   </entry>
	 </row><row>
	   <entry> <codeph>reset:Object</codeph> </entry>
	   <entry> オプション（<codeph>len</codeph> が指定されている場合） </entry>
	   <entry> 再生リストを消去するかどうか。デフォルト値は 1 または <codeph>true</codeph> です。この値の場合、以前に <codeph>play</codeph> で呼び出したファイルが消去され、<codeph>name</codeph> で指定したファイルが即座に再生されます。0 または <codeph>false</codeph> の場合、再生リストにストリームが追加されます。2 の場合、再生リストが維持され、間隔をおいて順次返されるのではなく、すべてのストリームメッセージが一度に返されます。3 の場合、再生リストが消去され、すべてのストリームメッセージが一度に返されます。  </entry>
	 </row></tbody></tgroup></adobetable>
	 
     <p>
     次の表に記載されているファイル形式を再生できます。構文は、ファイル形式によって異なります。</p>
     <p>
     <adobetable class="innertable">
     
     
     
     
     <tgroup cols="3"><thead><row><entry>ファイル形式</entry><entry>シンタックス</entry><entry>例</entry></row></thead><tbody><row>
     <entry>FLV</entry>
     <entry>ストリーム名を、ファイル名拡張子なしのストリングとして指定します。</entry>
     <entry><codeph>ns.play("myflvstream");</codeph></entry>
     </row><row>
     <entry>MP3 または ID3</entry>
     <entry>ストリーム名をストリングとして指定します。接頭辞として <codeph>mp3:</codeph> または <codeph>id3:</codeph> を使用し、ファイル名の拡張子は含めません。</entry>
     <entry><codeph>ns.play("mp3:mymp3stream");</codeph> <codeph>ns.play("id3:myid3data");</codeph></entry>
     </row><row>
     <entry>MPEG-4 対応ファイル（F4V、MP4 など）</entry>
      <entry>ストリーム名をストリングとして指定します。接頭辞として <codeph>mp4:</codeph> を使用し、ファイル名の拡張子は必要に応じて指定します。この接頭辞は、H.264 エンコードされたビデオと AAC エンコードされたオーディオが MPEG-4 Part 14 コンテナ形式でファイルに格納されていることをサーバーに指示します。サーバー上のファイルに拡張子付きのファイル名が付けられている場合は、拡張子を指定する必要があります。<codeph>publish()</codeph> メソッドに対してファイル名拡張子を指定した場合は、ここでもファイル名拡張子を指定してください。</entry>
     <entry><codeph>ns.play("mp4:myvideo.f4v")</codeph> <codeph>ns.play("mp4:myvideo.mp4")</codeph> <codeph>ns.play("mp4:myvideo")</codeph></entry>
     </row></tbody></tgroup></adobetable>
     </p>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     メディアファイルを再生します。 
     
     <p>
     サポートするコーデックとファイル形式について詳しくは、<xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external">http://www.adobe.com/go/hardware_scaling_jp</xref> および <xref href="http://www.adobe.com/go/learn_fms_fileformats_jp" scope="external">www.adobe.com/go/learn_fms_fileformats_jp</xref> を参照してください。</p>
     
	 <p>ビデオデータを表示するには、Video オブジェクトを作成して <codeph>Video.attachNetStream()</codeph> メソッドを呼び出します。マイクからオーディオをストリーミングするには、<codeph>NetStream.attachAudio()</codeph> メソッドを使用します。Microphone オブジェクトを使用して、オーディオの一部の状態を制御できます。</p>
	 
	 <p><codeph>DisplayObjectContainer.addChild()</codeph> メソッドを呼び出して、表示リスト上のオブジェクトにオーディオをルーティングします。Sound オブジェクトを作成して、オーディオの一部の状態を制御できます。詳細については、<codeph>DisplayObjectContainer.addChild()</codeph> メソッドを参照してください。</p>
	 
	 <p>ビデオファイルが見つからない場合は、<codeph>NetStatusEvent</codeph> イベントが送出されます。</p>
	 
     <p>Flash Media Server を使用しないでこのメソッドを使用する場合、セキュリティに関する考慮事項があります。信頼できるローカルのサンドボックスまたはネットワークアクセスを許可されたローカルのサンドボックスのファイルは、リモートサンドボックスからビデオファイルをロードおよび再生することができますが、URL ポリシーファイルで明示的な許可が与えられていない限り、リモートファイルのデータにアクセスできません。<ph platform="actionscript">また、Flash Player で実行されている SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツが含まれる HTML ページの <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。</ph></p>
	 
      <p>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
     
      <p>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
     
	 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
	 
     <ul>
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     <li><codeph>NetStream.checkPolicyFile</codeph> プロパティ。</li>
     </ul>
     
	 
     </apiDesc><example><b>Flash Media Server</b> この例では、記録された F4V ファイルを、先頭から開始して最大 100 秒まで再生します。MPEG-4 ファイルの場合、サーバー上のファイル名に拡張子が付けられていれば <codeph>play()</codeph> メソッドで拡張子を指定する必要があります。 
	 <codeblock>
     ns.play("mp4:record1.f4v", 0, 100, true);
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObjectContainer/addChild()"><linktext>DisplayObjectContainer.addChild()</linktext></link><link href="flash.net.xml#NetStream/checkPolicyFile"><linktext>checkPolicyFile</linktext></link></related-links><adobeApiEvent id="flash.net:NetStream:play_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに送出されます。<codeph>code</codeph> プロパティの値は <codeph>"DRM.encryptedFLV"</codeph> です。
	 
     </apiDesc></adobeApiEventDetail><shortdesc>DRM（デジタル著作権管理）で暗号化されたコンテンツを再生しようとしたときに送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:NetStream:play2"><apiName>play2</apiName><shortdesc>
     再生用の各オプションを設定のうえ、メディアファイルの再生を開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiOperationClassifier>flash.net:NetStreamPlayOptions</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
     再生用の各オプションを設定のうえ、メディアファイルの再生を開始します。
     
     <p>このメソッドは、<codeph>NetStream.play()</codeph> を拡張したものです。<codeph>play()</codeph> メソッドと同様に、<codeph>play2()</codeph> メソッドは、メディアファイルの再生を開始したり、メディアファイルをキューに追加して再生リストを作成したりします。Flash Media Server で使用する場合、サーバーに要求を出して別のメディアファイルに切り替えることもできます。切り替えはクライアントアプリケーションでシームレスに実行されます。</p> 
     
     <p><codeph>play2()</codeph> メソッドを使用して、異なるビットレートでエンコードした同じコンテンツのストリームに切り替えたり、再生リストのストリームと入れ替えたりします。<codeph>NetStreamInfo</codeph> クラスを使用して、ネットワーク条件を監視したり、データに基づいたストリームを切り替えたりします。異なる機能でクライアントのストリームを切り替えることもできます。ストリームを切り替えるための ActionScript の使用は、<i>ダイナミックストリーミング</i>と呼ばれます。詳細については、『Adobe Flash Media Server Developerガイド』（<xref href="http://www.adobe.com/go/learn_fms_devguide_en">www.adobe.com/go/learn_fms_devguide_jp</xref>）の「ダイナミックストリーミング」を参照してください。Adobe では、NetStream クラスを拡張する DynamicStream と呼ばれるカスタム ActionScript クラスを作成しました。DynamicStream クラスを使用すると、ネットワーク状態を検出するための独自のコードを作成する代わりに、アプリケーションでダイナミックストリーミングを実装できます。 独自のダイナミックストリーミングコードの作成を選択した場合でも、作業の実装を確認するには DynamicStream クラスを参照してください。<xref href="http://www.adobe.com/go/fms_tools">www.adobe.com/go/fms_tools_jp</xref> でクラスおよびクラスのドキュメントをダウンロードしてください。</p>
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStreamPlayOptions"><linktext>NetStreamPlayOptions</linktext></link><link href="flash.net.xml#NetStreamPlayTransitions"><linktext>NetStreamPlayTransitions</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:preloadEmbeddedData"><apiName>preloadEmbeddedData</apiName><shortdesc>
	 ローカルに保存されたメディアファイルから DRM メタデータを抽出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiOperationClassifier>flash.net:NetStreamPlayOptions</apiOperationClassifier><apiDesc>コンテンツファイルを処理中に使用するオプションを説明する NetStreamPlayOptions。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ローカルに保存されたメディアファイルから DRM メタデータを抽出します。
	 
	 <p>オフライン再生に必要な DRM バウチャーをダウンロードおよびキャッシュする際に最初の手順として <codeph>preloadEmbeddedMetaData()</codeph> を使用します。埋め込み DRM メタデータがメディアファイル内で検出されると、DRMContentData オブジェクトは NetStream クライアントの <codeph>onDRMContentData</codeph> 関数に渡されます。この DRMContentData オブジェクトには、コンテンツの再生に求められるバウチャーを取得するために必要な情報が含まれています。バウチャーをダウンロードするには、DRMContentDataObject を DRMManager <codeph>loadVoucher()</codeph> メソッドに渡します。</p>
	 
	 <p>DRM バウチャーをプリロードする手順には、次のものが含まれます。</p>
	 <ul>
	 <li>
	 <p>メタデータをプリロードする新しい NetStream オブジェクトを作成します。</p>
	 </li>
	 <li>コールバック関数を NetStream <codeph>client</codeph> の <codeph>onDRMContentData</codeph> プロパティに割り当てます。</li>
	 <li>新しい NetStreamPlayOptions オブジェクトを作成して、その <codeph>streamName</codeph> プロパティをローカルビデオファイルの URL ストリングに設定します。</li>
	 <li><codeph>preloadEmbeddedMetadata()</codeph> を呼び出して、NetStreamPlayOptions オブジェクトに渡します。</li>
	 <li><codeph>onDRMContentData</codeph> コールバックに応答して、DRMManager <codeph>loadVoucher()</codeph> メソッドを呼び出し、DRMContentData オブジェクトに渡します。DRMContentData オブジェクトの <codeph>authenticationMethod</codeph> プロパティに値 <codeph>userNameAndPassWord</codeph> がある場合、バウチャーを読み込む前に Media Rights Server 上でユーザーを認証する必要があります。</li>
	 <li>プリロードに使用した NetStream を閉じます。</li> 
	 </ul>
	 
	 <p><b>注意：</b>同じ NetStream オブジェクトを使用して、メタデータのプリロードとコンテンツの再生を両方行う場合、再生開始前にプリロード処理によって生成された <codeph>onPlayStatus</codeph> 呼び出しを待機する必要があります。</p>
	 
	 <p>ダウンロードされたバウチャーは、ローカルキャッシュに保存されます。オンラインでコンテンツを再生すると、バウチャーのダウンロードおよびキャッシュを行うことができます。DRM で保護されたコンテンツファイルが表示されると、キャッシュされたバウチャーはローカルストアから自動的に取得されます。DRMManager を使用すると、バウチャーキャッシュを管理します。</p>
	   
	 <p><b>注意：</b>HTTP、HTTPS または RTMP 接続を使用した DRM メタデータのプリロードはサポートされていません。ファイルシステム上に保存されたファイルからのみメタデータのプリロードは可能です。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/event:onDRMContentData"><linktext>onDRMContentData</linktext></link><link href="flash.net.drm.xml#DRMContentData"><linktext>flash.net.drm.DRMContentData</linktext></link><link href="flash.net.drm.xml#DRMManager/loadVoucher()"><linktext>flash.net.drm.DRMManager.loadVoucher()</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:publish"><apiName>publish</apiName><shortdesc>
	 クライアントから Flash Media Server へ、ストリーミングオーディオ、ビデオ、およびテキストメッセージを送信します。送信中にストリームを記録することもできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ストリームを識別するストリングです。このストリームをサブスクライブしているクライアントは、<codeph>NetStream.play()</codeph> を呼び出す場合に、この同じ名前を渡す必要があります。ストリーム名の後にスラッシュ (/) を指定しないでください。例えば、<codeph>"bolero/"</codeph> というストリーム名は使用しないでください。 
     
     <p>
     次の表に示す形式でファイルをパブリッシュできます。構文は、ファイル形式によって異なります。</p>
     <p>
     <adobetable class="innertable">
     
     
     
     
     <tgroup cols="3"><thead><row><entry>ファイル形式</entry><entry>シンタックス</entry><entry>例</entry></row></thead><tbody><row>
     <entry>FLV</entry>
     <entry>ストリーム名を、ファイル名拡張子なしのストリングとして指定します。</entry>
     <entry><codeph>ns.publish("myflvstream");</codeph></entry>
     </row><row>
     <entry>MP3 または ID3</entry>
     <entry>ストリーム名をストリングとして指定します。接頭辞として <codeph>mp3:</codeph> または <codeph>id3:</codeph> を使用し、ファイル名の拡張子は含めません。</entry>
     <entry><codeph>ns.publish("mp3:mymp3stream");</codeph> <codeph>ns.publish("id3:myid3data");</codeph></entry>
     </row><row>
     <entry>MPEG-4 対応ファイル（F4V、MP4 など）</entry>
     <entry>ストリーム名をストリングとして指定します。接頭辞として <codeph>mp4:</codeph> を使用し、ファイル名の拡張子は必要に応じて指定します。この接頭辞は、H.264 エンコードされたビデオと AAC エンコードされたオーディオが MPEG-4 Part 14 コンテナ形式でファイルに格納されていることをサーバーに指示します。</entry>
     <entry><codeph>ns.publish("mp4:myvideo.f4v")</codeph> <codeph>ns.publish("mp4:myvideo.mp4");</codeph> <codeph>ns.publish("mp4:myvideo");</codeph></entry>
     </row></tbody></tgroup></adobetable>
     </p>     
	 
	 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ストリームのパブリッシュ方法を指定するストリングです。有効な値は "<codeph>record</codeph>"、"<codeph>append</codeph>"、および "<codeph>live</codeph>" です。デフォルト値は "<codeph>live</codeph>" です。
	 <ul>
	 <li>"<codeph>record</codeph>" を渡すと、Flash Media Server はライブデータをパブリッシュして記録し、記録したデータを、<codeph>name</codeph> パラメーターに渡された値と名前が一致する新しいファイルに保存します。このファイルが存在する場合は、上書きされます。</li>
	 <li>"<codeph>append</codeph>" を渡すと、Flash Media Server はライブデータをパブリッシュして記録し、記録したデータを、<codeph>name</codeph> パラメーターに渡された値と名前が一致するファイルに追加します。<codeph>name</codeph> パラメーターと一致するファイルが見つからない場合は、ファイルが作成されます。 </li>
	 <li>このパラメーターを省略するか、"<codeph>live</codeph>" を渡した場合、Flash Media Server はライブデータを記録せずにパブリッシュします。<codeph>name</codeph> パラメーターに渡された値と名前が一致するファイルが存在する場合は、そのファイルが削除されます。</li>
	 </ul>
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 クライアントから Flash Media Server へ、ストリーミングオーディオ、ビデオ、およびテキストメッセージを送信します。送信中にストリームを記録することもできます。このメソッドは、指定されたストリームの発行者だけが使用できます。
	 
	 <p>FLV または MPEG-4 形式でファイルを記録できます。MPEG-4 形式でファイルを記録すると、フラットナーツールを使用して別のアプリケーションでファイルを編集または再生する必要があります。ツールのダウンロード方法については、<xref href="http://www.adobe.com/go/fms_tools_jp" scope="external">www.adobe.com/go/fms_tools_jp</xref> を参照してください。</p>
     
     <p>このメソッドを使用して、パブリッシュ済みおよび記録済みのストリームを再生しないでください。ストリームを再生するには、<codeph>NetStream.play()</codeph> メソッドを呼び出します。</p>
	 
	 <codeblock platform="actionscript">
	 var subscribeNS:NetStream = new NetStream(myNetConnection);
	 subscribeNS.play("streamToPlay");
	 </codeblock>
	 
	 <codeblock platform="javascript">
	 var subscribeNS = new air.NetStream(myNetConnection);
	 subscribeNS.play("streamToPlay");
	 </codeblock>
	 
     <p>Flash Media Server によってストリームが記録されると、サーバー上のアプリケーションのディレクトリ内のサブディレクトリにファイルを作成して保存します。各ストリームは、<codeph>NetConnection.connect()</codeph> に渡されたアプリケーションインスタンス名に一致する名前のディレクトリに格納されます。それらのディレクトリはサーバーで自動的に作成されます。例えば、次のコードでは「lectureseries」アプリケーションに接続し、「lecture」というストリームを記録します。applications/lectureseries/streams/_definst_ ディレクトリに lecture.flv というファイルが記録されます。
     </p>
     
     <codeblock platform="actionscript">
     var myNC:NetConnection = new NetConnection();
     myNC.connect("rtmp://fms.example.com/lectureseries");
     var myNS:NetStream = new NetStream(myNC);
     myNS.publish("lecture", "record");
     </codeblock>
     
     <codeblock platform="javascript">
     var myNC = new air.NetConnection();
     myNC.connect("rtmp://fms.example.com/lectureseries");
     var myNS = new air.NetStream(myNC);
     myNS.publish("lecture", "record");
     </codeblock>
     
     <p>次の例は、同じアプリケーションの別のインスタンスに接続する方法を示しています。/applications/lectureseries/streams/monday ディレクトリに lecture.flv というファイルが記録されます。</p>
     
     <codeblock>
     var myNC:NetConnection = new NetConnection();
     myNC.connect("rtmp://fms.example.com/lectureseries/monday");
     var myNS:NetStream = new NetStream(myNC);
     myNS.publish("lecture", "record");
     </codeblock>
     
     <codeblock platform="javascript">
     var myNC = new air.NetConnection();
     myNC.connect("rtmp://fms.example.com/lectureseries/monday");
     var myNS = new air.NetStream(myNC);
     myNS.publish("lecture", "record");
     </codeblock>
   	 
	 <p>このメソッドでは <codeph>NetStatusEvent</codeph> オブジェクトを送出します。例えば、指定した名前を持つストリームを誰かが既にパブリッシュしている場合、<codeph>code</codeph> プロパティに <codeph>"NetStream.Publish.BadName"</codeph> を設定した <codeph>NetStatusEvent</codeph> オブジェクトが送出されます。詳しくは、<codeph>NetStatusEvent</codeph> オブジェクトを参照してください。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetConnection/connect()"><linktext>NetConnection.connect()</linktext></link><link href="" invalidHref="flash.net.xml#NetStatusEvent/info"><linktext>NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:receiveAudio"><apiName>receiveAudio</apiName><shortdesc>
	 ストリーム上で着信オーディオが再生されるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>flag</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>ストリーム上で着信オーディオを再生するかどうかを指定します。再生する場合は <codeph>true</codeph>、再生しない場合は <codeph>false</codeph> を指定します。デフォルト値は <codeph>true</codeph> です。 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリーム上で着信オーディオが再生されるかどうかを示します。このメソッドは、指定されたストリームにサブスクライブされたクライアントでのみ使用できます。ストリームの発行者は使用できません。
	 
     <p>このメソッドは、主に Flash Media Server で使用することを目的としています。詳細については、クラスの説明を参照してください。</p> 
	 
	 <p>このメソッドは、<codeph>NetStream.play()</codeph> メソッドを呼び出す前または呼び出した後に呼び出すことができ、実際にストリームの受信を開始します。例えば、着信オーディオストリームをミュートまたはミュート解除する場合、ユーザーがクリックするボタンにこれらのメソッドをアタッチできます。</p>
	 
	 <p>指定のストリームにオーディオデータのみが含まれる場合、このメソッドに値 <codeph>false</codeph> を渡すと <codeph>NetStream.time</codeph> は増加しなくなります。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:receiveVideo"><apiName>receiveVideo</apiName><shortdesc>
	 ストリーム上で着信ビデオが再生されるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>flag</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>このストリーム上で着信ビデオを再生するかどうかを指定します。再生する場合は <codeph>true</codeph>、再生しない場合は <codeph>false</codeph> を指定します。デフォルト値は <codeph>true</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ストリーム上で着信ビデオが再生されるかどうかを指定します。このメソッドは、指定されたストリームにサブスクライブされたクライアントでのみ使用できます。ストリームの発行者は使用できません。
	 
     <p>このメソッドは、主に Flash Media Server で使用することを目的としています。詳細については、クラスの説明を参照してください。</p>
	 
	 <p>このメソッドは、<codeph>NetStream.play()</codeph> メソッドを呼び出す前または呼び出した後に呼び出すことができ、実際にストリームの受信を開始します。例えば、着信ビデオストリームを表示または非表示にする場合、ユーザーが押すボタンにこれらのメソッドをアタッチできます。</p>
	 
	 <p>指定のストリームにビデオデータのみが含まれる場合、このメソッドに値 <codeph>false</codeph> を渡すと <codeph>NetStream.time</codeph> は増加しなくなります。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:receiveVideoFPS"><apiName>receiveVideoFPS</apiName><shortdesc>
	 着信ビデオのフレームレートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>FPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>着信ビデオ再生時の 1 秒あたりのフレームレートを指定します。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 着信ビデオのフレームレートを指定します。このメソッドは、指定されたストリームにサブスクライブされたクライアントでのみ使用できます。ストリームの発行者は使用できません。
	 
     <p>このメソッドは、主に Flash Media Server で使用することを目的としています。詳細については、クラスの説明を参照してください。</p>
	 
	 <p>このメソッドは、<codeph>NetStream.play()</codeph> メソッドを呼び出す前または呼び出した後に呼び出すことができ、実際にストリームの受信を開始します。例えば、着信ビデオのフレームレートをユーザーが設定できるテキストフィールドにこれらのメソッドをアタッチできます。</p>
     
     <p>ビデオの受信を停止するには、FPS に 0 を渡します。現在のフレームレートを確認するには、<codeph>NetStream.currentFPS</codeph> を使用します。</p>
     
     <p><codeph>FPS</codeph> パラメーターに値を渡してビデオのフレームレートを制限すると、Flash Media Server は、ビデオの完全性を維持する一方で、フレームを減らそうとします。 サーバーは、どの 2 つのキーフレーム間でも必要なレートを満たすことができる最小数のフレームを送信します。ただし、I フレーム（中間フレーム）は連続的に送信される必要があるので注意してください。そのようにしないと、ビデオは破損してしまいます。したがって、キーフレームに続いて、必要な数のフレームが直ちに連続的に送信されます。フレームは均等には配信されないので、待機により中断されたセグメントにおいてもモーションはスムーズに表示されます。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetStream:resetDRMVouchers"><apiName>resetDRMVouchers</apiName><shortdesc>
     ローカルにキャッシュされたすべての DRM（デジタル著作権管理）バウチャーデータを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>NetStream, resetDRMVouchers
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>バウチャーデータを削除できません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ローカルにキャッシュされたすべての DRM（デジタル著作権管理）バウチャーデータを削除します。
     <p>
     アプリケーションで、保護されたコンテンツにユーザーがアクセスできる media rights server から必要なバウチャーを再ダウンロードする必要があります。この関数の呼び出しは、DRMManager オブジェクトの <codeph>resetDRMVouchers()</codeph> 関数を呼び出すことと同じです。</p>
     
     </apiDesc><example conref="examples\NetStream.resetDRMVouchers.1.as"> 次の例では、すべての DRM バウチャーをリセットします。
<codeblock>

NetStream.resetDRMVouchers();
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.drm.xml#DRMManager/resetDRMVouchers()"><linktext>flash.net.drm.DRMManager.resetDRMVouchers()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:resume"><apiName>resume</apiName><shortdesc>
	 再生を一時停止していたビデオストリームを再開します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.resume, resume
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 再生を一時停止していたビデオストリームを再開します。ビデオが既に再生中である場合は、このメソッドを呼び出しても何も実行されません。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/close()"><linktext>close()</linktext></link><link href="flash.net.xml#NetStream/pause()"><linktext>pause()</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/togglePause()"><linktext>togglePause()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:seek"><apiName>seek</apiName><shortdesc>
	 
	 指定された位置に最も近いキーフレーム（ビデオ業界では I フレームとも呼ばれます）をシークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.seek, seek
	 
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ビデオファイルにおける、再生ヘッドのおおよその移動時間（秒単位）です。Flash Media Server で、Application.xml 設定ファイルの <codeph>&lt;EnhancedSeek></codeph> が <codeph>true</codeph> に設定されている場合（これがデフォルトの設定です）、サーバーは<codeph>オフセット</codeph>にキーフレームを生成します。 
	 
	 <ul>
	   <li>ストリームの先頭に移動するには、<codeph>offset</codeph> に 0 を指定します。</li>
	   <li>ストリームの先頭から前方にシークするには、進めたい秒数をパラメーターに指定します。例えば、先頭から 15 秒の位置（または15 秒前のキーフレーム）に再生ヘッドを移動するには、<codeph>myStream.seek(15)</codeph> にします。</li>
	   <li>現在位置を基準としてシークを行う場合、<codeph>NetStream.time + n</codeph>、または <codeph>NetStream.time - n</codeph> と指定すると、それぞれ現在位置から <codeph>n</codeph> 秒分だけ前方または後方へシークが行われます。例えば、現在位置から 20 秒巻き戻すには、<codeph>NetStream.seek(NetStream.time - 20)</codeph> にします。</li>
	 </ul>
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 指定された位置に最も近いキーフレーム（ビデオ業界では I フレームとも呼ばれます）をシークします。キーフレームは、ストリームの先頭から秒単位のオフセット位置に配置されます。 
	 
     <p>
     通常、ビデオストリームは、キーフレーム（または I フレーム）と P フレームの 2 種類のフレームでエンコードされます。キーフレームにはイメージ全体が格納されています。一方、P フレームは、キーフレーム間の追加のビデオ情報を提供する中間フレームです。通常、ビデオストリームには 10 ～ 50 フレームごとにキーフレームがあります。 
     </p>
     
     <p>
     Flash Media Server では、<codeph>seek()</codeph> の動作は <codeph>EnhancedSeek</codeph> エレメントによって制御されます。このエレメントは、<codeph>Application.xml</codeph> 設定ファイルに定義されています。
     </p>
     
     <p>
     <codeph>EnhancedSeek</codeph> が <codeph>false</codeph> の場合、サーバーは通常のシークモードを使用します。通常のシークモードでは、サーバーは最も近いキーフレームからストリーミングを開始します。例えば、ビデオの 0 秒と 10 秒の位置にキーフレームがある場合、4 秒の位置にシークすると、0 秒の位置のキーフレームを使用して 4 秒の位置から再生が開始されます。10 秒の位置にある次のキーフレームに到達するまで、ビデオはフリーズされたままになります。シークの操作性を向上するには、キーフレームの間隔を短くする必要があります。通常のシークモードでは、キーフレーム間の位置からビデオを開始することはできません。
     </p>
     
     <p>
     <codeph>EnhancedSeek</codeph> がデフォルト値の <codeph>true</codeph> の場合、サーバーは前のキーフレームとすべての中間 P フレームに基づいて、<codeph>オフセット</codeph>位置に新しいキーフレームを生成します。ただし、これによりサーバーの処理の負荷が高くなり、生成されるキーフレームに歪みが発生することがあります。ビデオコーデックが On2 の場合、シーク位置の前のキーフレームと、そのキーフレームとシーク位置の間にあるすべての P フレームがクライアントに送信されます。
     </p>
     
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/time"><linktext>time</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:send"><apiName>send</apiName><shortdesc>
	 パブリッシュされたストリーム上で、サブスクライブしているすべてのクライアントにメッセージを送信します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>handlerName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>送信されるメッセージです。メッセージを受け取る ActionScript ハンドラーの名前でもあります。ハンドラー名の深さは 1 レベルのみで（つまり、親子形式を取ることができません）、ストリームオブジェクトに相対します。ハンドラー名には予約語を使用しないでください。例えば、ハンドラー名として "<codeph>close</codeph>" を使用すると、このメソッドは失敗します。Flash Media Server で、<codeph>@setDataFrame</codeph> を使用してメタデータのキーフレームをライブストリームに追加したり、<codeph>@clearDataFrame</codeph> を使用してキーフレームを削除したりします。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>オプションのパラメーターで、任意のデータ型を指定できます。それらは直列化され、接続を介して送信されます。受信側のハンドラーは同じ順番でそれらを受け取ります。パラメーターが循環オブジェクト（循環するリンクされたリストなど）である場合、シリアライザは参照を正しく処理します。Flash Media Server で、<codeph>@setDataFrame</codeph> が最初の引数の場合、<codeph>onMetaData</codeph> を 2 番目の引数として使用します。3 番目の引数には、メタデータがプロパティとして設定された <codeph>Object</codeph> または <codeph>Array</codeph> のインスタンスを渡します。設定可能なプロパティ名のリストについては、<xref href="http://www.adobe.com/go/learn_fms_devguide_jp" scope="external">Flash Media Server デベロッパーガイド</xref>を参照してください。<codeph>@clearDataFrame</codeph> を最初の引数、<codeph>onMetaData</codeph> を 2 番目の引数として使用し、3 番目の引数はありません。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 パブリッシュされたストリーム上で、サブスクライブしているすべてのクライアントにメッセージを送信します。このメソッドは、指定されたストリームの発行者だけが使用可能で、Flash Media Server で使用することを目的としています。このメッセージを処理して応答するには、<codeph>NetStream</codeph> オブジェクトにハンドラーを作成します。このオブジェクトの例には、<codeph>ns.HandlerName</codeph> があります。
     
     <p>
     <ph platform="actionscript">Flash Player または </ph> AIR は、メソッドやそれらのデータ、オブジェクトプロトタイプ変数、または列挙不可能な変数を直列化しません。表示オブジェクトの場合、<ph platform="actionscript">Flash Player または</ph> AIR はパスを直列化しますが、データは直列化しません。
	 </p>
	 
	 <p>
	 <codeph>send()</codeph> メソッドを呼び出し、Flash Media Server に送信するライブストリームにデータキーフレームを追加できます。データキーフレームは、発行者がライブストリームに追加するメッセージです。通常、データキーフレームは、カメラやマイクロホンからストリーム用のデータをキャプチャする前に、ライブストリームにメタデータを追加するために使用されます。発行者は、ライブストリームのパブリッシュ中にいつでもデータキーフレームを追加できます。発行者がサーバーに接続している限り、データキーフレームはサーバーのメモリに保存されます。 
	 </p>
	 <p>
	 データキーフレームが追加される前のライブストリームにサブスクライブしているクライアントは、データキーフレームが追加されるとすぐにそのキーフレームを受信します。データキーフレームが追加された後のライブストリームにサブスクライブしているクライアントは、サブスクライブするときにキーフレームを受信します。
	 </p>
	 <p>
	 Flash Media Server に送信するライブストリームにメタデータのキーフレームを追加するには、次の例に示すように、<codeph>@setDataFrame</codeph> をハンドラー名として使用し、続いて 2 つの引数を指定します。
	 </p>
	 
	 <codeblock platform="actionscript">
	 var ns:NetStream = new NetStream(nc);
	 ns.send("@setDataFrame", "onMetaData", metaData);
	 </codeblock>
	 
	 <codeblock platform="javascript">
	 var ns = new air.NetStream(nc);
	 ns.send("@setDataFrame", "onMetaData", metaData);
	 </codeblock>
	 
	 <p>
	 <codeph>@setDataFrame</codeph> 引数は、Flash Media Server に組み込まれている特別なハンドラーを表します。<codeph>onMetaData</codeph> 引数は、<codeph>onMetaData</codeph> イベントを監視してメタデータを取得する、クライアントアプリケーションのコールバック関数の名前です。3 番目の <codeph>metaData</codeph> は、メタデータ値を定義したプロパティを持つ <codeph>Object</codeph> または <codeph>Array</codeph> のインスタンスです。発行者は、サブスクライバにとって理解しやすいプロパティ名を設定する必要があります。設定可能なプロパティ名のリストについては、<xref href="http://www.adobe.com/go/learn_fms_devguide_jp" scope="external">Flash Media Server デベロッパーガイド</xref>を参照してください。
	 </p>
	 
	 <p><codeph>@clearDataFrame</codeph> を使用して、ストリームに設定されているメタデータのキーフレームを消去します。
	 </p>
	 <codeblock>
	 ns.send("@clearDataFrame", "onMetaData");
	 </codeblock>
	 
	 
	 </apiDesc><example conref="examples\NetStream.send.1.as"> 次の例は、2 つの <codeph>NetStream</codeph> オブジェクトを作成します。1 つのオブジェクトはサーバーへのライブストリームのパブリッシュに使用し、もう 1 つはストリームへのサブスクライブに使用します。
<codeblock>
package {
   import flash.display.Sprite;
   import flash.net.NetConnection;
   import flash.net.NetStream;
   import flash.events.NetStatusEvent;
   import flash.media.Video;
   import flash.utils.setTimeout;

 
   public class TestExample extends Sprite
   {
     var nc:NetConnection = new NetConnection();
     var ns1:NetStream;
     var ns2:NetStream;
     var vid:Video = new Video(300,300);
     var obj:Object = new Object();
 
     public function TestExample() {
        nc.objectEncoding = 0;
        nc.addEventListener("netStatus", onNCStatus);
        nc.connect("rtmp://localhost/FlashVideoApp");
        addChild(vid); 
     }
  
     function onNCStatus(event:NetStatusEvent):void {
       switch (event.info.code) {
           case "NetConnection.Connect.Success":
               trace("You've connected successfully");
               ns1 = new NetStream(nc);
               ns2 = new NetStream(nc);
               
               ns1.client = new CustomClient();
               ns1.publish("dummy", "live");
    
               ns2.play("dummy");
               ns2.client = new CustomClient();
               vid.attachNetStream(ns2);
               setTimeout(sendHello, 3000);
               break;
              
           case "NetStream.Publish.BadName":
               trace("Please check the name of the publishing stream" );
               break;
        }   
     }

     function sendHello():void {
         ns1.send("myFunction", "hello");
     }       
   }
 }
 
 class CustomClient {
    public function myFunction(event:String):void {
       trace(event);
    }
 }
</codeblock></example><example conref="examples\NetStream.send.2.as"> 次の例は、メタデータを作成してライブストリームに追加します。
<codeblock>
private function netStatusHandler(event:NetStatusEvent):void {
     switch (event.info.code) {  
        case "NetStream.Publish.Start":
            var metaData:Object = new Object();
            metaData.title = "myStream";
            metaData.width = 400;
            metaData.height = 200;
            ns.send("&amp;#64;setDataFrame", "onMetaData", metaData);
            ns.attachCamera( Camera.getCamera() );
            ns.attachAudio( Microphone.getMicrophone() );        
    }
}
</codeblock></example><example conref="examples\NetStream.send.3.as"> ビデオに追加されているデータキーフレームに応答するには、クライアントが <codeph>onMetaData</codeph> イベントハンドラーを定義する必要があります。次の例では、<codeph>onMetaData</codeph> イベントハンドラーは <codeph>addEventListener()</codeph> に登録されていませんが、代わりに <codeph>onMetaData</codeph> という名前のコールバック関数が登録されています。
<codeblock>
 public function onMetaData(info:Object):void {
    trace("width: " + info.width);
    trace("height: " + info.height);
 }
</codeblock></example><example conref="examples\NetStream.send.4.as"> 次の例は、サーバーに再生リストを作成する方法を示しています。
<codeblock>
 // Create a NetStream for playing
 var my_ns:NetStream = new NetStream(my_nc);
 my_video.attachNetStream(my_ns);
 
 // Play the stream record1
 my_ns.play("record1", 0, -1, true);
 
 // Switch to the stream live1 and play for 5 seconds.  
 // Since reset is false, live1 will start to play after record1 is done.
 my_ns.play("live1", -1 , 5, false);
</codeblock></example><example conref="examples\NetStream.send.5.as"> 録画済みのビデオファイルにデータメッセージだけが含まれている場合、録画したときの速度でビデオファイルを再生するか、すべてのデータメッセージを一度に取得することができます。
<codeblock>
 //To play at normal speed
 var my_ns:NetStream = new NetStream(my_nc);
 my_ns.play("log", 0, -1);
 
 //To get the data messages all at once
 my_ns.play("log", 0, -1, 3);
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/client"><linktext>client</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:setDRMAuthenticationCredentials"><apiName>setDRMAuthenticationCredentials</apiName><shortdesc>
     基になる暗号化コンテンツを表示するために必要な DRM 認証資格情報を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>NetStream, setDRMAuthenticationCredentials
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>userName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>有効なユーザー名情報。
     </apiDesc></apiParam><apiParam><apiItemName>password</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定したユーザー名に対応するパスワード情報。
     </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定する認証資格情報のタイプを指定するストリング。 有効な値は <codeph>"drm"</codeph> と <codeph>"proxy"</codeph> です。 デフォルト値は <codeph>"drm"</codeph> です。
     <ul>
     <li><codeph>"drm"</codeph> 認証タイプの場合、資格情報は FMRMS (Flash Media Rights Management Server) で認証されます。</li>
     <li><codeph>"proxy"</codeph> 認証タイプの場合、資格情報は プロキシサーバーで認証され、プロキシサーバーが要求する資格情報と一致する必要があります。例えば、<codeph>"proxy"</codeph> オプションを使用すると、ユーザーがインターネットにアクセスする前にプロキシサーバーで認証を受けるように企業が要求する場合、アプリケーションにそのような手順を設定できます。匿名認証を使用する場合を除き、プロキシ認証の後、ユーザーは証明書を取得してコンテンツを再生するために、FMRMS での認証も必要です。FMRMS で認証するために、<codeph>setDRMAuthenticationcredentials()</codeph> をもう一度 <codeph>"drm"</codeph> オプションと共に使用できます。</li>
     </ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     基になる暗号化コンテンツを表示するために必要な DRM 認証資格情報を設定します。
     <p>
     <codeph>setDRMAuthenticationCredentials()</codeph> メソッドは、コンテンツプロバイダーまたはプロキシサーバーに知られていて承認されている資格情報に一致する資格情報を提供する必要があります。これらは、ユーザーがコンテンツの表示許可を取得するときに使用する資格情報と同じものです。
     </p>
      
     </apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#DRMAuthenticateEvent"><linktext>flash.events.DRMAuthenticateEvent</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetStream:togglePause"><apiName>togglePause</apiName><shortdesc>
	 ストリームの再生を一時停止または再開します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.resume, resume
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 ストリームの再生を一時停止または再開します。このメソッドを呼び出すと最初は再生を一時停止し、次に呼び出したときには再生を再開します。このメソッドを使用して、ユーザーが 1 つのボタンを押すだけで再生を一時停止または再生できるようにすることができます。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream/close()"><linktext>close()</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link><link href="flash.net.xml#NetStream/pause()"><linktext>pause()</linktext></link><link href="flash.net.xml#NetStream/resume()"><linktext>resume()</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetStream:CONNECT_TO_FMS"><apiName>CONNECT_TO_FMS</apiName><shortdesc>
     NetStream インスタンスのコンストラクターに対するパラメーターとして使用される静的オブジェクト。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connectToFMS</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     NetStream インスタンスのコンストラクターに対するパラメーターとして使用される静的オブジェクト。これは NetStream コントラクタの 2 番目のパラメーターのデフォルト値です。アプリケーションが使用してメディアをプログレッシブ再生することはありません。このパラメーターを使用すると、コントラクタが Flash Media Server インスタンスに接続します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:DIRECT_CONNECTIONS"><apiName>DIRECT_CONNECTIONS</apiName><shortdesc>
     ピアーツーピアーの発行者接続を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directConnections</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     ピアーツーピアーの発行者接続を作成します。2 番目の（オプション）パラメーターのこのストリングを、NetStream インスタンスのコンストラクターに渡します。アプリケーションはこのストリングを使用して、クライアントにオーディオおよびビデオをパブリッシュするための NetStream 接続を作成します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:bufferLength:get"><apiName>bufferLength</apiName><shortdesc>
	 バッファーに現在格納されているデータの秒数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.bufferLength, bufferLength
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 バッファーに現在格納されているデータの秒数です。このプロパティを <codeph>bufferTime</codeph> プロパティと組み合わせることにより、あとどれくらいの時間でバッファーが満たされるかを見積もることができます。たとえば、バッファーにデータがロードされるのを待つユーザーに対してフィードバック情報を提供することが可能になります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/bufferTime"><linktext>bufferTime</linktext></link><link href="flash.net.xml#NetStream/bytesLoaded"><linktext>bytesLoaded</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bufferTime:set"><apiName>bufferTime</apiName><shortdesc>
	 ストリームの表示を開始するまでにメッセージをどの程度の時間バッファリングしておくかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.setBufferTime, setBufferTime
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 ストリームの表示を開始するまでにメッセージをどの程度の時間バッファリングしておくかを指定します。例えば、ストリームの最初の 15 秒間を中断することなく再生するには、<codeph>bufferTime</codeph> を 15 に設定します。この場合、アプリケーションはデータを 15 秒間バッファリングしてからストリームの再生を開始します。
	 
	 <p>デフォルト値は 0.1（1/10 秒）です。バッファー内の現在の秒数を調べるには、<codeph>bufferLength</codeph> プロパティを使用します。</p>
	 
     <p><b>注意：</b>記録されている（ライブではない）コンテンツをストリーミングするときの歪みを避けるには、<codeph>Netstream.bufferTime</codeph> の値を 0 に設定しないようにします。記録されているコンテンツの場合、デフォルトでは入力バッファーが使用され、メディアデータがキューに置かれてメディアが適切に再生されます。記録されているコンテンツでは、デフォルト値を使用するか、バッファー時間を延長します。</p>
     
     <p>Flash Player 9.0.115.0 以降、Flash Player では、<codeph>NetStream.pause()</codeph> が呼び出されたときにバッファーをクリアしなくなりました。Flash Player 9.0.115.0 以前は、Flash Player はバッファーが満杯になるまで待機してから再生を開始していましたが、このため遅延がよく発生していました。</p>
     	 
     	 <p>1 回の一時停止の場合、<codeph>NetStream.bufferLength</codeph> プロパティには 60 秒または <codeph>NetStream.bufferTime</codeph> の値の 2 倍のうち、いずれか大きい方の値という制限があります。例えば、<codeph>bufferTime</codeph> が 20 秒の場合、Flash Player は <codeph>NetStream.bufferLength</codeph> が 20~~2（40）または 60 のうち、大きい方の値になるまでバッファーするため、この場合は、<codeph>bufferLength</codeph> が 60 秒になるまでバッファーします。<codeph>bufferTime</codeph> が 40 秒の場合、Flash Player は <codeph>bufferLength</codeph> が 40~~2 (80) または 60 のうち、大きい方の値になるまでバッファーするため、この場合は、<codeph>bufferLength</codeph> が 80 秒になるまでバッファーします。</p>
     	 
     	 <p><codeph>bufferLength</codeph> プロパティにも絶対制限があります。<codeph>pause()</codeph> の呼び出しによって <codeph>bufferLength</codeph> が 600 秒または<codeph>bufferTime</codeph> ~~ 2 の値のいずれか大きい方の値を超えた場合、Flash Player はバッファーをフラッシュし、<codeph>bufferLength</codeph> を 0 にリセットします。例えば、<codeph>bufferTime</codeph> が 120 秒の場合は、<codeph>bufferLength</codeph> が 600 秒に達すると、Flash Player はバッファーをフラッシュします。<codeph>bufferTime</codeph> が 360 秒の場合は、<codeph>bufferLength</codeph> が 720 秒に達すると、Flash Player はバッファーをフラッシュします。</p>
     	 
     	 <p><b>ヒント</b>：例えば、コードで <codeph>NetStream.pause()</codeph> を使用し、閲覧者がコマーシャルを見ている間、データをバッファーし、メインのビデオが開始されたときに一時停止を解除することができます。</p>
     	 
     	 <p>一時停止の新しい動作の詳細については、<xref href="http://www.adobe.com/go/learn_fms_smartpause_jp" scope="external">http://www.adobe.com/go/learn_fms_smartpause_jp</xref> を参照してください。</p>
     <p>
     <b>Flash Media Server</b>。バッファーの動作は、パブリッシュするストリームまたはサブスクライブするストリームにバッファー時間が設定されているかどうかによって異なります。パブリッシュするストリームの場合、<codeph>bufferTime</codeph> には、送信バッファーに蓄積されたフレームの送信を開始するまでの時間の長さを指定します。高速な接続の場合は、バッファー時間を考慮する必要はありません。データはアプリケーションがバッファリングすると即座に送信されます。一方、低速な接続では、アプリケーションがデータをバッファリングする速度とそのデータをクライアントに送信する速度が大幅に異なることがあります。 
     </p>
     
     <p>
     サブスクライブするストリームの場合、<codeph>bufferTime</codeph> には、受信データをバッファリングして、ストリームの表示を開始するまでの時間を指定します。例えば、ストリームの最初の 15 秒間を中断することなく再生するには、<codeph>bufferTime</codeph> を 15 に設定します。この場合、Flash はデータを 15 秒間バッファリングしてからストリームの再生を開始します。
     </p>
     
     <p>
     記録されたストリームを再生するときに、<codeph>bufferTime</codeph> が 0 の場合、Flash はバッファー時間を小さな値（約 10 ミリ秒）に設定します。ライブストリームを後で再生する場合（例えば、再生リストから再生）、このバッファー時間が保持されます。つまり、<codeph>bufferTime</codeph> はストリームに対して 0 以外の値のままになります。 
     </p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#bufferTime/bufferLength"><linktext>bufferLength</linktext></link><link href="" invalidHref="flash.net.xml#bufferTime/time"><linktext>time</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	 既にアプリケーションにロードされているデータのバイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.bytesLoaded, bytesLoaded
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 既にアプリケーションにロードされているデータのバイト数です。このプロパティを <codeph>bytesTotal</codeph> プロパティと組み合わせることにより、あとどれくらいの時間でバッファーが満たされるかを見積もることができます。例えば、バッファーにデータがロードされるのを待つユーザーに対してフィードバック情報を提供することが可能になります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/bytesTotal"><linktext>bytesTotal</linktext></link><link href="flash.net.xml#NetStream/bufferLength"><linktext>bufferLength</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	 アプリケーションにロードされるファイルの総バイト数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.bytesTotal, bytesTotal
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 アプリケーションにロードされるファイルの総バイト数。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/bytesLoaded"><linktext>bytesLoaded</linktext></link><link href="flash.net.xml#NetStream/bufferTime"><linktext>bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:checkPolicyFile:get"><apiName>checkPolicyFile</apiName><shortdesc>
	 ビデオファイルのロードを開始する前に、アプリケーションが、ロードされるビデオファイルのサーバーからクロスドメインポリシーファイルをダウンロードしようとするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>: please review at same time: checkPolicyFile property in LoaderContext
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 ビデオファイルのロードを開始する前に、アプリケーションが、ロードされるビデオファイルのサーバーからクロスドメインポリシーファイルをダウンロードしようとするかどうかを指定します。このプロパティは、プログレッシブビデオダウンロードに NetStream オブジェクト（スタンドアローンファイル）を使用する場合、または呼び出し元の ファイルの専用ドメイン外にあるファイルをロードする場合に適用します。このプロパティは、NetStream オブジェクトを使用して RTMP アセットを取得する場合には無視されます。
	 
     <p>このプロパティを <codeph>true</codeph> に設定すると、呼び出し元の SWF ファイルのドメイン外からビデオファイルをロードし、<codeph>BitmapData.draw()</codeph> メソッドを使用してビデオにピクセルレベルでアクセスすることができます。読み込み時に <codeph>BitmapData.draw()</codeph> を呼び出すときに <codeph>checkPolicyFile</codeph> プロパティを <codeph>true</codeph> に設定していないと、<codeph>SecurityError</codeph> 例外を受け取る場合があります。これは、必要なポリシーファイルがダウンロードされていないためです。</p>
	 
	 <p>ロードするビデオへのピクセルレベルのアクセスが必要ない場合は、<codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定しないようにしてください。ポリシーファイルの確認はネットワーク帯域幅を消費し、ダウンロードの開始が遅れる場合があります。</p>
	 
	 <p><codeph>NetStream.play()</codeph> メソッドを呼び出すときに <codeph>checkPolicyFile</codeph> の設定が <codeph>true</codeph> になっていると、<ph platform="actionscript">Flash Player または</ph> AIR ランタイムは該当するクロスドメインポリシーファイルを正常にダウンロードするか、または <codeph>NetStream.play()</codeph> の呼び出しで指定されたオブジェクトのダウンロードを開始する前にそのようなポリシーファイルが存在しないことを判断します。ポリシーファイルの存在を確認するため、<ph platform="actionscript">Flash Player または</ph> AIR ランタイムは次のアクションをこの順番で実行します。</p>
	 
	 <ol>
	 
     <li>アプリケーションは、既にダウンロードされているポリシーファイルを考慮します。</li>
	 
	 <li>アプリケーションは、<codeph>Security.loadPolicyFile()</codeph> メソッドの呼び出しで指定された保留中ポリシーファイルをダウンロードしようとします。</li>
	 
	 <li>アプリケーションは <codeph>NetStream.play()</codeph> に渡された URL に対応するデフォルトの場所からポリシーファイルをダウンロードしようとします。その URL と同じサーバー上の <codeph>/crossdomain.xml</codeph> がデフォルトの場所です。</li>
	 
	 </ol>
	 
	 <p>どのような場合も、<ph platform="actionscript">Flash Player または</ph> AIR ランタイムでは、該当するポリシーファイルがビデオのサーバー上に存在しており、ポリシーファイルの場所に基づいて <codeph>play()</codeph> に渡された URL にあるオブジェクトへのアクセスを提供し、<codeph>&lt;allow-access-from></codeph> タグによって呼び出し元コードのファイルのドメインがビデオにアクセスできるようにする必要があります。</p>
	 
	 <p><codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定した場合、アプリケーションはビデオをダウンロードする前に、ポリシーファイルが検証されるまで待機します。<codeph>BitmapData.draw()</codeph> の呼び出しなど、ビデオデータに対するピクセルレベルの操作は、NetStream オブジェクトから <codeph>onMetaData</codeph> イベントまたは <codeph>NetStatus</codeph> イベントを受け取るまで実行を待つ必要があります。</p>
	 
	 <p><codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定したが関連ポリシーファイルが見つからない場合、エラーになって SecurityError 例外がスローされるのは、ポリシーファイルを必要とする操作を実行してからです。</p>
	 
	 <p>サーバーサイド HTTP リダイレクトを使用する URL からファイルをダウンロードする場合は、<codeph>checkPolicyFile</codeph> に注意してください。アプリケーションは、<codeph>NetStream.play()</codeph> で指定された初期 URL に対応するポリシーファイルを取得しようとします。最終的なファイルが HTTP リダイレクトによって別の URL から取得される場合、最初にダウンロードされたポリシーファイルはファイルの最終的な URL（セキュリティ判定においてはこの URL が重要となります）に適用できないことがあります。</p>
	 
	 <p>ポリシーファイルの詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「Flash Player セキュリティ」の章を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#BitmapData/draw()"><linktext>flash.display.BitmapData.draw()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()"><linktext>flash.system.Security.loadPolicyFile()</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>netStatus</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData"><linktext>onMetaData</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>play()</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:client:get"><apiName>client</apiName><shortdesc>
     FLV ファイルデータのストリーミングの処理にコールバックメソッドが呼び出されるオブジェクトを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier><apiException><apiDesc><codeph>client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。
	 
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     FLV ファイルデータのストリーミングの処理にコールバックメソッドが呼び出されるオブジェクトを指定します。デフォルトのオブジェクトは、作成される NetStream オブジェクト <codeph>this</codeph> です。<codeph>client</codeph> プロパティを別のオブジェクトに設定すると、コールバックメソッドはその別のオブジェクトで呼び出されます。<codeph>NetStream.client</codeph> オブジェクトは関数 <codeph>onCuePoint()</codeph>、<codeph>onImageData()</codeph>、<codeph>onMetaData()</codeph>、<codeph>onPlayStatus()</codeph>、<codeph>onTextData()</codeph> および <codeph>onXMPData()</codeph> を呼び出して、関連付けられたデータオブジェクトを受け取ることができます。
     <p><b><codeph>client</codeph> プロパティをイベントハンドラーに関連付けるには：</b></p>
     <p><ol><li>オブジェクトを作成し、NetStream オブジェクトの <codeph>client</codeph> プロパティに割り当てます。
     <codeblock>
     var customClient:Object = new Object();
     my_netstream.client = customClient;
     </codeblock>
     </li>
     <li>必要なデータイベントに対するハンドラー関数をクライアントオブジェクトのプロパティとして割り当てます。
     <codeblock>
     customClient.onImageData = onImageDataHandler;           
     </codeblock>
     </li>
     <li>以下のようなデータイベントオブジェクトを受け取るハンドラー関数を記述します。
     <codeblock>
      public function onImageDataHandler(imageData:Object):void {
              trace("imageData length: " + imageData.data.length);
      }
     </codeblock></li>
     </ol></p>
     <p>データがストリームを通るとき、または再生中、データイベントオブジェクト（この場合は <codeph>imageData</codeph> オブジェクト）にデータが取り込まれます。 <codeph>onImageData</codeph> の説明を参照してください。<codeph>client</codeph> プロパティに関連付けられたオブジェクトの例がすべて記載されています。</p>
     <p><b><codeph>client</codeph> プロパティをサブクラスに関連付けるには：</b></p>
     <p><ol><li>ハンドラー関数を伴うサブクラスがデータイベントオブジェクトを受け取るように作成します。
     <codeblock>
     class CustomClient {
        public function onMetaData(info:Object):void {
            trace("metadata: duration=" + info.duration + " framerate=" + info.framerate);
     }
     </codeblock>
     </li>
     <li>サブクラスのインスタンスを NetStream オブジェクトの <codeph>client</codeph> プロパティに割り当てます。
     <codeblock>
     my_netstream.client = new CustomClient();
     </codeblock>
     </li>
     </ol></p>     
     <p>データがストリームを通るとき、または再生中、データイベントオブジェクト（この場合は <codeph>info</codeph> オブジェクト）にデータが取り込まれます。 NetStream クラスの最後にあるクラス例を参照してください。<codeph>client</codeph> プロパティへのサブクラスインスタンスの割り当てが記載されています。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:onCuePoint"><linktext>onCuePoint</linktext></link><link href="flash.net.xml#NetStream/event:onImageData"><linktext>onImageData</linktext></link><link href="flash.net.xml#NetStream/event:onMetaData"><linktext>onMetaData</linktext></link><link href="flash.net.xml#NetStream/event:onPlayStatus"><linktext>onPlayStatus</linktext></link><link href="flash.net.xml#NetStream/event:onTextData"><linktext>onTextData</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:currentFPS:get"><apiName>currentFPS</apiName><shortdesc>
	 1 秒あたりの表示フレーム数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.currentFPS, currentFPS
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 1 秒あたりの表示フレーム数です。複数のシステム上で再生できるようにビデオファイルを書き出す場合、テスト中にこの値をチェックすることで、ファイルの書き出し時にどの程度の圧縮が必要かを見極めることができます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:farID:get"><apiName>farID</apiName><shortdesc>
     この NetStream インスタンスに接続されている相手側の識別子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     この <codeph>NetStream</codeph> インスタンスに接続されている相手側の識別子です。このプロパティは、RTMFP 接続に対してのみ定義されます。
     
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:farNonce:get"><apiName>farNonce</apiName><shortdesc>
     実際にはストリームの向こう側によって選択される値で、この接続に固有です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     実際にはストリームの向こう側によって選択される値で、この接続に固有です。この値は、ストリームの向こう側では <codeph>nearNonce</codeph> 値となります。このプロパティは、RTMFP 接続に対してのみ定義されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:info:get"><apiName>info</apiName><shortdesc>
     サービスの質に関する統計情報をプロパティが持つ NetStreamInfo オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStreamInfo</apiValueClassifier></apiValueDef><apiDesc>
     サービスの質に関する統計情報をプロパティが持つ NetStreamInfo オブジェクトを返します。このオブジェクトは現在の状態のスナップショットです。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamInfo"><linktext>NetStreamInfo</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:liveDelay:get"><apiName>liveDelay</apiName><shortdesc>
	 ライブ (バッファリングされていない) モードでサブスクライブしているストリームバッファー内にあるデータの秒数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><category>Property
	 
	 </category></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 ライブ（バッファリングされていない）モードでサブスクライブしているストリームバッファー内にあるデータの秒数です。このプロパティは、現在のネットワーク転送の遅延時間を示します。
	 
	 <p>このプロパティは、主に Flash Media Server などのサーバーで使用することを目的としています。詳細については、クラスの説明を参照してください。</p>
	 
	 <p>このプロパティの値を取得して、ストリームの転送品質を大まかに判断し、それをユーザーに伝えることができます。 </p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:maxPauseBufferTime:set"><apiName>maxPauseBufferTime</apiName><shortdesc>
     一時停止モード中にメッセージをバッファリングしておく時間を秒単位で指定します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     一時停止モード中にメッセージをバッファリングしておく時間を秒単位で指定します。このプロパティを使用して、一時停止モード中に行うバッファリングの量を制限できます。<codeph>NetStream.bufferLength</codeph> の値がこの制限に達するとバッファリングが停止します。この値を設定しない場合は、デフォルトの 60 秒または各一時停止の <codeph>NetStream.bufferTime</codeph> の値の 2 倍のいずれか高いほうに設定されます。
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#maxPauseBufferTime/bufferTime"><linktext>bufferTime</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:nearNonce:get"><apiName>nearNonce</apiName><shortdesc>
     実際にはストリームのこちら側によって選択される値で、この接続に固有です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     実際にはストリームのこちら側によって選択される値で、この接続に固有です。この値は、ストリームの向こう側では <codeph>farNonce</codeph> 値となります。このプロパティは、RTMFP 接続に対してのみ定義されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
	 この NetStream オブジェクトのエンコード（AMF バージョン）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 この NetStream オブジェクトのエンコード（AMF バージョン）です。NetStream オブジェクトは、関連付けされた NetConnection オブジェクトからその <codeph>objectEncoding</codeph> 値を継承します。ActionScript 3.0 SWF ファイルで Flash Player 9 以前にリリースされたサーバーと通信する必要がある場合は、このプロパティを理解することが重要です。詳細については、NetConnection クラスの <codeph>objectEncoding</codeph> プロパティに関する説明を参照してください。
	 
	 <p>このプロパティの値は、ローカルストリームかリモートストリームかによって異なります。<codeph>null</codeph> が <codeph>NetConnection.connect()</codeph> メソッドに渡されたローカルストリームでは、<codeph>NetConnection.defaultObjectEncoding</codeph> の値が返されます。サーバーに接続しているリモートストリームでは、このサーバーとの接続のオブジェクトエンコーディングが返されます。</p>
	 
	 <p>接続されていない場合にこのプロパティを読み取ろうとするか、このプロパティを変更しようとすると、アプリケーションにより例外がスローされます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/objectEncoding"><linktext>NetConnection.objectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:peerStreams:get"><apiName>peerStreams</apiName><shortdesc>
	 
     パブリッシュするこの NetStream インスタンスを監視している、サブスクライブするすべての NetStream インスタンスを保持するオブジェクト。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 
     パブリッシュするこの NetStream インスタンスを監視している、サブスクライブするすべての NetStream インスタンスを保持するオブジェクト。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStream:soundTransform:get"><apiName>soundTransform</apiName><shortdesc>
	 この NetStream オブジェクトのサウンドを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc>
	 この NetStream オブジェクトのサウンドを制御します。詳細については、SoundTransform クラスを参照してください。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundTransform"><linktext>flash.media.SoundTransform</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStream:time:get"><apiName>time</apiName><shortdesc>
	 再生ヘッドの位置（秒単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetStream.time, time
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 再生ヘッドの位置（秒単位）です。
	 <p>
	 <b>Flash Media Server</b> サブスクライブするストリームの場合、ストリームを再生した秒数です。パブリッシュするストリームの場合、ストリームをパブリッシュした秒数です。この数値は、小数点以下 3 桁までの精度があります。この数値に 1000 を掛けると、ストリームを再生したミリ秒単位の時間数になります。
	 </p>
	 <p>
	 サブスクライブするストリームでは、サーバーがデータの送信を停止してもストリームが開いたままになっている場合、<codeph>time</codeph> プロパティの値の増加が止まります。サーバーがデータの送信を再開すると、値の増加が止まった個所から値の増加が続けられます。 
	 </p>
	 <p>
     再生リストの要素間でストリームを切り替えても、<codeph>time</codeph> の値は増加を続けます。呼び出した <codeph>NetStream.play()</codeph> の <codeph>reset</codeph> が <codeph>1</codeph> または <codeph>true</codeph> に設定されている場合、または <codeph>NetStream.close()</codeph> を呼び出した場合、このプロパティは 0 に設定されます。 
	 </p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/bufferLength"><linktext>bufferLength</linktext></link><link href="flash.net.xml#NetStream/bytesLoaded"><linktext>bytesLoaded</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:LocalConnection"><apiName>LocalConnection</apiName><shortdesc>
 LocalConnection クラスを使用すると、別の LocalConnection オブジェクトのメソッドを呼び出すことができる LocalConnection オブジェクトを作成できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>LocalConnection
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 LocalConnection クラスを使用すると、別の LocalConnection オブジェクトのメソッドを呼び出すことができる LocalConnection オブジェクトを作成できます。 次の通信が可能です。
 
 <ul>
 		<li>単一の SWF ファイル内での通信</li>
 		<li>複数の SWF ファイル間の通信</li>
 		<li>AIR アプリケーションのコンテンツ（SWF ベースまたは HTML ベース）間の通信</li>
		<li>AIR アプリケーションのコンテンツ（SWF ベースまたは HTML ベース）とブラウザーで実行されている SWF コンテンツ間の通信</li>
 </ul>
 
 <p>ローカル接続では、SWF ファイル間のこの種の通信は <codeph>fscommand()</codeph> または JavaScript を使用しなくても可能です。LocalConnection オブジェクトを使って通信できるのは、同じクライアントコンピューター上で実行中のファイル間だけです。ただし、これらは異なるアプリケーションで実行されていてもかまいません。例えば、ブラウザーで実行されているファイルと、Adobe AIR で実行されている SWF ファイルとの間で通信することができます。 </p>
 
 <p platform="actionscript">ActionScript 3.0 で作成された LocalConnection オブジェクトは、ActionScript 1.0 または 2.0 で作成された LocalConnection オブジェクトと通信できます。また、その逆も可能です。ActionScript 1.0 または 2.0 で作成された LocalConnection オブジェクトは、ActionScript 3.0 で作成された LocalConnection オブジェクトと通信できます。Flasn Player では、このようなバージョンの異なる LocalConnection オブジェクト間の通信が自動的に処理されます。</p>
 
 <p>各ファイルで使用されるコマンドを確認することで、2 つのファイル間で通信を行うための LocalConnection オブジェクトの使用方法が理解しやすくなります。一方のファイルを<i>送信側</i>ファイルと呼びます。これは呼び出されるメソッドが含まれるファイルです。送信側ファイルには、LocalConnection オブジェクトと <codeph>send()</codeph> メソッドの呼び出しが含まれている必要があります。もう一方のファイルを<i>受信側</i>ファイルと呼びます。これはメソッドを呼び出すファイルです。この受信側ファイルには、送信側 SWF ファイルとは別の LocalConnection オブジェクトと <codeph>connect()</codeph> メソッドの呼び出しが含まれている必要があります。</p>
 
 <p><codeph>send()</codeph> と <codeph>connect()</codeph> の使い方は、両方のファイルが同じドメインにある場合、予測可能なドメイン名を持つ異なるドメインにある場合、予測不可能または動的なドメイン名を持つ異なるドメインにある場合により異なります。次の段落では、上記の 3 つの場合それぞれについて、サンプルコードを使用して説明します。</p>
 
 <p><b>同じドメインの場合</b>：この場合は、同じドメイン内の LocalConnection オブジェクト間だけで通信を許可します。同一ドメイン通信はデフォルトで許可されているので、これは LocalConnection オブジェクトの最も簡単な使用方法です。 同じドメインにある 2 つの ファイル間で通信を行う場合は、特別なセキュリティ対策を実装する必要はありません。<codeph>connectionName</codeph> パラメーターの値をそのまま <codeph>connect()</codeph> メソッドと <codeph>send()</codeph> メソッドに渡すだけです。</p>
 
 <p><adobeimage alt="同じドメインからのロード" href="../../images/localconnection_samedomains.gif"/></p>
 
<codeblock>
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.connect('myConnection');

// sendingLC is in http://www.domain.com/sending.swf
// myMethod() is defined in sending.swf
sendingLC.send('myConnection', 'myMethod');
</codeblock>
 <p><b>予測可能なドメイン名を持つ異なるドメインの場合</b>：異なるドメインに存在する 2 つの SWF ファイル間で通信を行う場合は、<codeph>allowDomain()</codeph> メソッドを呼び出して、2 つのドメイン間の通信を許可する必要があります。また、<codeph>send()</codeph> メソッドの接続名を、受信側 LocalConnection オブジェクトのドメイン名で修飾する必要があります。</p>
 
 <p><adobeimage alt="別個のドメインからのロード" href="../../images/localconnection_differentdomains.gif"/></p>
 
<codeblock>
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('www.anotherdomain.com');
receivingLC.connect('myConnection');

// sendingLC is in http://www.anotherdomain.com/sending.swf
sendingLC.send('www.domain.com:myConnection', 'myMethod');
</codeblock>
 
 <p><b>予測不可能なドメイン名を持つ異なるドメインの場合</b>：受信側の LocalConnection オブジェクトを含むファイルをドメイン間で移植しやすくしたい場合があります。<codeph>send()</codeph> メソッドでドメイン名を指定せずに受信側と送信側の LocalConnection オブジェクトが同じドメインにないことを Flash Player に認識させるには、<codeph>connect()</codeph> 呼び出しと <codeph>send()</codeph> 呼び出しの両方で、接続名の前にアンダースコア（_）を付けます。 2 つのドメイン間の通信を許可するには、<codeph>allowDomain()</codeph> メソッドを呼び出して、LocalConnection の呼び出しを許可するドメインを渡します。または、ワイルドカード（~~）を引数に渡して、すべてのドメインからの呼び出しを許可します。</p>
 
 <p><adobeimage alt="ドメイン名が不明のときのロード" href="../../images/localconnection_unknowndomains.gif"/></p>
<codeblock>
// receivingLC is in http://www.domain.com/receiving.swf
receivingLC.allowDomain('~~');
receivingLC.connect('_myConnection');

// sendingLC is in http://www.anotherdomain.com/sending.swf
sendingLC.send('_myConnection', 'myMethod');
</codeblock>
 
 <p>LocalConnection オブジェクトを使用して、1 つのファイル内でデータを送受信することもできますが、これは一般的な方法ではありません。</p>
 
 <p><codeph>send()</codeph> メソッドと <codeph>connect()</codeph> メソッドの詳細については、<codeph>connectionName</codeph> パラメーター（<codeph>LocalConnection.send()</codeph> エントリおよび <codeph>LocalConnection.connect()</codeph> エントリ）の説明を参照してください。また、<codeph>allowDomain()</codeph> エントリおよび <codeph>domain</codeph> エントリも参照してください。</p>
 
 </apiDesc><example conref="examples\LocalConnectionSenderExample.as"> このサンプルは、2 つの異なる SWF ファイルにコンパイルする必要のある 2 つの ActionScript クラスから構成されています。
 
 <p>LocalConnectionSenderExample SWF ファイルでは LocalConnection インスタンスが作成され、ボタンが押されると <codeph>call()</codeph> メソッドを使用して SWF ファイル内の <codeph>lcHandler</codeph> というメソッドが呼び出されます。このとき接続名 "myConnection" が使用され、パラメーターとして TextField の内容が渡されます。</p>
 
 <p>LocalConnectionReceiverExample SWF ファイルでは LocalConnection インスタンスが作成され、<codeph>connect()</codeph> メソッドが呼び出されて、この SWF ファイルが接続名 "myConnection" 宛のメッセージの受信者に指定されます。さらにこのクラスには、<codeph>lcHandler()</codeph> というパブリックメソッドが含まれています。これは、LocalConnectionSenderExample SWF ファイルによって呼び出されるメソッドです。メソッドが呼び出されると、パラメーターとして渡されるテキストがステージ上の TextField に追加されます。</p>
 
 <p><b>注意：</b>この例をテストするには、両方の SWF ファイルを同じコンピューター上に同時にロードする必要があります。</p>
<codeblock>

// Code in LocalConnectionSenderExample.as
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.net.LocalConnection;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.events.StatusEvent;
    import flash.text.TextFieldAutoSize;

    public class LocalConnectionSenderExample extends Sprite {
        private var conn:LocalConnection;
        
        // UI elements
        private var messageLabel:TextField;
        private var message:TextField;
        private var sendBtn:Sprite;
        
        public function LocalConnectionSenderExample() {
            buildUI();
            sendBtn.addEventListener(MouseEvent.CLICK, sendMessage);
            conn = new LocalConnection();
            conn.addEventListener(StatusEvent.STATUS, onStatus);
        }
        
        private function sendMessage(event:MouseEvent):void {
            conn.send("myConnection", "lcHandler", message.text);
        }
        
        private function onStatus(event:StatusEvent):void {
            switch (event.level) {
                case "status":
                    trace("LocalConnection.send() succeeded");
                    break;
                case "error":
                    trace("LocalConnection.send() failed");
                    break;
            }
        }
        
        private function buildUI():void {
            const hPadding:uint = 5;
            // messageLabel
            messageLabel = new TextField();
            messageLabel.x = 10;
            messageLabel.y = 10;
            messageLabel.text = "Text to send:";
            messageLabel.autoSize = TextFieldAutoSize.LEFT;
            addChild(messageLabel);
            
            // message
            message = new TextField();
            message.x = messageLabel.x + messageLabel.width + hPadding;
            message.y = 10;
            message.width = 120;
            message.height = 20;
            message.background = true;
            message.border = true;
            message.type = TextFieldType.INPUT;
            addChild(message);
            
            // sendBtn
            sendBtn = new Sprite();
            sendBtn.x = message.x + message.width + hPadding;
            sendBtn.y = 10;
            var sendLbl:TextField = new TextField();
            sendLbl.x = 1 + hPadding;
            sendLbl.y = 1;
            sendLbl.selectable = false;
            sendLbl.autoSize = TextFieldAutoSize.LEFT;
            sendLbl.text = "Send";
            sendBtn.addChild(sendLbl);
            sendBtn.graphics.lineStyle(1);
            sendBtn.graphics.beginFill(0xcccccc);
            sendBtn.graphics.drawRoundRect(0, 0, (sendLbl.width + 2 + hPadding + hPadding), (sendLbl.height + 2), 5, 5);
            sendBtn.graphics.endFill();
            addChild(sendBtn);
        }
    }
}
</codeblock></example><example conref="examples\LocalConnectionReceiverExample.as"><codeblock>
// Code in LocalConnectionReceiverExample.as
package {
    import flash.display.Sprite;
    import flash.net.LocalConnection;
    import flash.text.TextField;

    public class LocalConnectionReceiverExample extends Sprite {
        private var conn:LocalConnection;
        private var output:TextField;
        
        public function LocalConnectionReceiverExample()     {
            buildUI();
            
            conn = new LocalConnection();
            conn.client = this;
            try {
                conn.connect("myConnection");
            } catch (error:ArgumentError) {
                trace("Can't connect...the connection name is already being used by another SWF");
            }
        }
        
        public function lcHandler(msg:String):void {
            output.appendText(msg + "\n");
        }
        
        private function buildUI():void {
            output = new TextField();
            output.background = true;
            output.border = true;
            output.wordWrap = true;
            addChild(output);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#LocalConnection/send()"><linktext>flash.net.LocalConnection.send()</linktext></link><link href="flash.net.xml#LocalConnection/allowDomain()"><linktext>flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/domain"><linktext>flash.net.LocalConnection.domain</linktext></link></related-links><adobeApiEvent id="flash.net:LocalConnection_flash.events.StatusEvent.STATUS_status"><apiName>status</apiName><shortdesc>
 LocalConnection オブジェクトがステータスを報告するときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier>flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 LocalConnection オブジェクトがステータスを報告するときに送出されます。<codeph>LocalConnection.send()</codeph> が正常に実行された場合、<codeph>status</codeph> イベントオブジェクトの <codeph>level</codeph> プロパティの値は <codeph>"status"</codeph> になります。また、呼び出しに失敗した場合、<codeph>level</codeph> プロパティの値は <codeph>"error"</codeph> になります。受信側ファイルで接続が拒否されると、送信側ファイルへの通知なしで呼び出しが失敗する可能性があります。 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#LocalConnection/send()"><linktext>LocalConnection.send()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 LocalConnection.send() の呼び出しで、異なるセキュリティサンドボックスにデータを送信しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>LocalConnection.send()</codeph> の呼び出しで、異なるセキュリティサンドボックスにデータを送信しようとすると送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#LocalConnection/send()"><linktext>send()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><shortdesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:LocalConnection:LocalConnection"><apiName>LocalConnection</apiName><shortdesc>
	 LocalConnection オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>The following example shows how receiving and sending files create LocalConnnection objects. 
	 The two files can use the same name or different names for their respective LocalConnection objects. 
	 In this example they use different names.
	 
	 <listing>
	 // Code in the receiving file
	 this.createTextField("result_txt", 1, 10, 10, 100, 22);
	 result_txt.border = true;
	 var receiving_lc:LocalConnection = new LocalConnection();
	 receiving_lc.methodToExecute = function(param1:Number, param2:Number) {
	   result_txt.text = param1+param2;
	 };
	 receiving_lc.connect("lc_name");
	 </listing>
	 
	 <p>The following file sends the request to the first file.</p>
	 
	 <listing>
	 // Code in the sending file
	 var sending_lc:LocalConnection = new LocalConnection();
	 sending_lc.send("lc_name", "methodToExecute", 5, 7);
	 </listing>
	 
	 </oldexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 LocalConnection オブジェクトを作成します。LocalConnection オブジェクトを使用すると、同じクライアントコンピューター上で実行されている異なるファイル間で通信できるようになります。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#LocalConnection/connect()"><linktext>flash.net.LocalConnection.connect()</linktext></link><link href="flash.net.xml#LocalConnection/send()"><linktext>flash.net.LocalConnection.send()</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:LocalConnection:allowDomain"><apiName>allowDomain</apiName><shortdesc>
	 この LocalConnection インスタンスに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Change the first example in the listing.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたすべてのパラメーターは、null 以外にする必要があります。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>LocalConnection 呼び出しを許可するドメインを指定するストリングです。このパラメーターには次の 2 つの特殊なケースがあります。
	 
	 <ul>
	   <li>ワイルドカード文字 "~~" を使用して、すべてのドメインからの呼び出しを許可できます。</li>
	 
	   <li>"<codeph>localhost</codeph>" というストリングを指定して、ローカル環境にインストールされているファイルからこのファイルへの呼び出しを許可することができます。<ph platform="actionscript">Flash Player 8 から、ローカルファイルに関するセキュリティ制限が導入されました。デフォルトでは、Flash Player で実行されている、インターネットへのアクセスを許可された SWF ファイルは、ローカルファイルシステムにアクセスできません。 Flash Player では、"<codeph>localhost</codeph>" を指定すると、すべてのローカル SWF ファイルがこの SWF ファイルにアクセスできます。</ph> </li>
	 
	 </ul>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 この LocalConnection インスタンスに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。
	 
	 <p>このメソッドを使用して、セキュアでないプロトコルでホストされているファイルから、セキュアなプロトコル（HTTPS）を使用してホストされているファイルへのアクセスを許可することはできません。この場合は、<codeph>allowInsecureDomain()</codeph> メソッドを使用してくだい。</p> 
	 
	 <p>場合によっては、このメソッドを使用して、ドメインの異なる子ファイルから親ファイルへの LocalConnection 呼び出しを、子ファイルの最終的なドメインが不明な状態でも実行できるようにしたいことがあります。 例えば、ロードバランシングリダイレクトやサードパーティー製サーバーを使用する場合などです。このような場合、ロードに使用される LoaderInfo オブジェクトの <codeph>url</codeph> プロパティを使用すれば、<codeph>allowDomain()</codeph> メソッドで使用するドメインを取得できます。例えば、Loader オブジェクトを使用して子ファイルをロードする場合は、ファイルがロードされた後、Loader オブジェクトの <codeph>contentLoaderInfo.url</codeph> プロパティをチェックすることにより、完全な URL ストリングから子 SWF ファイルのドメインを解析できます。この場合、ファイルがロードされるまで待つようにしてください。ファイルが完全にロードされるまで、<codeph>contentLoaderInfo.url</codeph> プロパティが最終的な正しい値に設定されないためです。 </p> 
	 
	 <p>また、これとは反対に、ドメインの不明な親からの LocalConnection 呼び出しを子ファイルに受け入れさせたい場合もあります。この場合は、ドメインパラメーターが、ロードされたファイルの <codeph>loaderInfo.url</codeph> プロパティのドメインに一致するかどうかをチェックすることにより、このメソッドを実装できます。この場合も、<codeph>loaderInfo.url</codeph> に含まれている完全な URL からドメインを解析する必要があります。この状況では、親ファイルがロードされるまで待つ必要はありません。親 SWF ファイルは子 SWF ファイルがロードされた時点で既にロードされているからです。</p> 
	 
	 <p platform="actionscript">このメソッドを使用するときは、Flash Player セキュリティモデルを考慮してください。デフォルトでは、LocalConnection オブジェクトはそれを作成したファイルのサンドボックスに関連付けられ、LocalConnection オブジェクトのクロスドメイン呼び出しは、受信側ファイルで <codeph>LocalConnection.allowDomain()</codeph> メソッドが呼び出されていない限り許可されません。ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
	 
	 <p platform="actionscript">詳しくは、次のトピックを参照してください。</p>
	 
     <ul platform="actionscript">
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
	 <p platform="actionscript"><b>メモ</b> : <codeph>allowDomain()</codeph> メソッドは、ActionScript 1.0 および 2.0 での形式から変更されています。これらの以前のバージョンでは、<codeph>allowDomain</codeph> は実装するコールバックメソッドでした。ActionScript 3.0 では、<codeph>allowDomain()</codeph> は LocalConnection のビルトインメソッドとして呼び出されます。変更された <codeph>allowDomain()</codeph> は <codeph>flash.system.Security.allowDomain()</codeph> とほぼ同じように作用します。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#LocalConnection/allowInsecureDomain()"><linktext>flash.net.LocalConnection.allowInsecureDomain()</linktext></link><link href="flash.display.xml#LoaderInfo/url"><linktext>flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link><link href="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link><link href="flash.display.xml#LoaderInfo/url"><linktext>flash.display.LoaderInfo.url</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
	 この LocalConnection オブジェクトに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Seems like a security note is in order here.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたすべてのパラメーターは、null 以外にする必要があります。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>LocalConnection 呼び出しを許可するドメインを指定するストリングです。このパラメーターには 2 つの特殊なケースがあります。
	 <ul>
	   <li>ワイルドカード文字 "~~" を指定して、すべてのドメインからの呼び出しを許可できます。"~~" を指定する場合、ローカルホストは含まれません。</li>
	   <li>"<codeph>localhost</codeph>" というストリングを指定して、ローカル環境にインストールされている SWF ファイルからこの SWF ファイルへの呼び出しを許可することができます。Flash Player 8 から、ローカル SWF ファイルに関するセキュリティ制限が導入されました。これにより、インターネットへのアクセスを許可された SWF ファイルは、ローカルファイルシステムにはアクセスできません。"<codeph>localhost</codeph>" を指定すると、どのローカル SWF ファイルもこの SWF ファイルにアクセスできます。オーサリング時に、呼び出し元の SWF ファイルを local-with-networking タイプの SWF ファイルとして指定する必要もあります。</li>
	 </ul>
	 
 	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 この LocalConnection オブジェクトに LocalConnection 呼び出しを送信できる 1 つ以上のドメインを指定します。  
	 
	 <p><codeph>allowInsecureDomain()</codeph> メソッドは <codeph>allowDomain()</codeph> メソッドと同じように作用しますが、<codeph>allowInsecureDomain()</codeph> メソッドは、HTTPS 以外でロードされたファイルが HTTPS でロードされた SWF ファイルに LocalConnection 呼び出しを送信することも許可する点が異なります。この違いは、HTTPS を使用してロードされたファイルから <codeph>allowInsecureDomain()</codeph> メソッドを呼び出す場合にのみ意味があります。同じドメイン内の非 HTTPS と HTTPS の境界を越える場合でも、<codeph>allowInsecureDomain()</codeph> メソッドを呼び出す必要があります。デフォルトでは、同じドメイン内でも 非 HTTPS ファイルから HTTPS ファイルへの LocalConnection 呼び出しは許可されません。</p>
	 
	 <p><codeph>allowInsecureDomain()</codeph> を呼び出すことは、HTTPS によるセキュリティが損なわれる恐れがあるので、お勧めできません。HTTPS によってファイルをロードする場合は、ほぼ確実に、ファイルがネットワークでの配信中に不正操作を受けることはありません。 非 HTTPS ファイルから HTTPS ファイルへの LocalConnection 呼び出しを許可した場合、配信中に不正操作された可能性のあるファイルからの呼び出しを受け入れることになります。この場合は、HTTPS ファイルに送られてきた LocalConnection 呼び出しの正当性を信頼できないので、一般に特別な警戒を必要とします。</p>
	 
	 <p>デフォルトでは、HTTPS プロトコルを使用してホストされたファイルは、HTTPS プロトコルを使用してホストされた他のファイルにのみアクセスできます。 この実装方法により、HTTPS プロトコルが提供する整合性が保たれます。</p>
	 
	 <p>このメソッドでデフォルトの動作を変更することはお勧めできません。デフォルトの動作を変更すると、HTTPS のセキュリティが損なわれます。ただし、デフォルトの動作を変更せざるをえない場合もあります。例えば、Flash Player 9 以降用にパブリッシュされた HTTPS SWF ファイルに対して、Flash Player 6 以前のバージョン用にパブリッシュされた HTTP SWF ファイルからのアクセスを許可しなければならない場合などです。</p>
	 
	 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
	 
     <ul>
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#LocalConnection/allowDomain()"><linktext>flash.net.LocalConnection.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:close"><apiName>close</apiName><shortdesc>
	 LocalConnection オブジェクトを閉じます（切断します）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>LocalConnection, LocalConnection.close, close
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>LocalConnection インスタンスが接続されていないので、閉じることができません。
	 
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 LocalConnection オブジェクトを閉じます（切断します）。このコマンドは、LocalConnection オブジェクトがもうコマンドを受け入れないようにする場合に実行します。例えば、<codeph>connect()</codeph> コマンドを、別の SWF ファイルで同じ <codeph>connectionName</codeph> パラメーターを使用して実行する場合などです。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#LocalConnection/connect()"><linktext>flash.net.LocalConnection.connect()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:connect"><apiName>connect</apiName><shortdesc>
	 send() コマンド（送信側 LocalConnection オブジェクト）からのコマンドを受け取るように LocalConnection オブジェクトを準備します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>LocalConnection, LocalConnection.connect, connect
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>connectionName</codeph> パラメーターに渡される値は null 以外にする必要があります。
	 
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、次の 3 つの理由によって発生する可能性があります。1) <codeph>connectionName</codeph> パラメーターに渡されたストリング値が null だった場合。null 以外の値を渡します。2) <codeph>connectionName</codeph> パラメーターに渡された値にコロン（:）が含まれていた場合。コロンは、スーパードメインと <codeph>connectionName</codeph> ストリングを区切る特殊文字として <codeph>send()</codeph> メソッドで使用されます。<codeph>connect()</codeph> メソッドでは使用しません。3) LocalConnection インスタンスが既に接続されている場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>connectionName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>受信側 LocalConnection オブジェクトと通信する、<codeph>send()</codeph> コマンドで指定された接続名に対応するストリングです。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>send()</codeph> コマンド（<i>送信側 LocalConnection オブジェクト</i>）からのコマンドを受け取るように LocalConnection オブジェクトを準備します。このコマンドを使用するオブジェクトは<i>受信側 LocalConnection オブジェクト</i>と呼ばれます。受信側と送信側のオブジェクトは、同じクライアントコンピューター上で実行されている必要があります。
	 
	 <p>競合状況を避けるため、このメソッドを呼び出す前に、受信側の LocalConnection オブジェクトに関連付けられるメソッドを定義します（LocalConnection クラスの例を参照）。 </p>
	 
	 <p>デフォルトでは、<codeph>connectionName</codeph> 引数は <codeph>"<i>superdomain</i>:connectionName"</codeph> の値に解決されます。ここで <codeph><i>superdomain</i></codeph> は、<codeph>connect()</codeph> コマンドを含むファイルのスーパードメインを表します。 例えば、受信側 LocalConnection オブジェクトを含むファイルが www.someDomain.com に配置されている場合、<codeph>connectionName</codeph> は <codeph>"someDomain.com:connectionName"</codeph> に解決されます。（Flash Player で実行されているファイルがクライアントコンピューターに配置されている場合、<codeph>superdomain</codeph> には <codeph>"localhost"</codeph> が割り当てられます。）</p>
	 
	 <p>Adobe AIR の<codeph>アプリケーション</codeph>セキュリティサンドボックスで実行されているコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）では、スーパードメインの代わりに、<codeph>app#</codeph> + AIR アプリケーションのアプリケーション ID（アプリケーション記述ファイルで定義）が使用されます。 <codeph/>例えば、アプリケーション ID が <codeph>com.example.air.MyApp</codeph> の場合、そのアプリケーションの <codeph>connectionName</codeph> は <codeph>"app#com.example.air.MyApp:connectionName"</codeph> に解決されます。</p>
	 
	 <p>またデフォルトでは、受信側 LocalConnection オブジェクトは、接続名が <codeph>"</codeph><codeph><i>superdomain</i></codeph><codeph>:connectionName"</codeph> の値に解決される送信側 LocalConnection オブジェクトからのコマンドだけを受け入れます。このため、同じドメインに置かれているファイル間の通信は簡単です。</p>
	 
	 <p>同じドメインのファイル間のみの通信を実装する場合は、先頭がアンダースコア（_）でなくドメイン名を含まないストリングを <codeph>connectionName</codeph> に指定します（<codeph>"myDomain:connectionName"</codeph> など）。<codeph>connect(connectionName)</codeph> メソッドと同じストリングを使用してください。</p>
	 
	 <p>異なるドメイン内のファイル間の通信を実装する場合は、アンダースコア（_）で始まるストリングを <codeph>connectionName</codeph> に指定すると、受信側 LocalConnection オブジェクトを含むファイルをドメイン間で移植しやすくなります。考えられる 2 つの状況を次に示します。</p>
	 
	 <ul>
	 
	   <li><codeph>connectionName</codeph> のストリングがアンダースコア（_）で始まっていない場合は、<codeph>"myDomain:connectionName"</codeph> のように、スーパードメインとコロンが前に追加されます。 これにより、他のドメインの同じ名前を持つ接続との競合は回避できますが、送信側 LocalConnection オブジェクトでも必ずこのスーパードメインを指定する必要があります（<codeph>"myDomain:connectionName"</codeph> など）。受信側 LocalConnection オブジェクトを含むファイルが別のドメインに移動された場合は、<codeph>"anotherDomain:connectionName"</codeph> のように、新しいスーパードメインに応じて接頭辞が変更されます。すべての送信側 LocalConnection オブジェクトは、新しいスーパードメインを参照するように手動で編集する必要があります。</li>
	 
	   <li><codeph>connectionName</codeph> のストリングがアンダースコア（_）で始まっている場合（<codeph>"_connectionName"</codeph> など）は、ストリングに接頭辞は追加されません。 つまり、受信側と送信側の LocalConnection オブジェクトは、<codeph>connectionName</codeph> にまったく同じストリングを使用します。受信側オブジェクトが <codeph>allowDomain()</codeph> を使用し、すべてのドメインからの通信を受け入れるように指定した場合は、送信側 LocalConnection オブジェクトを変更せずに、受信側 LocalConnection オブジェクトを含むファイルを別のドメインに移動させることができます。</li>
	 </ul>
	 
	 <p>詳細については、クラスの概要の説明、<codeph>connectionName</codeph>（<codeph>send()</codeph>）の説明、および <codeph>allowDomain()</codeph> エントリと <codeph>domain</codeph> エントリを参照してください。</p>
	 
	 <p><b>注意：</b>コロンは、<codeph>connectionName</codeph> のストリングとスーパードメインを区切る特殊文字として使用されます。<codeph>connectionName</codeph> にコロンを含むストリングを指定するのは無効です。</p>
	 
	 <p><ph platform="javascript">アプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツで</ph>このメソッドを使用するときは、<ph platform="actionscript">Flash Player</ph> <ph platform="javascript">AIR</ph> セキュリティモデルを考慮してください。 デフォルトでは、LocalConnection オブジェクトはそれを作成したファイルのサンドボックスに関連付けられ、LocalConnection オブジェクトのクロスドメイン呼び出しは、受信側ファイルで <codeph>LocalConnection.allowDomain()</codeph> メソッドが呼び出されていない限り許可されません。<ph platform="actionscript">ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。</ph>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
	 
	 <p>詳細については、次のトピックを参照してください。</p>
	 
     <ul>
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
 	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#LocalConnection/send()"><linktext>flash.net.LocalConnection.send()</linktext></link><link href="flash.net.xml#LocalConnection/allowDomain()"><linktext>flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/domain"><linktext>flash.net.LocalConnection.domain</linktext></link></related-links></apiOperation><apiOperation id="flash.net:LocalConnection:send"><apiName>send</apiName><shortdesc>
	 connect(connectionName) メソッド（受信側 LocalConnection オブジェクト）で確立した接続を使用して、methodName で指定されたメソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>LocalConnection, LocalConnection.send, send
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>connectionName</codeph> または <codeph>methodName</codeph> のいずれかの値が null です。これらのパラメーターに null 以外の値を渡します。
	 
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、次のうちいずれかの理由で発生する可能性があります。1) <codeph>connectionName</codeph> または <codeph>methodName</codeph> のいずれかの値が空ストリングである場合。これらのパラメーターに有効なストリングを渡します。2) <codeph>methodName</codeph> で指定されているメソッドが制限されている場合。3) 送信された直列化メッセージが大きすぎる場合（40 K 以上）。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>connectionName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>送信側 LocalConnection オブジェクトと通信する、<codeph>connect()</codeph> コマンドで指定された接続名に対応します。 	 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>methodName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>受信側 LocalConnection オブジェクト内で呼び出されるメソッドの名前。次のメソッド名を使用すると、このコマンドは失敗します。<codeph>send</codeph>、<codeph>connect</codeph>、<codeph>close</codeph>、<codeph>allowDomain</codeph>、<codeph>allowInsecureDomain</codeph>、<codeph>client</codeph>、および <codeph>domain</codeph>。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>指定するメソッドに渡す追加のパラメーター。このパラメーターはオプションです。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>methodName</codeph> で指定されたメソッドを呼び出します。このとき <codeph>connect(</codeph> <codeph>connectionName</codeph> <codeph>)</codeph> メソッド（受信側 LocalConnection オブジェクト）で確立された接続が使用されます。このコマンドを使用するオブジェクトは<i>送信側 LocalConnection オブジェクト</i> と呼ばれます。送信側オブジェクトと受信側オブジェクトを含む SWF ファイルは、同じクライアントコンピューター上で実行されている必要があります。
	 
	 <p>このコマンドにパラメーターとして渡すことができるデータの量は 40 KB に制限されます。シンタックスが正しいにもかかわらず、<codeph>send()</codeph> が <codeph>ArgumentError</codeph> をスローする場合は、<codeph>send()</codeph> 要求を複数のコマンドに分割してそれぞれのデータを 40 KB より小さくしてみてください。</p>
	 
	 <p><codeph>connect()</codeph> の項目で説明したように、<codeph>connectionName</codeph> にはデフォルトで現在のスーパードメインが追加されます。 異なるドメイン間の通信を実装する場合は、送信側と受信側の両方の LocalConnection オブジェクトの <codeph>connectionName</codeph> を、現在のスーパードメインが <codeph>connectionName</codeph> に追加されないように定義する必要があります。 これには、次の 2 つの方法があります。</p>
	 
	 <ul>
	   <li>送信側と受信側の両方の LocalConnection オブジェクトで、<codeph>connectionName</codeph> の先頭にアンダースコア（_）を使用します。受信側オブジェクトを含むファイルでは、<codeph>LocalConnection.allowDomain()</codeph> を使用して、どのドメインからの接続も受け入れるように指定します。この方法では、送信側と受信側のファイルを任意のドメインに配置できます。</li>
	 
	   <li>送信側 LocalConnection オブジェクトの <codeph>connectionName</codeph> にスーパードメインを含めます。例えば、<codeph>myDomain.com:myConnectionName</codeph> と指定します。受信側オブジェクトでは、<codeph>LocalConnection.allowDomain()</codeph> を使用して、指定したスーパードメイン（この例では myDomain.com）からの接続を受け入れるか、またはすべてのドメインからの接続を受け入れるように指定します。</li>
	 </ul>
	 
	 <p><b>注意：</b>受信側 LocalConnection オブジェクトの <codeph>connectionName</codeph> ではスーパードメインを指定できません。スーパードメインを指定できるのは送信側 LocalConnection オブジェクトだけです。</p>
	 
	 <p><ph platform="javascript">アプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツで</ph>このメソッドを使用するときは、<ph platform="actionscript">Flash Player</ph> <ph platform="javascript">AIR</ph> セキュリティモデルを考慮してください。 デフォルトでは、LocalConnection オブジェクトはそれを作成したファイルのサンドボックスに関連付けられ、LocalConnection オブジェクトのクロスドメイン呼び出しは、受信側ファイルで <codeph>LocalConnection.allowDomain()</codeph> メソッドが呼び出されていない限り許可されません。ブラウザーで実行されている SWF コンテンツで、ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含む HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。 ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p> 
	 
	 <p>詳しくは、次のトピックを参照してください。</p>
	 
     <ul>
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
	 
 	 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#LocalConnection/allowDomain()"><linktext>flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/connect()"><linktext>flash.net.LocalConnection.connect()</linktext></link><link href="flash.net.xml#LocalConnection/domain"><linktext>flash.net.LocalConnection.domain</linktext></link></related-links><adobeApiEvent id="flash.net:LocalConnection:send_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc><codeph>LocalConnection.send()</codeph> は、呼び出し元のコードがアクセスできないセキュリティ Sandbox から SWF ファイルと通信しようとしました。この問題は、受信側が <codeph>LocalConnection.allowDomain()</codeph> を実装することで回避できます。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>LocalConnection.send() は、呼び出し元のコードがアクセスできないセキュリティ Sandbox から SWF ファイルと通信しようとしました。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:LocalConnection:send_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc><codeph>Level</codeph> プロパティの値が <codeph>"status"</codeph> の場合は呼び出しが成功したことを示し、<codeph>"error"</codeph> の場合は呼び出しが失敗したことを示します。受信側の SWF ファイルが接続を拒否した場合、呼び出しは失敗する可能性があります。
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Level プロパティの値が "status" の場合は呼び出しが成功したことを示し、"error" の場合は呼び出しが失敗したことを示します。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.net:LocalConnection:client:get"><apiName>client</apiName><shortdesc>
	 コールバックメソッドが呼び出されるオブジェクトを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier><apiException><apiDesc><codeph>client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。 
	 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 コールバックメソッドが呼び出されるオブジェクトを示します。デフォルトのオブジェクトは、作成されるローカル接続 <codeph>this</codeph> です。<codeph>client</codeph> プロパティを別のオブジェクトに設定すると、その別のオブジェクトでコールバックメソッドを呼び出すことができます。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:LocalConnection:domain:get"><apiName>domain</apiName><shortdesc>
	 現在のファイルが存在するドメインを表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>LocalConnection, LocalConnection.domain, domain
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 現在のファイルが存在するドメインを表すストリングです。 
	 
	 <p>Adobe AIR の<codeph>アプリケーション</codeph>セキュリティサンドボックスで実行されているコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）では、スーパードメインの代わりに、<codeph>app#</codeph> + AIR アプリケーションのアプリケーション ID（アプリケーション記述ファイルで定義）が使用されます。 <codeph/>例えば、アプリケーション ID が <codeph>com.example.air.MyApp</codeph> のアプリケーションでは、<codeph>connectionName</codeph> は <codeph>"app#com.example.air.MyApp:connectionName"</codeph> に解決されます。</p>
	 
	 <p>Flash Player 9 以降用にパブリッシュされた SWF ファイルでは、ファイルのサブドメインを含む正確なドメインを示すストリングを返します。 例えば、現在のファイルが www.adobe.com にある場合は、<codeph>"www.adobe.com"</codeph> を返します。 </p>
	 
	 <p>現在のファイルが、Flash Player で実行されているクライアントコンピューター上のローカルファイルである場合は、<codeph>"localhost"</codeph> を返します。</p>
	 
	 <p>このプロパティの最も一般的な使用方法としては、送信側 LocalConnection オブジェクトのドメイン名を、受信側 LocalConnection オブジェクトで呼び出すメソッドのパラメーターとして組み込みます。あるいは、<codeph>LocalConnection.allowDomain()</codeph> と組み合わせて使用して、特定のドメインからのコマンドを受け入れます。同じドメイン内にある LocalConnection オブジェクト間でのみ通信する場合は、通常、このプロパティを使用する必要はありません。</p>
	 
 	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#LocalConnection/allowDomain()"><linktext>flash.net.LocalConnection.allowDomain()</linktext></link><link href="flash.net.xml#LocalConnection/connect()"><linktext>flash.net.LocalConnection.connect()</linktext></link></related-links></apiValue><apiValue id="flash.net:LocalConnection:isPerUser:get"><apiName>isPerUser</apiName><shortdesc>  
     LocalConnection オブジェクトへのアクセスが現在のユーザーのみに制限されているのか（true）、コンピューター上のすべてのユーザーがグローバルにアクセスできるのか（false）を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0.32"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
     </apiDefaultValue></apiValueDef><apiDesc>  
     LocalConnection オブジェクトへのアクセスが現在のユーザーのみに制限されているのか（<codeph>true</codeph>）、コンピューター上のすべてのユーザーがグローバルにアクセスできるのか（<codeph>false</codeph>）を示します。このプロパティは、Mac OS X で実行されるコンテンツのみに適用されます。他のプラットフォームでは、このパラメーターは無視されます。Windows および Linux オペレーティングシステムの接続は常にユーザーごとに管理されます。Flash Player 10.0.22 以前および AIR 1.5.1 以前では、Mac OS X の LocalConnection オブジェクトにはグローバルにアクセスできます。以前のバージョンとの互換性を維持する必要がない限り、このプロパティは常に <codeph>true</codeph> に設定してください。将来のリリースでは、このプロパティのデフォルト値が <codeph>true</codeph> に変更される可能性があります。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:NetStreamInfo"><apiName>NetStreamInfo</apiName><shortdesc>
 
 NetStreamInfo クラスでは、NetStream のオブジェクトに関連するサービスの質（QOS）の各種統計情報と、オーディオ、ビデオ、およびデータの基になるストリーミングバッファーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 
 NetStreamInfo クラスでは、NetStream のオブジェクトに関連するサービスの質（QOS）の各種統計情報と、オーディオ、ビデオ、およびデータの基になるストリーミングバッファーを指定します。NetStreamInfo オブジェクトは、現在の QOS の状態のスナップショットを取得する <codeph>NetStream.info</codeph> の呼出しに応答して返され、NetStreamInfo のプロパティを介して QOS の統計情報を提供します。
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.net:NetStreamInfo:NetStreamInfo"><apiName>NetStreamInfo</apiName><shortdesc>
    内部使用のみを目的としています。使用はお勧めしません。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>curBPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>byteCount</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>maxBPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>audioBPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>audioByteCount</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>videoBPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>videoByteCount</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>dataBPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>dataByteCount</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>playbackBPS</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>droppedFrames</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>audioBufferByteLength</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>videoBufferByteLength</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>dataBufferByteLength</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>audioBufferLength</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>videoBufferLength</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>dataBufferLength</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>srtt</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>audioLossRate</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc>
    内部使用のみを目的としています。使用はお勧めしません。NetStreamInfo オブジェクトを作成できるのは、ランタイムだけです。
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.net:NetStreamInfo:toString"><apiName>toString</apiName><shortdesc>
     NetStreamInfo オブジェクトのプロパティを列挙するテキスト値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>NetStreamInfo オブジェクトのプロパティの値を含むストリング。
     
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText>この NetStreamInfo オブジェクトのプロパティを列挙するテキスト値を返します。
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     NetStreamInfo オブジェクトのプロパティを列挙するテキスト値を返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:NetStreamInfo:SRTT:get"><apiName>SRTT</apiName><shortdesc>
	 NetStream セッションの平滑化往復時間を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream セッションの平滑化往復時間を指定します。この値は、RTMFP ストリームの場合のみ有効な値を返し、RTMP ストリームの場合は 0 を返します。詳細については、Flash Media Server のマニュアルを参照してください。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioBufferByteLength:get"><apiName>audioBufferByteLength</apiName><shortdesc>
	 NetStream オーディオバッファーのサイズ（バイト数）を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream オーディオバッファーのサイズ（バイト数）を提供します。ストリーミングメディア内の、ライブおよび録音両方のオーディオデータのバッファーサイズを指定します。このプロパティは、プログレッシブダウンロードで使用する <codeph>Netstream.bytesLoaded</codeph> に似ています。 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioBufferLength:get"><apiName>audioBufferLength</apiName><shortdesc>
	 NetStream オーディオバッファーのサイズ（秒単位）を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream オーディオバッファーのサイズ（秒単位）を提供します。このプロパティは、<codeph>NetStream.bufferLength</codeph> プロパティを拡張したもので、時間単位のオーディオデータ専用バッファー長を提供します。 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioByteCount:get"><apiName>audioByteCount</apiName><shortdesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信した総オーディオバイト数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信した総オーディオバイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、オーディオデータ受信速度を計算する場合に使用します。または、<codeph>audioBytesPerSecond</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamInfo/audioBytesPerSecond"><linktext>audioBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:audioBytesPerSecond:get"><apiName>audioBytesPerSecond</apiName><shortdesc>
	 NetStream オーディオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream オーディオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信したオーディオデータの平滑化平均として計算されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:audioLossRate:get"><apiName>audioLossRate</apiName><shortdesc>
	 NetStream セッションのオーディオの損失を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream セッションのオーディオの損失を指定します。この値は、RTMFP ストリームの場合のみ有効な値を返し、RTMP ストリームの場合は 0 を返します。 損失率は、全メッセージ数に対する損失メッセージ数の比率で表されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:byteCount:get"><apiName>byteCount</apiName><shortdesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信した総バイト数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信した総バイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、データ受信速度を計算する場合に使用します。または、<codeph>currentBytesPerSecond</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamInfo/currentBytesPerSecond"><linktext>currentBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:currentBytesPerSecond:get"><apiName>currentBytesPerSecond</apiName><shortdesc>
	 NetStream バッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream バッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信した全データの平滑化平均として計算されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataBufferByteLength:get"><apiName>dataBufferByteLength</apiName><shortdesc>
	 NetStream データバッファーのサイズ（バイト数）を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream データバッファーのサイズ（バイト数）を提供します。ストリーミングメディア内の、ライブおよび記録両方のデータメッセージのバッファーサイズを指定します。このプロパティは、プログレッシブダウンロードで使用する <codeph>Netstream.bytesLoaded</codeph> に似ています。 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataBufferLength:get"><apiName>dataBufferLength</apiName><shortdesc>
	 NetStream データバッファーのサイズ（秒単位）を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream データバッファーのサイズ（秒単位）を提供します。このプロパティは、<codeph>NetStream.bufferLength</codeph> プロパティを拡張したもので、時間単位のデータメッセージ専用バッファー長を提供します。  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:dataByteCount:get"><apiName>dataByteCount</apiName><shortdesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信したデータメッセージの総バイト数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信したデータメッセージの総バイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、データメッセージ受信速度を計算する場合に使用します。または、<codeph>dataBytesPerSecond</codeph> を使用します。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamInfo/dataBytesPerSecond"><linktext>dataBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:dataBytesPerSecond:get"><apiName>dataBytesPerSecond</apiName><shortdesc>
	 NetStream データバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream データバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信したデータメッセージの平滑化平均として計算されます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:droppedFrames:get"><apiName>droppedFrames</apiName><shortdesc>
	 現在の NetStream 再生セッションで脱落したビデオフレームの数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 現在の NetStream 再生セッションで脱落したビデオフレームの数を返します。 
	 <p>記録されたストリーミングやプログレッシブダウンロードでは、システム CPU のリソースが十分でない場合、高品質または高解像度で高ビットレートのビデオの、1 秒あたりに必要なフレーム数をデコードする際に、デコーダの動作が遅くなることがあります。ライブストリーミングでは、待ち時間が長すぎる場合、バッファーはビデオフレームを脱落させます。このプロパティでは、脱落して正常には存在していないフレームの数を指定します。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:maxBytesPerSecond:get"><apiName>maxBytesPerSecond</apiName><shortdesc>
	 NetStream バッファーがデータを受信する最高速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream バッファーがデータを受信する最高速度（1 秒あたりのバイト数）を指定します。この値は、<codeph>NetStream</codeph> オブジェクトが受信した最後のメッセージを基に、クライアントのネットワーク容量に関する情報を提供します。<codeph>NetStream.bufferTime</codeph> で指定されているバッファーサイズとクライアントで利用可能な帯域幅によっては、Flash Media Server はバーストでバッファーにデータを受信します。このプロパティを使用すると、クライアントのバッファーがデータを受信する最大速度が得られます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:playbackBytesPerSecond:get"><apiName>playbackBytesPerSecond</apiName><shortdesc>
	 ストリーム再生速度（1 秒あたりのバイト数）を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 ストリーム再生速度（1 秒あたりのバイト数）を返します。再生バッファーには、様々な再生リストのコンテンツを格納できます。このプロパティを使用すると、現在再生されているストリームのビットレートに近い再生速度が得られます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoBufferByteLength:get"><apiName>videoBufferByteLength</apiName><shortdesc>
	 NetStream ビデオバッファーのサイズ（バイト数）を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream ビデオバッファーのサイズ（バイト数）を提供します。ストリーミングメディア内の、ライブおよび録画両方のビデオデータのバッファーサイズを指定します。このプロパティは、プログレッシブダウンロードで使用する <codeph>Netstream.bytesLoaded</codeph> に似ています。 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoBufferLength:get"><apiName>videoBufferLength</apiName><shortdesc>
	 NetStream ビデオバッファーのサイズ（秒単位）を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream ビデオバッファーのサイズ（秒単位）を提供します。このプロパティは、<codeph>NetStream.bufferLength</codeph> プロパティを拡張したもので、時間単位のビデオデータ専用バッファー長を提供します。 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamInfo:videoByteCount:get"><apiName>videoByteCount</apiName><shortdesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信したビデオの総バイト数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 再生またはフラッシュされたバイト数とは関係なく、キューが受信したビデオの総バイト数を指定します。この値は、タイマーを作成し、タイマーを連続して呼び出した場合の値の差を計算することによって、選択したメトリックを使って、ビデオデータ受信速度を計算する場合に使用します。または、<codeph>videoBytesPerSecond</codeph> を使用します。 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStreamInfo/videoBytesPerSecond"><linktext>videoBytesPerSecond</linktext></link></related-links></apiValue><apiValue id="flash.net:NetStreamInfo:videoBytesPerSecond:get"><apiName>videoBytesPerSecond</apiName><shortdesc>
	 NetStream ビデオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 NetStream ビデオバッファーがデータを受信する速度（1 秒あたりのバイト数）を指定します。この値は、最後の 1 秒に受信したビデオデータの平滑化平均として計算されます。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:URLStream"><apiName>URLStream</apiName><shortdesc>
 URLStream クラスはダウンロード用 URL への低レベルのアクセスを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 URLStream クラスはダウンロード用 URL への低レベルのアクセスを提供します。データはダウンロードされるとすぐにアプリケーションコードで使用できるようになります。URLLoader の場合のように、ファイル全体がダウンロードされるまで待つ必要はありません。URLStream クラスでは、ダウンロードの完了前にストリームを閉じることもできます。ダウンロードされたファイルの内容は、生のバイナリデータとして利用できます。
 
 <p>URLStream の読み取り操作で、ブロッキングは発生しません。つまり、読み取るデータが十分にあるかどうかを <codeph>bytesAvailable</codeph> プロパティを使用して確認してから、データを読み取る必要があります。データが十分にない場合は、<codeph>EOFError</codeph> 例外がスローされます。</p>
 
 <p>すべてのバイナリデータは、ビッグエンディアン形式がデフォルトのエンコーディングです。ビッグエンディアンでは、最上位バイトが最初になります。</p>
 
 <p>URLStream クラスでダウンロードしている URL に適用されるセキュリティルールは、URLLoader オブジェクトに適用されるルールと同一です。ポリシーファイルは、必要に応じてダウンロードされます。ローカルファイルのセキュリティルールが適用され、必要に応じてセキュリティ警告が発生します。</p>

 
 </apiDesc><example conref="examples\URLStreamExample.as"> 次の例では、SWF ファイルをロードして、そのヘッダーの先頭を解析し、圧縮とバージョン番号の情報を示します。 
 <p>例を実行するために、URLStreamExample.swf という名前のファイルを SWF ファイルと同じディレクトリに配置してください。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.errors.*;
    import flash.events.*;
    import flash.net.URLRequest;
    import flash.net.URLStream;

    public class URLStreamExample extends Sprite {
        private static const ZLIB_CODE:String = "CWS";
        private var stream:URLStream;

        public function URLStreamExample() {
            stream = new URLStream();
            var request:URLRequest = new URLRequest("URLStreamExample.swf");
            configureListeners(stream);
            try {
                stream.load(request);
            } catch (error:Error) {
                trace("Unable to load requested URL.");
            }
        }

        private function configureListeners(dispatcher:EventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
        }

        private function parseHeader():void {
            trace("parseHeader");
            trace("isCompressed: " + isCompressed());
            trace("version: " + stream.readByte());
        }

        private function isCompressed():Boolean {
            return (stream.readUTFBytes(3) == ZLIB_CODE);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
            parseHeader();
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:Event):void {
            trace("progressHandler: " + event);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLLoader"><linktext>URLLoader</linktext></link><link href="flash.net.xml#URLRequest"><linktext>URLRequest</linktext></link></related-links><adobeApiEvent id="flash.net:URLStream_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
 ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ダウンロード処理を実行中にデータを受信したときに送出されます。受け取ったデータは、URLStream クラスのメソッドを使用してすぐに読み取ることができます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/load()"><linktext>URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.Event.OPEN_open"><apiName>open</apiName><shortdesc>
 ロード操作が開始したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ロード操作が開始したときに送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/load()"><linktext>URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 入出力エラーが発生してロード操作が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 入出力エラーが発生してロード操作が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/load()"><linktext>URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><shortdesc>
 URLStream.load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLStream.load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 
 
 <p>URLStream オブジェクトに <codeph>httpStatusEvent</codeph> イベントを登録すると、エラー応答がコンテンツであるかのように配信されます。このため、URLStream は、エラーデータが URLStream にロードされると、<codeph>ioError</codeph> イベントを送出する代わりに <codeph>progress</codeph> イベントおよび <codeph>complete</codeph> イベントを送出します。</p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/load()"><linktext>URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
 URLStream.load() を呼び出して HTTP を介してデータにアクセスを試み、Flash Player または Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLStream.load()</codeph> を呼び出して HTTP を介してデータにアクセスを試み、<ph platform="actionscript">Flash Player または </ph>Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます（一部のブラウザー環境ではこの情報を提供できません）。<codeph>httpStatus</codeph> が発生した場合は、<codeph>complete</codeph> イベントまたは <codeph>error</codeph> イベントの前に、これらのイベントとは別に送信されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/load()"><linktext>URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 URLStream.load() の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータをロードしようとすると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>URLStream.load()</codeph> の呼び出しによってセキュリティサンドボックスの外部にあるサーバーからデータをロードしようとすると送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/load()"><linktext>URLStream.load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:URLStream_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 データが正常にロードされたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 データが正常にロードされたときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:URLStream:close"><apiName>close</apiName><shortdesc>
     すぐにストリームを閉じ、ダウンロード処理をキャンセルします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>ストリームを閉じることができないか、またはストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     すぐにストリームを閉じ、ダウンロード処理をキャンセルします。<codeph>close()</codeph> メソッドの呼び出し後は、ストリームからデータを読み込みません。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:load"><apiName>load</apiName><shortdesc>
     request パラメーターで指定された URL でのダウンロードを開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>URLRequest.requestHeader</codeph> オブジェクトには、禁止されている特定の HTTP リクエストヘッダーを含めることはできません。詳細については、URLRequestHeader クラスの説明を参照してください。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>このエラーは、次の理由で発生する可能性があります。
     
     <ol>
     
     <li>Flash Player または Adobe AIR では <codeph>URLRequest.data</codeph> パラメーターを UTF8 から MBCS に変換できません。 このエラーは、<codeph>load()</codeph> に渡された URLRequest オブジェクトが <codeph>GET</codeph> 操作を行うように設定されている場合、および <codeph>System.useCodePage</codeph> が <codeph>true</codeph> に設定されている場合に発生することがあります。</li>
     
     <li>Flash Player または Adobe AIR では <codeph>POST</codeph> データにメモリを割り当てることができません。このエラーは、load に渡された URLRequest オブジェクトが <codeph>POST</codeph> 操作を行うように設定されている場合に発生することがあります。</li></ol>
     
     </apiDesc><apiItemName>MemoryError</apiItemName><apiOperationClassifier>flash.errors:MemoryError</apiOperationClassifier></apiException><apiException><apiDesc>信頼されていないローカル SWF ファイルはインターネットへの接続を許可されません。これは、ネットワークアクセスを許可されたローカル SWF ファイル、または信頼できる SWF ファイルとして再分類すると回避できる場合があります。
     
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとした場合。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>request</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>ダウンロードする URL を指定する URLRequest オブジェクトです。このパラメーターの値、または渡された URLRequest オブジェクトの <codeph>URLRequest.url</codeph> プロパティが <codeph>null</codeph> の場合、アプリケーションは null ポインターエラーをスローします。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>request</codeph> パラメーターで指定された URL でのダウンロードを開始します。
     
     <p><b>注意：</b>ロード中のファイルに ASCII 文字以外の文字（英語以外の多くの言語に存在する）が含まれている場合は、ASCII のような非 Unicode 形式ではなく UTF-8 または UTF-16 エンコーディング形式でファイルを保存することをお勧めします。</p>
     
     <p>ロード処理がすぐに失敗すると、エラーについて説明する IOError または SecurityError（ローカルファイルのセキュリティエラーを含む）例外がスローされます。その他に、URL ダウンロードでダウンロードが正常に開始した場合は <codeph>open</codeph> イベントが送出され、エラーが発生した場合はエラーイベントが送出されます。</p>
     
     <p>デフォルトで、呼び出し元の SWF ファイルおよびロードする URL は同じドメインに置かれている必要があります。例えば、www.adobe.com に置かれている SWF ファイルは www.adobe.com に置かれているソースからのみデータをロードできます。 異なるドメインからデータをロードするには、データをホストするサーバーに URL ポリシーファイルを配置します。</p>
     
      <p platform="actionscript">Flash Player では、一般的な予約ポートへは接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
     
     <p platform="actionscript">Flash Player では、SWF ファイルがこのメソッドを使用しないようにすることができます。そのためには、SWF コンテンツを含んでいる HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。</p>
     
     <p platform="actionscript"> Flash Player 10 以降および AIR 1.5 以降では、"multipart/form-data" などのマルチパート Content-Type にアップロードが含まれていると（アップロードが含まれているかどうかは POST ボディ内の "content-disposition" ヘッダーの "filename" パラメーターで示されます）、そのアップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
	 <ul platform="actionscript">
	 <li>POST 処理は、マウスのクリックやキーの押下などのユーザーが開始したアクションに応答して実行する必要があります。</li>
	 <li>POST 処理がクロスドメインである（POST ターゲットが、POST 要求を送信中の SWF ファイルと同じサーバー上にない）場合は、クロスドメインアクセスを許可する URL ポリシーファイルをターゲットサーバーが提供する必要があります。</li>
	 </ul>
     <p platform="actionscript">また、すべてのマルチパート Content-Type では、RFC2046 標準に準拠した有効なシンタックスを使用する必要があります。シンタックスが有効でない場合は、アップロードに適用されるセキュリティ規則によって POST 処理が拘束されます。</p>
     
     <p platform="actionscript">これらのルールは、アプリケーションサンドボックス内にない AIR コンテンツにも適用されます。ただし、Adobe AIR では、アプリケーションサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
     
     <p platform="actionscript">セキュリティ情報について詳しくは、以下を参照してください。</p>
     <ul platform="actionscript">
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     <li>『<i>Developing AIR Applications</i>』の「Getting started with Adobe AIR」の「Understanding AIR Security」</li>
     
     </ul>
     
     <p>AIR では、URLRequest オブジェクトを <codeph>httpResponse</codeph> ステータスイベントに登録できます。<codeph>httpStatus</codeph> イベントと異なり、<codeph>httpResponseStatus</codeph> イベントは応答データの前に配信されます。また、<codeph>httpResponseStatus</codeph> イベントには <codeph>responseHeaders</codeph> プロパティと <codeph>responseURL</codeph> プロパティの値が含まれます（これらは <codeph>httpStatus</codeph> イベントでは定義されていません）。<codeph>httpResponseStatus</codeph> イベントは、発生した場合、<codeph>complete</codeph> イベントまたは <codeph>error</codeph> イベントの前に、これらのイベントとは別に送信されます。 
     </p>
     
     
     <p><i/><codeph>httpResponseStatus</codeph> イベントリスナーがある場合、応答メッセージの本文は<i>常に</i>送信され、HTTP ステータスコードの応答結果は常に <codeph>complete</codeph> イベントになります。これは、HTTP 応答ステータスコードが成功またはエラーを示しているかどうかにかかわらず当てはまります。</p> 
     
     <p><ph platform="actionscript">AIR では、</ph><ph platform="javascript">このイベントリスナーが</ph><i>存在しない</i>（つまり、<codeph>httpResponseStatus</codeph> イベントリスナーが存在しない）場合、<ph platform="actionscript">SWF</ph> の <ph platform="javascript">AIR</ph> のバージョンによって動作が異なります。</p>
     
     <ul>
     
         <li><ph platform="actionscript">SWF 9 コンテンツの場合</ph>：<ph platform="javascript">アプリケーション記述子でラインタイムバージョンとして AIR 1.0 または 1.1 が指定されている AIR ファイルでは</ph>、HTTP 応答のステータスコードが成功を示している<i>場合のみ</i>、HTTP 応答メッセージの本文が送信されます。それ以外（エラーがある場合）は、本文は送信されずに、URLRequest オブジェクトによって IOError イベントが送出されます。</li>
     
         <li><ph platform="actionscript">SWF 10 コンテンツの場合</ph>：<ph platform="javascript">アプリケーション記述子でラインタイムバージョンとして AIR 1.5 が指定されている AIR ファイルでは</ph>、HTTP 応答メッセージの本文は<i>必ず</i>送信されます。エラーがある場合は、URLRequest オブジェクトによって IOError イベントが送出されます。</li>
     
     </ul>
     
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.net:URLStream:load_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>データが正常にロードされた後に送出されます。<codeph>httpResponseStatus</codeph> イベントリスナーが存在する場合、URLRequest オブジェクトは、HTTP 応答のステータスコードが成功<i>または</i>エラーのいずれを示しているかを通知する <codeph>complete</codeph> イベントも送出します。
     
	 </apiDesc></adobeApiEventDetail><shortdesc>データが正常にロードされた後に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>アクセスが HTTP 経由で、<ph platform="actionscript">現在の環境がステータスコードの取得をサポートしている場合</ph>、<codeph>complete</codeph> イベントや <codeph>error</codeph> イベントに加えて、これらのイベントを受け取る場合があります。
     
	 </apiDesc></adobeApiEventDetail><shortdesc>アクセスが HTTP 経由で、現在の環境がステータスコードの取得をサポートしている場合、complete イベントや error イベントに加えて、これらのイベントを受け取る場合があります。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc><codeph>load()</codeph> メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。 
	 
     </apiDesc></adobeApiEventDetail><shortdesc>load() メソッドを呼び出して HTTP を介してデータにアクセスを試み、Adobe AIR で要求のステータスコードを検出して返すことができる場合に送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ロード操作を完了できませんでした。
     
     </apiDesc></adobeApiEventDetail><shortdesc>ロード操作を完了できませんでした。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>ロード操作が開始したときに送出されます。
     
     </apiDesc></adobeApiEventDetail><shortdesc>ロード操作が開始したときに送出されます。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.net:URLStream:load_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。これはサーバー上のポリシーファイルを使用すると回避できます。
     </apiDesc></adobeApiEventDetail><shortdesc>呼び出し元のセキュリティ Sandbox の外部にあるサーバーからデータを取得しようとするロード操作です。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:URLStream:readBoolean"><apiName>readBoolean</apiName><shortdesc>
     ストリームからブール値を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>バイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> が返されます。
     
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームからブール値を読み取ります。1 バイトが読み取られ、バイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> が返されます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readByte"><apiName>readByte</apiName><shortdesc>
     ストリームから符号付きバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>-128 ～ 127 の範囲の値。
     
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから符号付きバイトを読み取ります。
     <p>返される値は -128 ～ 127 の範囲です。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readBytes"><apiName>readBytes</apiName><shortdesc>
     ストリームから length バイトのデータを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データの読み込み先の ByteArray オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc><codeph>bytes</codeph> でのデータ読み込み開始位置を指定するためのオフセットです。デフォルト値は 0 です。
     </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>読み取るバイト数です。デフォルト値の 0 に設定すると、すべてのデータが読み取られます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     ストリームから <codeph>length</codeph> バイトのデータを読み取ります。このバイトは、<codeph>bytes</codeph> で指定した ByteArray オブジェクトに読み込まれます。ByteArray オブジェクトの <codeph>offset</codeph> バイトの位置から読み込みが開始されます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readDouble"><apiName>readDouble</apiName><shortdesc>
     ストリームから IEEE 754 倍精度浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>ストリームから返される IEEE 754 倍精度浮動小数点数。
     
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから IEEE 754 倍精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readFloat"><apiName>readFloat</apiName><shortdesc>
     ストリームから IEEE 754 単精度浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>ストリームから返される IEEE 754 単精度浮動小数点数。
     
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから IEEE 754 単精度浮動小数点数を読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readInt"><apiName>readInt</apiName><shortdesc>
     ストリームから符号付き 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>-2147483648 ～ 2147483647 の範囲の値。
     
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから符号付き 32 ビット整数を読み取ります。
     <p>返される値は -2147483648 ～ 2147483647 の範囲です。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readMultiByte"><apiName>readMultiByte</apiName><shortdesc>
     指定した文字セットを使用して、バイトストリームから指定した長さのマルチバイトストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>URLStream, URLStream.readMultiByte, readMultiByte
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 エンコードされたストリングです。
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>バイトストリームから読み取るバイト数です。
     </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift_jis"</codeph>、<codeph>"CN-GB"</codeph>、および <codeph>"iso-8859-1"</codeph> などがあります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。    
	 
     <p><b>注意：</b> <codeph>charSet</codeph> パラメーターの値が現在のシステムによって認識されない場合、アプリケーションはシステムのデフォルトコードページを文字セットとして使用します。例えば、<codeph>charSet</codeph> パラメーターの指定で、<codeph>myTest.readMultiByte(22, "iso-8859-01")</codeph> のように、<codeph>01</codeph> を <codeph>1</codeph> の代わりに使用した場合、その文字セットパラメーターは開発マシンでは認識されるかもしれませんが、別のマシンでは認識されない可能性があります。もう一方のマシンでは、アプリケーションがシステムのデフォルトコードページを使用することになります。</p>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定した文字セットを使用して、バイトストリームから指定した長さのマルチバイトストリングを読み取ります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readObject"><apiName>readObject</apiName><shortdesc>
     ソケットから Action Message Format（AMF）形式でエンコードされたオブジェクトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>非直列化されたオブジェクトです。
     </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
     ソケットから Action Message Format（AMF）形式でエンコードされたオブジェクトを読み取ります。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding</linktext></link></related-links></apiOperation><apiOperation id="flash.net:URLStream:readShort"><apiName>readShort</apiName><shortdesc>
     ストリームから符号付き 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>-32768 ～ 32767 の範囲の値。
     
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから符号付き 16 ビット整数を読み取ります。
     <p>返される値は -32768 ～ 32767 の範囲です。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUTF"><apiName>readUTF</apiName><shortdesc>
     ストリームから UTF-8 ストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 ストリング。
     
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから UTF-8 ストリングを読み取ります。このストリングには、バイト単位の長さを示す符号なし short が前に付いているものと見なされます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUTFBytes"><apiName>readUTFBytes</apiName><shortdesc>
     ストリームから length の UTF-8 バイトを読み取り、ストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定した長さの文字のバイト表現で作成された UTF-8 ストリングです。
     
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>UTF-8 バイトのシーケンスです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ストリームから <codeph>length</codeph> の UTF-8 バイトを読み取り、ストリングを返します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedByte"><apiName>readUnsignedByte</apiName><shortdesc>
     ストリームから符号なしバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>

     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>0 ～ 255 の範囲の値。
     
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから符号なしバイトを読み取ります。
     <p>返される値は 0 ～ 255 の範囲です。 </p>     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedInt"><apiName>readUnsignedInt</apiName><shortdesc>
     ストリームから符号なし 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>0 ～ 4294967295 の範囲の値。
     
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから符号なし 32 ビット整数を読み取ります。
     <p>返される値は 0 ～ 4294967295 の範囲です。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:URLStream:readUnsignedShort"><apiName>readUnsignedShort</apiName><shortdesc>
     ストリームから符号なし 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><ph platform="actionscript">読み取り可能なデータが不足しています。ローカル SWF ファイルがセキュリティ警告をトリガーする場合、Flash Player は URLStream データが ActionScript で利用されるのを阻止します。その場合、データが受信され、読み取りメソッドのいずれかが EOFError 例外をスローした場合でも、<codeph>bytesAvailable</codeph> プロパティは 0 を返します。</ph> <ph platform="javascript">このエラーは SWF コンテンツに適用され、AIR で実行されている JavaScript コードでは発生しません。</ph>
	 
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>ストリームで I/O エラーが発生したか、ストリームが開いていません。
     </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiDesc>0 ～ 65535 の範囲の値。
     
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     ストリームから符号なし 16 ビット整数を読み取ります。
     <p>返される値は 0 ～ 65535 の範囲です。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.net:URLStream:bytesAvailable:get"><apiName>bytesAvailable</apiName><shortdesc>
     入力バッファーで読み取ることができるデータのバイト数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     入力バッファーで読み取ることができるデータのバイト数を返します。<codeph>bytesAvailable</codeph> プロパティを呼び出して、読み取るデータが十分にあることを確認してから、いずれかの <codeph>read</codeph> メソッドを使用してデータを読み取るようにしてください。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLStream:connected:get"><apiName>connected</apiName><shortdesc>
     この URLStream オブジェクトが現在、接続されているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     この URLStream オブジェクトが現在、接続されているかどうかを示します。このプロパティの呼び出しは、URLStream オブジェクトが接続されている場合は値 <codeph>true</codeph> を、それ以外の場合は <codeph>false</codeph> を返します。     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLStream:endian:get"><apiName>endian</apiName><shortdesc>
     データのバイト順を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>Endian.BIG_ENDIAN
     </apiDefaultValue></apiValueDef><apiDesc>
     データのバイト順を示します。指定できる値は、<codeph>Endian.BIG_ENDIAN</codeph> または <codeph>Endian.LITTLE_ENDIAN</codeph> です。
     </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Endian"><linktext>flash.utils.Endian</linktext></link></related-links></apiValue><apiValue id="flash.net:URLStream:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     オブジェクトの書き込みまたは読み取り時に使用される Action Message Format（AMF）のバージョンを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Property documented; needs review
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     オブジェクトの書き込みまたは読み取り時に使用される Action Message Format（AMF）のバージョンを制御します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/readObject()"><linktext>readObject()</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.net:SharedObject"><apiName>SharedObject</apiName><shortdesc>
 SharedObject クラスは、ユーザーのコンピューターまたはサーバー上で限定された量のデータを読み込みおよび格納するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>SharedObject, shared object, constructor
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 SharedObject クラスは、ユーザーのコンピューターまたはサーバー上で限定された量のデータを読み込みおよび格納するために使用されます。共有オブジェクトを使用すると、ローカルコンピューターまたはリモートサーバー上に永続化されているクライアント SWF ファイルとオブジェクト間で、リアルタイムでデータを共有することができます。ローカル共有オブジェクトはブラウザーのクッキーに似ており、リモート共有オブジェクトはリアルタイムデータ転送デバイスに似ています。リモート共有オブジェクトを使用するには、Adobe Flash Media Server が必要です。
 
 <p>共有オブジェクトを使用して次の操作を行います。</p>
 
 <ul>
 
 <li><b>ローカルの永続性を維持する</b>。共有オブジェクトを使用するにはこれが最も簡単な方法で、Flash Media Server は使用しません。例えば、<codeph>SharedObject.getLocal()</codeph> を呼び出して、アプリケーション内にメモリ付き電卓などの共有オブジェクトを作成することができます。ユーザーが電卓を閉じると、Flash Player により共有オブジェクトの最後の値がユーザーのコンピューターに保存されます。次に電卓を実行すると、電卓に前の値が表示されます。電卓アプリケーションを閉じる前に共有オブジェクトのプロパティを <codeph>null</codeph> に設定すると、次にアプリケーションを起動したときに、電卓にいずれの値も表示されません。その他のローカルの永続性の管理例としては、複雑な Web サイトのユーザー環境設定やその他のデータ（ニュースサイト上でユーザーが閲覧した記事のレコードなど）のトラッキングがあります。この情報をトラッキングすると、新規で未読の記事でなく、既に閲覧された記事を表示できます。 この情報をユーザーのコンピューターに保存すると、サーバーの負荷を削減できます。</li>
 
 <li><b>Flash Media Server にデータを格納および共有する</b>。サーバー上の共有オブジェクトには、他のクライアントが取得可能なデータを格納できます。例えば、<codeph>SharedObject.getRemote()</codeph> を呼び出して、電話帳などのリモート共有オブジェクトを作成します。このオブジェクトは、サーバー上に永続化されます。あるクライアントが共有オブジェクトを変更すると、現在そのオブジェクトに接続しているクライアントおよび後でそのオブジェクトに接続するクライアントのすべてが、変更されたデータを利用できます。オブジェクトがローカルに永続化され、サーバーに接続されていないときにクライアントがデータを変更すると、次回クライアントがリモート共有オブジェクトに接続するときに、データがそのオブジェクトにコピーされます。</li>
 
 <li><b>リアルタイムでデータを共有する</b>。共有オブジェクトは、複数のクライアント間でリアルタイムにデータを共有できます。例えば、チャットルームに接続しているユーザーのリストを格納するリモート共有オブジェクトを開くことができます。これはオブジェクトに接続しているすべてのクライアントに表示することができます。ユーザーがチャットルームに入退室するときに、オブジェクトが更新され、オブジェクトに接続しているすべてのクライアントに、更新後のチャットルームユーザーの一覧が表示されます。</li>
 
 </ul>
 
 <p> ローカル共有オブジェクトを作成するには、<codeph>SharedObject.getLocal()</codeph> を呼び出します。リモート共有オブジェクトを作成するには、<codeph>SharedObject.getRemote()</codeph> を呼び出します。</p> 
 
 <p> アプリケーションを閉じると、共有オブジェクトが<i>保存</i>されます。つまり、ディスクに書き込まれます。また、<codeph>flush()</codeph> メソッドを呼び出して、データを明示的にディスクに書き込むこともできます。</p>
 
 <p><b>ローカルディスク領域についての考慮事項。</b> ローカル共有オブジェクトには、アプリケーションを設計する際に考慮が必要な、いくつかの制限があります。SWF ファイルでローカル共有オブジェクトの書き込みが許可されない場合があります。ローカル共有オブジェクトに格納されているデータが、わからないうちに削除される場合もあります。Flash Player のユーザーは、個々のドメインまたはすべてのドメインで使用できるディスク領域を管理できます。ユーザーが使用可能なディスク領域の量を減らすと、一部のローカル共有オブジェクトが削除される可能性があります。Flash Player のユーザーには、サードパーティードメイン（現在のブラウザーのアドレスバーにあるドメイン以外のドメイン）によるローカル共有オブジェクトの読み取りまたは書き込みを防止できるプライバシーコントロール機能もあります。</p>
 
 <p><b>注意：</b>リモートサーバーではなくローカルコンピューターに格納および実行される SWF ファイルは、常にサードパーティーの共有オブジェクトをディスクに書き込むことができます。サードパーティーの共有オブジェクトの詳細については、Flash Player のヘルプの「<xref href="http://www.macromedia.com/support/documentation/jp/flashplayer/help/settings_manager03.html" scope="external">グローバルストレージ設定パネル</xref>」を参照してください。</p>
 
 <p>ディスク領域の量とユーザーのプライバシーコントロールに関する失敗についてチェックすることをお勧めします。<codeph>getLocal()</codeph> および <codeph>flush()</codeph> の呼び出し時にこれらのチェックを実行します。
 
 <ul>
 <li><codeph>SharedObject.getLocal()</codeph>  ユーザーがサードパーティーの共有オブジェクトを無効にしていて、SWF ファイルのドメインとブラウザーのアドレスバーに表示されるドメインが一致しない場合など、このメソッドの呼び出しに失敗すると、Flash Player は例外をスローします。</li>
 
 <li><codeph>SharedObject.flush()</codeph>  このメソッドの呼び出しに失敗すると、Flash Player は例外をスローします。呼び出しに成功すると、<codeph>SharedObjectFlushStatus.FLUSHED</codeph> を返します。追加の記憶域が必要な場合は、<codeph>SharedObjectFlushStatus.PENDING</codeph> を返します。Flash Player はローカルに保存する情報用の記憶域を増加するようにユーザーに要求します。したがって、<codeph>netStatus</codeph> イベントは保存に失敗したか成功したかを示す情報オブジェクトと一緒に送出されます。</li>
 </ul></p>
 
 <p>SWF ファイルでローカル共有オブジェクトを作成または変更しようとする場合、SWF ファイルの幅が最低でも 215 ピクセル、高さが最低でも 138 ピクセルあることを確認してください。このサイズは、ダイアログボックス（ローカル共有オブジェクトの記憶域制限を増やすかどうかをユーザーに確認する）を表示するための最小の大きさです。SWF ファイルがこの大きさよりも小さく、記憶域制限を増やす必要がある場合、<codeph>SharedObject.flush()</codeph> は失敗し、<codeph>SharedObjectFlushedStatus.PENDING</codeph> を返し、<codeph>netStatus</codeph> イベントを送出します。</p>
 
 <p>
 <b>リモート共有オブジェクト。</b> Flash Media Server では、アプリケーションに接続しているすべてのクライアントがリアルタイムで共有する、リモート共有オブジェクトを作成および使用できます。あるクライアントがリモート共有オブジェクトのプロパティを変更すると、接続しているすべてのクライアントのプロパティが変更されます。リモート共有オブジェクトを使用すると、例えば、マルチプレーヤーゲームのユーザーなどのクライアントを同期できます。
 </p>
 
 <p>
 各リモート共有オブジェクトに <codeph>data</codeph> プロパティがあります。これは、データを格納するプロパティを持つオブジェクトです。<codeph>setProperty()</codeph> を呼び出して、データオブジェクトのプロパティを変更します。サーバーは、プロパティを更新し、<codeph>sync</codeph> イベントを送出し、接続しているクライアントにプロパティを返送します。 
 </p>
 
 <p>
 クライアント、サーバー、またはその両方のリモート共有オブジェクトを永続化できます。デフォルトでは、サイズが最大 100K の永続的なリモート共有オブジェクトがローカルに保存されます。大きなオブジェクトを保存しようとすると、ローカル記憶領域ダイアログボックスが表示されます。このダイアログボックスでは、ユーザーが共有オブジェクト用のローカル記憶域の使用を許可または拒否できます。ステージのサイズは必ず 215 × 138 ピクセル以上に設定してください。これは、ダイアログボックスを表示するために必要な最小サイズです。
 </p>
 <p>
 ユーザーが「許可」をクリックすると、サーバーに共有オブジェクトが保存され、<codeph>netStatus</codeph> イベントが送出されます。このときの <codeph>code</codeph> プロパティは <codeph>SharedObject.Flush.Success</codeph> です。ユーザーが「拒否」を選択すると、サーバーに共有オブジェクトは保存されず、<codeph>netStatus</codeph> イベントが送出されます。このときの <codeph>code</codeph> プロパティは <codeph>SharedObject.Flush.Failed</codeph> です。
 </p>
 
 </apiDesc><example conref="examples\SharedObjectExample.as"> 次のコードは、ID <codeph>"application-name"</codeph> を使用して、共有オブジェクトを作成（以降の実行では取得）します。「保存」ボタンがクリックされると、<codeph>saveValue()</codeph> メソッドが <codeph>savedValue</codeph> というプロパティを SharedObject オブジェクトの <codeph>data</codeph> プロパティに保存しようとします。Flash Player がデータを保存する許可を求める必要がある場合、ユーザーが許可を与えるか拒否すると、<codeph>onFlushStatus()</codeph> メソッドが呼び出されます。「クリア」ボタンがクリックされると、<codeph>clearValue()</codeph> メソッドが <codeph>savedValue</codeph> に保存された値を削除します。次に SWF ファイルがロードされたときに取得される値は、<codeph>undefined</codeph> になります。
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.events.NetStatusEvent;
    import flash.net.SharedObject;
    import flash.net.SharedObjectFlushStatus;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFieldType;
    
    public class SharedObjectExample extends Sprite {
        
        private var mySo:SharedObject;
        
        public function SharedObjectExample() {
            buildUI();
            saveBtn.addEventListener(MouseEvent.CLICK, saveValue);
            clearBtn.addEventListener(MouseEvent.CLICK, clearValue);
            
            mySo = SharedObject.getLocal("application-name");
            output.appendText("SharedObject loaded...\n");
            output.appendText("loaded value: " + mySo.data.savedValue + "\n\n");
        }

         private function saveValue(event:MouseEvent):void {
            output.appendText("saving value...\n");
            mySo.data.savedValue = input.text;
            
            var flushStatus:String = null;
            try {
                flushStatus = mySo.flush(10000);
            } catch (error:Error) {
                output.appendText("Error...Could not write SharedObject to disk\n");
            }
            if (flushStatus != null) {
                switch (flushStatus) {
                    case SharedObjectFlushStatus.PENDING:
                        output.appendText("Requesting permission to save object...\n");
                        mySo.addEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
                        break;
                    case SharedObjectFlushStatus.FLUSHED:
                        output.appendText("Value flushed to disk.\n");
                        break;
                }
            }
            output.appendText("\n");
        }
        
        private function clearValue(event:MouseEvent):void {
            output.appendText("Cleared saved value...Reload SWF and the value should be \"undefined\".\n\n");
            delete mySo.data.savedValue;
        }
        
        private function onFlushStatus(event:NetStatusEvent):void {
            output.appendText("User closed permission dialog...\n");
            switch (event.info.code) {
                case "SharedObject.Flush.Success":
                    output.appendText("User granted permission -- value saved.\n");
                    break;
                case "SharedObject.Flush.Failed":
                    output.appendText("User denied permission -- value not saved.\n");
                    break;
            }
            output.appendText("\n");

            mySo.removeEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
        }
        
        // UI elements
        private var inputLbl:TextField;
        private var input:TextField;
        private var output:TextField;
        private var saveBtn:Sprite;
        private var clearBtn:Sprite;
    
        private function buildUI():void {
            // input label
            inputLbl = new TextField();
            addChild(inputLbl);
            inputLbl.x = 10;
            inputLbl.y = 10;
            inputLbl.text = "Value to save:";
            
            // input TextField
            input = new TextField();
            addChild(input);
            input.x = 80;
            input.y = 10;
            input.width = 100;
            input.height = 20;
            input.border = true;
            input.background = true;
            input.type = TextFieldType.INPUT;
            
            // output TextField
            output = new TextField();
            addChild(output);
            output.x = 10;
            output.y = 35;
            output.width = 250;
            output.height = 250;
            output.multiline = true;
            output.wordWrap = true;
            output.border = true;
            output.background = true;
            
            // Save button
            saveBtn = new Sprite();
            addChild(saveBtn);
            saveBtn.x = 190;
            saveBtn.y = 10;
            saveBtn.useHandCursor = true;
            saveBtn.graphics.lineStyle(1);
            saveBtn.graphics.beginFill(0xcccccc);
            saveBtn.graphics.drawRoundRect(0, 0, 30, 20, 5, 5);
            var saveLbl:TextField = new TextField();
            saveBtn.addChild(saveLbl);
            saveLbl.text = "Save";
            saveLbl.selectable = false;
            
            // Clear button
            clearBtn = new Sprite();
            addChild(clearBtn);
            clearBtn.x = 230;
            clearBtn.y = 10;
            clearBtn.useHandCursor = true;
            clearBtn.graphics.lineStyle(1);
            clearBtn.graphics.beginFill(0xcccccc);
            clearBtn.graphics.drawRoundRect(0, 0, 30, 20, 5, 5);
            var clearLbl:TextField = new TextField();
            clearBtn.addChild(clearLbl);
            clearLbl.text = "Clear";
            clearLbl.selectable = false;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject/flush()"><linktext>flush()</linktext></link><link href="flash.net.xml#SharedObject/getLocal()"><linktext>getLocal()</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>netStatus</linktext></link></related-links><adobeApiEvent id="flash.net:SharedObject_flash.events.SyncEvent.SYNC_sync"><apiName>sync</apiName><shortdesc>
 リモート共有オブジェクトがサーバーによって更新されるときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SyncEvent.SYNC</apiEventType><adobeApiEventClassifier>flash.events.SyncEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 リモート共有オブジェクトがサーバーによって更新されるときに送出されます。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/getRemote()"><linktext>getRemote()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:SharedObject_flash.events.NetStatusEvent.NET_STATUS_netStatus"><apiName>netStatus</apiName><shortdesc>
 SharedObject インスタンスが、そのステータスまたはエラーの状況をレポートするときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 SharedObject インスタンスが、そのステータスまたはエラーの状況をレポートするときに送出されます。<codeph>netStatus</codeph> イベントには、<codeph>info</codeph> プロパティが含まれます。このプロパティは、接続試行が成功したかどうかや共有オブジェクトのローカルディスクへの書き込みが成功したかどうかなど、イベントに関する特定の情報を含む情報オブジェクトです。 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:SharedObject_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><shortdesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.net:SharedObject:clear"><apiName>clear</apiName><shortdesc>
     ローカル共有オブジェクトの場合、すべてのデータを消去し、共有オブジェクトをディスクから削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>SharedObject, SharedObject.clear, clear
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ローカル共有オブジェクトの場合、すべてのデータを消去し、共有オブジェクトをディスクから削除します。共有オブジェクトへの参照はアクティブなままで、そのデータプロパティが削除されます。
     
     <p>
     Flash Media Server で使用されるリモート共有オブジェクトの場合、<codeph>clear()</codeph> はオブジェクトを切断し、すべてのデータを削除します。共有オブジェクトがローカルに永続化されている場合、このメソッドによって共有オブジェクトもディスクから削除されます。共有オブジェクトへの参照はアクティブなままで、そのデータプロパティが削除されます。
     </p>
      
     
     </apiDesc><example conref="examples\SharedObject_clear.as"> 次のコードは、<codeph>hostName</codeph> の値を ID として使用して、SharedObject オブジェクトを作成（以降の実行では取得）します。<codeph>username</codeph> というプロパティが、SharedObject オブジェクトのデータプロパティに追加されます。最後に <codeph>clear()</codeph> メソッドが呼び出され、データオブジェクトに追加されたすべての情報（この場合は、<codeph>username</codeph> という単一のプロパティ）が消去されます。
<codeblock>

package {
    import flash.net.SharedObject;

    public class SharedObject_clear {
        private var hostName:String = "yourDomain";
        private var username:String = "yourUsername";

        public function SharedObject_clear() {
            var mySo:SharedObject = SharedObject.getLocal(hostName);
            if(mySo.data.username == null) {
                mySo.data.username = username;
                trace("set: " + mySo.data.username); // yourUsername
            }
            else {
                mySo.clear();
                trace("cleared: " + mySo.data.username); // undefined
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:close"><apiName>close</apiName><shortdesc>
     リモート共有オブジェクトとサーバーとの間の接続を閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>server-specific: This info is relevant for Flash Media Server, but not Flex Data Services.
     
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     リモート共有オブジェクトとサーバーとの間の接続を閉じます。リモート共有オブジェクトがローカルに永続化されている場合、ユーザーはこのメソッドの呼び出し後に、オブジェクトのローカルコピーを変更できます。ローカルオブジェクトの変更は、次回にユーザーがリモート共有オブジェクトに接続したときに、サーバーに送られます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:connect"><apiName>connect</apiName><shortdesc>
     指定した NetConnection オブジェクトを介して、サーバー上のリモート共有オブジェクトに接続します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>server-specific: On FMS, can connect to a shared object, but cannot pass a message as a second param.
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Flash Player は、指定されたリモート共有オブジェクトに接続できません。NetConnection インスタンスが有効であり接続されていること、リモート共有オブジェクトがサーバーに正常に作成されたことを確認してください。
     
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>myConnection</apiItemName><apiOperationClassifier>flash.net:NetConnection</apiOperationClassifier><apiDesc>Flash Media Server との通信に使用する NetConnection オブジェクトなど、RTMP（Real-Time Messaging Protocol）を使用する NetConnection オブジェクト。
     
     </apiDesc></apiParam><apiParam><apiItemName>params</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>サーバー上のリモート共有オブジェクトに渡すメッセージを定義する文字列。Flash Media Server では使用できません。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定した NetConnection オブジェクトを介して、サーバー上のリモート共有オブジェクトに接続します。このメソッドは、<codeph>getRemote()</codeph> を呼び出した後に使用します。接続に成功すると、<codeph>sync</codeph> イベントが送出されます。
     
     <p>リモート共有オブジェクトに対する操作を行う前に、<codeph>try..catch..finally</codeph> ステートメントを使用してエラーが発生していないかどうかを確認します。次に、<codeph>sync</codeph> イベントを監視して処理した後で、共有オブジェクトを変更します。<codeph>sync</codeph> イベントを送出する前にローカルで行った変更は失われる場合があります。
     </p>
     
     <p>
     次の例は、<codeph>connect()</codeph> メソッドを呼び出して、リモート共有オブジェクトに接続します。
     </p>
     
	 <codeblock platform="actionscript">
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", myNC.uri, false);
     myRemoteSO.connect(myNC);
     </codeblock>
     
	 <codeblock platform="javascript">
	 var myRemoteSO = air.SharedObject.getRemote("mo", myNC.uri, false);
	 myRemoteSO.connect(myNC);
	 </codeblock>
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#SharedObject/getRemote()"><linktext>getRemote()</linktext></link><link href="flash.net.xml#SharedObject/event:sync"><linktext>sync</linktext></link><link href="../../statements.html#try..catch..finally"><linktext>try..catch..finally</linktext></link><link href="flash.net.xml#NetConnection"><linktext>NetConnection</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:flush"><apiName>flush</apiName><shortdesc>
     ローカルに永続化された共有オブジェクトを直ちにローカルファイルに書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>SharedObject, SharedObject.flush, flush
     
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Flash Player は、共有オブジェクトをディスクに書き込むことができません。このエラーは、ユーザーがこのドメインからのオブジェクトに対して永続的にローカル情報を保存することを許可されていない場合に発生する可能性があります。
      
     
     <p><b>注意：</b>サードパーティードメイン（現在のブラウザーのアドレスバーにあるドメイン以外のドメイン）の共有オブジェクトのディスクへの書き込みを許可していない場合でも、ローカルコンテンツでは、常にサードパーティードメインの共有オブジェクトをディスクに書き込むことができます。</p>
     
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>次のいずれかの値になります。
     <ul>
     <li><codeph>SharedObjectFlushStatus.PENDING</codeph>：ユーザーはこのドメインからのオブジェクトに対してローカル情報記憶域を許可していますが、割り当てられた領域がオブジェクトを保存するのに十分でありません。Flash Player はユーザーに領域を増やすように要求します。共有オブジェクトを保存するときにそのオブジェクト用の領域を増加できるようにするには、<codeph>SharedObjectFlushStatus.PENDING</codeph> 戻り値を無効にして、<codeph>minDiskSpace</codeph> の値を渡します。
     </li>
     
     <li><codeph>SharedObjectFlushStatus.FLUSHED</codeph>：共有オブジェクトはローカルディスク上のファイルに正常に書き込まれました。</li>
     </ul>
     
     </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>minDiskSpace</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>このオブジェクトに割り当てる必要のある最小ディスク領域（バイト単位）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     ローカルに永続化された共有オブジェクトを直ちにローカルファイルに書き込みます。このメソッドを使用しない場合、共有オブジェクトがファイルに書き込まれるのは、共有オブジェクトセッションの終了時となります。つまり、SWF ファイルが閉じられるとき、共有オブジェクトが参照されなくなってガベージコレクションされるとき、<codeph>SharedObject.clear()</codeph> または <codeph>SharedObject.close()</codeph> が呼び出されたとき、のいずれかの時点です。 
     
     <p>このメソッドが <codeph>SharedObjectFlushStatus.PENDING</codeph> を返した場合、このドメインからのオブジェクトを保存するためのディスク領域を増やすようユーザーに求めるダイアログボックスが表示されます。共有オブジェクトが保存されるときはそのための領域を大きくして <codeph>PENDING</codeph> が返されないようにするには、<codeph>minDiskSpace</codeph> に値を指定します。Flash Player は、ファイルを書き込む際、現在のサイズの共有オブジェクトを保存するのに必要な領域ではなく、<codeph>minDiskSpace</codeph> に指定されたバイト数を確認します。 </p>
     
     <p>例えば、共有オブジェクトのサイズが、最初は小さくても最大 500 バイトまで大きくなると予想される場合には、<codeph>minDiskSpace</codeph> に 500 を指定します。ユーザーに対して共有オブジェクトへのディスク領域の割り当てを求める際には、500 バイトの領域が要求されます。要求されたディスク領域をユーザーが割り当てた場合、それ以降、オブジェクトのサイズが 500 バイトを超えない限り、オブジェクトを保存する際に追加のディスク領域を要求されることはありません。 </p>
     
     <p>ユーザーがこのダイアログボックスに応答すると、このメソッドがもう一度呼び出されます。<codeph>netStatus</codeph> イベントが送出されます。このときの <codeph>code</codeph> プロパティは <codeph>SharedObject.Flush.Success</codeph> または <codeph>SharedObject.Flush.Failed</codeph> です。
     </p>
     
     </apiDesc><example conref="examples\SharedObject_flush.as"> 次のコードは、<codeph>hostName</codeph> の値を ID として使用して、SharedObject オブジェクトを作成（以降の実行では取得）します。<codeph>username</codeph> というプロパティが、SharedObject オブジェクトのデータプロパティに追加されます。<codeph>flush()</codeph> メソッドが呼び出された後、ストリング <codeph>pending</codeph> あるいはブール値の <codeph>true</codeph> または <codeph>false</codeph> が返されなかったかチェックされます。すべてのオープン SharedObject インスタンスは、Flash Player の現在のインスタンスを閉じるたびに自動的に保存されます。
<codeblock>
package {
    import flash.net.SharedObject;

    public class SharedObject_flush {
        private var hostName:String = "yourDomain";
        private var username:String = "yourUsername";

        public function SharedObject_flush() {
            var mySo:SharedObject = SharedObject.getLocal(hostName);
            mySo.data.username = username;
            var flushResult:Object = mySo.flush();
            trace("flushResult: " + flushResult);
            trace(mySo.data.username); // yourUsername
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.net.xml#SharedObject/clear()"><linktext>clear()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:getLocal"><apiName>getLocal</apiName><shortdesc>
  現在のクライアントだけが利用できるローカル永続共有オブジェクトへの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>SharedObject, constructor, SharedObject.getLocal, getLocal, get
  
  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Flash Player は、何らかの理由で共有オブジェクトを作成できません。サードパーティーの Flash コンテンツによる永続共有オブジェクトの作成と保存が禁止されている（ローカルコンテンツに適用されない）場合、このエラーが発生することがあります。ユーザーは、<xref href="http://www.adobe.com/support/documentation/jp/flashplayer/help/settings_manager03.html" scope="external">http://www.adobe.com/support/documentation/jp/flashplayer/help/settings_manager03.html</xref> にある設定マネージャーのグローバルストレージ設定パネルでサードパーティーの永続共有オブジェクトを禁止できます。
  
  </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>ローカルに永続化され、現在のクライアントでのみ利用できる共有オブジェクトへの参照です。共有オブジェクトを作成できない場合、または共有オブジェクトが見つからない場合（<codeph>localPath</codeph> に指定したディレクトリが存在しない場合など）、このメソッドは例外をスローします。
  
  </apiDesc><apiOperationClassifier>flash.net:SharedObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>オブジェクト名です。名前にはスラッシュ（<codeph>/</codeph>）を含めます。例えば、<codeph>work/addresses</codeph> は有効な名前です。共有オブジェクト名にスペース、および以下の文字を含めることはできません。   
  <pre>
  ~ % &amp; \ ; : " ' , &lt; > ? # 
  </pre>
  
  </apiDesc></apiParam><apiParam><apiItemName>localPath</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>共有オブジェクトを作成した SWF ファイルの完全パスまたは部分パスです。これによって、共有オブジェクトをローカルに保存する場所が決まります。このパラメーターを指定しない場合は、完全パスが使用されます。 
   
  </apiDesc></apiParam><apiParam><apiItemName>secure</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>この共有オブジェクトへのアクセスが HTTPS 接続経由で配布された SWF ファイルに限定されているかどうかを判別します。SWF ファイルが HTTPS 接続経由で配信されている場合、このパラメーターの値には次の効果があります。
  <ul>
  <li>このパラメーターを <codeph>true</codeph> に設定すると、Flash Player は新しいセキュアな共有オブジェクトを作成するか、既存のセキュアな共有オブジェクトの参照を取得します。このセキュアな共有オブジェクトに対する読み取りまたは書き込みは、HTTPS で配信された SWF ファイルによってのみ行えます。このとき SWF ファイルは <codeph>SharedObject.getLocal()</codeph> を、<codeph>secure</codeph> パラメーターを <codeph>true</codeph> に設定して呼び出します。</li>
  <li>このパラメーターが <codeph>false</codeph> に設定されている場合、Flash Player は共有オブジェクトを新しく作成するか、または HTTPS 以外の接続で配信された SWF ファイルから読み込みまたは書き込みのできる既存の共有オブジェクトに対する参照を取得します。</li>
  </ul>
  <p>SWF ファイルが HTTPS 以外の接続で配信された場合、このパラメーターを <codeph>true</codeph> に設定しようとすると、新しい共有オブジェクトの作成（または作成済みのセキュアな共有オブジェクトへのアクセス）は失敗し、<codeph>null</codeph> が返されます。このパラメーターの値にかかわらず、作成された共有オブジェクトには、当該ドメインで使用可能な合計ディスク容量の枠が適用されます。</p>
  
  <p>次の図に、<codeph>secure</codeph> パラメーターの使用方法を示します。</p>
  <p><adobeimage alt="セキュアな共有オブジェクトの図" href="../../images/secureParam.jpg"/></p>
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
  現在のクライアントだけが利用できるローカル永続共有オブジェクトへの参照を返します。共有オブジェクトがまだ存在しない場合は、このメソッドにより作成されます。<codeph>getLocal()</codeph> に渡された値が無効である場合、または呼び出しに失敗した場合、Flash Player は例外をスローします。
  
  <p>次のコードでは、返された共有オブジェクトの参照の変数への割り当て方法を示します。</p>
  <p><codeph>var so:SharedObject = SharedObject.getLocal("savedData");</codeph></p>
  
  <p><b>注意：</b>ユーザーがこのドメイン用のローカル記憶域を許可していない場合は、<codeph>localPath</codeph> の値が指定されていても、オブジェクトはローカルに保存されません。ただし、ローカルコンテンツは例外です。サードパーティードメイン（現在のブラウザーのアドレスバーにあるドメイン以外のドメイン）の共有オブジェクトのディスクへの書き込みを許可していない場合でも、ローカルコンテンツでは、常にサードパーティードメインの共有オブジェクトをディスクに書き込むことができます。
  </p>
  
  <p>名前のコンフリクトを避けるために、共有オブジェクトを作成している SWF ファイルの位置が考慮されます。例えば、www.myCompany.com/apps/stockwatcher.swf にある SWF ファイルが <codeph>portfolio</codeph> という名前の共有オブジェクトを作成した場合、この共有オブジェクトは、www.yourCompany.com/photoshoot.swf にある SWF ファイルが作成した <codeph>portfolio</codeph> という別のオブジェクトとは競合しません。これは、この 2 つの SWF ファイルが異なるディレクトリに置かれているからです。 </p>
  
  <p><codeph>localPath</codeph> パラメーターはオプションですが、慎重に使用する必要があります。特に、他の SWF ファイルが共有オブジェクトにアクセスしなければならない場合には注意してください。共有オブジェクトのデータが、別の場所に移動されない 1 つの SWF ファイルに固有のものである場合は、デフォルト値を使用することをお勧めします。他の SWF ファイルが共有オブジェクトにアクセスする必要がある場合、または共有オブジェクトを作成する SWF ファイルを後で移動する場合には、このパラメーターの値により、共有オブジェクトへのアクセスに影響が生じます。例えば、<codeph>localPath</codeph> をデフォルト値である SWF ファイルの完全パスに設定して共有オブジェクトを作成すると、他の SWF ファイルはその共有オブジェクトにアクセスできません。元の SWF ファイルを後で別の場所に移動すると、その SWF ファイルからも、共有オブジェクトに格納されているデータにアクセスできなくなります。</p>
  
  <p>共有オブジェクトへのアクセスを誤って制限してしまうのを避けるには、<codeph>localpath</codeph> パラメーターを使用します。最も制限の緩やかな方法は、<codeph>localPath</codeph> を <codeph>/</codeph>（スラッシュ）に設定する方法です。ドメインのすべての SWF ファイルが共有オブジェクトを利用できますが、ドメイン内の他の共有オブジェクトとの名前のコンフリクトが起こりやすくなります。より制限の厳しい方法は、<codeph>localPath</codeph> に SWF ファイルへの完全パス内のフォルダー名を付加する方法です。例えば、www.myCompany.com/apps/stockwatcher.swf にある SWF ファイルで作成された <codeph>portfolio</codeph> 共有オブジェクトの場合は、<codeph>localPath</codeph> パラメーターを <codeph>/</codeph>、<codeph>/apps</codeph>、または <codeph>/apps/stockwatcher.swf</codeph> に設定できます。アプリケーションに最適な柔軟性を提供できる方法がどれかを判断する必要があります。</p>
  
  <p platform="actionscript">このメソッドを使用するときは、次のセキュリティモデルを考慮してください。
  
  <ul>
  
    <li>サンドボックスの境界を越えて共有オブジェクトにアクセスすることはできません。</li>
    <li>Flash Player の設定ダイアログボックスまたは設定マネージャーを使用して、共有オブジェクトへのアクセスを制限できます。デフォルトでは、アプリケーションでドメインごとに最大 100 KB の共有オブジェクトを作成できます。管理者および一般ユーザーは、ファイルシステムへの書き込み機能に制限を適用することもできます。</li>
  </ul></p>
  
  <p platform="actionscript">ローカルファイル（ローカルにインストールされた SWF ファイルまたは EXE ファイル）として再生する SWF ファイルコンテンツをパブリッシュし、複数のローカル SWF ファイルから特定の共有オブジェクトにアクセスする必要があるとします。この状況では、ローカルファイルでは共有オブジェクトの保存に 2 つの異なる場所が使用されることがあるので注意してください。使用されるドメインは、共有オブジェクトを作成したローカルファイルに付与されるセキュリティ許可によって変わります。ローカルファイルには、次の 3 つの異なる許可レベルを設定できます。
  
  <ol>
    <li>ローカルファイルシステムのみに対するアクセス</li>
    <li>ネットワークのみに対するアクセス</li>
    <li>ネットワークとローカルファイルシステムの両方に対するアクセス</li>
  </ol></p>
  
  <p platform="actionscript">ローカルファイルシステムへのアクセス権を持つローカルファイル（レベル 1 または 3）は、共有オブジェクトを 1 つの場所に格納します。ローカルファイルシステムへのアクセス権を持たないローカルファイル（レベル 2）は、共有オブジェクトを別の場所に格納します。</p>
  
  <p platform="actionscript">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグ）を設定します。</p>
  
  <p platform="actionscript">詳しくは、次のトピックを参照してください。
  
  <ul>
    <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
    <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
    <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
  </ul></p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:getRemote"><apiName>getRemote</apiName><shortdesc>
     複数のクライアントがアクセスできる、Flash Media Server 上の共有オブジェクトへの参照が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>server-specific: This info is relevant for Flash Media Server, but not Flex Data Services.
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Flash Player は、共有オブジェクトを作成できません、または見つけられません。これは、<codeph>remotePath</codeph> パラメーターと <codeph>persistence</codeph> パラメーターに、存在しないパスが指定されていると起こることがあります。
     
     
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>複数クライアントでの共有ができるオブジェクトへの参照です。
     
     </apiDesc><apiOperationClassifier>flash.net:SharedObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>リモート共有オブジェクトの名前です。名前にはスラッシュ（/）を含めることができます。例えば、work/addresses は有効な名前です。共有オブジェクト名にスペース、および以下の文字を含めることはできません。
     <pre>    ~ % &amp; \ ; :  " ' , > ? ? #</pre>
     
     </apiDesc></apiParam><apiParam><apiItemName>remotePath</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>共有オブジェクトが保存されるサーバーの URIです。この URI は、<codeph>connect()</codeph> メソッドに渡された NetConnection オブジェクトの URI と同一である必要があります。 
     
     </apiDesc></apiParam><apiParam><apiItemName>persistence</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>false</apiData><apiDesc>共有オブジェクトのデータプロパティの属性が、どこで永続的になっているか（ローカル、リモート、またはその両方）を指定します。このパラメーターでは、共有オブジェクトをローカルで保存する場合の場所も指定できます。有効な値は次のとおりです。
     <ul><li><codeph>false</codeph> 値は、共有オブジェクトがクライアントまたはサーバーで永続的ではないことを指定します。</li>
     <li><codeph>true</codeph> 値は、共有オブジェクトがサーバー上のみで永続的であることを指定します。</li>
     <li>共有オブジェクトへのローカルの完全パスまたは部分パスは、共有オブジェクトがクライアントとサーバー上で永続的であることを示します。クライアントでは、共有オブジェクトは指定されたパスに保存されます。サーバー上では、アプリケーションディレクトリ内のサブディレクトリに保存されます。</li>
     </ul>
     
     <p><b>注意：</b>ユーザーがこのドメイン用のローカル記憶域を許可していない場合は、永続性のローカルパスが指定されていても、オブジェクトはローカルに保存されません。詳細については、クラスの説明を参照してください。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>secure</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>この共有オブジェクトへのアクセスが HTTPS 接続経由で配布された SWF ファイルに限定されているかどうかを判別します。詳細については、<codeph>secure</codeph> パラメーター（<codeph>getLocal</codeph> メソッドエントリ）の説明を参照してください。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     複数のクライアントがアクセスできる、Flash Media Server 上の共有オブジェクトへの参照が返されます。リモート共有オブジェクトがまだ存在しない場合は、このメソッドにより作成されます。 
     
     <p>
     次に示すように、リモート共有オブジェクトを作成するために <codeph>getRemote()</codeph> を呼び出し、<codeph>connect()</codeph> を呼び出してリモート共有オブジェクトをサーバーに接続します。</p>
     
	 <codeblock platform="actionscript">
     var nc:NetConnection = new NetConnection();
     nc.connect("rtmp://somedomain.com/applicationName");
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", nc.uri, false);
     myRemoteSO.connect(nc);
     </codeblock>
     
	 <codeblock platform="javascript">
     var nc = new air.NetConnection();
     nc.connect("rtmp://somedomain.com/applicationName");
     var myRemoteSO:SharedObject = SharedObject.getRemote("mo", nc.uri, false);
     myRemoteSO.connect(nc);
     </codeblock>
	 
     <p>
     共有オブジェクトのローカルおよびリモートコピーを同期させるには、<codeph>sync</codeph> イベントを監視して処理します。このオブジェクトを共有するすべてのクライアントは、<codeph>name</codeph> パラメーターと <codeph>remotePath</codeph> パラメーターに同じ値を渡す必要があります。 
     </p> 
     
     <p>現在のクライアントでのみ利用できる共有オブジェクトを作成するには、<codeph>SharedObject.getLocal()</codeph> を使用します。
     </p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#SharedObject/connect()"><linktext>connect()</linktext></link><link href="flash.net.xml#SharedObject/getLocal()"><linktext>getLocal()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:send"><apiName>send</apiName><shortdesc>
     リモート共有オブジェクトに接続しているすべてのクライアント（メッセージを送信したクライアントも含む）に、メッセージをブロードキャストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Needs better documentation, examples.
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>複数の引数：メッセージを識別するストリング、共有オブジェクトに割り当てる複数のハンドラー関数名、および任意のデータ型のオプションのパラメーターです。ハンドラー名の深さは 1 レベルのみで（つまり、親子形式を取ることができません）、共有オブジェクトに相対します。引数は直列化され、接続を介して送信されます。受信側のハンドラーは同じ順番でそれらの引数を受け取ります。パラメーターが循環オブジェクト（循環するリンクされたリストなど）である場合、シリアライザは参照を正しく処理します。
     
     <p><b>注意：</b>関数名には予約語を使用しないでください。例えば、<codeph>myRemoteSO.send("close")</codeph> は失敗します。</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     リモート共有オブジェクトに接続しているすべてのクライアント（メッセージを送信したクライアントも含む）に、メッセージをブロードキャストします。メッセージを処理して応答するには、共有オブジェクトに関連付けるコールバック関数を作成します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:SharedObject:setDirty"><apiName>setDirty</apiName><shortdesc>
     共有オブジェクトのプロパティの値が変更されたことをサーバーに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>The AS2 player automatically marks properties dirty as they are changed.
          The FMS server, however, requires an explicit setProperty() call to indicate when a property
          of data has changed.
     
          AS3 does not support auto-dirtying the properties, so we are introducing setDirty() to explicitly
          indicate when a property has changed, and setProperty() to match the method provided with the server.
     
          It's probably best to read the FMS Actionscript reference (search for SharedObject.setProperty at
          www.adobe.com) before writing this documentation, as the details should be similar.
     
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>変更されたプロパティの名前です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     共有オブジェクトのプロパティの値が変更されたことをサーバーに通知します。このメソッドは、変更されたことを示す <i>dirty</i> としてプロパティをマークします。
     
     <p>
     <codeph>SharedObject.setProperty()</codeph> を呼び出して、共有オブジェクトのプロパティを作成します。 
     </p>
      
     <p>
     <codeph>SharedObject.setProperty()</codeph> メソッドは、<codeph>setDirty()</codeph> を実装します。ほとんどの場合、例えばプロパティの値がストリングや数値のようなプリミティブ型のときは、<codeph>setProperty()</codeph> を呼び出すことが可能で、<codeph>setDirty()</codeph> を呼び出す必要はありません。ただし、プロパティの値が独自のプロパティを持つオブジェクトである場合は、<codeph>setDirty()</codeph> を呼び出してオブジェクト内の値が変更された日時を示します。
     </p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#SharedObject/data"><linktext>SharedObject.data（クライアント側プロパティ）</linktext></link><link href="flash.net.xml#SharedObject/setProperty()"><linktext>setProperty()</linktext></link></related-links></apiOperation><apiOperation id="flash.net:SharedObject:setProperty"><apiName>setProperty</apiName><shortdesc>
     共有オブジェクトのプロパティの値を更新し、プロパティの値が変更されたことをサーバーに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>共有オブジェクトのプロパティの名前です。
     </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>プロパティの値（ActionScript オブジェクト）です。プロパティを削除する場合は <codeph>null</codeph> を指定します。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     共有オブジェクトのプロパティの値を更新し、プロパティの値が変更されたことをサーバーに通知します。<codeph>setProperty()</codeph> メソッドは、プロパティを changed または dirty として明示的にマークします。
     
     <p>リモート共有オブジェクトの詳細については、<xref href="http://www.adobe.com/go/learn_fms_docs_en">Flash Media Server のマニュアル</xref>を参照してください。</p>
     
     <p><b>注意：</b><codeph>SharedObject.setProperty()</codeph> メソッドには、<codeph>setDirty()</codeph> メソッドが実装されています。ほとんどの場合、例えばプロパティの値がストリングや数値のようなプリミティブ型のときは、<codeph>setProperty()</codeph> を使用し、<codeph>setDirty</codeph> を使用することはありません。ただし、プロパティの値が独自のプロパティを持つオブジェクトである場合は、<codeph>setDirty()</codeph> を使用してオブジェクト内の値が変更された日時を示します。一般的には、<codeph>setProperty()</codeph> を呼び出して、<codeph>setDirty()</codeph> は使用しないことをお勧めします。<codeph>setProperty()</codeph> は値が変更されたときだけプロパティ値を更新しますが、<codeph>setDirty()</codeph> はサブスクライブしているすべてのクライアントを強制的に同期させるからです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#SharedObject/data"><linktext>SharedObject.data（クライアント側プロパティ）</linktext></link></related-links></apiOperation><apiValue id="flash.net:SharedObject:client:get"><apiName>client</apiName><shortdesc>
     コールバックメソッドが呼び出されるオブジェクトを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Property documented; needs review.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier><apiException><apiDesc><codeph>client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。
     
     </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     コールバックメソッドが呼び出されるオブジェクトを示します。デフォルトのオブジェクトは <codeph>this</codeph> です。client プロパティを別のオブジェクトに設定し、コールバックメソッドをその別のオブジェクトで呼び出すことができます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:SharedObject:data:get"><apiName>data</apiName><shortdesc>
     オブジェクトの data プロパティに割り当てられた属性のコレクションです。これらの属性は共有および保存することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>SharedObject, SharedObject.data, data
     
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
     オブジェクトの <codeph>data</codeph> プロパティに割り当てられた属性のコレクションです。これらの属性は共有および保存することができます。それぞれの属性は、ActionScript または JavaScript タイプのオブジェクトです。例えば、Array、Number、Boolean、ByteArray、XML などです。次のコードでは、共有オブジェクトの各種属性に値を割り当てています。
     
	 <codeblock platform="actionscript">
     var items_array:Array = new Array(101, 346, 483);
     var currentUserIsAdmin:Boolean = true;
     var currentUserName:String = "Ramona";
     
     var my_so:SharedObject = SharedObject.getLocal("superfoo");
     my_so.data.itemNumbers = items_array;
     my_so.data.adminPrivileges = currentUserIsAdmin;
     my_so.data.userName = currentUserName;
     
     for (var prop in my_so.data) {
       trace(prop+": "+my_so.data[prop]);
     }
     </codeblock>
     
	 <codeblock platform="javascript">
	 var items_array = new Array(101, 346, 483);
	 var currentUserIsAdmin = true;
	 var currentUserName = "Ramona";
	 
	 var my_so = air.SharedObject.getLocal("superfoo");
	 my_so.data.itemNumbers = items_array;
	 my_so.data.adminPrivileges = currentUserIsAdmin;
	 my_so.data.userName = currentUserName;
	 
	 for (var prop in my_so.data) {
	   trace(prop+": "+my_so.data[prop]);
	 }
	 </codeblock>
     
     <p>永続的なオブジェクトの場合は、共有オブジェクトの <codeph>data</codeph> プロパティのすべての属性が保存されます。また共有オブジェクトには次の情報が含まれています。</p>
     
     <codeblock>
     userName: Ramona
     adminPrivileges: true
     itemNumbers: 101,346,483
     </codeblock>
     
     <p><b>注意：</b>共有オブジェクトの <codeph>data</codeph> プロパティに、<codeph>so.data = someValue</codeph> のように値を直接割り当てないようにしてください。このような割り当ては無視されます。</p>
     
     <p>ローカル共有オブジェクトの属性を削除するには、<codeph>delete so.data.attributeName</codeph> というコードを使用します。ローカル共有オブジェクトの属性を <codeph>null</codeph> または <codeph>undefined</codeph> に設定しても、属性は削除されません。</p>
     
     <p>共有オブジェクトの<i>プライベート</i>値（オブジェクトの使用中にそのクライアントインスタンスでのみ利用でき、閉じるときにオブジェクトと共に保存されない値）を作成するには、<codeph>data</codeph> 以外の名前のプロパティを作成して、その値を保存します。次に例を示します。</p>
     
	 <codeblock platform="actionscript">
     var my_so:SharedObject = SharedObject.getLocal("superfoo");
     my_so.favoriteColor = "blue";
     my_so.favoriteNightClub = "The Bluenote Tavern";
     my_so.favoriteSong = "My World is Blue";
     
     for (var prop in my_so) {
       trace(prop+": "+my_so[prop]);
     }
     </codeblock>
     
	 <codeblock platform="javascript">
	 var my_so = air.SharedObject.getLocal("superfoo");
	 my_so.favoriteColor = "blue";
	 my_so.favoriteNightClub = "The Bluenote Tavern";
	 my_so.favoriteSong = "My World is Blue";
	 
	 for (var prop in my_so) {
	   trace(prop+": "+my_so[prop]);
	 }
	 </codeblock>
     
     <p>共有オブジェクトには次のデータが含まれます。</p>
     <codeblock>
     favoriteSong: My World is Blue
     favoriteNightClub: The Bluenote Tavern
     favoriteColor: blue
     data: [object Object]
     </codeblock>
     
     <p>
     サーバーで使用されるリモート共有オブジェクトの場合、共有オブジェクトに接続しているすべてのクライアントが <codeph>data</codeph> プロパティのすべての属性を利用可能で、そのオブジェクトが永続化されている場合、すべての属性が保存されます。あるクライアントが属性の値を変更すると、すべてのクライアントに新しい値が表示されます。
     </p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/getLocal()"><linktext>getLocal()</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:defaultObjectEncoding:get"><apiName>defaultObjectEncoding</apiName><shortdesc>
     SWF ファイルで作成されたすべてのローカル共有オブジェクトのデフォルトのオブジェクトエンコード（AMF バージョン）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     SWF ファイルで作成されたすべてのローカル共有オブジェクトのデフォルトのオブジェクトエンコード（AMF バージョン）です。ローカル共有オブジェクトがディスクに書き込まれるとき、<codeph>SharedObject.defaultObjectEncoding</codeph> プロパティは、使用する必要のある Action Message Format バージョンを示します。ActionScript 3.0 フォーマット（AMF3）または ActionScript 1.0 または 2.0 フォーマット（AMF0）です。
     
     <p>ローカル共有オブジェクトとリモート共有オブジェクトのエンコードの違いを含む、オブジェクトエンコードの詳細については、<codeph>objectEncoding</codeph> プロパティの説明を参照してください。</p>
     
     <p><codeph>SharedObject.defaultObjectEncoding</codeph> のデフォルト値は、ActionScript 3.0 フォーマット AMF3 を使用するように設定されています。ActionScript 2.0 または 1.0 SWF ファイルで読み込めるローカル共有オブジェクトの書き込みが必要な場合は、ローカル共有オブジェクトを作成する前に、スクリプトの先頭部分で <codeph>SharedObject.defaultObjectEncoding</codeph> を設定して、ActionScript 1.0 または ActionScript 2.0 フォーマット <codeph>flash.net.ObjectEncoding.AMF0</codeph> を使用するようにします。それ以降に作成されるすべてのローカル共有オブジェクトで、AMF0 エンコーディングが使用され、古いコンテンツとやり取りできるようになります。ローカル共有オブジェクトを作成した後は、既存のローカル共有オブジェクトの <codeph>objectEncoding</codeph> 値を <codeph>SharedObject.defaultObjectEncoding</codeph> を設定して変更することはできません。</p>
     
     <p>SWF ファイルで作成したすべての共有オブジェクトに対してではなく、オブジェクトごとにオブジェクトエンコードを設定するには、ローカル共有オブジェクトの <codeph>objectEncoding</codeph> プロパティを設定します。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/objectEncoding"><linktext>objectEncoding プロパティ</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     この共有オブジェクトのオブジェクトエンコード（AMF バージョン）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>リモート共有オブジェクトの <codeph>objectEncoding</codeph> プロパティの値を設定しようとしました。このプロパティは、関連付けられた NetConnection インスタンスにより値が決定されるため、リモート共有オブジェクトでは読み取り専用になります。
     
     </apiDesc><apiItemName>ReferenceError</apiItemName><apiOperationClassifier>ReferenceError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     この共有オブジェクトのオブジェクトエンコード（AMF バージョン）です。ローカル共有オブジェクトがディスクに書き込まれるとき、<codeph>objectEncoding</codeph> プロパティは、使用する必要のある Action Message Format バージョンを示します。ActionScript 3.0 フォーマット（AMF3）または ActionScript 1.0 または 2.0 フォーマット（AMF0）です。 
     
     <p>オブジェクトエンコードは、共有オブジェクトがローカルかリモートかによって、処理方法が異なります。</p>
     <ul>
     <li><b>ローカル共有オブジェクト</b>。ローカル共有オブジェクトの <codeph>objectEncoding</codeph> プロパティの値を取得または設定できます。<codeph>objectEncoding</codeph> の値は、このローカル共有オブジェクトの<i>書き込み</i> に使用されるフォーマットに影響します。このローカル共有オブジェクトを ActionScript 2.0 または 1.0 SWF ファイルで読み込めなければならない場合は、<codeph>objectEncoding</codeph> を <codeph>ObjectEncoding.AMF0</codeph> に設定します。オブジェクトエンコードが AMF3 を書き込むように設定されていても、Flash Player で AMF0 ローカル共有オブジェクトを読み込むことができます。つまり、このプロパティのデフォルト値（<codeph>ObjectEncoding.AMF3</codeph>）を使用すれば、ActionScript 2.0 または 1.0 SWF ファイルで作成した共有オブジェクトも引き続き SWF ファイルで読み込むことができます。
     </li>
     
     <li><b>リモート共有オブジェクト</b>。サーバーに接続されているときは、リモート共有オブジェクトは、関連付けられた NetConnection インスタンス（リモート共有オブジェクトへの接続に使用されるインスタンス）の <codeph>objectEncoding</codeph> 設定を継承します。サーバーに接続されていないときは、リモート共有オブジェクトは、関連付けされた NetConnection インスタンスから <codeph>defaultObjectEncoding</codeph> 設定を継承します。リモート共有オブジェクトの <codeph>objectEncoding</codeph> プロパティの値は NetConnection インスタンスにより決定されるため、このプロパティはリモート共有オブジェクトでは読み取り専用になります。
     </li>
     </ul>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/defaultObjectEncoding"><linktext>defaultObjectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:SharedObject:size:get"><apiName>size</apiName><shortdesc>
     共有オブジェクトの現在のサイズ（バイト数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>SharedObject, SharedObject.getSize, getSize
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     共有オブジェクトの現在のサイズ（バイト数）です。
     
     <p>すべてのデータプロパティを順に確認することによって、共有オブジェクトのサイズが計算されます。オブジェクトが持つデータプロパティが多いほど、サイズの計算に時間がかかります。オブジェクトのサイズを調べる処理は非常に時間がかかる場合があるので、特に必要がない限り、このメソッドの使用は避けてください。</p>
     
     </apiDesc><example conref="examples\SharedObject.size.1.as"> 次のコードは、ID <codeph>"thehobbit"</codeph> を使用して SharedObject オブジェクトを作成します。<codeph>username</codeph> というプロパティが、SharedObject オブジェクトのデータプロパティに追加されます。次に <codeph>size</codeph> プロパティがトレースされ、示されている値が返されます。
<codeblock>

import flash.net.SharedObject;

// if these get copied or not
var mySo:SharedObject = SharedObject.getLocal("thehobbit");
mySo.data.username = "bilbobaggins";
trace(mySo.size); // 55
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.net:SharedObject:fps:set"><apiName>fps</apiName><shortdesc>
     共有オブジェクトに対するクライアントの変更がサーバーに送信される回数（1 秒あたり）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>server-specific: The info is relevant for Flash Media Server, but not Flex.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     共有オブジェクトに対するクライアントの変更がサーバーに送信される回数（1 秒あたり）を指定します。 
     
     <p>クライアントとサーバー間のトラフィック量を制限する場合に、このメソッドを使用します。例えば、クライアントとサーバー間の接続が比較的遅い場合は、<codeph>fps</codeph> を小さめの値に設定するとよいでしょう。逆に、クライアントが、タイミングが重要なマルチユーザーアプリケーションに接続している場合は、<codeph>fps</codeph> をやや大きめの値に設定できます。</p>
     
     <p><codeph>fps</codeph> を設定すると、<codeph>sync</codeph> イベントがトリガーされ、サーバーに対するすべての変更が更新されるようになります。サーバーを手動のみで更新する場合は、<codeph>fps</codeph> を 0 に設定します。</p>
     
     <p><codeph>sync</codeph> イベントが送出されるまで、サーバーに変更は送信されません。つまり、サーバーからの応答時間が遅い場合、更新がサーバーに送られる頻度は、このプロパティに指定した値よりも少なくなる可能性があります。 </p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:URLLoaderDataFormat"><apiName>URLLoaderDataFormat</apiName><shortdesc>
 URLLoaderDataFormat クラスは、ダウンロードされるデータの受信方法を指定する値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 URLLoaderDataFormat クラスは、ダウンロードされるデータの受信方法を指定する値を提供します。
 
 </apiDesc><example conref="examples\URLLoaderDataFormatExample.as"> 次の例では、URLLoaderDataFormatExample クラスを使用して、実行時にロードされるファイルのデータフォーマットとステータス情報を表示します。ここでは以下の手順を実行します。
 <ol>
  <li>クラスコンストラクターが <codeph>loader</codeph> という URLLoader インスタンスと、ロードされるファイルの場所と名前である <codeph>request</codeph> という URLRequest インスタンスを作成します。</li>
  <li><codeph>loader</codeph> オブジェクトが <codeph>configureListeners()</codeph> メソッドに渡されます。このメソッドは、サポートされる各 URLLoader イベントのリスナーを追加します。
  <ul>
      <li><codeph>completeHandler()</codeph>：<codeph>complete</codeph> イベントをリッスンします。このイベントは "TextFile.txt" が正常にロードされた後に送出されます。</li>
      <li><codeph>openHandler()</codeph>：<codeph>open</codeph> イベントをリッスンします。このイベントは "TextFile.txt" の（Flash Player への）ダウンロードの開始時に送出されます。</li>
      <li><codeph>progressHandler()</codeph>：<codeph>progress</codeph> イベントをリッスンします。このイベントはダウンロード処理を実行中にデータを受信したときに送出されます。</li>
      <li><codeph>securityErrorHandler()</codeph>：<codeph>securityError</codeph> イベントをリッスンします。このイベントは、ローカルでの再生に関するセキュリティを誤って設定してテキストファイルにアクセスした場合に送出されます。</li>  
      <li><codeph>httpStatusHandler()</codeph>：<codeph>httpStatusHandler</codeph> イベントをリッスンします。この場合は "TextFile.txt" がローカル側にあるので、このイベントは送出されません。</li>
      <li><codeph>ioErrorHandler()</codeph>：<codeph>ioError</codeph> イベントをリッスンします。このイベントは、例えばファイルが存在しないなど、ファイルに関して深刻な問題がある場合のみ発生します。</li>  
  </ul></li>
  <li>次に <codeph>request</codeph> オブジェクトが <codeph>loader.load()</codeph> メソッドに渡されます。このメソッドは、<codeph>DisplayObject</codeph> オブジェクトを使用してテキストファイルをメモリにロードします。</li>
 </ol>
 <p> <b>注意：</b>
 <ul>
  <li>「ローカルでの再生に関するセキュリティ」を「ローカルファイルにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。
  </li>
  <li>この例では、"TextFile.txt" という名前のファイルが SWF ファイルと同じディレクトリに配置されている必要があります。この例を参照し、バイナリまたは URL エンコードデータファイルを識別する場合は、正しいデータ形式でファイルを提供し、"TextFile.txt" を新しいファイルの名前と場所に変更する必要があります。</li>
  </ul>
 </p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.*;

    public class URLLoaderDataFormatExample extends Sprite {
        private var source:String = "TextFile.txt";
        private var dataFormat:String = URLLoaderDataFormat.TEXT;
        
        public function URLLoaderDataFormatExample () {
            var loader:URLLoader = new URLLoader();
            loader.dataFormat = dataFormat;
            configureListeners(loader);
            var request:URLRequest = new URLRequest(source);
            try {
                loader.load(request);
            } catch (error:Error) {
                trace("Error loading requested document: " + source);
            }
        }

        private function configureListeners(dispatcher:URLLoader):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            switch(loader.dataFormat) {
                case URLLoaderDataFormat.TEXT :
                    trace("completeHandler (text): " + loader.data);
                    break;
                case URLLoaderDataFormat.BINARY :
                    trace("completeHandler (binary): " + loader.data);
                    break;
                case URLLoaderDataFormat.VARIABLES :
                    trace("completeHandler (variables): " + loader.data);
                    break;
            }
        }

        private function httpStatusHandler(event:Event):void {
            trace("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.net:URLLoaderDataFormat:BINARY"><apiName>BINARY</apiName><shortdesc>
	 ダウンロードされるデータを生のバイナリデータとして受信することを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>binary</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ダウンロードされるデータを生のバイナリデータとして受信することを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoaderDataFormat:TEXT"><apiName>TEXT</apiName><shortdesc>
	 ダウンロードされるデータをテキストとして受信することを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>text</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ダウンロードされるデータをテキストとして受信することを指定します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:URLLoaderDataFormat:VARIABLES"><apiName>VARIABLES</apiName><shortdesc>
	 ダウンロードされるデータを URL エンコード形式の変数として受信することを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>variables</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ダウンロードされるデータを URL エンコード形式の変数として受信することを指定します。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:NetStreamPlayTransitions"><apiName>NetStreamPlayTransitions</apiName><shortdesc>
 
 NetStreamPlayTransitions クラスでは、NetStreamPlayOptions.transition プロパティで使用できる有効なストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 
 NetStreamPlayTransitions クラスでは、NetStreamPlayOptions.transition プロパティで使用できる有効なストリングを指定します。これらの文字列は、使用される移行モードに応じて、新しいストリームへのトランジションやストリームの再生で用いられる動作を制御します。
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStreamPlayOptions"><linktext>NetStreamPlayOptions</linktext></link><link href="flash.net.xml#NetStream/play()"><linktext>NetStream.play()</linktext></link><link href="flash.net.xml#NetStream/play2()"><linktext>NetStream.play2()</linktext></link></related-links><apiValue id="flash.net:NetStreamPlayTransitions:APPEND"><apiName>APPEND</apiName><shortdesc>
	 
	 ストリームを再生リストに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>append</apiData><apiType value=""/></apiValueDef><apiDesc>
	 
	 ストリームを再生リストに追加します。このモードは、<codeph>NetStream.play()</codeph> メソッド（<codeph>reset</codeph> フラグを <codeph>false</codeph> に設定）と同じ機能です。
	 
	 <p>このモードでは、Flash Media Server は <codeph>NetStreamPlayOptions.streamName</codeph> で指定されたストリームを再生リストの最後に置き、<codeph>NetStreamPlayOptions.oldStreamName</codeph> パラメーターは無視します。</p> 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:RESET"><apiName>RESET</apiName><shortdesc>
	 
	 それまでの再生呼び出しをクリアし、指定されたストリームを直ちに再生します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reset</apiData><apiType value=""/></apiValueDef><apiDesc>
	 
	 それまでの再生呼び出しをクリアし、指定されたストリームを直ちに再生します。このモードは、<codeph>NetStream.play()</codeph> メソッド（<codeph>reset</codeph> フラグを <codeph>true</codeph> に設定（<codeph>NetStream.play()</codeph> のデフォルト動作））と同じ機能です。
	 
	 <p>このモードでは、再生中のストリームはフラッシュされ、<codeph>NetStreamPlayOptions.streamName</codeph> で指定されたストリームの再生が開始されます。<codeph>NetStreamPlayOptions.oldStreamName</codeph> パラメーターは無視されます。</p> 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:STOP"><apiName>STOP</apiName><shortdesc>
	 
	 再生リストにあるストリームの再生を停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stop</apiData><apiType value=""/></apiValueDef><apiDesc>
	 
	 再生リストにあるストリームの再生を停止します。このモードは <codeph>NetStream.play(false)</codeph> 呼び出しと同じ機能です。再生リストを停止し、リセットします。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:SWAP"><apiName>SWAP</apiName><shortdesc>
	 あるコンテンツのストリームを異なるコンテンツのストリームに置き換え、再生リストの他の部分はそのまま保持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>swap</apiData><apiType value=""/></apiValueDef><apiDesc>
	 あるコンテンツのストリームを異なるコンテンツのストリームに置き換え、再生リストの他の部分はそのまま保持します。
	 
	 <p><codeph>SWITCH</codeph> のように、このモードは <codeph>NetStreamPlayOptions.oldStreamName</codeph> で指定されたストリームを <codeph>NetStreamPlayOptions.streamName</codeph> で指定されたストリームに置き換えます。再生リストの他の部分はそのままです。このモードでは、Flash Media Server にはストリームのコンテンツに関する想定はなく、異なるコンテンツのように処理します。I<codeph>oldStreamName</codeph> が未送信の場合、サーバーはストリームの境界で切り換えを行い、最初から <codeph>streamName</codeph> 用のデータを送信します。サーバーが既に <codeph>oldStreamName</codeph> 用のデータを送信し始めている場合、<codeph>streamName</codeph> には切り換えず、<codeph>NetStream.Play.Failed</codeph> イベントを送出します。</p>
	 
	 <p>このモードを使用するのは、切り換えるストリームが互いに無関係でコンテンツや長さが異なる場合です。 1 つの例としては、ユーザーのトラッキングや過去のコマーシャル視聴率に基づいて、あるコマーシャルを別のコマーシャルに入れ替える場合があります。</p>
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetStreamPlayTransitions:SWITCH"><apiName>SWITCH</apiName><shortdesc>
	 あるストリームの再生から別のストリームの再生に切り替えます。通常、同じコンテンツのストリームに対して行われます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>switch</apiData><apiType value=""/></apiValueDef><apiDesc>
	 あるストリームの再生から別のストリームの再生に切り替えます。通常、同じコンテンツのストリームに対して行われます。切り替えるストリームを <codeph>NetStreamPlayOptions.oldStreamName</codeph> と <codeph>NetStreamPlayOptions.streamName</codeph> で指定します。 
	 
	 <p>このモードは、同じコンテンツでビットレートまたは解像度が異なるストリームに切り替えるときに使用します。例えば、アプリケーションがストリームを再生リストに置くか、特定のビットレートで単一のストリームを再生しているときにこのモードを使用すると、利用できる帯域幅または CPU 能力がストリームが必要とするより高いか低いかを判断します。すると、アプリケーションはビットレートの高いまたは低いストリームに更新することができます。</p>
	 
	 <p>このモードで、Flash Media Server は <codeph>oldStreamName</codeph> と <codeph>streamName</codeph> ストリーム間の関係について、ある仮定をします。Flash Media Server は、ストリームのコンテンツとキーフレーム間隔は同一だが、解像度またはビットレートが異なると想定します。</p>
	 
	 <p>再生リストがキューに置かれ、<codeph>oldStreamName</codeph> が再生リスト内または現在再生中のストリームである場合、<codeph>oldStreamName</codeph> は <codeph>streamName</codeph> で置き換えられます。</p>
	 
	 <p><codeph>oldStreamName</codeph> が null か未定義、または再生リストにない場合、サーバーは次の論理ポイントで <codeph>streamName</codeph> に切り替え、確実にスムースに切り換えられるようにします。</p>
	 
	 <p>あるストリームから、コンテンツの異なる別のストリームに切り換えるには、代わりに <codeph>RESET</codeph> モードを使用します。</p>
	 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.net:NetConnection"><apiName>NetConnection</apiName><shortdesc>
 NetConnection クラスは、Flash Player または AIR アプリケーションと Flash Media Server アプリケーションの間、または Flash Player または AIR アプリケーションと Flash Remoting を実行しているアプリケーションサーバーの間に双方向の接続を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetConnection, Video, Responder
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 NetConnection クラスは、<ph platform="actionscript">Flash Player または AIR</ph> <ph platform="javascript">AIR</ph> アプリケーションと Flash Media Server アプリケーションの間、または<ph platform="actionscript"> Flash Player または AIR</ph> <ph platform="javascript">AIR</ph> アプリケーションと Flash Remoting を実行しているアプリケーションサーバーの間に双方向の接続を作成します。NetConnection オブジェクトは、クライアントとサーバーの間のパイプに似ています。NetStream オブジェクトで、パイプを通してストリームを送信します。 
 <p>特定の演算の成否に関するサーバーからの戻り値を処理するには、Responder オブジェクトを作成して <codeph>NetConnection.call()</codeph> のパラメーターとして渡します。</p>  
 <p>
 NetConnection クラスを使用すると、Flash Media Server がなくてもローカルファイルシステムまたは Web サーバーからビデオファイルや MP3 ファイルを再生できます。
 </p>
 
 <p>
 サポートされているコーデックおよびファイル形式の詳細については、<xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external">http://www.adobe.com/go/hardware_scaling_jp</xref> および <xref href="http://www.adobe.com/support/documentation" scope="external">Flash Media Server のマニュアル</xref>を参照してください。
 </p>
 
 <p>NetConnection クラスを使用するときは、次のセキュリティモデルを考慮してください。</p>
 
 <ul>
 <li>呼び出し元ファイルがネットワークサンドボックスにあり、ロードするファイルがローカルにある場合、オーディオまたはビデオファイルのロードおよび再生はできません。</li>
 
 	<li>呼び出し元ファイルがローカルにあり、リモートファイルのロードおよび再生を試行する場合、デフォルトでは、オーディオまたはビデオファイルのロードおよび再生はできません。 これを行うには、ユーザーが明示的な許可を与える必要があります。</li>
 </ul>
 
 <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
 
 <p>詳しくは、次のトピックを参照してください。</p>
 
 <ul>
 
 <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li> 
 </ul>
 
 
 <p platform="actionscript"><b>注意：</b>このクラスは、ActionScript 2.0 ではダイナミッククラスでしたが、sealed クラスになりました。このクラスのコールバックメソッドを記述するには、クラスを拡張してサブクラスでコールバックメソッドを定義する方法と、<codeph>client</codeph> プロパティを使用してオブジェクトを参照し、そのオブジェクトでコールバックメソッドを定義する方法があります。</p>
 
 </apiDesc><example conref="examples\NetConnectionExample.as"> 次の例では、Video オブジェクトを NetConnection クラスおよび NetStream クラスと共に使用して、FLV ファイルをロードして再生します。この例を実行するには、<codeph>videoURL</codeph> に渡される変数と、ファイル名および場所が一致する FLV ファイルが必要です。この場合は、SWF ファイルと同じディレクトリにある Video.flv という名前の FLV ファイルです。
 <p>この例では、Video オブジェクトと NetStream オブジェクトを作成し、<codeph>Video.attachNetStream()</codeph> メソッドと <codeph>NetStream.play()</codeph> メソッドを呼び出すコードがハンドラー関数に配置されます。ハンドラーは、NetConnection オブジェクトとの接続が成功した場合にのみ呼び出されます。つまり、<codeph>netStatus</codeph> イベントが返す <codeph>info</codeph> オブジェクトの <codeph>code</codeph> プロパティが成功を示しているときです。接続に成功するまで待ってから、<codeph>NetStream.play()</codeph> を呼び出すことをお勧めします。 </p>
 <codeblock>

package {
    import flash.display.Sprite;
    import flash.events.NetStatusEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;
    import flash.events.Event;

    public class NetConnectionExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetConnectionExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Stream not found: " + videoURL);
                    break;
            }
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.client = new CustomClient();
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }
    }
}

class CustomClient {
    public function onMetaData(info:Object):void {
        trace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);
    }
    public function onCuePoint(info:Object):void {
        trace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection/client"><linktext>client</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream</linktext></link><link href="flash.net.xml#NetConnection/connect()"><linktext>connect()</linktext></link><link href="flash.net.xml#Responder"><linktext>flash.net.Responder</linktext></link></related-links><adobeApiEvent id="flash.net:NetConnection_flash.events.NetStatusEvent.NET_STATUS_netStatus"><apiName>netStatus</apiName><shortdesc>
 NetConnection オブジェクトが、そのステータスまたはエラーの状況をレポートするときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.NetStatusEvent.NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events.NetStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 NetConnection オブジェクトが、そのステータスまたはエラーの状況をレポートするときに送出されます。<codeph>netStatus</codeph> イベントには <codeph>info</codeph> プロパティが含まれます。このプロパティは、接続試行が成功したかどうかなど、イベントに関する特定の情報を含む情報オブジェクトです。 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 NetConnection.call() の呼び出しによって呼び出し元のセキュリティサンドボックスの外部にあるサーバーに接続しようとすると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>NetConnection.call()</codeph> の呼び出しによって呼び出し元のセキュリティサンドボックスの外部にあるサーバーに接続しようとすると送出されます。
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.net.xml#NetConnection/call()"><linktext>NetConnection.call()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 入出力エラーが発生してネットワーク処理が失敗したときに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.net:NetConnection_flash.events.AsyncErrorEvent.ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><shortdesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.AsyncErrorEvent.ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events.AsyncErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 非同期形式で、つまりネイティブ非同期コードから例外がスローされると送出されます。 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.net:NetConnection:NetConnection"><apiName>NetConnection</apiName><shortdesc>
     NetConnection オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>See the example for <code>connect()</code>.
     
     </oldexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     NetConnection オブジェクトを作成します。<codeph>connect()</codeph> オブジェクトを呼び出して接続を作成します。
     
	 <p>アプリケーションが Flash Player 9 以前にリリースされたサーバーと通信する必要がある場合、NetConnection オブジェクトの <codeph>objectEncoding</codeph> プロパティの設定作業が必要になることがあります。</p>
     
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#NetConnection/connect()"><linktext>flash.net.NetConnection.connect()</linktext></link><link href="flash.net.xml#NetConnection/objectEncoding"><linktext>objectEncoding</linktext></link></related-links></apiConstructor><apiOperation id="flash.net:NetConnection:addHeader"><apiName>addHeader</apiName><shortdesc>
     コンテキストヘッダーを AMF（Action Message Format）パケット構造に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>IMD: This method can be used in the client Flash Player for Flash Remoting
     and Flex apps. It is also a server side method used by Flash Media Server apps.
     
     
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ヘッダーとヘッダーに関連付けられている ActionScript オブジェクトデータを指定します。
     
     </apiDesc></apiParam><apiParam><apiItemName>mustUnderstand</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><codeph>true</codeph> 値は、サーバーがこのヘッダーに対応しており、次のヘッダーまたはメッセージを処理する前に、サーバーでヘッダーを処理する必要があることを示します。
     </apiDesc></apiParam><apiParam><apiItemName>param</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>任意の ActionScript オブジェクトです。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     コンテキストヘッダーを AMF（Action Message Format）パケット構造に追加します。このヘッダーは、将来のすべての AMF パケットと共に送信されます。同じ名前を使用して <codeph>NetConnection.addHeader()</codeph> を呼び出すと、既存のヘッダーが新しいヘッダーに置き換えられます。新しいヘッダーは、NetConnection オブジェクトのある間存在し続けます。ヘッダーの名前を使用して <codeph>NetConnection.addHeader()</codeph> を呼び出し、未定義のオブジェクトを削除して、ヘッダーを削除できます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.net:NetConnection:call"><apiName>call</apiName><shortdesc>
     Flash Media Server 上または Flash Remoting を実行しているアプリケーションサーバー上のコマンドまたはメソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc><codeph>[objectPath/]method</codeph> という形式で指定されたメソッドです。例えば <codeph>someObject/doSomething</codeph> コマンドは、<codeph>clientObject.someObject.doSomething()</codeph> メソッドを、省略可能なすべての <codeph>... arguments</codeph> パラメーターと共に呼び出すようにリモートサーバーに対して指定します。オブジェクトのパスが見つからない場合は、リモートサーバーで <codeph>clientObject.doSomething()</codeph> が呼び出されます。
     <p>
     Flash Media Server では、<codeph>command</codeph> は、アプリケーションのサーバーサイドスクリプトに定義されている関数の名前です。サーバーサイドスクリプトがアプリケーションディレクトリのルートレベルに配置されている場合、<codeph>command</codeph> の前にオブジェクトパスを付ける必要はありません。
     </p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiDesc>サーバーからの戻り値を処理するために使用される、省略可能なオブジェクトです。Responder オブジェクトには、返される結果を処理するための 2 つのメソッド <codeph>result</codeph> および <codeph>status</codeph> が定義されています。結果としてエラーが返された場合は <codeph>status</codeph> が呼び出され、それ以外の場合は <codeph>result</codeph> が呼び出されます。NetConnection オブジェクトが接続状態に関連したエラーに対処するものであるのに対して、Responder オブジェクトは個々の操作に関連したエラーを処理することができます。
     
     </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>省略可能なパラメーターです。別の ActionScript オブジェクトへの参照を含む、ActionScript の任意の型を取ることができます。メソッドがリモートアプリケーションサーバーで実行されると、これらのパラメーターは <codeph>command</codeph> パラメーターで指定されたメソッドに渡されます。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Flash Media Server 上または Flash Remoting を実行しているアプリケーションサーバー上のコマンドまたはメソッドを呼び出します。<codeph>NetConnection.call()</codeph> を呼び出す前に、<codeph>NetConnection.connect()</codeph> を呼び出してサーバーに接続する必要があります。このメソッドに渡すには、サーバーサイド関数を作成する必要があります。 
     
      <p>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#Responder"><linktext>flash.net.Responder</linktext></link></related-links><adobeApiEvent id="flash.net:NetConnection:call_securityError"><apiName>securityError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>呼び出し元のセキュリティサンドボックスの外部にあるサーバーとの通信を試行する呼び出しです。サーバーでポリシーファイルを使用することにより、この問題を回避できます。
     </apiDesc></adobeApiEventDetail><shortdesc>呼び出し元のセキュリティサンドボックスの外部にあるサーバーとの通信を試行する呼び出しです。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.net:NetConnection:close"><apiName>close</apiName><shortdesc>
     ローカルで開始した接続またはサーバーへの接続を閉じ、NetConnection.Connect.Closed を code プロパティとして、netStatus イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>server-specific: Documented this method with server-specific info in span tags. The
     info is relevant for Flex servers, as well as Flash Media Server.
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ローカルで開始した接続またはサーバーへの接続を閉じ、<codeph>NetConnection.Connect.Closed</codeph> を <codeph>code</codeph> プロパティとして、<codeph>netStatus</codeph> イベントを送出します。
     
     <p>
     このメソッドは、接続上で実行されているすべての NetStream オブジェクトを切断します。キューに未送信のデータはすべて破棄されます。（接続を閉じずにローカルまたはサーバーストリームを終了するには、<codeph>NetStream.close()</codeph> を使用します。）接続を閉じて新しい接続を作成する場合は、新しい NetConnection オブジェクトを呼び出し、<codeph>connect()</codeph> メソッドをもう一度呼び出す必要があります。
     </p>
     
     <p><codeph>close()</codeph> メソッドは、この接続上で実行されているすべてのリモート共有オブジェクトも切断します。ただし、再接続するために共有オブジェクトを再作成する必要はありません。<codeph>SharedObject.connect()</codeph> を呼び出すだけで、共有オブジェクトへの接続を再確立できます。また、共有オブジェクトへの接続が再確立されると、<codeph>NetConnection.close()</codeph> を発行したときにキュー内にあった共有オブジェクトのデータがすべて送信されます。</p>
     
     <p>
     Flash Media Server では、クライアントからサーバーへの接続が不要になったときは <codeph>close()</codeph> を呼び出すことをお勧めします。<codeph>close()</codeph> を呼び出すと、使用されていない接続が最も短時間でクリーンアップされます。予備の手段として、アイドル状態の接続を自動的に閉じるようにサーバーを設定できます。詳細については、<i><xref href="http://www.adobe.com/support/documentation" scope="external">Flash Media Server の設定と管理のガイド</xref></i>を参照してください。 
     </p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream"><linktext>NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiOperation id="flash.net:NetConnection:connect"><apiName>connect</apiName><shortdesc>
     Flash Player または AIR アプリケーションと Flash Media Server アプリケーションの間に双方向の接続を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>NetConnection.connect, connect
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>command</codeph> パラメーターに渡された URI は適切にフォーマットされていません。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>接続に失敗しました。これは、<codeph>connect()</codeph> を <codeph>netStatus</codeph> イベントハンドラー内から呼び出すと起こることがあります。この呼び出しは許可されていません。
     
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Local-with-filesystem SWF ファイルはインターネットと通信できません。この問題は、SWF ファイルを local-with-networking または trusted として分類し直すことで回避できます。
	 
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>一般的な予約ポートに接続しようとしている場合。ブロックされている全ポートの一覧については、『ActionScript 3.0 のプログラミング』のセキュリティに関する章の「ネットワーク API の制限」を参照してください。<i/>
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ローカルコンピューターのビデオファイルに接続している場合は、このパラメーターに <codeph>null</codeph> を設定します。サーバーに接続している場合は、サーバー上のビデオファイルが格納されているアプリケーションの URI をこのパラメーターに設定します。次のシンタックスを使用します。角括弧内のアイテムは省略できます。
     
     <p><codeph>protocol:[//host][:port]/appname[/instanceName]</codeph></p>
     
     <p>Flash Media Server に接続するには、プロトコルとして <codeph>rtmp</codeph>、<codeph>rtmpe</codeph>、<codeph>rtmps</codeph>、<codeph>rtmpt</codeph>、<codeph>rtmpte</codeph> または <codeph>rtmfp</codeph> を使用します。接続に成功した場合、<codeph>netStatus</codeph> イベントが返されます。このときの <codeph>code</codeph> プロパティは <codeph>NetConnection.Connect.Success</codeph> です。すべてのイベントコードのリストの <codeph>NetStatusEvent.info</codeph> プロパティを参照してください。このイベントコードは <codeph>connect()</codeph> の呼び出しに応答して返されます。
     </p>
     
     <p>サーバーがインストールされているホストから ファイルが提供されている場合は、<codeph>host</codeph> パラメーターを省略できます。<codeph>instanceName</codeph> パラメーターを省略すると、<ph platform="actionscript">Flash Player または</ph> AIR はアプリケーションのデフォルトインスタンスに接続します。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc><codeph>command</codeph> で指定されたアプリケーションに渡される、任意の型のパラメーターです。このパラメーターはオプションです。Flash Media Server では、アプリケーションのサーバーサイドコードの <codeph>application.onConnect()</codeph> イベントハンドラーに追加の引数が渡されます。<codeph>onConnect()</codeph> に引数を定義して処理する必要があります。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     <ph platform="actionscript">Flash Player または AIR</ph> <ph platform="javascript">AIR</ph> アプリケーションと Flash Media Server アプリケーションの間に双方向の接続を作成します。NetConnection オブジェクトは、クライアントとサーバーの間のパイプに似ています。NetStream オブジェクトで、パイプを通してストリームを送信します。Flash Media Server がサポートしているコーデックおよびファイル形式の詳細については、<xref href="http://www.adobe.com/support/documentation" scope="external">Flash Media Server のマニュアル</xref>を参照してください。
     
     <p>
     Flash Media Server がない場合は、<codeph>NetConnection.connect()</codeph> を呼び出して、ローカルファイルシステムまたは Web サーバーからビデオファイルや MP3 ファイルを再生します。サポートされているコーデックおよびファイル形式の詳細については、<xref href="http://www.adobe.com/go/hardware_scaling_jp" scope="external">http://www.adobe.com/go/hardware_scaling_jp</xref> を参照してください。
     </p>
     
     <p>
     <ph platform="actionscript">Flash Player または AIR</ph> <ph platform="javascript">AIR</ph>アプリケーションと Flash Remoting サービスを実行しているアプリケーションサーバーの間に双方向の接続を作成します。NetServices クラスを使用して、NetConnection オブジェクトでアプリケーションサーバーの関数を呼び出し、アプリケーションサーバーから結果を取得します。詳細については、<xref href="http://www.adobe.com/support/documentation" scope="external">Flash Remoting のマニュアル</xref>を参照してください。 
     </p>
     
	 <p>このメソッドを使用するときは、次のセキュリティモデルを考慮してください。</p>
     
     <ul>
      <li>デフォルトでは、<ph platform="actionscript">Flash Player または</ph> AIR でのサンドボックス間のアクセスは拒否されます。URL ポリシーファイルを使用することで、Web サイトでリソースにアクセスできるようになります。 </li>
     
      <li>アプリケーションで、サーバー上のリソースへのアクセスを拒否できます。Flash Media Server アプリケーションに、アクセスを拒否するサーバーサイドコードを追加する必要があります。詳細については、Flash Media Server のマニュアルを参照してください。 </li> 
     
      <li>呼び出し元 ファイルがローカルファイルシステムのサンドボックスに配置されている場合は、<codeph>NetConnection.connect()</codeph> を使用できません。</li>
     
      <li>一般的な予約ポートには接続できません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/> </li>
     
     <li>SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページに <codeph>allowNetworking</codeph> パラメーター（<codeph>object</codeph> タグおよび <codeph>embed</codeph> タグのパラメーター）を設定します。</li>
     
     </ul>
     
	 <p>ただし、Adobe AIR では、<codeph>アプリケーション</codeph>セキュリティサンドボックス内のコンテンツ（AIR アプリケーションと共にインストールされたコンテンツ）は、これらのセキュリティ制限による制限を受けません。</p>
	 
     <p>詳しくは、次のトピックを参照してください。</p>
     
     <ul>
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     </ul>
     
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link></related-links></apiOperation><apiValue id="flash.net:NetConnection:client:get"><apiName>client</apiName><shortdesc>
     コールバックメソッドが呼び出されるオブジェクトを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Property documented; needs review.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier><apiException><apiDesc><codeph>client</codeph> プロパティは、null 以外のオブジェクトに設定する必要があります。 
     
     </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     コールバックメソッドが呼び出されるオブジェクトを示します。デフォルト値はこの NetConnection インスタンスです。<codeph>client</codeph> プロパティを別のオブジェクトに設定すると、コールバックメソッドはそのオブジェクトで呼び出されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:connected:get"><apiName>connected</apiName><shortdesc>
	 永続的な RTMP 接続を介して（true）、またはそれ以外の方法で（false）サーバーに接続されていることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 永続的な RTMP 接続を介して（<codeph>true</codeph>）、またはそれ以外の方法で（<codeph>false</codeph>）サーバーに接続されていることを示します。HTTP を介して接続された場合、このプロパティは <codeph>false</codeph> です。ただし、アプリケーションサーバー上の Flash Remoting サービスに接続した場合は <codeph>true</codeph> です。 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:connectedProxyType:get"><apiName>connectedProxyType</apiName><shortdesc>
     Flash Media Server で NetConnection.connect() を正常に呼び出すために使用する、"none"、"HTTP"、"HTTPS"、"CONNECT" のいずれかのプロキシタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>This property is used in Breeze 5.5.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>NetConnection インスタンスが接続されていないときに、このプロパティにアクセスしようとしました。 
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Flash Media Server で <codeph>NetConnection.connect()</codeph> を正常に呼び出すために使用する、<codeph>"none"</codeph>、<codeph>"HTTP"</codeph>、<codeph>"HTTPS"</codeph>、<codeph>"CONNECT"</codeph> のいずれかのプロキシタイプです。接続がトンネリングされていない場合、この値は <codeph>"none"</codeph> です。HTTP を使用して接続がトンネリングされている場合は <codeph>"HTTP"</codeph> です。HTTPS を使用して接続がトンネリングされている場合は <codeph>"HTTPS"</codeph> です。また、HTTP CONNECT メソッドを使用して接続がトンネリングされている場合は <codeph>"CONNECT"</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:defaultObjectEncoding:get"><apiName>defaultObjectEncoding</apiName><shortdesc>
	 NetConnection オブジェクトのデフォルトオブジェクトのエンコードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 NetConnection オブジェクトのデフォルトオブジェクトのエンコードです。バイナリデータにオブジェクトを書き込むかバイナリデータからオブジェクトを読み取るときに、データの直列化に使用される AMF（Action Message Format）のバージョンが <codeph>defaultObjectEncoding</codeph> プロパティに示されます。これらは、ActionScript 3.0 フォーマット（<codeph>ObjectEncoding.AMF3</codeph>）または ActionScript 1.0 および ActionScript 2.0 フォーマット（<codeph>ObjectEncoding.AMF0</codeph>）です。 
     
     <p>デフォルト値は <codeph>ObjectEncoding.AMF3</codeph> です。<codeph>NetConnection.defaultObjectEncoding</codeph> を変更しても、既存の NetConnection インスタンスには影響せず、それ以降に作成されたインスタンスにのみ影響します。</p>
     
     <p>オブジェクトのエンコードを（アプリケーション全体に対してではなく）個別に設定するには、NetConnection オブジェクトの <codeph>objectEncoding</codeph> プロパティを設定します。</p>
     
     <p>詳細については、<codeph>objectEncoding</codeph> プロパティの説明を参照してください。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/objectEncoding"><linktext>NetConnection.objectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:farID:get"><apiName>farID</apiName><shortdesc>
     この Flash Player インスタンスまたは Adobe AIR インスタンスが接続されている Flash Media Server インスタンスの識別子。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     この Flash Player インスタンスまたは Adobe AIR インスタンスが接続されている Flash Media Server インスタンスの識別子。このプロパティは、RTMFP 接続にのみ意味があります。このプロパティの値は、RTMFP 接続が確立された後でのみ利用できます。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/nearID"><linktext>nearID</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:farNonce:get"><apiName>farNonce</apiName><shortdesc>
     実際には Flash Media Server によって選択される値で、この接続に一意です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     実際には Flash Media Server によって選択される値で、この接続に一意です。この値は、サーバー側では <codeph>client.nearNonce</codeph> 値となります。この値は、RTMFP、RTMPE および RTMPTE 接続についてのみ定義されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:maxPeerConnections:get"><apiName>maxPeerConnections</apiName><shortdesc>
     Flash Player または Adobe AIR のこのインスタンスで可能となるピアーの受信接続と送信接続の総数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Flash Player または Adobe AIR のこのインスタンスで可能となるピアーの受信接続と送信接続の総数。デフォルト値は 8 です。 
     <p>この値は、発行者接続とサブスクライバ接続で違いはありません。ピアー接続が存在するときにこの値を減らす場合は、その新しい値は新しい受信接続だけに影響します。既存の接続は中断されません。</p>
     
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:nearID:get"><apiName>nearID</apiName><shortdesc>
     この NetConnection インスタンスに対する Flash Player インスタンスまたは Adobe AIR インスタンスの識別子。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     この NetConnection インスタンスに対する Flash Player インスタンスまたは Adobe AIR インスタンスの識別子。このプロパティは、RTMFP 接続にのみ意味があります。
     
     <p>すべての NetConnection インスタンスは一意の <codeph>nearID</codeph> プロパティを持ちます。Flash Player インスタンス、Adobe AIR インスタンスまたは NetConnection インスタンスで同じ識別子を持つものはありません。</p>
     
     <p>他の Flash Player インスタンスまたは Adobe AIR インスタンスは、このクライアントとの新しい NetStream 接続の <codeph>peerID</codeph> としてこの識別子を使用します。次に、この識別子は、このインスタンスに接続されているピアー NetStream の <codeph>farID</codeph> となります。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/farID"><linktext>farID</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:nearNonce:get"><apiName>nearNonce</apiName><shortdesc>
     実際にはこの Flash Player インスタンスまたは Adobe AIR インスタンスによって選択される値で、この接続に一意です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     実際にはこの Flash Player インスタンスまたは Adobe AIR インスタンスによって選択される値で、この接続に一意です。この値は、サーバー側では <codeph>client.farNonce</codeph> 値となります。この値は、RTMFP、RTMPE および RTMPTE 接続についてのみ定義されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     この NetConnection インスタンスのオブジェクトエンコードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>NetConnection インスタンスが接続されているときに、<codeph>objectEncoding</codeph> プロパティの値を設定しようとしました。
     
     </apiDesc><apiItemName>ReferenceError</apiItemName><apiOperationClassifier>ReferenceError</apiOperationClassifier></apiException><apiException><apiDesc>このプロパティに、<codeph>ObjectEncoding.AMF0</codeph> または <codeph>ObjectEncoding.AMF3</codeph> 以外の値が設定されました。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     この NetConnection インスタンスのオブジェクトエンコードです。
     
     <p>
     バイナリデータにオブジェクトを書き込むかバイナリデータからオブジェクトを読み取るときに、データの直列化に使用する必要のある AMF（Action Message Format）のバージョンが <codeph>defaultObjectEncoding</codeph> プロパティに示されます。これらは、ActionScript 3.0 フォーマット（<codeph>ObjectEncoding.AMF3</codeph>) または ActionScript 1.0 および ActionScript 2.0 フォーマット（<codeph>ObjectEncoding.AMF0</codeph>）です。<codeph>objectEncoding</codeph> プロパティを設定することにより、NetConnection インスタンスの AMF のバージョンを設定します。
     </p>
     
	 <p>アプリケーションが Flash Player 9 以前にリリースされたサーバーと通信する必要がある場合は、このプロパティを理解することが重要です。次の 3 つのシナリオが可能です。
     </p>
     
     <ul>
	 <li>AMF3 をサポートするサーバー（例えば、Flex Data Services 2 または Flash Media Server 3）に接続します。<codeph>defaultObjectEncoding</codeph> のデフォルト値は <codeph>ObjectEncoding.AMF3</codeph> です。この ファイルで作成された NetConnection インスタンスはすべて AMF3 直列化を使用するので、<codeph>objectEncoding</codeph> プロパティを設定する必要はありません。</li>
       
     <li>AMF3 をサポートしないサーバー（例えば、Flash Media Server 2）に接続します。このシナリオでは、静的な <codeph>NetConnection.defaultObjectEncoding</codeph> プロパティを <codeph>ObjectEncoding.AMF0</codeph> に設定します。この SWF ファイルに作成されるすべての NetConnection インスタンスでは、AMF0 直列化を使用します。<codeph>objectEncoding</codeph> プロパティを設定する必要はありません。 </li>
     
     <li>異なるエンコーディングバージョンを使用する複数のサーバーに接続する場合。<codeph>defaultObjectEncoding</codeph> を使用せずに、各接続の <codeph>objectEncoding</codeph> プロパティを使用して、接続ごとにオブジェクトエンコーディングを設定します。このプロパティを <codeph>ObjectEncoding.AMF0</codeph> に設定すると、AMF0 エンコーディングを使用するサーバー（Flash Media Server 2 など）に接続します。<codeph>ObjectEncoding.AMF3</codeph> に設定すると、AMF3 エンコーディングを使用するサーバー（Flex Data Services 2 など）に接続します。</li>
     </ul>
     
     <p>NetConnection インスタンスが接続されたら、その <codeph>objectEncoding</codeph> プロパティは読み取り専用になります。</p>
     
	 <p>サーバーへの接続に誤ったエンコーディングを使用した場合は、NetConnection オブジェクトにより <codeph>netStatus</codeph> イベントが送出されます。 <codeph>NetStatusEvent.info</codeph> プロパティには、<codeph>code</codeph> プロパティ値 <codeph>NetConnection.Connect.Failed</codeph> を持つ情報オブジェクトとオブジェクトエンコードが正しくないことを示す説明が含まれています。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/defaultObjectEncoding"><linktext>defaultObjectEncoding</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>flash.net.ObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:protocol:get"><apiName>protocol</apiName><shortdesc>
     接続の確立にプロトコルが使用されました。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>NetConnection インスタンスが接続されていないときに、このプロパティにアクセスしようとしました。 
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     接続の確立にプロトコルが使用されました。Flash Media Server を使用するときは、このプロパティが適切です。有効な値は次のとおりです。
     <ul>
     <li><codeph>"rtmp"</codeph>：リアルタイムメッセージングプロトコル（RTMP）</li>
     <li><codeph>"rtmpe"</codeph>：暗号化 RTMP</li>
     <li><codeph>"rtmpt"</codeph>：HTTP トンネリング RTMP</li>
     <li><codeph>"rtmpte"</codeph>：HTTP トンネリング暗号化 RTMP</li>
     <li><codeph>"rtmps"</codeph>：HTTPS ベースの RTMP</li>
     <li><codeph>"rtmfp"</codeph>：リアルタイムメディアフロープロトコル（RTMFP）</li>
     </ul>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:proxyType:get"><apiName>proxyType</apiName><shortdesc>
     サーバーへの初期接続に失敗した場合に実行する代替手段を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>This property is used in Breeze 5.5. In the Breeze Add-in, the default value is <code>"best"</code>; if this value
     is not changed, native SSL sockets are used by default, and a fallback
     to other methods is used if necessary. 
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     サーバーへの初期接続に失敗した場合に実行する代替手段を指定します。<codeph>proxyType</codeph> プロパティを設定してから <codeph>NetConnection.connect()</codeph> メソッドを呼び出す必要があります。
     
     <p>指定できる値は、<codeph>"none"</codeph>、<codeph>"HTTP"</codeph>、<codeph>"CONNECT"</codeph>、および <codeph>"best"</codeph> です。</p>
     
	 <p>このプロパティのデフォルト値は <codeph>"none"</codeph> です。この値を変更しない場合、アプリケーションは RTMPS に HTTPS トンネリングを使用します。このプロパティが <codeph>"best"</codeph> に設定されている場合、クライアントはネイティブ SSL を使用して接続を試みます。接続に失敗すると、別の接続方法が試みられます。プロパティが <codeph>"HTTP"</codeph> に設定されていて、直接接続に失敗した場合は、HTTP トンネリングが使用されます。プロパティが <codeph>"CONNECT"</codeph> に設定されており、直接接続に失敗した場合は、トンネリングの <codeph>CONNECT</codeph> メソッドが使用されます。これに失敗すると、接続は HTTP トンネリングにフォールバックされなくなります。</p>
     
     <p>このプロパティは RTMP、RTMPS、または RTMPTを使用している場合にのみ適用できます。<codeph>CONNECT</codeph> メソッドは、プロキシサーバー経由でネットワークに接続しているユーザーにのみ適用できます。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:unconnectedPeerStreams:get"><apiName>unconnectedPeerStreams</apiName><shortdesc>
     
     パブリッシュする NetStream オブジェクトに関連付けられていない、すべてのピアーサブスクライバ NetStream オブジェクトを保持するオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     
     パブリッシュする NetStream オブジェクトに関連付けられていない、すべてのピアーサブスクライバ NetStream オブジェクトを保持するオブジェクトです。パブリッシュする NetStream オブジェクトに関連付けられたサブスクライバ NetStream オブジェクトは、<codeph>NetStream.peerStreams</codeph> 配列にあります。
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/peerStreams"><linktext>NetStream.peerStreams</linktext></link></related-links></apiValue><apiValue id="flash.net:NetConnection:uri:get"><apiName>uri</apiName><shortdesc>
     NetConnection.connect() メソッドに渡された URI。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>server-specific: Documented this method with server-specific info in span tags. The
     info is relevant for Flex servers, as well as Flash Media Server.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>NetConnection.connect()</codeph> メソッドに渡された URI。<codeph>NetConnection.connect()</codeph> が呼び出されていない場合、または URI が渡されていない場合、このプロパティは <codeph>undefined</codeph> になります。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.net:NetConnection:usingTLS:get"><apiName>usingTLS</apiName><shortdesc>
     HTTPS ではなく、ネイティブ TLS を使用してセキュア接続が確立されたかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>NetConnection インスタンスが接続されていないときに、このプロパティにアクセスしようとしました。 
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     HTTPS ではなく、ネイティブ TLS を使用してセキュア接続が確立されたかどうかを示します。このプロパティは、NetConnection オブジェクトが接続されている場合にのみ有効です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>