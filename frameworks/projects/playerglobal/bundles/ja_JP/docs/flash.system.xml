<?xml version="1.0"?>
<apiPackage id="flash.system"><apiName>flash.system</apiName><apiDetail/><apiClassifier id="flash.system:Security"><apiName>Security</apiName><shortdesc>
 Security クラスによって、異なるドメインに属するコンテンツが互いにどのようにやり取りするかを指定できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, XMLNode object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Security クラスによって、異なるドメインに属するコンテンツが互いにどのようにやり取りするかを指定できます。
 
 </apiDesc><example conref="examples\SecurityExample.as"> 次の例では、Sprite オブジェクトの <codeph>click</codeph> イベントを使用して、Flash Player の [設定] の [ローカル記憶領域] パネルを表示する方法を示します。オレンジのボックスが <codeph>draw()</codeph> を使用してステージに追加されます。<codeph>draw()</codeph> では、<codeph>click</codeph> イベントリスナーに名前付き <codeph>clickHandler()</codeph> が追加されます。これは <codeph>click</codeph> イベントに応答し、[ローカル記憶領域] パネルを開くように Flash Player に指示します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.system:Security:allowDomain"><apiName>allowDomain</apiName><shortdesc>
     指定したドメインの SWF ファイルから、allowDomain() 呼び出しを含む SWF ファイルのオブジェクトと変数にアクセスできるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.allowDomain, allowDomain
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>AIR アプリケーションセキュリティサンドボックスのコードからこのメソッドを呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティサンドボックス外のコンテンツは、アプリケーションセキュリティサンドボックスのコンテンツをクロススクリプトできません。 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>アクセス元として許可するドメインを指定するストリングまたは URLRequest オブジェクト。特別なドメイン "~~" を指定して、すべてのドメインからのアクセスを許可できます。  
     
     <p product="flashonly">"~~" を指定することは、Flash オーサリングツールで [ローカルでの再生に関するセキュリティ] オプションの [ネットワークにのみアクセスする] を使用してパブリッシュされたローカル SWF ファイルから、ローカル以外の SWF ファイルへのアクセスを許可する唯一の方法です。</p>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>SWF ファイルおよび HTML ファイルが呼び出し元 SWF ファイルのオブジェクトおよび変数にアクセスすることを許可します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     <ph platform="actionscript">指定したドメインの SWF ファイルから、<codeph>allowDomain()</codeph> 呼び出しを含む SWF ファイルのオブジェクトと変数にアクセスできるようにします。</ph>
     
     <p platform="javascript">このメソッドは、(SWF コンテンツの) ActionScript 3.0 コードのクロススクリプトに適用されます。HTML ベースの AIR アプリケーションで実行される JavaScript コードには適用されません。</p>
     
     <p platform="actionscript"><i>メモ：</i>AIR アプリケーションサンドボックスのコードからこのメソッドを呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティドメイン外のコンテンツは、アプリケーションサンドボックスのコンテンツを直接クロススクリプトできません。ただし、アプリケーションサンドボックス外のコンテンツは、サンドボックスブリッジを使用してアプリケーションセキュリティサンドボックスのコンテンツと通信できます。 </p>
     
     <p platform="actionscript">2 つの SWF ファイルが同じドメインに所属している場合 (たとえば、http://mysite.com/swfA.swf および http://mysite.com/swfB.swf)、swfA.swf で swfB.swf 内の変数、オブジェクト、プロパティ、メソッドなどを調査、変更でき、swfB.swf でも swfA.swf に対して同様のことを実行できます。これは、クロスムービースクリプトまたはクロススクリプトと呼ばれます。<i/><i/></p>
     
     <p platform="actionscript">2 つの SWF ファイルが異なるドメインに所属している場合 (たとえば、http://siteA.com/swfA.swf および http://siteB.com/siteB.swf)、デフォルトでは、swfA.swf で swfB.swf をスクリプトすることも、swfB.swf で swfA.swf をスクリプトすることも許可されません。<codeph>Security.allowDomain()</codeph> を呼び出すことで、SWF ファイルによって他のドメインの SWF ファイルが付与されます。これを<i>クロスドメインスクリプト</i>と呼びます。<codeph>Security.allowDomain("siteA.com")</codeph> を呼び出すことで、siteB.swf によって siteA.swf に siteB.swf をスクリプトする許可が付与されます。</p>
     
     <p platform="actionscript">クロスドメインの場合は、関与する 2 つのドメインを明確にすることが重要です。説明のため、ここでは、クロススクリプトを実行する側を<i>アクセス元</i> (通常、アクセスする SWF) と呼び、他を<i>アクセス先</i> (通常、アクセスされる SWF ファイル) と呼びます。siteA.swf が siteB.swf をスクリプトする場合、siteA.swf がアクセス元で、siteB.swf がアクセス先となります。</p>
     
     <p platform="actionscript"><adobeimage alt="クロスドメイン図" href="../../images/crossScript_load.jpg"/></p>
     
     <p platform="actionscript"><codeph>allowDomain()</codeph> を使用して確立されるクロスドメイン許可は、非対称です。前の例では、siteA.swf は siteB.swf をスクリプトできますが、siteB.swf は siteA.swf をスクリプトできません。siteA.swf で、siteA.swf をスクリプトする許可を siteB.com の SWF ファイルに付与するための <codeph>allowDomain()</codeph> を呼び出していないためです。対称的な許可を設定するには、両方の SWF ファイルで <codeph>allowDomain()</codeph> を呼び出すようにする必要があります。</p>
     
     <p platform="actionscript">Flash Player では、SWF ファイルを他の SWF ファイルによるクロスドメインスクリプトから保護するだけでなく、HTML ファイル によるクロスドメインスクリプトからも保護します。HTML から SWF へのスクリプトは、<codeph>SetVariable</codeph> などの古いブラウザーの関数を使用するか、<codeph>ExternalInterface.addCallback()</codeph> で確立したコールバックを使用することで実行できます。HTML から SWF へのスクリプトがドメインを横切る場合、アクセス先 SWF ファイルは、アクセス元が SWF ファイルの場合と同様に、<codeph>allowDomain()</codeph> を呼び出す必要があります。それ以外の場合、操作は失敗します。</p>
     
     <p platform="actionscript"><codeph>allowDomain()</codeph> にパラメーターとして IP アドレスを指定しても、指定された IP アドレスに存在するすべてのアクセス元からのアクセスが許可されるわけではありません。許可されるのは、その IP アドレスにマッピングされるドメイン名ではなく、指定された IP アドレスが URL に含まれるアクセス元からのアクセスだけです。</p> 
     
     <p platform="actionscript"><b>バージョン固有の相違点</b></p>
     <p platform="actionscript">Flash Player のクロスドメインセキュリティ規則は、バージョンを追うごとに発展してきました。次の表は、相違点をまとめたものです。</p>
     
     <adobetable class="innertable" platform="actionscript">
     
     
     
     
     
     <tgroup cols="5"><thead><row><entry>クロススクリプトに関係する最新の SWF のバージョン</entry><entry><codeph>allowDomain()</codeph> の必要性</entry><entry><codeph>allowInsecureDomain()</codeph> の必要性</entry><entry><codeph>allowDomain()</codeph> または <codeph>allowInsecureDomain()</codeph> を呼び出す必要のある SWF ファイル</entry><entry><codeph>allowDomain()</codeph> または <codeph>allowInsecureDomain()</codeph> に指定できる項目</entry></row></thead><tbody><row>
       <entry align="center">5 以前</entry>
       <entry>不可</entry>
       <entry align="center">不可</entry>
       <entry align="center">N/A</entry>
       <entry align="center">N/A</entry>
     </row><row>
       <entry align="center">6</entry>
       <entry>はい (スーパードメインが一致しない場合) </entry>
       <entry align="center">不可</entry>
       <entry>アクセス先 SWF ファイルまたはアクセス先 SWF ファイルと同じスーパードメインにある任意の SWF ファイル</entry>
       <entry><ul>
         <li>テキストベースのドメイン (mysite.com) </li>
         <li>IP アドレス (192.168.1.1) </li>
       </ul></entry>
     </row><row>
       <entry align="center">7</entry>
       <entry>はい (ドメインが完全に一致しない場合) </entry>
       <entry>はい (HTTP から HTTPS へのアクセスを実行する場合 (ドメインが完全に一致する場合でも) ) </entry>
       <entry>アクセス先 SWF ファイルまたはアクセス先 SWF ファイルとまったく同じドメインにある任意の SWF ファイル</entry>
       <entry><ul>
         <li>テキストベースのドメイン (mysite.com) </li>
         <li>IP アドレス (192.168.1.1) </li>
       </ul></entry>
     </row><row>
       <entry align="center">8 以降</entry>
       <entry>はい (ドメインが完全に一致しない場合) </entry>
       <entry>はい (HTTP から HTTPS へのアクセスを実行する場合 (ドメインが完全に一致する場合でも) ) </entry>
       <entry>アクセス先 SWF ファイル</entry>
       <entry><ul>
         <li>テキストベースのドメイン (mysite.com) </li>
         <li>IP アドレス (192.168.1.1) </li>
         <li>ワイルドカード (~~) </li>
       </ul></entry>
     </row></tbody></tgroup></adobetable>
      
     <p platform="actionscript">Flash Player の動作を制御するバージョンは、Flash Player 自身のバージョンでなく、<i>SWF バージョン</i> (SWF ファイルのパブリッシュバージョン) です。例えば、Flash Player 8 でバージョン 7 用にパブリッシュされた SWF ファイルを再生する場合、バージョン 7 と一貫した動作が適用されます。これによって、アップグレードしても、展開された SWF ファイル内の <codeph>Security.allowDomain()</codeph> の動作は変更されなくなります。</p>
     
     <p platform="actionscript">前の表のバージョン列は、クロススクリプト操作に関係する最新の SWF のバージョンを示しています。Flash Player の動作は、アクセス元 SWF ファイルまたはアクセス先 SWF ファイルのバージョンのいずれか新しい方のバージョンによって決まります。</p>
     
     <p platform="actionscript">次の段落では、<codeph>Security.allowDomain()</codeph> に関係する Flash Player のセキュリティ機能の変更について詳細に説明します。</p>
     
     <p platform="actionscript"><b>バージョン 5</b> : クロスドメインスクリプトの制限はありません。</p>
     
     <p platform="actionscript"><b>バージョン 6</b> : クロスドメインスクリプトのセキュリティが導入されました。デフォルトでは、クロスドメインスクリプトは禁止されています。<codeph>Security.allowDomain()</codeph> で許可できます。2 つのファイルが同じドメインに属しているかどうかを判別するため、各ファイルのスーパードメインが使用されます。このスーパードメインは、ファイルの URL の完全なホスト名から最初のセグメントを除き、最低 2 セグメントにまでしたものです。たとえば、www.mysite.com のスーパードメインは、mysite.com となります。www.mysite.com の SWF ファイルと store.mysite.com の SWF ファイルは、<codeph>Security.allowDomain()</codeph> を呼び出さずに、お互いをスクリプトします。</p>
     
     <p platform="actionscript"><b>バージョン 7</b> : スーパードメイン一致が、完全なドメイン一致に変更されました。2 つのファイルでお互いにスクリプトの実行が許可されるのは、それらの URL のホスト名が同じ場合だけです。それ以外の場合は、<codeph>Security.allowDomain()</codeph> を呼び出す必要があります。デフォルトでは、HTTPS 以外の URL からロードしたファイルは、まったく同じドメインからファイルをロードしたとしても、HTTPS の URL からロードしたファイルをスクリプトできません。この制限は HTTPS ファイルの保護に役立ちます。HTTPS 以外のファイルは、ダウンロード中に変更されやすく、HTTPS 以外のファイルが悪意を持って変更されると、このような不正操作を受けにくい HTTPS ファイルを破損させる可能性があります。アクセス先の HTTPS SWF ファイルが自発的にこの制限を無効にできるように、<codeph>Security.allowInsecureDomain()</codeph> を導入しましたが、<codeph>Security.allowInsecureDomain()</codeph> を使用しないことをお勧めします。</p>
     
     <p platform="actionscript"><b>バージョン 8</b> : 2 つの主要な変更点は次のとおりです。</p>
     
     <ul platform="actionscript">
       <li><codeph>Security.allowDomain()</codeph> を呼び出した場合、アクセス先 SWF ファイルが <codeph>Security.allowDomain()</codeph> を呼び出した SWF ファイルであるときにのみ、クロススクリプト操作が許可されるようになりました。つまり、<codeph>Security.allowDomain()</codeph> を呼び出した SWF ファイルのみが、自身へのアクセスを許可できるようになりました。前のバージョンでは、<codeph>Security.allowDomain()</codeph> を呼び出した場合に、アクセス先 SWF ファイルが <codeph>Security.allowDomain()</codeph> を呼び出した SWF ファイルと同じドメインにある SWF ファイルであれば、クロススクリプト操作が許可されていました。前のバージョンでは、<codeph>Security.allowDomain()</codeph> を呼び出すと、呼び出し元 SWF ファイルのドメイン全体が開きました。</li>
     
       <li><codeph>Security.allowDomain("~~")</codeph> および <codeph>Security.allowInsecureDomain("~~")</codeph> では、ワイルドカード値のサポートが追加されました。ワイルドカード (~~) 値を使用すると、アクセス元ファイルがどこからロードされたかを問わず、任意のファイルでクロススクリプト操作を許可できます。ワイルドカードは、グローバル許可と考えてください。ワイルドカード許可は、ローカルファイルセキュリティ規則の下で特定の操作を有効にする場合に必要となります。具体的には、ローカル SWF ファイルで、その SWF ファイルにインターネット上の SWF ファイルをスクリプトするネットワークアクセス許可がある場合、アクセス先のインターネット SWF ファイルは、ローカル SWF ファイルの出所が不明であることを反映して、<codeph>Security.allowDomain("~~")</codeph> を呼び出す必要があります。インターネット SWF ファイルが HTTPS URL からロードされる場合は、インターネット SWF ファイルでは、代わりに <codeph>Security.allowInsecureDomain("~~")</codeph> を呼び出す必要があります。</li>
     </ul>
       
     <p platform="actionscript">場合によっては、他のドメインから子 SWF ファイルをロードし、その子 SWF ファイルで親 SWF ファイルをスクリプトしたいが、子 SWF ファイルの最終的なドメインがわからないという状況になることがあります。例えば、ロードバランシングリダイレクトやサードパーティー製サーバーを使用する場合などです。</p>
     
     <p platform="actionscript">この状況では、<codeph>Loader.load()</codeph> に渡す URLRequest オブジェクトの <codeph>url</codeph> プロパティを使用できます。たとえば、子 SWF ファイルを 親 SWF にロードする場合、親 SWF の Loader オブジェクトの <codeph>contentLoaderInfo</codeph> プロパティに次のようにアクセスできます。 </p>
     <codeblock platform="actionscript">Security.allowDomain(loader.contentLoaderInfo.url)</codeblock>
     
     <p platform="actionscript"><codeph>url</codeph> プロパティの正しい値を取得するために、子 SWF ファイルのロードが開始されるまで待つようにしてください。子 SWF のロードがいつ開始されたかを確認するには、<codeph>progress</codeph> イベントを使用します。</p>
     
     <p platform="actionscript">この反対の状況が発生する場合もあります。つまり、親 SWF ファイルで子 SWF ファイルをスクリプトしたいが、親 SWF ファイルのドメインがわからない場合です。この状況では、SWF のルートオブジェクトである表示オブジェクトの <codeph>loaderInfo</codeph> プロパティにアクセスできます。子 SWF で、<codeph>Security.allowDomain( this.root.loaderInfo.loaderURL)</codeph> を呼び出します。親 SWF ファイルがロードされるまで待つ必要はありません。親 SWF ファイルは子 SWF ファイルがロードされた時点で既にロードされています。</p>
     
     <p platform="actionscript">Flash Player 8 以降用にパブリッシュする場合、<codeph>Security.allowDomain("~~")</codeph> を呼び出すことによってこのような状況を処理することもできます。ただし、これは危険な近道になりかねません。任意のドメインの任意の他の SWF ファイルから呼び出し元 SWF ファイルにアクセスできるようになるためです。通常、<codeph>_url</codeph> プロパティを使用した方が安全です。</p> 
     
     <p platform="actionscript">セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul platform="actionscript">
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
     
     
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.external.xml#ExternalInterface/addCallback()"><linktext>ExternalInterface.addCallback()</linktext></link><link href="flash.events.xml#Event/COMPLETE"><linktext>flash.events.Event.COMPLETE</linktext></link><link href="flash.display.xml#DisplayObject/parent"><linktext>flash.display.DisplayObject.parent</linktext></link><link href="flash.net.xml#URLRequest/url"><linktext>flash.net.URLRequest.url</linktext></link><link href="flash.system.xml#Security/allowInsecureDomain()"><linktext>allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
     指定したドメイン内の SWF ファイルおよび HTML ファイルが、HTTPS プロトコルでホストされた呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.allowInsecureDomain, allowInsecureDomain
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>このメソッドを AIR アプリケーションセキュリティサンドボックス内のコードから呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティサンドボックス外のコンテンツは、アプリケーションセキュリティサンドボックスのコンテンツをクロススクリプトできません。 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>アクセス元として許可するドメインを指定するストリングまたは URLRequest オブジェクト。特別なドメイン "~~" を指定して、すべてのドメインからのアクセスを許可できます。  
     
     <p class="flashonly">"~~" を指定することは、Flash オーサリングツールで [ローカルでの再生に関するセキュリティ] 設定 ([ファイル]-[パブリッシュ設定]-[Flash] タブ) の [ネットワークにのみアクセスする] オプションを使用してパブリッシュされたローカル SWF ファイルから、ローカル以外の SWF ファイルへのアクセスを許可する唯一の方法です。</p>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>HTTPS プロトコルでホストされた SWF ファイルおよび HTML ファイルが、呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     <ph platform="actionscript">指定したドメイン内の SWF ファイルおよび HTML ファイルが、HTTPS プロトコルでホストされた呼び出し元 SWF ファイルのオブジェクトと変数にアクセスすることを許可します。</ph>
     
     <p platform="javascript">このメソッドは、(SWF コンテンツの) ActionScript 3.0 コードのクロススクリプトに適用されます。HTML ベースの AIR アプリケーションで実行される JavaScript コードには適用されません。</p>
     
     
     <p platform="actionscript">Flash Player では柔軟性を最大化するために <codeph>allowInsecureDomain()</codeph> が用意されていますが、このメソッドは呼び出さないことをお勧めします。 HTTPS を介してファイルを提供すると、開発者やユーザーに対して複数の保護機能を提供できますが、<codeph>allowInsecureDomain</codeph> の呼び出しによって、これらの保護機能は脆弱になります。</p>
     
     <p platform="actionscript"><i>メモ：</i>AIR アプリケーションサンドボックスのコードからこのメソッドを呼び出すと、SecurityError 例外がスローされます。アプリケーションセキュリティドメイン外のコンテンツは、アプリケーションサンドボックスのコンテンツを直接クロススクリプトできません。ただし、アプリケーションサンドボックス外部のコンテンツは、サンドボックスブリッジを使用してアプリケーションセキュリティサンドボックス内のコンテンツと通信できます。</p>
     
     <p platform="actionscript">このメソッドは、<codeph>Security.allowDomain()</codeph> と同様に機能します。ただし、アクセス元が HTTPS 以外のプロトコルでロードされ、アクセス先が HTTPS でロードされる操作も許可します。Flash Player 7 以降では、HTTPS 以外のファイルで、HTTPS ファイルをスクリプトすることは許可されません。アクセス先 HTTPS SWF ファイルで <codeph>allowInsecureDomain()</codeph> メソッドを使用すると、この制限が解除されます。</p>
     
     <p platform="actionscript">HTTPS 以外のファイルから HTTPS ファイルへのスクリプトを有効にする場合にのみ、<codeph>allowInsecureDomain()</codeph> を使用してください。アクセス元の HTTPS 以外のファイルとアクセス先の HTTPS ファイルが、同じドメインに所属しているときのスクリプト (例えば、http://mysite.com にある SWF ファイルで https://mysite.com にある SWF ファイルをスクリプトする場合) を有効にするために使用します。HTTPS 以外のファイル間でのスクリプト、HTTPS ファイル間でのスクリプトまたは HTTPS ファイルから HTTPS 以外のファイルへのスクリプトを有効にするためには使用しないでください。このような状況では、代わりに <codeph>allowDomain()</codeph> を使用します。</p>
     
     次のシナリオでは、<codeph>allowInsecureDomain()</codeph> を十分な考慮なしで使用した場合にセキュリティが危険にさらされる状況を説明します。
     
     <p platform="actionscript">次の情報は、考えられるシナリオのうちの 1 つで、クロススクリプトの実際例を通じて <codeph>allowInsecureDomain()</codeph> を理解できるように設計されています。セキュリティアーキテクチャに関する問題をすべて取り上げているわけではなく、背景情報としてのみ使用する必要があります。Flash Player デベロッパーセンターには、Flash Player およびセキュリティに関する広範な情報があります。詳細については、Flash Player デベロッパーセンターのトピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref>を参照してください。</p>
     
     <p platform="actionscript">次の 2 つのコンポーネントから構成される e-コマースサイトを構築するシナリオについて考えてみます。1 つはカタログで、公開情報しか含まれていないため、保護する必要はありません。もう 1 つは、ショッピングカート/チェックアウトコンポーネントで、ユーザーの財務情報と個人情報を保護するためにセキュリティで保護する必要があります。ここで、カタログのサービスは http://mysite.com/catalog.swf から、カートのサービスは https://mysite.com/cart.swf から提供するものとします。このサイトの 1 つの要件として、第三者がセキュリティアーキテクチャの脆弱性を利用して、ユーザーのクレジットカード番号を盗むことができないことが挙げられます。</p>
     
     <p platform="actionscript">ここで、中間当事者である攻撃者がサーバーとユーザーの間に介入して、ユーザーがショッピングカートアプリケーションに入力したクレジットカード番号を盗もうとするとします。中間当事者としては、一部のユーザーが利用している悪質な ISP、ユーザーの職場にいる悪意がある管理者など、パブリックインターネット経由で送信されるネットワークパケットをユーザーとサーバー間で表示または変更できるものが考えられます。この状況は珍しいことではありません。</p> 
     
     <p platform="actionscript">cart.swf で HTTPS を使用してクレジットカード情報をサーバーに送信している場合、中間当事者の攻撃者は、HTTPS 送信が暗号化されているため、ネットワークパケットから直接この情報を盗むことができません。ただし、攻撃者は別の手法を使用できます。それは、いずれかの SWF ファイルの内容をユーザーへの配信時に変更し、その SWF ファイルを（ユーザー情報を攻撃者が所有する別のサーバーに送信する）改変バージョンと置き換えるという手法です。</p>
     
     <p platform="actionscript">HTTPS プロトコルは、何よりもまずこの "変更" 攻撃を防止します。暗号化されているだけでなく、HTTPS 送信に不正操作防止機能が付いているためです。中間当事者の攻撃者がパケットを変更すると、受信側はその変更を検出し、パケットを廃棄します。このため、この状況で攻撃者は cart.swf を変更できません。このファイルが HTTPS 経由で配信されるからです。</p>
     
     <p platform="actionscript">ところで、HTTP 経由で提供される catalog.swf 内のボタンで、HTTP 経由で提供される cart.swf 内のショッピングカートにアイテムを追加できるようにしたいとします。この機能を実現するために、cart.swf で <codeph>allowInsecureDomain()</codeph> を呼び出します。これで、catalog.swf は cart.swf をスクリプトできます。ただし、このアクションでは、予期しない結果が発生します。この場合、攻撃者は、catalog.swf をユーザーが最初にダウンロードする際、その内容を変更できます。catalog.swf は HTTP で配信され、不正操作防止機能が付いていないためです。攻撃者が変更した catalog.swf は、これで cart.swf をスクリプトできるようになります。cart.swf に <codeph>allowInsecureDomain()</codeph> への呼び出しが含まれているためです。変更された catalog.swf ファイルは、ActionScript を使用して、cart.swf 内の変数にアクセスできるため、ユーザーのクレジットカード情報やその他の機密データを読み取ることができます。その後、変更された catalog.swf は、このデータを攻撃者のサーバーに送信できます。</p>
     
     <p platform="actionscript">この実装は明らかに好ましいものではありませんが、サイト上の 2 つの SWF ファイル間でクロススクリプトを許可したい場合があります。次に、この仮想の e-コマースサイトを再設計して <codeph>allowInsecureDomain()</codeph> を除外する方法として、考えられる方法を 2 つ示します。</p>
     
     <ul platform="actionscript">
       <li>アプリケーション内のすべての SWF ファイルを HTTPS 経由で提供します。これは最も単純で信頼性が高いソリューションです。説明したシナリオでは、catalog.swf と cart.swf の両方を HTTPS 経由で提供します。catalog.swf などのファイルを HTTP から HTTPS に切り替える際、帯域幅の使用量とサーバーの CPU 負荷が少し上がり、ユーザー側では、アプリケーションのロード時間がやや長くなる可能性があります。実際のサーバーで実験して、これらの影響の重大度を判別する必要があります。通常は、それぞれ 10 ～ 20% 程度で、まったく影響がないこともあります。サーバーにある HTTPS 加速ハードウェアやソフトウェアを使用すると、通常は結果を改善できます。関係するすべての SWF ファイルを HTTPS 経由で提供する主要なメリットは、ブラウザーから内容が混在した警告を生成せずに、HTTPS URL をユーザーのブラウザー内の主要な URL として使用できることです。また、ブラウザーのカギのアイコンが表示されるため、セキュリティに関する共通の信頼できるインジケーターがユーザーに提供されます。</li>
     
      <li>HTTP から HTTPS へのスクリプトでなく、HTTPS から HTTP へのスクリプトを使用します。説明したシナリオでは、ユーザーのショッピングカートの内容を catalog.swf に保存し、cart.swf でチェックアウトプロセスのみ管理させることができます。チェックアウト時に、cart.swf で、catalog.swf 内の ActionScript 変数からカートの内容を取得できます。HTTP から HTTPS へのスクリプトに関する制限は非対称的なものです。HTTP 経由で提供される catalog.swf ファイルが HTTPS 経由で提供される cart.swf ファイルをスクリプトすることは安全上許可されませんが、HTTPS 経由で提供される cart.swf ファイルは HTTP 経由で提供される catalog.swf ファイルをスクリプトできます。このアプローチは、すべて HTTPS 経由のアプローチよりも微妙な点があります。不正操作を受けやすいため、HTTP 経由で提供される SWF ファイルは信頼しないように注意する必要があります。例えば、cart.swf でカートの内容を記述した ActionScript 変数を取得する際、cart.swf 内の ActionScript コードで、この変数の値が期待した形式になっていると信頼することはできません。カートの内容を確認して、cart.swf に好ましくないアクションを実行させる無効なデータが含まれていないことを調べる必要があります。また、中間当事者が catalog.swf を変更して、たとえば、ユーザーのカートにアイテムを入れることにより、有効だが不正確なデータを cart.swf に提供する危険性を甘受する必要があります。通常のチェックアウトプロセスでは、カートの内容と合計金額を表示してユーザーに最後の承認を求めることで、この危険性をいくぶん緩和していますが、それでも危険性は残っています。</li>
     </ul>
     
     <p platform="actionscript">Web ブラウザーでは、長年にわたり HTTPS ファイルと HTTPS 以外のファイルの分離を強制してきました。説明したシナリオでは、この制限が必要であることの 1 つの理由が明確に示されています。Flash Player では、絶対必要な場合、このセキュリティの制限を回避できますが、それを実行する前に結果を慎重に検討する必要があります。</p>
     
     <p platform="actionscript">セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul platform="actionscript">
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#Security/allowDomain()"><linktext>allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:loadPolicyFile"><apiName>loadPolicyFile</apiName><shortdesc>  
     url パラメーターで指定された場所でポリシーファイルを探します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>読み込むポリシーファイルの URL の場所。
     </apiDesc></apiParam><apiTipTexts><apiTipText>url パラメーターで指定された場所でポリシーファイルを探します。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>  
     <codeph>url</codeph> パラメーターで指定された場所でポリシーファイルを探します。Adobe AIR および Flash Player は、ポリシーファイルを使用して、アプリケーションが自身のサーバー以外のサーバーからデータをロードしてよいかどうか判断します。メソッド名は <codeph>loadPolicyFile()</codeph> ですが、ネットワー要求によってポリシーファイルが要求されるまではファイルは実際にはロードされません。
     
	 <p><codeph>Security.loadPolicyFile()</codeph> によって、Flash Player または AIR では任意の場所からポリシーファイルをロードできるようになります。次に例を示します。</p>
     
     <codeblock platform="actionscript">
     Security.loadPolicyFile("http://www.example.com/sub/dir/pf.xml");
     </codeblock>
     
     <codeblock platform="javascript">
     air.Security.loadPolicyFile("http://www.example.com/sub/dir/pf.xml");
     </codeblock>
     
     <p>これにより、Flash Player または AIR は指定された URL からポリシーファイルを取得しようとします。この場所に置かれているポリシーファイルによって得られる許可は、サーバーの仮想ディレクトリ階層で同レベル以下のコンテンツすべてに適用されます。 </p>
     
     <p platform="actionscript">例えば、前のコードに続くこれらの行によって例外はスローされません。</p>
     
     <codeblock platform="actionscript"> import flash.net.~~;
     var request:URLRequest = new URLRequest("http://www.example.com/sub/dir/vars.txt");
     var loader:URLLoader = new URLLoader();
     loader.load(request);
     
     var loader2:URLLoader = new URLLoader();
     var request2:URLRequest = new URLRequest("http://www.example.com/sub/dir/deep/vars2.txt");
     loader2.load(request2);
     </codeblock>
     
     <p platform="actionscript">ただし、次のコードではセキュリティ例外がスローされます。</p>
     
     <codeblock platform="actionscript"> import flash.net.~~;
     var request3:URLRequest = new URLRequest("http://www.example.com/elsewhere/vars3.txt");
     var loader3:URLLoader = new URLLoader();
     loader3.load(request3);
     </codeblock>
     
     <p><codeph>loadPolicyFile()</codeph> を使用して、任意の数のポリシーファイルをロードできます。ポリシーファイルを必要とする要求がある場合、Flash Player または AIR はポリシーファイルのダウンロードがすべて完了するまで必ず待機します。その間に要求が拒否されることはありません。<codeph>loadPolicyFile()</codeph> で指定されたポリシーファイルによって要求が許可されなかった場合は、最終的にデフォルトの場所が参照されます。</p>
     
     <p>マスターポリシーファイルのチェックを行うとき、Flash Player はサーバーの応答を 3 秒間待機します。 応答がない場合、Flash Player ではマスターポリシーファイルが存在しないと判断されます。しかし、<codeph>loadPolicyFile()</codeph> の呼び出しのデフォルトタイムアウト値はありません。Flash Player では、呼び出されているファイルが存在するものとして、そのファイルをロードするのに必要なだけ待機します。したがって、マスターポリシーファイルを確実にロードするには、<codeph>loadPolicyFile()</codeph> を使用し、明示的に呼び出します。</p>
     
      <p>よく予約されるポートから提供されるポリシーファイルは読み込めません。ブロックされているポートの一覧については、<ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref></ph>（『ActionScript 3.0 のプログラミング』）の「ネットワーク API の制限」を参照してください。<i/></p>
     
     <p>特定のポート番号で <codeph>xmlsocket</codeph> プロトコルを使用することで、直接 XMLSocket サーバーからポリシーファイルを取得することができます。次に例を示します。ソケット接続は、上記のよく予約されるポートに関する制限事項の対象外です。</p>
     
     <codeblock platform="actionscript">
     Security.loadPolicyFile("xmlsocket://foo.com:414");
     </codeblock>
     
     <codeblock platform="javascript">
     air.Security.loadPolicyFile("xmlsocket://foo.com:414");
     </codeblock>
     
     <p>このコードを使用すると、Flash Player または AIR は指定されたホストとポートからポリシーファイルを取得しようとします。指定されたポートを使用して接続が確立されると、Flash Player または AIR は <codeph>&lt;policy-file-request /></codeph> を送信します（これは、<codeph>null</codeph> バイトで終了します）。ポリシーファイルを終了するためにサーバーから null バイトを送信し、それ以降の接続を閉じる必要があります。サーバー側で接続を閉じなければ、最後の <codeph>null</codeph> バイトが受信されるとすぐに Flash Player 側または AIR 側で接続が閉じられます。</p>
     
     <p platform="actionscript">SWF ファイルがこのメソッドを使用しないようにするには、SWF コンテンツを含んでいる HTML ページの <codeph>object</codeph> タグおよび <codeph>embed</codeph> タグの <codeph>allowNetworking</codeph> パラメーターを設定します。</p>
     
     <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul>
     
     <li product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
       <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:Security:showSettings"><apiName>showSettings</apiName><shortdesc>
     Flash Player のセキュリティ設定パネルを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.showSettings(), showSettings()
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>panel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>どの [セキュリティ設定] パネルを表示するかを指定する SecurityPanel クラスの値です。このパラメーターを省略すると、<codeph>SecurityPanel.DEFAULT</codeph> が使用されます。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Flash Player の [セキュリティ設定] パネルを表示します。このメソッドは Adobe AIR のコンテンツに適用されません。AIR アプリケーションでこのメソッドを呼び出しても無効です。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#SecurityPanel"><linktext>SecurityPanel</linktext></link></related-links></apiOperation><apiValue id="flash.system:Security:APPLICATION"><apiName>APPLICATION</apiName><shortdesc>
	 このファイルは AIR アプリケーションで実行され、そのアプリケーションのパッケージ（AIR ファイル）と共にインストールされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>application</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 このファイルは AIR アプリケーションで実行され、そのアプリケーションのパッケージ (AIR ファイル) と共にインストールされます。このコンテンツは AIR アプリケーションリソースディレクトリ (アプリケーションコンテンツのインストール先) に含まれています。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_TRUSTED"><apiName>LOCAL_TRUSTED</apiName><shortdesc>
     このファイルはローカルファイルであり、信頼性があります。このファイルは Flash Player 設定マネージャーまたは FlashPlayerTrust 構成ファイルを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localTrusted</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このファイルはローカルファイルであり、信頼性があります。このファイルは Flash Player 設定マネージャーまたは FlashPlayerTrust 構成ファイルを使用します。このファイルは、ローカルのデータソースから読み取ることも、インターネットでやり取りすることもできます。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_FILE"><apiName>LOCAL_WITH_FILE</apiName><shortdesc>
     このファイルはローカルファイルであり、信頼性はなく、ネットワークを指定してパブリッシュされた SWF ファイルではありません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localWithFile</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このファイルはローカルファイルであり、信頼性はなく、ネットワークを指定してパブリッシュされた SWF ファイルではありません。Adobe AIR では、ローカルファイルはアプリケーションリソースディレクトリにはありません。これらのファイルはアプリケーションセキュリティサンドボックスに配置されます。<i/> ファイルは、ローカルのデータソースから読み取ることはできますが、インターネットでのやり取りはできません。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_NETWORK"><apiName>LOCAL_WITH_NETWORK</apiName><shortdesc>
	 このファイルはローカルファイルであり、信頼性はありませんが、ネットワークを指定してパブリッシュされた SWF ファイルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localWithNetwork</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 このファイルはローカルファイルであり、信頼性はありませんが、ネットワークを指定してパブリッシュされた SWF ファイルです。このファイルはインターネットとのやり取りはできますが、ローカルデータソースからの読み取りはできません。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:REMOTE"><apiName>REMOTE</apiName><shortdesc>
     このファイルはインターネット URL からのものであり、ドメインベースのサンドボックス規則に従って機能します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>remote</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     このファイルはインターネット URL からのものであり、ドメインベースのサンドボックス規則に従って機能します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:exactSettings:get"><apiName>exactSettings</apiName><shortdesc>
     特定の コンテンツ設定に使用するドメインを Flash Player または AIR がどのように選択するかを指定します。設定には、カメラとマイクの許可、記憶領域の割り当て、永続共有オブジェクトの記憶領域などがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.exactSettings, exactSettings
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Flash Player または AIR アプリケーションは、プレーヤー設定に関する決定で <codeph>exactSettings</codeph> の値を少なくとも一度使用しました。
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     特定の コンテンツ設定に使用するドメインを Flash Player または AIR がどのように選択するかを指定します。設定には、カメラとマイクの許可、記憶領域の割り当て、永続共有オブジェクトの記憶領域などがあります。Flash Player 6 で使用されていた設定と同じ設定を SWF ファイルで使用するには、<codeph>exactSettings</codeph> を <codeph>false</codeph> に設定します。
     
     <p platform="javascript">このプロパティは SWF コンテンツで使用し、AIR アプリケーションの JavaScript コードでは使用しません。</p>
     
     <p platform="actionscript">Flash Player 6 では、これらのプレーヤー設定に使用されていたドメインは、SWF ファイルのドメインの最後の部分に基づいていました。www.example.com のように SWF ファイルのドメインに 3 つ以上のセグメントが含まれている場合、ドメインの最初のセグメント ("www") は削除され、ドメインの残りの部分 example.com が使用されます。したがって、Flash Player 6 における www.example.com と store.example.com では、どちらも example.com がこれらの設定のドメインとして使用されます。同様に、www.example.co.uk と store.example.co.uk はどちらも example.co.uk をこれらの設定のドメインとして使用します。Flash Player 7 以降では、プレーヤー設定はデフォルトで SWF ファイルの正確なドメインに従って選択されます。たとえば、www.example.com の SWF ファイルは www.example.com のプレーヤー設定を使用し、store.example.com の SWF ファイルはそれとは別の store.example.com のプレーヤー設定を使用します。</p>
     
     <p platform="actionscript"><codeph>Security.exactSettings</codeph> が <codeph>true</codeph> に設定された場合、Flash Player はプレーヤー設定に対して正確なドメインを使用します。<codeph>false</codeph> に設定された場合、Flash Player は Flash Player 6 で使用されていたドメイン設定を使用します。<codeph>exactSettings</codeph> のデフォルト値は <codeph>true</codeph> です。<codeph>exactSettings</codeph> をデフォルト値から変更する場合は、Flash Player でプレーヤー設定を選択する必要があるイベントが発生する前にその変更を行う必要があります。例えば、カメラまたはマイクの使用や永続共有オブジェクトの取得などのイベントの前です。</p>
     
     <p platform="actionscript">バージョン 6 の SWF ファイルをパブリッシュし、そのファイルから永続共有オブジェクトを作成しているときに、バージョン 7 以降にその SWF ファイルを移植した後で SWF ファイルからその永続共有オブジェクトを取得するか、バージョン 7 以降の別の SWF ファイルからその永続共有オブジェクトを取得する必要がある場合は、<codeph>Security.exactSettings</codeph> を <codeph>false</codeph> に設定してから <codeph>SharedObject.getLocal()</codeph> を呼び出します。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Security:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
     呼び出し元のファイルが動作しているセキュリティサンドボックスのタイプを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     呼び出し元のファイルが動作しているセキュリティサンドボックスのタイプを示します。
     
     <p><codeph>Security.sandboxType</codeph> は、次のいずれかの値になります。</p>
     
     <ul>
     <li><codeph>remote</codeph> (<codeph>Security.REMOTE</codeph>) — この ファイルはインターネット URL からのものであり、ドメインベースのサンドボックス規則に従って機能します。</li>
     <li><codeph>localWithFile</codeph> (<codeph>Security.LOCAL_WITH_FILE</codeph>) - このファイルはローカルファイルであり、信頼性はなく、ネットワークを指定してパブリッシュされた SWF ファイルではありません。ファイルは、ローカルのデータソースから読み取ることはできますが、インターネットでのやり取りはできません。</li>
     <li><codeph>localWithNetwork</codeph> (<codeph>Security.LOCAL_WITH_NETWORK</codeph>) - この SWF ファイルはローカルファイルであり、信頼性はありませんが、ネットワークを指定してパブリッシュされています。この SWF ファイルはインターネットとのやり取りはできますが、ローカルデータソースからの読み取りはできません。</li>
     <li><codeph>localTrusted</codeph>（<codeph>Security.LOCAL_TRUSTED</codeph>）- この ファイルはローカルファイルであり、信頼性があります。このファイルは Flash Player 設定マネージャーまたは FlashPlayerTrust 構成ファイルを使用します。 このファイルは、ローカルのデータソースから読み取ることも、インターネットでやり取りすることもできます。</li>
     <li><codeph>application</codeph>（<codeph>Security.APPLICATION</codeph>）- このファイルは AIR アプリケーションで実行され、そのアプリケーションのパッケージ（AIR ファイル）と共にインストールされます。デフォルトでは、AIR アプリケーションサンドボックスのファイルは、任意のドメインの任意のファイルをクロススクリプトできます（ただし、AIR アプリケーションサンドボックス外のファイルでは、AIR ファイルをクロススクリプトできない場合があります）。デフォルトでは、AIR アプリケーションサンドボックスのファイルは、任意のドメインからコンテンツおよびデータを読み込むことができます。 </li>
     
     </ul>
     
     <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
     
     <ul>
     
     <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     <li product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
     
    <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
     
     </ul>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:LoaderContext"><apiName>LoaderContext</apiName><shortdesc>
 LoaderContext クラスは、Loader クラスを使用して、SWF ファイルなどのメディアをロードするオプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 LoaderContext クラスは、Loader クラスを使用して、SWF ファイルなどのメディアをロードするオプションを指定します。LoaderContext クラスは、Loader クラスの <codeph>load()</codeph> および <codeph>loadBytes()</codeph> メソッドで <codeph>context</codeph> パラメーターとして使用されます。
 
 <p><codeph>Loader.load()</codeph> メソッドで SWF ファイルをロードする場合、次の 2 つのことを決定します。ロードした SWF ファイルをどのセキュリティドメインに配置するか、およびそのセキュリティドメイン内のどのアプリケーションドメインに配置するかです。これらの選択の詳細については、<codeph>applicationDomain</codeph> および <codeph>securityDomain</codeph> プロパティを参照してください。</p>
 
 <p><codeph>Loader.loadBytes()</codeph> メソッドで SWF ファイルをロードする場合、<codeph>Loader.load()</codeph> の場合と同じアプリケーションドメイン選択がありますが、セキュリティドメインを指定する必要はありません。<codeph>Loader.loadBytes()</codeph> では、ロードされた SWF ファイルが常にロード元 SWF ファイルのセキュリティドメインに配置されるためです。</p>
 
 <p>SWF ファイルではなくイメージ (JPEG、GIF、または PNG) をロードする場合、SecurityDomain またはアプリケーションドメインを指定する必要はありません。これらの概念は SWF ファイルに対してのみ意味を持ちます。代わりに、次のことのみを決定します。ロードしたイメージのピクセルにプログラムによってアクセスする必要があるかどうかです。必要がある場合は、<codeph>checkPolicyFile</codeph> プロパティを参照してください。イメージのロード時に非ブロックを適用する場合は、LoaderContext クラスの代わりに JPEGLoaderContext クラスを使用します。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#JPEGLoaderContext"><linktext>flash.system.JPEGLoaderContext</linktext></link><link href="flash.system.xml#LoaderContext/applicationDomain"><linktext>flash.system.LoaderContext.applicationDomain</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile"><linktext>flash.system.LoaderContext.checkPolicyFile</linktext></link><link href="flash.system.xml#LoaderContext/securityDomain"><linktext>flash.system.LoaderContext.securityDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links><apiConstructor id="flash.system:LoaderContext:LoaderContext"><apiName>LoaderContext</apiName><shortdesc>
     指定された設定で、新しい LoaderContext オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>checkPolicyFile</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>オブジェクトをロードする前に、URL ポリシーファイルの存在を確認するかどうかを指定します。
     
     </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiOperationClassifier>flash.system:ApplicationDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Loader オブジェクトで使用する ApplicationDomain オブジェクトを指定します。
     
     </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>flash.system:SecurityDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Loader オブジェクトで使用する SecurityDomain オブジェクトを指定します。
     
	 <p><i/>メモ : AIR アプリケーションセキュリティサンドボックスのコンテンツでは、他のサンドボックスからその SecurityDomain にコンテンツをロードすることはできません。</p>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     指定された設定で、新しい LoaderContext オブジェクトを作成します。これらの設定について詳しくは、このクラスのプロパティの説明を参照してください。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:LoaderContext:allowLoadBytesCodeExecution"><apiName>allowLoadBytesCodeExecution</apiName><shortdesc>
	 コンテンツを SWF ファイルなどの実行可能コードと共にロードするために、Loader オブジェクトの loadBytes() メソッドを使用できるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 コンテンツを SWF ファイルなどの実行可能コードと共にロードするために、Loader オブジェクトの <codeph>loadBytes()</codeph> メソッドを使用できるかどうかを指定します。このプロパティを <codeph>false</codeph> (デフォルト) に設定すると、<codeph>loadBytes()</codeph> メソッドはイメージのロードなどの安全な操作に制限されます。
 	 
	 <p>アプリケーションサンドボックスの AIR コンテンツでは、デフォルト値は <codeph>false</codeph> です。アプリケーションコンテンツ以外では、デフォルト値は <codeph>true</codeph> です。</p>
	 
	 <p><b>メモ :</b> この API は、AIR の今後のリリースで置き換えられると思われます。その場合は、AIR の新しいバージョン用のアプリケーションを配布する前に、新しい API を使用するようにコードを調整し、再コンパイルする必要があります。</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:applicationDomain"><apiName>applicationDomain</apiName><shortdesc>
	 Loader.load() または Loader.loadBytes() メソッドで使用するアプリケーションドメインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Loader.load()</codeph> または <codeph>Loader.loadBytes()</codeph> メソッドで使用するアプリケーションドメインを指定します。ActionScript 1.0 や ActionScript 2.0 で記述されたイメージまたは SWF ファイルではなく、ActionScript 3.0 で記述された SWF ファイルをロードする場合にのみ、このプロパティを使用します。
	 
	 <p>すべてのセキュリティドメインは、複数のアプリケーションドメインに分割することもできます。アプリケーションドメインは ApplicationDomain オブジェクトで表されます。アプリケーションドメインの目的はセキュリティではありません。ActionScript コードの協調単位の管理が目的です。別のドメインから SWF ファイルをロードし、別のセキュリティドメインへの配置を許可する場合、ロードされた SWF ファイルが配置されるアプリケーションドメインの選択は制御できません。アプリケーションドメインの選択を指定した場合は、無視されます。ただし、独自のセキュリティドメインに SWF ファイルをロードする場合は、SWF ファイルが独自のドメインから取得されるか、または独自のセキュリティドメインに読み込まれるので、ロードされる SWF ファイルに対するアプリケーションドメインの選択を制御できます。</p>
	 
	 <p>独自のセキュリティドメインからのみ、<codeph>LoaderContext.applicationDomain</codeph> でアプリケーションドメインを渡すことができます。その他のセキュリティドメインからアプリケーションドメインを渡そうとすると、<codeph>SecurityError</codeph> 例外になります。</p>
	 
	 <p>使用する <codeph>ApplicationDomain</codeph> プロパティは、次の 4 種類から選択できます。</p>
	 
	 <ul>
	 <li><b>ローダーの ApplicationDomain の子。</b> デフォルト。この選択は、シンタックス <codeph>new ApplicationDomain(ApplicationDomain.currentDomain)</codeph> で明示的に表すことができます。この選択では、ロードされた SWF ファイルは親のクラスを直接使用できます。たとえば、<codeph>new MyClassDefinedInParent()</codeph> を記述します。ただし、親はこのシンタックスを使用できません。親が子のクラスを使用する場合、<codeph>ApplicationDomain.getDefinition()</codeph> を呼び出して取得する必要があります。この選択の利点は、親によって既に定義されているクラスと同じ名前のクラスを子が定義する場合にエラーが発生しないことです。子は、そのクラスの親の定義を継承します。子の競合する定義は、子または親が <codeph>ApplicationDomain.getDefinition()</codeph> メソッドを呼び出してその定義を取得しない限り使用されません。</li>
	 
	 <li><b>ローダー自体の ApplicationDomain。</b> このアプリケーションドメインは、<codeph>ApplicationDomain.currentDomain</codeph> を使用する場合に使用します。ロードが完了すると、親および子はいずれも互いのクラスの両方を直接使用できます。親が既に定義しているクラスと同じ名前のクラスを子が定義しようとすると、親クラスが使用され、子クラスは無視されます。</li>
	 
	 <li><b>システム ApplicationDomain の子。</b> このアプリケーションドメインは、<codeph>new ApplicationDomain(null)</codeph> を使用する場合に使用します。ローダーとローディーは完全に分離され、競合や影響を発生させずに同じ名前で別々のバージョンのクラスを定義できます。一方が他方のクラスを参照する唯一の方法は、<codeph>ApplicationDomain.getDefinition()</codeph> メソッドの呼び出しです。</li>
	 
	 <li><b>他の ApplicationDomain の子。</b>複雑な ApplicationDomain 階層がある場合があります。独自の SecurityDomain から任意の ApplicationDomain に SWF ファイルをロードできます。たとえば、<codeph>new ApplicationDomain(ApplicationDomain.currentDomain.parentDomain.parentDomain)</codeph> では、SWF ファイルは現在のドメインの親の親の新しい子にロードされます。</li>
	 </ul>
	 
	 <p>ロードの完了後、<codeph>ApplicationDomain.getDefinition()</codeph> を呼び出すために、ロードする側またはロードされる側のいずれかが独自の ApplicationDomain または他方の ApplicationDomain を見つける必要がある場合があります。いずれの側も、<codeph>ApplicationDomain.currentDomain</codeph> によって独自のアプリケーションドメインの参照を取得できます。ロード元 SWF ファイルは、<codeph>Loader.contentLoaderInfo.applicationDomain</codeph> によって、ロードされた SWF ファイルの ApplicationDomain の参照を取得できます。ロードされた SWF ファイルで、自身がどのようにロードされたかがわかる場合は、ロード元 SWF ファイルの ApplicationDomain オブジェクトを見つけることができます。たとえば、子がデフォルトの方法でロードされた場合、<codeph>ApplicationDomain.currentDomain.parentDomain</codeph> によって、子はロード元 SWF ファイルのアプリケーションドメインを見つけることができます。</p>
	 
	 <p>詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「クライアントのシステム環境」の章の「ApplicationDomain クラス」を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:checkPolicyFile"><apiName>checkPolicyFile</apiName><shortdesc>
	 オブジェクト自体の読み込みを開始する前に、アプリケーションで、読み込まれるオブジェクトのサーバーから URL ポリシーファイルをダウンロードしようとするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 オブジェクト自体の読み込みを開始する前に、アプリケーションで、読み込まれるオブジェクトのサーバーから URL ポリシーファイルをダウンロードしようとするかどうかを指定します。このフラグは、<codeph>Loader.load()</codeph> メソッドには適用できますが、<codeph>Loader.loadBytes()</codeph> メソッドには適用できません。
	 
	 <p>イメージ (JPEG、GIF、または PNG) を呼び出し元 SWF ファイル自体のドメイン外からロードし、そのイメージのコンテンツに ActionScript からアクセスする必要がある場合に、このフラグを <codeph>true</codeph> に設定します。イメージコンテンツへのアクセスの例には、ビットマップオブジェクトを取得するための <codeph>Loader.content</codeph> プロパティの参照や、ロードされたイメージのピクセルのコピーを取得するための <codeph>BitmapData.draw()</codeph> メソッドの呼び出しなどがあります。読み込み時に、指定された <codeph>checkPolicyFile</codeph> を持たずにこれらの操作のいずれかを試行した場合、<codeph>SecurityError</codeph> 例外を受け取る場合があります。必要なポリシーファイルがまだ読み込まれていないためです。</p>
	 
	 <p><codeph>Loader.load()</codeph> メソッドを呼び出す際に <codeph>LoaderContext.checkPolicyFile</codeph> を <codeph>true</codeph> に設定していると、関連する URL ポリシーファイルが正常にダウンロードされるか、そのようなポリシーファイルが存在しないことがわかるまで、アプリケーションは <codeph>URLRequest.url</codeph> で指定されたオブジェクトのダウンロードを開始しません。Flash Player または AIRでは、最初に既にダウンロードされているポリシーファイルが考慮され、次に <codeph>Security.loadPolicyFile()</codeph> メソッドの呼び出しで指定された保留されているポリシーファイルのダウンロードが試行されます。次に、<codeph>URLRequest.url</codeph> に対応するデフォルトの場所からのポリシーファイルのダウンロードが試行されます。これは、<codeph>URLRequest.url</codeph> と同じサーバーの <codeph>/crossdomain.xml</codeph> です。どのような場合でも、所定のポリシーファイルが、ポリシーファイルの場所に基づいて <codeph>URLRequest.url</codeph> に存在していること、およびそのポリシーファイルの <codeph>&lt;allow-access-from></codeph> タグによってアクセスが許可されていることが必要となります。</p>
	 
	 <p><codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定した場合、<codeph>Loader.load()</codeph> メソッドで指定された主要なダウンロードは、ポリシーファイルの処理が完了するまで行われません。 したがって、必要なポリシーファイルが存在している場合には、Loader オブジェクトの <codeph>contentLoaderInfo</codeph> プロパティから <codeph>ProgressEvent.PROGRESS</codeph> または <codeph>Event.COMPLETE</codeph> イベントを受け取るとすぐにポリシーファイルのダウンロードが完了し、ポリシーファイルが必要な操作を安全に開始できます。</p>
	 
	 <p><codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定し、関連するポリシーファイルが見つからない場合、<codeph>SecurityError</codeph> 例外をスローする操作を試行するまで、エラーは表示されません。ただし、LoaderInfo オブジェクトによって <codeph>ProgressEvent.PROGRESS</codeph> または <codeph>Event.COMPLETE</codeph> イベントが送出されると、<codeph>LoaderInfo.childAllowsParent</codeph> プロパティの値を確認することによって、関連するポリシーファイルが見つかったかどうかをテストできます。</p>
	 
	 <p>ロードするイメージへのピクセルレベルのアクセスが必要ない場合は、<codeph>checkPolicyFile</codeph> プロパティを <codeph>true</codeph> に設定しないようにする必要があります。この場合、ポリシーファイルの確認は時間の浪費になります。ダウンロードの開始が遅れ、ネットワーク帯域幅を不必要に消費する場合があるためです。</p>
	 
	 <p>また、<codeph>Loader.load()</codeph> メソッドを使用して SWF ファイルをダウンロードする場合、<codeph>checkPolicyFile</codeph> を <codeph>true</codeph> に設定しないでください。これは、SWF から SWF への権限はポリシーファイルではなく <codeph>Security.allowDomain()</codeph> メソッドによって制御され、SWF ファイルをロードする場合は <codeph>checkPolicyFile</codeph> は無効であるためです。この場合、ポリシーファイルの確認は時間の浪費になります。SWF ファイルのダウンロードが遅れ、ネットワーク帯域幅を不必要に消費する場合があるためです。ポリシーファイルのダウンロードは主要なダウンロードの前に行われるので、SWF ファイルとイメージのどちらが主要なダウンロードであるかを Flash Player または AIR で判別することはできません。</p>
	 
	 <p>サーバーサイド HTTP リダイレクトを使用する可能性がある URL からオブジェクトをダウンロードする場合は、<codeph>checkPolicyFile</codeph> に注意してください。ポリシーファイルは常に、<codeph>URLRequest.url</codeph> で指定された対応する初期 URL から取得されます。 最終的なオブジェクトが HTTP リダイレクトによって別の URL から取得される場合、最初にダウンロードされたポリシーファイルはオブジェクトの最終的な URL に適用できないことがあります。この URL はセキュリティ判定において重要です。このような場合、<codeph>ProgressEvent.PROGRESS</codeph> または <codeph>Event.COMPLETE</codeph> イベントを受け取った後で、<codeph>LoaderInfo.url</codeph> の値を調べることができます。これにより、オブジェクトの最終的な URL がわかります。次に、オブジェクトの最終的な URL に基づくポリシーファイル URL で <codeph>Security.loadPolicyFile()</codeph> メソッドを呼び出します。次に、<codeph>LoaderInfo.childAllowsParent</codeph> の値を、それが <codeph>true</codeph> になるまでポーリングします。</p>
	 
     	 <p>このプロパティを、アプリケーションサンドボックスで実行している AIR コンテンツに設定する必要はありません。AIR アプリケーションサンドボックスのコンテンツは、ロードされたイメージコンテンツをソースとして使用し、<codeph>BitmapData.draw()</codeph> メソッドを呼び出すことができます。 </p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#BitmapData/draw()"><linktext>flash.display.BitmapData.draw()</linktext></link><link href="flash.display.xml#Loader/content"><linktext>flash.display.Loader.content</linktext></link><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#LoaderInfo/childAllowsParent"><linktext>flash.display.LoaderInfo.childAllowsParent</linktext></link><link href="flash.display.xml#LoaderInfo/url"><linktext>flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()"><linktext>flash.system.Security.loadPolicyFile()</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:securityDomain"><apiName>securityDomain</apiName><shortdesc>
	 Loader.load() 操作に使用するセキュリティドメインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Loader.load()</codeph> 操作に使用するセキュリティドメインを指定します。このプロパティは、イメージではなく SWF ファイルをロードする場合にのみ使用します。
	 
 	 <p>セキュリティドメインの選択は、ロード元 SWF ファイルとは異なるドメイン (異なるサーバー) から取得される可能性がある SWF ファイルをロードする場合にのみ意味を持ちます。独自のドメインから SWF ファイルをロードする場合は、常に独自のセキュリティドメインに配置されます。ただし、SWF ファイルを別のドメインからロードする場合は、2 つのオプションがあります。ロードされる SWF ファイルを、ロード元 SWF ファイルとは異なる "通常の" セキュリティドメインに配置できます。これはデフォルトの設定です。もう 1 つのオプションでは、<codeph>myLoaderContext.securityDomain</codeph> と <codeph>SecurityDomain.currentDomain</codeph> が等しくなるように設定して、ロードされる SWF ファイルをロード元 SWF ファイルと同じセキュリティドメインに配置するように指定します。これは<i>読み込みロード</i>と呼ばれます。これは、セキュリティのために、ロードされる SWF ファイルを独自のサーバーにコピーしてそこからロードする場合と同じです。読み込みロードが成功するには、ロードされる SWF ファイルのサーバーに、ロード元 SWF ファイルのドメインを信頼するポリシーファイルが必要です。</p>
	 
	 <p><codeph>LoaderContext.securityDomain</codeph> で、独自のセキュリティドメインのみを渡すことができます。その他のセキュリティドメインを渡そうとすると、<codeph>SecurityError</codeph> 例外になります。</p>
	 
	 <p>AIR アプリケーションセキュリティサンドボックスのコンテンツでは、他のサンドボックスからその SecurityDomain にコンテンツをロードすることはできません。</p>
     
	 <p>詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「Flash Player セキュリティ」の章を参照してください。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:IMEConversionMode"><apiName>IMEConversionMode</apiName><shortdesc>
 このクラスには、IME.conversionMode プロパティで使用できる定数があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスには、<codeph>IME.conversionMode</codeph> プロパティで使用できる定数があります。<codeph>conversionMode</codeph> を <codeph>ALPHANUMERIC_FULL</codeph> または <codeph>JAPANESE_KATAKANA_FULL</codeph> に設定すると、プレーヤーで全角フォントが使用されます。<codeph>ALPHANUMERIC_HALF</codeph> または <codeph>JAPANESE_KATAKANA_HALF</codeph> を使用すると、半角フォントが使用されます。
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_FULL"><apiName>ALPHANUMERIC_FULL</apiName><shortdesc>
	 ストリング "ALPHANUMERIC_FULL"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ALPHANUMERIC_FULL</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"ALPHANUMERIC_FULL"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、すべての IME で使用します。シンタックス <codeph>IMEConversionMode.ALPHANUMERIC_FULL</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_HALF"><apiName>ALPHANUMERIC_HALF</apiName><shortdesc>
	 ストリング "ALPHANUMERIC_HALF"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ALPHANUMERIC_HALF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"ALPHANUMERIC_HALF"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、すべての IME で使用します。シンタックス <codeph>IMEConversionMode.ALPHANUMERIC_HALF</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:CHINESE"><apiName>CHINESE</apiName><shortdesc>
	 ストリング "CHINESE"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>CHINESE</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"CHINESE"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、簡体字中国語 IME と繁体字中国語 IME で使用します。シンタックス <codeph>IMEConversionMode.CHINESE</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_HIRAGANA"><apiName>JAPANESE_HIRAGANA</apiName><shortdesc>
	 ストリング "JAPANESE_HIRAGANA"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>JAPANESE_HIRAGANA</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"JAPANESE_HIRAGANA"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、日本語 IME で使用します。シンタックス <codeph>IMEConversionMode.JAPANESE_HIRAGANA</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_FULL"><apiName>JAPANESE_KATAKANA_FULL</apiName><shortdesc>
	 ストリング "JAPANESE_KATAKANA_FULL"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>JAPANESE_KATAKANA_FULL</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"JAPANESE_KATAKANA_FULL"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、日本語 IME で使用します。シンタックス <codeph>IMEConversionMode.JAPANESE_KATAKANA_FULL</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_HALF"><apiName>JAPANESE_KATAKANA_HALF</apiName><shortdesc>
	 ストリング "JAPANESE_KATAKANA_HALF"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>JAPANESE_KATAKANA_HALF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"JAPANESE_KATAKANA_HALF"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、日本語 IME で使用します。シンタックス <codeph>IMEConversionMode.JAPANESE_KATAKANA_HALF</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:KOREAN"><apiName>KOREAN</apiName><shortdesc>
	 ストリング "KOREAN"。IME.conversionMode プロパティで使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>KOREAN</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"KOREAN"</codeph>。<codeph>IME.conversionMode</codeph> プロパティで使用します。この定数は、韓国語 IME で使用します。シンタックス <codeph>IMEConversionMode.KOREAN</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:UNKNOWN"><apiName>UNKNOWN</apiName><shortdesc>
	 ストリング "UNKNOWN"。IME.conversionMode プロパティの呼び出しによって返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>UNKNOWN</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ストリング <codeph>"UNKNOWN"</codeph>。<codeph>IME.conversionMode</codeph> プロパティの呼び出しによって返されます。この値は設定できず、プレーヤーが現在アクティブな IME を識別できない場合にのみ返されます。シンタックス <codeph>IMEConversionMode.UNKNOWN</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:SecurityPanel"><apiName>SecurityPanel</apiName><shortdesc>
 SecurityPanel クラスは、どのセキュリティ設定パネルを表示するかを指定する値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SecurityPanel クラスは、どのセキュリティ設定パネルを表示するかを指定する値を提供します。
 
 <p>このクラスには、<codeph>Security.showSettings()</codeph> メソッドで使用する静的定数があります。SecurityPanel クラスの新しいインスタンスは作成できません。</p>
 
 </apiDesc><example conref="examples\SecurityExample.as"> 次の例では、Sprite オブジェクトの <codeph>click</codeph> イベントを使用して、Flash Player の [設定] の [ローカル記憶領域] パネルを表示する方法を示します。オレンジのボックスが <codeph>draw()</codeph> を使用してステージに追加されます。<codeph>draw()</codeph> では、<codeph>click</codeph> イベントリスナーに名前付き <codeph>clickHandler()</codeph> が追加されます。これは <codeph>click</codeph> イベントに応答し、[ローカル記憶領域] パネルを開くように Flash Player に指示します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.system:SecurityPanel:CAMERA"><apiName>CAMERA</apiName><shortdesc>
	 Security.showSettings() に渡されると、Flash Player の [設定] の [カメラ] パネルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.CAMERA, CAMERA
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>camera</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [カメラ] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	 Security.showSettings() に渡されると、ユーザーが最後に Flash Player の「設定」を閉じたときに開いていたパネルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.DEFAULT, DEFAULT
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、ユーザーが最後に Flash Player の「設定」を閉じたときに開いていたパネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DISPLAY"><apiName>DISPLAY</apiName><shortdesc>
	 Security.showSettings() に渡されると、Flash Player の [設定] の [Display] パネルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.DISPLAY, DISPLAY
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>display</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [Display] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:LOCAL_STORAGE"><apiName>LOCAL_STORAGE</apiName><shortdesc>
	 Security.showSettings() に渡されると、Flash Player の [設定] の [ローカル記憶領域] パネルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.LOCAL_STORAGE, LOCAL_STORAGE
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localStorage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [ローカル記憶領域] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:MICROPHONE"><apiName>MICROPHONE</apiName><shortdesc>
	 Security.showSettings() に渡されると、Flash Player の [設定] の [マイク] パネルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.MICROPHONE, MICROPHONE
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>microphone</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [マイク] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:PRIVACY"><apiName>PRIVACY</apiName><shortdesc>
	 Security.showSettings() に渡されると、Flash Player の [設定] の [プライバシー設定] パネルが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.PRIVACY, PRIVACY
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>privacy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、Flash Player の [設定] の [プライバシー設定] パネルが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:SETTINGS_MANAGER"><apiName>SETTINGS_MANAGER</apiName><shortdesc>
	 Security.showSettings() に渡されると、別のブラウザーウィンドウで設定マネージャーが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.SETTINGS_MANAGER, SETTINGS_MANAGER
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>settingsManager</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Security.showSettings()</codeph> に渡されると、別のブラウザーウィンドウで設定マネージャーが表示されます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:JPEGLoaderContext"><apiName>JPEGLoaderContext</apiName><shortdesc>
 JPEGLoaderContext クラスには、JPEG 画像のロード時に非ブロックフィルターを有効にするプロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.system:LoaderContext</apiBaseClassifier></apiClassifierDef><apiDesc>
 JPEGLoaderContext クラスには、JPEG 画像のロード時に非ブロックフィルターを有効にするプロパティが含まれています。非ブロックフィルターは、隣接するセルをスムージングすることによって、高圧縮時の画質を向上させます。JPEG イメージのロード時に非ブロックを適用するには、JPEGLoaderContext オブジェクトを作成して、その <codeph>deblockingFilter</codeph> プロパティを設定します。次に、JPEGLoaderContext オブジェクトの名前を、<codeph>context</codeph> パラメーターの値として、イメージのロードに使用される Loader オブジェクトの <codeph>load()</codeph> メソッドで使用します。
 
 <p>JPEGLoaderContext クラスは LoaderContext クラスを拡張します。ロードしたイメージのピクセルにプログラムでアクセスする必要がある場合、<codeph>checkPolicyFile</codeph> プロパティを <codeph>true</codeph> に設定します（例えば、<codeph>BitmapData.draw()</codeph> メソッドを使用する場合など）。アプリケーションサンドボックス内で実行される AIR コンテンツについては、<codeph>checkPolicyFile</codeph> プロパティを設定する必要はありません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#BitmapData/draw()"><linktext>flash.display.BitmapData.draw()</linktext></link></related-links><apiConstructor id="flash.system:JPEGLoaderContext:JPEGLoaderContext"><apiName>JPEGLoaderContext</apiName><shortdesc>
     指定された設定で、新しい JPEGLoaderContext オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>deblockingFilter</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>非ブロックフィルターの強度を指定します。値を 1.0 にすると、最高強度の非ブロックフィルターが適用され、値を 0.0 にすると、非ブロックフィルターは無効になります。
     
     </apiDesc></apiParam><apiParam><apiItemName>checkPolicyFile</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>オブジェクトを読み込む前に、Flash Player が URL ポリシーファイルの存在を確認するかどうかを指定します。
     
     </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiOperationClassifier>flash.system:ApplicationDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Loader オブジェクトで使用する ApplicationDomain オブジェクトを指定します。
     
     </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>flash.system:SecurityDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Loader オブジェクトで使用する SecurityDomain オブジェクトを指定します。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     指定された設定で、新しい JPEGLoaderContext オブジェクトを作成します。 
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#LoaderContext"><linktext>flash.system.LoaderContext</linktext></link><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:JPEGLoaderContext:deblockingFilter"><apiName>deblockingFilter</apiName><shortdesc> 
	 非ブロックフィルターの強度を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.0</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
	 非ブロックフィルターの強度を指定します。値を 1.0 にすると、最高強度の非ブロックフィルターが適用され、値を 0.0 にすると、非ブロックフィルターは無効になります。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.system:ApplicationDomain"><apiName>ApplicationDomain</apiName><shortdesc>
 ApplicationDomain クラスは、クラス定義の個別のグループのコンテナです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Security considerations for application domains are discussed in the 
 applicationDomain property entries of URLRequest and LoaderInfo. 
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ApplicationDomain クラスは、クラス定義の個別のグループのコンテナです。アプリケーションドメインは、同じセキュリティドメイン内にあるクラスを分割するために使用されます。これにより、同じクラスの定義が複数存在すること、および子が親の定義を再利用することが可能になります。
 
 <p>アプリケーションドメインは、外部 SWF ファイルが Loader クラスによってロードされる場合に使用されます。ロードされる SWF ファイルのすべての ActionScript 3.0 定義は、アプリケーションドメインに保存されます。アプリケーションドメインは、Loader オブジェクトの <codeph>load()</codeph> または <codeph>loadBytes()</codeph> メソッドの <codeph>context</codeph> パラメーターとして渡す LoaderContext オブジェクトの <codeph>applicationDomain</codeph> プロパティによって指定されます。LoaderInfo オブジェクトにも <codeph>applicationDomain</codeph> プロパティがあります。これは読み取り専用です。</p>
 
 <p>SWF ファイル内のすべてのコードは、アプリケーションドメイン内に存在するように定義されます。現在のアプリケーションドメインは、メインアプリケーションが実行されている場所です。現在のドメインを含むすべてのアプリケーションドメインはシステムドメインに属します。つまり、システムドメインにはすべての Flash Player クラスが含まれます。</p>
 
 <p>システムドメインを除くすべてのアプリケーションドメインには、親ドメインが関連付けられます。メインアプリケーションのアプリケーションドメインに対する親ドメインは、システムドメインです。ロードされるクラスは、その親によってまだ定義されていない場合にのみ定義されます。ロードされるクラスの定義を新しい定義でオーバーライドすることはできません。</p>
 
 <p>アプリケーションドメインの使用例については、『<i>ActionScript 3.0 のプログラミング</i>』を参照してください。</p>
 
 <p><codeph>ApplicationDomain()</codeph> コンストラクター関数を使用すると、ApplicationDomain オブジェクトを作成できます。</p>
 
 </apiDesc><example conref="examples\ApplicationDomainExample.as"> 次の例では、実行時のクラスの読み込みと、別の SWF に存在するクラスのパブリックメソッドの呼び出し方法を示します。
 <p><b>メモ : </b></p>
 <ul>
    <li>ClassLoader クラスによって SWF ファイルがロードされるので、ローカルセキュリティはファイルシステムレベルである必要があります。</li>
    <li>この例を実行するには、"ApplicationDomainExample.swf" ファイルと同じフォルダーに存在する "RuntimeClasses.swf" という SWF ファイルが存在する必要があります。</li>
 </ul>
 
 <p>最初に、以下のコードから "RuntimeClasses.swf" ファイルを作成します。</p>
 <codeblock platform="actionscript">
 package {
   import flash.display.Sprite;
   public class RuntimeClasses extends Sprite
   {
     public function RuntimeClasses()
     {}
      
     public function greet():String {
       return("Hello World");
     }
   }
 }
 </codeblock>
 
 <p>次に、以下のコードを実装します。</p>
<codeblock>

package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;

    public class ApplicationDomainExample extends Sprite {
        private var loader:ClassLoader;
        private var tf:TextField = new TextField();

        public function ApplicationDomainExample() {
            addChild(tf);

            loader = new ClassLoader();
            loader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            loader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            loader.load("RuntimeClasses.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            var runtimeClassRef:Class = loader.getClass("RuntimeClasses");
            var greeter:Object = new runtimeClassRef();

            tf.text = greeter.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
        context.applicationDomain=ApplicationDomain.currentDomain;
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example><example conref="examples\ApplicationDomainExample.2.as"> 複数の SWF ファイルに同じ名前だが異なる実装を提供するコンパイル済みクラスが含まれている場合、次の例に従って、外部からロードする SWF ファイルのクラスをそれぞれのクラスと分割できます。以前の例では、子 SWF が <codeph>ApplicationDomain.currentDomain</codeph> を使用するように指示されました。今回は、新しい <codeph>ApplicationDomain</codeph> が作成されます。これにより、2 番目にロードされる任意の SWF の <codeph>Greeter</codeph> クラスのプロパティおよびメソッドが、最初の <codeph>Greeter</codeph> クラスのプロパティおよびメソッドと置き換わることはありません。これは、<codeph>context.applicationDomain</codeph> プロパティ（<codeph>load</codeph> メソッド）をプロパティを変更してテストできます。このメソッドは <codeph>ClassLoader</codeph> 内のものです。
 <p><b>メモ : </b></p>
 <ul>
    <li>ClassLoader クラスによって SWF ファイルがロードされるので、ローカルセキュリティはファイルシステムレベルである必要があります。</li>
    <li>この例を実行するには、Greeter.swf と呼ばれる 2 つの SWF ファイルがそれぞれ "en" フォルダーおよび "es" フォルダーに存在している必要があります。</li>
 </ul>
 
 <p>以下のコードを使用して、Greeter.as ファイルを "en" ディレクトリに作成します。</p>
 <codeblock platform="actionscript">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Good Morning");
        }
    }
 }
 </codeblock>
 <p>その後、同じ Greeter.as ファイルを "es" ディレクトリに作成します。</p>
 
 <codeblock platform="actionscript">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Buenos Dias");
        }
    }
}
 </codeblock>
 
 <p>両方の SWF ファイルをコンパイルし、以下のコードを実装します。</p>
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class ApplicationDomainExample2 extends Sprite {
        private var spanishGreeterLoader:ClassLoader;
        private var englishGreeterLoader:ClassLoader;
        private var tf:TextField = new TextField();
        private var greetersLoaded:uint = 0;

        public function ApplicationDomainExample2() {
            tf.autoSize = TextFieldAutoSize.LEFT;
            addChild(tf);

            spanishGreeterLoader = new ClassLoader();
            spanishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            spanishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            spanishGreeterLoader.load("es/Greeter.swf");
            
            englishGreeterLoader = new ClassLoader();
            englishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            englishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            englishGreeterLoader.load("en/Greeter.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            greetersLoaded++;
            if(greetersLoaded == 2) {
                greet();    
            }
        }
        
        private function greet():void {
            var spanishGreeter:Class = spanishGreeterLoader.getClass("Greeter");
            var englishGreeter:Class = englishGreeterLoader.getClass("Greeter");
            var greeter1 = new spanishGreeter();
            var greeter2 = new englishGreeter();
            
            tf.text = greeter1.greet() + "\n" + greeter2.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
//        context.applicationDomain = ApplicationDomain.currentDomain;
        context.applicationDomain = new ApplicationDomain();
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>flash.display.LoaderInfo</linktext></link><link href="flash.net.xml#URLRequest"><linktext>flash.net.URLRequest</linktext></link><link href="flash.system.xml#LoaderContext"><linktext>flash.system.LoaderContext</linktext></link></related-links><apiConstructor id="flash.system:ApplicationDomain:ApplicationDomain"><apiName>ApplicationDomain</apiName><shortdesc>
     新しいアプリケーションドメインを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>parentDomain</apiItemName><apiOperationClassifier>flash.system:ApplicationDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>親ドメインが渡されない場合、このアプリケーションドメインはシステムドメインを親ドメインとします。
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     新しいアプリケーションドメインを作成します。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.system:ApplicationDomain:getDefinition"><apiName>getDefinition</apiName><shortdesc>
     指定されたアプリケーションドメインから公開定義を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>throws SecurityError The definition belongs to a domain to which
     the calling code does not have access.
     
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された名前の公開定義は存在しません。
     
     </apiDesc><apiItemName>ReferenceError</apiItemName><apiOperationClassifier>ReferenceError</apiOperationClassifier></apiException><apiReturn><apiDesc>定義に関連付けられたオブジェクトです。
     
     </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>定義の名前です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定されたアプリケーションドメインから公開定義を取得します。定義には、クラス、名前空間、または関数の定義があります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:ApplicationDomain:hasDefinition"><apiName>hasDefinition</apiName><shortdesc>
     指定されたアプリケーションドメイン内に公開定義が存在するかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された定義が存在する場合は <codeph>true</codeph> を返します。含まれない場合は <codeph>false</codeph> を返します。
     
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>定義の名前です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定されたアプリケーションドメイン内に公開定義が存在するかどうかを確認します。定義には、クラス、名前空間、または関数の定義があります。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:ApplicationDomain:MIN_DOMAIN_MEMORY_LENGTH:get"><apiName>MIN_DOMAIN_MEMORY_LENGTH</apiName><shortdesc>
	 ApplicationDomain.domainMemory として使用するために必要なメモリオブジェクトの最小の長さを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier><apiTipTexts><apiTipText>
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 ApplicationDomain.domainMemory として使用するために必要なメモリオブジェクトの最小の長さを取得します。
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:currentDomain:get"><apiName>currentDomain</apiName><shortdesc>
     コードが実行されている現在のアプリケーションドメインを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Question: Do you call System.currentDomain? or Loader.currentDomain or request.currentDomain?
     
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc>
     コードが実行されている現在のアプリケーションドメインを取得します。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:domainMemory:get"><apiName>domainMemory</apiName><shortdesc>
	 この ApplicationDomain 内でドメイン全般のメモリ処理が実行されるオブジェクトを取得して設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier><apiTipTexts><apiTipText>
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 この ApplicationDomain 内でドメイン全般のメモリ処理が実行されるオブジェクトを取得して設定します。
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:parentDomain:get"><apiName>parentDomain</apiName><shortdesc>
     このアプリケーションドメインの親ドメインを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc>
     このアプリケーションドメインの親ドメインを取得します。
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.system:Capabilities"><apiName>Capabilities</apiName><shortdesc>
 Capabilities クラスでは、SWF ファイルをホスティングするシステムとプレーヤーを記述するプロパティが提供されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 <ph platform="actionscript">Capabilities クラスでは、SWF ファイルをホスティングするシステムとプレーヤーを記述するプロパティが提供されています。例えば、携帯電話の画面は 100 × 100 ピクセル、モノクロで、PC の画面は 1000 × 1000 ピクセル、カラーである場合があります。Capabilities オブジェクトを使用してユーザーが使用しているデバイスのタイプを確認することによって、できるだけ多数のユーザーに対して適切なコンテンツを提供できます。デバイスの機能がわかると、適切な SWF ファイルを送るようにサーバーに指示したり、表示形式を変更するように SWF ファイルに指示したりすることができます。</ph> <ph platform="javascript">Capabilities クラスでは、HTML（および SWF）コンテンツをホスティングするシステムとランタイムを記述するプロパティが提供されています。 Capabilities オブジェクトを使用してユーザーが使用しているコンピューターのタイプを確認することによって、できるだけ多数のユーザーに対して適切なコンテンツを提供できます。 コンピューターの機能がわかると、適切なコンテンツをロードすることまたはその表示形式を変更するコードを使用することができます。</ph>
 
 <p>ただし、Adobe AIR の一部の機能は、Capabilities クラスのプロパティとしてリストに示されていません。これらは他のクラスのプロパティです。</p>
 
 <adobetable class="innertable">
 
 
 
 
 
 
 
 
 
 
 
 
 
 <tgroup cols="2"><thead><row><entry>プロパティ</entry><entry>説明</entry></row></thead><tbody><row>
 <entry><codeph>NativeApplication.supportsDockIcon</codeph></entry>
 <entry>オペレーティングシステムがシステムドックアイコンをサポートするかどうか。</entry>
 </row><row>
 <entry><codeph>NativeApplication.supportsMenu</codeph></entry>
 <entry>オペレーティングシステムがグローバルアプリケーションメニューバーをサポートするかどうか。</entry>
 </row><row>
 <entry><codeph>NativeApplication.supportsSystemTrayIcon</codeph></entry>
 <entry>オペレーティングシステムがシステムトレイアイコンをサポートするかどうか。</entry>
 </row><row>
 <entry><codeph>NativeWindow.supportsMenu</codeph></entry>
 <entry>オペレーティングシステムがウィンドウメニューをサポートするかどうか。</entry>
 </row><row>
 <entry><codeph>NativeWindow.supportsTransparency</codeph></entry>
 <entry>オペレーティングシステムが透明なウィンドウをサポートするかどうか。</entry>
 </row></tbody></tgroup></adobetable>
 
 <p><i/><codeph>Capabilities.os</codeph> または <codeph>Capabilities.manufacturer</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。</p>
 
 <p>機能情報 (<codeph>Capabilities.serverString</codeph> プロパティに URL エンコードされたストリングとして格納されている) を、<codeph>GET</codeph> または <codeph>POST</codeph> HTTP メソッドを使用して送信できます。次に、MP3 をサポートし、解像度が 1600 × 1200 ピクセルで、Windows XP を実行しており、IME がインストールされているコンピューターに対するサーバーストリングの例を示します。</p>
 
 <pre>A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
     SB=f&amp;DEB=t&amp;V=WIN%209%2C0%2C0%2C0&amp;M=Adobe%20Windows&amp;
     R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
     L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f&amp;IME=t</pre>
 
 <p>次の表に、Capabilities クラスのプロパティと、それに対応するサーバーストリングを示します。
 <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
  
  
  
  
  
  
  
  
 <tgroup cols="2"><thead><row><entry align="left">Capabilities クラスのプロパティ</entry><entry align="left">サーバーストリング</entry></row></thead><tbody><row>
      <entry><codeph>avHardwareDisable</codeph></entry>
      <entry><codeph>AVD</codeph></entry>
  </row><row>
      <entry><codeph>hasAccessibility</codeph></entry>
      <entry><codeph>ACC</codeph></entry>
  </row><row>
      <entry><codeph>hasAudio</codeph></entry>
      <entry><codeph>A</codeph></entry>
  </row><row>
      <entry><codeph>hasAudioEncoder</codeph></entry>
      <entry><codeph>AE</codeph></entry>
  </row><row>
      <entry><codeph>hasEmbeddedVideo</codeph></entry>
      <entry><codeph>EV</codeph></entry>
  </row><row>
      <entry><codeph>hasIME</codeph></entry>
      <entry><codeph>IME</codeph></entry>
  </row><row>
      <entry><codeph>hasMP3</codeph></entry>
      <entry><codeph>MP3</codeph></entry>
  </row><row>
      <entry><codeph>hasPrinting</codeph></entry>
      <entry><codeph>PR</codeph></entry>
  </row><row>
      <entry><codeph>hasScreenBroadcast</codeph></entry>
      <entry><codeph>SB</codeph></entry>
  </row><row>
      <entry><codeph>hasScreenPlayback</codeph></entry>
      <entry><codeph>SP</codeph></entry>
  </row><row>
      <entry><codeph>hasStreamingAudio</codeph></entry>
      <entry><codeph>SA</codeph></entry>
  </row><row>
      <entry><codeph>hasStreamingVideo</codeph></entry>
      <entry><codeph>SV</codeph></entry>
  </row><row>
      <entry><codeph>hasTLS</codeph></entry>
      <entry><codeph>TLS</codeph></entry>
  </row><row>
      <entry><codeph>hasVideoEncoder</codeph></entry>
      <entry><codeph>VE</codeph></entry>
  </row><row>
      <entry><codeph>isDebugger</codeph></entry>
      <entry><codeph>DEB</codeph></entry>
  </row><row>
      <entry><codeph>language</codeph></entry>
      <entry><codeph>L</codeph></entry>
  </row><row>
      <entry><codeph>localFileReadDisable</codeph></entry>
      <entry><codeph>LFD</codeph></entry>
  </row><row>
      <entry><codeph>manufacturer</codeph></entry>
      <entry><codeph>M</codeph></entry>
  </row><row>
      <entry><codeph>maxLevelIDC</codeph></entry>
      <entry><codeph>ML</codeph></entry>
  </row><row>
      <entry><codeph>os</codeph></entry>
      <entry><codeph>OS</codeph></entry>
  </row><row>
      <entry><codeph>pixelAspectRatio</codeph></entry>
      <entry><codeph>AR</codeph></entry>
  </row><row>
      <entry><codeph>playerType</codeph></entry>
      <entry><codeph>PT</codeph></entry>
  </row><row>
      <entry><codeph>screenColor</codeph></entry>
      <entry><codeph>COL</codeph></entry>
  </row><row>
      <entry><codeph>screenDPI</codeph></entry>
      <entry><codeph>DP</codeph></entry>
  </row><row>
      <entry><codeph>screenResolutionX</codeph></entry>
      <entry><codeph>R</codeph></entry>
  </row><row>
      <entry><codeph>screenResolutionY</codeph></entry>
      <entry><codeph>R</codeph></entry>
  </row><row>
      <entry><codeph>version</codeph></entry>
      <entry><codeph>V</codeph></entry>
  </row></tbody></tgroup></adobetable>
 </p>
  
 <p>ウィンドウレスモードが無効化されているかどうかを示す <codeph>WD</codeph> サーバーストリングもあります。Flash Player では、Web ブラウザーまたは mms.cfg ファイルのユーザー設定との不適合という理由でウィンドウレスモードを無効化できます。対応する Capabilities プロパティはありません。</p>
  
 <p>Capabilities クラスのプロパティは、すべて読み取り専用です。</p>
 
 </apiDesc><example conref="examples\CapabilitiesExample.as"> 次の例では、<codeph>trace()</codeph> の呼び出しを使用して flash.system.Capabilities オブジェクトで見つかる値が単純に出力されます。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.system.Capabilities;

    public class CapabilitiesExample extends Sprite {
        public function CapabilitiesExample() {
            showCapabilities();
        }
        
        private function showCapabilities():void {
            trace("avHardwareDisable: " + Capabilities.avHardwareDisable);
            trace("hasAccessibility: " + Capabilities.hasAccessibility);
            trace("hasAudio: " + Capabilities.hasAudio);
            trace("hasAudioEncoder: " + Capabilities.hasAudioEncoder);
            trace("hasEmbeddedVideo: " + Capabilities.hasEmbeddedVideo);
            trace("hasMP3: " + Capabilities.hasMP3);
            trace("hasPrinting: " + Capabilities.hasPrinting);
            trace("hasScreenBroadcast: " + Capabilities.hasScreenBroadcast);
            trace("hasScreenPlayback: " + Capabilities.hasScreenPlayback);
            trace("hasStreamingAudio: " + Capabilities.hasStreamingAudio);
            trace("hasVideoEncoder: " + Capabilities.hasVideoEncoder);
            trace("isDebugger: " + Capabilities.isDebugger);
            trace("language: " + Capabilities.language);
            trace("localFileReadDisable: " + Capabilities.localFileReadDisable);
            trace("manufacturer: " + Capabilities.manufacturer);
            trace("os: " + Capabilities.os);
            trace("pixelAspectRatio: " + Capabilities.pixelAspectRatio);
            trace("playerType: " + Capabilities.playerType);
            trace("screenColor: " + Capabilities.screenColor);
            trace("screenDPI: " + Capabilities.screenDPI);
            trace("screenResolutionX: " + Capabilities.screenResolutionX);
            trace("screenResolutionY: " + Capabilities.screenResolutionY);
            trace("serverString: " + Capabilities.serverString);
            trace("version: " + Capabilities.version);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.system:Capabilities:avHardwareDisable:get"><apiName>avHardwareDisable</apiName><shortdesc>
     ユーザーのカメラとマイクへのアクセスが管理上禁止されているか（true）、または許可されているか（false）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.avHardwareDisable, avHardwareDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     ユーザーのカメラとマイクへのアクセスが管理上禁止されているか（<codeph>true</codeph>）、または許可されているか（<codeph>false</codeph>）を指定します。サーバーストリングは <codeph>AVD</codeph> です。
     
	 <p>Adobe AIR™ のコンテンツでは、このプロパティはアプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツにのみ適用されます。アプリケーションセキュリティサンドボックス内のコンテンツは常にユーザーのカメラとマイクにアクセスできます。</p>
 	 
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/getCamera()"><linktext>flash.media.Camera.getCamera()</linktext></link><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:cpuArchitecture:get"><apiName>cpuArchitecture</apiName><shortdesc>
	 コンピューターの現在の CPU アーキテクチャを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata><asCustoms><oldexample>The following example traces the value of this read-only property:
	 <pre>
	 trace(Capabilities.cpuArchitecture);
	 </pre>
	 </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 コンピューターの現在の CPU アーキテクチャを指定します。<codeph>cpuArchitecture</codeph> プロパティは、"<codeph>PowerPC</codeph>"、"<codeph>x86</codeph>"、"<codeph>SPARC</codeph>" および "<codeph>ARM</codeph>" のいずれかのストリングを返します。サーバーストリングは <codeph>ARCH</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAccessibility:get"><apiName>hasAccessibility</apiName><shortdesc>
	 システムがアクセシビリティ補助との通信をサポートしているか (true)、またはサポートしていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasAccessibility, hasAccessibility,
     accessibility
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムがアクセシビリティ補助との通信をサポートしているか (<codeph>true</codeph>)、またはサポートしていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>ACC</codeph> です。 
     
     </apiDesc></apiValueDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>flash.accessibility.Accessibility.active</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasAudio:get"><apiName>hasAudio</apiName><shortdesc>
	 システムにオーディオ機能があるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasAudio, hasAudio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムにオーディオ機能があるかどうかを指定します。このプロパティは常に <codeph>true</codeph> です。サーバーストリングは <codeph>A</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAudioEncoder:get"><apiName>hasAudioEncoder</apiName><shortdesc>
	 システムが、マイクからの入力などのオーディオストリームをエンコードできるか (true)、またはできないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasAudioEncoder, hasAudioEncoder 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムが、マイクからの入力などのオーディオストリームをエンコードできるか (<codeph>true</codeph>)、またはできないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>AE</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasEmbeddedVideo:get"><apiName>hasEmbeddedVideo</apiName><shortdesc>
	 システムが埋め込みビデオをサポートしているか (true)、またはサポートしていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasEmbeddedVideo, hasEmbeddedVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムが埋め込みビデオをサポートしているか (<codeph>true</codeph>)、またはサポートしていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>EV</codeph> です。 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasIME:get"><apiName>hasIME</apiName><shortdesc>
	 システムに IME がインストールされているか (true)、またはインストールされていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasIME, hasIME, IME 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムに IME がインストールされているか (<codeph>true</codeph>)、またはインストールされていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>IME</codeph> です。 
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.system.xml#System/ime"><linktext>flash.system.System.ime</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasMP3:get"><apiName>hasMP3</apiName><shortdesc>
	 システムに MP3 デコーダが存在するか (true)、または存在しないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasMP3, hasMP3, MP3, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムに MP3 デコーダが存在するか (<codeph>true</codeph>)、または存在しないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>MP3</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasPrinting:get"><apiName>hasPrinting</apiName><shortdesc>
	 システムが印刷をサポートしているか (true)、またはサポートしていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasPrinting, hasPrinting, printing 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムが印刷をサポートしているか (<codeph>true</codeph>)、またはサポートしていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>PR</codeph> です。 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenBroadcast:get"><apiName>hasScreenBroadcast</apiName><shortdesc>
	 Flash Media Server を通して実行されるスクリーンブロードキャストアプリケーションの開発がシステムでサポートされているか (true)、またはサポートされていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasScreenBroadcast, hasScreenBroadcast
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Flash Media Server を通して実行されるスクリーンブロードキャストアプリケーションの開発がシステムでサポートされているか (<codeph>true</codeph>)、またはサポートされていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>SB</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenPlayback:get"><apiName>hasScreenPlayback</apiName><shortdesc>
	 Flash Media Server を通して実行されているスクリーンブロードキャストアプリケーションの再生がシステムでサポートされているか (true)、またはサポートされていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasScreenPlayback, hasScreenPlayback
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Flash Media Server を通して実行されているスクリーンブロードキャストアプリケーションの再生がシステムでサポートされているか (<codeph>true</codeph>)、またはサポートされていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>SP</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingAudio:get"><apiName>hasStreamingAudio</apiName><shortdesc>
	 システムがストリーミングオーディオを再生できるか (true)、またはできないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasStreamingAudio, hasStreamingAudio, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムがストリーミングオーディオを再生できるか (<codeph>true</codeph>)、またはできないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>SA</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingVideo:get"><apiName>hasStreamingVideo</apiName><shortdesc>
	 システムがストリーミングビデオを再生できるか (true)、またはできないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasStreamingVideo, hasStreamingVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムがストリーミングビデオを再生できるか (<codeph>true</codeph>)、またはできないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>SV</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasTLS:get"><apiName>hasTLS</apiName><shortdesc>
	 NetConnection によるネイティブ SSL ソケットがサポートされているか (true)、またはサポートされていないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasTLS, hasTLS, TLS 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 NetConnection によるネイティブ SSL ソケットがサポートされているか (<codeph>true</codeph>)、またはサポートされていないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>TLS</codeph> です。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/connectedProxyType"><linktext>flash.net.NetConnection.connectedProxyType</linktext></link><link href="flash.net.xml#NetConnection/proxyType"><linktext>flash.net.NetConnection.proxyType</linktext></link><link href="flash.net.xml#NetConnection/usingTLS"><linktext>flash.net.NetConnection.usingTLS</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasVideoEncoder:get"><apiName>hasVideoEncoder</apiName><shortdesc>
	 システムが、Web カメラからの入力などのビデオストリームをエンコードできるか (true)、またはできないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasVideoEncoder, hasVideoEncoder
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 システムが、Web カメラからの入力などのビデオストリームをエンコードできるか (<codeph>true</codeph>)、またはできないか (<codeph>false</codeph>) を指定します。サーバーストリングは <codeph>VE</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isDebugger:get"><apiName>isDebugger</apiName><shortdesc> 
	 システムがデバッグ用の特別なバージョンか（true）、または正式にリリースされたバージョンか（false）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.isDebugger, isDebugger, debugging 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc> 
	 システムがデバッグ用の特別なバージョンか（<codeph>true</codeph>）、または正式にリリースされたバージョンか（<codeph>false</codeph>）を指定します。 サーバーストリングは <codeph>DEB</codeph> です。このプロパティは、Flash Player のデバッグ版または AIR Debug Launcher (ADL) で実行する場合、<codeph>true</codeph> に設定されます。<ph platform="actionscript"/>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isEmbeddedInAcrobat:get"><apiName>isEmbeddedInAcrobat</apiName><shortdesc>
     PDF ファイルに埋め込まれているプレーヤーが Acrobat 9.0 以降で開くか (true)、またはそうではないか (false) を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.127.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.isEmbeddedInAcrobat, isEmbeddedInAcrobat, Acrobat
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     PDF ファイルに埋め込まれているプレーヤーが Acrobat 9.0 以降で開くか (<codeph>true</codeph>)、またはそうではないか (<codeph>false</codeph>) を指定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:language:get"><apiName>language</apiName><shortdesc>
	 コンテンツが実行されているシステムの言語コードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.language, language
     
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 コンテンツが実行されているシステムの言語コードを指定します。言語は、ISO 639-1 で規定された小文字 2 文字の言語コードで指定されます。中国語については、簡体字と繁体字を識別するために、ISO 3166 で規定された大文字 2 文字の国コードが追加されます。言語コードは、言語の英語名に基づきます。たとえば、<codeph>hu</codeph> はハンガリー語を示します。
     
     <p>英語のシステムでは、このプロパティは言語コード (<codeph>en</codeph>) のみを返し、国コードは返しません。Microsoft Windows システムでは、このプロパティはユーザーインターフェイス（UI）言語を返します。UI 言語は、すべてのメニュー、ダイアログボックス、エラーメッセージ、ヘルプファイルなどで使用される言語です。次の表に、指定できる値を示します。
     
     <adobetable class="innertable">
     
     
     
     
     
         
         
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry align="left">言語</entry><entry align="left">値</entry></row></thead><tbody><row>
      <entry>チェコ語</entry>
      <entry><codeph>cs</codeph></entry>
     </row><row>
      <entry>デンマーク語</entry>
      <entry><codeph>da</codeph></entry>
     </row><row>
      <entry>オランダ語</entry>
      <entry><codeph>nl</codeph></entry>
     </row><row>
      <entry>英語</entry>
      <entry><codeph>en</codeph></entry>
     </row><row>
      <entry>フィンランド語</entry>
      <entry><codeph>fi</codeph></entry>
     </row><row>
      <entry>フランス語</entry>
      <entry><codeph>fr</codeph></entry>
     </row><row>
      <entry>ドイツ語</entry>
      <entry><codeph>de</codeph></entry>
     </row><row>
      <entry>ハンガリー語</entry>
      <entry><codeph>hu</codeph></entry>
     </row><row>
      <entry>イタリア語</entry>
      <entry><codeph>it</codeph></entry>
     </row><row>
      <entry>日本語</entry>
      <entry><codeph>ja</codeph></entry>
     </row><row>
      <entry>韓国語</entry>
      <entry><codeph>ko</codeph></entry>
     </row><row>
      <entry>ノルウェー語</entry>
      <entry><codeph>no</codeph></entry>
     </row><row>
      <entry>その他/不明</entry>
      <entry><codeph>xu</codeph></entry>
     </row><row>
      <entry>ポーランド語</entry>
      <entry><codeph>pl</codeph></entry>
     </row><row>
      <entry>ポルトガル語</entry>
      <entry><codeph>pt</codeph></entry>
     </row><row>
      <entry>ロシア語</entry>
      <entry><codeph>ru</codeph></entry>
     </row><row>
      <entry>簡体字中国語</entry>
      <entry><codeph>zh-CN</codeph></entry>
     </row><row>
      <entry>スペイン語</entry>
      <entry><codeph>es</codeph></entry>
     </row><row>
      <entry>スウェーデン語</entry>
      <entry><codeph>sv</codeph></entry>
     </row><row>
      <entry>繁体字中国語</entry>
      <entry><codeph>zh-TW</codeph></entry>
     </row><row>
      <entry>トルコ語</entry>
      <entry><codeph>tr</codeph></entry>
     </row></tbody></tgroup></adobetable>
     </p>
	 
	 <p><i>メモ : </i><codeph>Capabilities.language</codeph> プロパティの値は、このリストの有効な値に制限されています。この制限のために、Adobe AIR アプリケーションではシステムのユーザーインターフェイスの主言語を決定するために <codeph>Capabilities.languages</codeph> 配列の最初のエレメントを使用する必要があります。 </p>
	 
     <p>サーバーストリングは <codeph>L</codeph> です。</p>
     
     </apiDesc><example conref="examples\Capabilities_languageExample.as"> 次の例では、ユーザーのオペレーティングシステムの言語により異なるコンテンツが表示されます。
 
 <p><codeph>Capabilities.language</codeph> プロパティによって、ISO 639-1 言語コード（例えば、英語の場合は "en"）が返されます。<codeph>switch</codeph> ステートメントによって、言語コードがチェックされ、その言語固有の挨拶文が <codeph>myTextField</codeph> テキストフィールドの内容として設定されます。言語コードがこの例でサポートされていない場合は、デフォルトのエラーストリングが返されます。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.system.Capabilities;

    public class Capabilities_languageExample extends Sprite {

        public function Capabilities_languageExample()  {
            var myTextField:TextField = new TextField();         
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            var greetingEnglish:String = "Hello World";
            var greetingGerman:String = "Hallo Welt";
            var greetingFrench:String = "Bonjour Monde";
            var greetingSpanish:String = "Hola Mundo";

            var lang:String = Capabilities.language;
                         
            switch (lang) {
                case "en":
                    myTextField.text = greetingEnglish;
                    break;
                case "de":
                    myTextField.text = greetingGerman;
                    break;
                case "fr":
                    myTextField.text = greetingFrench;
                    break;
                case "es":
                    myTextField.text = greetingSpanish;
                    break;
                default:
                    myTextField.text = "Sorry your system's language is not supported at this time.";               
            }
             
            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/languages"><linktext>言語</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:languages:get"><apiName>languages</apiName><shortdesc>
	 オペレーティングシステムでユーザーが選択したユーザーインターフェイスの言語に関する情報を含むストリングの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 オペレーティングシステムでユーザーが選択したユーザーインターフェイスの言語に関する情報を含むストリングの配列です。このストリングには、RFC4646（<xref href="http://www.ietf.org/rfc/rfc4646.txt" scope="external">http://www.ietf.org/rfc/rfc4646.txt</xref>）で定義された言語タグ（および該当する場合はスクリプト情報と地域情報）が格納され、区切り記号としてダッシュが使用されます（例えば<codeph>「en-US」</codeph>、<codeph>「ja-JP」</codeph>など）。オペレーティングシステムの設定により決定される環境設定の順序で言語が配列のリストに含まれます。 
	 
	 <p>オペレーティングシステムにより、ロケールストリングで返される地域の情報は異なります。あるオペレーティングシステムでは <codeph>"en-us"</codeph> を返すのに対し、別のオペレーティングシステムでは <codeph>"en"</codeph> を返します。</p>
	 
	 <p>返される配列の最初のエントリには一般に、<codeph>Capabilities.language</codeph> プロパティと同じ主言語 ID が含まれます。例えば、<codeph>Capabilities.languages[0]</codeph> が <codeph>"en-US"</codeph> に設定されている場合、<codeph>language</codeph> プロパティは <codeph>"en"</codeph> に設定されます。ただし、<codeph>Capabilities.language</codeph> プロパティが <codeph>"xu"</codeph> に設定されている場合 (不明な言語が指定されています)、この配列の最初のエレメントは異なります。こうした理由から、<codeph>Capabilities.languages[0]</codeph> は <codeph>Capabilities.language</codeph> よりも正確になる場合があります。</p>
	 
	 <p>サーバーストリングは <codeph>LS</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:localFileReadDisable:get"><apiName>localFileReadDisable</apiName><shortdesc>
     ユーザーのハードディスクへの読み取りアクセスが管理上禁止されているか（true）、または許可されているか（false）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.localFileReadDisable, localFileReadDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     ユーザーのハードディスクへの読み取りアクセスが管理上禁止されているか（<codeph>true</codeph>）、または許可されているか（<codeph>false</codeph>）を指定します。Adobe AIR のコンテンツでは、このプロパティはアプリケーションセキュリティサンドボックス以外のセキュリティサンドボックス内のコンテンツにのみ適用されます。 (アプリケーションセキュリティサンドボックス内のコンテンツは常にファイルシステムから読み取ることができます。) <ph platform="actionscript">このプロパティが <codeph>true</codeph> の場合、Flash Player では、ユーザーのハードディスクからファイル（Flash Player が起動するときの最初のファイルを含む）を読み取ることができません。</ph>このプロパティが <codeph>true</codeph> の場合、アプリケーションセキュリティサンドボックス外の AIR コンテンツでは、ユーザーのハードディスクからファイルを読み取ることができません。 たとえば、ロードメソッドを使用してユーザーのハードディスク上にあるファイルを読み取ろうとしても、このプロパティが <codeph>true</codeph> の場合は、読み取りに失敗します。
	 
	 <p platform="actionscript">このプロパティが <codeph>true</codeph> に設定されている場合、ランタイム共有ライブラリの読み取りも失敗しますが、ローカル共有オブジェクトはこのプロパティの値に関係なく読み取ることができます。</p>
	 
	 <p>サーバーストリングは <codeph>LFD</codeph> です。</p>
     
     
     </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader"><linktext>flash.display.Loader</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:manufacturer:get"><apiName>manufacturer</apiName><shortdesc>
	 Flash Player または AIR ランタイムの実行バージョンの製造会社を "Adobe OSName" の形式で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.manufacturer, manufacturer
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <ph platform="actionscript">Flash Player </ph>または AIR ランタイムの実行バージョンの製造会社を <codeph>"Adobe</codeph> <codeph><i>OSName</i>"</codeph> の形式で指定します。<codeph><i>OSName</i></codeph> の値は、<codeph>"Windows"</codeph>、<codeph>"Macintosh"</codeph>、<codeph>"Linux"</codeph> または別のオペレーティングシステム名になります。サーバーストリングは <codeph>M</codeph> です。
     
	 <p><i/>より具体的な機能のプロパティが存在する場合に、<codeph>Capabilities.manufacturer</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。詳細については、Capabilities クラスの説明を参照してください。</p>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:maxLevelIDC:get"><apiName>maxLevelIDC</apiName><shortdesc>
     クライアントハードウェアがサポートする H.264 の最高レベルの IDC を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.maxLevelIDC, maxLevelIDC
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     クライアントハードウェアがサポートする H.264 の最高レベルの IDC を取得します。このレベルでのメディア実行は保証されますが、最高レベルでのメディア実行は最高品質では実行されない場合があります。このプロパティは、クライアントの機能をターゲットとするサーバーに役立ちます。このプロパティを使用すると、サーバーはクライアントに送るビデオのレベルを決定できます。
     
     <p>サーバーストリングは <codeph>ML</codeph> です。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:os:get"><apiName>os</apiName><shortdesc>
     現在のオペレーティングシステムを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.os, os
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     現在のオペレーティングシステムを指定します。<codeph>os</codeph> プロパティの値は、<codeph>"Windows XP"</codeph>、<codeph>"Windows 2000"</codeph>、<codeph>"Windows NT"</codeph>、<codeph>"Windows 98/ME"</codeph>、<codeph>"Windows 95"</codeph>、<codeph>"Windows CE"</codeph>（Flash Player SDK でのみ使用可能。デスクトップバージョンの Flash Player では使用できません）、<codeph>"Linux"</codeph>、<codeph>"Mac OS X.Y.Z"</codeph>（X.Y.Z はバージョン番号。例えば <codeph>Mac OS 10.5.2</codeph>）テキストのいずれかです。サーバーストリングは <codeph>OS</codeph> です。
     
	 <p><i/>より具体的な機能のプロパティが存在する場合に、<codeph>Capabilities.os</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。詳細については、Capabilities クラスの説明を参照してください。</p>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:pixelAspectRatio:get"><apiName>pixelAspectRatio</apiName><shortdesc> 
     画面のピクセル縦横比を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.pixelAspectRatio, pixelAspectRatio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
     画面のピクセル縦横比を指定します。サーバーストリングは <codeph>AR</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:playerType:get"><apiName>playerType</apiName><shortdesc>
	 ランタイム環境のタイプを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.playerType, playerType
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ランタイム環境のタイプを指定します。このプロパティに指定できる値は、次のうちのいずれかです。
	 
     <ul>
	   <li><codeph>"ActiveX"</codeph> - Microsoft Internet Explorer で使用される Flash Player ActiveX コントロール</li>
	   <li><codeph>"Desktop"</codeph> - Adobe AIR ランタイム (<codeph>Capabilities.playerType</codeph> が <codeph>"PlugIn"</codeph> に設定されている HTML ページによりロードされる SWF コンテンツは除く) </li>
	   <li><codeph>"External"</codeph> - 外部 Flash Player<ph outputclass="flashonly"> またはプレビューモード</ph></li>
	   <li><codeph>"PlugIn"</codeph> - Flash Player ブラウザーのプラグイン（および AIR アプリケーションの HTML ページで読み込まれた SWF コンテンツ）</li>
       <li><codeph>"StandAlone"</codeph> - スタンドアローン Flash Player</li>
     </ul>
     <p>サーバーストリングは <codeph>PT</codeph> です。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenColor:get"><apiName>screenColor</apiName><shortdesc>
     画面の色を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenColor, screenColor
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     画面の色を指定します。このプロパティの値は、<codeph>"color"</codeph>、<codeph>"gray"</codeph> (グレースケール) または <codeph>"bw"</codeph> (モノクロ) です。サーバーストリングは <codeph>COL</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenDPI:get"><apiName>screenDPI</apiName><shortdesc>
     画面の 1 インチあたりのドット数 (dpi) 解像度をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenDPI, screenDPI
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     画面の 1 インチあたりのドット数 (dpi) 解像度をピクセル単位で指定します。サーバーストリングは <codeph>DP</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionX:get"><apiName>screenResolutionX</apiName><shortdesc>
     画面の最大水平解像度を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenResolutionX, screenResolutionY
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     画面の最大水平解像度を指定します。サーバーストリングは <codeph>R</codeph> で、画面の幅と高さの両方を返します。このプロパティはユーザーの画面解像度で更新されず、代わりに <ph platform="actionscript">Flash Player</ph> または Adobe AIR アプリケーションの起動時の解像度だけを示します。 また、この値はメインモニターのみ指定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionY:get"><apiName>screenResolutionY</apiName><shortdesc> 
     画面の最大垂直解像度を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenResolutionY, screenResolutionY
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
     画面の最大垂直解像度を指定します。サーバーストリングは <codeph>R</codeph> で、画面の幅と高さの両方を返します。このプロパティはユーザーの画面解像度で更新されず、代わりに <ph platform="actionscript">Flash Player</ph> または Adobe AIR アプリケーションの起動時の解像度だけを示します。 また、この値はメインモニターのみ指定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:serverString:get"><apiName>serverString</apiName><shortdesc> 
     それぞれの Capabilities プロパティの値を指定する URL エンコードストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.serverString, serverString
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
     それぞれの Capabilities プロパティの値を指定する URL エンコードストリングです。
	 
     <p>URL エンコードストリングの例を次に示します。
     <pre>A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
     SB=f&amp;DEB=t&amp;V=WIN%208%2C5%2C0%2C208&amp;M=Adobe%20Windows&amp;
     R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
     L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f</pre></p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports32BitProcesses:get"><apiName>supports32BitProcesses</apiName><shortdesc>
     32 ビットプロセスの実行がサポートされているかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata><asCustoms><oldexample>The following example traces the value of this read-only property:
     <pre>
     trace(Capabilities.supports32BitProcesses);
     </pre>
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     32 ビットプロセスの実行がサポートされているかどうかを指定します。サーバーストリングは <codeph>PR32</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports64BitProcesses:get"><apiName>supports64BitProcesses</apiName><shortdesc>
     64 ビットプロセスの実行がサポートされているかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata><asCustoms><oldexample>The following example traces the value of this read-only property:
     <pre>
     trace(Capabilities.supports64BitProcesses);
     </pre>
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     64 ビットプロセスの実行がサポートされているかどうかを指定します。サーバーストリングは <codeph>PR64</codeph> です。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:version:get"><apiName>version</apiName><shortdesc> 
	 Flash Player または Adobe&amp;#xAE; AIR&amp;#xAE; のプラットフォームとバージョン情報を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.version, version
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	 Flash Player または Adobe<sup>®</sup> AIR<sup>®</sup> のプラットフォームとバージョン情報を指定します。バージョン番号の書式は、<i>platform majorVersion,minorVersion,buildNumber,internalBuildNumber</i> です。<i>platform</i> の有効な値は、<codeph>"WIN"</codeph>、<codeph>"MAC"</codeph> および <codeph>"LNX"</codeph> です。バージョン情報の例を次に示します。
	 
     <pre>
     WIN 9,0,0,0  // Flash Player 9 for Windows
     MAC 7,0,25,0   // Flash Player 7 for Macintosh
	 LNX 9,0,115,0  // Flash Player 9 for Linux
     </pre>
	 
	 <p><i/>より具体的な機能のプロパティが存在する場合に、<codeph>Capabilities.version</codeph> を使用して、オペレーティングシステムに基づく機能を判断しないでください。機能をオペレーティングシステムに依存することは、アプリケーションが潜在的なすべてのターゲットオペレーティングシステムを考慮していない場合に問題が発生する可能性があるので、適切ではありません。代わりに、テストしている機能に対応するプロパティを使用します。詳細については、Capabilities クラスの説明を参照してください。</p>
	 
     <p>サーバーストリングは <codeph>V</codeph> です。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiOperation id="globalOperation:flash.system:fscommand"><apiName>fscommand</apiName><shortdesc>
 SWF ファイルが、Flash Player または Flash Player のホストプログラム（Web ブラウザーなど）と通信できるようになります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><oldexample><p>In the following example, the <code>fscommand()</code> function sets Flash Player to 
 scale the SWF file to the full monitor screen size when the <code>fullscreen_btn</code> button or 
 <code>unfullscreen_btn</code> is released:</p>
 
 <pre>this.fullscreen_btn.onRelease = function() {
   fscommand("fullscreen", true);
 };
 this.unfullscreen_btn.onRelease = function() {
   fscommand("fullscreen", false);
 };
 </pre>
 
 <p>The following example uses the <code>fscommand()</code> function applied to a button in Flash to 
 open a JavaScript message box in an HTML page. The message itself is sent to JavaScript as the 
 <code>fscommand</code> parameter. </p>
 
 <p>You must add a function to the HTML page that contains the SWF file. This function, 
 <code><i>myDocument</i></code><code>_DoFSCommand</code>, sits in the HTML page and waits for an 
 <code>fscommand()</code> function in Flash. When an <code>fscommand</code> is triggered in Flash 
 (for example, when a user presses the button), the <code>command</code> and <code>args</code> strings 
 are passed to the <code><i>myDocument</i></code><code>_DoFSCommand </code>function. You can use the 
 passed strings in your JavaScript or VBScript code in any way you like. In this example, the function 
 contains a conditional <code>if</code> statement that checks to see if the command string is 
 "<code>messagebox</code>". If it is, a JavaScript alert box (or "message box") opens 
 and displays the contents of the <code>args</code> string.</p>
 
 <pre>function myDocument_DoFSCommand(command, args) {
   if (command == "messagebox") {
      alert(args);
   }
 
 </pre>
 
 <p>In the Flash document, add the <code>fscommand()</code> function to a button:</p>
 
 <pre>fscommand("messagebox", "This is a message box called from within Flash.")
 </pre>
 
 <p>You can also use expressions for the <code>fscommand()</code> function and parameters, as in the 
 following example:</p>
 
 <pre>fscommand("messagebox", "Hello, " + name + ", welcome to our website!")
 </pre>
 
 <p>To test the SWF file, select File > Publish Preview > HTML.</p>
 
 <p><strong>Note: </strong>If you publish your SWF file using the Flash with FSCommand template in the 
 HTML 
 tab of the Publish Settings dialog box, the <code>myDocument_DoFSCommand</code> function is inserted 
 automatically. The SWF file's <code>NAME</code> and <code>ID</code> attributes will be the filename. 
 For example, for the file myDocument.fla, the attributes would be set to <code>myDocument</code>.</p>
 
  
  </oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>マウスイベントやキー入力イベントなどのユーザー操作に応じて関数が呼び出されない場合。
 
 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>ホストアプリケーションに任意の用途で渡されるストリング、または Flash Player に渡されるコマンドです。
 
 </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>ホストアプリケーションに任意の用途で渡されるストリング、または Flash Player に渡される値です。
 
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 SWF ファイルが、Flash Player または Flash Player のホストプログラム（Web ブラウザーなど）と通信できるようになります。<codeph>fscommand()</codeph> 関数を使用して、Director、または ActiveX コントロールに対応している Visual Basic や Visual C++ などのプログラムにメッセージを渡すこともできます。
 
  
 <p><codeph>fscommand()</codeph> 関数を使用すると、SWF ファイルが Web ページ内のスクリプトと通信できるようになります。ただし、スクリプトへのアクセスは、Web ページの <codeph>allowScriptAccess</codeph> 属性の設定により制御されます。この属性は、SWF ファイルが埋め込まれる HTML コード内で設定します。例えば、Internet Explorer の <codeph>PARAM</codeph> タグ内や、Netscape の <codeph>EMBED</codeph> タグ内で設定します。 </p>
  <ul>
  
  <li> <codeph>allowScriptAccess</codeph> が<codeph>「sameDomain」</codeph>（デフォルト）に設定されている場合は、Web ページと同じドメインに存在する SWF ファイルからのスクリプト実行のみが許可されます。 </li> 
  <li> <codeph>allowScriptAccess</codeph> が<codeph>「always」</codeph>に設定されている場合、SWF ファイルと HTML ページのドメインが異なる場合でも、SWF ファイルは埋め込み先の HTML ページとやり取りできます。 </li>
  <li><codeph>allowScriptAccess</codeph> が<codeph>「never」</codeph>に設定されていると、SWF ファイルはどの HTML ページともやり取りできません。この値の使用はお勧めしません。また、信頼されていない SWF ファイルを独自のドメインから提供していない限り、この値を使用する必要はありません。信頼されていない SWF ファイルを提供する必要がある場合は、区別するためのサブドメインを作成し、信頼されていないコンテンツはすべてそこに配置することをお勧めします。 </li>
 </ul>
 
 <p>SWF ファイルがこのメソッドを使用しないようにするには、<codeph>allowNetworking</codeph> パラメーター（SWF コンテンツを含んでいる HTML ページの <codeph>object</codeph> タグおよび <codeph>embed</codeph> タグのパラメーター）を設定します。 </p>
 
 <p><codeph>fscommand()</codeph> 関数は、呼び出し元 SWF ファイルがローカルファイルシステムのサンドボックスまたはネットワーク接続したローカルのサンドボックスに置かれ、さらに、含まれている HTML ページが信頼されないページとしてサンドボックスに置かれている場合には、使用できません。</p>
 
 <p>セキュリティ情報について詳しくは、以下を参照してください。</p>
 <ul>
 
 <li class="flexonly"><xref href="http://www.adobe.com/go/flex3_progAS3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 <li class="flashonly"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_jp" scope="external">セキュリティに関する章</xref>（『ActionScript 3.0 のプログラミング』）と LiveDocs に関する最新のコメント<i/></li>
 
 <li>Flash Player デベロッパーセンタートピック：<xref href="http://www.adobe.com/go/devnet_security_jp" scope="external">セキュリティ</xref></li>
 </ul>
 
 <p>シンタックス 1 : <codeph>fscommand()</codeph> を使用して Flash Player にメッセージを送るには、定義済みのコマンドとパラメーターを使用します。次の表に、<codeph>fscommand()</codeph> 関数の <codeph>command</codeph> パラメーターと <codeph>args</codeph> パラメーターに指定できる値を示します。これらの値は、プロジェクターを含め、Flash Player で再生する SWF ファイルを制御します。<i>プロジェクター</i>は、Flash Player がなくてもスタンドアローンアプリケーションとして実行可能な形式で保存される SWF ファイルです。</p>
 
              <adobetable class="innertable">
                  
                  
                  
                  
                  
                  
                  
                  
              <tgroup cols="3"><thead><row><entry>コマンド</entry><entry>パラメーター (args) </entry><entry>用途</entry></row></thead><tbody><row>
                      <entry><codeph>quit</codeph></entry>
                      <entry>なし</entry>
                      <entry>プロジェクターを終了します。</entry>
                  </row><row>
                      <entry><codeph>fullscreen</codeph></entry>
                      <entry><codeph>true</codeph> または <codeph>false</codeph></entry>
                      <entry><codeph>true</codeph> を指定すると、Flash Player はフルスクリーンモードに設定されます。<codeph>false</codeph> を指定すると、プレーヤーはノーマルメニュービューになります。</entry>
                  </row><row>
                      <entry><codeph>allowscale</codeph></entry> 
                      <entry><codeph>true</codeph> または <codeph>false</codeph></entry>
                      <entry><codeph>false</codeph> を指定すると、SWF ファイルは常に元のサイズで表示され、拡大 / 縮小されないようにプレーヤーが設定されます。<codeph>true</codeph> を指定すると、SWF ファイルは強制的にプレーヤーのウィンドウサイズに対して 100% に拡大 / 縮小されます。</entry>
                  </row><row>
                      <entry><codeph>showmenu</codeph></entry>
                      <entry><codeph>true</codeph> または <codeph>false</codeph></entry>
                      <entry><codeph>true</codeph> を指定すると、すべてのコンテキストメニューアイテムが有効になります。<codeph>false</codeph> を指定すると、[設定] および [Flash Player について] 以外のすべてのコンテキストメニュー項目が非表示になります。</entry>
                  </row><row>
                      <entry><codeph>exec</codeph></entry>
                      <entry>アプリケーションへのパス </entry>
                      <entry>プロジェクターの内部からアプリケーションを実行します。</entry>
                  </row><row>
                      <entry><codeph>trapallkeys</codeph></entry>
                      <entry><codeph>true</codeph> または <codeph>false</codeph></entry>
                      <entry><codeph>true</codeph> を指定すると、アクセラレーターキーを含むすべてのキーイベントが Flash Player の <codeph>onClipEvent(keyDown/keyUp)</codeph> ハンドラーに送られます。 </entry>
                  </row></tbody></tgroup></adobetable>
 <p>すべてのアプリケーションで、表に記載されているすべてのコマンドを利用できるわけではありません。 
 <ul>
     <li>Web プレーヤーでは、コマンドはいずれも利用できません。</li> 
     <li>プロジェクターなどのスタンドアローンアプリケーションでは、上記のすべてのコマンドを利用できます。</li>
     <li>ムービープレビュープレーヤーでは、<codeph>allowscale</codeph> および <codeph>exec</codeph> のみを利用できます。</li>
 </ul>
 </p>
 
 <p><codeph>exec</codeph> コマンドで使用できる文字は、A ～ Z、a ～ z、0 ～ 9、ピリオド（.）、アンダースコア（_）だけです。<codeph>exec</codeph> コマンドは、fscommand サブディレクトリでのみ実行されます。つまり、<codeph>exec</codeph> コマンドを使ってアプリケーションを呼び出す場合、アプリケーションは fscommand という名前のサブディレクトリ内に存在する必要があります。<codeph>exec</codeph> コマンドは、Flash プロジェクターファイル内だけから実行できます。</p>
 
 <p>シンタックス 2 : <codeph>fscommand()</codeph> を使用して、Web ブラウザーの JavaScript などのスクリプト言語にメッセージを送るには、パラメーター <codeph>command</codeph> と <codeph>args</codeph> 内に 2 つのパラメーターを渡します。これらのパラメーターはストリングと式のいずれでもよく、fscommand() 関数を<i>キャッチする</i>、つまり <codeph>fscommand()</codeph> 関数を処理する JavaScript 関数側で使用されます。 </p>
 
 <p>Web ブラウザーでは、<codeph>fscommand()</codeph> は、SWF ファイルを含む Web ページ内に存在する JavaScript 関数 <codeph>moviename_DoFScommand</codeph> を呼び出します。<codeph>moviename</codeph> には、<codeph>EMBED</codeph> タグの <codeph>NAME</codeph> 属性または <codeph>OBJECT</codeph> タグの ID プロパティに使用した Flash オブジェクトの名前を指定します。SWF ファイルに "myMovie" という名前を付けている場合、JavaScript 関数 <codeph>myMovie_DoFScommand</codeph> が呼び出されます。 </p>
 
 <p>前述のように、SWF ファイルを含む Web ページでは、<codeph>allowScriptAccess</codeph> 属性を設定することで、SWF ファイルによるその Web ページへのアクセスを許可または拒否します。この属性は、SWF ファイルが埋め込まれる HTML コード内で設定します。例えば、Internet Explorer の <codeph>PARAM</codeph> タグ内や、Netscape の <codeph>EMBED</codeph> タグ内で設定します。 </p>
 
 <p>ブラウザーで実行される Flash Player 10 以降では、このメソッドをプログラムで使用してポップアップウィンドウを開く方法は有効でない場合があります。ブラウザー（およびブラウザーの設定）によってはポップアップウィンドウがブロックされる場合があり、すべてのポップアップウィンドウが表示される保証はありません。ただし、ユーザー操作の直接の結果として実行されるコード（マウスのクリックやキー入力イベントのイベントハンドラーなど）に限っては、このクラスを使用してポップアップウィンドウを開く方法が有効です。</p>
 
 <p>シンタックス 3 : <codeph>fscommand()</codeph> 関数は、メッセージを Director (アドビ システムズ社の Macromedia Director) に送ることができます。これらのメッセージは、Lingo（Director のスクリプト言語）により、ストリング、イベント、実行可能 Lingo コードのいずれかと解釈されます。メッセージがストリングまたはイベントである場合、<codeph>fscommand()</codeph> 関数からメッセージを受信するための Lingo コードを書き、Director 内でアクションを実行する必要があります。詳細については、<xref href="http://www.adobe.com/jp/support/director/" scope="external">www.adobe.com/jp/support/director/</xref> の Director サポートセンターを参照してください。</p>
 
 <p>シンタックス 4 : ActiveX コントロールに対応した VisualBasic や Visual C++ などのプログラムでは、<codeph>fscommand()</codeph> を使って、その環境のプログラミング言語で処理できる 2 つのストリングを含む VB イベントを送信できます。詳細については、<xref href="http://www.adobe.com/jp/support/flash/" scope="external">www.adobe.com/jp/support/flash/</xref> の Flash サポートセンターで "Flash メソッド" というキーワードを使用して検索してください。</p>
 <p><b>注意：</b>ExternalInterface クラスを使用すると、JavaScript と ActionScript（シンタックス 2）との間、または ActionScript と、VisualBasic や Visual C++ などの ActiveX コントロールに対応した他のプログラム（シンタックス 4）との間の通信機能が向上します。<codeph>fscommand()</codeph> は、メッセージを Flash Player に送信するため（シンタックス 1）および Director に送信するために（シンタックス 3）引き続き使用する必要があります。</p>
 
 </apiDesc><example conref="examples\FSCommandExample.as"> <codeph>fscommand()</codeph> を使用して Flash Player をフルスクリーンモードにし、拡大 / 縮小を許可しないようにする方法を示します。オレンジのボックスが <codeph>draw()</codeph> を使用してステージに追加されます。<codeph>draw()</codeph> では、<codeph>click</codeph> イベントリスナーに名前付き <codeph>clickHandler()</codeph> が追加されます。これは <codeph>click</codeph> イベントに応答して <codeph>fscommand()</codeph> の別の呼び出しを使用して Flash Player に終了を指示します。
 
 <p><b>メモ : </b>この例は、Web ブラウザーではなく、スタンドアローン Flash Player で実行する必要があります。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.system.fscommand;
    import flash.events.MouseEvent;

    public class FSCommandExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function FSCommandExample() {
            fscommand("fullscreen", "true");
            fscommand("allowscale", "false");
            draw();
        }

        private function clickHandler(event:MouseEvent):void {
            fscommand("quit");
            trace("clickHandler");
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;
            addEventListener(MouseEvent.CLICK, clickHandler);

            var label:TextField = new TextField();
            label.text = "quit";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            addChild(child);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiClassifier id="flash.system:IME"><apiName>IME</apiName><shortdesc>
 IME クラスを使用すると、クライアントコンピューターで実行されている Flash Player アプリケーションで、オペレーティングシステムの IME を直接操作できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>オペレーティングシステムの IME を直接操作できます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 IME クラスを使用すると、クライアントコンピューターで実行されている Flash Player アプリケーションで、オペレーティングシステムの IME を直接操作できます。IME がインストールされているかどうか、IME が現在有効になっているかどうかおよびどの IME が有効になっているかを調べることができます。Flash Player アプリケーションで IME を無効または有効にすることができます。また、オペレーティングシステムによっては、その他の限られた機能を使用できます。
 
 <p>IME を使用すると、中国語、日本語、韓国語といったマルチバイトの言語で ASCII 以外の文字を入力できるようになります。IME の使用方法の詳細については、アプリケーションの開発対象である OS のマニュアルを参照してください。追加情報については、次の Web サイトを参照してください。
 <ul>
   <li><xref href="http://www.microsoft.com/globaldev/default.mspx" scope="external">http://www.microsoft.com/globaldev/default.mspx</xref></li>
   <li><xref href="http://developer.apple.com/documentation/" scope="external">http://developer.apple.com/documentation/</xref></li>
   <li><xref href="http://java.sun.com" scope="external">http://java.sun.com</xref></li>
  </ul>
  </p>
 
 <p>IME がユーザーのコンピューターでアクティブではない場合、IME のメソッドまたはプロパティの呼び出しは、<codeph>Capabilities.hasIME</codeph> を除き、失敗します。IME を手動でアクティブにすると、それ以降の IME のメソッドまたはプロパティの ActionScript 呼び出しは、意図したとおりに動作します。例えば、日本語 IME を使用する場合、IME のメソッドまたはプロパティを呼び出す前にアクティブにする必要があります。</p>
 
 <p>次の表に、このクラスのプラットフォーム別の対応状況を示します。</p>
 
 
 <adobetable class="innertable">
  
 
 
 
  
  
 
  
  
 
 <tgroup cols="4"><thead><row><entry>機能</entry><entry>Windows</entry><entry>Mac OSX</entry><entry>Linux</entry></row></thead><tbody><row>
    <entry>IME がインストールされているかどうかの確認 <codeph>Capabilities.hasIME</codeph></entry>
    <entry>可</entry>
    <entry>可</entry>
    <entry>可</entry>
  </row><row>
    <entry>IME のオン / オフ <codeph>IME.enabled</codeph></entry>
    <entry>可</entry>
    <entry>可</entry>
    <entry>可</entry>
  </row><row>
    <entry>IME のオン / オフの確認 <codeph>IME.enabled</codeph></entry>
    <entry>可</entry>
    <entry>可</entry>
    <entry>可</entry>
  </row><row>
    <entry>IME 変換モードの取得または設定 <codeph>IME.conversionMode</codeph></entry>
    <entry>可</entry>
    <entry>可 ~~~~</entry>
    <entry>なし</entry>
  </row><row>
    <entry>変換対象ストリングの IME への送信 <codeph>IME.setCompositionString()</codeph></entry>
    <entry>可 ~~</entry>
    <entry>不可</entry>
    <entry>不可</entry>
  </row><row>
    <entry>IME からの変換前のストリングの取得 <codeph>System.ime.addEventListener()</codeph></entry>
    <entry>可 ~~</entry>
    <entry>不可</entry>
    <entry>不可</entry>
  </row><row>
    <entry>IME への変換要求の送信 <codeph>IME.doConversion()</codeph></entry>
    <entry>可 ~~</entry>
    <entry>不可</entry>
    <entry>不可</entry>
  </row></tbody></tgroup></adobetable>
 
 <p>~~ 一部の Windows IME では、上記のうち一部サポートしていない操作があります。すべての操作をサポートしている IME は、日本語 IME のみです。</p>
 
 <p>~~~~ Macintosh の場合は、日本語 IME でのみこれらのメソッドがサポートされており、サードパーティー製の IME ではサポートされていません。</p>
 <p>このクラスの ActionScript 3.0 バージョンは Macintosh Classic をサポートしていません。</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.system:IME_flash.events.IMEEvent.IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><shortdesc>
 ユーザーが IME 入力を完了し、読み取りストリングが使用可能になったときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IMEEvent.IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events.IMEEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ユーザーが IME 入力を完了し、読み取りストリングが使用可能になったときに送出されます。IME は、通常、日本語、中国語、韓国語など、表音文字ではなく表意文字を持つ言語のテキストを入力するために使用されます。
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.system:IME:compositionAbandoned"><apiName>compositionAbandoned</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:compositionSelectionChanged"><apiName>compositionSelectionChanged</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>start</apiItemName><apiOperationClassifier>int</apiOperationClassifier></apiParam><apiParam><apiItemName>end</apiItemName><apiOperationClassifier>int</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:doConversion"><apiName>doConversion</apiName><shortdesc>
	 現在の入力ストリングの第 1 候補を選択するように IME に指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>呼び出しが成功しませんでした。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 現在の入力ストリングの第 1 候補を選択するように IME に指示します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:setCompositionString"><apiName>setCompositionString</apiName><shortdesc>
	 IME への入力ストリングを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Need some examples of valid values for the param composition.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>呼び出しが成功しませんでした。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>composition</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>IME に送るストリングです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 IME への入力ストリングを設定します。このストリングが設定されると、ユーザーは IME 候補を選択してから、現在フォーカスのあるテキストフィールドの結果を確定できます。
	 <p>どのテキストフィールドにもフォーカスがない場合、このメソッドは失敗し、エラーをスローします。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:IME:conversionMode:get"><apiName>conversionMode</apiName><shortdesc>
	 現在の IME の変換モードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>設定試行が成功しませんでした。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 現在の IME の変換モードです。変換モードを示す、次の IME モードストリング定数を指定できます。
	 <ul>
	 	<li><codeph>ALPHANUMERIC_FULL</codeph></li>
	 	<li><codeph>ALPHANUMERIC_HALF</codeph></li>
 	 	<li><codeph>CHINESE</codeph></li>
	 	<li><codeph>JAPANESE_HIRAGANA</codeph></li>
	 	<li><codeph>JAPANESE_KATAKANA_FULL</codeph></li>
	 	<li><codeph>JAPANESE_KATAKANA_HALF</codeph></li>
 	 	<li><codeph>KOREAN</codeph></li>
	  <li><codeph>UNKNOWN</codeph> (読み取り専用の値であり、設定できません) </li>
	 </ul>
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_FULL"><linktext>flash.system.IMEConversionMode.ALPHANUMERIC_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_HALF"><linktext>flash.system.IMEConversionMode.ALPHANUMERIC_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/CHINESE"><linktext>flash.system.IMEConversionMode.CHINESE</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_HIRAGANA"><linktext>flash.system.IMEConversionMode.JAPANESE_HIRAGANA</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_FULL"><linktext>flash.system.IMEConversionMode.JAPANESE_KATAKANA_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_HALF"><linktext>flash.system.IMEConversionMode.JAPANESE_KATAKANA_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/KOREAN"><linktext>flash.system.IMEConversionMode.KOREAN</linktext></link><link href="flash.system.xml#IMEConversionMode/UNKNOWN"><linktext>flash.system.IMEConversionMode.UNKNOWN</linktext></link></related-links></apiValue><apiValue id="flash.system:IME:enabled:get"><apiName>enabled</apiName><shortdesc>
	 システム IME が有効になっているか (true) 無効になっているか (false) を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>設定試行が成功しませんでした。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 システム IME が有効になっているか (<codeph>true</codeph>) 無効になっているか (<codeph>false</codeph>) を示します。IME が有効であるときはマルチバイト入力になり、IME が無効であるときは英数入力になります。 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.system:System"><apiName>System</apiName><shortdesc>
 System クラスには、ユーザーのコンピューター上で行われる特定の操作（共有オブジェクトの操作、カメラやマイクのローカル設定、クリップボードの使用など）に関連するプロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>System, System object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 System クラスには、ユーザーのコンピューター上で行われる特定の操作（<ph platform="actionscript">共有オブジェクトの操作、カメラやマイクのローカル設定</ph>、クリップボードの使用など）に関連するプロパティが含まれています。
 
 <p>追加のプロパティとメソッドが、flash.system パッケージ内のその他のクラス（Capabilities クラス、<ph platform="actionscript">IME クラス</ph>、Security クラス）にあります。</p>
 
 <p>このクラスには、静的なメソッドとプロパティのみが含まれています。System クラスの新しいインスタンスは作成できません。</p>
 
 </apiDesc><example conref="examples\SystemExample.as"> 次の例は、システムの合計メモリに関する情報をシステムクリップボードにコピーする方法を示しています。<codeph>System.setClipboard()</codeph> メソッドの呼び出し内で <codeph>System.totalMemory</codeph> の呼び出しを使用します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.system.System;

    public class SystemExample extends Sprite {
        public function SystemExample() {
            System.setClipboard("System.totalMemory: " + System.totalMemory);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>flash.system.Security</linktext></link><link href="flash.events.xml#IMEEvent"><linktext>flash.events.IMEEvent</linktext></link></related-links><apiOperation id="flash.system:System:disposeXML"><apiName>disposeXML</apiName><shortdesc>
	 指定した XML オブジェクトを即時にガベージコレクションで処理できるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>XML</apiOperationClassifier><apiDesc>ガベージコレクションで処理できるようにする XML 参照です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した XML オブジェクトを即時にガベージコレクションで処理できるようにします。このメソッドを使用すると、指定した XML ノードに対するすべてのノード間の親接続と子接続が削除されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:exit"><apiName>exit</apiName><shortdesc> 
     Flash Player を閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata><asCustoms><keyword>System, System.exit(), exit()             
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>オペレーティングシステムに渡す値です。通常、処理が正常に終了すると、値は 0 になります。
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc> 
     Flash Player を閉じます。
	 
     <p><i>スタンドアローン Flash Player デバッグ版のみ。</i></p> 
	 
     <p>AIR アプリケーションでは、アプリケーションを終了するために <codeph>NativeApplication.exit()</codeph> メソッドを呼び出す必要があります。</p> 
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.desktop.xml#NativeApplication/exit()"><linktext>flash.desktop.NativeApplication.exit()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:gc"><apiName>gc</apiName><shortdesc>
     ガベージコレクションプロセスを強制します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     ガベージコレクションプロセスを強制します。
	 
     <p><ph platform="actionscript"><i>Flash Player デバッグ版および AIR アプリケーションのみ。</i></ph>AIR アプリケーションでは、<codeph>System.gc()</codeph> メソッドは AIR Debug Launcher（ADL）で実行しているコンテンツ、またはインストールされているアプリケーションではアプリケーションセキュリティサンドボックスのコンテンツでのみ有効になります。</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:pause"><apiName>pause</apiName><shortdesc> 
     Flash Player または AIR Debug Launcher（ADL）を一時停止します。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata><asCustoms><keyword>System, System.pause(), pause()   
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
     <ph platform="actionscript">Flash Player または</ph> AIR Debug Launcher（ADL）を一時停止します。 このメソッドを呼び出したときにアプリケーションで実行が続行されるのは、Socket イベントの配信だけです。
	 
     <p platform="actionscript"><i>Flash Player デバッガー版または AIR Debug Launcher（ADL）のみに対応しています。</i></p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#System/resume()"><linktext>resume()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:resume"><apiName>resume</apiName><shortdesc> 
     System.pause() を呼び出した後、アプリケーションを再開します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata><asCustoms><keyword>System, System.resume(), resume()        
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
     <codeph>System.pause()</codeph> を呼び出した後、アプリケーションを再開します。
	 
     <p platform="actionscript"><i>Flash Player デバッガー版または AIR Debug Launcher（ADL）のみに対応しています。</i></p>  
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#System/pause()"><linktext>pause()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:setClipboard"><apiName>setClipboard</apiName><shortdesc>
	 クリップボードの内容を、指定されたテキストストリングで置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>System.setClipboard, setClipboard
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>string</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>システムクリップボードの現在の内容 (存在する場合) を置き換えるプレーンテキストストリング文字です。
	 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>クリップボードの内容を、指定されたテキストストリングで置き換えます。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 クリップボードの内容を、指定されたテキストストリングで置き換えます。このメソッドは、キー入力やマウスのクリックなどのユーザーイベントに応じて呼び出されたときに、任意のセキュリティコンテキストで動作します。
	 
	 <p>このメソッドは、Flash Player 9 で実行されている SWF コンテンツに提供されます。クリップボードへのストリング内容の追加のみが許可されます。Flash Player 10 のコンテンツと AIR アプリケーションのアプリケーションセキュリティサンドボックスのコンテンツは、<codeph>Clipboard.setData()</codeph> メソッドを呼び出すことができます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiOperation><apiValue id="flash.system:System:ime:get"><apiName>ime</apiName><shortdesc>
	 現在インストールされているシステムの IME です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:IME</apiValueClassifier></apiValueDef><apiDesc>
	 現在インストールされているシステムの IME です。imeComposition イベントに登録するには、このインスタンスで <codeph>addEventListener()</codeph> を呼び出します。
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IMEConversionMode"><linktext>IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:System:totalMemory:get"><apiName>totalMemory</apiName><shortdesc>
     Adobe&amp;#xAE; Flash&amp;#xAE; Player または Adobe&amp;#xAE; AIR&amp;#xAE; で現在使用されているメモリ量（バイト単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Add better description and example, unless private, in which case mark as "at"private.
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     <ph platform="actionscript">Adobe<sup>®</sup> Flash<sup>®</sup> Player または </ph>Adobe<sup>®</sup> AIR<sup>®</sup> で現在使用されているメモリ量（バイト単位）です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:System:useCodePage:get"><apiName>useCodePage</apiName><shortdesc>
	 外部テキストファイルを解釈するときにどのコードページを使用するかを決定するブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>System.useCodepage, useCodepage, Unicode, code page
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 外部テキストファイルを解釈するときにどのコードページを使用するかを決定するブール値です。 このプロパティを <codeph>false</codeph> に設定すると、外部テキストファイルは Unicode として解釈されます。 これらのファイルは、保存する際に Unicode でエンコードする必要があります。このプロパティを <codeph>true</codeph> に設定すると、アプリケーションを実行するオペレーティングシステムの通常のコードページを使用して外部テキストファイルが解釈されます。 <codeph>useCodePage</codeph> のデフォルト値は <codeph>false</codeph> です。
	 
	 <p>（<codeph>Loader.load()</codeph>、URLLoader クラスまたは URLStream を使用して）外部ファイルとしてロードするテキストを Unicode として認識するには、そのファイルを Unicode として保存しておく必要があります。 外部ファイルを Unicode でエンコードするには、Unicode をサポートするアプリケーション（Windows のメモ帳など）でファイルを保存します。</p>
	 
	 <p>Unicode でエンコードされていない外部テキストファイルをロードする際には、<codeph>useCodePage</codeph> を <codeph>true</codeph> に設定してください。データをロードする ファイルの<ph product="flash">最初のフレームの</ph>先頭行として、次のコードを追加します。</p>
	 
	 <pre><codeph>System.useCodePage = true;</codeph></pre>
	 
	 <p>このコードがあると、外部テキストは、オペレーティングシステムの通常のコードページを使用して解釈されます。 一般に、英語の Windows オペレーティングシステムの場合は CP1252、日本語のオペレーティングシステムの場合は Shift-JIS が使用されます。<ph platform="actionscript">Flash Player 6 以降で <codeph>useCodePage</codeph> を <codeph>true</codeph> に設定すると、テキストは Flash Player 5 の場合と同様に扱われます。Flash Player 5 では、すべてのテキストは、Flash Player を実行するオペレーティングシステムの通常のコードページを使用して解釈されていました。</ph></p>
	 
	 <p><codeph>useCodePage</codeph> を <codeph>true</codeph> に設定した場合、外部テキストファイル内で使用されている文字がアプリケーションを実行するオペレーティングシステムの通常のコードページに含まれていないと、そのテキストは表示されません。たとえば、中国語を含む外部テキストファイルをロードする場合、CP1252 コードページを使用するシステムでは、これらの文字を表示できません。CP1252 コードページには中国語が含まれていないためです。</p>
	 
	 <p>アプリケーションで使用する外部テキストファイルをすべてのプラットフォームのユーザーが表示できるようにするには、すべての外部テキストファイルを Unicode でエンコードし、<codeph>useCodePage</codeph> を <codeph>false</codeph> に設定します。 これにより、アプリケーション（<ph platform="actionscript">Flash Player 6 以降</ph>）でテキストが Unicode として解釈されます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:SecurityDomain"><apiName>SecurityDomain</apiName><shortdesc>
	SecurityDomain クラスは、現在のセキュリティ "サンドボックス" を表し、セキュリティドメインとも呼ばれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	SecurityDomain クラスは、現在のセキュリティ "サンドボックス" を表し、セキュリティドメインとも呼ばれます。このクラスのインスタンスを <codeph>Loader.load()</codeph> に渡すことによって、ロードされたメディアを特定のサンドボックスに配置することを要求できます。
	</apiDesc></apiClassifierDetail><apiValue id="flash.system:SecurityDomain:currentDomain:get"><apiName>currentDomain</apiName><shortdesc>
		現在のセキュリティドメインを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc>
		現在のセキュリティドメインを取得します。 
		
		</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#LoaderContext"><linktext>flash.system.LoaderContext</linktext></link></related-links></apiValue></apiClassifier></apiPackage>