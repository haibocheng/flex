<?xml version="1.0"?>
<apiPackage id="flash.text.engine"><apiName>flash.text.engine</apiName><apiDetail/><apiClassifier id="flash.text.engine:TextLine"><apiName>TextLine</apiName><shortdesc>
 TextLine クラスは、テキストを表示リストに表示するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObjectContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextLine クラスは、テキストを表示リストに表示するために使用されます。
 
 <p>ActionScript コードから直接 TextLine オブジェクトを作成することはできません。<codeph>new TextLine()</codeph> を呼び出すと、例外がスローされます。TextLine オブジェクトを作成するには、TextBlock の <codeph>createTextLine()</codeph> メソッドを呼び出します。</p>
 
 <p>TextLine は、その内容をレンダリングするのに必要な最低限の情報をカプセル化します。行のアトムのプロパティについて説明する、いくつかのメソッドを介した操作に役立つ追加情報を取得できます。アトムとは、グラフィックエレメントと文字（結合された文字のグループを含む）の両方、テキスト行を構成する分割できないエンティティについて言及する用語です。これらのメソッドが呼び出されるまで、これらのメソッドが必要とするデータを作成したり、格納したりすることはできません。メモリのオーバーヘッドを避けるため、不必要にアトムデータを作成しないでください。アトムデータが必要なくなった場合、<codeph>flushAtomData()</codeph> メソッドを呼び出して、ガベージコレクションで処理されるようにすることができます。</p>
 
 <p>以下のメソッドおよびプロパティは、アトムデータがまだ存在しない場合にそれらを生成します。</p>
 <ul>
 <li><codeph>atomCount</codeph></li>
 <li><codeph>getAtomBidiLevel()</codeph></li>
 <li><codeph>getAtomBounds()</codeph></li>
 <li><codeph>getAtomCenter()</codeph></li>
 <li><codeph>getAtomIndexAtCharIndex()</codeph></li>
 <li><codeph>getAtomIndexAtPoint()</codeph></li>
 <li><codeph>getAtomGraphic()</codeph></li>
 <li><codeph>getAtomTextBlockBeginIndex()</codeph></li>
 <li><codeph>getAtomTextBlockEndIndex()</codeph></li>
 <li><codeph>getAtomTextRotation()</codeph></li>
 <li><codeph>getAtomWordBoundaryOnLeft()</codeph></li>
 </ul>
 
 
 <p>テキスト行に対する通常のイベント送出処理が終了した後で、テキスト行が有効な場合は、テキスト行に指定されるコンテンツエレメントオブジェクトの <codeph>eventMirror</codeph> プロパティで指定されるイベントディスパッチャにイベントがミラーされます。これらのオブジェクトは、<codeph>TextLine.mirrorRegions</codeph> プロパティに記録されます。イベント通知が失敗または停止した場合や、テキスト行が有効ではない場合は、イベントがミラーされません。</p>
 
 <p>マウスイベントのミラーは特殊なケースです。ミラー領域は実際には表示オブジェクトではないので、<codeph>mouseOver</codeph> イベントと <codeph>mouseOut</codeph> イベントはシミュレートされます。<codeph>rollOver</codeph> イベントと <codeph>rollOut</codeph> イベントはシミュレートされません。自然に発生するすべての <codeph>mouseOver</codeph> イベント、<codeph>mouseOut</codeph> イベント、<codeph>rollOver</codeph> イベントおよび <codeph>rollOut</codeph> イベントは、そのターゲットがテキスト行であるか、テキスト行の子であるかに関係なしに無視され、ミラーされません。</p>
 
 <p>TextLine オブジェクトの起点は、ベースラインの先頭です。ローマン体のベースラインにラテン語のテキストがある行の垂直位置（<codeph>y</codeph> プロパティ）を設定しない場合は、Sprite の最上部の下にテキストのディセンダだけが表示されるので、そこにテキスト行を追加します。次の図を参照してください。</p>
 
 <p><adobeimage alt="テキストのベースライン" href="../../../images/TextLine.gif"/></p>
 
 <p>TextLine クラスには、DisplayObjectContainer、InteractiveObject、DisplayObject、EventDispatcher などの祖先クラスがあり、これらからプロパティやメソッドを継承します。以下に示す継承プロパティは TextLine オブジェクトに適用できません。 </p>
 
 <ul>
 <li><codeph>contextMenu</codeph></li>
 <li><codeph>focusRect</codeph></li>
 <li><codeph>tabChildren</codeph></li>
 <li><codeph>tabEnabled</codeph></li>
 <li><codeph>tabIndex</codeph></li>
 <li><codeph>transform</codeph></li>
 </ul>
 
 <p>これらのプロパティを設定しようとすると、テキストエンジンから IllegalOperationError のエラーがスローされます。これらのプロパティは読み取ることはできますが、常にデフォルト値が設定されています。</p>
 
 </apiDesc><example conref="examples\TextLineExample.as"> 次の例では、様々なテキスト行およびテキストブロックでアトムを介して、<codeph>getAtomBounds()</codeph> を使用して、各テキスト行にフレームを作成する手順を表示します。
    <ol>
        <li>NumericStepper コンポーネントをライブラリに追加します。</li>
         <li>このコードを FLA と同じディレクトリに TextLineExample.as という名前で保存します。</li>
        <li>FLA のプロパティウィンドウでクラスを TextLineExample に設定します。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.FontPosture;
    import flash.text.engine.FontWeight;
    import fl.controls.NumericStepper;
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public class TextLineExample extends Sprite {
        
        private var atomStepper:NumericStepper = new NumericStepper();
        private var atomDataContainer:Sprite;
        private var fontDescriptionItalic:FontDescription = new FontDescription("Arial", FontWeight.NORMAL, FontPosture.ITALIC);
        private var fontDescriptionNormal:FontDescription = new FontDescription("Arial", FontWeight.NORMAL , FontPosture.NORMAL);
        private var textBlock:TextBlock = new TextBlock();
        private var textLine:TextLine;
        
        public function TextLineExample():void {
            
            var myText:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. From the text block, " +
            "the createTextLine() method created these lines, 300 pixels wide, "  +
            "for display." ;
            
            atomStepper.minimum = 0;
            atomStepper.value = 0;
            atomStepper.width = 50;
            addChild(atomStepper);
            atomStepper.x = 20;
            atomStepper.y = 120;
            atomStepper.addEventListener(Event.CHANGE, nsChange);
            
            var directions:String = "Click up / down arrows to frame atoms in text block above.";
            
            var formatItalic:ElementFormat = new ElementFormat(fontDescriptionItalic);
            formatItalic.fontSize = 12;
            var textElement1:TextElement = new TextElement(directions, formatItalic);
            textBlock.content = textElement1;
            createLines(textBlock, 15, 160, 400, this);
            
            var formatNormal:ElementFormat = new ElementFormat(fontDescriptionNormal);
            formatNormal.fontSize = 16;
            var textElement2:TextElement = new TextElement(myText, formatNormal);
            textBlock.content = textElement2;
            createLines(textBlock, 15.0, 20.0, 300, this);
            textLine = textBlock.firstLine;
            atomStepper.maximum = textLine.atomCount - 1;
            showAtom(textLine, 0);
        }
            
        private function nsChange(event:Event):void
        {
            removeAtom(textLine);
            if (atomStepper.value == textLine.atomCount - 1)
            {
                if(textLine != textBlock.lastLine)
                {
                    textLine = textLine.nextLine;
                    atomStepper.maximum = textLine.atomCount - 1;
                    atomStepper.value = 0;
                }
            }
            showAtom(textLine, atomStepper.value);
        }
            
        private function createLines(textBlock, startX, startY, width, container)
        {
            var textLine:TextLine = textBlock.createTextLine (null, width);
            while (textLine)
            {
                textLine.x = startX;
                textLine.y = startY;
                startY += textLine.height + 2;
                container.addChild(textLine);
                textLine = textBlock.createTextLine (textLine, width);
            }
        }
            
        private function showAtom(textLine, i):void
        {
            var box:Sprite = new Sprite();
            var mcGraphics = box.graphics;
            var bounds:Rectangle = textLine.getAtomBounds(i);
            mcGraphics.lineStyle(1, 0xFF0000, 1.0);
            mcGraphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
            textLine.userData = textLine.addChild(box);
            displayAtomData(textLine,i);
        }
            
        private function displayAtomData(textLine, i)
        {
            if(atomDataContainer != null)
                removeChild(atomDataContainer);
            atomDataContainer=new Sprite();
            var format = new ElementFormat(fontDescriptionNormal);
            format.color = 0x00000FF;
            var n:int = 0;
            var nxtY:Number = 0;
            var atomInfo:String = "value of getAtomBidiLevel() is: " + textLine.getAtomBidiLevel(i)+"\n"
            +"value of getAtomCenter() is: " + textLine.getAtomCenter(i)+"\n"
            +"value of getAtomIndexAtCharIndex() is: " + textLine.getAtomIndexAtCharIndex(i)+"\n"
            +"value of getAtomTextBlockBeginIndex() is: " + textLine.getAtomTextBlockBeginIndex(i)+"\n"
            +"value of getAtomTextBlockEndIndex() is: " + textLine.getAtomTextBlockEndIndex(i)+"\n"
            +"value of getAtomTextRotation() is: " + textLine.getAtomTextRotation(i)+"\n";
            var atomtextBlock:TextBlock = new TextBlock();
            var textElement3:TextElement = new TextElement(atomInfo, format);
            atomtextBlock.content = textElement3;
            createLines(atomtextBlock,20,200,500, atomDataContainer)
            addChild(atomDataContainer);
        }
            
        private function removeAtom(textLine):void
        {
            textLine.removeChild(textLine.userData);
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links><apiOperation id="flash.text.engine:TextLine:dump"><apiName>dump</apiName><shortdesc>
	 TextLine の基になるコンテンツを XML ストリングとしてダンプします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 TextLine の基になるコンテンツを XML ストリングとしてダンプします。これは自動化されたテストで役立ちます。これにはテキスト、書式およびレンダリング情報が含まれます。Flash Player デバッグ版でのみ使用可能です。
	 
	 <p>出力について詳しくは、TextBlock.dump() メソッドを参照してください。</p>
	 
	 <p><b>注意：</b>このメソッドからのコンテンツおよび出力のフォーマットは、今後変更される可能性があります。アドビ システムズ社は、このメソッドの後方互換性は保証していません。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/dump()"><linktext>TextBlock.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:flushAtomData"><apiName>flushAtomData</apiName><shortdesc>
	 ガベージコレクションのために行のアトムデータを解放します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 ガベージコレクションのために行のアトムデータを解放します。<i/>「アトム」とは、テキスト行を構成する分割できないエンティティについて言及する用語です。テキストエンジンは、<codeph>atomCount</codeph> プロパティにアクセスするか、アトムに関する情報を取り出すメソッドのどれかを呼び出したときにアトムデータを生成します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>atomCount</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBidiLevel()"><linktext>getAtomBidiLevel()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBounds()"><linktext>getAtomBounds()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomCenter()"><linktext>getAtomCenter()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomGraphic()"><linktext>getAtomGraphic()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtCharIndex()"><linktext>getAtomIndexAtCharIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtPoint()"><linktext>getAtomIndexAtPoint()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockBeginIndex()"><linktext>getAtomTextBlockBeginIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockEndIndex()"><linktext>getAtomTextBlockEndIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>getAtomTextRotation()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomWordBoundaryOnLeft()"><linktext>getAtomWordBoundaryOnLeft()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBidiLevel"><apiName>getAtomBidiLevel</apiName><shortdesc>
	 指定されたインデックス位置にあるアトムの双方向レベルを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムの双方向レベルです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるアトムの双方向レベルを取得します。<codeph>TextBlock.bidiLevel</codeph> と行を構成する文字の Unicode の双方向プロパティの組み合わせで決まります。
	 
	 <p>例えば、テキストブロックがヘブライ語のテキストで始まる場合、<codeph>TextBlock.bidiLevel</codeph> に 1 を設定して、右から左方向をデフォルトに設定します。テキストの中に英語の引用（左から右方向）がある場合は、そのテキストの <codeph>AtomBidiLevel</codeph> には 2 が設定されています。その英語の中にアラビア語（右から左方向）が入っている場合には、<codeph>AtomBidiLevel</codeph> は 3 になります。アラビア語の中で数字（左から右方向）が出てくる場合は、その数字の <codeph>AtomBidiLevel</codeph> の設定値は 4 です。アトムがどの行で終わるかは関係ありません。ヘブライ語のアトムは <codeph>AtomBidiLevel</codeph> が 1、英語のアトムは <codeph>AtomBidiLevel</codeph> が 2、アラビア語のアトムは <codeph>AtomBidiLevel</codeph> が 3、数字のアトムは <codeph>AtomBidiLevel</codeph> が 4 です。</p>
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>TextBlock.bidiLevel</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBounds"><apiName>getAtomBounds</apiName><shortdesc>
	 テキスト行を基準として、指定されたインデックス位置にあるアトムの境界を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムの境界です。
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 テキスト行を基準として、指定されたインデックス位置にあるアトムの境界を取得します。指定されたアトムの境界は、行の水平座標（<codeph>x</codeph>）、行の垂直座標（<codeph>y</codeph>）、幅（<codeph>w</codeph>）および高さ（<codeph>h</codeph>）で構成されます。すべての値はピクセル単位です。 
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomCenter"><apiName>getAtomCenter</apiName><shortdesc>
	 指定されたインデックス位置にあるベースラインに従って測定したアトムの中心を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムの中心です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるベースラインに従って測定したアトムの中心を取得します。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomGraphic"><apiName>getAtomGraphic</apiName><shortdesc>
	 指定されたインデックス位置にあるアトムのグラフィックを取得します（アトムが文字の場合は null）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムのグラフィックです。
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるアトムのグラフィックを取得します（アトムが文字の場合は <codeph>null</codeph>）。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtCharIndex"><apiName>getAtomIndexAtCharIndex</apiName><shortdesc>
	 charIndex パラメーターで指定された文字を含むアトムのインデックスを返します。行内の各アトムにその文字が指定されていない場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>charIndex</codeph> の位置にある文字を含むアトムのインデックスです。行内の各アトムにその文字が指定されていない場合は -1 を返します。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>文字の 0 から始まるインデックス値です。つまり、最初の文字は 0、2 番目の文字は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>charIndex</codeph> パラメーターで指定された文字を含むアトムのインデックスを返します。行内の各アトムにその文字が指定されていない場合は -1 を返します。<codeph>charIndex</codeph> は、行を含むテキストブロックのコンテンツ全体に対する相対的な値です。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtPoint"><apiName>getAtomIndexAtPoint</apiName><shortdesc>
	 x パラメーターおよび y パラメーターで指定されたポイントにあるアトムのインデックスを返します。そのポイントにアトムがない場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>このポイントにあるアトムのインデックスです。指定されたポイントがどのアトムの上にもない場合は -1 を返します。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>stageX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>検査対象のポイントのグローバル <i>x</i> 座標です。
	 </apiDesc></apiParam><apiParam><apiItemName>stageY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>検査対象のポイントのグローバル <i>y</i> 座標です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>x</codeph> パラメーターおよび <codeph>y</codeph> パラメーターで指定されたポイントにあるアトムのインデックスを返します。そのポイントにアトムがない場合は -1 を返します。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 <p>このメソッドが取り出す座標値はグローバル座標なので、<codeph>MouseEvent.stageX</codeph> および <codeph>MouseEvent.stageY</codeph> プロパティと一緒に使うことが簡単にできます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockBeginIndex"><apiName>getAtomTextBlockBeginIndex</apiName><shortdesc>
	 指定されたインデックス位置にあるアトムのテキストブロック開始インデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムのテキストブロック開始インデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるアトムのテキストブロック開始インデックスを取得します。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockEndIndex"><apiName>getAtomTextBlockEndIndex</apiName><shortdesc>
	 指定されたインデックス位置にあるアトムのテキストブロック終了インデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムのテキストブロック終了インデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるアトムのテキストブロック終了インデックスを取得します。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextRotation"><apiName>getAtomTextRotation</apiName><shortdesc>
	 指定されたインデックス位置にあるアトムの回転を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムの回転です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるアトムの回転を取得します。このプロパティには、TextRotation 定数が使用されます。アトムの回転は、エレメントおよび行の累積された回転です。主に、TextLine を操作するときにキャレット（カーソル）の方向を設定するために使用されます。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomWordBoundaryOnLeft"><apiName>getAtomWordBoundaryOnLeft</apiName><shortdesc>
	 指定されたインデックス位置にあるアトムの左側に単語境界があるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定されたアトムのインデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> で指定された位置のアトムの左側に単語境界があるかどうかを示すブール値です。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>アトムの 0 から始まるインデックス値です。つまり、最初のアトムは 0、2 番目のアトムは 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたインデックス位置にあるアトムの左側に単語境界があるかどうかを示します。単語境界は、行に指定される文字の Unicode プロパティに基づいて決定されます。
	 
	 <p>このメソッドを呼び出すと、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getBaselinePosition"><apiName>getBaselinePosition</apiName><shortdesc>
	 TextBlock.baselineZero を基準にして、指定されたベースラインの位置を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>baseline</codeph> が、<codeph>TextBaseline</codeph> のメンバーでない場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>TextBlock.baselineZero</codeph> を基準とする、指定されたベースラインの位置です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>位置を取得するベースラインです。<codeph>TextBaseline</codeph> の値を使用します。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>TextBlock.baselineZero</codeph> を基準にして、指定されたベースラインの位置を取得します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getMirrorRegion"><apiName>getMirrorRegion</apiName><shortdesc>
	 mirror パラメーターの指定と mirror プロパティが一致する、行の最初の TextLineMirrorRegion を返します。一致しない場合は null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された値と <codeph>mirror</codeph> プロパティが一致する行の最初の <codeph>TextLineMirrorRegion</codeph> です。一致しない場合は <codeph>null</codeph> になります。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLineMirrorRegion</apiOperationClassifier></apiReturn><apiParam><apiItemName>mirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiDesc>検索対象の <codeph>EventDispatcher</codeph> ミラーオブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>mirror</codeph> パラメーターの指定と <codeph>mirror</codeph> プロパティが一致する行の最初の <codeph>TextLineMirrorRegion</codeph> を返します。一致しない場合は <codeph>null</codeph> を返します。
	 <p>単一の <codeph>TextElement</codeph> でも、双方向および改行の状態によっては 1 行または複数行に対する複数の <codeph>TextLineMirrorRegion</codeph> オブジェクトを作成できます。<codeph>nextRegion</codeph> および <codeph>previousRegion</codeph> プロパティは、1 つのテキストエレメントから生成されたすべてのミラー領域をリンクします。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextLine:MAX_LINE_WIDTH"><apiName>MAX_LINE_WIDTH</apiName><shortdesc> 
	テキスト行の最大要求幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000000</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	テキスト行の最大要求幅（ピクセル単位）です。 <codeph>TextBlock.createTextLine()</codeph> メソッドはこの定数を <codeph>width</codeph> パラメーターの値を指定しない場合のデフォルト値として使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:userData"><apiName>userData</apiName><shortdesc>
	 作成者が任意のデータをテキスト行に関連付けるための方法を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 作成者が任意のデータをテキスト行に関連付けるための方法を提供します。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:ascent:get"><apiName>ascent</apiName><shortdesc>
	 行のベースラインから最も高さのある文字の最上部までのピクセル数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 行のベースラインから最も高さのある文字の最上部までのピクセル数を指定します。グラフィックエレメントのみを含む TextLine については、<codeph>ascent</codeph> を 0 に設定します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:atomCount:get"><apiName>atomCount</apiName><shortdesc>
	 行内のアトムの数、つまりスペースおよびグラフィックエレメントを含む、分割できないエレメントの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>行の <codeph>validity</codeph> は、<codeph>TextLineValidity.STATIC</codeph> です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 行内のアトムの数、つまりスペースおよびグラフィックエレメントを含む、分割できないエレメントの数です。
	 
	 <p>このプロパティにアクセスすると、まだアトムデータが存在しない場合は、アトムデータが作成されます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:descent:get"><apiName>descent</apiName><shortdesc>
	 行のベースラインから最も下に突き出している文字の最下部までのピクセル数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 行のベースラインから最も下に突き出している文字の最下部までのピクセル数を指定します。グラフィックエレメントのみを含む TextLine については、<codeph>descent</codeph> を 0 に設定します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:hasGraphicElement:get"><apiName>hasGraphicElement</apiName><shortdesc>
	 テキスト行がグラフィックエレメントを含んでいるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 テキスト行がグラフィックエレメントを含んでいるかどうかを示します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:mirrorRegions:get"><apiName>mirrorRegions</apiName><shortdesc>
	 行に関連付けられた、TextLineMirrorRegion オブジェクトを含む Vector です。存在しない場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flash.text.engine:TextLineMirrorRegion"/></apiValueDef><apiDesc>
	 行に関連付けられた、<codeph>TextLineMirrorRegion</codeph> オブジェクトを含む Vector です。存在しない場合は <codeph>null</codeph> になります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:nextLine:get"><apiName>nextLine</apiName><shortdesc>
	 TextBlock 内の次の TextLine。現在の線がブロック内の最後の行である場合、または行の有効性が TextLineValidity.STATIC の場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 内の次の TextLine または <codeph>null</codeph>（現在の線がブロック内の最後の行である場合、または行の有効性が <codeph>TextLineValidity.STATIC</codeph> の場合）。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/previousLine"><linktext>previousLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:previousLine:get"><apiName>previousLine</apiName><shortdesc>
	 TextBlock 内の前の TextLine。これがブロック内の最初の行である場合、または行の有効性が TextLineValidity.STATIC の場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 内の前の TextLine。これがブロック内の最初の行である場合、または行の有効性が <codeph>TextLineValidity.STATIC</codeph> の場合は <codeph>null</codeph> になります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/nextLine"><linktext>nextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:rawTextLength:get"><apiName>rawTextLength</apiName><shortdesc>
	 グラフィックエレメントを表す U+FDEF 文字および行の一部だが表示されない行末の空白を含む、行になったテキストブロック内の生のテキストの長さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 グラフィックエレメントを表す U+FDEF 文字および行の一部だが表示されない行末の空白を含む、行になったテキストブロック内の生のテキストの長さです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement/rawText"><linktext>TextElement.rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:specifiedWidth:get"><apiName>specifiedWidth</apiName><shortdesc>
	 行を作成したときに、TextBlock.createTextLine() メソッドに対して指定された幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 行を作成したときに、<codeph>TextBlock.createTextLine()</codeph> メソッドに対して指定された幅です。この値は、変更によって行の改行処理が再度必要になるのかどうかを判断するときに便利です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link><link href="flash.text.engine.xml#TextLine/unjustifiedTextWidth"><linktext>unjustifiedTextWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 このテキスト行を含む TextBlock。行の有効性が TextLineValidity.STATIC の場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 このテキスト行を含む TextBlock。行の有効性が <codeph>TextLineValidity.STATIC</codeph> の場合は null になります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 テキストブロックの生のテキストで、行の最初にあたる文字のインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 テキストブロックの生のテキストで、行の最初にあたる文字のインデックスです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 テキスト行の論理的な高さ、つまり ascent + descent に等しくなります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 テキスト行の論理的な高さ、つまり <codeph>ascent</codeph> + <codeph>descent</codeph> に等しくなります。インキが使用される高さを取得するには、継承された <codeph>height</codeph> プロパティにアクセスします。
	 
	 <p>値は、TextBlock.baselineZero が文字であるかどうかにより、行を結合する文字の最上部と最下部、またはアセントとディセントのいずれかのベースライン間の差に基づいて計算されます。グラフィックエレメントは、これらのベースラインの計算では考慮されません。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/height"><linktext>flash.display.DisplayObject.height</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 テキスト行の論理的な幅です。テキストエンジンが行をレイアウトするのに使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 テキスト行の論理的な幅です。テキストエンジンが行をレイアウトするのに使用します。継承された <codeph>width</codeph> プロパティにアクセスし、描画されたすべてのピクセルによる境界ボックスの実際の幅を取得します。
	 
	 </apiDesc><example conref="examples\TextLine_textWidthExample.as"> この例では、以前の標準の傾きおよび以前のイタリックの行が表示されています。また、それぞれの場合に <codeph>specifiedWidth</codeph>、<codeph>textWidth</codeph> および <codeph>width</codeph> の各プロパティの値をトレースします。トレース出力は次のとおりです。 
 <ul>
         <li>specifiedWidth：500</li>
      <li>textWidth：268.9921875</li>
      <li>width：269</li>
      <li>specifiedWidth：500</li>
      <li>textWidth：267.52734375</li>
      <li>width：267.55</li>
 </ul>
<codeblock>
 
package {
import flash.display.Sprite;
import flash.text.engine.TextBlock;
import flash.text.engine.TextElement;
import flash.text.engine.TextLine;
import flash.text.engine.FontDescription;
import flash.text.engine.ElementFormat;
import flash.text.engine.FontPosture;

    public class TextLine_textWidthExample extends Sprite {
        
        public function TextLine_textWidthExample() {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
            var yPos:Number = 20;
            var fontDescription:FontDescription = new FontDescription();
            var textBlock:TextBlock = new TextBlock();
            fontDescription.fontPosture = FontPosture.NORMAL;
            var format:ElementFormat = new ElementFormat(fontDescription, 12);
            var textElement:TextElement = new TextElement(str, format);
            textBlock.content = textElement;
            createLine(textBlock, yPos);
            var fontDescriptionItalic = fontDescription.clone();
            fontDescriptionItalic.fontPosture = FontPosture.ITALIC;
            var formatItalic = new ElementFormat(fontDescriptionItalic, 12);
            textElement = new TextElement(str, formatItalic);
            textBlock.content = textElement;
            createLine(textBlock, yPos + 20);
        }

        private function createLine(textBlock:TextBlock, yPos:Number):void {
            var textLine:TextLine = textBlock.createTextLine (null, 500);
            trace("specifiedWidth is: " + textLine.specifiedWidth);
            trace("textWidth is: " + textLine.textWidth);
            trace("width is: " + textLine.width);
            addChild(textLine);
            textLine.x = 15;
            textLine.y = yPos;     
        }
    }
}

</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/specifiedWidth"><linktext>specifiedWidth</linktext></link><link href="flash.display.xml#DisplayObject/width"><linktext>flash.display.DisplayObject.width</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc>
	 位置揃えをしていない場合の行の幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 位置揃えをしていない場合の行の幅です。位置揃えされていないテキストの場合、この値は <codeph>textWidth</codeph> と同じです。位置揃えされているテキストの場合、この値は位置揃えされていなかった場合の長さであり、<codeph>textWidth</codeph> の値が実際の行の幅を表します。例えば、次のストリングが位置揃えされ、幅に 500 を指定して <codeph>TextBlock.createTextLine()</codeph> に送信された場合は、実際の幅が 500 ですが、位置揃えされていない幅は 268.9921875 になります。
	 
	 </apiDesc><example>次の例のストリングが位置揃えされ、幅に 500 を指定して TextBlock.createTextLine() に送信されたときには、実際の幅が 500 になりますが、位置揃えされていない幅は 268.9921875 です。
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import flash.text.engine.TextBlock;
	 import flash.text.engine.TextElement;
	 import flash.text.engine.TextLine;
	 import flash.text.engine.FontDescription;
	 import flash.text.engine.ElementFormat;
	 import flash.text.engine.SpaceJustifier;
	 import flash.text.engine.LineJustification;

	 var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
	 var fontDescription:FontDescription = new FontDescription();
	 var textBlock:TextBlock = new TextBlock();
	 var format:ElementFormat = new ElementFormat(fontDescription, 12);
	 var textElement:TextElement = new TextElement(str, format);
	 textBlock.content = textElement;
	 var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_INCLUDING_LAST);
	 textBlock.textJustifier = spaceJustifier;
	 var textLine:TextLine = textBlock.createTextLine(null, 500);
	 textLine.y = 20;

	 addChild(textLine);
	 trace("textWidth value is: " + textLine.textWidth);		// 500.00244140625
	 trace("unjustifiedTextWidth is: " + textLine.unjustifiedTextWidth); // 268.9921875
	 </codeblock>
	 
	 </example></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextLine/specifiedTextWidth"><linktext>specifiedTextWidth</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:validity:get"><apiName>validity</apiName><shortdesc>
	 テキスト行の現在の有効性を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>現在の値が <codeph>TextLineValidity.STATIC</codeph> の場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>現在の値が <codeph>TextLineValidity.INVALID</codeph> で、新しい値が <codeph>TextValidity.STATIC</codeph> 以外の値である場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>現在の値が <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> で、新しい値が <codeph>TextLineValidity.VALID</codeph> である場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>新しい値が <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> の場合。
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキスト行の現在の有効性を指定します。このプロパティのシステム値は、<codeph>TextLineValidity</codeph> クラスのメンバー内に含まれます。このプロパティの設定規則は、次のようになります。
	 
	 <p>有効性が <codeph>TextLineValidity</codeph> のメンバーではないいずれかのストリングに設定される場合、行は USER_INVALID であると見なされます。USER_INVALID は、このような値を表すためにここで使用される抽象値です。</p>
	 
	 <p>TextBlock のコンテンツが変更されると、Flash Player のコードは、影響を受けたテキスト行、前の行およびすべての継続行を INVALID としてマークします。以前は最初に影響を受けた行にあったコンテンツ部分が、変更によってその前の行に取り込まれるようになる場合、前の行は無効とマークされる必要があります。</p>
	 
	 <p>新しく改行された行は、常に VALID です。Flash Player は、継続行を VALID から POSSIBLY_INVALID または INVALID に変更することがあります。このコードは、改行内容が同じである場合は POSSIBLY_INVALID の行を VALID に、同じでない場合は INVALID に変更します。</p>
	 
	 <p>ユーザーコードでは、VALID の行を INVALID または USER_INVALID とマークしたり、USER_INVALID の行を VALID とマークしたりできます。ユーザーコードは、行を POSSIBLY_INVALID とマークすることはできません。</p>
	 
	 <p>ユーザーコードは、いずれの行も STATIC とマークできます。この操作を行うと、<codeph>block</codeph> メンバーが <codeph>null</codeph> になります。またこれにより、行のアトムデータがクリアされ、再作成されないようになります。STATIC のテキスト行内のグラフィックエレメントが STATIC のテキスト行の派生元であるテキストブロックから改行された新しいテキスト行の部分である場合、それらはすべて削除され、親が再設定されます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabStop"><apiName>TabStop</apiName><shortdesc>
 TabStop クラスは、テキストブロック内のタブストップのプロパティを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TabStop クラスは、テキストブロック内のタブストップのプロパティを表します。タブストップを TabStop オブジェクトの Vector として、<codeph>TextBlock.tabStops</codeph> プロパティに割り当てます。
 
 <p>TabStop オブジェクトが TextBlock に適用された後で TabStop オブジェクトのプロパティを設定しても、TextBlock は無効化されません。</p>
 
 </apiDesc><example conref="examples\TabStopExample.as"> この例では、4 種類のタブストップの整列設定（START、CENTER、DECIMAL、END）の効果について示しています。
<codeblock>
package {
    
    import flash.text.engine.*;
    import flash.display.Sprite;
    
    public class TabStopExample extends Sprite {
        
        public function TabStopExample():void {
            var container:Sprite = new Sprite(); 
            
            var english:ElementFormat = new ElementFormat(); 
            english.fontDescription = new FontDescription("Arial"); 
            english.fontSize = 16;
            english.locale = "en"; 
            
            var tabStops:Vector.&lt;TabStop> = new Vector.&lt;TabStop>();    
            tabStops.push(
                new TabStop(TabAlignment.START, 20),
                new TabStop(TabAlignment.CENTER, 120),
                new TabStop(TabAlignment.DECIMAL, 220, "."),
                new TabStop(TabAlignment.END, 320)
            ); 
    
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(
                "\tstart\tcenter\tdeci.mal\tend\n" +        
                "\tl\tl\t3.4\tl\n" +
                "\tlm\tlm\t234.56\tlm\n" +
                "\tlmn\tlmn\t12345678.34567\tlmn\n"
                , english); 
            textBlock.tabStops = tabStops;
            var y:Number = 60;
            var previousTextLine:TextLine = null; 
            var textLine:TextLine;
            var i:int;
            var tabOrigin:Number = 100;
            for (i = 0; i &lt; 4; i++) {
                textLine = textBlock.createTextLine(previousTextLine, 1000, 0); 
                textLine.x = 20;
                textLine.y = y; 
                
                container.addChild(textLine);     
                
                y += 25; 
                previousTextLine = textLine; 
            }
            addChild(container);        
        }
    }
}

</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>TextBlock.tabStops</linktext></link><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links><apiConstructor id="flash.text.engine:TabStop:TabStop"><apiName>TabStop</apiName><shortdesc>
	 新しい TabStop を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>alignment</codeph> は、<codeph>TabAlignment</codeph> のメンバーではありません。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>alignment</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>start</apiData><apiDesc>このタブストップのタブの整列タイプです。このプロパティの有効な値は、<codeph>TabAlignment</codeph> クラスのメンバー内に含まれます。デフォルト値は、<codeph>TabAlignment.START</codeph> です。
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>タブストップの位置です（ピクセル単位）。デフォルト値は <codeph>0.0</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>decimalAlignmentToken</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc><codeph>alignment</codeph> が <codeph>TabAlignment.DECIMAL</codeph> の場合に使用する整列トークン。デフォルト値は <codeph>""</codeph> です。
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい TabStop を作成します。
     </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:TabStop:alignment:get"><apiName>alignment</apiName><shortdesc>
	 このタブストップのタブの整列を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>TabAlignment</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このタブストップのタブの整列を指定します。TabAlignment クラスの定数を使用して、このプロパティを設定します。
	 
	 <p>デフォルト値は、<codeph>TabAlignment.START</codeph> です。</p>
	 
	 <p><codeph>lineOffset</codeph> 引数（<codeph>TextBlock.createTextLine()</codeph> に対する）を使用すると、行の起点が、同じタブストップを共有する他の行に整列しない場合に、タブを調整できます。</p>
	 
	 <p>TabAlignment クラスの次の定数を使用して、このプロパティの値を設定します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TabAlignment.START</codeph></entry>
	 	<entry><codeph>position</codeph> プロパティは、タブで区切ったテキストの先頭がテキスト行の先頭から何ピクセルの位置かを指定します。<i/></entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.CENTER</codeph></entry>
	 	<entry><codeph>position</codeph> プロパティは、タブで区切ったテキストの中心がテキスト行の先頭から何ピクセルの位置かを指定します。<i/></entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.END</codeph></entry>
	 	<entry><codeph>position</codeph> プロパティは、タブで区切ったテキストの最後尾がテキスト行の先頭から何ピクセルの位置かを指定します。<i/></entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.DECIMAL</codeph></entry>
	 	<entry><codeph>position</codeph> プロパティは、整列トークンがテキスト行の先頭から何ピクセルの位置かを指定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
	 alignment プロパティを TabAlignment.DECIMAL に設定する場合に使用する整列トークンを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>alignment</codeph> プロパティを <codeph>TabAlignment.DECIMAL</codeph> に設定する場合に使用する整列トークンを指定します。値はテキストラインで発生する String になります。
	 
	 <p>デフォルト値は <codeph>""</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment/DECIMAL"><linktext>TabAlignment.DECIMAL</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:position:get"><apiName>position</apiName><shortdesc>
	 テキスト行の先頭を基準としたタブストップの位置です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>0.0 未満の値に設定する場合。
   	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキスト行の先頭を基準としたタブストップの位置です（ピクセル単位）。
	 
	 <p>デフォルト値は 0.0 です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontLookup"><apiName>FontLookup</apiName><shortdesc>
FontLookup クラスは、FontDescription.fontLookup で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontLookup クラスは、<codeph>FontDescription.fontLookup</codeph> で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links><apiValue id="flash.text.engine:FontLookup:DEVICE"><apiName>DEVICE</apiName><shortdesc> 
	デバイスフォントのルックアップを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	デバイスフォントのルックアップを示すために使用します。 SWF ファイルが実行されるシステムにインストールされているフォントが Flash Player によって使用されます。
	
	<p>フォントデータがファイルに含まれないため、デバイスフォントを使用するとムービーサイズが小さくなります。</p>
	
	<p>システムにインストールされているフォントが Flash Player によって使用されるため、デバイスフォントを使用して表示されるテキストは、異なるシステムおよびプラットフォームでは必ずしも同じように表示される訳ではありません。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontLookup:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc> 
	埋め込みの CFF フォントのルックアップを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	埋め込みの CFF フォントのルックアップを示すために使用します。Flash Player は、パブリッシュされた SWF ファイルに埋め込まれたフォントのアウトラインを使用します。
	
	<p>埋め込みフォントを使用するテキストフィールドは、常に選択されたフォントで表示されます。そのフォントが再生システムにインストールされているかどうかは関係ありません。</p>
	
	<p>埋め込みフォントの 1 つの欠点は、SWF ファイルのサイズが大きくなることです。</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TypographicCase"><apiName>TypographicCase</apiName><shortdesc>
TypographicCase クラスは、ElementFormat クラスの typographicCase プロパティの設定のための定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TypographicCase クラスは、ElementFormat クラスの <codeph>typographicCase</codeph> プロパティの設定で使用される定数値の列挙です。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/typographicCase"><linktext>ElementFormat.typographicCase</linktext></link></related-links><apiValue id="flash.text.engine:TypographicCase:CAPS"><apiName>CAPS</apiName><shortdesc> 
	出力時に大文字の間隔が調整されるよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	出力時に大文字の間隔が調整されるよう指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:CAPS_AND_SMALL_CAPS"><apiName>CAPS_AND_SMALL_CAPS</apiName><shortdesc> 
	出力時にすべての小文字でスモールキャップス文字を使用するよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsAndSmallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	出力時にすべての小文字でスモールキャップス文字を使用するよう指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	デフォルトの大文字小文字区別を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	デフォルトの大文字小文字区別を指定します。結果はフォントによって異なります。文字には、フォントデザイナーによって指定された何も機能を適用しない状態の設定が使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 
	出力時にすべての文字で小文字を使用するよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	出力時にすべての文字で小文字を使用するよう指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:SMALL_CAPS"><apiName>SMALL_CAPS</apiName><shortdesc> 
	出力時に大文字でスモールキャップ文字を使用するよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>smallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	出力時に大文字でスモールキャップ文字を使用するよう指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:TITLE"><apiName>TITLE</apiName><shortdesc> 
	出力時にタイトル文字に大文字を使用するよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>title</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	出力時にタイトル文字に大文字を使用するよう指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 
	出力時にすべての文字で大文字を使用するよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	出力時にすべての文字で大文字を使用するよう指定します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitCase"><apiName>DigitCase</apiName><shortdesc>
DigitCase クラスは、ElementFormat クラスの digitCase プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
DigitCase クラスは、ElementFormat クラスの <codeph>digitCase</codeph> プロパティの設定で使用される定数値の列挙です。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitCase"><linktext>flash.text.engine.ElementFormat.digitCase</linktext></link></related-links><apiValue id="flash.text.engine:DigitCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	デフォルトの数字の大文字小文字区別を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	デフォルトの数字の大文字小文字区別を指定するために使用されます。結果はフォントによって異なります。文字には、フォントデザイナーによって指定された何も機能を適用しない状態の設定が使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:LINING"><apiName>LINING</apiName><shortdesc> 
	ライニング数字の大文字小文字区別を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lining</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ライニング数字の大文字小文字区別を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:OLD_STYLE"><apiName>OLD_STYLE</apiName><shortdesc> 
	オールドスタイル数字の大文字小文字区別を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>oldStyle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	オールドスタイル数字の大文字小文字区別を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextElement"><apiName>TextElement</apiName><shortdesc>
 TextElement クラスは、フォーマットされたテキストのストリングを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextElement クラスは、フォーマットされたテキストのストリングを表します。TextElement オブジェクトを、TextBlock オブジェクトの <codeph>content</codeph> プロパティに割り当て、テキストのブロックを作成します。GroupElement オブジェクトに割り当てて、単位として他のテキストエレメントまたはグラフィックエレメントと結合します。テキストをフォーマットするには、ElementFormat クラスを使用します。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:TextElement:TextElement"><apiName>TextElement</apiName><shortdesc>
	 新しい TextElement インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>エレメントのテキストです。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>エレメント内のテキストのエレメント形式です。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>このコンテンツエレメントに基づいたテキスト行に送出されるすべてのイベントのコピーを受け取る <codeph>EventDispatcher</codeph> オブジェクトです。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>エレメントを単位として適用される回転です。このプロパティには、<codeph>flash.text.engine.TextRotation</codeph> 定数を使用します。デフォルト値は、<codeph>flash.text.engine.TextRotation.ROTATE_0</codeph> です。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい TextElement インスタンスを作成します。 
	 
	 </apiDesc><example conref="examples\TextElementExample.as"> 次の例では、テキストのストリングから TextElement オブジェクトを作成し、フォントサイズ 12 と赤（0xCC0000）でフォーマットし、TextBlock の <codeph>content</codeph> プロパティに割り当てます。createLines() 関数を呼び出して、テキストのブロックを改行して、それぞれ 150 ピクセルの行にします。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    
    public class TextElementExample extends Sprite {
        
        public function TextElementExample():void {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:TextElement:replaceText"><apiName>replaceText</apiName><shortdesc>
	 beginIndex パラメーターと endIndex パラメーターで指定された文字範囲を、newText パラメーターの内容に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>beginIndex</codeph> または <codeph>endIndex</codeph> は範囲外です。
     	 
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>置換範囲の開始位置の 0 から始まるインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>置換範囲の終了位置に後続する位置の 0 ベースのインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定された文字範囲の置き換えに使用されるテキストです。
	  
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>beginIndex</codeph> パラメーターと <codeph>endIndex</codeph> パラメーターで指定された文字範囲を、<codeph>newText</codeph> パラメーターの内容に置き換えます。<codeph>beginIndex</codeph> と <codeph>endIndex</codeph> の値は、<codeph>text</codeph> の現在のコンテンツを参照します。
	 <p>テキストを削除するには、<codeph>null</codeph> を <codeph>newText</codeph> に渡します。</p>
	 <p>テキストを挿入するには、<codeph>beginIndex</codeph> および <codeph>endIndex</codeph> に同じ値を渡します。新しいテキストは、指定されたインデックスの前に挿入されます。</p>
	 <p>テキストを追加するには、<codeph>text.length</codeph> を <codeph>beginIndex</codeph> および <codeph>endIndex</codeph> に渡します。</p>
	 <p>すべてのテキストを設定するには、0 を <codeph>beginIndex</codeph> に渡し、<codeph>text.length</codeph> を <codeph>endIndex</codeph> に渡します。</p>
	 
	 </apiDesc><example conref="examples\TextElement_replaceTextExample.as"> この例は、<codeph>replaceText()</codeph> を複数回呼び出して、以下を実行します。
     <ul>
         <li> テキストの起点にストリングを挿入</li>
         <li> テキストの最後にストリングを追加</li>
         <li> テキストの途中にストリングを挿入</li>
        <li> テキストを新しいテキストで完全に置き換え</li>
    </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    
    
    public class TextElement_replaceTextExample extends Sprite {
        public function TextElement_replaceTextExample():void {
            
            var str:String = "0123456";
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 14;
            var textElement:TextElement = new TextElement(str, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textElement.replaceText(0, 0, "abc");  
            createLine(textBlock, 20);           //"abc0123456"
            textElement.replaceText(10, 10, "abc");   
            createLine(textBlock, 40);            // "abc0123456abc"
            textElement.replaceText(5, 8, "abc");
            createLine(textBlock, 60);         // "abc01abc56abc"
            textElement.replaceText(0, 13, "abc");
            createLine(textBlock, 80);            // "abc"
            textElement.replaceText(0, 3, "That's all she wrote!");
            createLine(textBlock, 100);        // "That's all she wrote" */
        }
            
        private function createLine(textBlock:TextBlock, y:Number):void {
            var textLine:TextLine = textBlock.createTextLine(null, 150);
            textLine.x = 10;
            textLine.y = y;
            addChild(textLine);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextElement:text:set"><apiName>text</apiName><shortdesc>
	 エレメントのコンテンツであるテキストを受け取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 エレメントのコンテンツであるテキストを受け取ります。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineValidity"><apiName>TextLineValidity</apiName><shortdesc>
TextLineValidity クラスは、TextLine クラスの validity プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextLineValidity クラスは、TextLine クラスの <codeph>validity</codeph> プロパティの設定で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link></related-links><apiValue id="flash.text.engine:TextLineValidity:INVALID"><apiName>INVALID</apiName><shortdesc> 
	テキスト行が無効であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキスト行が無効であることを指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:POSSIBLY_INVALID"><apiName>POSSIBLY_INVALID</apiName><shortdesc> 
	テキスト行が無効である可能性があることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>possiblyInvalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキスト行が無効である可能性があることを指定します。Flash Player は、この有効性を使用して、コンテンツが変更されていない、以前に改行されたテキストブロックを再改行します。この値は設定できません。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:STATIC"><apiName>STATIC</apiName><shortdesc> 
	行が STATIC で、行とテキストブロックの間の接続が切断されており、レンダリングには不要なアトムデータが破棄されていることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>static</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	行が STATIC で、行とテキストブロックの間の接続が切断されており、レンダリングには不要なアトムデータが破棄されていることを指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:VALID"><apiName>VALID</apiName><shortdesc> 
	テキスト行が有効であることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキスト行が有効であることを指定します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontPosture"><apiName>FontPosture</apiName><shortdesc>
FontPosture クラスは、FontDescription.fontPosture で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontPosture クラスは、<codeph>FontDescription.fontPosture</codeph> で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontPosture"><linktext>flash.text.engine.FontDescription.fontPosture</linktext></link></related-links><apiValue id="flash.text.engine:FontPosture:ITALIC"><apiName>ITALIC</apiName><shortdesc> 
	イタリックのフォントの傾斜を示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	イタリックのフォントの傾斜を示すために使用します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontPosture:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	標準のフォントの傾斜を示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	標準のフォントの傾斜を示すために使用します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:JustificationStyle"><apiName>JustificationStyle</apiName><shortdesc>
JustificationStyle クラスは、EastAsianJustifier クラスの justificationStyle プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
JustificationStyle クラスは、EastAsianJustifier クラスの <codeph>justificationStyle</codeph> プロパティの設定で使用される定数値の列挙です。 これらの定数値は、禁則文字の取扱いオプションを指定します。禁則文字とは日本語の文字で、行の最初や最後にすることのできない文字です。

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/justificationStyle"><linktext>EastAsianJustifier.justificationStyle</linktext></link></related-links><apiValue id="flash.text.engine:JustificationStyle:PRIORITIZE_LEAST_ADJUSTMENT"><apiName>PRIORITIZE_LEAST_ADJUSTMENT</apiName><shortdesc> 
	行の拡張または圧縮（必要な幅に最も近い結果が得られる方）に応じて、位置揃えします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>prioritizeLeastAdjustment</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	行の拡張または圧縮（必要な幅に最も近い結果が得られる方）に応じて、位置揃えします。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_IN_KINSOKU"><apiName>PUSH_IN_KINSOKU</apiName><shortdesc> 
	行末の圧縮される禁則に応じて、または禁則がない場合やスペースが不足している場合の拡張に応じて、位置揃えします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushInKinsoku</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	行末の圧縮される禁則に応じて、または禁則がない場合やスペースが不足している場合の拡張に応じて、位置揃えします。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_OUT_ONLY"><apiName>PUSH_OUT_ONLY</apiName><shortdesc> 
	行の拡張に応じて位置揃えします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushOutOnly</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	行の拡張に応じて位置揃えします。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
 EastAsianJustifier クラスは、コンテンツが主に日中韓のテキストであるテキスト行に対する位置揃えオプションを制御するためのプロパティを持っています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 EastAsianJustifier クラスは、コンテンツが主に日中韓のテキストであるテキスト行に対する位置揃えオプションを制御するためのプロパティを持っています。 
 
 <p> EastAsianJustifier オブジェクトのプロパティを設定する前に、コンストラクター <codeph>new EastAsianJustifier()</codeph> を使用して EastAsianJustifier オブジェクトを作成する必要があります。EastAsianJustifier オブジェクトが TextBlock に適用された後で EastAsianJustifier オブジェクトのプロパティを設定しても、TextBlock は無効化されません。</p>
 
 </apiDesc><example conref="examples\EastAsianJustifierExample.as"> この例は、EastAsianJustifier プロパティを使ってテキストの位置揃えを行った日本語テキストのブロックの縦書き表示です。
<codeblock>
 
package {
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.EastAsianJustifier;
    import flash.text.engine.LineJustification;
    import flash.text.engine.TextRotation;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.display.Stage;
    import flash.display.Sprite;
    import flash.system.Capabilities;
    
    public class EastAsianJustifierExample extends Sprite {
        
        public function EastAsianJustifierExample():void {
            
            var Japanese_txt:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);
            
            var textBlock:TextBlock = new TextBlock();
            var font:FontDescription = new FontDescription();
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0xCC0000;
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_INCLUDING_LAST);
            textBlock.lineRotation = TextRotation.ROTATE_90;
            var linePosition:Number = this.stage.stageWidth - 75;
            if (Capabilities.os.search("Mac OS") > -1) 
                // set fontName: Kozuka Mincho Pro R
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R";                     
            else 
                font.fontName = "Kozuka Mincho Pro R";
            textBlock.content = new TextElement(Japanese_txt, format);
            var previousLine:TextLine = null;
                
            while (true) 
            {
                var textLine:TextLine = textBlock.createTextLine(previousLine, 320);
                if (textLine == null) 
                    break;
                textLine.y = 20;
                textLine.x = linePosition;
                linePosition -= 25;
                addChild(textLine);                
                previousLine = textLine;
            }
        }
    }
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:EastAsianJustifier:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
     EastAsianJustifier オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>locale</codeph> が <codeph>null</codeph> であるか、有効なロケールを表すには短すぎます。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>lineJustification</codeph> は、<codeph>LineJustification</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>justifictionStyle</codeph> は、<codeph>JustificationStyle</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>ja</apiData><apiDesc>位置揃え規則を決定するためのロケールです。デフォルト値は<codeph>「ja」</codeph>です。
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>allButLast</apiData><apiDesc>段落に対する行の位置揃えタイプです。このプロパティには、<codeph>LineJustification</codeph> 定数を使用します。デフォルト値は <codeph>LineJustification.ALL_BUT_LAST</codeph> です。
     </apiDesc></apiParam><apiParam><apiItemName>justificationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>pushInKinsoku</apiData><apiDesc>日中韓の位置揃えを使用した、テキストブロック内のテキストの位置揃えスタイルです。このプロパティには、<codeph>JustificationStyle</codeph> 定数を使用します。デフォルト値は <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> です。
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     EastAsianJustifier オブジェクトを作成します。
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:EastAsianJustifier:clone"><apiName>clone</apiName><shortdesc>
	 EastAsianJustifier のクローンコピーを構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>In the Flash Player 10 release, this method is for internal use. In future releases,
	 users will be able to subclass this class and will then need to use this method. This class is 
	 currently stored as a live reference, but there is no way to track when its properties change.  
	 This means that when changes are made, text blocks are not invalidated, which in the current 
	 implementation can lead to player crashes.  Even from the API perspective its wrong, as the affected 
	 text lines should be marked INVALID when format changes are made, but they�re not. The solution is 
	 to use a copy-on-set model.  When the object is passed in, the player copies it, so later changes to 
	 the object that was passed in have no effect. The setter makes an internal copy of the array; the 
	 getter returns a copy of the internal copy. Operations like 
         myBlock.textJustifier.justificationStyle = JustificationStyle.PUSH_IN_KINSOKU will have no effect. 
         Users who subclass this class in the future will need to use the clone() method to 
	 implement this technique of 'locking' the format once it has been set.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>EastAsianJustifier</codeph> オブジェクトのコピーです。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 EastAsianJustifier のクローンコピーを構築します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:EastAsianJustifier:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
     テキストブロック内のテキストの位置揃えスタイルを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     テキストブロック内のテキストの位置揃えスタイルを指定します。
     
     <p>デフォルト値は <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> です。</p>
     
	 <p>JustificationStyle クラスの定数の 1 つを使用して、このプロパティの値に設定します。次の表に、指定できる値を示します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph></entry>
	 	<entry>追い込みでの位置揃えを指定します。</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PUSH_OUT_ONLY</codeph></entry>
	 	<entry>追い出しでの位置揃えを指定します。</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT</codeph></entry>
	 	<entry>調整を最低限にすることが優先される位置揃えを指定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:RenderingMode"><apiName>RenderingMode</apiName><shortdesc>
RenderingMode クラスにより、flash.text.engine.FontDescription クラスのレンダリングモードの値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
RenderingMode クラスにより、flash.text.engine.FontDescription クラスのレンダリングモードの値を指定します。
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:RenderingMode:CFF"><apiName>CFF</apiName><shortdesc>
	レンダリングモードを CFF に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cff</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	レンダリングモードを CFF に設定します。CFF レンダリングは、ディスプレイ上のテキストを読みやすくします。この設定は、小さなテキストが多いアプリケーションにお勧めします。この定数は、FontDescription クラスの <codeph>renderingMode</codeph> プロパティで使用されます。シンタックス <codeph>RenderingMode.CFF</codeph> を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:RenderingMode:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	レンダリングモードを、Flash Player 7 以前で使用されているレンダリングモードに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	レンダリングモードを、Flash Player 7 以前で使用されているレンダリングモードに設定します。アニメーションテキストでは、この設定をお勧めします。この定数は、FontDescription クラスの <codeph>renderingMode</codeph> プロパティで使用されます。シンタックス <codeph>RenderingMode.NORMAL</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 ElementFormat クラスは、ContentElement に適用できるフォーマット情報を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ElementFormat クラスは、<codeph>ContentElement</codeph> に適用できるフォーマット情報を表します。ElementFormat クラスを使用して、ContentElement の様々なサブクラスに特定のテキストフォーマットを作成します。ElementFormat クラスのプロパティは、デバイスフォントおよび埋めこみフォントに適用されます。 
 
 <p>ElementFormat オブジェクトを TextBlock の ContentElement に適用しても、TextBlock は無効化されません。ElementFormat が ContentElement に適用されると、その <codeph>locked</codeph> プロパティは <codeph>true</codeph> に設定されます。ロックされた ElementFormat オブジェクトのプロパティを変更することはできません。代わりに、<codeph>clone()</codeph> メソッドを使用してオブジェクトのロックされていないコピーを作成し、そのコピーを変更して ContentElement に割り当てることができます。</p>
 
 </apiDesc><example conref="examples\ElementFormatExample.as"> <p>この例では、2 つの <codeph>ElementFormat</codeph> オブジェクトを作成し、複数のプロパティを設定します。次に、新しい ElementFormats を <codeph>TextElement</codeph> オブジェクトに割り当てます。これは、<codeph>TextBlock</codeph> のコンテンツとして割り当てられています。<codeph>TextElement</codeph> の <codeph>ElementFormat</codeph> を変更しても、親 TextBlock によって作成済みの TextLines には影響しません。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormatExample extends Sprite {
        
        public function ElementFormatExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            ef1.alpha = 100;
            ef1.kerning = flash.text.engine.Kerning.ON;
            ef1.trackingRight = 2;
            ef1.typographicCase = flash.text.engine.TypographicCase.UPPERCASE;
            ef1.alignmentBaseline = flash.text.engine.TextBaseline.DESCENT;
            ef1.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
            
            var ef2:ElementFormat = new ElementFormat(fd);
            ef2.fontSize = 30;
            ef2.color = 0xFF0000;
            ef2.alpha = 0.3;
            ef2.kerning = flash.text.engine.Kerning.OFF;
            ef2.typographicCase = flash.text.engine.TypographicCase.LOWERCASE;
            ef2.digitCase = flash.text.engine.DigitCase.OLD_STYLE;
            ef2.textRotation = flash.text.engine.TextRotation.ROTATE_180;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            line1.x = 15;
            line1.y = 30;

            tb.content.elementFormat = ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            line2.x = 15;
            line2.y = 60;
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/elementFormat"><linktext>flash.text.engine.ContentElement.elementFormat</linktext></link></related-links><apiConstructor id="flash.text.engine:ElementFormat:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 	 ElementFormat オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>fontSize</codeph> は、0 未満です。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>textRotation</codeph> は、<codeph>flash.text.engine.TextRotation</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>dominantBaseline</codeph> は、<codeph>flash.text.engine.TextBaseline</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>alignmentBaseline</codeph> は、<codeph>flash.text.engine.TextBaseline</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>kerning</codeph> は、<codeph>flash.text.engine.Kerning</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>breakOpportunity</codeph> は、<codeph>flash.text.engine.BreakOpportunity</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>digitCase</codeph> は、<codeph>flash.text.engine.DigitCase</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>digitWidth</codeph> は、<codeph>flash.text.engine.DigitWidth</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>ligatureLevel</codeph> は、<codeph>flash.text.engine.LigatureLevel</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>typographicCase</codeph> は、<codeph>flash.text.engine.TypographicCase</codeph> のメンバーではありません。
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>このエレメント形式で使用されるフォントを識別する FontDescription オブジェクトです。デフォルト値は <codeph>null</codeph> です。フォントの説明を指定しない場合は、デフォルトのフォントの説明が作成されます。
	 </apiDesc></apiParam><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>テキストのサイズ（ピクセル単位）です。
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0x000000</apiData><apiDesc>テキストカラーです。例えば、0xFF0000 は赤、0x00FF00 は緑など、3 つの 8 ビットの RGB コンポーネントを示す数値です。
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>エレメント形式に応じてすべての行アトムに適用される <codeph>alpha</codeph> プロパティです。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>個々の文字に適用される回転です。このプロパティには、<codeph>flash.text.engine.TextRotation</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>dominantBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>テキスト内の文字の吸着先であるベースラインです。このプロパティには、<codeph>flash.text.engine.TextBaseline</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>alignmentBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>useDominantBaseline</apiData><apiDesc>dominantBaseline の吸着先であるコンテンツ行に対するベースラインです。このプロパティには、<codeph>flash.text.engine.TextBaseline</codeph> 定数を使用します。
     </apiDesc></apiParam><apiParam><apiItemName>baselineShift</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>テキストのベースラインシフト（ピクセル/em 単位）です。
	 </apiDesc></apiParam><apiParam><apiItemName>kerning</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>on</apiData><apiDesc>このテキストに使用されるカーニングです。<codeph>flash.text.engine.Kerning</codeph> を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>trackingRight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>各文字の右側に適用されるトラッキングまたは手動カーニング（ピクセル単位）です。
	 </apiDesc></apiParam><apiParam><apiItemName>trackingLeft</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>各文字の左側に適用されるトラッキングまたは手動カーニング（ピクセル単位）です。
	 </apiDesc></apiParam><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>テキストのロケールです。
     </apiDesc></apiParam><apiParam><apiItemName>breakOpportunity</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>このテキストに適用される改行の条件です。このプロパティには、<codeph>flash.text.engine.BreakOpportunity</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>digitCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>このテキストに使用される数字の大文字小文字区別です。このプロパティには、<codeph>flash.text.engine.DigitCase</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>digitWidth</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>このテキストに使用される数字の幅です。このプロパティには、<codeph>flash.text.engine.DigitWidth</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>ligatureLevel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>common</apiData><apiDesc>このテキストに使用される合字のレベルです。このプロパティには、<codeph>flash.text.engine.LigatureLevel</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>typographicCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>このテキストに使用される文字の大文字小文字区別です。このプロパティには、<codeph>flash.text.engine.TypographicCase</codeph> 定数を使用します。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 ElementFormat オブジェクトを作成します。
	 
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:ElementFormat:clone"><apiName>clone</apiName><shortdesc>
	 ElementFormat のロックされていないクローンコピーを構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>ElementFormat</codeph> オブジェクトのロックされていないコピーです。
	 </apiDesc><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ElementFormat のロックされていないクローンコピーを構築します。
	 
     </apiDesc><example conref="examples\ElementFormat_cloneExample.as"> <p>この例では、<codeph>ElementFormat</codeph> オブジェクトを作成し、<codeph>FontSize</codeph> を設定します。新しい <codeph>TextElement</codeph> が <codeph>ElementFormat</codeph> を使用して作成されます（つまり、ロックされます）。この <codeph>TextElement</codeph> は <codeph>TextBlock</codeph> のコンテンツとして使用されます。テキストの行が、<codeph>TextBlock</codeph> から作成されます。</p>
 <p><codeph>ElementFormat</codeph> オブジェクトを変更するには、その <codeph>locked</codeph> プロパティを最初にチェックします。 true である場合は、<codeph>clone()</codeph> メソッドを使用して <codeph>ElementFormat</codeph> のロックされていないコピーを作成します。次に、そのプロパティを変更し、新しく作成した <codeph>ElementFormat</codeph> オブジェクトを <codeph>TextBlock</codeph> に再リンクします。行が再改行されると、新しい行には新しいフォント設定が使用されます。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormat_cloneExample extends Sprite {
        private var ef1:ElementFormat;
        private var ef2:ElementFormat;
        
        public function ElementFormat_cloneExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize=20;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            ef2 = (ef1.locked) ? ef1.clone() : ef1;    
            ef2.fontSize = 32;

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:ElementFormat:getFontMetrics"><apiName>getFontMetrics</apiName><shortdesc>
	 fontDescription および fontSize で指定されるフォントの em ボックス、取り消し線位置、取り消し線太さ、下線位置および下線太さを記述するプロパティを持つ FontMetrics オブジェクトを返します。
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>fontDescription</codeph> で指定されるフォントのプロパティを記述する <codeph>FontMetrics</codeph> オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <p><codeph>fontDescription</codeph> および <codeph>fontSize</codeph> で指定されるフォントの em ボックス、取り消し線位置、取り消し線太さ、下線位置および下線太さを記述するプロパティを持つ <codeph>FontMetrics</codeph> オブジェクトを返します。</p>
	 
	 </apiDesc><example conref="examples\FontMetricsExample.as"> この例では、割り当てられた <codeph>FontDescription</codeph> を持つ <codeph>ElementFormat</codeph> オブジェクトを作成し、<codeph>getFontMetrics</codeph> メソッドを使用して、選択したフォントに対するメトリックを表示します。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontMetricsExample extends Sprite {
        
        public function FontMetricsExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            var fm1:FontMetrics = ef1.getFontMetrics();
            trace(fm1.emBox);
            trace(fm1.strikethroughOffset);
            trace(fm1.strikethroughThickness);
            trace(fm1.subscriptScale);
            trace(fm1.subscriptOffset);
            trace(fm1.superscriptScale);
            trace(fm1.superscriptOffset);
            trace(fm1.underlineOffset);
            trace(fm1.underlineThickness);
            
            
        }
    }    
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link><link href="flash.text.engine.xml#FontMetrics"><linktext>flash.text.engine.FontMetrics</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:ElementFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
	 dominantBaseline の吸着先になる、エレメントを含む行のベースラインを指定します。つまり、行内のエレメントの垂直座標を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.TextBaseline</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 <codeph>dominantBaseline</codeph> の吸着先になる、エレメントを含む行のベースラインを指定します。つまり、行内のエレメントの垂直座標を決定します。このプロパティには、<codeph>flash.text.engine.TextBaseline</codeph> 定数を使用します。
	 
	 <p><codeph>TextBlock.baselineFontDescription</codeph> および <codeph>TextBlock.baselineFontSize</codeph> が設定され、このロジックより優先されない場合、ベースラインは行内の最大のエレメントで決まります。</p>
	 
	 <p>デフォルト値は <codeph>flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行のローマン体のベースラインに整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行のアセントのベースラインに整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行のディセントのベースラインに整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行の文字最上部のベースラインに整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行の文字の中心のベースラインに整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行の文字最下部のベースラインに整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.USE_DOMINANT_BASELINE</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> が、行の同一のベースラインに整列します。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>グラフィックエレメントの <codeph>dominantBaseline</codeph> が整列する行の整列のベースラインを設定します。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメントの <codeph>dominantBaseline</codeph> が整列する行の整列のベースラインを設定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>flash.text.engine.ElementFormat.dominantBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:alpha:get"><apiName>alpha</apiName><shortdesc>
	 作成者が、エレメント形式に応じてすべての行アトムの alpha プロパティを、指定された Number に自動的に設定するための方法を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 作成者が、エレメント形式に応じてすべての行アトムの <codeph>alpha</codeph> プロパティを、指定された Number に自動的に設定するための方法を提供します。
	 
	 <p>指定されたオブジェクトのアルファ透明度値を示します。有効な値は 0（完全な透明）～ 1（完全な不透明）です。デフォルト値は 1 です。alpha が 0 に設定されている表示オブジェクトは、表示されない場合でも、アクティブです。</p>
	 
	 <p>デフォルト値は <codeph>1.0</codeph> です。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>グラフィックエレメントに指定されたアルファを適用します。グラフィック <codeph>DisplayObject</codeph> 自体または <codeph>TextLine</codeph> に設定されたアルファと乗法的に結合します。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメントに指定されたアルファを適用します。<codeph>TextLine</codeph> に設定されたアルファと乗法的に結合します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
	 エレメントのベースラインシフトを示します（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 エレメントのベースラインシフトを示します（ピクセル単位）。
	 <p>エレメントは、<codeph>dominantBaseline</codeph> から、この量だけ離れます。エレメントのメンバーの y 位置にオフセットが追加されるため、回転されないテキストで正のベースラインシフトはエレメントを下に移動させ、負のベースラインシフトはエレメントを上に移動させます。</p>
	 
	 <p>デフォルト値は <codeph>0.0</codeph>（シフトなし）です。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>グラフィックをベースラインから離します。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストをベースラインから離します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
	 このテキストに適用される改行の条件です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.BreakOpportunity</codeph> のメンバーではない値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに適用される改行の条件です。 折り返しテキストが複数行に分けられるときにどの文字が改行文字として使用できるかは、このプロパティにより決められます。このプロパティには、<codeph>flash.text.engine.BreakOpportunity</codeph> 定数を使用します。
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.BreakOpportunity.AUTO</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>BreakOpportunity.AUTO</codeph></entry>
	 	<entry>改行を行うかどうかの判断は、単語間の区切りやハイフンなど、Unicode 文字プロパティに基づいて行われます。</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ANY</codeph></entry>
	 	<entry><codeph>ContentElement</codeph> オブジェクト内の文字が、改行を行うかどうかの判断に使用されます。通常、ローマン体のテキストが日中韓のテキストに埋め込まれており、単語の途中で改行されることが望ましい場合に使用されます。</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.NONE</codeph></entry>
	 	<entry>範囲内の文字は、改行を行うかどうかの判断に使用されません。</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ALL</codeph></entry>
	 	<entry>範囲内のすべての文字が、改行を行うかどうかの判断に使用されます。パス上のテキストのような効果を作成するのに便利です。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>グループ内で隣接するテキストエレメント間で改行を行うかどうかを判断します。グループの elementFormat が、<codeph>null</codeph> の場合、隣接するエレメントの最初のエレメントのフォーマットが使用されます。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメントの文字間で改行を行うかどうかを判断します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#BreakOpportunity"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:color:get"><apiName>color</apiName><shortdesc>
	 テキストの色を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストの色を示します。3 つの 8 ビット RGB コンポーネントを示す整数（0xFF0000 は赤、0x00FF00 は緑など）です。 
	 
	 <p>デフォルト値は <codeph>0x000000</codeph> で、Flash Player では黒が使用されます。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストの色を設定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
	 このテキストに使用される数字の大文字小文字区別です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.DigitCase</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用される数字の大文字小文字区別です。数字の大文字小文字区別の違いは、数字のグループのスタイルと位置に影響します。このプロパティには、<codeph>flash.text.engine.DigitCase</codeph> 定数を使用します。
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.DigitCase.DEFAULT</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitCase.DEFAULT</codeph></entry>
	 	<entry>デフォルトの数字の大文字小文字区別をテキストに適用します。</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.LINING</codeph></entry>
	 	<entry>ライニング数字の大文字小文字区別をテキストに適用します。</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.OLD_STYLE</codeph></entry>
	 	<entry>オールドスタイル数字の大文字小文字区別をテキストに適用します。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>エレメントのテキストに使用する数字の大文字小文字区別を決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitCase"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
	 このテキストに使用される数字の幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.DigitWidth</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用される数字の幅です。このプロパティには、<codeph>flash.text.engine.DigitWidth</codeph> 定数を使用します。
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.DigitWidth.DEFAULT</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitWidth.DEFAULT</codeph></entry>
	 	<entry>デフォルトの数字の幅をテキストに適用します。</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.PROPORTIONAL</codeph></entry>
	 	<entry>プロポーショナル数字の幅をテキストに適用します。</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.TABULAR</codeph></entry>
	 	<entry>等幅数字の幅をテキストに適用します。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>エレメントのテキストに使用する数字の幅を決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitWidth"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
	 行のエレメントの垂直座標を決定するために alignmentBaseline に吸着させるエレメントのベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.TextBaseline</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。このプロパティには、<codeph>flash.text.engine.TextBaseline</codeph> 定数を使用します。
	 
	 <p>エレメントのコンテンツによりベースラインが決まります。<codeph>TextElement</codeph> の場合、ベースラインはフォントおよびポイントサイズで決まります。<codeph>GraphicElement</codeph> の場合、ベースラインはエレメントの高さで決まります。</p>
	 
	 <p>デフォルト値は <codeph>flash.text.engine.TextBaseline.ROMAN</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>エレメントのローマン体のベースラインが、<codeph>alignmentBaseline</codeph> に整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>エレメントのアセントのベースラインが、<codeph>alignmentBaseline</codeph> に整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>エレメントのディセントのベースラインが、<codeph>alignmentBaseline</codeph> に整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>エレメントの文字最上部のベースラインが、<codeph>alignmentBaseline</codeph> に整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>エレメントの文字の中心のベースラインが、<codeph>alignmentBaseline</codeph> に整列します。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>エレメントの文字最下部のベースラインが、<codeph>alignmentBaseline</codeph> に整列します。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry><codeph>alignmentBaseline</codeph> に整列するグラフィックエレメントのベースラインを決定します。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry><codeph>alignmentBaseline</codeph> に整列するテキストエレメントのベースラインを決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>flash.text.engine.ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontDescription:get"><apiName>fontDescription</apiName><shortdesc>
	 フォントを説明するのに必要なプロパティをカプセル化するオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 フォントを説明するのに必要なプロパティをカプセル化するオブジェクトです。
	 
	 <p>デフォルト値は、デフォルトで作成される FontDescription オブジェクトです。</p>
     
	 <p>fontDescription プロパティが設定されているときは、提供された FontDescription オブジェクトがロックされます。その <codeph>locked</codeph> プロパティは <codeph>true</codeph> に設定されます。ロックされた FontDescription を変更することはできません。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>エレメントのテキストに使用するフォントを決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
	 テキストのサイズ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>0 未満の値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストのサイズ（ピクセル単位）です。 
	 
	 <p>デフォルト値は <codeph>12.0</codeph> です。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>エレメントのテキストのサイズをピクセル単位で指定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 このテキストに使用されるカーニングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用されるカーニングです。このプロパティには、<codeph>flash.text.engine.Kerning</codeph> 定数を使用します。カーニングでは、読みやすくするために、特定の文字ペア間でピクセルを調整します。カーニングは、カーニングテーブルを持つすべてのフォントに対してサポートされています。
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.Kerning.ON</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>Kerning.ON</codeph></entry>
	 	<entry>カーニングが有効にされています。</entry>
	   </row><row>
	 	<entry><codeph>Kerning.OFF</codeph></entry>
	 	<entry>カーニングが無効にされています。</entry>
	   </row><row>
	 	<entry><codeph>Kerning.AUTO</codeph></entry>
	 	<entry>文字体裁で適切な文字に対してのみ、カーニングが有効にされます。カーニングは、漢字、ひらがなまたはカタカナのいずれでもない 2 文字の間に適用されます。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>グループ内で隣接するテキストエレメント間でカーニングが適用されるかどうかを決定します。グループの elementFormat が、<codeph>null</codeph> の場合、隣接するエレメントの最初のエレメントのフォーマットが使用されます。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメントの文字間でカーニングが適用されるかどうかを決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
	 このテキストに使用される合字のレベルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.LigatureLevel</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用される合字のレベルです。2 つ以上の letter-form が 1 つの文字に結合された場合には、合字が起こります。合字は通常、「fi」、「fl」、「ae」などの文字の組の用に共通のコンポーネントを共有する連続した文字を置き換えます。合字は、ラテン語およびラテン語以外の文字セットの両方で使用されます。このプロパティには、<codeph>flash.text.engine.LigatureLevel</codeph> 定数を使用します。
	 
	 <p>デフォルト値は <codeph>flash.text.engine.LigatureLevel.COMMON</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>LigatureLevel.NONE</codeph></entry>
	 	<entry>合字は作成されません。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.MINIMUM</codeph></entry>
	 	<entry>最低限の合字が作成されます。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.COMMON</codeph></entry>
	 	<entry>共通の合字が作成されます。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.UNCOMMON</codeph></entry>
	 	<entry>珍しい合字が作成されます。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.EXOTIC</codeph></entry>
	 	<entry>エキゾチックな合字が作成されます。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>グループ内で隣接するテキストエレメント間で合字のレベルを判断します。グループの elementFormat が、<codeph>null</codeph> の場合、隣接するエレメントの最初のエレメントのフォーマットが使用されます。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメントの文字間で合字のレベルを判断します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LigatureLevel"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:locale:get"><apiName>locale</apiName><shortdesc>
	 テキストのロケールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストのロケールです。大文字小文字変換およびシェイピングを制御します。標準のロケール識別子が使用されます。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。
	 
     <p>デフォルト値は<codeph>「en」</codeph>です。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>エレメントのテキストの大文字小文字変換およびシェイピングを決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:locked:get"><apiName>locked</apiName><shortdesc>
	 ElementFormat がロックされているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 ElementFormat がロックされているかどうかを示します。<codeph>true</codeph> の場合、ElementFormat を変更することはできません。<codeph>ElementFormat.clone()</codeph> を呼び出して ElementFormat オブジェクトのロックされていないコピーを取得します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 個々の文字に適用される回転を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.TextRotation</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 個々の文字に適用される回転を設定します。このプロパティには、<codeph>flash.text.engine.TextRotation</codeph> 定数を使用します。
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.TextRotation.AUTO</codeph> です。</p>
	 
	 <p>任意の文字の最終的な回転は、<codeph>ElementFormat.textRotation</codeph>、<codeph>ContentElement.textRotation</codeph> および <codeph>TextBlock.lineRotation</codeph> の合計になります。</p>
	 
	 <p><codeph>ElementFormat.textRotation</codeph> は、縦書きレイアウトで正しく表示されるように文字を回転させる必要のある日中韓のテキストでよく使用されます。この場合、<codeph>flash.text.engine.TextRotation.AUTO</codeph> を <codeph>TextBlock.lineRotation = flash.text.engine.ROTATE_90</codeph> と組み合わせて使用します。</p>
	 
	 <p>縦書きのレイアウト情報を含まないフォントに対してこのプロパティを設定すると、好ましくない結果になることがあります。 日本語フォントの「MS 明朝」などの vmtx テーブルや VORG テーブルを含むフォントは、正しくレイアウトするためにレイアウトエンジンで必要になるデータがこれらのテーブルによって提供されるので、正しく機能します。必要な情報を持っていない Verdana のようなフォントは正しく機能しません。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>文字は回転しません。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>文字は時計回りに 90 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>文字は 180 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>文字は時計回りに 270 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 <entry>文字の Unicode プロパティに従って、全角文字に対してのみ、反時計回りの 90 度回転を指定します。この値は通常、日中韓のテキストで回転が必要な文字に対してのみ使用されます。この回転は、縦書きテキストにのみ適用され、他の文字に影響を与えずに全角文字を垂直方向に変えます。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメントの文字の回転を決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>flash.text.engine.TextRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>flash.text.engine.ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>flash.text.engine.TextBlock.lineRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
	 各文字の左側に適用されるトラッキングまたは手動カーニング（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 各文字の左側に適用されるトラッキングまたは手動カーニング（ピクセル単位）です。<codeph>kerning</codeph> が有効にされている場合、フォントのカーニングテーブルの値に <codeph>trackingLeft</codeph> 値が追加されます。<codeph>kerning</codeph> が無効にされている場合、<codeph>trackingLeft</codeph> 値が手動カーニングの値として使用されます。正の値と負の値の両方がサポートされます。
	 
	 <p>一般に、必要なトラッキング値は <codeph>trackingRight</codeph> と <codeph>trackingLeft</codeph> の間で分割されます。そうでない場合、つまり複数の方向性が混在しているテキストでは、双方向境界ではトラッキングは 2 倍、それ以外では none となります。</p>
	 
	 <p>デフォルト値は <codeph>0.0</codeph> です。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>グラフィックの左側に適用されるトラッキングを決めます。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメント中の文字の左側に適用されるトラッキングを決めます。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>例：</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingLeft = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingLeft = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
	 各文字の右側に適用されるトラッキングまたは手動カーニング（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 各文字の右側に適用されるトラッキングまたは手動カーニング（ピクセル単位）です。<codeph>kerning</codeph> が有効にされている場合、フォントのカーニングテーブルの値に <codeph>trackingRight</codeph> 値が追加されます。<codeph>kerning</codeph> が無効にされている場合、<codeph>trackingRight</codeph> 値が手動カーニングの値として使用されます。正の値と負の値の両方がサポートされます。
	 
	 <p>一般に、必要なトラッキング値は <codeph>trackingRight</codeph> と <codeph>trackingLeft</codeph> の間で分割されます。そうでない場合、つまり複数の方向性が混在しているテキストでは、双方向境界ではトラッキングは 2 倍、それ以外では none となります。</p>
	 
	 
	 <p>デフォルト値は <codeph>0.0</codeph> です。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>グラフィックの右側に適用されるトラッキングを決めます。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>テキストエレメント中の文字の右側に適用されるトラッキングを決めます。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>例：</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingRight = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingRight = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
	 このテキストに使用される文字の大文字小文字区別です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.TypographicCase</codeph> のメンバーではない値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>ElementFormat オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用される文字の大文字小文字区別です。このプロパティには、<codeph>flash.text.engine.TypographicCase</codeph> 定数を使用します。
	 
	 <p>デフォルト値は <codeph>flash.text.engine.TypographicCase.DEFAULT</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TypographicCase.DEFAULT</codeph></entry>
	 	<entry>デフォルトの文字の大文字小文字区別をテキストに適用します。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.TITLE</codeph></entry>
	 	<entry>出力時にタイトル文字に大文字を使用するよう指定します。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS</codeph></entry>
	 	<entry>出力時に大文字の間隔が調整されるよう指定します。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.SMALL_CAPS</codeph></entry>
	 	<entry>出力時に大文字でスモールキャップ文字を使用するよう指定します。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.UPPERCASE</codeph></entry>
	 	<entry>出力時にすべての文字で大文字を使用するよう指定します。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.LOWERCASE</codeph></entry>
	 	<entry>出力時にすべての文字で小文字を使用するよう指定します。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS_AND_SMALL_CAPS</codeph></entry>
	 	<entry>出力時にすべての小文字でスモールキャップス文字を使用するよう指定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>サブクラス</entry><entry>プロパティ設定の効果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>効果はありません。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>エレメントのテキストに使用する文字の大文字小文字区別を決定します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TypographicCase"><linktext>flash.text.engine.TypographicCase</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
 FontMetrics クラスには、フォントに関する寸法およびオフセットの情報が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 FontMetrics クラスには、フォントに関する寸法およびオフセットの情報が含まれます。<codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> メソッドはこのクラスのオブジェクトを返します。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links><apiConstructor id="flash.text.engine:FontMetrics:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
	 FontMetrics オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>emBox</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>フォントの em ボックスです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>取り消し線のオフセットです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>取り消し線の太さです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>underlineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下線のオフセットです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>underlineThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下線の太さです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下付きのオフセットです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下付きのポイントサイズに適用する拡大 / 縮小率です。
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>上付きのオフセットです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>上付きのポイントサイズに適用する拡大 / 縮小率です。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 FontMetrics オブジェクトを作成します。FontMetrics オブジェクトには、エレメント形式のフォントのメトリックに関する情報が含まれます。<codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> メソッドはこのクラスのオブジェクトを返します。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:FontMetrics:emBox"><apiName>emBox</apiName><shortdesc>
	 em ボックス値は、フォントのデザイン領域を表し、中国語、韓国語または日本語の文字をローマン体のベースラインを基準にして配置するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 em ボックス値は、フォントのデザイン領域を表し、中国語、韓国語または日本語の文字をローマン体のベースラインを基準にして配置するために使用されます。通常は四角形であり、フォントのポイントサイズに合わせられます。em ボックスの起点（座標 0、0）は、四角形の左端およびローマン体のベースラインに設定されます。例えば、10 ポイントのフォントでは、em ボックスの四角形の「左端、上端、右端、下端」は「0、-8.8、10、1.2」になります。
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughOffset"><apiName>strikethroughOffset</apiName><shortdesc>
	 strikethroughOffset 値は、ローマン体のベースラインからの取り消し線に設定可能な垂直方向オフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 strikethroughOffset 値は、ローマン体のベースラインからの取り消し線に設定可能な垂直方向オフセットです。
	 
	 <p>行の回転によって、この値は取り消し線の位置を検索する行の位置から加算または減算されます。<codeph>TextRotation.ROTATE_0</codeph> に設定された行では、<codeph>strikethrough.y = line.y + strikethroughOffset</codeph> になります。<codeph>TextRotation.ROTATE_90</codeph> に設定された行では、<codeph>strikethrough.x = line.x - strikethroughOffset</codeph> になります。</p>
	 
	 <p>取り消し線などの文字飾りを適用する場合、推奨される手順では <codeph>eventMirror</codeph> を指定します。これは、<codeph>ContentElement</codeph> に対して文字飾りを使用します。<codeph>flash.events.Event.ADDED</codeph> イベントに応答して、<codeph>bounds</codeph>（<codeph>TextLineMirrorRegion</codeph> の）を取り消し線を配置する <codeph>strikethroughOffset</codeph> と組み合わせて使用することができます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughThickness"><apiName>strikethroughThickness</apiName><shortdesc>
	 strikethroughThickness 値は、取り消し線に設定可能な太さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 strikethroughThickness 値は、取り消し線に設定可能な太さです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptOffset"><apiName>subscriptOffset</apiName><shortdesc>
	 subscriptOffset 値は、ローマン体のベースラインからの下付きに設定可能な垂直方向オフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 subscriptOffset 値は、ローマン体のベースラインからの下付きに設定可能な垂直方向オフセットです。
	 
	 <p>subscriptOffset 値は、下付きの位置設定のために <codeph>ElementFormat.baselineShift</codeph> と一緒に使用します。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptScale"><apiName>subscriptScale</apiName><shortdesc>
	 subscriptScale 値は、下付きのポイントサイズに適用可能な拡大 / 縮小率です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 subscriptScale 値は、下付きのポイントサイズに適用可能な拡大 / 縮小率です。拡大 / 縮小率が 1.0 の場合は、拡大 / 縮小がないことを意味します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptOffset"><apiName>superscriptOffset</apiName><shortdesc>
	 superscriptOffset 値は、ローマン体のベースラインからの上付きに設定可能な垂直方向オフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 superscriptOffset 値は、ローマン体のベースラインからの上付きに設定可能な垂直方向オフセットです。
	 
	 <p>superscriptOffset 値は、上付きの位置設定のために <codeph>ElementFormat.baselineShift</codeph> と一緒に使用します。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptScale"><apiName>superscriptScale</apiName><shortdesc>
	 superscriptScale 値は、上付きのポイントサイズに適用可能な拡大 / 縮小率です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 superscriptScale 値は、上付きのポイントサイズに適用可能な拡大 / 縮小率です。拡大 / 縮小率が 1.0 の場合は、拡大 / 縮小がないことを意味します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineOffset"><apiName>underlineOffset</apiName><shortdesc>
	 underlineOffset 値は、ローマン体のベースラインからの下線に設定可能な垂直方向オフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 underlineOffset 値は、ローマン体のベースラインからの下線に設定可能な垂直方向オフセットです。
	 
	 <p>行の回転によって、この値は下線の位置を検索する行の位置から加算または減算されます。<codeph>TextRotation.ROTATE_0</codeph> に設定された行では、<codeph>underline.y = line.y + underlineOffset</codeph> になります。<codeph>TextRotation.ROTATE_90</codeph> に設定された行では、<codeph>underline.x = line.x - underlineOffset</codeph> になります。</p>
	 
	 <p>下線などの文字飾りを適用する場合、推奨される手順では、<codeph>eventMirror</codeph> を指定します。これは <codeph>ContentElement</codeph> に対して文字飾りを使用します。<codeph>flash.events.Event.ADDED</codeph> イベントに応答して、<codeph>bounds</codeph>（<codeph>TextLineMirrorRegion</codeph> の）を下線を配置する <codeph>underlineOffset</codeph> と組み合わせて使用することができます。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineThickness"><apiName>underlineThickness</apiName><shortdesc>
	 underlineThickness 値は、下線に設定可能な太さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 underlineThickness 値は、下線に設定可能な太さです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics クラスの概要</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 FontDescription クラスは、フォントを説明するために必要なプロパティを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 FontDescription クラスは、フォントを説明するために必要なプロパティを表します。FontDescription クラスのプロパティは、デバイスフォントおよび埋めこみフォントに適用されます。 
 
 <p>FontDescription オブジェクトは ElementFormat に適用され、その ElementFormat は TextBlock の ContentElement に適用されます。FontDescription が ElementFormat に適用されると、その <codeph>locked</codeph> プロパティは <codeph>true</codeph> に設定されます。ロックされた FontDescription オブジェクトのプロパティを変更することはできません。代わりに、<codeph>clone()</codeph> メソッドを使用してオブジェクトのロックされていないコピーを作成し、そのコピーを変更して ElementFormat に割り当てることができます。</p>
 
 <p><b>注意：</b>FTE は Type 1 フォントやビットマップフォント (Type 3、ATC、sfnt-wrapped CID、Naked CID など) をサポートしていません。</p>
 
 </apiDesc><example conref="examples\FontDescriptionExample.as"> <p>この例では <codeph>FontDescription</codeph> オブジェクトを作成し、それにデバイスフォントを割り当て、様々なフォントプロパティを設定し、<codeph>ElementFormat</codeph> オブジェクトに新しいオブジェクトを割り当てます。追加フォントのフォーマットは <codeph>ElementFormat</codeph> 内で行われます。 新しい <codeph>TextElement</codeph> が作成され、<codeph>ElementFormat</codeph> が指定されています。また、<codeph>TextElement</codeph> が <codeph>TextBlock</codeph> のコンテンツとして使用されます。テキストの行が、<codeph>TextBlock</codeph> から作成されます。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescriptionExample extends Sprite {
        
        public function FontDescriptionExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/fontDescription"><linktext>flash.text.engine.ElementFormat.fontDescription</linktext></link></related-links><apiConstructor id="flash.text.engine:FontDescription:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 	 FontDescription オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>fontWeight</codeph> は、<codeph>flash.text.engine.FontWeight</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>fontPosture</codeph> は、<codeph>flash.text.engine.FontPosture</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>fontLookup</codeph> は、<codeph>flash.text.engine.FontLookup</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>renderingMode</codeph> は、<codeph>flash.text.engine.RenderingMode</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>cffHinting</codeph> は、<codeph>flash.text.engine.CFFHinting</codeph> のメンバーではありません。
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>_serif</apiData><apiDesc>使用するフォント名またはフォント名のコンマ区切りリストです。
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>フォントの太さを指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>フォントの傾きを指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>fontLookup</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>device</apiData><apiDesc>フォントの検索方法を指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>renderingMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>cff</apiData><apiDesc>このテキストに使用されるレンダリングモードです。このプロパティには、<codeph>flash.text.engine.RenderingMode</codeph> 定数を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>cffHinting</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>horizontalStem</apiData><apiDesc>このテキストに使用される CFF ヒンティングのタイプです。このプロパティには、<codeph>flash.text.engine.CFFHintingTextBaseline</codeph> 定数を使用します。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 FontDescription オブジェクトを作成します。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:FontDescription:clone"><apiName>clone</apiName><shortdesc>
	 FontDescription のロックされていないクローンコピーを構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>FontDescription</codeph> オブジェクトのロックされていないコピーです。
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 FontDescription のロックされていないクローンコピーを構築します。
	 
     </apiDesc><example conref="examples\FontDescription_cloneExample.as"> <p>この例では <codeph>FontDescription</codeph> オブジェクトを作成し、それにデバイスフォントを割り当て、様々なフォントプロパティを設定し、<codeph>ElementFormat</codeph> オブジェクトに新しいオブジェクトを割り当てます（つまり、ロックします）。新しい <codeph>TextElement</codeph> が作成され、<codeph>ElementFormat</codeph> が指定されています。また、<codeph>TextElement</codeph> が <codeph>TextBlock</codeph> のコンテンツとして使用されます。テキストの行が、<codeph>TextBlock</codeph> から作成されます。</p>
 <p><codeph>FontDescription</codeph> オブジェクトを変更するには、その <codeph>locked</codeph> プロパティを最初にチェックします。 true である場合は、<codeph>clone()</codeph> メソッドを使用して <codeph>FontDescription</codeph> のロックされていないコピーを作成し、それを新しい ElementFormat オブジェクトに割り当てます。次に、その新しい <codeph>ElementFormat</codeph> を <codeph>TextBlock</codeph> に再リンクします。行が再改行されると、新しい行には新しいフォント設定が使用されます。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescription_cloneExample extends Sprite {
        private var fd:FontDescription;
        private var fd2:FontDescription;
        
        public function FontDescription_cloneExample():void {
            fd = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            fd2 = (fd.locked) ? fd.clone() : fd;    
            fd2.fontWeight = flash.text.engine.FontWeight.NORMAL;
            var ef2:ElementFormat = new ElementFormat(fd2);

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:FontDescription:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Font.fontType が flash.text.FontType.EMBEDDED_CFF の場合に、指定された fontName、fontWeight、fontPosture で利用できる埋め込みフォントがある場合には、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>指定された <codeph>fontWeight</codeph> は、<codeph>flash.text.engine.FontWeight</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>fontPosture</codeph> は、<codeph>flash.text.engine.FontPosture</codeph> のメンバーではありません。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>互換性のある埋め込みフォントが利用できる場合には <codeph>true</codeph>、それ以外の場合には <codeph>false</codeph> となります。
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>チェックする埋め込みフォントの名前です。
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>フォントの太さを指定します。<codeph>flash.text.engine.FontWeight</codeph> を使用します。
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>フォントの傾きを指定します。<codeph>flash.text.engine.FontPosture</codeph> を使用します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された <codeph>fontName</codeph>、<codeph>fontWeight</codeph>、<codeph>fontPosture</codeph> で利用できる埋め込みフォントがあり、<codeph>Font.fontType</codeph> が <codeph>flash.text.FontType.EMBEDDED_CFF</codeph> の場合には、ture を返します。Flash Player 10 を使い始めた段階では、2 種類の埋め込みフォントを SWF ファイルに表示することができます。通常の埋め込みフォントは TextField でのみ使用されます。CFF の埋め込みフォントは flash.text.engine クラスでのみ使用されます。この 2 つのタイプは、<codeph>fontType</codeph> プロパティ（<codeph>Font</codeph> クラス）で区別されます。これは、<codeph>enumerateFonts()</codeph> 関数で返されます。
	 
	 <p>flash.text.engine クラスは <codeph>EMBEDDED</codeph> タイプのフォントを使用できません。<codeph>fontLookup</codeph> が <codeph>FontLookup.EMBEDDED_CFF</codeph> に設定され、指定された名前、太さ、傾きで実行時に利用可能なフォントのタイプが <codeph>EMBEDDED</codeph> の場合には、Flash Player はテキストの表示に文字ごとのベースでデバイスフォントを使用します。これは、指定された名前やスタイルで使用できる埋め込みフォントがないのと同じです。</p>
	 
	 <p>同じ名前、太さ、傾きで <codeph>EMBEDDED</codeph> および <codeph>EMBEDDED_CFF</codeph> フォントの両方が利用できる場合は、<codeph>EMBEDDED_CFF</codeph> フォントが選択され、テキストは <codeph>EMBEDDED_CFF</codeph> フォントで表示されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:FontDescription:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
	 このテキストに使用される CFF ヒンティングのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.CFFHinting</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用される CFF ヒンティングのタイプです。このプロパティには、<codeph>flash.text.engine.CFFHinting</codeph> 定数を使用します。このプロパティは、テキストの <codeph>flash.text.engine.RenderingMode</codeph> プロパティが <codeph>flash.text.engine.RenderingMode.CFF</codeph> に設定されている場合にのみ適用されます。
	 
	 <p>使用される CFF ヒンティングのタイプによって、太い水平線がサブピクセルグリッドに合わされるか合わされないかが決定されます。</p>
	 
	 <p>埋め込みフォントにのみ適用されます。</p>
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.CFFHinting.HORIZONTAL_STEM</codeph> です。</p>
	 
	 <p><codeph>flash.text.engine.CFFHinting</codeph> プロパティでは、次のストリング値を使用できます。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	     <entry><codeph>CFFHinting.NONE</codeph></entry>
	     <entry>CFF ヒンティングは指定しません。文字中の水平線をサブピクセルグリッドに合わせる処理は行われません。これはアニメーションや大きなフォントサイズに適した設定です。</entry>
	   </row><row>
	     <entry><codeph>CFFHinting.HORIZONTAL_STEM</codeph></entry>
	     <entry>CFF ヒンティングを指定します。太い水平線が LCD モニター上でサブピクセルグリッドに合わされます。この設定を使用するには、<codeph>RenderingMode</codeph> プロパティが <codeph>RenderingMode.CFF</codeph> に設定されている必要があります。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#CFFHinting"><linktext>flash.text.engine.CFFHinting</linktext></link><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontDescription:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
	 フォントの検索方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 フォントの検索方法を指定します。
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.FontLookup.DEVICE</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>FontLookup.DEVICE</codeph></entry>
	 	<entry>Flash Player はテキストをレンダリングするローカルシステムの指定された <codeph>name</codeph> でデバイスフォントを検索します。</entry>
	   </row><row>
	  <entry><codeph>FontLookup.EMBEDDED_CFF</codeph></entry>
	 	<entry>Flash Player はテキストをレンダリングする指定された <codeph>name</codeph> で埋め込みの CFF フォントを検索します。<codeph>flash.text.Font.fontType.EMBEDDED_CFF</codeph> タイプのフォントだけが対象となります。指定された CFF フォントが SWF ファイルに埋め込まれていない場合、Flash Player は、それぞれの文字に対するデバイスフォールバックフォントを使用しようとします。このメソッドは、最初からデバイスフォントを選択するより、効率が悪くなります。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontName:get"><apiName>fontName</apiName><shortdesc>
	 使用するフォント名またはフォント名のコンマ区切りリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 使用するフォント名またはフォント名のコンマ区切りリストです。 リスト内の使用できる先頭のフォントを使用してエレメントをレンダリングします。例えば、「Arial, Helvetica, _sans」の場合は、「Arial」が検索され、Arial が見つからないときは「Helvetica」が、それらがいずれも見つからないときは「_sans」が検索されます。
	 
	 <p>Flash は、_ゴシック（Osaka または MS UI Gothic に類似）、_明朝（細明朝、MS P 明朝に類似）、_等幅（Osaka 等幅または MS ゴシックに類似）、_sans（Helvetica または Arial に類似）、_serif（Times Roman に類似）、_typewriter（Courier に類似）という 6 種類の汎用デバイスフォント名をサポートしています。これらのフォント名は、プラットフォームに応じて特定のデバイスフォントにマップされます。</p>
	 
	 <p>デフォルト値は<codeph>「_serif」</codeph>です。</p>
	 
	 <p>Flash Player では、選択されたフォントで見つからない文字に対するフォントフォールバックが提供されています。使用されているフォントが埋め込みフォントであってもデバイスフォントであっても、文字がフォントに見つからない場合、Flash Player は、その文字を含むと思われる別のデバイスフォントを使用する文字をレンダリングしようとします。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontPosture:get"><apiName>fontPosture</apiName><shortdesc>
	 フォントの傾きを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.FontPosture</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 フォントの傾きを指定します。
	 
	 <p>デバイスフォントにのみ適用されます。</p>
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.FontPosture.NORMAL</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>FontPosture.NORMAL</codeph></entry>
	 	<entry>標準フォントの傾斜です。</entry>
	   </row><row>
	  <entry><codeph>FontPosture.ITALIC</codeph></entry>
	 	<entry>イタリックフォントの傾斜です。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
	 フォントの太さを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.FontWeight</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 フォントの太さを指定します。
	 
	 <p>デバイスフォントにのみ適用されます。</p>
	 
	 <p>デフォルト値は <codeph>flash.text.engine.FontWeight.NORMAL</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>FontWeight.NORMAL</codeph></entry>
	 	<entry>標準フォントの太さです。</entry>
	   </row><row>
	  <entry><codeph>FontWeight.BOLD</codeph></entry>
	 	<entry>ボールドフォントの太さです。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:locked:get"><apiName>locked</apiName><shortdesc>
	 FontDescription がロックされているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 FontDescription がロックされているかどうかを示します。<codeph>true</codeph> の場合、FontDescription を変更することはできません。<codeph>FontDescription.clone()</codeph> を呼び出して FontDescription オブジェクトのロックされていないコピーを取得します。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
	 このテキストに使用されるレンダリングモードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>flash.text.engine.RenderingMode</codeph> のメンバーではないいずれかの値に設定する場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>FontDescription オブジェクトのロック後に設定する場合（<codeph>locked</codeph> が <codeph>true</codeph> の場合）。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このテキストに使用されるレンダリングモードです。このプロパティには、<codeph>flash.text.engine.RenderingMode</codeph> 定数を使用します。 
	 
	 <p>埋め込みフォントにのみ適用されます。</p>
	 
	 <p>デフォルト値は、<codeph>flash.text.engine.RenderingMode.CFF</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>RenderingMode.NORMAL</codeph></entry>
	 	<entry>標準のテキストレンダリングを適用します。これは、Flash Player 7 以前のバージョンで使用されているレンダリングのタイプと一致します。</entry>
	   </row><row>
	   	<entry><codeph>RenderingMode.CFF</codeph></entry>
	 	<entry>文字を読みやすくする CFF レンダリングを適用します。これは Flash Player 10 で使用可能になった機能です。 CFF レンダリングでは、小さいサイズのフォントフェイスを高品質でレンダリングすることができます。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
 TextJustifier クラスは、TextBlock に適用可能な位置揃えの種類に対する抽象基本クラスで、EastAsianJustifier クラスおよび SpaceJustifier クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextJustifier クラスは、TextBlock に適用可能な位置揃えの種類に対する抽象基本クラスで、EastAsianJustifier クラスおよび SpaceJustifier クラスです。
 
 <p>TextJustifier クラスを直接インスタンス化することはできません。<codeph>new TextJustifier()</codeph> を呼び出すと <codeph>ArgumentError</codeph> 例外がスローされます。EastAsianJustifier オブジェクトまたは SpaceJustifier オブジェクトが TextBlock に適用された後で EastAsianJustifier オブジェクトまたは SpaceJustifier オブジェクトのプロパティを設定しても、TextBlock は無効化されません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:TextJustifier:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
	 new TextJustifier() コンストラクターを呼び出すと、ArgumentError 例外がスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>locale</codeph> が <codeph>null</codeph> であるか、有効なロケールを表すには短すぎます。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>lineJustification</codeph> は、<codeph>LineJustification</codeph> のメンバーではありません。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>位置揃え規則を決定するためのロケールです。
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>段落に対する行の位置揃えタイプです。このプロパティには、<codeph>LineJustification</codeph> 定数を使用します。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 <codeph>new TextJustifier()</codeph> コンストラクターを呼び出すと、<codeph>ArgumentError</codeph> 例外がスローされます。ただし、<i/>次に示す TextJustifier のサブクラスについてはコンストラクターを呼び出すことができます。
	 
	 <ul>
	 
	 	<li><codeph>new SpaceJustifier()</codeph></li>
	 	<li><codeph>new EastAsianJustifier()</codeph></li>
	 
	 </ul>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextJustifier:clone"><apiName>clone</apiName><shortdesc>
	 TextJustifier のクローンコピーを構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>TextJustifier</codeph> オブジェクトのコピーです。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 TextJustifier のクローンコピーを構築します。
	 
	 <p>TextJustifier のサブクラスによって、このメソッドをオーバーライドする必要があります。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextJustifier:getJustifierForLocale"><apiName>getJustifierForLocale</apiName><shortdesc>
	 指定されたロケールに適切なデフォルトの TextJustifier サブクラスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>指定された <codeph>locale</codeph> が <codeph>null</codeph> であるか、有効なロケールを表すには短すぎます。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>TextJustifier</codeph> オブジェクトへの参照です。
     
     </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>作成される位置揃えを決定するためのロケールです。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたロケールに適切なデフォルトの TextJustifier サブクラスを作成します。
	 
	 <p>ロケールが中国語、韓国語または日本語の場合、このメソッドはデフォルトの EastAsianJustifier オブジェクトを作成します。それ以外の場合、テキストエンジンはデフォルトの SpaceJustifier オブジェクトを作成します。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextJustifier:lineJustification:get"><apiName>lineJustification</apiName><shortdesc>
     テキストブロック内のテキストの行の位置揃えを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     テキストブロック内のテキストの行の位置揃えを指定します。 
     
     <p><codeph>LineJustification</codeph> によって、このプロパティに対する有効な値と定義される次の定数を使用します。</p>
     
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>LineJustification.UNJUSTIFIED</codeph></entry>
	 	<entry>位置揃えされていない行を生成します。</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_BUT_LAST</codeph></entry>
	 	<entry>最後の行以外すべての行を位置揃えして生成します。</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_INCLUDING_LAST</codeph></entry>
	 	<entry>すべての行を位置揃えして生成します。</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextJustifier:locale:get"><apiName>locale</apiName><shortdesc>
     テキストブロック内のテキストの位置揃え規則を決定するためのロケールを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>指定された <codeph>locale</codeph> が <codeph>null</codeph> であるか、有効なロケールを表すには短すぎます。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     テキストブロック内のテキストの位置揃え規則を決定するためのロケールを指定します。標準のロケール識別子が使用されます。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GroupElement"><apiName>GroupElement</apiName><shortdesc>
 GroupElement オブジェクトは、TextElement、GraphicElement、または他の GroupElement オブジェクトの集合をグループ化します。これを全体として TextBlock オブジェクトの content プロパティに割り当てることができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 GroupElement オブジェクトは、TextElement、GraphicElement、または他の GroupElement オブジェクトの集合をグループ化します。これを全体として TextBlock オブジェクトの <codeph>content</codeph> プロパティに割り当てることができます。GroupElement オブジェクトでは、別の GroupElement オブジェクト内で共通フォーマットを共有することもできます。 
 
 <p>GroupElement に他の GroupElement が含まれているときには、内部の GroupElement は独自のフォーマットを保持しています（ElementFormat 設定）。外側の GroupElement のフォーマットは継承しません。</p>
 
 <p>GroupElement に対しては、フォーマットプロパティのほとんどは何の影響も与えません。この理由から、<codeph>elementFormat</codeph> パラメーターが null となっている GroupElement オブジェクトのテキスト行を作成することができます。<codeph>kerning</codeph> や <codeph>ligature</codeph> など小数のフォーマットプロパティは、グループのメンバー間で交差がある箇所に関するフォーマットに影響を与えます。グループが持っているフォーマットが null の場合には、グループのメンバー間で生じる交差におけるフォーマットは、前のエレメントのフォーマットにより決定します。</p>
  
 </apiDesc><example conref="examples\GroupElementExample.as"> この例では、GraphicElement オブジェクトとして赤いボックスを作成し、これを 2 つの TextElement オブジェクトと結合して、GroupElement オブジェクトを作成します。GroupElement オブジェクトを TextBlock の <codeph>content</codeph> プロパティに割り当て、そこから 3 行作成します。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.ContentElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GroupElementExample extends Sprite {
        
        public function GroupElementExample():void {
            
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0, 0, 20, 20);
            redBox.graphics.endFill(); 
            
            var format:ElementFormat = new ElementFormat();
            var fontDescription:FontDescription = new FontDescription("Arial");
            format.fontSize = 16;
            format.fontDescription = fontDescription;
            
            var str1:String = "This red box is a GraphicElement ";
            var str2:String = " in the middle of two TextElements, " +
            " which together make " +
            "up a GroupElement in a TextBlock that is broken into three lines.";
            
            var textElement1:TextElement = new TextElement(str1,format);
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textElement2:TextElement = new TextElement(str2, format);
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>();
            groupVector.push(textElement1, graphicElement, textElement2);
            var groupElement = new GroupElement(groupVector);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = groupElement;
            createTextLines(textBlock);
        }
        
        private function createTextLines(textBlock:TextBlock):void 
        {
        
            var yPos = 20;
            var line_length:Number = 450;
            var textLine:TextLine = textBlock.createTextLine (null, line_length);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.height+8;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, line_length);
            }
        }
    }    
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links><apiConstructor id="flash.text.engine:GroupElement:GroupElement"><apiName>GroupElement</apiName><shortdesc>
	 新しい GroupElement インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>element</codeph> に <codeph>null</codeph> エレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>element</codeph> に、<codeph>ContentElement</codeph> の既知のサブクラスではないエレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>element</codeph> に、<codeph>content</codeph>（<codeph>TextBlock</codeph>）として指定されたエレメントが含まれています。 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>element</codeph> に、既にグループのメンバーであるか、<codeph>elements</codeph> に複数回表示されたエレメントが含まれています。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>elements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiData>null</apiData><apiDesc>GroupElement 内に格納される ContentElement オブジェクトの Vector です。Vector が空の可能性があります。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>グループのエレメント形式です。デフォルト値は <codeph>null</codeph> です。このフォーマットは、グループ内のエレメントが交わる部分に適用されます。これらのエレメントはフォーマットを継承しません。
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>このコンテンツエレメントに基づいて作成されたテキスト行に送出されるすべてのイベントのコピーを受け取る <codeph>EventDispatcher</codeph> オブジェクトです。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>単位としてエレメントに適用される回転です。このプロパティには、<codeph>TextRotation</codeph> 定数を使用します。デフォルト値は、<codeph>TextRotation.ROTATE_0</codeph> です。 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい GroupElement インスタンスを作成します。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:GroupElement:getElementAt"><apiName>getElementAt</apiName><shortdesc>
	 グループ内からエレメントを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index</codeph> が範囲外の場合。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>取得するエレメントのインデックスです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 グループ内からエレメントを取得します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementAtCharIndex"><apiName>getElementAtCharIndex</apiName><shortdesc>
	 charIndex パラメーターで指定された位置の文字を含むエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>charIndex</codeph> が <codeph>0 ～ rawText.length</codeph> の範囲内にない場合。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>charIndex</codeph> で指定された位置の文字を含むエレメントです。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>検索するエレメントの文字に対する 0 から始まるインデックス値です。0 の値はグループ内の最初の文字に対応します。TextBlock 内の最初の文字ではありません。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>charIndex</codeph> パラメーターで指定された位置の文字を含むエレメントを返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
	 element パラメーターで指定されたエレメントのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>element</codeph> で指定されたエレメントのインデックスです。エレメントがグループ内にない場合は -1 になります。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiDesc>インデックスを検索するグループのエレメントです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>element</codeph> パラメーターで指定されたエレメントのインデックスを返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:groupElements"><apiName>groupElements</apiName><shortdesc>
	 beginIndex パラメーターと endIndex パラメーターで指定されたエレメント範囲を、これらのエレメントを含む新しい GroupElement に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>beginIndex</codeph> または <codeph>endIndex</codeph> が範囲外の場合。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>新しいグループです。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:GroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>グループ化する範囲の開始位置の 0 から始まるインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>グループ化する範囲の終了位置の後の 0 から始まるインデックス値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>beginIndex</codeph> パラメーターと <codeph>endIndex</codeph> パラメーターで指定されたエレメント範囲を、これらのエレメントを含む新しい <codeph>GroupElement</codeph> パラメーターに置き換えます。意図したとおり、beginIndex から endIndex-1 までのエレメントが置き換えられます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:mergeTextElements"><apiName>mergeTextElements</apiName><shortdesc>
	 エレメントのフォーマットに影響を与えずに、beginIndex パラメーターと endIndex パラメーターで指定されたエレメントの範囲からのテキストを beginIndex で指定されたエレメントに結合します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>beginIndex</codeph> または <codeph>endIndex</codeph> が範囲外の場合。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>指定された範囲内のいずれかのエレメントが TextElement ではない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>範囲内の最初のテキストエレメントに、範囲内のすべてのテキストが含まれるようになります。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>結合範囲の開始位置の 0 から始まるインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>結合範囲の終了位置に後続する位置の 0 ベースのインデックス値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 エレメントのフォーマットに影響を与えずに、<codeph>beginIndex</codeph> パラメーターと <codeph>endIndex</codeph> パラメーターで指定されたエレメントの範囲からのテキストを <codeph>beginIndex</codeph> で指定されたエレメントに結合します。意図したとおり、beginIndex から endIndex-1 までのエレメントからのテキストが結合されます。テキストが結合された後、beginIndex+1 から endIndex-1 までのエレメントはグループ解除されて孤立化し、<codeph>group</codeph> プロパティが <codeph>null</codeph> になります。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:replaceElements"><apiName>replaceElements</apiName><shortdesc>
	 beginIndex パラメーターと endIndex パラメーターで指定されたエレメント範囲を、newElements パラメーターの内容に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>beginIndex</codeph> または <codeph>endIndex</codeph> は範囲外です。
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>newElements</codeph> に <codeph>null</codeph> エレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>newElements</codeph> に <codeph>this</codeph> が含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>newElements</codeph> に、<codeph>ContentElement</codeph> の既知のサブクラスではないエレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>newElements</codeph> に、<codeph>content</codeph>（<codeph>TextBlock</codeph>）として指定されたエレメントが含まれています。 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>newElements</codeph> に、既にグループのメンバーであるか、<codeph>elements</codeph> に複数回表示されたエレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>処理の結果、<codeph>GroupElement</codeph> 内で回転がネストする場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>置き換えられたエレメントを含む Vector です。
	  
     </apiDesc><apiType value="Vector$flash.text.engine:ContentElement"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>置換範囲の開始位置の 0 から始まるインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>置換範囲の終了位置に後続する位置の 0 ベースのインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>newElements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiDesc>指定されたエレメント範囲の置き換えに使用されるエレメントです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>beginIndex</codeph> パラメーターと <codeph>endIndex</codeph> パラメーターで指定されたエレメント範囲を、<codeph>newElements</codeph> パラメーターの内容に置き換えます。意図したとおり、beginIndex から endIndex-1 までのエレメントが置き換えられます。
	 <p>エレメントを削除するには、<codeph>null</codeph> を <codeph>newElements</codeph> に渡します。</p>
	 <p>エレメントを挿入するには、<codeph>beginIndex</codeph> および <codeph>endIndex</codeph> に同じ値を渡します。新しいエレメントは、指定されたインデックスの前に挿入されます。</p>
	 <p>エレメントを追加するには、<codeph>elementCount</codeph> を <codeph>beginIndex</codeph> および <codeph>endIndex</codeph> に渡します。</p>
	 <p>処理の後、置き換えられたエレメントは孤立化し、<codeph>group</codeph> プロパティが <codeph>null</codeph> になります。</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:setElements"><apiName>setElements</apiName><shortdesc>
	 グループ内のエレメントを Vector のコンテンツに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>value</codeph> に <codeph>null</codeph> エレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>value</codeph> に <codeph>this</codeph> が含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>value</codeph> に、<codeph>ContentElement</codeph> の既知のサブクラスではないエレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>value</codeph> に、<codeph>TextBlock</codeph> の <codeph>content</codeph> として指定されたエレメントが含まれています。 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>value</codeph> に、既にグループのメンバーであるか、<codeph>value</codeph> に複数回表示されたエレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>処理の結果、<codeph>GroupElement</codeph> 内で回転がネストする場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/></apiParam></apiOperationDef><apiDesc>
	 グループ内のエレメントを Vector のコンテンツに設定します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:splitTextElement"><apiName>splitTextElement</apiName><shortdesc>
	 グループ内の TextElement の部分を、指定された TextElement の次にそのグループに挿入される新しい TextElement に分割します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>elementIndex</codeph> または <codeph>charIndex</codeph> が範囲外の場合。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>elementIndex</codeph> の位置のエレメントが TextElement ではない場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>元のテキストエレメントの後ろの部分を含む新しいテキストエレメントです。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>グループ内のエレメントの位置の 0 から始まるインデックス値です。
	 </apiDesc></apiParam><apiParam><apiItemName>splitIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>分割が発生する TextElement 内の文字の 0 から始まるインデックス値です。指定された文字は、新しい TextElement 内の最初の文字になります。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 グループ内の TextElement の部分を、指定された TextElement の次にそのグループに挿入される新しい TextElement に分割します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:ungroupElements"><apiName>ungroupElements</apiName><shortdesc>
	 groupIndex が外側の GroupElement オブジェクト内で指定するネストされた GroupElement のエレメントをグループ解除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>groupIndex</codeph> が範囲外の場合。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>groupIndex</codeph> の位置のエレメントが GroupElement ではない場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>groupIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>分割されるグループの位置の 0 から始まるインデックス値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>groupIndex</codeph> が外側の GroupElement オブジェクト内で指定するネストされた GroupElement のエレメントをグループ解除します。処理後、グループ解除されたエレメントは、ネストされた GroupElement に置き換えられて孤立化し、<codeph>group</codeph> プロパティが <codeph>null</codeph> になります。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:GroupElement:elementCount:get"><apiName>elementCount</apiName><shortdesc>
	 グループ内のエレメント数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 グループ内のエレメント数です。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ContentElement"><apiName>ContentElement</apiName><shortdesc>
 ContentElement クラスは、GroupElement に表示されるエレメントタイプ、つまり、GraphicElement、別の GroupElement または TextElement に対する基本クラスとして機能します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ContentElement クラスは、GroupElement に表示されるエレメントタイプ、つまり、GraphicElement、別の GroupElement または TextElement に対する基本クラスとして機能します。
 
 <p>ContentElement は抽象基本クラスであるため、ContentElement を直接インスタンス化することはできません。<codeph>new ContentElement()</codeph> を呼び出すと <codeph>ArgumentError</codeph> 例外がスローされます。 </p>
 
 <p>ContentElement エレメントは、1 つの <codeph>GroupElement</codeph> にだけ、または 1 つのテキストブロックの <codeph>content</codeph> にだけ割り当てることができます。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock/content"><linktext>TextBlock.content</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links><apiConstructor id="flash.text.engine:ContentElement:ContentElement"><apiName>ContentElement</apiName><shortdesc>
	new ContentElement() コンストラクターを呼び出すと、ArgumentError 例外がスローされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>エレメント内のテキストのエレメント形式です。デフォルト値は <codeph>null</codeph> です。
	</apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>このコンテンツエレメントに基づいて作成された有効なテキスト行に送出されるすべてのイベントのコピーを受け取る <codeph>EventDispatcher</codeph> オブジェクトです。デフォルト値は <codeph>null</codeph> です。
	</apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>エレメントを単位として適用される回転です。このプロパティには、<codeph>TextRotation</codeph> 定数を使用します。デフォルト値は、<codeph>TextRotation.ROTATE_0</codeph> です。
   	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	<codeph>new ContentElement()</codeph> コンストラクターを呼び出すと、<codeph>ArgumentError</codeph> 例外がスローされます。ただし、次に示す ContentElement のサブクラスについては、コンストラクターを呼び出すことができます<i/>。
	
	<ul>
	
		<li><codeph>new GraphicElement()</codeph></li>
		<li><codeph>new GroupElement()</codeph></li>
		<li><codeph>new TextElement()</codeph></li>
	
	</ul>
	
 	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.engine:ContentElement:GRAPHIC_ELEMENT"><apiName>GRAPHIC_ELEMENT</apiName><shortdesc> 
	テキスト内にグラフィックエレメントが存在するかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFDEF</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	テキスト内にグラフィックエレメントが存在するかどうかを示します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/rawText"><linktext>rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:userData"><apiName>userData</apiName><shortdesc>
	 作成者が任意のデータをエレメントに関連付けるための方法を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 作成者が任意のデータをエレメントに関連付けるための方法を提供します。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:elementFormat:get"><apiName>elementFormat</apiName><shortdesc>
	 エレメントに使用される ElementFormat オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ElementFormat</apiValueClassifier></apiValueDef><apiDesc>
	 エレメントに使用される ElementFormat オブジェクトです。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 <p>elementFormat プロパティが設定されているときは、提供された ElementFormat オブジェクトがロックされます。その <codeph>locked</codeph> プロパティは <codeph>true</codeph> に設定されます。ロックされた ElementFormat を変更することはできません。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:eventMirror:get"><apiName>eventMirror</apiName><shortdesc>
	 このコンテンツエレメントに基づいた有効なテキスト行に送出されるすべてのイベントのコピーを受け取る EventDispatcher オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 このコンテンツエレメントに基づいた有効なテキスト行に送出されるすべてのイベントのコピーを受け取る <codeph>EventDispatcher</codeph> オブジェクトです。実行時に行のどの部分が特定のコンテンツエレメントに基づいて作成されたかを判断することは困難な場合があるため、指定されたオブジェクトを使用して、テキストのテキストリンクまたは他のインタラクティブ要素に対するリスナーを設定できます。リスナーを使用して、下線やテキストがレイアウトされるまで決定できないメトリックなど文字飾りを適用することもできます。 デフォルト値は <codeph>null</codeph> です。これは、ミラーされるイベントが送出されないことを意味します。
	 
	 <p>イベントミラーは、<codeph>TextLineMirrorRegion</codeph> クラスのインスタンスなどのテキスト行に明示されます。双方向処理および改行によって、1 つ以上のミラー領域が作成されます。</p>
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextElement/eventMirror"><linktext>TextElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:groupElement:get"><apiName>groupElement</apiName><shortdesc>
	 このエレメントを含む GroupElement オブジェクトです。グループ内に存在しない場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:GroupElement</apiValueClassifier></apiValueDef><apiDesc>
	 このエレメントを含む GroupElement オブジェクトです。グループ内に存在しない場合は <codeph>null</codeph> になります。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:rawText:get"><apiName>rawText</apiName><shortdesc>
	 U+FDEF 文字を含む、エレメント内のテキストのコピーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 U+FDEF 文字を含む、エレメント内のテキストのコピーです。U+FDEF 文字は、String 内のグラフィックエレメントを表す任意の文字です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:text:get"><apiName>text</apiName><shortdesc>
	 String 内でグラフィックエレメントを表す U+FDEF 文字を含まない、エレメント内のテキストのコピーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 String 内でグラフィックエレメントを表す U+FDEF 文字を含まない、エレメント内のテキストのコピーです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextElement/text"><linktext>TextElement.text</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 このエレメントが含まれる TextBlock です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 このエレメントが含まれる TextBlock です。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 このエレメントの最初の文字のテキストブロック内のインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 このエレメントの最初の文字のテキストブロック内のインデックスです。この値はキャッシュされません。このメソッドが呼び出されるたびに算出されます。
	 
	 <p>デフォルト値は -1 です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 エレメントを単位として適用される回転です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>TextRotation</codeph> のメンバーではないいずれかの値に設定する場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>TextRotation.AUTO</codeph> に設定する場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>処理の結果、<codeph>GroupElement</codeph> 内で回転がネストする場合。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 エレメントを単位として適用される回転です。このプロパティには、<codeph>TextRotation</codeph> 定数を使用します。
	 
	 <p>デフォルト値は、<codeph>TextRotation.ROTATE_0</codeph> です。</p>
	 
	 <p>任意の文字の最終的な回転は、ElementFormat.textRotation、ContentElement.textRotation および TextBlock.lineRotation の合計になります。</p>
	 
	 <p><codeph>ContentElement.textRotation</codeph> は、それを含む行とは回転が異なる短いテキストを作成するために使用されます。日本語テキスト内の TCY（縦中横）のテキスト範囲は、この一例です。TCY とは、縦、中、横を表しており、縦書きの日本語テキストの中で使用される小さな横書きのテキスト（通常は数字）です。TCY のテキスト範囲を含む、縦書きの日本語テキストの Paragraph を作成するには、次の処理を行います。</p>
	 <ol>
	 <li><codeph>TextBlock.lineRotation=TextRotation.ROTATE_90</codeph> と設定します。</li>
	 <li><codeph>TextBlock.content</codeph> を、3 つの <codeph>TextElement</codeph> オブジェクトで構成される <codeph>GroupElement</codeph> に設定します。これらのエレメントのうち、1 番目は TCY のテキスト範囲の前にある日本語テキスト、2 番目は TCY のラテン語のテキスト範囲、3 番目は TCY のテキスト範囲の後にある日本語テキストです。</li>
	 <li>TCY の <codeph>TextElement</codeph> の <codeph>textRotation</codeph> プロパティを <codeph>TextRotation.ROTATE_270</codeph> に設定します。TCY のテキストエレメントは、単位として回転します。この回転は、行から継承された 90 度回転で開始されます。さらに 270 度回転させると、水平方向に戻ります。</li>
	 </ol>
	 
	 <p>回転したコンテンツエレメントは、ネストできません。コンテンツエレメントのどの階層でも、複雑さの程度に関係なく、1 つのコンテンツエレメントの <codeph>textRotation</codeph> プロパティだけを設定できます。以下のメソッドおよびプロパティの setter は、ネストされた回転が検出されると引数エラーをスローします。</p>
	 <ol>
	 <li><codeph>ContentElement.textRotation</codeph></li>
	 <li><codeph>GroupElement.setElements</codeph></li>
	 <li><codeph>GroupElement.replaceElements</codeph></li>
	 </ol>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>エレメントは、回転されません。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>エレメントは時計回りに 90 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>エレメントは 180 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>エレメントは時計回りに 270 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>サポートされません。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 TextBlock クラスは、表示リストに配置して表示できる TextLine オブジェクトを作成するためのファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextBlock クラスは、表示リストに配置して表示できる TextLine オブジェクトを作成するためのファクトリです。
 
 <p>Unicode 双方向アルゴリズムおよび改行アルゴリズムは一度に 1 つの段落に対して実行されるので、TextBlock クラスは単一の段落が含まれることを想定しています。複数の段落でテキストを構成するアプリケーションは、テキストを段落に分割し、段落ごとに 1 つの TextBlock を作成するために、マークアップ言語またはテキスト解析を使用します。</p>
 
 <p>TextBlock オブジェクトは、ContentElement クラスのインスタンスである <codeph>content</codeph> プロパティにそのコンテンツを格納します。ContentElement クラスのインスタンスを作成することはできないため、<codeph>content</codeph> をそのサブクラスである TextElement、GraphicElement または GroupElement のいずれかのインスタンスに設定します。純粋なテキストコンテンツには TextElement、イメージコンテンツまたはグラフィックコンテンツには GraphicElement、TextElement オブジェクト、GraphicElement オブジェクトおよびその他の GroupElement オブジェクトの組み合わせを含むコンテンツには GroupElement を使用します。フォーマットされたテキスト範囲、埋め込みのサブテキストおよびグラフィックエレメントの管理について詳しくは、ContentElement クラスおよびそのサブクラスを参照してください。</p>
 
 <p>TextBlock インスタンスを作成して <codeph>content</codeph> プロパティを設定した後、<codeph>createTextLine()</codeph> メソッドを呼び出して <codeph>TextLine</codeph> クラスのインスタンスのテキスト行を作成します。 </p>
 
 </apiDesc><example conref="examples\TextBlockExample.as"> この例は、日本語および英語テキスト中の 3 つの TextBlock 段落です。日本語テキストは、Unicode 文字コードから String に変換されます。ボタンをクリックすると、テキストが水平から垂直へ、または垂直から水平へと回転します。
 <ol>
     <li>Button をライブラリに追加します。</li>
  <li>このコードを FLA と同じディレクトリに TextBlockExample.as という名前で保存します。</li>
  <li>FLA のプロパティパネルでクラスを TextBlockExample に設定します。</li>
 </ol>

<codeblock>
package { 
    import fl.controls.Button;
     import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextRotation;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.LineJustification;
    import flash.text.engine.FontDescription;
    import flash.text.engine.EastAsianJustifier; 
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.display.Stage;
    import flash.events.MouseEvent;
    import flash.system.Capabilities;
    
    public class TextBlockExample extends Sprite {
        
        var vertical:Boolean;    
        var container:Sprite;
        var textBlocks:Vector.&lt;TextBlock>;
        var loader:Loader = new Loader();
        var directionButton:Button = new Button();
        
        public function TextBlockExample():void {
            addChild(directionButton);
            directionButton.width = 30;
            directionButton.move(50, 350);
            directionButton.addEventListener(MouseEvent.CLICK, clickHandler);
            createContent();
            createLines();
        }

        private function createEmptyBlock():TextBlock {
        
            var textBlock:TextBlock = new TextBlock();
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_BUT_LAST);
            textBlock.lineRotation = vertical? TextRotation.ROTATE_90: TextRotation.ROTATE_0;
            return textBlock;    
        }
        
        private function paragraph1(format:ElementFormat):TextBlock {
        
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;
        }

        private function paragraph2(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x30AF, 0x30ED, 0x30B9, 0x30D7, 0x30E9, 0x30C3, 0x30C8, 0x30D5, 
                0x30A9, 0x30FC, 0x30E0, 0x4E0A, 0x3067, 0x518D, 0x751F, 0x53EF, 
                0x80FD, 0x306A
            ) + 
            "Flash Video" +
            String.fromCharCode(
                0x3092, 0x914D, 0x4FE1, 0x3001, 0x653F, 0x5E9C, 0x6700, 0x65B0, 
                0x60C5, 0x5831, 0x3092, 0x3088, 0x308A, 0x591A, 0x304F, 0x306E, 
                0x56FD, 0x6C11, 0x306B, 0x9AD8, 0x54C1, 0x8CEA, 0x306A, 0x753B, 
                0x50CF, 0x3067, 0x7C21, 0x5358, 0x304B, 0x3064, 0x30EA, 0x30A2, 
                0x30EB, 0x30BF, 0x30A4, 0x30E0, 0x306B, 0x63D0, 0x4F9B, 0x3059, 
                0x308B, 0x3053, 0x3068, 0x304C, 0x53EF, 0x80FD, 0x306B, 0x306A, 
                0x308A, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;    
        }

        private function paragraph3(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(0x3010) +
            "2007" +
            String.fromCharCode(0x5E74) + "2" + String.fromCharCode(0x6708) +
            "21" +
            String.fromCharCode(0x65E5, 0x3011),
            format);
            return textBlock;    
        }

        private function createContent():void {
            
            var font:FontDescription = new FontDescription();
            if (Capabilities.os.search("Mac OS") > -1) 
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R"; // "Kozuka Mincho Pro R"                    koFont.fontName = "Adobe " + String.fromCharCode(0xBA85, 0xC870) + " Std M"; // "Adobe Myungjo Std M"
            else 
                font.fontName = "Kozuka Mincho Pro R";        
            var format:ElementFormat = new ElementFormat();
            format.fontDescription = font;
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0x000000;
            if (!vertical) 
                format.textRotation = TextRotation.ROTATE_0; 
            textBlocks = new Vector.&lt;TextBlock>();
            textBlocks.push(
                paragraph1(format),
                paragraph2(format),
                paragraph3(format)//,
            );
        }

        private function createLines():void {    
        
            if (container != null) {
                removeChild(container);
            }            
            container = new Sprite();
            container.y = 45;
            container.x = 40;
            addChild(container);
            var linePosition:Number = vertical? this.stage.stageWidth - 120: 12;
        
            for (var i:uint = 0; i &lt; textBlocks.length; i++) {
                var textBlock:TextBlock = textBlocks[i];
                var previousLine:TextLine = null;
        
                while (true) {
                    var textLine:TextLine = textBlock.createTextLine(
                        previousLine, 
                        300);
                    if (textLine == null) 
                        break;
                    if (vertical) 
                    {
                        textLine.x = linePosition;
                        linePosition -= 24;
                        directionButton.label = " -- ";
                    }
                    else 
                    {
                        textLine.y = linePosition+50;
                        linePosition += 24;
                        directionButton.label = " | ";
                    }
                    container.addChild(textLine);                
                    previousLine = textLine;
                }
                if (vertical) 
                    linePosition -= 16;
                else 
                    linePosition += 16; 
            }
        }

        private function clickHandler(event:MouseEvent):void {
            
            vertical = !vertical;
            createContent();
            createLines();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links><apiConstructor id="flash.text.engine:TextBlock:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 	 TextBlock オブジェクトを作成します。
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>content</codeph> は、<codeph>ContentElement</codeph> の既知のサブクラスではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>content</codeph> は、既にグループのメンバーです。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>lineRotation</codeph> は、<codeph>TextRotation</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>baselineZero</codeph> は、<codeph>TextBaseline</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>bidiLevel</codeph> は、0 未満です。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>tabStops</codeph> に <codeph>null</codeph> エレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>tabStops</codeph> は、位置が大きくなる順にソートされません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>baselineFontSize</codeph> は、0 未満です。
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiData>null</apiData><apiDesc>テキストブロックの内容です。
	 </apiDesc></apiParam><apiParam><apiItemName>tabStops</apiItemName><apiType value="Vector$flash.text.engine:TabStop"/><apiData>null</apiData><apiDesc>テキストブロック内のテキストのタブストップです。
     </apiDesc></apiParam><apiParam><apiItemName>textJustifier</apiItemName><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier><apiData>null</apiData><apiDesc>このブロックの行作成時に使用される TextJustifier オブジェクトです。位置揃えを指定しない場合は、英語ロケールに基づいてデフォルトの位置揃えが作成されます。
     </apiDesc></apiParam><apiParam><apiItemName>lineRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>テキストブロックを単位として生成されるテキスト行に適用する回転です。
	 </apiDesc></apiParam><apiParam><apiItemName>baselineZero</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>ブロック内のすべての行に対して y=0 であるベースラインを指定します。
     </apiDesc></apiParam><apiParam><apiItemName>bidiLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>テキストブロック内のテキストのデフォルトの双方向埋め込みレベルです。
	 </apiDesc></apiParam><apiParam><apiItemName>applyNonLinearFontScaling</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>WYSIWYG 印刷の再現性を犠牲にして、画面の外観を強調するように指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>ブロック内のすべての行に対して、行のベースラインの派生元にするフォントの説明を指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>baselineFontDescription に使用するサイズを指定します。このパラメーターは、<codeph>baselineFontDescription</codeph> が <codeph>null</codeph> の場合は無視されます。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 TextBlock オブジェクトを作成します。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TextBlock/applyNonLinearFontScaling"><linktext>applyNonLinearFontScaling</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>baselineZero</linktext></link><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>bidiLevel</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>lineRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>tabStops</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextBlock:createTextLine"><apiName>createTextLine</apiName><shortdesc>
	 テキストブロックの内容からテキスト行を作成し、その場合に previousLine パラメーターで指定されたポイントで開始し、width パラメーターで指定されたポイントで改行するように指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>previousLine</codeph> で指定された TextLine が有効でない場合。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>width</codeph> が 0 未満の場合（<codeph>fitSomething</codeph> が true の場合を除く）。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>width</codeph> が <codeph>TextLine.MAX_LINE_WIDTH</codeph> より大きい場合。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>テキストブロックの 1 つ以上のエレメントに <codeph>null ElementFormat</codeph> がある場合。
     	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>テキスト行。テキストブロックが空か、指定された幅が次のエレメントの幅より小さい場合は <codeph>null</codeph>。これらのいずれの場合かを識別するには、テキストブロックの <codeph>textLineCreationResult</codeph> プロパティをチェックします。
     	 
     	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>previousLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiData>null</apiData><apiDesc>直前に改行された行を指定します。この行の次から改行処理を開始します。1 行目を改行する場合は <codeph>null</codeph> を指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000000</apiData><apiDesc>線幅をピクセル単位で指定します。実際の幅はより小さくなることがあります。
	 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>行の起点とタブストップの起点の差をピクセルで指定するオプションのパラメーターです。行は整列していないが、タブを整列させる必要がある場合に使用できます。このパラメーターのデフォルト値は <codeph>0.0</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指定された幅には関係なく（例外がスローされる場合もある幅が 0 または負の場合でも）、1 文字以上をテキスト行に収めるように Flash Player に指示するオプションのパラメーターです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 テキストブロックの内容からテキスト行を作成し、その場合に <codeph>previousLine</codeph> パラメーターで指定されたポイントで開始し、<codeph>width</codeph> パラメーターで指定されたポイントで改行するように指示します。テキスト行は TextLine オブジェクトで表され、表示リストに追加できます。
	 
	 <p>既に改行されているテキストブロックの範囲を越えて行を改行すると、改行が発生する領域の内外で行の有効性が変更されることがあります。行のステータスが、VALID から INVALID または POSSIBLY_INVALID に変更されることがあります。新しく改行された行が、ステータスが POSSIBLY_INVALID の前回改行された行に完全に整列している場合、前回改行された行およびそれ以降のすべての POSSIBLY_INVALID の行のステータスが VALID に戻ります。<codeph>TextLineValidity</codeph> のメンバーではない値に設定された行の有効性は、VALID には変更されませんが、INVALID には変更されることがあります。テキストブロックに対する変更の後は、再改行するテキスト行を開始または継続する位置を <codeph>firstInvalidLine</codeph> プロパティで確認します。</p>
	 
	 <p>テキストに Unicode Zero Width Space（ZWSP）文字を含めることによって、人為的な単語分割を作成できます。これは、正しく改行するために辞書が必要になるタイ語などの言語の場合に便利です。Flash Player は、このような辞書を含んでいません。</p>
	 
	 </apiDesc><example conref="examples\TextBlock_createTextLineExample.as"> この例では、<codeph>createTextLine()</codeph> メソッドを呼び出して、テキストブロック内にテキスト行を作成します。以下の手順を実行して行います。
  <ul>
     <li>String から TextElement を作成し、フォントサイズ 20 を設定します。</li> 
     <li>TextBlock を作成し、このオブジェクトに TextElement を割り当てます。</li>
     <li><codeph>createTextLine()</codeph> を呼び出して、テキストブロックから 300 ピクセルの幅を持つ行を作成します。</li>
    <li>各行を Stage（<codeph>addChild()</codeph>）に配置し、その位置（<codeph>x</codeph> および <codeph>y</codeph>）を設定します。</li>
  </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_createTextLineExample extends Sprite {
        
        public function TextBlock_createTextLineExample():void {
            
            var str:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. The createTextLine() method " +
            "then created these lines, 300 pixels wide, for display." ;
            
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 16;
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock); 
        }
        
        private function createLines(textBlock:TextBlock):void 
        {            
            var lineWidth:Number = 300;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:dump"><apiName>dump</apiName><shortdesc>
	 TextBlock の基になるコンテンツを XML ストリングとしてダンプします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 TextBlock の基になるコンテンツを XML ストリングとしてダンプします。これは自動化されたテストで役立ちます。これにはテキスト、書式およびレンダリング情報が含まれます。Flash Player デバッグ版でのみ使用可能です。
	 
	 <p><b>注意：</b>コンテンツおよび出力のフォーマットは、今後変更される可能性があります。アドビ システムズ社は、このメソッドの後方互換性は保証しません。</p>
	 
	 <p>次の表で出力について説明します。</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>タグ</entry><entry>属性</entry><entry>説明</entry></row></thead><tbody><row><entry><codeph>&lt;block></codeph></entry><entry> </entry><entry>TextBlock</entry></row><row><entry><codeph>&lt;line</codeph></entry><entry> </entry><entry>TextLine</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>インライン実行エレメントの開始</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>インライン実行エレメントの制限</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>line タグの終了</entry></row><row><entry><codeph>&lt;run</codeph></entry><entry> </entry><entry>行のエレメント</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>インライン実行エレメントの開始</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>インライン実行エレメントの制限</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>run タグの終了</entry></row><row><entry><codeph>&lt;inter</codeph></entry><entry> </entry><entry>inter エレメント</entry></row><row><entry> </entry><entry><codeph>cursor=</codeph></entry><entry>文字カーソル（元のテキストへのインデックス）</entry></row><row><entry> </entry><entry><codeph>tcb=</codeph></entry><entry>タイポグラフィッククラスタ境界</entry></row><row><entry> </entry><entry><codeph>wb=</codeph></entry><entry>単語境界</entry></row><row><entry> </entry><entry><codeph>lbo=</codeph></entry><entry>改行の条件</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>実際の改行</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>inter タグの終了</entry></row><row><entry><codeph>&lt;char</codeph></entry><entry> </entry><entry>文字エレメント</entry></row><row><entry> </entry><entry><codeph>usv=</codeph></entry><entry>Unicode のスカラ値</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>char タグの終了</entry></row><row><entry><codeph>&lt;glyph</codeph></entry><entry> </entry><entry>計算された文字または形成された文字のエレメント</entry></row><row><entry> </entry><entry><codeph>font=</codeph></entry><entry>フォント名</entry></row><row><entry> </entry><entry><codeph>gid=</codeph></entry><entry>文字インデックス</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>回転</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>色</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>attached=</codeph></entry><entry>2 つのエレメントがアタッチされているかどうか</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>内部タイポグラフィッククラスタ境界のオフセット</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>双方向レベル</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>spacing クラス</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>glyph タグの終了</entry></row><row><entry><codeph>&lt;fo</codeph></entry><entry> </entry><entry>グラフィックエレメント</entry></row><row><entry> </entry><entry><codeph>id=</codeph></entry><entry>エレメント ID</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>回転</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>色</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>左揃え</entry></row><row><entry> </entry><entry><codeph>rb=</codeph></entry><entry>右揃え</entry></row><row><entry> </entry><entry><codeph>tb=</codeph></entry><entry>上揃え</entry></row><row><entry> </entry><entry><codeph>bb=</codeph></entry><entry>下揃え</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>内部タイポグラフィッククラスタ境界のオフセット</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>双方向レベル</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>spacing クラス</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fo タグの終了</entry></row><row><entry><codeph>&lt;embeddedRun</codeph></entry><entry> </entry><entry>埋め込み範囲</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>回転</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>embeddedRun タグの終了</entry></row><row><entry><codeph>&lt;run></codeph></entry><entry> </entry><entry>実行</entry></row><row><entry><codeph>&lt;/run></codeph></entry><entry> </entry><entry>run タグの終了</entry></row><row><entry><codeph>&lt;/embeddedRun></codeph></entry><entry> </entry><entry>embeddedRun タグの終了</entry></row><row><entry><codeph>&lt;carets</codeph></entry><entry> </entry><entry>行のキャレット</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>インライン実行エレメントの開始</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>インライン実行エレメントの制限</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>carets タグの終了</entry></row><row><entry><codeph>&lt;cursor></codeph></entry><entry> </entry><entry>カーソル</entry></row><row><entry> </entry><entry><codeph>x=</codeph></entry><entry>左側の x 位置</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>cursor タグの終了</entry></row><row><entry><codeph>&lt;cluster</codeph></entry><entry> </entry><entry>クラスタ</entry></row><row><entry> </entry><entry><codeph>c=</codeph></entry><entry>中央位置</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>tc オフセットの開始</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>tc オフセットの制限</entry></row><row><entry> </entry><entry><codeph>bidi</codeph></entry><entry>双方向レベル</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>cluster タグの終了</entry></row><row><entry><codeph>&lt;/carets></codeph></entry><entry> </entry><entry>carets タグの終了</entry></row><row><entry><codeph>&lt;/line></codeph></entry><entry> </entry><entry>line タグの終了</entry></row><row><entry><codeph>&lt;/block></codeph></entry><entry> </entry><entry>block タグの終了</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/dump()"><linktext>TextLine.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc>
	 指定された文字インデックスの次のアトム境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>index</codeph> は範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>このインデックス位置の文字が含まれる TextLine は無効です。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定された文字インデックスの次のアトム境界のインデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>次のアトム境界の検索を開始する文字のインデックスを指定します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された文字インデックスの次のアトム境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。アトム境界間の文字は結合されて、「e」と結合されるアキュートアクセントのように、<codeph>TextLine</codeph> で 1 つのアトムを形成します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc>
	 指定された文字インデックスの次の単語境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>index</codeph> は範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>このインデックス位置の文字が含まれる TextLine は無効です。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定された文字インデックスの次の単語境界のインデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>次の単語境界の検索を開始する文字のインデックスを指定します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された文字インデックスの次の単語境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。単語境界は、文字の Unicode プロパティに基づいて決定されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc>
	 指定された文字インデックスの前のアトム境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>index</codeph> は範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>このインデックス位置の文字が含まれる TextLine は無効です。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定された文字インデックスの前のアトム境界のインデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>前のアトム境界の検索を開始する文字のインデックスを指定します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された文字インデックスの前のアトム境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。アトム境界間の文字は結合されて、「e」と結合されるアキュートアクセントのように、<codeph>TextLine</codeph> で 1 つのアトムを形成します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc>
	 指定された文字インデックスの前の単語境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>index</codeph> は範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>このインデックス位置の文字が含まれる TextLine は無効です。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定された文字インデックスの前の単語境界のインデックスです。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>前の単語境界の検索を開始する文字のインデックスを指定します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された文字インデックスの前の単語境界のインデックスを検索します。指定されたインデックス位置の文字は含めません。単語境界は、文字の Unicode プロパティに基づいて決定されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:getTextLineAtCharIndex"><apiName>getTextLineAtCharIndex</apiName><shortdesc>
	 charIndex パラメーターで指定された位置の文字を含む TextLine を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された文字インデックスは範囲外です。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>charIndex</codeph> で指定された位置の文字を含む TextLine です。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>文字の 0 から始まるインデックス値です。つまり、最初の文字は 0、2 番目の文字は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>charIndex</codeph> パラメーターで指定された位置の文字を含む TextLine を返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:releaseLines"><apiName>releaseLines</apiName><shortdesc>
	 TextBlock によって維持される行のリストから、テキスト行の範囲を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>firstLine</codeph> または <codeph>lastLine</codeph> によって指定される TextLine が、テキストブロックによって維持されるテキスト行のリストにない場合。
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>firstLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>リリースされる最初の行を指定します。
	 </apiDesc></apiParam><apiParam><apiItemName>lastLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>リリースされる最後の行を指定します。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 TextBlock によって維持される行のリストから、テキスト行の範囲を削除します。これにより、他の参照が存在しない場合、行がガベージコレクションされます。
	 
	 <p>削除された行の <codeph>textBlock</codeph>、<codeph>nextLine</codeph> および <codeph>previousLine</codeph> メンバーを <codeph>null</codeph> に設定します。TextBlock の削除された行および削除された行の後のすべての行の <codeph>validity</codeph> を <codeph>TextLineValidity.INVALID</codeph> に設定します。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextBlock:userData"><apiName>userData</apiName><shortdesc>
	 作成者が任意のデータをテキストブロックに関連付けるための方法を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 作成者が任意のデータをテキストブロックに関連付けるための方法を提供します。データは改訂日付や作者名などのコンテンツを指す情報の場合もあれば、処理中に使用するキャッシュされたデータの場合もあります。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:applyNonLinearFontScaling:get"><apiName>applyNonLinearFontScaling</apiName><shortdesc>
	 WYSIWYG 印刷の再現性を犠牲にして、画面の外観を強調するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 WYSIWYG 印刷の再現性を犠牲にして、画面の外観を強調するように指定します。非線形の拡大 / 縮小をサポートするプラットフォームおよびフォントについては、このプロパティを <codeph>true</codeph> に設定すると、それらのメトリックを使用できるようになりますが、特に小さなポイントサイズの場合の WYSIWYG 印刷の再現性がいくらか犠牲になります。
	 
	 <p>デフォルト値は <codeph>true</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontDescription:get"><apiName>baselineFontDescription</apiName><shortdesc>
	 行の内容には関係なく、ブロックから作成されたすべての行に対するベースラインを特定するために使用されるフォントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier></apiValueDef><apiDesc>
	 行の内容には関係なく、ブロックから作成されたすべての行に対するベースラインを特定するために使用されるフォントです。ベースラインは、フォントおよびフォントサイズによって異なります。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。ベースラインフォントが <codeph>null</codeph> の場合、ベースラインフォントのサイズは無視され、いずれの行に対するベースラインも、行内の最大のテキストのフォントおよびサイズによって決まります。<codeph>baselineFontDescription</codeph> および <codeph>baselineFontSize</codeph> の両方を指定すると、それらの内容に関係なく、テキストブロックのすべての行に対するベースラインを決定します。この組み合わせは、文字体裁で最も役立ちます。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontSize:get"><apiName>baselineFontSize</apiName><shortdesc>
	 ブロックから作成された行に対するベースラインを計算するのに使用されるフォントサイズです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>指定された <codeph>baselineFontSize</codeph> が、0 未満です。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 ブロックから作成された行に対するベースラインを計算するのに使用されるフォントサイズです。ベースラインは、フォントおよびフォントサイズによって異なります。
	 
	 <p>デフォルト値は <codeph>12</codeph> です。ベースラインフォントが <codeph>null</codeph> の場合、ベースラインフォントのサイズは無視され、いずれの行に対するベースラインも、行内の最大のテキストのフォントおよびサイズによって決まります。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineZero:get"><apiName>baselineZero</apiName><shortdesc>
	 このブロックから作成した行に対して y=0 であるベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>TextBaseline</codeph> のメンバーではないいずれかの値に設定する場合。
     
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 このブロックから作成した行に対して y=0 であるベースラインを指定します。このプロパティの有効な値は、<codeph>TextBaseline</codeph> クラスのメンバー内に含まれます。
	 
	 <p>デフォルト値は、<codeph>TextBaseline.ROMAN</codeph> です。</p>
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>行のローマン体のベースラインが y=0 になります。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>行のアセントのベースラインが y=0 になります。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>行のディセントのベースラインが y=0 になります。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>行の文字最上部のベースラインが y=0 になります。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>行の文字の中心のベースラインが y=0 になります。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>行の文字最下部のベースラインが y=0 になります。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:bidiLevel:get"><apiName>bidiLevel</apiName><shortdesc>
	 テキストブロック内のテキストのデフォルトの双方向埋め込みレベルを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>0 未満の値に設定する場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストブロック内のテキストのデフォルトの双方向埋め込みレベルを指定します。偶数値は左から右の方向を意味し、奇数値は右から左の方向を意味します。特定のテキストが左から右または右から左の方向に埋め込まれるレベル数を示すには、<codeph>bidiLevel</codeph> をインクリメントすることができます。
	 
	 <p>デフォルト値は 0 です。</p>
	 
	 <p><codeph>bidiLevel</codeph> を変更すると、すべての前の改行の有効性が TextLineValidity.INVALID に変わります。<codeph>bidiLevel</codeph> の変更後、<codeph>firstInvalidLine</codeph> プロパティは <codeph>firstLine</codeph> プロパティに等しくなるため、TextBlock のすべての行を再度改行する必要があります。</p>
	 
     </apiDesc><example conref="examples\TextBlock_bidiLevelExample.as"> この例は、まず <codeph>bidiLevel</codeph> even、次に <codeph>bidiLevel</codeph> odd でレンダリングされた同じテキストストリング（論理的順序：a、b、c、alef、bet、gimel）を示します。
<codeblock>

package {
    
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_bidiLevelExample extends Sprite {
        
        public function TextBlock_bidiLevelExample():void {             
            var fontSize:Number = 36;

            var format:ElementFormat = new ElementFormat();        
            format.fontDescription = new FontDescription("Adobe Hebrew");
            format.fontSize = fontSize;
            var y:Number = 0;
            var leading:Number = fontSize * 0.2;
            var text:String = "abc" + String.fromCharCode(0x05D0, 0x05D1, 0x05D2);

            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(text, format);
                        
            // bidiLevel even
            textBlock.bidiLevel = 0;
            var textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;
            textLine.y = y;
            y += textLine.descent;
            addChild(textLine);      
            
            // bidiLevel odd
            textBlock.content = new TextElement(text, format);
            textBlock.bidiLevel = 1;
            textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;          
            textLine.y = y;
            addChild(textLine);   
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:content:get"><apiName>content</apiName><shortdesc>
	 テキストブロックの内容を保持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc><codeph>ContentElement</codeph> の既知のサブクラスではない値に設定する場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>value</codeph> は、既にグループのメンバーです。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストブロックの内容を保持します。ContentElement は、基本クラスであるため、<codeph>content</codeph> を ContentElement サブクラスのインスタンスである、TextElement、GraphicElement または GroupElement に割り当てます。TextElement オブジェクトは String、GraphicElement オブジェクトは DisplayObject、GroupElement は、1 つ以上の TextElement、GraphicElement またはその他の GroupElement オブジェクトを含む Vector オブジェクトをそれぞれ含みます。均一なテキストの段落には TextElement、グラフィックには GraphicElement、テキストエレメントとグラフィックエレメントの組み合わせ、またはこれらのエレメントの複数のインスタンスには GroupElement をその他の GroupElement オブジェクトと共に使用します。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 <p><codeph>content</codeph> プロパティを変更すると、以前作成されたすべての行の有効性が <codeph>TextLineValidity.INVALID</codeph> に変わります。<codeph>content</codeph> の変更後、<codeph>firstInvalidLine</codeph> プロパティは <codeph>firstLine</codeph> プロパティに等しくなるため、TextBlock のすべての行を再度改行する必要があります。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstInvalidLine:get"><apiName>firstInvalidLine</apiName><shortdesc>
	 TextLine.validity と TextLineValidity.VALID が等しくないテキストブロックで最初の行を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>TextLine.validity</codeph> と <codeph>TextLineValidity.VALID</codeph> が等しくないテキストブロックで最初の行を指定します。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstLine:get"><apiName>firstLine</apiName><shortdesc>
	 TextBlock 内の最初の TextLine（存在する場合）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 内の最初の TextLine（存在する場合）です。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lastLine:get"><apiName>lastLine</apiName><shortdesc>
	 TextBlock 内の最後の TextLine（存在する場合）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 内の最後の TextLine（存在する場合）です。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lineRotation:get"><apiName>lineRotation</apiName><shortdesc>
	 テキストブロックのテキスト行を単位として回転します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc><codeph>TextRotation</codeph> のメンバーではないいずれかの値に設定する場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>TextRotation.AUTO</codeph> に設定する場合。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストブロックのテキスト行を単位として回転します。有効にするには <codeph>createTextLine()</codeph> メソッドは <i/><codeph>lineRotation</codeph> を設定してから呼び出します。デフォルト値は、<codeph>TextRotation.ROTATE_0</codeph> です。
	 
	 <p>文字の最終的な回転は、<codeph>ElementFormat.textRotation</codeph>、<codeph>ContentElement.textRotation</codeph> および <codeph>TextBlock.lineRotation</codeph> の値によって異なります。</p>
	 
	 <p><codeph>TextBlock.lineRotation</codeph> は一般に、日中韓のテキストで使用されます。縦書きの日本語テキストの段落を作成するには、次の処理を行います。</p>
     <ol>
     <li><codeph>TextBlock.lineRotation</codeph> プロパティを <codeph>TextRotation.ROTATE_90</codeph> に設定します。</li>
     <li>コンテンツの <codeph>ElementFormat.textRotation</codeph> プロパティをデフォルトの <codeph>TextRotation.AUTO</codeph> のままにしておきます。</li>
     </ol>
	 
	 <p>このプロパティの値を設定するには、<codeph>TextRotation</codeph> クラスで定義される次の定数を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>行は回転しません。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>行は時計回りに 90 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>行は 180 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>行は時計回りに 270 度回転します。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>サポートされません。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextBlock_lineRotationExample.as"> この例では、TextBlock に日本語テキストを追加し、<codeph>lineRotation()</codeph> プロパティを TextRotation.ROTATE_90 に設定して、行を垂直に表示します。 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextRotation;
    import flash.text.engine.ElementFormat;
    
    public class TextBlock_lineRotationExample extends Sprite {
        
        public function TextBlock_lineRotationExample():void {
            var Japanese:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);

            var fontDescription:FontDescription = new FontDescription("MS Mincho");
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 15;
            format.fontDescription = fontDescription;
                        
            var textElement:TextElement = new TextElement(Japanese, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.lineRotation = TextRotation.ROTATE_90;

            var linePosition:Number = this.stage.stageWidth - 120;
            var previousLine:TextLine = null;
        
            while (true) {
                var textLine:TextLine = textBlock.createTextLine(
                    previousLine, 
                    300);
                if (textLine == null) 
                    break;
                textLine.y = 30;    
                textLine.x = linePosition;
                linePosition -= 24;
                addChild(textLine);                
                previousLine = textLine;
            }        
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 テキストブロック内のテキストのタブストップを TabStop オブジェクトの Vector の形式で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$flash.text.engine:TabStop"/><apiException><apiDesc>指定された <codeph>tabStops</codeph> に <codeph>null</codeph> エレメントが含まれています。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>tabStops</codeph> は、位置が大きくなる順にソートされません。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 テキストブロック内のテキストのタブストップを <codeph>TabStop</codeph> オブジェクトの Vector の形式で指定します。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。これは、タブストップが有効にならないことを意味します。タブストップが設定されていないときは、タブ文字（\t）があると改行します。</p>
	 
	 <p><codeph>tabStops</codeph> プロパティが設定されているときは、TextBlock によって内部使用のために Vector のコピーが作成されます。元の Vector またはそのコンテンツを変更しても TextBlock には影響しません。<codeph>tabStops</codeph> プロパティを照会すると、内部 Vector のコピーが返されます。この返された Vector またはそのコンテンツを変更しても TextBlock には影響しません。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textJustifier:get"><apiName>textJustifier</apiName><shortdesc>
	 行の作成時に使用する TextJustifier を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:TextJustifier</apiValueClassifier><apiException><apiDesc><codeph>TextJustifier</codeph> の既知のサブクラスではない値に設定する場合。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 行の作成時に使用する TextJustifier を指定します。
	 
	 <p>デフォルト値は、作成されるデフォルトの TextJustifier オブジェクトです。</p>
	 
	 <p><codeph>textJustifier</codeph> プロパティが設定されているときは、TextBlock によって内部使用のためにオブジェクトのコピーが作成されます。元のオブジェクトを変更しても TextBlock には影響しません。<codeph>textJustifier</codeph> プロパティを照会すると、内部オブジェクトのコピーが返されます。この返されたオブジェクトを変更しても TextBlock には影響しません。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textLineCreationResult:get"><apiName>textLineCreationResult</apiName><shortdesc>
	 createTextLine() 操作の結果を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>createTextLine()</codeph> 操作の結果を示します。ブロックの内容が変更されると、以前に改行された行が無効化され、このプロパティが <codeph>null</codeph> にリセットされます。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 <p>このプロパティの値は、<codeph>TextLineCreationResult</codeph> 内に含まれます。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextLineCreationResult.SUCCESS</codeph></entry>
	 	<entry>行が正常に改行されました。</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.COMPLETE</codeph></entry>
	 	<entry>作成された新しい行が継続行に完全に整列しており、POSSIBLY_INVALID から VALID に変更されたかまたはブロック内のすべてのテキストが既に改行されていたので、行は作成されませんでした。</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.INSUFFICIENT_WIDTH</codeph></entry>
	 	<entry>テキストが指定された幅に収まらないので、行は作成されませんでした。</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLineCreationResult"><linktext>TextLineCreationResult</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineCreationResult"><apiName>TextLineCreationResult</apiName><shortdesc>
TextLineCreationResult クラスは、TextBlock.textLineCreationResult で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextLineCreationResult クラスは、<codeph>TextBlock.textLineCreationResult</codeph> で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextBlock/textLineCreationResult"><linktext>TextBlock.textLineCreationResult</linktext></link></related-links><apiValue id="flash.text.engine:TextLineCreationResult:COMPLETE"><apiName>COMPLETE</apiName><shortdesc> 
	ブロック内のすべてのテキストが既に改行されていたので行が作成されなかったことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ブロック内のすべてのテキストが既に改行されていたので行が作成されなかったことを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:EMERGENCY"><apiName>EMERGENCY</apiName><shortdesc> 
	指定された幅で使用できる改行の条件がなかったため、応急的に改行して行が作成されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>emergency</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定された幅で使用できる改行の条件がなかったため、応急的に改行して行が作成されたことを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:INSUFFICIENT_WIDTH"><apiName>INSUFFICIENT_WIDTH</apiName><shortdesc> 
	テキストが指定された幅に収まらないので行が作成されず、fitSomething が createTextLine() の呼び出しで指定されなかったことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insufficientWidth</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストが指定された幅に収まらないので行が作成されず、<codeph>fitSomething</codeph> が <codeph>createTextLine()</codeph> の呼び出しで指定されなかったことを示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:SUCCESS"><apiName>SUCCESS</apiName><shortdesc> 
	行が正常に改行されたことを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>success</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	行が正常に改行されたことを表します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LigatureLevel"><apiName>LigatureLevel</apiName><shortdesc>
LigatureLevel クラスは、ElementFormat クラスの ligatureLevel プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
LigatureLevel クラスは、ElementFormat クラスの <codeph>ligatureLevel</codeph> プロパティの設定で使用される定数値の列挙です。 2 つ以上の letter-form が 1 つの文字に結合された場合には、合字が起こります。合字は通常、「fi」、「fl」、「ae」などの文字の組の用に共通のコンポーネントを共有する連続した文字を置き換えます。合字は、ラテン語およびラテン語以外の文字セットの両方で使用されます。
<p><b>メモ：</b>アラビア語またはシリア語フォントを使用する場合は、<codeph>ligatureLevel</codeph> を MINIMUM 以上に設定する必要があります。</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/ligatureLevel"><linktext>flash.text.engine.ElementFormat.ligatureLevel</linktext></link></related-links><apiValue id="flash.text.engine:LigatureLevel:COMMON"><apiName>COMMON</apiName><shortdesc> 
	共通の合字を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>common</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	共通の合字を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:EXOTIC"><apiName>EXOTIC</apiName><shortdesc> 
	エキゾチックな合字を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exotic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	エキゾチックな合字を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:MINIMUM"><apiName>MINIMUM</apiName><shortdesc> 
	最小限の合字を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>minimum</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	最小限の合字を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:NONE"><apiName>NONE</apiName><shortdesc> 
	合字しないことを指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	合字しないことを指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:UNCOMMON"><apiName>UNCOMMON</apiName><shortdesc> 
	珍しい合字を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncommon</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	珍しい合字を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextRotation"><apiName>TextRotation</apiName><shortdesc>
TextRotation クラスは、ElementFormat.textRotation、ContentElement.textRotation、TextBlock.lineRotation および TextLine.getAtomTextRotation() の各プロパティで使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextRotation クラスは、<codeph>ElementFormat.textRotation</codeph>、<codeph>ContentElement.textRotation</codeph>、<codeph>TextBlock.lineRotation</codeph> および <codeph>TextLine.getAtomTextRotation()</codeph> の各プロパティで使用される定数値の列挙です。 

<p>任意の文字の最終的な回転は、<codeph>TextBlock.lineRotation</codeph>、<codeph>ElementFormat.textRotation</codeph> および <codeph>ContentElement.textRotation</codeph> の合計になります。</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>TextLine.getAtomTextRotation()</linktext></link></related-links><apiValue id="flash.text.engine:TextRotation:AUTO"><apiName>AUTO</apiName><shortdesc> 
	文字の Unicode プロパティに従って、全角文字に対してのみ、反時計回りの 90 度回転を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	文字の Unicode プロパティに従って、全角文字に対してのみ、反時計回りの 90 度回転を指定します。この値は通常、日中韓のテキストで回転が必要な文字に対してのみ使用されます。この回転は、縦書きテキストにのみ適用され、他の文字に影響を与えずに全角文字を垂直方向に変えます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_0"><apiName>ROTATE_0</apiName><shortdesc> 
	回転は指定しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate0</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	回転は指定しません。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_180"><apiName>ROTATE_180</apiName><shortdesc> 
	180 度回転を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate180</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	180 度回転を指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_270"><apiName>ROTATE_270</apiName><shortdesc> 
	時計回りの 270 度回転を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate270</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	時計回りの 270 度回転を指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_90"><apiName>ROTATE_90</apiName><shortdesc> 
	時計回りの 90 度回転を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate90</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	時計回りの 90 度回転を指定します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabAlignment"><apiName>TabAlignment</apiName><shortdesc>
TabAlignment クラスは、TabStop クラスの tabAlignment プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TabAlignment クラスは、<codeph>TabStop</codeph> クラスの <codeph>tabAlignment</codeph> プロパティの設定で使用される定数値の列挙です。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TabStop/tabAlignment"><linktext>TabStop.tabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStop"><linktext>TextBlock.tabStop</linktext></link></related-links><apiValue id="flash.text.engine:TabAlignment:CENTER"><apiName>CENTER</apiName><shortdesc> 
	タブで区切ったテキストの中心をタブストップに配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	タブで区切ったテキストの中心をタブストップに配置します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> 
	タブで区切ったテキストの整列トークンをタブストップに配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	タブで区切ったテキストの整列トークンをタブストップに配置します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:END"><apiName>END</apiName><shortdesc> 
	タブで区切ったテキストの終了をタブストップに配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	タブで区切ったテキストの終了をタブストップに配置します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:START"><apiName>START</apiName><shortdesc> 
	タブで区切ったテキストの開始をタブストップに配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	タブで区切ったテキストの開始をタブストップに配置します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
 GraphicElement クラスは、TextBlock または GroupElement オブジェクトのグラフィックエレメントを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 GraphicElement クラスは、TextBlock または GroupElement オブジェクトのグラフィックエレメントを表します。GraphicElement オブジェクトを TextBlock オブジェクトの <codeph>content</codeph> プロパティに割り当てて、<codeph>TextBlock.createTextLine()</codeph> を使用して、グラフィックまたはイメージを表示するか、GroupElement オブジェクトに割り当てて、他のグラフィックエレメントまたはテキストエレメントと結合します。
 
 </apiDesc><example conref="examples\GraphicElementExample.as"> 次の例では、GraphicElement（赤いボックス）を使用して TextBlock を作成して表示し、キャプションを含む 2 番目の TextBlock をその下に追加します。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GraphicElementExample extends Sprite {
        
        public function GraphicElementExample():void {
            
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 14;
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0,0, 200, 200);
            redBox.graphics.endFill();   
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = graphicElement;
            var textLine1:TextLine = textBlock.createTextLine(null,redBox.width);
            addChild(textLine1);
            textLine1.x = 15
            textLine1.y = 215
            var str:String = "Your picture here ...";
            var textElement:TextElement = new TextElement(str, format);
            textBlock = new TextBlock();
            textBlock.content = textElement;
            var textLine2 = textBlock.createTextLine(null, 300);
            addChild(textLine2);
            textLine2.x = textLine1.x;
            textLine2.y += textLine1.y + format.fontSize;        
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:GraphicElement:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
	 新しい GraphicElement インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>graphic</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>GraphicElement を設定する DisplayObject です。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>elementWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>エレメントに予約された領域の幅です（ピクセル単位）。デフォルト値は 15 です。
	 </apiDesc></apiParam><apiParam><apiItemName>elementHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>エレメントに予約された領域の高さです（ピクセル単位）。デフォルト値は 15 です。
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>エレメントのエレメント形式です。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>このコンテンツエレメントに基づいて作成されたテキスト行に送出されるすべてのイベントのコピーを受け取る <codeph>EventDispatcher</codeph> オブジェクトです。デフォルト値は <codeph>null</codeph> です。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>単位としてエレメントに適用される回転です。このプロパティには、<codeph>flash.text.engine.TextRotation</codeph> 定数を使用します。デフォルト値は、<codeph>flash.text.engine.TextRotation.ROTATE_0</codeph> です。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい GraphicElement インスタンスを作成します。
	 
	 <p>グラフィックの基準点は、<codeph>elementHeight</codeph>、<codeph>elementWidth</codeph> および <codeph>elementFormat.baselineShift</codeph> によって定義される領域の左上隅に整列します。領域のサイズに合わせたグラフィックの拡大 / 縮小は行われません。GraphicElement に <codeph>eventMirror</codeph> がある場合は、グラフィックによってではなく、<codeph>elementWidth</codeph> プロパティと <codeph>elementHeight</codeph> プロパティによって、結果のミラー領域のサイズと位置が決定されます。ローダーを使用している場合は、テキスト行とミラー領域の作成時にグラフィックが読み込まれないことがあります。</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:GraphicElement:elementHeight:get"><apiName>elementHeight</apiName><shortdesc>
	 その行でグラフィックのために予約された高さです（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 その行でグラフィックのために予約された高さです（ピクセル単位）。グラフィックの拡大 / 縮小は、呼び出し元が受け持つことになります。
	 
	 <p>デフォルト値は 15.0 です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:elementWidth:get"><apiName>elementWidth</apiName><shortdesc>
	 その行でグラフィックのために予約された幅です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 その行でグラフィックのために予約された幅です（ピクセル単位）。グラフィックの拡大 / 縮小は、呼び出し元が受け持つことになります。
	 
	 <p>デフォルト値は 15.0 です。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc>
	 GraphicElement のグラフィックとして使用される DisplayObject です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:DisplayObject</apiValueClassifier></apiValueDef><apiDesc>
	 GraphicElement のグラフィックとして使用される DisplayObject です。
	 
	 <p>デフォルト値は <codeph>null</codeph> です。</p>
	 
	 <p>GraphicElement がテキスト行の一部になる場合、グラフィックは行の子として追加されます。グラフィックを設定すると、行から古いグラフィックが削除され、新しいグラフィックが追加されます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontWeight"><apiName>FontWeight</apiName><shortdesc>
FontWeight クラスは、FontDescription.fontWeight で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontWeight クラスは、<codeph>FontDescription.fontWeight</codeph> で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontWeight"><linktext>flash.text.engine.FontDescription.fontWeight</linktext></link></related-links><apiValue id="flash.text.engine:FontWeight:BOLD"><apiName>BOLD</apiName><shortdesc> 
	ボールドフォントの太さを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ボールドフォントの太さを示すために使用します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontWeight:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	標準フォントの太さを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	標準フォントの太さを示すために使用します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBaseline"><apiName>TextBaseline</apiName><shortdesc>
TextBaseline クラスは、ElementFormat クラスの dominantBaseline プロパティおよび alignmentBaseline プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextBaseline クラスは、ElementFormat クラスの <codeph>dominantBaseline</codeph> プロパティおよび <codeph>alignmentBaseline</codeph> プロパティの設定で使用される定数値の列挙です。<codeph/>次の状況を考えます。
<p><adobeimage alt="テキストのベースラインの整列" href="../../../images/textBaselines.gif"/></p>
<p>行が 4 つの <codeph>TextElement</codeph> オブジェクトで構成され、各オブジェクトにはそれぞれ「a」「b」「cccccccc」および「X」が含まれています。「X」を含むエレメントが行内で最大のエレメントなので、行のベースラインはそのエレメントによって決定されます。「X」のエレメントのローマン体のベースラインが、行のローマン体のベースラインに整列します。「a」のエレメントの文字の最上部が、行の文字の最上部に整列します。「b」のエレメントの文字の最下部が、行の文字の最下部に整列します。「cccccccc」のエレメントの文字の中心が、行の文字の中心に整列します。</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links><apiValue id="flash.text.engine:TextBaseline:ASCENT"><apiName>ASCENT</apiName><shortdesc> 
	アセントのベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	アセントのベースラインを指定します。テキストエレメントの場合は、テキストのフォントおよびポイントサイズによりこの値が決まります。グラフィックエレメントの場合、テキストエンジンはエレメントの幾何学的最上部を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:DESCENT"><apiName>DESCENT</apiName><shortdesc> 
	ディセントのベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>descent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ディセントのベースラインを指定します。テキストエレメントの場合は、テキストのフォントおよびポイントサイズによりこの値が決まります。グラフィックエレメントの場合、テキストエレメントはエレメントの幾何学的最下部を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_BOTTOM"><apiName>IDEOGRAPHIC_BOTTOM</apiName><shortdesc> 
	文字の最下部のベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicBottom</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	文字の最下部のベースラインを指定します。テキストエレメントの場合は、テキストのフォントおよびポイントサイズによりこの値が決まります。グラフィックエレメントの場合、テキストエンジンはエレメントの幾何学的最下部を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_CENTER"><apiName>IDEOGRAPHIC_CENTER</apiName><shortdesc> 
	文字の中心のベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	文字の中心のベースラインを指定します。テキストエレメントの場合は、テキストのフォントおよびポイントサイズによりこの値が決まります。グラフィックエレメントの場合、テキストエンジンはエレメントの幾何学的中心を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_TOP"><apiName>IDEOGRAPHIC_TOP</apiName><shortdesc> 
	文字の最上部のベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	文字の最上部のベースラインを指定します。テキストエレメントの場合は、テキストのフォントおよびポイントサイズによりこの値が決まります。グラフィックエレメントの場合、テキストエンジンはエレメントの幾何学的最上部を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:ROMAN"><apiName>ROMAN</apiName><shortdesc> 
	ローマン体のベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>roman</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ローマン体のベースラインを指定します。テキストエレメントの場合は、テキストのフォントおよびポイントサイズによりこの値が決まります。グラフィックエレメントの場合、テキストエンジンはエレメントの幾何学的最下部を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:USE_DOMINANT_BASELINE"><apiName>USE_DOMINANT_BASELINE</apiName><shortdesc> 
	alignmentBaseline が dominantBaseline と同じであることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>useDominantBaseline</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	alignmentBaseline が dominantBaseline と同じであることを指定します。この値は <codeph>ElementFormat.alignmentBaseline</codeph> を設定する場合のみに使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:BreakOpportunity"><apiName>BreakOpportunity</apiName><shortdesc>
BreakOpportunity クラスは、ElementFormat クラスの breakOpportunity プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
BreakOpportunity クラスは、ElementFormat クラスの <codeph>breakOpportunity</codeph> プロパティの設定で使用される定数値の列挙です。 折り返しテキストが複数行に分けられるときにどの文字が改行文字として使用できるかは、このプロパティにより決められます。


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/breakOpportunity"><linktext>ElementFormat.breakOpportunity</linktext></link></related-links><apiValue id="flash.text.engine:BreakOpportunity:ALL"><apiName>ALL</apiName><shortdesc> 
	ContentElement オブジェクト内のすべての文字が、強制改行を行うかどうかの判断に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ContentElement オブジェクト内のすべての文字が、強制改行を行うかどうかの判断に使用されます。このオプションを使用して、できる限り短い行を生成して、1 行でテキストを作成したり、同様の効果を得たりできます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:ANY"><apiName>ANY</apiName><shortdesc> 
	ContentElement オブジェクト内の文字が、改行を行うかどうかの判断に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ContentElement オブジェクト内の文字が、改行を行うかどうかの判断に使用されます。通常、ローマン体のテキストが日中韓のテキストに埋め込まれており、単語の途中で改行されることが望ましい場合に使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Unicode 文字プロパティに基づいて改行を行うかどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Unicode 文字プロパティに基づいて改行を行うかどうかを判断します。この設定は、Unicode Standard Annex #14 によって定義される Unicode line breaking プロパティを実装します。 
	</apiDesc></apiValueDetail><related-links><link href="http://unicode.org/reports/tr14/tr14-12.html"><linktext>Unicode line breaking プロパティに関する記事</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:BreakOpportunity:NONE"><apiName>NONE</apiName><shortdesc> 
	ContentElement オブジェクト内の文字は、改行を行うかどうかの判断に使用されません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ContentElement オブジェクト内の文字は、改行を行うかどうかの判断に使用されません。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitWidth"><apiName>DigitWidth</apiName><shortdesc>
DigitWidth クラスは、ElementFormat クラスの digitWidth プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
DigitWidth クラスは、ElementFormat クラスの <codeph>digitWidth</codeph> プロパティの設定で使用される定数値の列挙です。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitWidth"><linktext>flash.text.engine.ElementFormat.digitWidth</linktext></link></related-links><apiValue id="flash.text.engine:DigitWidth:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	デフォルトの数字の幅を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	デフォルトの数字の幅を指定するために使用されます。結果はフォントによって異なります。文字には、フォントデザイナーによって指定された何も機能を適用しない状態の設定が使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:PROPORTIONAL"><apiName>PROPORTIONAL</apiName><shortdesc> 
	プロポーショナル数字の幅を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proportional</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	プロポーショナル数字の幅を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:TABULAR"><apiName>TABULAR</apiName><shortdesc> 
	等幅数字の幅を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	等幅数字の幅を指定するために使用されます。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:Kerning"><apiName>Kerning</apiName><shortdesc>
Kerning クラスは、ElementFormat.kerning で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Kerning クラスは、<codeph>ElementFormat.kerning</codeph> で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/kerning"><linktext>flash.text.engine.ElementFormat.kerning</linktext></link></related-links><apiValue id="flash.text.engine:Kerning:AUTO"><apiName>AUTO</apiName><shortdesc> 
	文字体裁で適切な文字に対してのみ、カーニングが有効にされていることを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	文字体裁で適切な文字に対してのみ、カーニングが有効にされていることを示すために使用します。カーニングは、漢字、ひらがなまたはカタカナのいずれでもない 2 文字の間に適用されます。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:OFF"><apiName>OFF</apiName><shortdesc> 
	カーニングが無効にされていることを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	カーニングが無効にされていることを示すために使用します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:ON"><apiName>ON</apiName><shortdesc> 
	カーニングが有効にされていることを示すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	カーニングが有効にされていることを示すために使用します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:CFFHinting"><apiName>CFFHinting</apiName><shortdesc>
CFFHinting クラスは、FontDescription クラス中の CFF ヒンティングの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
CFFHinting クラスは、FontDescription クラス中の CFF ヒンティングの値を定義します。

<p>ヒンティングは、アウトラインフォントの表示を調整し、ピクセルグリッドに合わせて並べます。スクリーンサイズが小さい場合は、ヒンティングによって、鮮明で読みやすいテキストの表示が可能になります。
</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:CFFHinting:HORIZONTAL_STEM"><apiName>HORIZONTAL_STEM</apiName><shortdesc>
	太い水平線がピクセルグリッドに合わされ、読みやすくなります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontalStem</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	太い水平線がピクセルグリッドに合わされ、読みやすくなります。この定数は、FontDescription クラスの <codeph>cffHinting</codeph> プロパティの設定で使用されます。<codeph>CFFHinting.HORIZONTAL_STEM</codeph> のシンタックスを使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:CFFHinting:NONE"><apiName>NONE</apiName><shortdesc> 
	ヒンティングは適用されません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ヒンティングは適用されません。文字中の水平線をピクセルグリッドに合わせる処理は行われません。この定数は、FontDescription クラスの <codeph>cffHinting</codeph> プロパティの設定で使用されます。これはアニメーションや大きなフォントサイズにお勧めする設定です。<codeph>CFFHinting.NONE</codeph> のシンタックスを使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineMirrorRegion"><apiName>TextLineMirrorRegion</apiName><shortdesc>
 TextLineMirrorRegion クラスは、イベントを別のイベントディスパッチャにミラーするテキスト行の部分を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextLineMirrorRegion クラスは、イベントを別のイベントディスパッチャにミラーするテキスト行の部分を表します。
 
 <p>テキスト行に対する通常のイベント送出処理が終了した後で、テキスト行が有効で、イベント通知が停止していない場合は、テキスト行のミラー領域にイベントが送出されます。</p>
 
 <p>マウスイベントのミラーは特殊なケースです。ミラー領域は実際には表示オブジェクトではないので、<codeph>mouseOver</codeph> イベントと <codeph>mouseOut</codeph> イベントはシミュレートされます。<codeph>rollOver</codeph> イベントと <codeph>rollOut</codeph> イベントはシミュレートされません。自然に発生するすべての <codeph>mouseOver</codeph> イベント、<codeph>mouseOut</codeph> イベント、<codeph>rollOver</codeph> イベントおよび <codeph>rollOut</codeph> イベントは、そのターゲットがテキスト行であるか、テキスト行の子であるかに関係なしに無視され、ミラーされません。</p>
 
 <p>ActionScript コードから直接 TextLineMirrorRegion オブジェクトを作成することはできません。<codeph>new TextLineMirrorRegion()</codeph> を呼び出すと、例外がスローされます。イベントミラーを ContentElement オブジェクトに割り当てるときには、TextLineMirrorRegion を作成します。</p>
 
 <p>TextLineMirrorRegion クラスは final クラスであるため、サブクラス化することはできません。</p>
 
 </apiDesc><example conref="examples\TextLineMirrorRegionExample.as"> この例は、ミラー領域のあるテキストのブロックを示しています。この領域をクリックすると赤色に表示されます。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ContentElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLineMirrorRegion;
    import flash.events.MouseEvent;
    import flash.events.EventDispatcher;
    import flash.ui.Mouse;

    public class TextLineMirrorRegionExample extends Sprite {
        
        var myEvent:EventDispatcher = new EventDispatcher();
        var fontDescription:FontDescription = new FontDescription();
        var textBlock:TextBlock = new TextBlock();

        public function TextLineMirrorRegionExample():void {
            
            fontDescription.fontWeight = "bold";
            var blackFormat:ElementFormat = new ElementFormat();
            blackFormat.fontSize = 18;
            blackFormat.color = 0x000000;
            blackFormat.fontDescription = fontDescription;
            
            var textElement1 = new TextElement("Click on different parts of me to find the ", blackFormat);
            var textElement2 = new TextElement("mirror regions",blackFormat);
            var textElement3 = new TextElement(". If I am a mirror region, I'll ",blackFormat);
            var textElement4 = new TextElement("turn red",blackFormat);
            var textElement5 = new TextElement(".",blackFormat);
            
            myEvent.addEventListener("click", clickHandler);
            myEvent.addEventListener("mouseOut", mouseOutHandler);
            myEvent.addEventListener("mouseOver", mouseOverHandler);
            
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>;
            groupVector.push(textElement1, textElement2, textElement3, textElement4, textElement5);
            var groupElement:GroupElement = new GroupElement(groupVector);
            
            textElement2.eventMirror=myEvent;
            textElement4.eventMirror=myEvent;
            
            textBlock.content = groupElement;
            createLines(textBlock);
        }
    
        private function clickHandler(event:MouseEvent):void
        {
            var redFormat:ElementFormat = new ElementFormat();
            redFormat.color = 0xCC0000;
            redFormat.fontSize = 18;
            redFormat.fontDescription = fontDescription;
            var line:TextLine = event.target as TextLine;
            var region:TextLineMirrorRegion = line.getMirrorRegion(myEvent);
            region.element.elementFormat = redFormat;
            createLines(textBlock);
        }
        
        private function mouseOverHandler(event:MouseEvent):void
        {
            Mouse.cursor = "button";
        }
        
        private function mouseOutHandler(event:MouseEvent):void
        {
            Mouse.cursor = "arrow";
        }
            
        private function createLines(textBlock:TextBlock):void 
        {
            var purgeLine:TextLine = textBlock.firstLine;
                
            while (purgeLine)
            {
                removeChild (purgeLine);
                purgeLine = purgeLine.nextLine;
            }
            var lineWidth:Number = 150;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
                
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/mirrorRegions"><linktext>TextLine.mirrorRegions</linktext></link></related-links><apiValue id="flash.text.engine:TextLineMirrorRegion:bounds:get"><apiName>bounds</apiName><shortdesc>
	 テキストラインを基準にするミラー領域の境界です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 テキストラインを基準にするミラー領域の境界です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:element:get"><apiName>element</apiName><shortdesc>
	 ミラー領域の派生元の ContentElement オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>このエレメントが含まれる TextLine は無効です。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 ミラー領域の派生元の <codeph>ContentElement</codeph> オブジェクトです。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:mirror:get"><apiName>mirror</apiName><shortdesc>
	 ミラー領域に影響を与えるイベントをミラーする先の EventDispatcher オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 ミラー領域に影響を与えるイベントをミラーする先の <codeph>EventDispatcher</codeph> オブジェクトです。このオブジェクトは、ミラー領域で特に発生するマウスイベントと、テキスト行がターゲットになる他のすべてのイベントを含みます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:nextRegion:get"><apiName>nextRegion</apiName><shortdesc>
	 テキストエレメントから派生するセット内の次の TextLineMirrorRegion。現在の領域が、セット内の最後のミラー領域である場合は null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 テキストエレメントから派生するセット内の次の TextLineMirrorRegion。これが、セット内の最後のミラー領域である場合は <codeph>null</codeph>。同じ行または別のテキスト行にあります。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:previousRegion:get"><apiName>previousRegion</apiName><shortdesc>
	 テキストエレメントから派生するセット内の前の TextLineMirrorRegion。現在の領域が、セット内の最初のミラー領域である場合は null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 テキストエレメントから派生するセット内の前の TextLineMirrorRegion。現在の領域が、セット内の最初のミラー領域である場合は <codeph>null</codeph>。同じ行または別のテキスト行にあります。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:textLine:get"><apiName>textLine</apiName><shortdesc>
	 このミラー領域を含む TextLine です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 このミラー領域を含む TextLine です。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LineJustification"><apiName>LineJustification</apiName><shortdesc>
LineJustification クラスは、TextJustifier サブクラスの lineJustfication プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
LineJustification クラスは、TextJustifier サブクラスの <codeph>lineJustfication</codeph> プロパティの設定で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/lineJustification"><linktext>EastAsianJustifier.lineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier/lineJustification"><linktext>SpaceJustifier.lineJustification</linktext></link></related-links><apiValue id="flash.text.engine:LineJustification:ALL_BUT_LAST"><apiName>ALL_BUT_LAST</apiName><shortdesc> 
	テキストエンジンに、最後の行以外のすべての行を位置揃えするように指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allButLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストエンジンに、最後の行以外のすべての行を位置揃えするように指示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:ALL_INCLUDING_LAST"><apiName>ALL_INCLUDING_LAST</apiName><shortdesc> 
	テキストエンジンに、すべての行を位置揃えするように指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allIncludingLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストエンジンに、すべての行を位置揃えするように指示します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:UNJUSTIFIED"><apiName>UNJUSTIFIED</apiName><shortdesc> 
	テキストエンジンに、位置揃えされていない行を生成するように指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unjustified</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストエンジンに、位置揃えされていない行を生成するように指示します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
 SpaceJustifier クラスは、テキストブロック内のテキスト行に対する位置揃えオプションを制御するために必要なプロパティを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 SpaceJustifier クラスは、テキストブロック内のテキスト行に対する位置揃えオプションを制御するために必要なプロパティを表します。 
 
 <p> SpaceJustifier オブジェクトのプロパティを設定する前に、コンストラクター <codeph>new SpaceJustifier()</codeph> を使用して SpaceJustifier オブジェクトを作成する必要があります。SpaceJustifier オブジェクトが TextBlock に適用された後で SpaceJustifier オブジェクトのプロパティを設定しても、TextBlock は無効化されません。</p>
 
 </apiDesc><example conref="examples\SpaceJustifierExample.as"> 次の例では、文字間隔を使用して、最後の行を除くテキストのブロックすべてを位置揃えします。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.SpaceJustifier;
    import flash.text.engine.LineJustification;
    
    public class SpaceJustifierExample extends Sprite {
        
        public function SpaceJustifierExample():void {
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format);
            var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_BUT_LAST);
            spaceJustifier.letterSpacing = true;
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.textJustifier = spaceJustifier;
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:SpaceJustifier:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
     SpaceJustifier オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>locale</codeph> が <codeph>null</codeph> であるか、有効なロケールを表すには短すぎます。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>lineJustification</codeph> は、<codeph>LineJustification</codeph> のメンバーではありません。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>位置揃え規則を決定するためのロケールです。デフォルト値は<codeph>「en」</codeph>です。
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unjustified</apiData><apiDesc>段落に対する行の位置揃えタイプです。このプロパティには、<codeph>LineJustification</codeph> 定数を使用します。デフォルト値は <codeph>LineJustification.UNJUSTIFIED</codeph> です。
     </apiDesc></apiParam><apiParam><apiItemName>letterSpacing</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>位置揃えに文字間隔を使用するかどうかを指定します。デフォルト値は <codeph>false</codeph> です。
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     SpaceJustifier オブジェクトを作成します。LineJustification クラスには、適用可能な行の位置揃えのタイプを指定する定数が含まれます。
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:SpaceJustifier:clone"><apiName>clone</apiName><shortdesc>
	 SpaceJustifier のクローンコピーを構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>This class is currently stored as a live reference, but there is no way to track when its 
	 properties change.  This means that when changes are made, text blocks are not invalidated, which in 
	 the current implementation can lead to player crashes.  Even from the API perspective its wrong, as 
	 the affected text lines should be marked INVALID when format changes are made, but they�re not. The 
	 solution is to use a copy-on-set model.  When the object is passed in, the player copies it, so later
	 changes to the object that was passed in have no effect. The setter makes an internal copy of the 
	 array; the getter returns a copy of the internal copy. Operations like 
	 myBlock.textJustifier.spaceJustifier.letterSpacing = true will have no effect. Users who subclass 
	 this class in the future will need to use the clone() method to implement this technique of 
	 'locking' the format once it has been set.  
	 
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>SpaceJustifier</codeph> オブジェクトのコピーです。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 SpaceJustifier のクローンコピーを構築します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:SpaceJustifier:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     位置揃えに文字間隔を使用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     位置揃えに文字間隔を使用するかどうかを指定します。
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>