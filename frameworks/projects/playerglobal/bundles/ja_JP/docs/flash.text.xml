<?xml version="1.0"?>
<apiPackage id="flash.text"><apiName>flash.text</apiName><apiDetail/><apiClassifier id="flash.text:TextExtent"><apiName>TextExtent</apiName><shortdesc>
 TextExtent クラスには、テキストフィールドのテキストの範囲に関する情報が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextExtent クラスには、テキストフィールドのテキストの範囲に関する情報が含まれます。このクラスのオブジェクトは、<codeph>TextFormat.getTextExtent</codeph> メソッドによって返されます。
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.text:TextExtent:TextExtent"><apiName>TextExtent</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>textFieldWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>textFieldHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>ascent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam><apiParam><apiItemName>descent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="flash.text:TextExtent:ascent"><apiName>ascent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:descent"><apiName>descent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:height"><apiName>height</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:textFieldHeight"><apiName>textFieldHeight</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:textFieldWidth"><apiName>textFieldWidth</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="flash.text:TextExtent:width"><apiName>width</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:CSMSettings"><apiName>CSMSettings</apiName><shortdesc>
	 CSMSettings クラスには、CSM（Continuous Stroke Modulation）を実現するために TextRenderer.setAdvancedAntiAliasingTable() メソッドで使用するプロパティが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Not functioning correctly. Bug report 193833
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 CSMSettings クラスには、CSM（Continuous Stroke Modulation）を実現する <codeph>TextRenderer.setAdvancedAntiAliasingTable()</codeph> メソッドで使用するプロパティが含まれています。CSM は、線の太さとエッジのシャープネスの両方を連続的に変調します。
	 
     </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links><apiConstructor id="flash.text:CSMSettings:CSMSettings"><apiName>CSMSettings</apiName><shortdesc>
     カスタムアンチエイリアス設定の線の値を格納する新しい CSMSettings オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>設定が適用されるサイズです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>insideCutoff</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>内部カットオフ値です。これより密度が大きいと、最大密度値（255 など）に設定されます。
	 </apiDesc></apiParam><apiParam><apiItemName>outsideCutoff</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>外部カットオフ値です。これより密度が低い場合は 0 に設定されます。
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     カスタムアンチエイリアス設定の線の値を格納する新しい CSMSettings オブジェクトを作成します。 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text:CSMSettings:fontSize"><apiName>fontSize</apiName><shortdesc>
		 設定が適用されるサイズです（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 設定が適用されるサイズです（ピクセル単位）。
		 
		 <p><codeph>advancedAntiAliasingTable</codeph> 配列が <codeph>setAdvancedAntiAliasingTable()</codeph> メソッドに渡されるとき、この配列に異なるフォントサイズの CSM 設定を指定する複数の項目を含めることができます。このプロパティを使用して、他の設定が適用されるフォントサイズを指定できます。
		 </p>
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:CSMSettings:insideCutoff"><apiName>insideCutoff</apiName><shortdesc>
		 内部カットオフ値です。これより密度が大きいと、最大密度値（255 など）に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 内部カットオフ値です。これより密度が大きいと、最大密度値（255 など）に設定されます。
         
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:CSMSettings:outsideCutoff"><apiName>outsideCutoff</apiName><shortdesc>
		 外部カットオフ値です。これより密度が低い場合は 0 に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 外部カットオフ値です。これより密度が低い場合は 0 に設定されます。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextColorType"><apiName>TextColorType</apiName><shortdesc>
TextColorType クラスは、flash.text.TextRenderer クラスにカラー値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextColorType クラスは、flash.text.TextRenderer クラスにカラー値を提供します。

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer"><linktext>flash.text.TextRenderer</linktext></link></related-links><apiValue id="flash.text:TextColorType:DARK_COLOR"><apiName>DARK_COLOR</apiName><shortdesc>
    setAdvancedAntiAliasingTable() メソッドの colorType パラメーターで使用されます。</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dark</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>colorType</codeph> パラメーター（<codeph>setAdvancedAntiAliasingTable()</codeph> メソッド）で使用されます。シンタックス <codeph>TextColorType.DARK_COLOR</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:TextColorType:LIGHT_COLOR"><apiName>LIGHT_COLOR</apiName><shortdesc>
    setAdvancedAntiAliasingTable() メソッドの colorType パラメーターで使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>light</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>colorType</codeph> パラメーター（<codeph>setAdvancedAntiAliasingTable()</codeph> メソッド）で使用されます。シンタックス <codeph>TextColorType.LIGHT_COLOR</codeph> を使用します。	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:GridFitType"><apiName>GridFitType</apiName><shortdesc>
GridFitType クラスは、TextField クラスのグリッドフィッティングの値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
GridFitType クラスは、TextField クラスのグリッドフィッティングの値を定義します。

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiValue id="flash.text:GridFitType:NONE"><apiName>NONE</apiName><shortdesc> 
	グリッドフィッティングは設定されません。</shortdesc><prolog><author>Bob Pappas
	
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	グリッドフィッティングは設定されません。文字の水平方向と垂直方向の線は、ピクセルグリッドに合わされません。この定数は、TextField クラスの <codeph>gridFitType</codeph> プロパティの設定で使用されます。通常、これはアニメーションや大きなフォントサイズに適した設定です。シンタックス <codeph>GridFitType.NONE</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/gridFitType"><linktext>flash.text.TextField.gridFitType</linktext></link></related-links></apiValue><apiValue id="flash.text:GridFitType:PIXEL"><apiName>PIXEL</apiName><shortdesc>
	太い水平線と垂直線がピクセルグリッドに合わされます。</shortdesc><prolog><author>Bob Pappas
	
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pixel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	太い水平線と垂直線がピクセルグリッドに合わされます。この定数は、TextField クラスの <codeph>gridFitType</codeph> プロパティの設定で使用されます。この設定は左揃えテキストフィールドについてのみ機能し、静止テキストの <codeph>GridFitType.SUBPIXEL</codeph> 定数のように動作します。左揃えのテキストは通常、この設定を使用すると、最も読みやすくなります。シンタックス <codeph>GridFitType.PIXEL</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/gridFitType"><linktext>flash.text.TextField.gridFitType</linktext></link></related-links></apiValue><apiValue id="flash.text:GridFitType:SUBPIXEL"><apiName>SUBPIXEL</apiName><shortdesc>
	太い水平線と垂直線が LCD モニターのサブピクセルグリッドに合わされます。</shortdesc><prolog><author>Bob Pappas
	
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subpixel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	太い水平線と垂直線が LCD モニターのサブピクセルグリッドに合わされます。赤、緑、青が、LCD スクリーン上の実際のピクセルです。これは、右揃えまたは中央揃えのダイナミックテキストに適した設定で、アニメーション品質とテキスト品質のバランスを取るのに役立ちます。この定数は、TextField クラスの <codeph>gridFitType</codeph> プロパティの設定で使用されます。シンタックス <codeph>GridFitType.SUBPIXEL</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/gridFitType"><linktext>flash.text.TextField.gridFitType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:StaticText"><apiName>StaticText</apiName><shortdesc>
 このクラスは、表示リスト上の StaticText オブジェクトを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObject</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスは、表示リスト上の StaticText オブジェクトを表します。ActionScript を使用して StaticText オブジェクトを作成することはできません。StaticText オブジェクトを作成できるのはオーサリングツールだけです。新しい StaticText オブジェクトを作成しようとすると <codeph>ArgumentError</codeph> が発生します。
 
 <p>ActionScript 3.0 で既存の静止テキストフィールドへの参照を作成するために、表示リスト内のアイテムを反復処理することができます。例えば、次の例では、表示リストに静止テキストフィールドが含まれるかどうかを確認し、フィールドを変数に割り当てます。</p>
 
 <codeblock>
 var i:uint;
 for (i = 0; i &lt; this.numChildren; i++) {
     var displayitem:DisplayObject = this.getChildAt(i);
     if (displayitem instanceof StaticText) {
         trace("a static text field is item " + i + " on the display list");
         var myFieldLabel:StaticText = StaticText(displayitem);
         trace("and contains the text: " + myFieldLabel.text);
     }
 }
 </codeblock>
 </apiDesc></apiClassifierDetail><apiValue id="flash.text:StaticText:text:get"><apiName>text</apiName><shortdesc>
     静止テキストフィールドの現在のテキストを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     静止テキストフィールドの現在のテキストを返します。オーサリングツールによって、テキスト全体を構成する複数のテキストフィールドオブジェクトが書き出される場合があります。例えば、縦書きテキストの場合、オーサリングツールによって文字ごとに 1 つのテキストフィールドが作成されます。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextField"><apiName>TextField</apiName><shortdesc>
 TextField クラスは、テキストの表示と入力用の表示オブジェクトを作成するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>TextField クラスは、テキストの表示と入力用の表示オブジェクトを作成するために使用されます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.display:InteractiveObject</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextField クラスは、テキストの表示と入力用の表示オブジェクトを作成するために使用されます。SWF ファイルのダイナミックテキストフィールドおよびテキスト入力フィールドは、すべて TextField クラスのインスタンスです。<ph outputclass="flexonly">TextField クラスを使用すると、低レベルでのテキストレンダリングが可能になります。ただし、Flex では一般的に Label、Text、TextArea、TextInput コントロールを使用して、テキスト処理を行います。</ph> <ph outputclass="flashonly">プロパティインスペクターを使用して、テキストフィールドにインスタンス名を付けることができます。また、TextField クラスのメソッドとプロパティを使用して、ActionScript でテキストフィールドを操作できます。TextField インスタンスの名前は、ムービーエクスプローラーに表示されます。また、アクションパネルのターゲットパスの挿入ダイアログボックスにも表示されます。</ph>
 
 <p>テキストフィールドを動的に作成する場合は、<codeph>TextField()</codeph> コンストラクターを使用します。</p>
 
 <p>TextField クラスのメソッドを使用すると、オーサリング時または実行時に作成したダイナミックテキストフィールドやテキスト入力フィールドにテキストを設定、選択、および操作できます。 </p>
 
 <p>ActionScript には、テキストを実行時にフォーマットする方法がいくつか用意されています。TextFormat クラスでは、TextField オブジェクトの文字フォーマットと段落フォーマットを設定できます。<codeph>TextField.styleSheet</codeph> プロパティおよび StyleSheet クラスを使用して、テキストフィールドに CSS（Cascading Style Sheet）スタイルを適用できます。CSS を使用すると、ビルトイン HTML タグのスタイル設定、新しいフォーマットタグの定義、またはスタイルの適用を行うことができます。HTML 形式のテキスト（CSS スタイルを使用している場合も可）をテキストフィールドに直接割り当てることができます。テキストフィールドに割り当てる HTML テキストに埋め込みメディア（ムービークリップ、SWF ファイル、GIF ファイル、PNG ファイル、および JPEG ファイル）を含めることができます。この場合テキストは、Web ブラウザー上で HTML ドキュメントの埋め込みメディアの周りをテキストが囲むのと同じように、埋め込みメディアの周りを囲みます。 </p>
 
 <p>Flash Player では、テキストのフォーマットに利用できる HTML タグのサブセットをサポートしています。<xref href="flasht/text/TextField#htmlText">htmlText</xref> プロパティの説明の、サポートされている HTML タグのリストを参照してください。</p>
 
 </apiDesc><example conref="examples\TextFieldExample.as"> 次の例では、<codeph>TextFieldExample</codeph> クラスを使用して、テキストメッセージを表示します。これを行うには、以下の手順を使用します。
 <ol>
  <li>タイプが TextField の <codeph>label</codeph> プロパティが作成されます。</li>
  <li>クラスコンストラクターが <codeph>configureLabel()</codeph> 関数を呼び出します。</li>
  <li> <codeph>configureLabel()</codeph> メソッドはまず、新しい TextField オブジェクトを作成し、これを <codeph>label</codeph> プロパティに割り当て、次に、そのパラメーターを次のように設定します。
  <ul>
      <li>テキストフィールドを左揃えにします。</li>
      <li>背景の塗りを有効にします。</li>
      <li>境界線を有効にします。</li>
  </ul>
  </li>
  <li><codeph>configureLabel()</codeph> メソッドが <codeph>format</codeph> 変数を作成し、それを TextFormat の新しいインスタンスに割り当てます。次に、パラメーターを次のように設定します。
  <ul>
      <li>Font type = Verdana</li>
      <li>Font color = solid red</li>
      <li>Font size = 10</li>
      <li>Font underline = true</li>
  </ul>
  </li>
  <li><codeph>defaultTextFormat</codeph> プロパティ（<codeph>label</codeph> テキストフィールド）が <codeph>format</codeph> に設定され、<codeph>label</codeph> インスタンスが表示リストに追加されます。表示リストには、初期状態でステージ上にテキストがないテキストフィールドが表示されます。</li>
 
  <li>コンストラクターは、<codeph>label</codeph> テキストフィールドのテキストを <codeph>"Hello world and welcome to the show."</codeph>  に設定します。これは、<codeph>setLabel()</codeph> メソッドを呼び出すことによって行われます。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFormat;


    public class TextFieldExample extends Sprite {
        private var label:TextField;
        private var labelText:String = "Hello world and welcome to the show.";

        public function TextFieldExample() {
            configureLabel();
            setLabel(labelText);
        }

        public function setLabel(str:String):void {
            label.text = str;
        }

        private function configureLabel():void {
            label = new TextField();
            label.autoSize = TextFieldAutoSize.LEFT;
            label.background = true;
            label.border = true;

            var format:TextFormat = new TextFormat();
            format.font = "Verdana";
            format.color = 0xFF0000;
            format.size = 10;
            format.underline = true;

            label.defaultTextFormat = format;
            addChild(label);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link><link href="flash.text.xml#StyleSheet"><linktext>flash.text.StyleSheet</linktext></link></related-links><adobeApiEvent id="flash.text:TextField_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
 Flash Player では、ユーザーがテキストの文字を入力したときに textInput イベントが送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Flash Player では、ユーザーがテキストの文字を入力したときに <codeph>textInput</codeph> イベントを送出します。標準キーボード、IME（入力メソッドエディター）、音声認識システム、書式やスタイルの情報を持たないプレーンテキストのペースト操作など、様々なテキスト入力メソッドによって、このイベントが生成されます。
 </apiDesc><example conref="examples\TextField_textInput.as"> 次の例では、2 つの TextField オブジェクトを定義します。最初の TextField オブジェクトは入力テキストフィールドで、2 番目の TextField オブジェクトはダイナミックテキストフィールドです。最初のテキストフィールドにテキスト文字を入力すると、<codeph>textInput</codeph> イベントが送出され、<codeph>textInputHandler()</codeph> ハンドラーが呼び出されて、2 番目のテキストフィールドに文字が表示されます。テキストブロックを入力フィールドに貼り付けると、イベントハンドラーによってブロック全体がもう一方のフィールドにコピーされます。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.*;
    import flash.events.Event;
    import flash.events.TextEvent;
    import flash.events.MouseEvent;

    public class TextInputExample extends Sprite
    {
        private var myTextBox1:TextField = new TextField();
        private var myTextBox2:TextField = new TextField();

        public function TextInputExample()
        {
            myTextBox1.type = TextFieldType.INPUT;
            myTextBox1.width = 200;
            myTextBox1.height = 20;
            myTextBox1.background = true;
            myTextBox1.border = true;
            
            myTextBox2.x=220;

            addChild(myTextBox1);
            addChild(myTextBox2);
            myTextBox1.addEventListener(TextEvent.TEXT_INPUT,textInputHandler);
        }

        public function textInputHandler(event:TextEvent):void
        {
           myTextBox2.text=event.text;
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text:TextField_flash.events.Event.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
 ユーザーがスクロールした後に、TextField オブジェクトによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SCROLL</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 ユーザーがスクロールした<i>後</i>に、TextField オブジェクトによって送出されます。 
 </apiDesc><example conref="examples\TextField_scroll.as"> 次の例では、2 つの TextField オブジェクトを定義します。最初の TextField オブジェクトには、関連付けられた 2 つのイベントハンドラーがあります。この最初のテキストフィールド内でマウスをクリックすると、<codeph>mouseDown</codeph> イベントが送出され、関連付けられた <codeph>mouseDownScroll</codeph> ハンドラーが呼び出されます。<codeph>mouseDownScroll()</codeph> ハンドラーによって、フィールドがスクロールします。次に、<codeph>scroll</codeph> イベントが送出され、関連付けられた <codeph>scrollHandler()</codeph> ハンドラーによって 2 番目のテキストフィールドが更新されて、現在のスクロール位置が表示されます。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.*;
    import flash.events.Event;
    import flash.events.TextEvent;
    import flash.events.MouseEvent;

    public class TextScrollExample extends Sprite
    {
        private var myTextBox1:TextField = new TextField();
        private var myTextBox2:TextField = new TextField();
        private var myText:String = "Hello world and welcome to the show. It's really nice to meet you. Take your coat off and stay a while. OK, show is over. Hope you had fun. You can go home now. Don't forget to tip your waiter. There are mints in the bowl by the door. Thank you. Please come again.";

        public function TextScrollExample()
        {
            myTextBox1.text = myText;
            myTextBox1.width = 200;
            myTextBox1.height = 50;
            myTextBox1.multiline = true;
            myTextBox1.wordWrap = true;
            myTextBox1.background = true;
            myTextBox1.border = true;
            
            myTextBox2.x=220;
            myTextBox2.text="scrolled to line: " + myTextBox1.scrollV;

            addChild(myTextBox1);
            addChild(myTextBox2);
            myTextBox1.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownScroll);
            myTextBox1.addEventListener(Event.SCROLL, scrollHandler);
        }

        public function mouseDownScroll(event:MouseEvent):void
        {
            myTextBox1.scrollV++;
        }
        public function scrollHandler(event:Event):void
        {
           myTextBox2.text="scrolled to line: " + myTextBox1.scrollV;
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text:TextField_flash.events.TextEvent.LINK_link"><apiName>link</apiName><shortdesc>
 HTML が有効になっているテキストフィールドのハイパーリンクをユーザーがクリックしたときに送出されます（URL は "event:" で始まります）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.LINK</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 HTML が有効になっているテキストフィールドのハイパーリンクをユーザーがクリックしたときに送出されます（URL は "event:" で始まります）。「event」の後の URL の部分は、LINK イベントの text プロパティ内に配置されます。
 <p><b>注意：</b>デフォルトの動作であるテキストフィールドへのテキストの追加は、Flash Player がイベントを生成するときにのみ発生します。この場合は、ユーザーがテキストを入力しようとするときです。<codeph>textInput</codeph> イベントに送信することによってテキストフィールドにテキストを入力することはできません。</p>
 </apiDesc><example conref="examples\TextField_event_link.as"> 次の例では、<codeph>playMP3()</codeph> 関数を定義します。<codeph>list</codeph> という TextField オブジェクト を作成し、HTML テキストを格納します。テキスト <codeph>"Track 1"</codeph> と <codeph>"Track 2"</codeph> は、テキストフィールド内のリンクです。playMP3() 関数は、ユーザーがどちらかのリンクをクリックしたときに呼び出されます。MP3 ファイルの名前は、HTML タグの <codeph>href</codeph> 属性で "event:" というストリングのうしろに付けられ、<codeph>link</codeph> イベントオブジェクトの <codeph>text</codeph> プロパティとして <codeph>linkHandler()</codeph> メソッドに渡されます。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.events.TextEvent;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class TextField_event_link extends Sprite
    {
        private var myMP3:Sound;
        public function TextField_event_link() {
            myMP3 = new Sound();
            var list:TextField = new TextField();
            list.autoSize = TextFieldAutoSize.LEFT;
            list.multiline = true;
            list.htmlText = "&lt;a href=\"event:track1.mp3\">Track 1&lt;/a>&lt;br>";
            list.htmlText += "&lt;a href=\"event:track2.mp3\">Track 2&lt;/a>&lt;br>";
            addEventListener(TextEvent.LINK, linkHandler);
            addChild(list);
        }
        
        private function playMP3(mp3:String):void {
            try {    
                myMP3.load(new URLRequest(mp3));
                myMP3.play();
            }
            catch(err:Error) {
                trace(err.message);
            }
            myMP3.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        }
        
        private function linkHandler(linkEvent:TextEvent):void {
            playMP3(linkEvent.text);
        }
        
        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text:TextField_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
 値が変更される前に送出される textInput イベントとは異なり、コントロールの値が変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 値が変更される前に送出される <codeph>textInput</codeph> イベントとは異なり、コントロールの値が変更された後に送出されます。コントロールがフォーカスを失った後でのみイベントを送出する <codeph>change</codeph> イベントの W3C DOM Event Model バージョンとは異なり、<codeph>change</codeph> イベントの ActionScript 3.0 バージョンはコントロールが変更されたときに送出されます。例えば、ユーザーがテキストフィールドにテキストを入力すると、キーストロークのたびに <codeph>change</codeph> イベントが送出されます。
 </apiDesc><example conref="examples\TextField_Event_changeExample.as"> 次の例では、ユーザーが入力したテキスト（ユーザー入力）が、異なるテキストフォーマットで、他のテキストフィールドに即座にコピー（エコー）されます。 
 
 <p>2 つのテキストフィールドが作成され、1 つはユーザー入力用、もう 1 つ（<codeph>headingTextField</codeph>）はユーザー入力のコピー用です。また、TextFormat オブジェクトが作成され、<codeph>headingTextField</codeph> テキストフィールドにデフォルトのテキストフォーマットが割り当てられます。 テキストフィールドの内容が変更されると、<codeph>changeHandler()</codeph> メソッドが呼び出され、<codeph>inputTextField</codeph> テキストフィールドのテキストが <codeph>headingTextField</codeph> テキストフィールドに割り当てられます。メソッドが <codeph>TextEvent.TEXT_INPUT</codeph> イベントで呼び出され、<codeph>Event.CHANGE</codeph> イベントで呼び出されたのではない場合、ユーザーが入力したコンテンツは、ユーザーが別の入力を行った後でのみコピーされます。</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFormat;
    import flash.text.TextFormatAlign;
    import flash.events.Event;
    
    import flash.events.TextEvent;

    public class TextField_Event_changeExample extends Sprite {
        private var inputTextField:TextField = new TextField(); 
        private var headingTextField:TextField = new TextField(); 
        private var newFormat:TextFormat = new TextFormat();
         
        public function TextField_Event_changeExample() {
            headingTextField.x = 10;
            headingTextField.y = 10;
            headingTextField.height = 30;
            headingTextField.width = 400;
            headingTextField.background = true;
            headingTextField.backgroundColor = 0xF5F5DC;
            headingTextField.selectable = false;
 
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 230;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.maxChars = 40;
            inputTextField.wordWrap = true;
            inputTextField.type = TextFieldType.INPUT;

            inputTextField.addEventListener(Event.CHANGE, changeHandler);

            newFormat.bold = true;
            newFormat.size = 18;
            newFormat.color = 0xFF0000;
            newFormat.align = TextFormatAlign.CENTER;

            headingTextField.defaultTextFormat = newFormat;

            this.addChild(inputTextField);
            this.addChild(headingTextField);
        }

        private function changeHandler(e:Event):void {
            headingTextField.text = inputTextField.text;
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.text:TextField:TextField"><apiName>TextField</apiName><shortdesc>
	新しい TextField インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Need to add an example.
	 </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	新しい TextField インスタンスを作成します。TextField インスタンスの作成後、親 DisplayObjectContainer オブジェクトの <codeph>addChild()</codeph> メソッドまたは <codeph>addChildAt()</codeph> メソッドを呼び出し、TextField インスタンスを表示リストに追加します。
     <p>テキストフィールドのデフォルトサイズは 100 × 100 ピクセルです。</p>
	 
	 
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text:TextField:appendText"><apiName>appendText</apiName><shortdesc>
	 newText パラメーターで指定されたストリングを、テキストフィールドのテキストの最後に付加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>既存のテキストに追加するストリングです。
	 
     </apiDesc></apiParam><apiTipTexts><apiTipText>TextField の既存のテキストの最後にテキストを追加します。
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>newText</codeph> パラメーターで指定されたストリングを、テキストフィールドのテキストの最後に付加します。大量の内容が含まれるテキストフィールドの場合は特に、このメソッドを使用するほうが、付加の指定（<codeph>+=</codeph>）を <codeph>text</codeph> プロパティに加える（<codeph>someTextField.text += moreText</codeph> など）よりも効率的です。
     
	 </apiDesc><example conref="examples\TextField_appendTextExample.as"> 次の例では、週末ではない場合は時刻が表示され、週末の場合は "It's the weekend" というテキストが表示されます。特定の位置までの文字数とテキストフィールドの行数もカウントされます。
 
 <p><codeph>outputText</codeph> テキストフィールドが、<codeph>autoSize</codeph> プロパティにより、テキストに合わせて自動的に設定され、サイズが左揃えテキストに合わせて変更されます。<codeph>outputText.text</codeph> プロパティがコンテンツの最初の行を書き出し、<codeph>appendText()</codeph> メソッドが残りのコンテンツを追加します。<codeph>text</codeph> プロパティで開始する必要はありません。<codeph>appendText()</codeph> メソッドを使用して、最初からテキストを追加することもできます。<codeph>text</codeph> プロパティをもう一度設定すると、元のテキストが上書きされます。<codeph>+=</codeph> 演算子を使用して、<codeph>text</codeph> プロパティでコンテンツを追加します。</p>
 
 <p><codeph>if</codeph> ステートメントは、日付が木曜日（6）か日曜日（0）かをチェックします。それ以外の場合、<codeph>toLocaleTimeString()</codeph> メソッドがローカル時間を返し、この時間がテキストフィールドのコンテンツに追加されます。</p> 
 
 <p>テキストフィールドの <codeph>length</codeph> プロパティは、関数が呼び出される直前の文字数を読み取るために使用され、<codeph>numLines</codeph> プロパティは、テキストフィールドの行数をカウントするために使用されます。空白行が行数にカウントされ、コンテンツの長さを特定するために空白文字と改行（\n）がカウントされます。</p>   
 
<codeblock>
  package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
 
    public class TextField_appendTextExample extends Sprite {
         
        public function TextField_appendTextExample() {
            var outputText:TextField = new TextField();
            var today:Date = new Date();
                
            outputText.x = 10;
            outputText.y = 10;
            outputText.background = true;
            outputText.autoSize = TextFieldAutoSize.LEFT;
 
            outputText.text = "WHAT TIME IS IT?" + "\n\n";
 
            if((today.day == 0) || (today.day == 6)) {
                outputText.appendText("It's the weekend.");
                outputText.appendText("\n\n");
           
            } else {
                outputText.appendText("The time is: ");
                outputText.appendText(today.toLocaleTimeString() + ".\n\n");  
            }

            outputText.appendText("Number of characters including line breaks and spaces so far: ");
            outputText.appendText(outputText.length.toString() + "\n");
            outputText.appendText("Number of lines in the outputText: ");
            outputText.appendText(outputText.numLines.toString());   

            this.addChild(outputText);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc>
	 文字の境界ボックスである矩形を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>文字の境界ボックスを定義する <codeph>x</codeph> および <codeph>y</codeph> の最小値と最大値が指定された矩形です。
	 
     </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>文字の 0 から始まるインデックス値です。つまり、最初の位置は 0、2 番目の位置は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>文字の境界ボックスである矩形を返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 文字の境界ボックスである矩形を返します。
	 
	 </apiDesc><example conref="examples\TextField_getCharBoundariesExample.as"> 次の例では、ユーザーが選択した文字をマークする（スポットライトを設定する）ために <codeph>getCharBoundaries()</codeph> メソッドが使用されます。
 
 <p>クラスは、選択された各文字の周囲に矩形を描画するために使用する <codeph>spotlight</codeph> Shape オブジェクトを定義します。ユーザーが <codeph>myTextField</codeph> テキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getCharIndexAtPoint()</codeph> メソッドがクリックされた文字のインデックスを取得します。このインデックスは、マウスクリックの <codeph>localX</codeph> と <codeph>localY</codeph> 座標に基づき、含まれる <codeph>Sprite</codeph> を基準にして表されます。ポイント（マウスクリック）された箇所に文字がない場合、<codeph>getCharIndexAtPoint()</codeph> メソッドは <codeph>-1</codeph> を返します。テキストフィールドがテキストより大きい場合があるので、返される整数（<codeph>index</codeph>）がチェックされ、ユーザーが文字をクリックしたかどうかが確認されます。また、<codeph>index</codeph> 整数は <codeph>getCharBoundaries()</codeph> によって使用され、文字の境界を保持する <codeph>Rectangle</codeph> オブジェクトが取得されます。<codeph>clear()</codeph> メソッドが、以前に表示された <codeph>spotlight</codeph> Shape オブジェクトをクリアします。文字の幅と高さの境界のサイズを持つ新しい矩形が、返された <codeph>frame</codeph> 矩形の x および y 座標を使用して、文字の位置（(10, 10) 座標からのオフセット）に生成されます。文字にスポットライトを設定するには、<codeph>spotlight</codeph> Shape オブジェクトを黄色で塗りつぶし、透明度を 35% に設定して、文字が見えるようにします。スペースも文字と見なされます。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.geom.Rectangle;
    import flash.events.MouseEvent;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;

    public class TextField_getCharBoundariesExample extends Sprite
    {
        private var myTextField:TextField = new TextField();    
        private var spotlight:Shape = new Shape();
        
        public function TextField_getCharBoundariesExample() {
            
            myTextField.x = 10;
            myTextField.y = 10; 
            myTextField.border = true;
            myTextField.selectable = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            myTextField.text = "Selected a character from this text by clicking on it."

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            
            this.addChild(myTextField);    
            this.addChild(spotlight);
         }

        private function clickHandler (e:MouseEvent):void {
            var index:int = myTextField.getCharIndexAtPoint(e.localX, e.localY);
 
            if (index != -1) {
                 var frame:Rectangle = myTextField.getCharBoundaries(index);

                spotlight.graphics.clear();    
                spotlight.graphics.beginFill(0xFFFF00, .35);
                spotlight.graphics.drawRect((frame.x + 10), (frame.y + 10), frame.width, frame.height);            
                spotlight.graphics.endFill();
            }
        } 
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc>
	 x および y パラメーターで指定された点にある文字の、0 から始まるインデックス値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>0 から始まる文字のインデックス値です。例えば、最初の位置は 0、次の位置は 1 と続きます（以下同様）。指定されたポイントがどの文字の上にもない場合は -1 を返します。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>文字の <i>x</i> 座標です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>文字の <i>y</i> 座標です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>文字の 0 から始まるインデックス値を返します。
	 
 	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>x</codeph> および <codeph>y</codeph> パラメーターで指定されたポイントにある文字の 0 から始まるインデックス値を返します。
	 
	 </apiDesc><example conref="examples\TextField_getCharIndexAtPointExample.as"> 次の例では、ユーザーが文字をクリックすると、文字がテキストの上の別のテキストフィールドにエコーされます。
 
 <p>最初のテキストフィールドは、ユーザーが選択するテキストを保持します。テキストがクリックされたが、選択されていないことを確認するために、<codeph>selectable</codeph> プロパティを false に設定します。ユーザーが <codeph>firstTextField</codeph> テキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getCharIndexAtPoint()</codeph> メソッドが文字のインデックスを返します。このインデックスは、マウスクリックの <codeph>localX</codeph> と <codeph>localY</codeph> 座標に基づいています。テキストフィールドがテキストより大きい場合があるので、返される整数（<codeph>index</codeph>）がチェックされ、ユーザーが文字をクリックしたかどうかが確認されます。ポイント（マウスクリック）された箇所に文字がない場合、<codeph>getCharIndexAtPoint()</codeph> メソッドは <codeph>-1</codeph> を返します。エコーされた文字が表示される新しいテキストフィールドの座標を設定するために、マウスの座標が使用されます。2 番目のテキストフィールドの文字の色は赤に設定されます。最後に、2 番目のフィールドのテキストが、<codeph>charAt()</codeph> メソッドを使用して取得された、選択した文字に設定されます。<codeph>text</codeph> プロパティを使用し、<codeph>appendText()</codeph> メソッドを使用しない場合、2 番目のテキストフィールドの文字は追加されずに上書きされます。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.geom.Rectangle;
    import flash.events.MouseEvent;
    import flash.text.TextFieldAutoSize;
    
    public class TextField_getCharIndexAtPointExample extends Sprite {
        private var firstTextField:TextField = new TextField();    
        private var secondTextField:TextField = new TextField();
        
        public function TextField_getCharIndexAtPointExample() {

            firstTextField.x = 100;
            firstTextField.y = 100; 
            firstTextField.width = 260;
            firstTextField.height = 20;
            firstTextField.border = true;
            firstTextField.background = true;
            firstTextField.selectable = false;
            
            firstTextField.text = "Selected a character from this text by clicking on it."

            firstTextField.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(firstTextField);    
            this.addChild(secondTextField);
         }

        private function clickHandler (e:MouseEvent):void {
            var index:int = firstTextField.getCharIndexAtPoint(e.localX, e.localY);

            if (index != -1) {
                secondTextField.x = mouseX;
                secondTextField.y =  70;
                secondTextField.border = true;
                secondTextField.selectable = false;
                secondTextField.background = true;
                secondTextField.textColor = 0xFF0000;
                secondTextField.autoSize = TextFieldAutoSize.LEFT;
                secondTextField.text = firstTextField.text.charAt(index);    
            }
        } 
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc>
	 文字インデックスを指定すると、同じ段落内の最初の文字のインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された文字インデックスは範囲外です。
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>同じ段落内の最初の文字を示す、0 から始まるインデックス値です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>文字の 0 から始まるインデックス値です。つまり、最初の文字は 0、2 番目の文字は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>文字の 0 から始まるインデックス値です。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 文字インデックスを指定すると、同じ段落内の最初の文字のインデックスを返します。
	 
	 </apiDesc><example conref="examples\TextField_getFirstCharInParagraphExample.as"> 次の例では、テキストフィールドのコンテンツに段落フォーマットが適用されます。ユーザーが段落をクリックすると、段落のテキストが右揃えになり、もう一度段落をクリックすると、元の（デフォルト）フォーマット（左揃え）に戻ります。
 
 <p>コンストラクターで、<codeph>myTextField</codeph> テキストフィールドがテキストを折り返すように設定されます。<codeph>getTextFormat</codeph> メソッドが、テキストフィールドにあるコンテンツの最初の文字の元のフォーマットを返します。このフォーマットは、<codeph>originalFormat</codeph> TextFormat オブジェクトに設定されています。また、新しい TextFormat オブジェクト（<codeph>newFormat</codeph>）が定義され、その <codeph>align</codeph> プロパティが右揃えに割り当てられます。ユーザーがテキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getCharIndexAtPoint()</codeph> メソッドが文字のインデックスを返します。このインデックスは、マウスクリックの <codeph>localX</codeph> と <codeph>localY</codeph> 座標に基づいています。最初の <codeph>if</codeph> ステートメントは、ユーザーが文字をクリックしたかどうかを確認します。<codeph>clickIndex</codeph> 整数（<codeph>getCharIndexAtPoint()</codeph> メソッドによって返された）を使用して、<codeph>getFirstCharInParagraph()</codeph> メソッドが、ユーザーがクリックした段落の最初の文字のインデックスを返します。段落の最後の文字のインデックスは、段落の長さを段落の最初の文字のインデックスに追加し（<codeph>getParagraphLength()</codeph> メソッドを使用）、最後の文字（<codeph>\n</codeph>）を引いて算出されます。2 番目の <codeph>if</codeph> ステートメントは、段落の最初の文字のフォーマットをチェックします。整列値が元のフォーマット（左揃え）と同じ場合、段落のすべての文字に新しいフォーマットが適用されます。それ以外の場合は、段落のフォーマットの設定が元のフォーマットに戻ります。整列とは、インデント、中黒、タブストップ、左右マージンなどのフォーマットと共に、段落に使用するフォーマットです。<codeph>endIndex</codeph> 引数が <codeph>setTextFormat()</codeph> メソッドで定義されていない場合、テキストの折り返しまたは改行を使用すると、フォーマットは段落の最初の行にのみ適用されます。</p>
     
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.text.TextFormat;
    import flash.text.TextFormatAlign;

    public class TextField_getFirstCharInParagraphExample extends Sprite
    {
        private var myTextField:TextField = new TextField();
        private var originalFormat:TextFormat = new TextFormat();
        private var newFormat:TextFormat = new TextFormat(); 
        
        public function TextField_getFirstCharInParagraphExample() {
            myTextField.x = 10;
            myTextField.y = 10; 
            myTextField.border = true;
            myTextField.wordWrap = true;
            myTextField.width = 300;
            myTextField.height = 300; 
            myTextField.background = true;
             
            myTextField.appendText("The TextField class is used to create display objects for "
                        + "text display and input. All dynamic and input text fields in a SWF file " 
                        + "are instances of the TextField class. You can use the TextField class "
                        + "to perform low-level text rendering. However, in Flex, you typically use "
                        + "the Label, Text, TextArea, and TextInput controls to process text. "  
                        + "You can give a text field an instance name in the Property inspector "
                        + "and use the methods and properties of the TextField class to manipulate it with ActionScript. "
                        + "TextField instance names are displayed in the Movie Explorer and in the Insert "
                        + "Target Path dialog box in the Actions panel.\n\n"  
                        + "To create a text field dynamically, use the TextField constructor.\n\n"
                        + "The methods of the TextField class let you set, select, and manipulate "  
                        + "text in a dynamic or input text field that you create during authoring or at runtime.\n\n");

            originalFormat = myTextField.getTextFormat(0);

            newFormat.align = TextFormatAlign.RIGHT;

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
  
            this.addChild(myTextField);
        }

        private function clickHandler(e:MouseEvent):void {
            var clickIndex:int = myTextField.getCharIndexAtPoint(e.localX, e.localY);
                  
            if(clickIndex != -1) {
                var paragraphFirstIndex:int = myTextField.getFirstCharInParagraph(clickIndex);
                var paragraphEndIndex:int = paragraphFirstIndex + ((myTextField.getParagraphLength(clickIndex) - 1));
            
                if (myTextField.getTextFormat(paragraphFirstIndex).align == originalFormat.align) {
                     myTextField.setTextFormat(newFormat, paragraphFirstIndex, paragraphEndIndex);
                }else {
                     myTextField.setTextFormat(originalFormat, paragraphFirstIndex, paragraphEndIndex);
                }
            } 
        }
    }
}
 
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getImageReference"><apiName>getImageReference</apiName><shortdesc>
	 指定された id の DisplayObject 参照を返します。&amp;lt;img&amp;gt; タグを使用して HTML フォーマットのテキストフィールドに追加されたイメージまたは SWF ファイルに関するものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一致する <codeph>id</codeph> 属性をテキストフィールドの <codeph>&lt;img></codeph> タグ内に持つイメージまたは SWF ファイルに対応する表示オブジェクトです。外部ソースから読み込まれたメディアの場合、このオブジェクトは Loader オブジェクトであり、いったん読み込まれると、メディアオブジェクトはその Loader オブジェクトの子になります。SWF ファイルに埋め込まれたメディアの場合、これは読み込まれたオブジェクトです。<codeph>&amp;lt;img&amp;gt;</codeph> タグの中に一致する <codeph>id</codeph> が含まれない場合、このメソッドは <codeph>null</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>（<codeph>&lt;img></codeph> タグの <codeph>id</codeph> 属性内にある）一致する <codeph>id</codeph> です。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 示された <codeph>id</codeph> の DisplayObject 参照を返します。<codeph>&lt;img></codeph> タグを使用して HTML フォーマットのテキストフィールドに追加されたイメージまたは SWF ファイルに関するものです。<codeph>&lt;img></codeph> タグは次の書式をとります。
	 
	 <p><pre><codeph>	&lt;img src = 'filename.jpg' id = 'instanceName' ></codeph></pre></p>
	 
	 </apiDesc><example conref="examples\TextField_getImageReferenceExample.as"> 次の例では、テキストフィールドをクリックすると、フィールド内のイメージの透明度が 25% に設定され、元の回転角度から 90 度回転します。クリックが続けられるたびに、イメージは回転し続けます。
 
 <p>イメージ（<codeph>image.jpg</codeph>）は HTML を使用して組み込まれます。ここでは、イメージファイルが SWF ファイルと同じディレクトリにあると仮定します。<codeph>id</codeph> 属性を <codeph>img</codeph> タグに対して定義する必要があります。これは、<codeph>getImageReference()</codeph> メソッドを使用してイメージにアクセスするためです。<codeph>htmlText</codeph> プロパティが HTML フォーマットのストリングコンテンツを組み込むために使用されます。ユーザーが <codeph>myTextField</codeph> テキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p> 
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getImageReference()</codeph> メソッドがイメージへの参照を <codeph>DisplayObject</codeph> として返します。この参照は、任意の <codeph>DisplayObject</codeph> オブジェクトと同じように、イメージを操作するために使用できます。ここでは、<codeph>alpha</codeph>（透明度）と <codeph>rotation</codeph> プロパティが設定されます。表示オブジェクトのマトリックス、カラー変換、ピクセル境界にアクセスするために、<codeph>transform</codeph> プロパティも使用できます。また、<codeph>flash.display.DisplayObject</codeph> をインポートする必要があります。</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.display.DisplayObject;
    
    import flash.text.TextFieldAutoSize;
    
    public class TextField_getImageReferenceExample extends Sprite
    {
        private var myTextField:TextField = new TextField();
        
        public function TextField_getImageReferenceExample()
        {
            var myText1:String = "&lt;p>Here is an image we want to mainpulate: &lt;img src='image.jpg' id='testimage'>&lt;/p>";

            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 250;
            myTextField.height = 250;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.border = true;
            myTextField.multiline = true;

            myTextField.htmlText = myText1;
            
            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            
            this.addChild(myTextField);
        }
 
        private function clickHandler(e:MouseEvent):void {
            var imageRef:DisplayObject = myTextField.getImageReference("testimage");
 
            imageRef.rotation += 90;
            imageRef.x = 125;
            imageRef.y = 125;
            imageRef.alpha = 0.25;      
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>htmlText</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc>
	 x および y パラメーターで指定された点にある行の 0 から始まるインデックス値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>行の 0 から始まるインデックス値です。つまり、最初の行は 0、2 番目の行は 1 で、以下同様に続きます。指定されたポイントがどの行の上にもない場合は -1 を返します。
 	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>行の <i>x</i> 座標です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>行の <i>y</i> 座標です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>指定されたポイントにある行の 0 から始まるインデックス値です。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>x</codeph> および <codeph>y</codeph> パラメーターで指定されたポイントにある行の 0 から始まるインデックス値を返します。
	 
	 </apiDesc><example conref="examples\TextField_getLineIndexAtPointExample.as"> 次の例では、ユーザーがシェイクスピアのソネットからある行を選択すると、その行が新しいテキストフィールドにコピー（追加）されます。   
 
 <p>コンストラクターで、<codeph>poem</codeph> テキストフィールドが折り返されないように設定されます（このテキストが詩であるため）。また、<codeph>autoSize</codeph> プロパティを使用して、テキストが収まるように自動的に設定され、左揃えテキストとしてサイズが変更されます。<codeph>poemCopy</codeph> テキストフィールドが <codeph>poem</codeph> テキストフィールドの下に配置されます。ユーザーが詩のいずれかの行をクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getLineIndexAtPoint()</codeph> メソッドがユーザーによってクリックされた行のインデックスを返します。このインデックスは、マウスクリックの <codeph>localX</codeph> と <codeph>localY</codeph> 座標に基づいています。ここでは、元の詩がテキストフィールドのサイズに適合しているので、範囲外エラー（<codeph>RangeError</codeph>）をチェックする必要はありません（このエラーは、<codeph>getCharIndexAtPoint()</codeph> メソッドによってスローされます）。次に、行のインデックスを使用して、<codeph>getLineText()</codeph> メソッドで、ストリングとして行のコンテンツを取得します。このストリングは、<codeph>poemCopy</codeph> テキストフィールドのコンテンツに追加されます。コピーは連続して実行できますが、あるポイントを過ぎると、テキストが表示できる <codeph>poemCopy</codeph> テキストフィールドの範囲を超えます。</p>    
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.text.TextFormat;
    import flash.text.TextFieldAutoSize;

    public class TextField_getLineIndexAtPointExample extends Sprite {
        private var poem:TextField = new TextField();
        private var poemCopy:TextField = new TextField();
        
        public function TextField_getLineIndexAtPointExample() {
            poem.border = true;
            poem.autoSize = TextFieldAutoSize.LEFT;
            poem.x = 10;
            poem.wordWrap = false;

            poemCopy.height = 250;
            poemCopy.width = 270;
            poemCopy.y = 230;
            poemCopy.x = 10;
            poemCopy.background = true;
            poemCopy.border = true;
            poemCopy.wordWrap = false;
            
            poem.appendText("Let me not to the marriage of true minds\n"
                              + "Admit impediments. love is not love\n"
                              + "Which alters when it alteration finds\n"
                              + "Or bends with the remover to remove:\n"
                              + "O no! it is an ever-fixed mark\n" 
                              + "That looks on tempests and is never shaken;\n"
                              + "It is the star to every wandering bark,\n"
                              + "Whose worth's unknown, although his height be taken.\n"
                              + "Love's not Time's fool, though rosy lips and cheeks\n"
                              + "Within his bending sickle's compass come:\n"
                              + "Love alters not with his brief hours and weeks,\n"
                              + "But bears it out even to the edge of doom.\n"
                              + "If this be error and upon me proved,\n"
                              + "I never writ, nor no man ever loved.");

           poem.addEventListener(MouseEvent.CLICK, clickHandler); 

           this.addChild(poem); 
           this.addChild(poemCopy);
        }
    
        private function clickHandler(e:MouseEvent):void {
                var index:int = poem.getLineIndexAtPoint(e.localX, e.localY);
                var s:String;

                s = poem.getLineText(index);
                poemCopy.appendText(s + "\n");
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc>
	 charIndex パラメーターで指定された文字を含む行の 0 から始まるインデックス値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された文字インデックスは範囲外です。
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>行の 0 から始まるインデックス値です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>文字の 0 から始まるインデックス値です。つまり、最初の文字は 0、2 番目の文字は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText><codeph>charIndex</codeph> パラメーターで指定された文字を含む行の 0 から始まるインデックス値です。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>charIndex</codeph> パラメーターで指定された文字を含む行の 0 から始まるインデックス値を返します。
	 
	 </apiDesc><example conref="examples\TextField_getLineIndexOfCharExample.as"> 次の例では、<codeph>getLineIndexOfChar()</codeph> メソッドがテキストフィールド内の 100 文字目と 500 文字目に対応する行番号を返します。
 
 <p><codeph>myTextField</codeph> テキストフィールドが、折り返しを行い、左揃えテキストとしてサイズが変更されるように定義されます。<codeph>getLineIndexOfChar()</codeph> メソッドが、指定された文字インデックス（100 と 500）に対する行のインデックスを返します。その後、この情報が段落の後に追加されます。行のインデックスは 0 から始まるので、行のインデックス（<codeph>index</codeph>）は 1 ずつ増加して、行番号を取得します。また、表示サイズが変更され、行番号が変更された場合でも、メソッドは一度しか呼び出されないので、ここでの情報は同じ状態が維持されます。</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class TextField_getLineIndexOfCharExample extends Sprite 
    {
        public function TextField_getLineIndexOfCharExample()
        {
            var myTextField:TextField = new TextField();
            
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 200;
            myTextField.background = true;  
            myTextField.border = true;
            myTextField.wordWrap = true;
            myTextField.autoSize = TextFieldAutoSize.LEFT;

            myTextField.appendText("The TextField class is used to create display objects for "
                + "text display and input. All dynamic and input text fields in a SWF file" 
                + "are instances of the TextField class. You can use the TextField class "
                + "to perform low-level text rendering. However, in Flex, you typically use "
                + "the Label, Text, TextArea, and TextInput controls to process text. "  
                + "You can give a text field an instance name in the Property inspector "
                + "and use the methods and properties of the TextField class to manipulate it with ActionScript. "
                + "TextField instance names are displayed in the Movie Explorer and in the Insert "
                + "Target Path dialog box in the Actions panel.\n\n");

            var index:int = myTextField.getLineIndexOfChar(100);
            myTextField.appendText("100th character is in line: " +  (index + 1) + "\n");
            index = myTextField.getLineIndexOfChar(500);
            myTextField.appendText("500th character is in line: " + (index + 1));

            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineLength"><apiName>getLineLength</apiName><shortdesc>
	 特定のテキスト行内の文字数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.getLineLength, getLineLength
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定した行番号は範囲外です。
	 
 	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>行内の文字数です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>長さが必要な行番号です。
	 </apiDesc></apiParam><apiTipTexts><apiTipText>特定のテキスト行内の文字数を返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 特定のテキスト行内の文字数を返します。
	 
	 </apiDesc><example conref="examples\TextField_getLineLengthExample.as"> 次の例では、ユーザーが行を選択すると、その行の長さ（文字数）が別のテキストフィールドに表示されます。 
 <p>例に示すように、カウントされたテキストを表示する <codeph>myTextField</codeph> テキストフィールドが <codeph>INPUT</codeph> に設定されます。この場合、ユーザーは、実際に行を変更したり、行の間または末尾に行を追加したりできます。最終行の末尾に、改行（<codeph>\n</codeph>）を使用して作成された空白行があります。行の長さをカウントした結果が表示される <codeph>countLines</codeph> テキストフィールドが <codeph>myTextField</codeph> テキストフィールドの下に設定されます。このテキストは選択できません。ユーザーが <codeph>myTextField</codeph> テキストフィールド内のある行をクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getLineIndexAtPoint()</codeph> メソッドがユーザーによってクリックされた行のインデックスを返します。このインデックスは、マウスクリックの <codeph>localX</codeph> と <codeph>localY</codeph> 座標を使用します。<codeph>if</codeph> ステートメントは、ユーザーが文字をクリックしたかどうかを確認します。ユーザーが文字をクリックした場合は、<codeph>getLineLength()</codeph> メソッドが、行のインデックスを使用して行の文字数を返します。行間の空白行には 2 番目の改行（<codeph>\n</codeph>）が含まれます。この行は、1 文字としてカウントされ、最終行の後の行は 0 文字としてカウントされます。スペースも 1 文字としてカウントされます。ユーザーは、新しい行を書き込むか行を変更し、その行をクリックして、行の文字数を取得できます。テキストの折り返しを使用し、画面のサイズを変更すると、行のインデックスが変更される場合があります。</p>
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class TextField_getLineLengthExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var countLines:TextField = new TextField();  

        public function TextField_getLineLengthExample() {
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 350;
            myTextField.height = 150;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.type = TextFieldType.INPUT;
            
            myTextField.appendText("Click on the lines to count its number of characters:\n\n");
            myTextField.appendText("This is a short line.\n");
            myTextField.appendText("This is a longer line than the last line.\n\n");
            myTextField.appendText("This one is even longer than the one before. It has two sentences.\n");

            this.addChild(myTextField);

            countLines.border = true;
            countLines.x = 10;
            countLines.y = 180;
            countLines.height = 30;
            countLines.width = 200;
            countLines.background = true;
            countLines.selectable = false;

           this.addChild(countLines);    

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
        }

        private function clickHandler(e:MouseEvent):void {
            var index:int = myTextField.getLineIndexAtPoint(e.localX, e.localY);
        
            if (index != -1) {
            var lenght:int = myTextField.getLineLength(index);

            countLines.text = "Number of characters in the line is: " + lenght.toString();
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
	 指定されたテキスト行に関するメトリック情報を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.getLineMetrics, getLineMetrics
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定した行番号は範囲外です。
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>TextLineMetrics オブジェクトです。
	 </apiDesc><apiOperationClassifier>flash.text:TextLineMetrics</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>メトリック情報が必要な行番号です。
	 </apiDesc></apiParam><apiTipTexts><apiTipText>指定されたテキスト行に関するメトリック情報を返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 指定されたテキスト行に関するメトリック情報を返します。
	 
	 </apiDesc><example conref="examples\TextField_getLineMetricsExample.as"> 次の例では、フォーマットの異なる 2 つのテキスト行のいくつかの行のメトリック値を表示します。
 
 <p>追加されたテキストは、ウォルト・ホイットマンの <i>Song of Myself</i> から抜粋した 2 行です。新しい TextFormat オブジェクト（<codeph>newFormat</codeph>）を使用して、2 行目のフォーマットが設定されます。1 行目はデフォルトのフォーマットを保持します。<codeph>getLineMetrics()</codeph> メソッドが、特定の行の <codeph>TextLineMetrics</codeph> オブジェクトを返します。行のインデックスは 0 で始まります。<codeph>metrics1</codeph> と <codeph>metrics2</codeph> を使用して、1 行目と 2 行目の TextLineMetrics オブジェクトである、行のアセント、ディセント、高さ、および太さの値が取得され、表示されます。取得された数値はストリングに変換されますが、四捨五入されません。この値は行に対する値であり、特定の文字に対する値ではありません。ある行の文字の範囲を反映しています。例えば、ある行に異なる高さのフォーマットを持つ異なる文字がある場合、値は最大の高さを持つ文字によって決まります。このことは、ある文字のフォーマットが変更された場合、メトリック値の一部が変更される場合があることも意味します。</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextLineMetrics;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.TextFormat;
 
    public class TextField_getLineMetricsExample extends Sprite {

        public function TextField_getLineMetricsExample() {
            var myTextField:TextField = new TextField();
            var newFormat:TextFormat = new TextFormat(); 

            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.wordWrap = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            myTextField.appendText("A child said What is the grass? fetching it to me with full hands;\n");
            myTextField.appendText("How could I answer the child? I do not know what it is any more than he.\n\n");

            newFormat.size = 14;
            newFormat.font = "Arial";
            newFormat.italic = true;
            myTextField.setTextFormat(newFormat, 67, 139);
               
            var metrics1:TextLineMetrics = myTextField.getLineMetrics(0);
             
            myTextField.appendText("Metrics ascent for the line 1 is: " + metrics1.ascent.toString() + "\n");
            myTextField.appendText("Metrics descent is: " + metrics1.descent.toString() + "\n");
            myTextField.appendText("Metrics height is: " + metrics1.height.toString() + "\n"); 
            myTextField.appendText("Metrics width is: " + metrics1.width.toString() + "\n\n");

            var metrics2:TextLineMetrics = myTextField.getLineMetrics(1);
             
            myTextField.appendText("Metrics ascent for the line 2 is: " + metrics2.ascent.toString() + "\n");
            myTextField.appendText("Metrics descent is: " + metrics2.descent.toString() + "\n");
            myTextField.appendText("Metrics height is: " + metrics2.height.toString() + "\n"); 
            myTextField.appendText("Metrics width is: " + metrics2.width.toString() + "\n");

            addChild(myTextField);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>flash.text.TextLineMetrics</linktext></link><link href="flash.text.xml#TextLineMetrics"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc>
	 lineIndex パラメーターで指定された行の最初の文字の文字インデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定した行番号は範囲外です。
 	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>行の最初の文字を示す、0 から始まるインデックス値です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>行の 0 から始まるインデックス値です。つまり、最初の行は 0、2 番目の行は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>行の最初の文字を示す、0 から始まるインデックス値です。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>lineIndex</codeph> パラメーターで指定された行の最初の文字の文字インデックスを返します。
	 
	 </apiDesc><example conref="examples\TextField_getLineOffsetExample.as"> 次の例では、4 行目の最初の文字をチェックします。この文字は、画面（およびテキストフィールド）のサイズが変更された場合に変更されます。
 
 <p><codeph>myTextField</codeph> テキストフィールドがテキストを折り返すように設定されます。<codeph>countField</codeph> テキストフィールドに 4 行目の最初の文字が表示されます。ユーザーが <codeph>myTextField</codeph> テキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getLineOffset()</codeph> メソッドが、テキストの 4 行目である行インデックス 3 の最初の文字のインデックスを返します。1 行目のインデックスは 0 です。<codeph>charAt()</codeph> メソッドを使用して、4 行目の最初の文字のインデックスを使用する文字を取得します。<codeph>countField</codeph> テキストフィールドのコンテンツが <codeph>text</codeph> プロパティ（<codeph>countField</codeph> テキストフィールド）を使用して、この情報によって更新されます。つまり、<codeph>countField.text</codeph> プロパティを使用すると、クリックするたびに <codeph>countField</codeph> テキストフィールドのコンテンツが上書きされます。ユーザーが表示サイズを変更すると、コンテンツが折り返され、4 行目の最初の文字が変わる可能性があります。<codeph>myTextField</codeph> フィールドをもう一度クリックすることで、<codeph>countField</codeph> テキストフィールドのコンテンツが 4 行目の新しい最初の文字によって更新されます。</p>    
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;

    public class TextField_getLineOffsetExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var countField:TextField = new TextField();
        
        public function TextField_getLineOffsetExample() {
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.width = 150;
            myTextField.height = 300;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.wordWrap = true;

            countField.height = 20;
            countField.width = 200;
            countField.x = 10;
            countField.y = 320;
            countField.selectable = false;
            
            myTextField.appendText("The TextField class is used to create display objects for "
                        + "text display and input. All dynamic and input text fields in a SWF file " 
                        + "are instances of the TextField class. You can use the TextField class "
                        + "to perform low-level text rendering. However, in Flex, you typically use "
                        + "the Label, Text, TextArea, and TextInput controls to process text. "  
                        + "You can give a text field an instance name in the Property inspector "
                        + "and use the methods and properties of the TextField class to manipulate it with ActionScript.");

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
        
            this.addChild(myTextField);
            this.addChild(countField);
        }
    
            private function clickHandler(e:MouseEvent):void {
                var c:String;
                var index:int;
                
                index = myTextField.getLineOffset(3);
                c = myTextField.text.charAt(index);
                countField.text = "The first character of line 4 is: " + c;
            }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getLineText"><apiName>getLineText</apiName><shortdesc>
	 lineIndex パラメーターで指定された行のテキストを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定した行番号は範囲外です。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定された行に含まれるテキストストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>行の 0 から始まるインデックス値です。つまり、最初の行は 0、2 番目の行は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>指定された行に含まれるテキストストリングです。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>lineIndex</codeph> パラメーターで指定された行のテキストを返します。
	 
	 </apiDesc><example conref="examples\TextField_getLineTextExample.as"> 次の例では、シェイクスピアのソネットで使用される単語 "love" のすべてのインスタンスの行番号が検索され、表示されます。
 
 <p><codeph>poem</codeph> テキストフィールドが、テキストに合わせて自動的に設定され、サイズが左揃えテキストに合わせて変更されます。<codeph>wordWrap</codeph> プロパティが <codeph>false</codeph> に設定されているので、詩の行は折り返されません。ただし、通常 <codeph>autoSize</codeph> プロパティを使用する場合、折り返しは問題にはなりません。<codeph>for</codeph> ループが、テキストフィールドの <codeph>numLines</codeph> プロパティを使用してソネットの行の繰り返し処理を実行します。<codeph>getLineText()</codeph> メソッドが行のコンテンツをストリングとして返します。<codeph>numLines</codeph> プロパティが行 1 で始まる行番号を返します。ただし、<codeph>getLineText()</codeph> メソッドでは、行番号は 0 で始まります。正規表現パターン（<codeph>/love/i</codeph>）を使用すると、<codeph>if</codeph> ステートメントがこの単語の大文字または小文字のサブストリングを検索します。パターンが見つかると、<codeph>search</codeph> メソッドが最初に一致したサブストリングのインデックスを返し、それ以外の場合は <codeph>-1</codeph> を返します（一致するものがない場合）。次に、"love" が見つかった行番号（<codeph>(i + 1)</codeph>）が <codeph>lineResult</codeph> ストリングに配置されます。ストリング（" "）である他の引数がある場合にのみ、ストリングメソッドによって、数値の引数（<codeph>(i + 1)</codeph>）がストリングに変換されます。検索によって得られた行には "loved" または "Love's" などの語句を持つ行が含まれています。ストリング "Love was found in lines:" が <codeph>for</codeph> ループの前に追加された場合、この行の単語 "Love" も含まれます。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
 
    public class TextField_getLineTextExample extends Sprite {
           
        public function TextField_getLineTextExample() {
           var poem:TextField = new TextField();
           var lineResult:String = ""; 
           var pattern:RegExp = /love/i;

            poem.x = 10;
            poem.y = 10;
            poem.background = true;
            poem.wordWrap = false;
            poem.autoSize = TextFieldAutoSize.LEFT;
            
            poem.text = "Let me not to the marriage of true minds\n"
                              + "Admit impediments. love is not love\n"
                              + "Which alters when it alteration finds\n"
                              + "Or bends with the remover to remove:\n"
                              + "O no! it is an ever-fixed mark\n" 
                              + "That looks on tempests and is never shaken;\n"
                              + "It is the star to every wandering bark,\n"
                              + "Whose worth's unknown, although his height be taken.\n"
                              + "Love's not Time's fool, though rosy lips and cheeks\n"
                              + "Within his bending sickle's compass come:\n"
                              + "Love alters not with his brief hours and weeks,\n"
                              + "But bears it out even to the edge of doom.\n"
                              + "If this be error and upon me proved,\n"
                              + "I never writ, nor no man ever loved.\n\n";

            for (var i:int = 0; i &lt; poem.numLines; i++) {

                var s:String = poem.getLineText(i);
                        
                if(s.search(pattern) != -1) {
                    lineResult += (i + 1) + " ";
                }
            }

            poem.appendText("Love was found in lines: " + lineResult);
             
            this.addChild(poem);                      
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc>
	 文字インデックスを指定すると、指定された文字を含む段落の長さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された文字インデックスは範囲外です。
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>段落内の文字数を返します。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>文字の 0 から始まるインデックス値です。つまり、最初の文字は 0、2 番目の文字は 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>文字の 0 から始まるインデックス値です。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 文字インデックスを指定すると、指定された文字を含む段落の長さを返します。この長さは、渡された文字インデックスからではなく、段落内の最初の文字からの相対的な長さです。つまり、<codeph>getFirstCharInParagraph()</codeph> によって返される長さと同じになります。
	 
	 </apiDesc><example conref="examples\TextField_getParagraphLengthExample.as"> 次の例では、ユーザーが段落を選択すると、段落の長さと段落内の文字 "s" の数が別のテキストフィールドに表示されます。
 
 <p><codeph>myTextField</codeph> テキストフィールドに、ユーザーが選択する段落が表示されます。ユーザーがテキストフィールドをクリックすると、<codeph>MouseEvent.CLICK</codeph> イベントが送出され、<codeph>clickHandler()</codeph> メソッドが呼び出されます。段落の長さと文字 "s" の数が <codeph>countField</codeph> テキストフィールドに表示され、<codeph>myTextField</codeph> テキストフィールドの下に配置されます。</p> 
 
 <p><codeph>clickHandler()</codeph> メソッドで、<codeph>getCharIndexAtPoint()</codeph> メソッドが文字のインデックスを返します。このインデックスは、マウスクリックの <codeph>localX</codeph> と <codeph>localY</codeph> 座標に基づいています。最初の <codeph>if</codeph> ステートメントは、ユーザーが文字をクリックしたかどうかを確認します。<codeph>getFirstCharInParagraph()</codeph> メソッドが、このインデックスを使用して、同じ段落内の最初の文字のインデックスを返します。<codeph>getParagraphLength()</codeph> メソッドによって返された段落の長さが段落内の最初の文字のインデックスで使用され、段落の末尾のインデックスが算出されます。<codeph>for</codeph> ループが段落の繰り返し処理を実行して、文字 "s" の数を探します。</p>  
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.MouseEvent;

    public class TextField_getParagraphLengthExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var countField:TextField = new TextField();

        public function TextField_getParagraphLengthExample() {
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.border = true;
            myTextField.wordWrap = true;
            myTextField.width = 300;
            myTextField.height = 280;
            
            myTextField.appendText("The TextField class is used to create display objects for "
                        + "text display and input. All dynamic and input text fields in a SWF file" 
                        + "are instances of the TextField class. You can use the TextField class "
                        + "to perform low-level text rendering. However, in Flex, you typically use "
                        + "the Label, Text, TextArea, and TextInput controls to process text. "  
                        + "You can give a text field an instance name in the Property inspector "
                        + "and use the methods and properties of the TextField class to manipulate it with ActionScript. "
                        + "TextField instance names are displayed in the Movie Explorer and in the Insert "
                        + "Target Path dialog box in the Actions panel.\n\n"  
                        + "To create a text field dynamically, use the TextField() constructor.\n\n"
                        + "The methods of the TextField class let you set, select, and manipulate "  
                        + "text in a dynamic or input text field that you create during authoring or at runtime.");

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            
            countField.x = 10;
            countField.y = 300;
            countField.height = 50;
            countField.width = 250;
            countField.background = true;
            countField.selectable = false;

            this.addChild(myTextField);
            this.addChild(countField);
        }

        private function clickHandler(e:MouseEvent):void {
            var index:int = myTextField.getCharIndexAtPoint(e.localX, e.localY);
            
            if(index != -1) {
                var beginParag:int = myTextField.getFirstCharInParagraph(index);
                var paragLength:int = myTextField.getParagraphLength(index);
                var endParag:int = beginParag + paragLength;
                var sCount:uint = 0;

                for (var i:int = beginParag; i &lt;= endParag; i++) {
                    if ((myTextField.text.charAt(i) == "s") || (myTextField.text.charAt(i) == "S")) {
                        sCount++; 
                    }

                countField.text = "Paragraph length is: " + paragLength.toString() + "\n" 
                        + "Number of 's' characters in the paragraph: " + sCount.toString();
                }
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextField/getFirstCharInParagraph()"><linktext>flash.text.TextField.getFirstCharInParagraph()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc>
	 beginIndex パラメーターと endIndex パラメーターで指定された範囲のテキストのフォーマット情報を含む TextFormat オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.getTextFormat, getTextFormat
	 
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された <codeph>beginIndex</codeph> または <codeph>endIndex</codeph> は範囲外です。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたテキストのフォーマットプロパティを表す TextFormat オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.text:TextFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>オプション。テキストフィールド内のテキスト範囲の開始位置を指定する整数です。
	 
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>オプション：該当するテキスト範囲の直後の文字の位置を指定する整数。意図したとおり、<codeph>beginIndex</codeph> と <codeph>endIndex</codeph> の値を指定すると、<codeph>beginIndex</codeph> から <codeph>endIndex-1</codeph> までのテキストが読み込まれます。 
	 
 	 </apiDesc></apiParam><apiTipTexts><apiTipText>TextFormat オブジェクトを返します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>beginIndex</codeph> および <codeph>endIndex</codeph> パラメーターで指定された範囲のテキストのフォーマット情報を含む TextFormat オブジェクトを返します。指定されたテキスト全体に共通するプロパティのみが、結果の TextFormat オブジェクトに設定されます。混在型<i/>のプロパティ（テキストの位置によって異なる値が指定されている場合）は、その値が <codeph>null</codeph> に設定されます。
	 
	 <p>これらのパラメーターに値を指定しない場合、このメソッドはテキストフィールド内のすべてのテキストに適用されます。  </p>
	 
	 <p>次の表に、使用できる 3 つのシンタックスを示します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	 	 
	   
	 <tgroup cols="2"><thead><row><entry>使用方法</entry><entry>説明</entry></row></thead><tbody><row>
	     <entry><codeph>my_textField.getTextFormat()</codeph></entry>
	 	   <entry>テキストフィールド内すべてのテキストに関するフォーマット情報を含む TextFormat オブジェクトを返します。テキストフィールド内のすべてのテキストに共通するプロパティのみが結果の TextFormat オブジェクトに設定されます。混在型<i/>のプロパティ（テキストの位置によって異なる値が指定されている場合）は、その値が <codeph>null</codeph> に設定されます。</entry>
	   </row><row>
	     <entry><codeph>my_textField.getTextFormat(beginIndex:Number)</codeph></entry>
	     <entry><codeph>beginIndex</codeph> の位置の文字のテキストフォーマットのコピーを含む TextFormat オブジェクトを返します。</entry>
	   </row><row>
	     <entry><codeph>my_textField.getTextFormat(beginIndex:Number,endIndex:Number)</codeph></entry>
	     <entry><codeph>beginIndex</codeph> から <codeph>endIndex-1</codeph> までの範囲のテキストに関するフォーマット情報を含む TextFormat オブジェクトを返します。指定された範囲内のすべてのテキストに共通するプロパティのみが結果の TextFormat オブジェクトに設定されます。混在型のプロパティ（範囲内の位置によって異なる値が指定されている場合）は、その値が <codeph>null</codeph> に設定されます。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example><xref href="TextField.html#getFirstCharInParagraph()">getFirstCharInParagraph()</xref> または <xref href="TextField.html#setTextFormat()">setTextFormat()</xref> メソッドの例を参照して、<codeph>getTextFormat()</codeph> メソッドの使用方法を確認してください。 
	 </example></apiOperationDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link><link href="flash.text.xml#TextField/defaultTextFormat"><linktext>flash.text.TextField.defaultTextFormat</linktext></link><link href="flash.text.xml#TextField/setTextFormat()"><linktext>flash.text.TextField.setTextFormat()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Font.fontType が flash.text.FontType.EMBEDDED の場合に、指定された fontName および fontStyle で利用できる埋め込みフォントがある場合には、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>指定された <codeph>fontStyle</codeph> は、<codeph>flash.text.FontStyle</codeph> のメンバーではありません。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>互換性のある埋め込みフォントが利用できる場合には <codeph>true</codeph>、それ以外の場合には <codeph>false</codeph> となります。
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>チェックする埋め込みフォントの名前です。
	 </apiDesc></apiParam><apiParam><apiItemName>fontStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>チェックするフォントスタイルを指定します。<codeph>flash.text.FontStyle</codeph> を使用します。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された <codeph>fontName</codeph> および <codeph>fontStyle</codeph> で利用できる埋め込みフォントがあり、<codeph>Font.fontType</codeph> が <codeph>flash.text.FontType.EMBEDDED</codeph> の場合には、ture を返します。Flash Player 10 以降では、2 種類の埋め込みフォントを SWF ファイルに表示できます。通常の埋め込みフォントは、TextField オブジェクトでのみ使用されます。CFF の埋め込みフォントは、flash.text.engine クラスでのみ使用されます。この 2 種類の埋め込みフォントは、<codeph>fontType</codeph> プロパティ（<codeph>Font</codeph> クラスのプロパティ）（<codeph>enumerateFonts()</codeph> 関数で返される）で区別されます。
	 
	 <p>TextField は <codeph>EMBEDDED_CFF</codeph> タイプのフォントを使用できません。<codeph>embedFonts</codeph> が <codeph>true</codeph> に設定され、指定された名前およびスタイルで実行時に利用可能なフォントのタイプが <codeph>EMBEDDED_CFF</codeph> のみである場合は、指定された名前およびスタイルで使用できる埋め込みフォントがない場合と同様に、Flash Player ではテキストを表示できません。</p>
	 
	 <p>同じ名前およびスタイルで <codeph>EMBEDDED</codeph> および <codeph>EMBEDDED_CFF</codeph> の両方のフォントが利用できる場合は、<codeph>EMBEDDED</codeph> フォントが選択され、テキストは <codeph>EMBEDDED</codeph> フォントで表示されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc>
	 現在の選択内容を value パラメーターの内容に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.replaceSelectedText, replaceSelectedText
 	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>このメソッドは、スタイルシートを使用するテキストフィールドに対しては使用できません。
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>現在選択されているテキストを置き換えるストリングです。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>現在の選択内容を value パラメーターの内容に置き換えます。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 現在の選択内容を <codeph>value</codeph> パラメーターの内容に置き換えます。テキストは、現在のデフォルトの文字フォーマットとデフォルトの段落フォーマットを使用して、現在の選択内容の位置に挿入されます。テキストは HTML として扱われません。
	 
	 <p><codeph>replaceSelectedText()</codeph> メソッドを使用すると、他の部分のテキストの文字フォーマットおよび段落フォーマットを損なわずにテキストを挿入および削除できます。</p>
     <p><b>注意：</b>このメソッドは、テキストフィールドにスタイルシートが適用されていると機能しません。</p>
     
	 
	 </apiDesc><example conref="examples\TextField_replaceSelectedTextExample.as"> 次の例では、ユーザーが最初のテキストフィールドから一部のテキストを選択し、消去して、選択したテキストを 2 番目のテキストフィールドで "NEW TEXT" ストリングに置き換えます。
 
 <p>2 つの異なる TextField オブジェクトが作成され、<codeph>MouseEvent.MOUSE_UP</codeph> イベントにイベントリスナーが追加されます。ユーザーがマウスを離すとマウスアップイベントが発生します。通常、このイベントはテキストを選択した後に発生します。選択するテキストの設定は、テキストフィールドのデフォルト設定です。</p>
 
 <p><codeph>mouseHandler1()</codeph> メソッドで、ユーザーが <codeph>myTextField1</codeph> テキストフィールド内でマウスを離すと、テキストが消去され、空のストリングに置き換えられます。この操作は、すべてのテキストが消去されるまで続行できます。<codeph>mouseHandler2()</codeph> メソッドで、ユーザーが <codeph>myTextField2</codeph> テキストフィールド内のテキストの一部を選択すると、<codeph>selectionBeginIndex</codeph> および <codeph>selectionEndIndex</codeph> プロパティによって、文字が選択されているかどうかがチェックされます。テキストの一部が選択されている場合、<codeph>selectionBeginIndex</codeph> および <codeph>selectionEndIndex</codeph> プロパティには、同じ値が設定されません。選択したテキストが "NEW TEXT" ストリングに置き換えられます。この操作は、2 番目のテキストフィールドのすべての元のテキストが "NEW TEXT" ストリングに置き換えられるまで続行できます。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;    
    import flash.events.MouseEvent;

    public class TextField_replaceSelectedTextExample extends Sprite {
        private var myTextField1:TextField = new TextField();
        private var myTextField2:TextField = new TextField();
        
        public function TextField_replaceSelectedTextExample() {
            myTextField1.x = 10;
            myTextField1.width = 300;
            myTextField1.height = 50; 
            myTextField1.background = true; 
            myTextField1.border = true;
            myTextField1.text = "Select the text you want to remove from the line.";
            
            myTextField2.x = 10;
            myTextField2.y = 60;
            myTextField2.width = 300;
            myTextField2.height = 50;
            myTextField2.background = true;
            myTextField2.border = true;
            myTextField2.text = "Select the text you want to replace with NEW TEXT.";
            
            myTextField1.addEventListener(MouseEvent.MOUSE_UP, mouseHandler1);
            myTextField2.addEventListener(MouseEvent.MOUSE_UP, mouseHandler2);
            
            this.addChild(myTextField1);
            this.addChild(myTextField2);
        }
        
        private function mouseHandler1(e:MouseEvent):void {
            myTextField1.replaceSelectedText("");
        }

        private function mouseHandler2(e:MouseEvent):void {
            if(myTextField2.selectionBeginIndex != myTextField2.selectionEndIndex) {
                myTextField2.replaceSelectedText("NEW TEXT");    
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:replaceText"><apiName>replaceText</apiName><shortdesc>
	 beginIndex パラメーターと endIndex パラメーターで指定された文字範囲を、newText パラメーターの内容に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
 	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>このメソッドは、スタイルシートを使用するテキストフィールドに対しては使用できません。
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>置換範囲の開始位置の 0 から始まるインデックス値です。
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>該当するテキスト範囲の直後の文字の 0 から始まるインデックス位置です。
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定された文字範囲の置き換えに使用されるテキストです。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>文字の範囲を置き換えます。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>beginIndex</codeph> パラメーターと <codeph>endIndex</codeph> パラメーターで指定された文字範囲を、<codeph>newText</codeph> パラメーターの内容に置き換えます。意図したとおり、<codeph>beginIndex</codeph> から <codeph>endIndex-1</codeph> までのテキストが置き換えられます。  
     <p><b>注意：</b>このメソッドは、テキストフィールドにスタイルシートが適用されていると機能しません。</p>
     
	 </apiDesc><example conref="examples\TextField_replaceTextExample.as"> 次の例では、<codeph>replaceText()</codeph> メソッドを使用して、テキストの一部を削除し、置換えて、テキストフィールドに挿入します。
 
 <p><codeph>outputText</codeph> テキストフィールドが、テキストに合わせて自動的に設定され、サイズが左揃えテキストに合わせて変更されます。最初の <codeph>replaceText()</codeph> メソッドの呼び出しで、1 行目（"This is the wrong heading"）が "THIS IS THE HEADING FOR EVERYONE" に置き換えられます。2 度目のメソッドの呼び出しで、テキスト "CORRECT" が "THE" と "HEADING" の間に挿入されます。3 度目のメソッドの呼び出しで、語句 "FOR EVERYONE" が削除されます。<codeph>appendText()</codeph> の呼び出しごとに、現在のテキストの開始インデックスと終了インデックスが変更されます。ここでは、最後のテキスト（変更が行われた後）だけが表示されます。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    
    public class TextField_replaceTextExample extends Sprite {

        public function TextField_replaceTextExample() {
            var outputText:TextField = new TextField();

            outputText.x = 10;
            outputText.y = 10;
            outputText.background = true;
            outputText.autoSize = TextFieldAutoSize.LEFT;
            
            outputText.appendText("This is the wrong heading");
            outputText.appendText("\n\n"); 
            outputText.appendText("This is the body of the text.");

            outputText.replaceText(0, 25, "THIS IS THE HEADING FOR EVERYONE");

            outputText.replaceText(12, 12, "CORRECT ");
            
            outputText.replaceText(27, 40, "");
            
           this.addChild(outputText);
         }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:TextField:setSelection"><apiName>setSelection</apiName><shortdesc>
	 最初の文字と最後の文字のインデックス値によって指定されたテキストを選択済みに設定します。最初の文字と最後の文字のインデックス値は、beginIndex パラメーターおよび endIndex パラメーターを使用して指定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Need to add an example.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>選択範囲の先頭の文字の 0 から始まるインデックス値です。つまり、最初の文字が 0、2 番目の文字が 1 で、以下同様に続きます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>選択範囲の最後の文字を示す、0 から始まるインデックス値です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>新しいテキストの選択範囲を設定します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 最初の文字と最後の文字のインデックス値によって指定されたテキストを選択済みに設定します。最初の文字と最後の文字のインデックス値は、<codeph>beginIndex</codeph> および <codeph>endIndex</codeph> パラメーターを使用して指定されます。2 つのパラメーター値が同じ場合、このメソッドは、<codeph>caretIndex</codeph> プロパティを設定した場合と同様に挿入ポイントを設定します。
	 
	 </apiDesc><example conref="examples\TextField_setSelectionExample.as"> 次の例では、ユーザーがテキストフィールドの任意の場所をクリックすると、あらかじめ定義されたテキストの範囲が選択されます（語句 "TEXT IN ALL CAPS" がハイライト表示されます）。
 
 <p><codeph>myTextField</codeph> テキストフィールドの 2 つのイベントリスナーが、ユーザーのマウスクリックまたはマウスアップイベントに応答します。ユーザーがマウスを離すとマウスアップイベントが発生します。通常、このイベントはテキストを選択した後に発生します。選択するテキストの設定は、テキストフィールドのデフォルト設定です。テキストの一部をクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。テキストの一部を選択して、マウスを離すと、<codeph>mouseUpHandler()</codeph> メソッドが呼び出されます。</p>
 
 <p><codeph>clickHandler()</codeph> メソッドと <codeph>mouseUpHandler()</codeph> メソッドの両方で、<codeph>setSelection()</codeph> メソッドがインデックス 54 と 70 の間の文字（TEXT IN ALL CAPS）だけを選択するように設定します。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    
    public class TextField_setSelectionExample extends Sprite
    {
        private var myTextField:TextField = new TextField();

        public function TextField_setSelectionExample() {
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.text = "No matter where you click on this text field only the TEXT IN ALL CAPS is selected.";

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
            myTextField.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            this.addChild(myTextField);
        }

        private function clickHandler(event:MouseEvent):void {
            myTextField.setSelection(54, 70);
        }

        private function mouseUpHandler(event:MouseEvent):void {
            myTextField.setSelection(54, 70);
        }

    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc>
	 format パラメーターで指定したテキストフォーマットを、テキストフィールド内の指定されたテキストに適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.setTextFormat, setTextFormat
 	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>このメソッドは、スタイルシートを使用するテキストフィールドに対しては使用できません。
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>指定された <codeph>beginIndex</codeph> または <codeph>endIndex</codeph> は範囲外です。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flash.text:TextFormat</apiOperationClassifier><apiDesc>文字と段落のフォーマット情報を含む TextFormat オブジェクトです。
	 
     </apiDesc></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>オプション：該当するテキスト範囲の直後の文字を指定して、ゼロから始まるインデックス位置を指定する整数。
	 
     </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>オプション：該当するテキスト範囲の直後の文字を指定する整数。意図したとおり、<codeph>beginIndex</codeph> と <codeph>endIndex</codeph> の値を指定すると、<codeph>beginIndex</codeph> から <codeph>endIndex-1</codeph> までのテキストが更新されます。  
	 
	 <p>
	 <adobetable class="innertable">
	   
	   
	  
	   
	   
	 
	 <tgroup cols="2"><thead><row><entry>使用方法</entry><entry>説明</entry></row></thead><tbody><row>
	     <entry><codeph>my_textField.setTextFormat(textFormat:TextFormat)</codeph></entry>
	 
	     <entry><codeph>textFormat</codeph> のプロパティをテキストフィールドのすべてのテキストに適用します。</entry>
	   </row><row>
	 
	 <entry><codeph>my_textField.setTextFormat(textFormat:TextFormat, beginIndex:int)</codeph></entry>
	 
	     <entry><codeph>textFormat</codeph> のプロパティを <codeph>beginIndex</codeph> 位置で始まるテキストに適用します。</entry>
	   </row><row>
	     <entry><codeph>my_textField.setTextFormat(textFormat:TextFormat, beginIndex:int, endIndex:int)</codeph></entry>
	 	   <entry><codeph>textFormat</codeph> パラメーターのプロパティを <codeph>beginIndex</codeph> 位置から <codeph>endIndex-1</codeph> 位置までのテキスト範囲に適用します。</entry>
	   </row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p>ユーザーによって手作業で挿入されたテキスト、または <codeph>replaceSelectedText()</codeph> メソッドを使用して置き換えられたテキストは、テキストの挿入か所に指定されているフォーマットではなく、新しいテキスト用のテキストフィールドのデフォルトフォーマットが適用されます。新しいテキスト用のテキストフィールドのデフォルトフォーマットを設定するには、<codeph>defaultTextFormat</codeph> プロパティを使用します。</p>
	 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>テキストフォーマットを適用します。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>format</codeph> パラメーターで指定したテキストフォーマットを、テキストフィールド内の指定されたテキストに適用します。<codeph>format</codeph> の値は、必要なテキストフォーマットの変更を指定する TextFormat オブジェクトである必要があります。<codeph>format</codeph> の null 以外のプロパティのみが、テキストフィールドに適用されます。<codeph>format</codeph> で <codeph>null</codeph> に設定されているプロパティは適用されません。デフォルトで、新しく作成された TextFormat オブジェクトのプロパティはすべて <codeph>null</codeph> に設定されます。
     <p><b>注意：</b>このメソッドは、テキストフィールドにスタイルシートが適用されていると機能しません。</p>
     
	 <p><codeph>setTextFormat()</codeph> メソッドは、テキストフィールドの文字の範囲またはテキスト全体に適用するテキストフォーマットを変更します。フォーマットのプロパティをテキストフィールド内のすべてのテキストに適用するには、<codeph>beginIndex</codeph> および <codeph>endIndex</codeph> に値を指定しないでください。フォーマットのプロパティをテキストの範囲に適用するには、<codeph>beginIndex</codeph> および <codeph>endIndex</codeph> パラメーターに値を指定します。<codeph>length</codeph> プロパティを使用して、インデックス値を指定できます。</p>
	 
	 <p>TextFormat オブジェクトのフォーマット情報には、文字レベルフォーマットと段落レベルフォーマットの 2 種類があります。テキストフィールド内の各文字にも、フォント名やフォントサイズ、ボールド、イタリックなどの文字固有のフォーマットを設定できます。</p>
	 
	 <p>段落の場合は、段落の最初の文字を調べて段落全体のフォーマット設定を判別します。段落のフォーマット設定には、左マージン、右マージン、インデントなどがあります。</p>
	 
	 <p>ユーザーによって手作業で挿入されたテキスト、または <codeph>replaceSelectedText()</codeph> メソッドを使用して置き換えられたテキストは、テキストの挿入か所に指定されているフォーマットではなく、新しいテキスト用のテキストフィールドのデフォルトフォーマットが適用されます。新しいテキスト用のデフォルトフォーマットを設定するには、<codeph>defaultTextFormat</codeph> を使用します。</p>
	 
	 </apiDesc><example conref="examples\TextField_setTextFormatExample.as"> 次の例では、テキストをクリックすると、定義済みのテキスト範囲 "TEXT IN ALL CAPS" のフォーマットがデフォルトのテキストフォーマットと新しいフォーマットの間で切り替わります。
 
 <p><codeph>myTextField</codeph> テキストフィールドのイベントリスナーが追加され、<codeph>clickHandler()</codeph> メソッドを呼び出して、マウスクリックに応答します。<codeph>clickHandler()</codeph> メソッドで、<codeph>getTextFormat()</codeph> メソッドが所定の文字範囲から文字（インデックス 55）の現在のフォーマットを返し、<codeph>currentTextFormat</codeph> TextFormat オブジェクトに設定します。<codeph>if</codeph> ステートメントが <codeph>currentTextFormat</codeph> テキストフォーマットをチェックして、範囲内の文字に新しいフォーマット（フォントポイントが 18 に設定されます）が適用されているかどうかを確認します。適用されていない場合、新しいフォーマットによって、サイズが 18 ポイント、色が赤に変更されます。また、54 ～ 70 のテキスト範囲（TEXT IN ALL CAPS）に下線が引かれ、イタリックの書体が適用されます。範囲内の文字に新しいフォーマットが適用されている場合、範囲のフォーマットの設定がテキストフィールドのデフォルト（元の）フォーマットに戻ります。</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFormat;  
    import flash.text.TextFieldAutoSize;  
    import flash.events.MouseEvent;

    public class TextField_setTextFormatExample extends Sprite {
        private var myTextField:TextField = new TextField();
        private var newFormat:TextFormat = new TextFormat();
        
        public function TextField_setTextFormatExample() {
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.selectable = false;
            myTextField.background = true;
            myTextField.text = "No matter where you click on this text field only the TEXT IN ALL CAPS changes format.";

            myTextField.addEventListener(MouseEvent.CLICK, clickHandler);

            newFormat.color = 0xFF0000;
            newFormat.size = 18;
            newFormat.underline = true;
            newFormat.italic = true;
                
            this.addChild(myTextField);
        }

        private function clickHandler(event:MouseEvent):void {
            var currentTextFormat:TextFormat = myTextField.getTextFormat(55);
            
            if(currentTextFormat.size != 18) {
                myTextField.setTextFormat(newFormat, 54, 70);
            }
            else {
                myTextField.setTextFormat(myTextField.defaultTextFormat);
            }    
        }    
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link><link href="flash.text.xml#TextField/defaultTextFormat"><linktext>flash.text.TextField.defaultTextFormat</linktext></link></related-links></apiOperation><apiValue id="flash.text:TextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc>
	true に設定され、テキストフィールドにフォーカスがない場合、テキストフィールド内の選択内容は灰色でハイライト表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField object, built-in class
	</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
    
	</apiDefaultValue></apiValueDef><apiDesc>
	<codeph>true</codeph> に設定され、テキストフィールドにフォーカスがない場合、テキストフィールド内の選択内容は灰色でハイライト表示されます。<codeph>false</codeph> に設定され、テキストフィールドにフォーカスがない場合、テキストフィールド内の選択内容はハイライト表示されません。
	
    </apiDesc><example conref="examples\TextField_alwaysShowSelection.as"> 次のファイルをコンパイルして実行します。ファイルの実行時に、2 つのテキストフィールドでそれぞれのテキストをドラッグ操作で選択すると、2 つのテキストフィールドでの選択ハイライトの違いがわかります（フォーカスの変更）。
<codeblock>

    package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_alwaysShowSelection extends Sprite {
        public function TextField_alwaysShowSelection() {
            var label1:TextField = createCustomTextField(0, 20, 200, 20);
            label1.text = "This text is selected.";
            label1.setSelection(0, 9);
            label1.alwaysShowSelection = true;

            var label2:TextField = createCustomTextField(0, 50, 200, 20);
            label2.text = "Drag to select some of this text.";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x; result.y = y;
            result.width = width; result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc>
	 このテキストフィールドに使用されるアンチエイリアス処理のタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>This example creates two text fields and applies advanced anti-aliasing to the first one
	 only.  It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 10, 10, 300, 30);
	 my_text1.text = "This text uses advanced anti-aliasing.";
	 my_text1.antiAliasType = "advanced";
	 my_text1.border = true;
	 my_text1.embedFonts = true;
	 my_text1.setTextFormat(my_format);
	 
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 10, 50, 300, 30);
	 my_text2.text = "This text uses normal anti-aliasing."
	 my_text2.antiAliasType = "normal";
	 my_text2.border = true;
	 my_text2.embedFonts = true;
	 my_text2.setTextFormat(my_format);
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>使用されるアンチエイリアスのタイプです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 このテキストフィールドに使用されるアンチエイリアス処理のタイプです。このプロパティには、<codeph>flash.text.AntiAliasType</codeph> 定数を使用します。この設定は、フォントが埋め込まれている（<codeph>embedFonts</codeph> プロパティが <codeph>true</codeph> に設定されている）場合にのみ制御できます。デフォルト設定は、<codeph>flash.text.AntiAliasType.NORMAL</codeph> です。
	 
	 <p>このプロパティの値を設定するには、次のストリング値を使用します。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	 	<entry><codeph>flash.text.AntiAliasType.NORMAL</codeph></entry>
	 	<entry>通常のテキストにアンチエイリアスを適用します。この値は、Flash Player 7 以前のバージョンで使用されているアンチエイリアスのタイプと一致します。</entry>
	   </row><row>
	   	<entry><codeph>flash.text.AntiAliasType.ADVANCED</codeph></entry>
	 	<entry>文字を読みやすくする高度なアンチエイリアスを適用します。これは Flash Player 8 で使用可能になった機能です。 高度なアンチエイリアスでは、小さいサイズのフォントフェイスを高品質でレンダリングすることができます。これは、小さいフォントのテキストが多いアプリケーションでの使用に最も適しています。48 ポイントより大きいフォントに対して高度なアンチエイリアスを使用することはお勧めしません。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link><link href="flash.text.xml#TextField/embedFonts"><linktext>flash.text.TextField.embedFonts</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:autoSize:get"><apiName>autoSize</apiName><shortdesc>
	 テキストフィールドの自動的な拡大 / 縮小および整列を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.autoSize, autoSize
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>指定された <codeph>autoSize</codeph> は、flash.text.TextFieldAutoSize のメンバーではありません。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>テキストフィールドの自動的な拡大 / 縮小および整列を制御します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドの自動的な拡大 / 縮小および整列を制御します。<codeph>TextFieldAutoSize</codeph> 定数の有効な値は次のとおりです。<codeph>TextFieldAutoSize.NONE</codeph>（デフォルト）、<codeph>TextFieldAutoSize.LEFT</codeph>、<codeph>TextFieldAutoSize.RIGHT</codeph>、および <codeph>TextFieldAutoSize.CENTER</codeph>。
	 
	 <p><codeph>autoSize</codeph> が <codeph>TextFieldAutoSize.NONE</codeph>（デフォルト値）に設定されていると、サイズ変更は行われません。</p>
	 
	 <p><codeph>autoSize</codeph> を <codeph>TextFieldAutoSize.LEFT</codeph> に設定すると、テキストは左揃えテキストとして扱われます。つまり、テキストフィールドの左マージンが固定され、テキストフィールドの単一行の右マージンのみが伸縮します。テキストに改行（<codeph>"\n"</codeph> または <codeph>"\r"</codeph> など）が含まれる場合、テキストの次の行が収まるようにフィールドの下側も拡張されます。<codeph>wordWrap</codeph> も <codeph>true</codeph> に設定した場合、テキストフィールドの下側だけが伸縮し、右側は固定されたままになります。</p>
	 
	 <p><codeph>autoSize</codeph> を <codeph>TextFieldAutoSize.RIGHT</codeph> に設定すると、テキストは右揃えテキストとして扱われます。つまり、テキストフィールドの右マージンが固定され、テキストフィールドの単一行の左マージンのみが伸縮します。テキストに改行（<codeph>"\n" または "\r"</codeph> など）が含まれる場合、テキストの次の行が収まるようにフィールドの下側も拡張されます。<codeph>wordWrap</codeph> も <codeph>true</codeph> に設定した場合、テキストフィールドの下側だけが伸縮し、左側は固定されたままになります。</p>
	 
	 <p><codeph>autoSize</codeph> を <codeph>TextFieldAutoSize.CENTER</codeph> に設定すると、テキストは中央揃えテキストとして扱われます。つまり、テキストフィールドの単一行のサイズ変更を行うと、左右両マージンが均等に伸縮されます。テキストに改行（<codeph>"\n"</codeph> または <codeph>"\r"</codeph> など）が含まれる場合、テキストの次の行が収まるようにフィールドの下側も拡張されます。<codeph>wordWrap</codeph> も <codeph>true</codeph> に設定した場合、テキストフィールドの下側だけが伸縮し、左右両側は固定されたままになります。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFieldAutoSize"><linktext>flash.text.TextFieldAutoSize</linktext></link><link href="flash.text.xml#TextField/autoSize"><linktext>flash.text.TextField.autoSize</linktext></link><link href="flash.text.xml#TextField/wordWrap"><linktext>flash.text.TextField.wordWrap</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:background:get"><apiName>background</apiName><shortdesc>
	 テキストフィールドに背景の塗りつぶしがあるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.background, background
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue></apiValueDef><apiDesc>
	 テキストフィールドに背景の塗りつぶしがあるかどうかを指定します。<codeph>true</codeph> である場合、テキストフィールドに背景の塗りがあります。<codeph>false</codeph> である場合、テキストフィールドには背景の塗りがありません。<codeph>backgroundColor</codeph> プロパティを使用して、テキストフィールドの背景色を設定します。
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/backgroundColor"><linktext>flash.text.TextField.backgroundColor</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
	 テキストフィールドの背景の色です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.backgroundColor, backgroundColor, background Color
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 テキストフィールドの背景の色です。デフォルト値は <codeph>0xFFFFFF</codeph>（白）です。このプロパティは、現在背景がない場合でも取得または設定できます。ただし、背景の色が表示されるのはテキストフィールドの <codeph>background</codeph> プロパティが <codeph>true</codeph> に設定されている場合のみです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/background"><linktext>flash.text.TextField.background</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:border:get"><apiName>border</apiName><shortdesc>
	 テキストフィールドに境界線があるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.border, border
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue></apiValueDef><apiDesc>
	 テキストフィールドに境界線があるかどうかを指定します。<codeph>true</codeph> である場合、テキストフィールドに境界線があります。<codeph>false</codeph> である場合、テキストフィールドに境界線がありません。<codeph>borderColor</codeph> プロパティを使用して、境界線の色を設定します。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/borderColor"><linktext>flash.text.TextField.borderColor</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:borderColor:get"><apiName>borderColor</apiName><shortdesc>
	 テキストフィールドの境界線の色です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.borderColor, borderColor
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 テキストフィールドの境界線の色です。デフォルト値は <codeph>0x000000</codeph>（黒）です。このプロパティは、現在境界線がない場合でも取得または設定できます。ただし、境界線の色が表示されるのはテキストフィールドの <codeph>border</codeph> プロパティが <codeph>true</codeph> に設定されている場合のみです。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/border"><linktext>flash.text.TextField.border</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc>
	 指定されたテキストフィールドに現在表示されている一番下の行を示す整数です（1 から始まるインデックス）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.bottomScrollV, bottomScrollV
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールドの一番下の行を示す整数です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 指定されたテキストフィールドに現在表示されている一番下の行を示す整数です（1 から始まるインデックス）。テキストフィールドは、テキストのブロックにかぶせたウィンドウのようなものです。<codeph>scrollV</codeph> プロパティは、そのウィンドウに表示されている先頭行を示すインデックスです（1 から始まるインデックス）。
	 
	 <p><codeph>scrollV</codeph> と <codeph>bottomScrollV</codeph> で示される行の間のすべてのテキストが、テキストフィールドに現在表示されています。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollV"><linktext>flash.text.TextField.scrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
	 カーソル（キャレット）位置のインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>点滅するカーソルの 0 から始まるインデックス値を返します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 カーソル（キャレット）位置のインデックスです。カーソルが表示されていない場合、この値は、フォーカスをフィールドに戻した場合にカーソルが表示される位置を示します。通常は、カーソルの最後の位置を示します。フィールドにフォーカスがなかった場合は 0 になります。
	 
	 <p>選択範囲のインデックスは 0 から始まります。つまり、最初の位置は 0、2 番目の位置は 1 で、以下同様に続きます。</p>
	 
	 
	 </apiDesc><example conref="examples\TextField_caretIndex.as"> この例では、TextField インスタンスを作成し、テキストを格納します。ユーザーが TextField をクリックしたときに <codeph>printCursorPosition</codeph> メソッドが呼び出されるように、イベントリスナーが割り当てられます。その場合、<codeph>caretIndex</codeph> プロパティ、<codeph>selectionBeginIndex</codeph> プロパティ、および <codeph>selectionEndIndex</codeph> プロパティの値が出力されます。
 
 <p>この例を実行し、TextField をクリックしてテキストを選択します。次に、テキストを選択せずにテキストフィールドをクリックします。選択なしでテキストをクリックする場合、<codeph>caretIndex</codeph> プロパティはカーソル位置を示し、<codeph>selectionBeginIndex</codeph> プロパティおよび <codeph>selectionEndIndex</codeph> プロパティは、<codeph>caretIndex</codeph> プロパティの値と等しくなります。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_caretIndex extends Sprite {
        public function TextField_caretIndex() {
            var tf:TextField = createCustomTextField(10, 10, 100, 100);
            tf.wordWrap = true;
            tf.type = TextFieldType.INPUT;
            tf.text = "Click in this text field. Compare the difference between clicking without selecting versus clicking and selecting text.";
            tf.addEventListener(MouseEvent.CLICK, printCursorPosition);
        }

        private function printCursorPosition(event:MouseEvent):void {
            var tf:TextField = TextField(event.target);
            trace("caretIndex:", tf.caretIndex);
            trace("selectionBeginIndex:", tf.selectionBeginIndex);
            trace("selectionEndIndex:", tf.selectionEndIndex);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
	 HTML テキストが含まれるテキストフィールド内の余分な空白（スペース、改行など）を削除するかどうかを指定するブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>textfield, text, HTML
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>HTML テキストが含まれるテキストフィールド内の余分な空白を削除するかどうかを指定するブール値です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 HTML テキストが含まれるテキストフィールド内の余分な空白（スペース、改行など）を削除するかどうかを指定するブール値です。デフォルト値は <codeph>false</codeph> です。<codeph>condenseWhite</codeph> プロパティは、<codeph>htmlText</codeph> プロパティで設定されたテキストにのみ影響し、<codeph>text</codeph> プロパティで設定されたテキストには影響しません。<codeph>text</codeph> プロパティでテキストを設定した場合、<codeph>condenseWhite</codeph> は無視されます。
	 
	 <p><codeph>condenseWhite</codeph> を <codeph>true</codeph> に設定した場合は、テキストフィールド内で改行を指定するときに <codeph>&amp;lt;BR&amp;gt;</codeph> や <codeph>&amp;lt;P&amp;gt;</codeph> といった標準の HTML コマンドを使用します。</p>
	 
	 <p><codeph>condenseWhite</codeph> プロパティは <codeph>htmlText</codeph> プロパティを設定する前に設定します。</p>
	 
	 
	 </apiDesc><example conref="examples\TextField_condenseWhite.as"> 次に、<codeph>condenseWhite</codeph> を <codeph>false</codeph> に設定する場合と、<codeph>true</codeph> に設定する場合の違いを示します。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_condenseWhite extends Sprite {
        public function TextField_condenseWhite() {
            var tf1:TextField = createCustomTextField(0, 0, 200, 50);
            tf1.condenseWhite = false;
            tf1.htmlText = "keep    on\n\ttruckin'";
            
            var tf2:TextField = createCustomTextField(0, 120, 200, 50);
            tf2.condenseWhite = true;
            tf2.htmlText = "keep    on\n\ttruckin'";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc>
	 新しく挿入するテキスト（ユーザーが入力したテキストや replaceSelectedText() メソッドで挿入したテキストなど）に適用するフォーマットを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.defaultTextFormat, defaultTextFormat
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text:TextFormat</apiValueClassifier><apiException><apiDesc>このメソッドは、スタイルシートを使用するテキストフィールドに対しては使用できません。
	  
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiTipTexts><apiTipText>新しく挿入されたテキストのテキストフォーマットを指定します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 新しく挿入するテキスト（ユーザーが入力したテキストや <codeph>replaceSelectedText()</codeph> メソッドで挿入したテキストなど）に適用するフォーマットを指定します。
	 
	 <p><b>注意：</b><codeph>setSelection()</codeph> と <codeph>replaceSelectedText()</codeph> で置き換える文字を選択する場合は、末尾文字も含めてテキスト全体を選択した場合に限り、<codeph>defaultTextFormat</codeph> が適用されます。次に例を示します。</p>
	 <pre>
	 var my_txt:TextField new TextField();
	 my_txt.text = "Flash Macintosh version";
	 var my_fmt:TextFormat = new TextFormat();
	 my_fmt.color = 0xFF0000;
	 my_txt.defaultTextFormat = my_fmt;
	 my_txt.setSelection(6,15); // partial text selected - defaultTextFormat not applied
	 my_txt.setSelection(6,23); // text selected to end - defaultTextFormat applied
	 my_txt.replaceSelectedText("Windows version");
	 </pre>
	 
	 <p><codeph>defaultTextFormat</codeph> プロパティにアクセスすると、すべてのプロパティが定義された TextFormat オブジェクトが返されます。<codeph>null</codeph> のプロパティはありません。</p>
     <p><b>注意：</b> このプロパティはテキストフィールドにスタイルシートが適用されていると設定できません。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/replaceSelectedText()"><linktext>flash.text.TextField.replaceSelectedText()</linktext></link><link href="flash.text.xml#TextField/getTextFormat()"><linktext>flash.text.TextField.getTextFormat()</linktext></link><link href="flash.text.xml#TextField/setTextFormat()"><linktext>flash.text.TextField.setTextFormat()</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc>
	 テキストフィールドがパスワードテキストフィールドであるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.password, password
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue><apiTipTexts><apiTipText>入力文字が非表示かどうかを指定します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドがパスワードテキストフィールドであるかどうかを指定します。このプロパティの値が <codeph>true</codeph> である場合、テキストフィールドはパスワードテキストフィールドとして扱われ、入力された文字は実際の文字の代わりにアスタリスクで隠されます。<codeph>false</codeph> である場合、テキストフィールドはパスワードテキストフィールドとして扱われません。パスワードモードを有効にすると、「カット」コマンドと「コピー」コマンド、およびそれに対応するキーボードショートカットが機能しなくなります。このセキュリティ機能により、ユーザーの不在時にキーボードショートカットを使用して悪質なユーザーがパスワードを盗むことを防止できます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc>
	 埋め込みフォントのアウトラインを使用してレンダリングするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.embedFonts, embedFonts
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue><apiTipTexts><apiTipText>フォントのアウトラインまたはデバイスフォントを使用してテキストフィールドをレンダリングします。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 埋め込みフォントのアウトラインを使用してレンダリングするかどうかを指定します。<codeph>false</codeph> である場合は、デバイスフォントを使用してテキストフィールドをレンダリングします。
	 
	 <p>テキストフィールドの <codeph>embedFonts</codeph> プロパティを <codeph>true</codeph> に設定する場合、テキストフィールドに適用される TextFormat オブジェクトの <codeph>font</codeph> プロパティを使用して、そのテキストのフォントを指定する必要があります。指定したフォントが SWF ファイルに埋め込まれていない場合、テキストは表示されません。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#Font/enumerateFonts()"><linktext>Font.enumerateFonts()</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc>
	 このテキストフィールドに使用されるグリッドフィッティングのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>This example shows three text fields that use the
	 different <code>flash.text.GridFitType</code> settings.  It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 9.5, 10, 400, 100);
	 my_text1.text = "this.gridFitType = none";
	 my_text1.embedFonts = true;
	 my_text1.antiAliasType = "advanced";
	 my_text1.gridFitType = "none";
	 my_text1.setTextFormat(my_format);
	 
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 9.5, 40, 400, 100);
	 my_text2.text = "this.gridFitType = advanced";
	 my_text2.embedFonts = true;
	 my_text2.antiAliasType = "advanced";
	 my_text2.gridFitType = "pixel";
	 my_text2.setTextFormat(my_format);
	 
	 var my_text3:TextField = this.createTextField("my_text3", this.getNextHighestDepth(), 9.5, 70, 400, 100);
	 my_text3.text = "this.gridFitType = subpixel";
	 my_text3.embedFonts = true;
	 my_text3.antiAliasType = "advanced";
	 my_text3.gridFitType = "subpixel";
	 my_text3.setTextFormat(my_format);
	 </listing>
	 
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>pixel
     
	 </apiDefaultValue><apiTipTexts><apiTipText>使用されるグリッドフィッティングのタイプです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 このテキストフィールドに使用されるグリッドフィッティングのタイプです。このプロパティは、テキストフィールドの <codeph>flash.text.AntiAliasType</codeph> プロパティが <codeph>flash.text.AntiAliasType.ADVANCED</codeph> に設定されている場合にのみ適用されます。
	 
	 <p>使用されるグリッドフィッティングのタイプによって、太い水平線と垂直線がピクセルグリッドまたはサブピクセルグリッドに合わされるか、まったく合わされないかが決定されます。</p>
	 
	 <p><codeph>flash.text.GridFitType</codeph> プロパティでは、次のストリング値を使用できます。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>ストリング値</entry><entry>説明</entry></row></thead><tbody><row>
	     <entry><codeph>flash.text.GridFitType.NONE</codeph></entry>
	     <entry>グリッドフィッティングなしを指定します。文字の水平方向と垂直方向の線は、ピクセルグリッドに合わされません。これは、アニメーションや大きなフォントサイズにお勧めする設定です。</entry>
	   </row><row>
	     <entry><codeph>flash.text.GridFitType.PIXEL</codeph></entry>
	     <entry>太い水平線と垂直線がピクセルグリッドに合わされるように指定します。この設定は左揃えのテキストフィールドに対してのみ機能します。この設定を使用するには、テキストフィールドの <codeph>flash.dispaly.AntiAliasType</codeph> プロパティを <codeph>flash.text.AntiAliasType.ADVANCED</codeph> に設定する必要があります。左揃えのテキストは通常、この設定を使用すると、最も読みやすくなります。</entry>
	   </row><row>
	     <entry><codeph>flash.text.GridFitType.SUBPIXEL</codeph></entry>
	     <entry>太い水平線と垂直線が、LCD モニターのサブピクセルグリッドに合わされるよう指定します。この設定を使用するには、テキストフィールドの <codeph>flash.text.AntiAliasType</codeph> プロパティを <codeph>flash.text.AntiAliasType.ADVANCED</codeph> に設定する必要があります。<codeph>flash.text.GridFitType.SUBPIXEL</codeph> 設定は、右揃えまたは中央揃えのダイナミックテキストに適した設定で、アニメーション品質とテキスト品質のバランスを取るのに便利です。</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc><example conref="examples\TextField_gridFitType.as"> 次の例では、<codeph>gridFitType</codeph> プロパティの設定が異なる 3 つのテキストフィールドが示されます。この例を使用する場合は、最初の 2 行の読みやすさに違いがあることに注意してください。また、左揃えのテキストでの <codeph>GridFitType.PIXEL</codeph> の最適な使用方法と、右揃えのテキストでの <codeph>GridFitType.SUBPIXEL</codeph> の最適な使用方法についても注意してください。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.GridFitType;

    public class gridFitTypeExample extends Sprite
    {
        public function gridFitTypeExample()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Arial";
    format1.size=12;

    var tf1:TextField = createCustomTextField(0,0,format1,"NONE",TextFieldAutoSize.LEFT,GridFitType.NONE);
    
    var tf2:TextField = createCustomTextField(0,30,format1,"PIXEL",TextFieldAutoSize.LEFT,GridFitType.PIXEL);

    var tf3:TextField = createCustomTextField(300,60,format1,"SUBPIXEL",TextFieldAutoSize.RIGHT,GridFitType.SUBPIXEL);

        }
        private function createCustomTextField(x:Number,y:Number,fm:TextFormat,tl:String,tfs:String,gft:String):TextField 
        {
            var result:TextField = new TextField();
            result.x=x;
            result.y=y;
            result.embedFonts=true;
            result.antiAliasType=AntiAliasType.ADVANCED;
            result.text="This text uses a gridFitType of " + tl;
            result.autoSize=tfs;
        result.gridFitType=gft;
            result.setTextFormat(fm);
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#GridFitType"><linktext>flash.text.GridFitType</linktext></link><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:htmlText:get"><apiName>htmlText</apiName><shortdesc>
	 テキストフィールドの内容を HTML で表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.htmlText, htmlText
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールドの内容の HTML 表現です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドの内容を HTML で表します。 
	 
	 <p>Flash Player では、次の HTML タグがサポートされています。</p>
	 
	 
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>
	 タグ
	 </entry><entry>
	 説明
	 </entry></row></thead><tbody><row>
	 
	 <entry>
	 アンカータグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;a></codeph> タグはハイパーリンクを作成するもので、次の属性を指定できます。
	 <ul>
	 
	 <li>
	 <codeph>target</codeph>：ページをロードする先のターゲットウィンドウの名前を指定します。オプションには、<codeph>_self</codeph>、<codeph>_blank</codeph>、<codeph>_parent</codeph>、および <codeph>_top</codeph> があります。<codeph>_self</codeph> オプションは現在のウィンドウ内の現在のフレームを指定します。<codeph>_blank</codeph> は新しいウィンドウを指定します。<codeph>_parent</codeph> は現在のフレームの親を指定します。<codeph>_top</codeph> は現在のウィンドウ内のトップレベルのフレームを指定します。 
	 </li>
	 
	 <li>
	 <codeph>href</codeph>：URL または ActionScript <codeph>link</codeph> イベントを指定します。URL には、絶対 URL、またはページをロードする SWF ファイルの場所を基準とする相対 URL のいずれかを使用できます。URL への絶対的な参照の例としては <codeph>http://www.adobe.com</codeph>、相対的な参照の例としては <codeph>/index.html</codeph> が挙げられます。絶対 URL には先頭に http:// を付けます。それがない場合、Flash Player または AIR では相対 URL と見なされます。<codeph>link</codeph> イベントを使用すると、リンクで URL を開くのではなく、SWF ファイルの ActionScript 関数を実行することができます。<codeph>link</codeph> イベントを指定するには、<codeph>href</codeph> 属性で、http スキームではなくイベントスキームを使用します。例では、<codeph>href="event:myText"</codeph> が使用されています（<codeph>href="http://myURL"</codeph> ではありません）。ユーザーがイベントスキームを含むハイパーテキストリンクをクリックすると、テキストフィールドが <codeph>link</codeph> TextEvent を送出します。このイベントの <codeph>text</codeph> プロパティは "<codeph>myText</codeph>" に設定されます。次に、link TextEvent が送出されると常に実行される ActionScript 関数を作成できます。また、スタイルシートを使用すると、アンカータグに <codeph>a:link</codeph>、<codeph>a:hover</codeph>、および <codeph>a:active</codeph> の各スタイルを定義できます。
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 ボールドタグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;b></codeph> タグは、テキストをボールドで表示します。ボールド体を利用できるフォントで使用する必要があります。
	 </entry>
	 </row><row>
	 
	 <entry>
	 ブレークタグ
	 </entry>
	 <entry>
	 <codeph>&amp;lt;br&amp;gt;</codeph> タグは、テキストフィールドに改行を作成します。このタグを使用するには、テキストフィールドを複数行テキストフィールドに設定します。
	 </entry>
	 </row><row>
	 
	 <entry>
	 フォントタグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;font></codeph> タグは、テキストを表示するフォントまたはフォントリストを指定します。フォントタグには、次の属性を指定できます。
	 <ul>
	 
	 <li>
	 <codeph>color</codeph>：16 進数のカラー（<codeph>#FFFFFF</codeph>）値のみがサポートされます。 
	 </li>
	 
	 <li>
	 <codeph>face</codeph>：使用するフォントの名前を指定します。次の例が示すように、カンマで区切られたフォント名の一覧を指定することもできます。その場合、Flash Player は最初に利用可能なフォントを選択します。指定したフォントがローカルのコンピューターシステムにインストールされていないか、または SWF ファイルに組み込まれていない場合、Flash Player は代替フォントを選択します。 
	 </li>
	 
	 <li>
	 <codeph>size</codeph>：フォントのサイズを指定します。絶対ピクセルサイズ（16 や 18 など）、または相対ポイントサイズ（+2 や -4 など）を使用できます。 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 イメージタグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;img></codeph> タグは、外部イメージファイル（JPEG、GIF、PNG）、SWF ファイル、およびムービークリップをテキストフィールドに埋め込みます。テキストは、テキストフィールドに埋め込んだイメージの周囲に自動的に配置されます。このタグを使用するには、テキストがイメージの周囲で折り返されるように、テキストフィールドを複数行に設定する必要があります。 
	 
	  <p><codeph>&amp;lt;img&amp;gt;</codeph> タグには、次の属性を指定できます。 </p>
	 
	 <ul>
	 
	 <li>
	 <codeph>src</codeph>：イメージファイルまたは SWF ファイルへの URL、またはライブラリ内のムービークリップシンボルへのリンケージ識別子を指定します。この属性は必須です。他の属性はすべて省略可能です。外部ファイル（JPEG、GIF、PNG および SWF ファイル）は、完全にダウンロードされるまで表示されません。 
	 </li>
	 
	 <li>
	 <codeph>width</codeph>：挿入されるイメージ、SWF ファイル、またはムービークリップのピクセル単位の幅です。 
	 </li>
	 
	 <li>
	 <codeph>height</codeph>：挿入されるイメージ、SWF ファイル、またはムービークリップのピクセル単位の高さです。 
	 </li>
	 
	 <li>
	 <codeph>align</codeph>：テキストフィールド内の埋め込みイメージの水平整列を指定します。有効な値は、<codeph>left</codeph> および <codeph>right</codeph> です。デフォルト値は <codeph>left</codeph> です。 
	 </li>
	 
	 <li>
	 <codeph>hspace</codeph>：イメージの周りの水平方向の空白の量（テキストが表示されない領域）を指定します。デフォルト値は 8 です。 
	 </li>
	 
	 <li>
	 <codeph>vspace</codeph>：イメージの周りの垂直方向の空白の量（テキストが表示されない領域）を指定します。デフォルト値は 8 です。  
	 </li>
	 
	 <li>
	 <codeph>id</codeph>：埋め込みイメージファイル、SWF ファイル、またはムービークリップを含むムービークリップインスタンスの名前（Flash Player が作成したもの）を指定します。この方法は、ActionScript を使用して埋め込みコンテンツを制御する場合に使用されます。 
	 </li>
	 
	 <li>
	 <codeph>checkPolicyFile</codeph>：イメージのドメインに関連付けられたサーバー上の URL ポリシーファイルを Flash Player が確認することを指定します。ポリシーファイルが存在する場合、ファイルに記載されているドメイン内の SWF ファイルは、読み込まれたイメージのデータにアクセスできます。例えば、<codeph>BitmapData.draw()</codeph> メソッドの呼び出しを、このイメージを <codeph>source</codeph> パラメーターにして実行することよってアクセスできます。詳細については、『<i>ActionScript 3.0 のプログラミング</i>』の「Flash Player セキュリティ」の章を参照してください。
	 </li>
	 
	 </ul>
	  <p>Flash はテキストフィールドに埋め込まれたメディアをフルサイズで表示します。埋め込むメディアのサイズを指定するには、<codeph>&amp;lt;img&amp;gt;</codeph> タグの <codeph>height</codeph> 属性と <codeph>width</codeph> 属性を使用します。 </p>
	 
	  <p>一般に、テキストフィールドに埋め込まれたイメージは、<codeph>&amp;lt;img&amp;gt;</codeph> タグの次の行に表示されます。ただし、<codeph>&lt;img></codeph> タグがテキストフィールドの最初の文字であった場合、イメージはテキストフィールドの最初の行に表示されます。 </p>
	 
	 <p>アプリケーションセキュリティサンドボックスの AIR コンテンツの場合、ActionScript TextField オブジェクトの HTML コンテンツにある <codeph>img</codeph> タグは無視されます。これはフィッシング攻撃を防ぐためです。</p>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 イタリックタグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;i></codeph> タグは、指定されたテキストをイタリックで表示します。イタリック体を利用できるフォントで使用する必要があります。
	 </entry>
	 </row><row>
	 
	 <entry>
	 リスト項目タグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;li></codeph> タグは、このタグに囲まれたテキストの行頭に箇条書き記号を表示します。<b>注意：</b>Flash Player および AIR では、番号付きリストタグや番号なしリストタグ（<codeph>&amp;lt;ol&amp;gt;</codeph> や <codeph>&amp;lt;ul&amp;gt;</codeph>）は認識されないため、これらのタグが使われていてもリストの表示形態に変化はありません。どのリストにも番号は付かず、すべてのリストアイテムに箇条書き記号が使用されます。
	 </entry>
	 </row><row>
	 
	 <entry>
	 段落タグ
	 </entry>
	 
	 <entry>
	 <codeph>&amp;lt;p&amp;gt;</codeph> タグは新しい段落を作成します。このタグを使用するには、テキストフィールドを複数行テキストフィールドに設定する必要があります。<codeph>&amp;lt;p&amp;gt;</codeph> タグには、次の属性を指定できます。
	 <ul>
	 
	 <li>
	 align：段落内のテキストの整列を指定します。有効な値は、<codeph>left</codeph>、<codeph>right</codeph>、<codeph>justify</codeph>、および <codeph>center</codeph> です。 
	 </li>
	 
	 <li>
	 class：flash.text.StyleSheet オブジェクトで定義される CSS スタイルクラスを指定します。 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 範囲タグ
	 </entry>
	 
	 <entry>
	 
	 <codeph>&lt;span></codeph> タグは、CSS テキストスタイルでのみ使用できます。次の属性をサポートします。
	 
	 <ul>
	 
	 <li>
	 class：flash.text.StyleSheet オブジェクトで定義される CSS スタイルクラスを指定します。 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 テキストフォーマットタグ
	 </entry>
	 
	 <entry>
	  <p><codeph>&lt;textformat></codeph> タグを使用すれば、テキストフィールド内において TextFormat クラスのいくつかの段落フォーマットプロパティ（行間、インデント、マージン、タブストップなど）を指定できます。<codeph>&lt;textformat></codeph> タグは、ビルトイン HTML タグと組み合わせて使用できます。 </p>
	 
	  <p><codeph>&lt;textformat></codeph> タグでは、次のような属性を指定できます。 </p>
	 <ul>
	 
	 <li>
	 <codeph>blockindent</codeph>：ブロックのインデントをポイント単位で指定します。<codeph>TextFormat.blockIndent</codeph> に相当します。 
	 </li>
	 
	 <li>
	 <codeph>indent</codeph>：左マージンから段落の先頭文字までのインデントを指定します。<codeph>TextFormat.indent</codeph> に相当します。正の数と負の数の両方を使用できます。 
	 </li>
	 
	 <li>
	 <codeph>leading</codeph>：行間の行送り（垂直の行間隔）を指定します。<codeph>TextFormat.leading</codeph> に相当します。正の数と負の数の両方を使用できます。 
	 </li>
	 
	 <li>
	 <codeph>leftmargin</codeph>：段落の左マージンをポイント単位で指定します。<codeph>TextFormat.leftMargin</codeph> に相当します。 
	 </li>
	 
	 <li>
	 <codeph>rightmargin</codeph>：段落の右マージンをポイント単位で指定します。<codeph>TextFormat.rightMargin</codeph> に相当します。 
	 </li>
	 
	 <li>
	 <codeph>tabstops</codeph>：カスタムタブストップを負以外の整数の配列として指定します。<codeph>TextFormat.tabStops</codeph> に相当します。 
	 </li>
	 
	 </ul>
	 
	 </entry>
	 </row><row>
	 
	 <entry>
	 下線タグ
	 </entry>
	 
	 <entry>
	 <codeph>&lt;u></codeph> タグを付けたテキストには下線が引かれます。
	 </entry>
	 </row></tbody></tgroup></adobetable>
	 
	 <p>Flash Player および AIR では、次の HTML エンティティがサポートされています。</p>
	 
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>
	 エンティティ
	 </entry><entry>
	 説明
	 </entry></row></thead><tbody><row>
	 
	 <entry>
	 
	 &amp;amp;lt;	
	 
	 </entry>
	 
	 <entry>
	 
	 &lt;（より小さい）
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 
	 &amp;amp;gt;	
	 
	 </entry>
	 
	 <entry>
	 
	 >（より大きい）
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 
	 &amp;amp;amp;	
	 
	 </entry>
	 
	 <entry>
	 
	 &amp;（アンパサンド）
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 &amp;amp;quot;	
	 
	 </entry>
	 
	 <entry>
	 
	 "（二重引用符）
	 
	 </entry>
	 
	 </row><row>
	 
	 <entry>
	 
	 &amp;amp;apos;	
	 
	 </entry>
	 
	 <entry>
	 
	 '（アポストロフィ、一重引用符）
	 
	 </entry>
	 
	 </row></tbody></tgroup></adobetable>
	  
	  <p>Flash Player および AIR ではまた、&amp;#38;（ASCII のアンパサンド）や &amp;#x20AC;（Unicode の € シンボル）など、文字コードの明示的な指定もサポートされています。 </p>
	 
	 </apiDesc><example conref="examples\TextField_text.as"> 次の例では、<codeph>tf1</codeph> という TextField を作成し、その<codeph>text</codeph> プロパティに HTML 形式のストリングを割り当てます。 <codeph>htmlText</codeph> プロパティがトレースされると、HTML 形式のストリングが出力されます。Flash Player によって自動的に追加された追加タグ（&lt;P> や &lt;FONT> など）も共に出力されます。<codeph>text</codeph> プロパティの値がトレースされると、HTML タグなしのフォーマットされていないストリングが表示されます。
 
 <p>比較するために、<codeph>tf2</codeph> という別の TextField オブジェクトに対して同じ手順を実行します。ここでは追加手順として、StyleSheet オブジェクトを <codeph>tf2</codeph> の <codeph>styleSheet</codeph> プロパティに割り当て、その <codeph>htmlText</codeph> プロパティを設定します。その場合、<codeph>htmlText</codeph> プロパティがトレースされると、最初に <codeph>htmlText</codeph> プロパティに割り当てられた HTML テキストだけが含まれ、Flash Player によって追加タグが加えられていないことが示されます。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.StyleSheet;
    import flash.text.TextField;

    public class TextField_text extends Sprite {
        public function TextField_text() {
            var tf1:TextField = createCustomTextField(10, 10, 400, 22);
            tf1.htmlText = "&lt;b>Lorem ipsum dolor sit amet.&lt;/b>";

            // htmlText: &lt;P ALIGN="LEFT">&lt;FONT FACE="Times New Roman" SIZE="12" COLOR="#000000" LETTERSPACING="0" KERNING="0">&amp;lt;b&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/b&amp;gt;&lt;/FONT>&lt;/P>
            trace("htmlText: " + tf1.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf1.text);
            
            var tf2:TextField = createCustomTextField(10, 50, 400, 22);
            tf2.styleSheet = new StyleSheet();
            tf2.htmlText = "&lt;b>Lorem ipsum dolor sit amet.&lt;/b>";
            // htmlText: &lt;b>Lorem ipsum dolor sit amet.&lt;/b>
            trace("htmlText: " + tf2.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf2.text);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/text"><linktext>flash.text.TextField.text</linktext></link><link href="flash.text.xml#StyleSheet"><linktext>flash.text.StyleSheet</linktext></link><link href="flash.events.xml#TextEvent"><linktext>flash.events.TextEvent</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:length:get"><apiName>length</apiName><shortdesc>
	 テキストフィールド内の文字数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.length, length
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールド内の文字数です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールド内の文字数です。タブ（<codeph>\t</codeph>）などの文字も 1 文字としてカウントされます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:maxChars:get"><apiName>maxChars</apiName><shortdesc>
	 ユーザーが入力するときに、テキストフィールドに入力できる最大の文字数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.maxChars, maxChars
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiDefaultValue>0
	 
	 </apiDefaultValue><apiTipTexts><apiTipText>テキストフィールドに入る最大の文字数です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 ユーザーが入力するときに、テキストフィールドに入力できる最大の文字数です。スクリプトは <codeph>maxChars</codeph> の許容数を超えるテキストを挿入できます。<codeph>maxChars</codeph> プロパティで指定されるのは、ユーザーが入力できるテキストの量だけです。このプロパティの値が <codeph>0</codeph> である場合、ユーザーが入力できるテキストの量には制限がありません。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc>
	 scrollH の最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.maxScrollH, maxScrollH
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>scrollH の最大値です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 <codeph>scrollH</codeph> の最大値です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollH"><linktext>flash.text.TextField.scrollH</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc>
	 scrollH の最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.maxScrollV, maxScrollV
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText><codeph>scrollV</codeph> の最大値です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 <codeph>scrollV</codeph> の最大値です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollV"><linktext>flash.text.TextField.scrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc>
	 複数行にわたるテキストフィールドで、ユーザーがテキストフィールドをクリックしてホイールを回転させると、自動的にスクロールするかどうかを示すブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.mouseWheelEnabled, mouseWheelEnabled
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>Flash Player が複数行テキストフィールドを自動的にスクロールするかどうかを示します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 複数行にわたるテキストフィールドで、ユーザーがテキストフィールドをクリックしてホイールを回転させると、自動的にスクロールするかどうかを示すブール値です。デフォルト値は <codeph>true</codeph> です。このプロパティは、マウスホイールでテキストフィールドをスクロールしない場合や、テキストフィールドのスクロールを独自に実装する場合に便利です。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:multiline:get"><apiName>multiline</apiName><shortdesc>
	 フィールドが複数行テキストフィールドであるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.multiline, multiline
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
     
	 </apiDefaultValue><apiTipTexts><apiTipText>テキストフィールドが複数行テキストフィールドであるかどうかを示します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 フィールドが複数行テキストフィールドであるかどうかを示します。値が <codeph>true</codeph> である場合は複数行テキストフィールド、値が <codeph>false</codeph> である場合は単一行テキストフィールドです。<codeph>TextFieldType.INPUT</codeph> タイプのフィールドでは、<codeph>multiline</codeph> の値によって、<codeph>Enter</codeph> キーで改行されるかどうかが決定されます（値が <codeph>false</codeph> の場合 <codeph>Enter</codeph> キーは無視されます）。<codeph>TextField</codeph> の <codeph>multiline</codeph> の値が <codeph>false</codeph> に設定されている場合、テキストをこのフィールドに貼り付けると、改行は削除されます。

	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/numLines"><linktext>numLines</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:numLines:get"><apiName>numLines</apiName><shortdesc>
	 複数行テキストフィールド内のテキスト行の数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.numLines, numLines
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>複数行テキストフィールド内のテキスト行の数を定義します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 複数行テキストフィールド内のテキスト行の数を定義します。<codeph>wordWrap</codeph> プロパティが <codeph>true</codeph> に設定されている場合、テキストが折り返されると行数は増えます。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/multiline"><linktext>multiline</linktext></link><link href="flash.text.xml#TextField/wordWrap"><linktext>wordWrap</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:restrict:get"><apiName>restrict</apiName><shortdesc>
	 ユーザーがテキストフィールドに入力できる文字のセットを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.restrict, restrict
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>null
     
	 </apiDefaultValue><apiTipTexts><apiTipText>ユーザーがテキストフィールドに入力できる文字のセットです。
	 

	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 ユーザーがテキストフィールドに入力できる文字のセットを指定します。<codeph>restrict</codeph> プロパティの値が <codeph>null</codeph> である場合は、任意の文字を入力できます。<codeph>restrict</codeph> プロパティの値が空のストリングである場合は、いずれの文字も入力できません。<codeph>restrict</codeph> プロパティの値が文字のストリングである場合は、そのストリング内の文字のみをテキストフィールドに入力できます。ストリングは左から右へスキャンされます。ハイフン（-）文字を使用して、範囲を指定できます。制限されるのはユーザー入力のみです。スクリプトは任意のテキストをテキストフィールドに入力できます。<ph outputclass="flashonly">このプロパティは、プロパティインスペクターの埋め込みフォントのオプションと同期しません。</ph>
	 
	 <p>ストリングがキャレット（^）文字で始まる場合、そのストリングに含まれる文字を除いて、すべての文字を入力できます。ストリングがキャレット（^）文字以外で始まる場合は、そのストリングに含まれる文字のみを入力できます。</p>
	 
	 <p>次の例では、大文字、スペース、および数値のみをテキストフィールドに入力できます。</p>
	 <pre>
	 my_txt.restrict = "A-Z 0-9";
	 </pre>
	 <p>次の例では、小文字を除くすべての文字を入力できます。</p>
	 <pre>
	 my_txt.restrict = "^a-z";
	 </pre>
	 <p>円記号を使用して ^ または - のリテラルを入力できます。許容される円記号のシーケンスは \-、\^、または \\ です。円記号をストリングの 1 文字として実際に使用するには、ActionScript で指定するときに円記号を 2 つ続けて指定する必要があります。例えば、次のコードで表されているのはダッシュ（-）とキャレット（^）のみです。</p>
	 <pre>
	 my_txt.restrict = "\\-\\^";
	 </pre>
	 <p>ストリング内では任意の場所で ^ を使用し、入力できる文字と除外する文字を切り替えることができます。次のコードでは、大文字のみを入力できます。ただし、大文字の Q を除きます。</p>
	 <pre>
	 my_txt.restrict = "A-Z^Q";
	 </pre>
	 <p><codeph>¥u</codeph> エスケープシーケンスを使用して <codeph>restrict</codeph> ストリングを作成できます。次のコードでは、ASCII 32（スペース）から ASCII 126（チルダ）までの文字のみを入力できます。</p>
	 <pre>
     my_txt.restrict = "\u0020-\u007E";
	 </pre>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextField:scrollH:get"><apiName>scrollH</apiName><shortdesc>
	 現在の水平スクロール位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.scrollH, scrollH
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>現在の水平スクロール位置です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 現在の水平スクロール位置です。<codeph>scrollH</codeph> プロパティが 0 である場合、テキストは水平にスクロールされません。このプロパティの値は、水平位置をピクセル単位で表す整数です。
	 
	 
	 <p>垂直スクロールの単位は行数ですが、水平スクロールの単位はピクセル数です。水平スクロールをピクセル単位で指定するのは、一般的に使用されるフォントのほとんどがプロポーショナルフォントであり、文字の幅が一定でないためです。垂直スクロールの場合は、通常、1 行のテキストの一部だけ表示されるよりも行全体が表示されることが好まれるため、行単位でスクロールします。1 行の中に複数のフォントが存在する場合でも、使用されている最大のフォントに合わせて行の高さが調整されます。</p>
	 
	 <p><b>注意：</b><codeph>scrollH</codeph> プロパティは、<codeph>scrollV</codeph> 垂直スクロールプロパティのように 1 から始まるのではなく、0 から始まります。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/maxScrollH"><linktext>flash.text.TextField.maxScrollH</linktext></link><link href="flash.text.xml#TextField/scrollV"><linktext>flash.text.TextField.scrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:scrollV:get"><apiName>scrollV</apiName><shortdesc>
	 テキストフィールドのテキストの垂直位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.scrollV, scroll
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールドのテキストの垂直位置です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドのテキストの垂直位置です。<codeph>scrollV</codeph> プロパティは、長い文節内の特定の段落にユーザーを誘導したり、スクロールテキストフィールドを作成する場合に便利です。
	 
	 <p>水平スクロールの単位はピクセル数ですが、垂直スクロールの単位は行数です。表示される最初の行がテキストフィールド内の最初の行の場合、scrollV は 1 に設定されます。0 ではありません。水平スクロールをピクセル単位で指定するのは、フォントのほとんどがプロポーショナルフォントであり、文字の幅が一定でないためです。垂直スクロールの場合は、通常、1 行のテキストの一部だけ表示されるよりも行全体が表示されることが好まれるため、行単位でスクロールします。1 行の中に複数のフォントが存在する場合でも、使用されている最大のフォントに合わせて行の高さが調整されます。</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/scrollH"><linktext>flash.text.TextField.scrollH</linktext></link><link href="flash.text.xml#TextField/maxScrollV"><linktext>flash.text.TextField.maxScrollV</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:selectable:get"><apiName>selectable</apiName><shortdesc>
	 テキストフィールドが選択可能であるかどうかを示すブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.selectable, selectable
	 
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>true
     
         </apiDefaultValue><apiTipTexts><apiTipText>テキストフィールドが選択可能かどうかを示します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドが選択可能であるかどうかを示すブール値です。値 <codeph>true</codeph> は、テキストが選択可能であることを示します。<codeph>selectable</codeph> プロパティを使用することで、テキストフィールドが選択可能かどうかを指定できますが、編集可能かどうかは指定できません。ダイナミックテキストフィールドは、編集可能でない場合でも選択可能にすることができます。ダイナミックテキストフィールドが選択可能でない場合、ユーザーはフィールド内のテキストを選択できません。
	 
	 <p><codeph>selectable</codeph> を <codeph>false</codeph> に設定すると、テキストフィールド内のテキストはマウスやキーボードからの選択コマンドに応答しなくなり、「コピー」コマンドを使用してテキストをコピーすることができなくなります。<codeph>selectable</codeph> を <codeph>true</codeph> に設定すると、テキストフィールド内のテキストはマウスやキーボードを使用して選択できるようになり、「コピー」コマンドを使用してテキストをコピーできるようになります。テキスト入力フィールドではなくダイナミックテキストフィールドの場合でも、この方法でテキストを選択できます。 </p>
	 
     </apiDesc><example conref="examples\TextField_selectable.as"> 次の例では、2 つのダイナミックテキストフィールドを作成します。一方のテキストフィールドは <codeph>selectable</codeph> プロパティが <codeph>true</codeph> に設定され、もう一方のテキストフィールドは <codeph>selectable</codeph> プロパティが <codeph>false</codeph> に設定されます。この例を使用する場合は、これらのフィールド内のテキストをマウスまたはキーボードを使用して選択してください。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class selectableExample extends Sprite
    {
        public function selectableExample()
        {
    var tf1:TextField = createCustomTextField(10, 10);
    tf1.text="This text can be selected";
    tf1.selectable=true;

    var tf2:TextField = createCustomTextField(10, 30);
    tf2.text="This text cannot be selected";
    tf2.selectable=false;
        }

        private function createCustomTextField(x:Number, y:Number):TextField 
       {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.autoSize=TextFieldAutoSize.LEFT;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc>
	 現在の選択範囲の最初の文字を示す、0 から始まるインデックス値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>選択範囲の最初の文字を示す、0 から始まるインデックス値です。 
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 現在の選択範囲の最初の文字を示す、0 から始まるインデックス値です。例えば、最初の文字が 0、次の文字が 1 と続きます（以下同様）。テキストが選択されていない場合、このプロパティは <codeph>caretIndex</codeph> の値になります。
	 
	 </apiDesc><example conref="examples\TextField_caretIndex.as"> この例では、TextField インスタンスを作成し、テキストを格納します。ユーザーが TextField をクリックしたときに <codeph>printCursorPosition</codeph> メソッドが呼び出されるように、イベントリスナーが割り当てられます。その場合、<codeph>caretIndex</codeph> プロパティ、<codeph>selectionBeginIndex</codeph> プロパティ、および <codeph>selectionEndIndex</codeph> プロパティの値が出力されます。
 
 <p>この例を実行し、TextField をクリックしてテキストを選択します。次に、テキストを選択せずにテキストフィールドをクリックします。選択なしでテキストをクリックする場合、<codeph>caretIndex</codeph> プロパティはカーソル位置を示し、<codeph>selectionBeginIndex</codeph> プロパティおよび <codeph>selectionEndIndex</codeph> プロパティは、<codeph>caretIndex</codeph> プロパティの値と等しくなります。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_caretIndex extends Sprite {
        public function TextField_caretIndex() {
            var tf:TextField = createCustomTextField(10, 10, 100, 100);
            tf.wordWrap = true;
            tf.type = TextFieldType.INPUT;
            tf.text = "Click in this text field. Compare the difference between clicking without selecting versus clicking and selecting text.";
            tf.addEventListener(MouseEvent.CLICK, printCursorPosition);
        }

        private function printCursorPosition(event:MouseEvent):void {
            var tf:TextField = TextField(event.target);
            trace("caretIndex:", tf.caretIndex);
            trace("selectionBeginIndex:", tf.selectionBeginIndex);
            trace("selectionEndIndex:", tf.selectionEndIndex);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionEndIndex"><linktext>selectionEndIndex</linktext></link><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc>
	 現在の選択範囲における最後の文字を示す、0 から始まるインデックス値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiTipTexts><apiTipText>選択範囲の最後の文字を示す、0 から始まるインデックス値です。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 現在の選択範囲における最後の文字を示す、0 から始まるインデックス値です。例えば、最初の文字が 0、次の文字が 1 と続きます（以下同様）。テキストが選択されていない場合、このプロパティは <codeph>caretIndex</codeph> の値になります。
	 
	 </apiDesc><example conref="examples\TextField_caretIndex.as"> この例では、TextField インスタンスを作成し、テキストを格納します。ユーザーが TextField をクリックしたときに <codeph>printCursorPosition</codeph> メソッドが呼び出されるように、イベントリスナーが割り当てられます。その場合、<codeph>caretIndex</codeph> プロパティ、<codeph>selectionBeginIndex</codeph> プロパティ、および <codeph>selectionEndIndex</codeph> プロパティの値が出力されます。
 
 <p>この例を実行し、TextField をクリックしてテキストを選択します。次に、テキストを選択せずにテキストフィールドをクリックします。選択なしでテキストをクリックする場合、<codeph>caretIndex</codeph> プロパティはカーソル位置を示し、<codeph>selectionBeginIndex</codeph> プロパティおよび <codeph>selectionEndIndex</codeph> プロパティは、<codeph>caretIndex</codeph> プロパティの値と等しくなります。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_caretIndex extends Sprite {
        public function TextField_caretIndex() {
            var tf:TextField = createCustomTextField(10, 10, 100, 100);
            tf.wordWrap = true;
            tf.type = TextFieldType.INPUT;
            tf.text = "Click in this text field. Compare the difference between clicking without selecting versus clicking and selecting text.";
            tf.addEventListener(MouseEvent.CLICK, printCursorPosition);
        }

        private function printCursorPosition(event:MouseEvent):void {
            var tf:TextField = TextField(event.target);
            trace("caretIndex:", tf.caretIndex);
            trace("selectionBeginIndex:", tf.selectionBeginIndex);
            trace("selectionEndIndex:", tf.selectionEndIndex);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/selectable"><linktext>selectable</linktext></link><link href="flash.text.xml#TextField/selectionBeginIndex"><linktext>selectionBeginIndex</linktext></link><link href="flash.text.xml#TextField/setSelection()"><linktext>setSelection()</linktext></link><link href="flash.text.xml#TextField/caretIndex"><linktext>caretIndex</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:sharpness:get"><apiName>sharpness</apiName><shortdesc>
	 このテキストフィールド内の文字エッジのシャープネスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>This example creates three text fields with
	 <code>sharpness</code> set to <code>400</code>, <code>0</code>, and <code>-400</code>.
	 It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 10, 10, 400, 100);
	 my_text1.text = "This text has sharpness set to 400."
	 my_text1.embedFonts = true;
	 my_text1.antiAliasType = "advanced";
	 my_text1.gridFitType = "pixel";
	 my_text1.sharpness = 400;
	 my_text1.setTextFormat(my_format);
         
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 10, 40, 400, 100);
	 my_text2.text = "This text has sharpness set to 0."
	 my_text2.embedFonts = true;
	 my_text2.antiAliasType = "advanced";
	 my_text2.gridFitType = "pixel";
	 my_text2.sharpness = 0;
	 my_text2.setTextFormat(my_format);
	 
	 var my_text3:TextField = this.createTextField("my_text3", this.getNextHighestDepth(), 10, 70, 400, 100);
	 my_text3.text = "This text has sharpness set to -400."
	 my_text3.embedFonts = true;
	 my_text3.antiAliasType = "advanced";
	 my_text3.gridFitType = "pixel";
	 my_text3.sharpness = -400;
	 my_text3.setTextFormat(my_format);
	 </listing>
	 
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiDefaultValue>0
     
         </apiDefaultValue><apiTipTexts><apiTipText>文字エッジのシャープネスです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 このテキストフィールド内の文字エッジのシャープネスです。このプロパティは、テキストフィールドの <codeph>flash.text.AntiAliasType</codeph> プロパティが <codeph>flash.text.AntiAliasType.ADVANCED</codeph> に設定されている場合にのみ適用されます。<codeph>sharpness</codeph> の範囲は -400 ～ 400 の数値です。 <codeph>sharpness</codeph> をこの範囲外の値に設定しようとすると、このプロパティは範囲内の最も近い値（-400 または 400）に設定されます。
	 
	 </apiDesc><example conref="examples\TextField_sharpness.as"> 次の例では、TextField オブジェクトの <codeph>sharpness</codeph> プロパティを変更する場合の効果について示しています。フォントを埋め込んで、<codeph>antiAliasType</codeph> プロパティを <codeph>ADVANCED</codeph> に設定する必要があります。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.GridFitType;
    import flash.text.TextFormat;

    public class sharpnessExample extends Sprite
    {
        public function sharpnessExample()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Arial";
    format1.size=24;
    var lTxt:String = "The quick brown fox";

    var tf1:TextField=createCustomTextField(0,lTxt,format1,-400);
    var tf2:TextField=createCustomTextField(30,lTxt,format1,0);
    var tf3:TextField=createCustomTextField(60,lTxt,format1,400);
        }

        private function createCustomTextField(y:Number,fldTxt:String,format:TextFormat,fldSharpness:Number):TextField 
       {
            var result:TextField = new TextField();
            result.y=y;
            result.text=fldTxt;
            result.embedFonts=true;
            result.autoSize=TextFieldAutoSize.LEFT;
            result.antiAliasType=AntiAliasType.ADVANCED;
            result.gridFitType=GridFitType.PIXEL;
            result.sharpness=fldSharpness;
            result..setTextFormat(format);
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc>
	 テキストフィールドにスタイルシートを関連付けます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, StyleSheet, style sheet, stylesheet
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text:StyleSheet</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールドにスタイルシートを関連付けます。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドにスタイルシートを関連付けます。スタイルシートの作成について詳しくは、StyleSheet クラスおよび『<i>ActionScript 3.0 のプログラミング</i>』を参照してください。
	 
	 <p>テキストフィールドに関連付けられているスタイルシートは、いつでも変更することができます。使用されているスタイルシートを変更すると、テキストフィールドは新しいスタイルシートを使用して再描画されます。スタイルシートを <codeph>null</codeph> または <codeph>undefined</codeph> に設定すると、そのスタイルシートを削除できます。使用されているスタイルシートを削除すると、テキストフィールドはスタイルシートを使用せずに再描画されます。 </p>
     <p><b>注意：</b>スタイルシートが削除されると、<codeph>TextField.text</codeph> および <codeph>TextField.htmlText</codeph> の内容は両方とも、以前にスタイルシートで適用したフォーマットを適用するように変更されます。<codeph>TextField.htmlText</codeph> の内容をフォーマットなしで保存するには、スタイルシートを削除する前に変数にその値を保存します。</p>
	 
     </apiDesc><example conref="examples\TextField_styleSheet.as"> 次の例では、単純な StyleSheet オブジェクトを定義し、HTML コンテンツを含むテキストフィールドに割り当てます。コンテンツを設定する前に、<codeph>stylesheet</codeph> プロパティを設定します。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.StyleSheet;

    public class TextStylesheetExample extends Sprite {
        var myLabel:TextField = new TextField();
        var labelText:String = "Hello world.";
        var newStyle:StyleSheet = new StyleSheet();

        public function TextStylesheetExample()
       {
            var styleObj:Object = new Object();
            styleObj.fontWeight = "bold";
            styleObj.color = "#660066";
            newStyle.setStyle(".defStyle", styleObj);

            myLabel.styleSheet=newStyle;
            myLabel.htmlText=labelText;
            addChild(myLabel);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#StyleSheet"><linktext>flash.text.StyleSheet</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:text:get"><apiName>text</apiName><shortdesc>
	 テキストフィールド内の現在のテキストであるストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.text, text
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールド内の現在のテキストであるストリングです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールド内の現在のテキストであるストリングです。行は復帰文字（<codeph>'\r'</codeph>、ASCII 13）で区切られます。このプロパティは、HTML タグが付いていない、テキストフィールド内のフォーマットなしのテキストを示します。
	 
	 <p>HTML フォーム内のテキストを取得するには、<codeph>htmlText</codeph> プロパティを使用します。</p>
	 
	 </apiDesc><example conref="examples\TextField_text.as"> 次の例では、<codeph>tf1</codeph> という TextField を作成し、その<codeph>text</codeph> プロパティに HTML 形式のストリングを割り当てます。 <codeph>htmlText</codeph> プロパティがトレースされると、HTML 形式のストリングが出力されます。Flash Player によって自動的に追加された追加タグ（&lt;P> や &lt;FONT> など）も共に出力されます。<codeph>text</codeph> プロパティの値がトレースされると、HTML タグなしのフォーマットされていないストリングが表示されます。
 
 <p>比較するために、<codeph>tf2</codeph> という別の TextField オブジェクトに対して同じ手順を実行します。ここでは追加手順として、StyleSheet オブジェクトを <codeph>tf2</codeph> の <codeph>styleSheet</codeph> プロパティに割り当て、その <codeph>htmlText</codeph> プロパティを設定します。その場合、<codeph>htmlText</codeph> プロパティがトレースされると、最初に <codeph>htmlText</codeph> プロパティに割り当てられた HTML テキストだけが含まれ、Flash Player によって追加タグが加えられていないことが示されます。</p>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.StyleSheet;
    import flash.text.TextField;

    public class TextField_text extends Sprite {
        public function TextField_text() {
            var tf1:TextField = createCustomTextField(10, 10, 400, 22);
            tf1.htmlText = "&lt;b>Lorem ipsum dolor sit amet.&lt;/b>";

            // htmlText: &lt;P ALIGN="LEFT">&lt;FONT FACE="Times New Roman" SIZE="12" COLOR="#000000" LETTERSPACING="0" KERNING="0">&amp;lt;b&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/b&amp;gt;&lt;/FONT>&lt;/P>
            trace("htmlText: " + tf1.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf1.text);
            
            var tf2:TextField = createCustomTextField(10, 50, 400, 22);
            tf2.styleSheet = new StyleSheet();
            tf2.htmlText = "&lt;b>Lorem ipsum dolor sit amet.&lt;/b>";
            // htmlText: &lt;b>Lorem ipsum dolor sit amet.&lt;/b>
            trace("htmlText: " + tf2.htmlText);
            // text: Lorem ipsum dolor sit amet.
            trace("text: " + tf2.text);
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:textColor:get"><apiName>textColor</apiName><shortdesc>
	 テキストフィールドのテキストの色です（16 進数形式）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.textColor, textColor
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiDefaultValue>0 (0x000000)
	 </apiDefaultValue><apiTipTexts><apiTipText>テキストフィールドのテキストの色です（16 進数形式）。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドのテキストの色です（16 進数形式）。16 進数カラーシステムでは、6 桁の数値を使用して色の値を示します。1 つの桁で、16 種類の値（文字）を指定できます。値の範囲は、0 ～ -9、A ～ F です。例えば、黒は <codeph>0x000000</codeph>、白は <codeph>0xFFFFFF</codeph> です。
	 
     </apiDesc><example conref="examples\TextField_textColor.as"> 次の ActionScript を実行すると、TextField オブジェクトが作成され、その <codeph>textColor</codeph> プロパティが赤（<codeph>0xFF0000</codeph>）に変更されます。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_textColor extends Sprite {
        public function TextField_textColor() {
            var tf:TextField = createCustomTextField(10, 10, 100, 300);
            tf.text = "This will be red text";
            tf.textColor = 0xFF0000;            
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text:TextField:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 テキストの高さです（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.textHeight, textHeight
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>テキストの高さです（ピクセル単位）。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストの高さです（ピクセル単位）。
	 
	 </apiDesc><example conref="examples\TextField_textHeight.as"> 次の例では、TextField オブジェクトを作成し、テキストを割り当てます。<codeph>trace</codeph> ステートメントにより、<codeph>textWidth</codeph> プロパティおよび <codeph>textHeight</codeph> プロパティの値が表示されます。比較するために、<codeph>width</codeph> プロパティおよび <codeph>height</codeph> プロパティも表示されます。（<codeph>textHeight</codeph> および <codeph>textWidth</codeph> に対して表示される値は、お使いのコンピューターで使用されているフォントによって異なることがあります）。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_textHeight extends Sprite {
        public function TextField_textHeight() {
            var tf:TextField = createCustomTextField(10, 10, 100, 150);
            tf.text = "Sample text";
            
            trace("textWidth: " + tf.textWidth); // textWidth: 55.75
            trace("textHeight: " + tf.textHeight); // textHeight: 13.450000000000001
            trace("width: " + tf.width); // width: 100
            trace("height: " + tf.height); // height: 150
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.border = true;
            result.background = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/textWidth"><linktext>flash.text.TextField.textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 テキストの幅です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.textWidth, textWidth
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier><apiTipTexts><apiTipText>テキストの幅です（ピクセル単位）。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストの幅です（ピクセル単位）。
	 
	 </apiDesc><example conref="examples\TextField_textHeight.as"> 次の例では、TextField オブジェクトを作成し、テキストを割り当てます。<codeph>trace</codeph> ステートメントにより、<codeph>textWidth</codeph> プロパティおよび <codeph>textHeight</codeph> プロパティの値が表示されます。比較するために、<codeph>width</codeph> プロパティおよび <codeph>height</codeph> プロパティも表示されます。（<codeph>textHeight</codeph> および <codeph>textWidth</codeph> に対して表示される値は、お使いのコンピューターで使用されているフォントによって異なることがあります）。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_textHeight extends Sprite {
        public function TextField_textHeight() {
            var tf:TextField = createCustomTextField(10, 10, 100, 150);
            tf.text = "Sample text";
            
            trace("textWidth: " + tf.textWidth); // textWidth: 55.75
            trace("textHeight: " + tf.textHeight); // textHeight: 13.450000000000001
            trace("width: " + tf.width); // width: 100
            trace("height: " + tf.height); // height: 150
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.border = true;
            result.background = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/textHeight"><linktext>flash.text.TextField.textHeight</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:thickness:get"><apiName>thickness</apiName><shortdesc>
	 このテキストフィールド内の文字エッジの太さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>This example creates two text fields and applies a <code>thickness</code> of -200 to one
	 and 200 to the other.  It assumes that you have a font
	 embedded in the Library with the linkage identifier set to <code>"Times-12"</code>.
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library</li>
	 <li>Click the Library options menu in the upper right corner of the Library</li>
	 <li>Select "New Font" from the dropdown list</li>
	 <li>Name the font "Times-12"</li>
	 <li>Select "Times New Roman" from the font dropdown list</li>
	 <li>Press the "OK" button</li>
	 <li>Right-click on the newly created font and select "Linkage..."</li>
	 <li>Check the "Export for ActionScript" box</li>
	 <li>Accept the default identifier "Times-12" by pressing the "OK" button</li>
	 </ol>
	 
	 <listing version="2.0">
	 var my_format:TextFormat = new TextFormat();
	 my_format.font = "Times-12";
	 
	 var my_text1:TextField = this.createTextField("my_text1", this.getNextHighestDepth(), 10, 10, 300, 30);
	 my_text1.text = "thickness = 200";
	 my_text1.antiAliasType = "advanced";
	 my_text1.border = true;
	 my_text1.thickness = 200;
	 my_text1.embedFonts = true;
	 my_text1.setTextFormat(my_format);
	 
	 var my_text2:TextField = this.createTextField("my_text2", this.getNextHighestDepth(), 10, 50, 300, 30);
	 my_text2.text = "thickness = -200."
	 my_text2.antiAliasType = "advanced";
	 my_text2.thickness = -200;
	 my_text2.border = true;
	 my_text2.embedFonts = true;
	 my_text2.setTextFormat(my_format);
	 </listing>
     
         </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiDefaultValue>0
     
	 </apiDefaultValue><apiTipTexts><apiTipText>文字エッジの太さです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 このテキストフィールド内の文字エッジの太さです。このプロパティは、<codeph>flash.text.AntiAliasType</codeph> が <codeph>flash.text.AntiAliasType.ADVANCED</codeph> に設定されている場合にのみ適用されます。
	 
	 <p><codeph>thickness</codeph> の範囲は -200 ～ 200 の数値です。 <codeph>thickness</codeph> をこの範囲外の値に設定しようとすると、このプロパティは範囲内の最も近い値（-200 または 200）に設定されます。</p>
	 
     </apiDesc><example conref="examples\TextField_thickness.as"> 次の例では、TextField オブジェクトの <codeph>thickness</codeph> プロパティを変更する場合の効果について示しています。フォントを埋め込んで、<codeph>antiAliasType</codeph> プロパティを <codeph>ADVANCED</codeph> に設定する必要があります。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.AntiAliasType;
    import flash.text.GridFitType;
    import flash.text.TextFormat;

    public class thicknessExample extends Sprite
    {
        public function thicknessExample()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Arial";
    format1.size=24;
    var lTxt:String = "The quick brown fox";

    var tf1:TextField=createCustomTextField(0,lTxt,format1,-200);
    var tf2:TextField=createCustomTextField(30,lTxt,format1,0);
    var tf3:TextField=createCustomTextField(60,lTxt,format1,200);
        }

        private function createCustomTextField(y:Number,fldTxt:String,format:TextFormat,fldThickness:Number):TextField 
       {
            var result:TextField = new TextField();
            result.y=y;
            result.text=fldTxt;
            result.embedFonts=true;
            result.autoSize=TextFieldAutoSize.LEFT;
            result.antiAliasType=AntiAliasType.ADVANCED;
            result.gridFitType=GridFitType.PIXEL;
            result.thickness=fldThickness;
            result.setTextFormat(format);
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link><link href="flash.text.xml#AntiAliasType"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:type:get"><apiName>type</apiName><shortdesc>
	 テキストフィールドのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.type, type
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>指定された <codeph>type</codeph> は、flash.text.TextFieldType のメンバーではありません。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>dynamic
     
	 </apiDefaultValue><apiTipTexts><apiTipText>テキストフィールドのタイプです。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドのタイプです。次の TextFieldType 定数のいずれかです。<codeph>TextFieldType.DYNAMIC</codeph> はダイナミックテキストフィールドを指定します。このフィールドをユーザーが編集することはできません。<codeph>TextFieldType.INPUT</codeph> はテキスト入力フィールドを指定します。このフィールドはユーザーが編集できます。
	 
     </apiDesc><example conref="examples\TextField_type.as"> 次の例では、2 つのテキストフィールド <codeph>tfDynamic</codeph> および <codeph>tfInput</codeph> を作成します。両方のテキストフィールドにテキストが入力されます。ただし、<codeph>tfDynamic</codeph> に対しては <codeph>type</codeph> プロパティを <codeph>TextFieldType.DYNAMIC</codeph> に設定し、<codeph>tfInput</codeph> に対しては <codeph>type</codeph> プロパティを <codeph>TextFieldType.INPUT</codeph> に設定しているため、<codeph>tfInput</codeph> のテキストは修正できますが、<codeph>tfDynamic</codeph> のテキストは表示専用です。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;

    public class TextField_type extends Sprite {
        public function TextField_type() {
            var tfDynamic:TextField = createCustomTextField(10, 10, 100, 20);
            tfDynamic.type = TextFieldType.DYNAMIC;
            tfDynamic.text = "hello";

            var tfInput:TextField = createCustomTextField(10, 45, 100, 20);
            tfInput.type = TextFieldType.INPUT;
            tfInput.text = "world";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.background = true;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextFieldType"><linktext>flash.text.TextFieldType</linktext></link></related-links></apiValue><apiValue id="flash.text:TextField:useRichTextClipboard:set"><apiName>useRichTextClipboard</apiName><shortdesc>
	 テキストと共にテキストのフォーマットをコピー＆ペーストするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 テキストと共にテキストのフォーマットをコピー＆ペーストするかどうかを指定します。<codeph>true</codeph> に設定されている場合、テキストフィールド間でコピー＆ペーストを行うと、Flash Player によってフォーマット（行揃え、ボールド、イタリックなど）もコピー＆ペーストされます。コピー＆ペースト手順のコピー元とペースト先のテキストフィールドの両方で、<codeph>useRichTextClipboard</codeph> が <codeph>true</codeph> に設定されている必要があります。デフォルト値は <codeph>false</codeph> です。
	 
	 </apiDesc><example conref="examples\TextField_useRichTextClipboard.as"> この例では、入力テキストフィールド（<codeph>tf1</codeph>）および 2 つのダイナミックテキストフィールド（<codeph>tf2</codeph> と <codeph>tf3</codeph>）を作成します。このコードは、各ダイナミックテキストフィールドに TextFormat オブジェクト（Courier ボールドフォント）を割り当てます。 <codeph>tf2</codeph> テキストフィールドの <codeph>useRichTextClipboard</codeph> プロパティは <codeph>false</codeph> に設定されます。<codeph>tf3</codeph> テキストフィールドの <codeph>useRichTextClipboard</codeph> プロパティは <codeph>true</codeph> に設定されます。<codeph>tf2</codeph> テキストフィールドからテキストをコピーし、<codeph>tf1</codeph> テキストフィールドに貼り付けた場合、貼り付けられたテキストにはフォーマットが含まれません。 <codeph>useRichTextClipboard</codeph> が <codeph>true</codeph> に設定されている <codeph>tf3</codeph> テキストフィールドからテキストをコピーし、<codeph>tf1</codeph> テキストフィールドに貼り付けた場合、貼り付けられたテキストにはフォーマットが含まれます。
<codeblock>

package
{
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFormat;

    public class useRichTextClipboard extends Sprite
    {
        public function useRichTextClipboard()
        {
    var format1:TextFormat = new TextFormat();
    format1.font="Courier";
    format1.bold=true;

    var tf1:TextField = createCustomTextField(10, 10, 200, 20);
    tf1.type=TextFieldType.INPUT;
    tf1.useRichTextClipboard=true;

    var tf2:TextField = createCustomTextField(220, 10, 200, 20);
    tf2.text="1.Text loses format";
    tf2.setTextFormat(format1);
    tf2.useRichTextClipboard=false;

    var tf3:TextField = createCustomTextField(220, 50, 200, 20);
    tf3.text="2.Text includes format";
    tf3.setTextFormat(format1);
    tf3.useRichTextClipboard=true;
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField 
       {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.background = true;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text:TextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc>
	 テキストフィールドのテキストを折り返すかどうかを示すブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, TextField.wordWrap, wordWrap
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>テキストフィールドのテキストを折り返すかどうかを示します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 テキストフィールドのテキストを折り返すかどうかを示すブール値です。<codeph>wordWrap</codeph> の値が <codeph>true</codeph> である場合は、テキストフィールドのテキストを折り返し、<codeph>false</codeph> である場合は折り返しません。デフォルト値は <codeph>false</codeph> です。
	 
	 </apiDesc><example conref="examples\TextField_wordWrap.as"> この例では、<codeph>wordWrap</codeph> プロパティを <codeph>true</codeph> に設定する場合と、<codeph>false</codeph> に設定する場合の違いを説明します。幅に対して大きすぎるコンテンツが含まれる 2 つの TextField インスタンスが作成されます。<codeph>wordWrap</codeph> プロパティは、1 番目のインスタンス（<codeph>tfWrap</codeph>）で <codeph>true</codeph> に設定され、2 番目のインスタンスでは <codeph>false</codeph> に設定されています（<codeph>tfNoWrap</codeph>）。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.TextField;

    public class TextField_wordWrap extends Sprite {
        public function TextField_wordWrap() {
            var tfWrap:TextField = createCustomTextField(10, 10, 100, 100);
            tfWrap.wordWrap = true;
            tfWrap.text = "(wordWrap = true):\nThis is very long text that will certainly extend beyond the width of this text field";

            var tfNoWrap:TextField = createCustomTextField(10, 150, 100, 100);
            tfNoWrap.wordWrap = false;
            tfNoWrap.text = "(wordWrap = false):\nThis is very long text that will certainly extend beyond the width of this text field";
        }

        private function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField {
            var result:TextField = new TextField();
            result.x = x;
            result.y = y;
            result.width = width;
            result.height = height;
            result.background = true;
            result.border = true;
            addChild(result);
            return result;
        }
    }
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextFormat"><apiName>TextFormat</apiName><shortdesc>
 TextFormat クラスは、文字フォーマット情報を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Insure the above example is correct and meets example standards
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>テキストフィールドのテキストフォーマットを作成します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextFormat クラスは、文字フォーマット情報を表します。TextFormat クラスを使用して、テキストフィールドに特定のテキストフォーマットを作成します。静止テキストフィールドおよびダイナミックテキストフィールドの両方にテキストフォーマットを適用できます。TextFormat クラスのプロパティは、デバイスフォントおよび埋めこみフォントに適用されます。ただし、埋め込みフォントの場合、ボールドとイタリックのテキストには、実際に特定のフォントが必要です。埋め込みフォントでボールドまたはイタリックのテキストを表示する場合は、そのフォントのボールド体およびイタリック体を埋め込む必要があります。
 
 <p> TextFormat オブジェクトのプロパティを設定する前に、コンストラクター <codeph>new TextFormat()</codeph> を使用して TextFormat オブジェクトを作成する必要があります。TextFormat オブジェクトを <codeph>TextField.defaultTextFormat</codeph> プロパティまたは <codeph>TextField.setTextFormat()</codeph> メソッドを使用してテキストフィールドに適用する場合、それらに定義されたプロパティのみが適用されます。<codeph>TextField.defaultTextFormat</codeph> プロパティを使用して、テキストを <codeph>TextField</codeph> に追加する前にフォーマットを適用し、<codeph>setTextFormat()</codeph> メソッドを使用して、テキストを <codeph>TextField</codeph> に追加した後でフォーマットを追加します。TextFormat プロパティに値を設定しない場合は Flash Player 固有のデフォルトフォーマットが使用されるので、TextFormat プロパティはデフォルトでは <codeph>null</codeph> です。Flash Player が各プロパティに対して使用するデフォルトのフォーマットは（プロパティの値が <codeph>null</codeph> の場合）、次のとおりです。</p>
 
 <adobetable class="innertable">
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <tgroup cols="1"><tbody><row><entry>align = "left"</entry></row><row><entry>blockIndent = 0</entry></row><row><entry>bold = false</entry></row><row><entry>bullet = false</entry></row><row><entry>color = 0x000000</entry></row><row><entry>font = "Times New Roman"（Mac OS X でのデフォルトフォントは Times）</entry></row><row><entry>indent = 0</entry></row><row><entry>italic = false</entry></row><row><entry>kerning = false</entry></row><row><entry>leading = 0</entry></row><row><entry>leftMargin = 0</entry></row><row><entry>letterSpacing = 0</entry></row><row><entry>rightMargin = 0</entry></row><row><entry>size = 12</entry></row><row><entry>tabStops = []（空の配列）</entry></row><row><entry>target = ""（空のストリング）</entry></row><row><entry>underline = false</entry></row><row><entry>url = ""（空のストリング）</entry></row></tbody></tgroup></adobetable>
 
 <p>各プロパティのデフォルトのフォーマットについては、各プロパティの説明でも説明します。</p>
 
 </apiDesc><example conref="examples\TextFormatExample.as"> 次の例は TextFieldExample クラスを作成して、テキストメッセージをデフォルト位置（x = 0, y = 0）に表示します。ここでは以下の手順を実行します。
 <ol>
  <li>タイプが TextField のプロパティ <codeph>label</codeph> が作成されます。</li>
  <li>クラスコンストラクターは、関数 <codeph>configureLabel()</codeph> を呼び出します。</li>
  <li><codeph>configureLabel()</codeph> 関数はまず、新しい TextField オブジェクトを作成し、これを <codeph>label</codeph> に割り当てます。次に、そのパラメーターを次のように設定します。
  <ul>
      <li>テキストフィールドを左揃えにします。</li>
      <li>背景の塗りを有効にします。</li>
      <li>境界線を有効にします。</li>
  </ul>
  </li>
  <li>次に、<codeph>configureLable()</codeph> は、ローカル変数 <codeph>format</codeph> を作成し、これを新しい TextFormat インスタンスに割り当て、そのパラメーターを次のように設定します。
  <ul>
      <li>Font type = Verdana</li>
      <li>Font Color = solid red</li>
      <li>Font size = 10</li>
      <li>Font underline = true</li>
  </ul>
  </li>
  <li>label の <codeph>defaultTextFormat</codeph> プロパティが <codeph>format</codeph> に設定され、<codeph>label</codeph> インスタンスが表示リストに追加されます。最初は、ステージに表示されるテキストフィールドにテキストが表示されません。白い背景の小さなボックスが表示されるだけです。</li>
  <li>最後に、コンストラクターでは、"Hello World and welcome to the show" と座標 x = 0、y = 0 に表示するように label のテキストが設定されます。これは <codeph>setLabel()</codeph> を呼び出すことによって実行されます。</li>
 </ol>
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.text.TextFormat;


    public class TextFormatExample extends Sprite {
        private var label:TextField;

        public function TextFormatExample() {
            configureLabel();
            setLabel("Hello World and welcome to the show");
        }

        public function setLabel(str:String):void {
            label.text = str;
        }

        private function configureLabel():void {
            label = new TextField();
            label.autoSize = TextFieldAutoSize.LEFT;
            label.background = true;
            label.border = true;

            var format:TextFormat = new TextFormat();
            format.font = "Verdana";
            format.color = 0xFF0000;
            format.size = 10;
            format.underline = true;

            label.defaultTextFormat = format;
            addChild(label);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/setTextFormat()"><linktext>flash.text.TextField.setTextFormat()</linktext></link><link href="flash.text.xml#TextField/defaultTextFormat"><linktext>flash.text.TextField.defaultTextFormat</linktext></link><link href="flash.text.xml#TextField/getTextFormat()"><linktext>flash.text.TextField.getTextFormat()</linktext></link></related-links><apiConstructor id="flash.text:TextFormat:TextFormat"><apiName>TextFormat</apiName><shortdesc>
 	 指定されたプロパティを使用して TextFormat オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat
 	 
 	 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>font</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>テキストのフォント名を示すストリングです。
 	 </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>サイズをピクセル単位で示す整数です。
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>このテキストフォーマットを使用するテキストの色です。3 つの 8 ビット RGB コンポーネントを示す数値（0xFF0000 は赤、0x00FF00 は緑など）です。
 	 </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>テキストがボールド体であるかどうかを示すブール値です。
 	 </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>テキストがイタリック体であるかどうかを示すブール値です。
 	 </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>テキストが下線付きであるかどうかを示すブール値です。
 	 </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>このテキストフォーマットのテキストのハイパーリンク先である URL です。<codeph>url</codeph> が空のストリングである場合、テキストにはハイパーリンクがありません。
 	 </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>ハイパーリンクを表示するターゲットウィンドウです。ターゲットウィンドウが空のストリングである場合、テキストはデフォルトのターゲットウィンドウ <codeph>_self</codeph> に表示されます。<codeph>url</codeph> パラメーターに空のストリングまたは <codeph>null</codeph> 値を指定した場合は、このプロパティを取得または設定することはできますが、プロパティには何の影響もありません。
 	 </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>段落の整列の設定を示す TextFormatAlign 値です。
 	 </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>段落の左マージンをピクセル単位で示します。
 	 </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>段落の右マージンをピクセル単位で示します。
 	 </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>左マージンから段落の先頭文字までのインデントを示す整数です。
 	 </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>行間の垂直の行送りを示す数値です。
 	 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 指定されたプロパティを使用して TextFormat オブジェクトを作成します。この TextFormat オブジェクトのプロパティを変更して、テキストフィールドのフォーマットを変更できます。
	 
 	 <p><codeph>null</codeph> 値を設定したパラメーターは未設定になります。すべてのパラメーターはオプションです。省略したパラメーターは <codeph>null</codeph> として扱われます。</p>
  	 
 	 </apiDesc><example conref="examples\TextFormat_constructorExample.as"> 次の例では、ユーザーは、別のテキストフィールドのコンテンツに適用されるリストから、様々なテキストフォーマットオプションを選択できます。 ユーザーがテキストフィールドのコンテンツをクリックすると、フォーマットがデフォルト（元の）フォーマットに戻ります。
 
 <p><codeph>formatTextField</codeph> テキストフィールドには、すべての TextField クラスのプロパティ（<codeph>kerning</codeph> を除く）が別々の行に表示されます。ユーザーが <codeph>formatTextField</codeph> テキストフィールドの行をクリックすると、<codeph>formatTextFieldClickHandler()</codeph> メソッドがトリガーされます。</p> 
 
 <p><codeph>formatTextFieldClickHandler()</codeph> メソッドが <codeph>TextField.getLineIndexAtPoint()</codeph> メソッドを呼び出して、クリックされた行のインデックスを取得し、<codeph>TextField.getLineText()</codeph> メソッドを呼び出して、行のコンテンツを取得します。switch ステートメントが行のコンテンツをチェックし、それに応じて <codeph>newformat</codeph> TextFormat オブジェクトのプロパティを設定します。次に、<codeph>setTextFormat()</codeph> メソッドが <codeph>contentTextField</codeph> テキストフィールドのテキストフォーマットを新しいフォーマットに設定します。様々な <codeph>formatTextField</codeph> 行をクリックすることで、ユーザーは、異なるフォーマットを <codeph>contentTextField</codeph> テキストフィールドに適用することができます。 （タブ設定は、行のタブごとに別個のタブストップを定義する配列です。）<codeph>url</codeph> または <codeph>target</codeph> 行を選択した場合、ユーザーは <codeph>contentTextField</codeph> テキストフィールドをクリックしてリンクをアクティブにし、ターゲット URL（Flex のホームページ）のコンテンツを表示する必要があります。 <codeph>target</codeph> プロパティのデフォルト値は "_self" です。この場合、ユーザーが <codeph>url</codeph> 行を選択すると、コンテンツが現在のウィンドウに表示されます。 <codeph>target</codeph> プロパティが機能するには、<codeph>url</codeph> プロパティに URL が設定済みになっている必要があります。</p>
 
 <p>ユーザーが <codeph>contentTextField</codeph> テキストフィールドをクリックすると、<codeph>contentTextFieldClickHandler()</codeph> メソッドがトリガーされ、フィールドのフォーマットと <codeph>newFormat</codeph> TextFormat オブジェクトがテキストフィールドのデフォルト（元の）フォーマットに設定されます。これにより、ユーザーが行ったすべてのフォーマット変更がクリアされます。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.text.TextFormatAlign;
    
    public class TextFormat_constructorExample extends Sprite {
        private var contentTextField:TextField = new TextField();
        private var formatTextField:TextField = new TextField();
        private var newFormat:TextFormat = new TextFormat();
        
        public function TextFormat_constructorExample() {
            contentTextField.x = 10;
            contentTextField.y = 10;
            contentTextField.background = true;
            contentTextField.border = true;
            contentTextField.multiline = true;
            contentTextField.wordWrap = true;
            contentTextField.selectable = false;
            contentTextField.width = 250;
            contentTextField.height = 120; 
  
            contentTextField.htmlText = "&lt;p>The TextFormat class represents character formatting "
                + "information. Use the TextFormat class to create specific text formatting "
                + "for text fields." + 
                " &lt;/p>&lt;br>" + "\tTab One" + "\tTab Two&lt;br>";
              
            formatTextField.x = 10;
            formatTextField.y = 140;
            formatTextField.background = true;
            formatTextField.border = true;
            formatTextField.autoSize = TextFieldAutoSize.LEFT;
            
            formatTextField.text = "align: right\n" + "blockIndent: 10 pixels\n" + "bold:\n" + "bullet:\n" + "color: red\n"
                                + "font: Arial\n" + "indent: 20 pixels\n" + "italic:\n" + "leading: 5 spaces\n" 
                                + "leftMargin: 20 pixels\n" + "letterSpacing: 4 pixels\n" + "rightMargin: 20 pixels\n" 
                                + "size: 16 point\n" + "target: new window\n" + "tabStops: 50 and 150 pixel\n" 
                                + "underline:\n" + "url: Adobe Flex page\n";

            formatTextField.addEventListener(MouseEvent.CLICK, formatTextFieldClickHandler);
            
            contentTextField.addEventListener(MouseEvent.CLICK, contentTextFieldClickHandler);
            
            this.addChild(contentTextField);
            this.addChild(formatTextField);
        }

        private function formatTextFieldClickHandler(e:MouseEvent):void {
                var value:String= "";
                var i:uint = 0;
                var index:int = formatTextField.getLineIndexAtPoint(e.localX, e.localY);
                var line:String = formatTextField.getLineText(index);;

                line = line.substr(0, (line.indexOf(":")));

                switch(line) {
                    case "align":
                        newFormat.align = TextFormatAlign.RIGHT;
                        break;
                    case "blockIndent":
                        newFormat.blockIndent = 10;
                        break;
                    case "bold":
                        newFormat.bold = true;
                        break;
                    case "bullet":
                        newFormat.bullet = true;
                        break;
                    case "color":
                        newFormat.color = 0xFF0000;        
                        break;
                    case "font":
                        newFormat.font = "Arial";
                        break;
                    case "indent":
                        newFormat.indent = 20;
                        break;
                    case "italic":
                        newFormat.italic = true;
                        break;
                    case "leading":
                        newFormat.leading = 5;
                        break;
                    case "leftMargin":
                        newFormat.leftMargin = 20;
                        break;
                    case "letterSpacing":
                        newFormat.letterSpacing = 4;
                        break;
                    case "rightMargin":
                        newFormat.rightMargin = 20;
                        break;
                    case "size":
                        newFormat.size = 16;
                        break;
                    case "tabStops":                
                        newFormat.tabStops = [50, 150];
                        break;
                    case "target":
                        newFormat.url = "http://www.adobe.com/products/flex/";    
                        newFormat.target = "_blank";
                        break;    
                    case "underline":
                        newFormat.underline = true;
                        break;
                    case "url":
                        newFormat.url = "http://www.adobe.com/products/flex/";    
                        break;
                }    

                contentTextField.setTextFormat(newFormat);
        }

        private function contentTextFieldClickHandler(e:MouseEvent):void {
            contentTextField.setTextFormat(contentTextField.defaultTextFormat);
            newFormat = contentTextField.defaultTextFormat;
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.text:TextFormat:align:get"><apiName>align</apiName><shortdesc>
	 段落の整列の設定を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.align, align
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>指定された <codeph>align</codeph> は、flash.text.TextFormatAlign のメンバーではありません。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>TextFormatAlign.LEFT
	 
	 </apiDefaultValue></apiValueDef><apiDesc>
	 段落の整列の設定を示します。指定できる値は TextFormatAlign 定数です。
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextFormatAlign"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormat:blockIndent:get"><apiName>blockIndent</apiName><shortdesc>
	 ブロックのインデントをピクセル単位で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.blockIndent, blockIndent
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 ブロックのインデントをピクセル単位で示します。ブロックのインデントは、テキストのブロック全体、つまりテキストのすべての行に適用されます。一方、通常のインデント（<codeph>TextFormat.indent</codeph>）は各段落の先頭行にのみ影響します。このプロパティが <codeph>null</codeph> である場合、TextFormat オブジェクトはブロックのインデントを指定しません。ブロックのインデントは 0 です。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
 	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:bold:get"><apiName>bold</apiName><shortdesc>
	 テキストをボールドにするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.bold, bold
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 テキストをボールドにするかどうかを指定します。デフォルト値は <codeph>null</codeph> です。この場合、ボールド体は使用されません。値が <codeph>true</codeph> の場合は、テキストがボールド体になります。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:bullet:get"><apiName>bullet</apiName><shortdesc>
	 テキストが箇条書きリストの一部かどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.bullet, bullet
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 テキストが箇条書きリストの一部かどうかを示します。箇条書きリストでは、テキストの各段落がインデントされます。各段落の先頭行の左に箇条書きシンボルが表示されます。デフォルト値は <codeph>null</codeph> です。この場合、箇条書きリストは使用されません。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:color:get"><apiName>color</apiName><shortdesc>
	 テキストの色を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.color, color
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 テキストの色を示します。3 つの 8 ビット RGB コンポーネントを示す数値（0xFF0000 は赤、0x00FF00 は緑など）です。デフォルト値は <codeph>null</codeph> で、Flash Player では黒 (0x000000) が使用されます。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:font:get"><apiName>font</apiName><shortdesc>
	 このテキストフォーマットでのテキストフォント名を示すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.font, font
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 このテキストフォーマットでのテキストフォント名を示すストリングです。デフォルト値は <codeph>null</codeph> で、Flash Player ではテキストに Times New Roman フォントが使用されます。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:indent:get"><apiName>indent</apiName><shortdesc>
	 左マージンから段落の先頭文字までのインデントを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.indent, indent
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 左マージンから段落の先頭文字までのインデントを示します。デフォルト値は <codeph>null</codeph> で、インデントは使用されないことを示します。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/blockIndent"><linktext>flash.text.TextFormat.blockIndent</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormat:italic:get"><apiName>italic</apiName><shortdesc>
	 このテキストフォーマットのテキストをイタリックにするかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.italic, italic
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 このテキストフォーマットのテキストをイタリックにするかどうかを示します。デフォルト値は <codeph>null</codeph> です。この場合、イタリックは使用されません。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 カーニングが有効（true）か無効（false）かを示すブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><internal>Add better description and example.
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 カーニングが有効（<codeph>true</codeph>) か無効 (<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間でピクセルを調整します。大きなフォントの見出しを使用する場合など、必要な場合にのみ使用する必要があります。カーニングは、埋め込みフォントに対してのみサポートされています。
	 
	 <p>Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。</p>
	 
	 <p>デフォルト値 <codeph>null</codeph> はカーニングを無効にします。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:leading:get"><apiName>leading</apiName><shortdesc>
	 行間の垂直の行送りを示す整数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.leading, leading
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 行間の垂直の<i>行送り</i>を示す整数です。デフォルト値は <codeph>null</codeph> で、使用される行送りは 0 であることを示します。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:leftMargin:get"><apiName>leftMargin</apiName><shortdesc>
	 段落の左マージンをピクセル単位で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.leftMargin, leftMargin
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 段落の左マージンをピクセル単位で示します。デフォルト値は <codeph>null</codeph> です。この場合、左マージンは 0 ピクセルです。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     すべての文字の間に均等に配分されるスペースの量を表す数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><internal>Add better description and example.
     </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
     すべての文字の間に均等に配分されるスペースの量を表す数値です。この値は、各文字の後の送りに追加されるピクセル数を示します。デフォルト値は <codeph>null</codeph> です。この場合、0 ピクセルの文字間隔が使用されます。<codeph>1.75</codeph> などの小数点を含む数値を使用することができます。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:rightMargin:get"><apiName>rightMargin</apiName><shortdesc>
	 段落の右マージンをピクセル単位で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.rightMargin, rightMargin
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 段落の右マージンをピクセル単位で示します。デフォルト値は <codeph>null</codeph> です。この場合、右マージンは 0 ピクセルです。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:size:get"><apiName>size</apiName><shortdesc>
	 このテキストフォーマットのテキストのサイズ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.size, size
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 このテキストフォーマットのテキストのサイズ（ピクセル単位）です。デフォルト値は <codeph>null</codeph> です。この場合、サイズ 12 が使用されます。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 カスタムタブストップを負以外の整数の配列として指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.tabStops, tabStops
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 カスタムタブストップを負以外の整数の配列として指定します。各タブストップはピクセル単位で指定します。カスタムタブストップを指定しないと（<codeph>null</codeph>）、タブストップはデフォルトの 4（平均文字幅）になります。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:target:get"><apiName>target</apiName><shortdesc>
	 ハイパーリンクを表示するターゲットウィンドウを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.target, target
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 ハイパーリンクを表示するターゲットウィンドウを示します。ターゲットウィンドウが空のストリングである場合、テキストはデフォルトのターゲットウィンドウ <codeph>_self</codeph> に表示されます。カスタム名を選択することも、次の 4 つの名前のいずれかを選択することもできます。<codeph>_self</codeph> は現在のウィンドウ内の現在のフレームを指定します。<codeph>_blank</codeph> は新しいウィンドウを指定します。<codeph>_parent</codeph> は現在のフレームの親を指定します。<codeph>_top</codeph> は現在のウィンドウ内のトップレベルのフレームを指定します。<codeph>TextFormat.url</codeph> プロパティが空のストリングまたは <codeph>null</codeph> の場合は、このプロパティを取得および設定することはできますが、プロパティは何の影響も及ぼしません。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/url"><linktext>flash.text.TextFormat.url</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormat:underline:get"><apiName>underline</apiName><shortdesc>
	 このテキストフォーマットを使用するテキストにアンダーラインを表示する（true）か、表示しない（false）かを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.underline, underline
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 このテキストフォーマットを使用するテキストにアンダーラインを表示する（<codeph>true</codeph>）か、表示しない（<codeph>false</codeph>）かを示します。これは、<codeph>&lt;U></codeph> タグによって設定されるアンダーラインと似ていますが、このタグの場合はディセンダが正しくスキップされないので、本物のアンダーラインではありません。デフォルト値は <codeph>null</codeph> です。この場合、アンダーラインは使用されません。
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail></apiValue><apiValue id="flash.text:TextFormat:url:get"><apiName>url</apiName><shortdesc>
	 このテキストフォーマットのテキストの対象 URL を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextFormat, TextFormat.url, url
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 このテキストフォーマットのテキストの対象 URL を示します。<codeph>url</codeph> プロパティが空のストリングである場合、テキストにはハイパーリンクがありません。デフォルト値は <codeph>null</codeph> です。この場合、テキストにはハイパーリンクがありません。
	 <p><b>注意：</b>ハイパーリンクを機能させるには、テキストフォーマットが割り当てられたテキストを <codeph>htmlText</codeph> プロパティで設定する必要があります。</p>
	 
	 </apiDesc><example>このプロパティの使用方法の詳細については、<xref href="TextFormat.html#TextFormat()">TextFormat() コンストラクター</xref>の例を参照してください。 
	 </example></apiValueDetail><related-links><link href="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextDisplayMode"><apiName>TextDisplayMode</apiName><shortdesc>
 TextDisplayMode クラスには、高度アンチエイリアスシステムのサブピクセルアンチエイリアスを制御する値が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextDisplayMode クラスには、高度アンチエイリアスシステムのサブピクセルアンチエイリアスを制御する値が含まれます。 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer/displayMode"><linktext>flash.text.TextRenderer.displayMode</linktext></link></related-links><apiValue id="flash.text:TextDisplayMode:CRT"><apiName>CRT</apiName><shortdesc>
	 強制的にグレースケールアンチエイリアスを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>crt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 強制的にグレースケールアンチエイリアスを表示します。この設定によってテキストの色付けは回避されますが、ぼやけて表示されると感じるユーザーもいます。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextDisplayMode:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	 Flash Player で LCD モードまたは CRT モードを選択できるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Flash Player で LCD モードまたは CRT モードを選択できるようにします。	
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextDisplayMode:LCD"><apiName>LCD</apiName><shortdesc> 
	 強制的に LCD サブピクセルアンチエイリアスを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lcd</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	 強制的に LCD サブピクセルアンチエイリアスを使用します。フォントおよびハードウェアによっては、この設定によってテキストの解像度が向上したり、テキストに色が付いたりする場合があります。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:AntiAliasType"><apiName>AntiAliasType</apiName><shortdesc>
AntiAliasType クラスは、flash.text.TextField クラスのアンチエイリアスの値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
AntiAliasType クラスは、flash.text.TextField クラスのアンチエイリアスの値を提供します。
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiValue id="flash.text:AntiAliasType:ADVANCED"><apiName>ADVANCED</apiName><shortdesc>
	アンチエイリアスを、高度なアンチエイリアスに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>advanced</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	アンチエイリアスを、高度なアンチエイリアスに設定します。高度なアンチエイリアスに設定すると、小さいフォントを高品質でレンダリングできます。これは、小さいフォントのテキストが多いアプリケーションでの使用に最も適しています。48 ポイントより大きいフォントに対して高度なアンチエイリアスを使用することはお勧めしません。この定数は、TextField クラスの <codeph>antiAliasType</codeph> プロパティで使用されます。シンタックス <codeph>AntiAliasType.ADVANCED</codeph> を使用します。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link></related-links></apiValue><apiValue id="flash.text:AntiAliasType:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	アンチエイリアスを、Flash Player 7 以前で使用されているアンチエイリアスに設定します。</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	アンチエイリアスを、Flash Player 7 以前で使用されているアンチエイリアスに設定します。この設定は、テキストが少ないアプリケーションにお勧めします。この定数は、TextField クラスの <codeph>antiAliasType</codeph> プロパティで使用されます。シンタックス <codeph>AntiAliasType.NORMAL</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:FontType"><apiName>FontType</apiName><shortdesc>
	 FontType クラスには、Font クラスの fontType プロパティの列挙された定数 "embedded" および "device" が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 FontType クラスには、列挙された定数 <codeph>"embedded"</codeph> および <codeph>"device"</codeph> が含まれます。いずれも Font クラスの <codeph>fontType</codeph> プロパティ用です。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#Font/fontType"><linktext>flash.text.Font.fontType</linktext></link></related-links><apiValue id="flash.text:FontType:DEVICE"><apiName>DEVICE</apiName><shortdesc>
		 これがデバイスフォントであることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 これがデバイスフォントであることを示します。システムにインストールされているフォントを使用して SWF ファイルのフォントがレンダリングされます。
		 
		 <p>フォントデータがファイルに含まれないので、デバイスフォントを使用するとムービーサイズが小さくなります。アンチエイリアス処理されたテキストは小さなサイズではぼやける場合があるため、デバイスフォントはテキストを小さなポイントサイズで表示するのに適しています。デバイスフォントは、スクロールテキストなどの大きなテキストブロックにも適しています。</p>
		 
		 <p>デバイスフォントを使用するテキストフィールドは、システムにインストールされているフォントを使用してレンダリングされるので、異なるシステムおよびプラットフォームでは同じように表示されない場合があります。 同じ理由から、デバイスフォントはアンチエイリアス処理されず、大きなポイントサイズではぎざぎざが表示される場合があります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/embedFonts"><linktext>TextField.embedFonts</linktext></link><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links></apiValue><apiValue id="flash.text:FontType:EMBEDDED"><apiName>EMBEDDED</apiName><shortdesc>
		 これが埋め込みフォントであることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embedded</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 これが埋め込みフォントであることを示します。フォントのアウトラインが、パブリッシュされた SWF ファイルに埋め込まれます。
		 
		 <p>埋め込みフォントを使用するテキストフィールドは、常に選択されたフォントで表示されます。そのフォントが再生システムにインストールされているかどうかは関係ありません。また、埋め込みフォントを使用するテキストフィールドは常にアンチエイリアス処理（スムージング）されます。 <codeph>TextField.antiAliasType property</codeph> を使用して、アンチエイリアス処理の量を選択できます。</p>
		 
		 <p>埋め込みフォントの 1 つの欠点は、SWF ファイルのサイズが大きくなることです。</p>
		 
		 <p><codeph>EMBEDDED</codeph> タイプのフォントは TextField でのみ使用できます。flash.text.engine クラスでこのタイプのフォントの使用が指定された場合は、デバイスフォントにフォールバックされます。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/embedFonts"><linktext>TextField.embedFonts</linktext></link></related-links></apiValue><apiValue id="flash.text:FontType:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc>
		 これが埋め込み CFF フォントであることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 これが埋め込み CFF フォントであることを示します。フォントのアウトラインおよび OpenType テーブルのサブセットが、パブリッシュされた SWF ファイルに埋め込まれます。
		 
		 <p>埋め込み CFF フォントを使用するテキストは、常に選択されたフォントで表示されます。そのフォントが再生システムにインストールされているかどうかは関係ありません。また、埋め込みフォントを使用するテキストフィールドは、Flash Player によって常にアンチエイリアス処理（スムージング）されます。<codeph>flash.text.engine.FontDescription.renderingMode</codeph> および <codeph>flash.text.engine.FontDescription.cffHinting</codeph> プロパティを使用することにより、レンダリングモードおよび埋め込み CFF フォントのヒンティングを選択できます。</p>
		 
		 <p>埋め込み CFF フォントの 1 つの欠点は、SWF ファイルのサイズが大きくなることです。ただし、通常、埋め込み CFF フォントのサイズは通常のフォントよりも 20% ～ 30% 小さくなります。</p>
		 
		 <p><codeph>EMBEDDED_CFF</codeph> タイプのフォントは flash.text.engine クラスでのみ使用できます。このタイプのフォントの使用が指定された TextField は表示されません。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextFormatAlign"><apiName>TextFormatAlign</apiName><shortdesc>
 TextFormatAlign クラスは、TextFormat クラスのテキストの整列の値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextFormatAlign クラスは、TextFormat クラスのテキストの整列の値を提供します。
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link></related-links><apiValue id="flash.text:TextFormatAlign:CENTER"><apiName>CENTER</apiName><shortdesc>
	 定数です。テキストをテキストフィールドの中央に配置します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 定数です。テキストをテキストフィールドの中央に配置します。シンタックス <codeph>TextFormatAlign.CENTER</codeph> を使用します。
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormatAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc>
	 定数です。テキストをテキストフィールド内で均等割り付けします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 定数です。テキストをテキストフィールド内で均等割り付けします。シンタックス <codeph>TextFormatAlign.JUSTIFY</codeph> を使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormatAlign:LEFT"><apiName>LEFT</apiName><shortdesc>
	 定数です。テキストをテキストフィールド内で左に整列します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 定数です。テキストをテキストフィールド内で左に整列します。シンタックス <codeph>TextFormatAlign.LEFT</codeph> を使用します。
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue><apiValue id="flash.text:TextFormatAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	 定数です。テキストをテキストフィールド内で右に整列します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 定数です。テキストをテキストフィールド内で右に整列します。シンタックス <codeph>TextFormatAlign.RIGHT</codeph> を使用します。
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextFormat/align"><linktext>flash.text.TextFormat.align</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:Font"><apiName>Font</apiName><shortdesc>
 Font クラスは、SWF ファイルの埋め込みフォントを管理するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Font クラスは、SWF ファイルの埋め込みフォントを管理するために使用されます。埋め込みフォントは、Font クラスのサブクラスとして表されます。Font クラスは現在、埋め込みフォントに関する情報を調べる場合にのみ有効です。このクラスを使用してフォントを変更することはできません。Font クラスを使用して外部フォントをロードしたり、それ自体で Font オブジェクトのインスタンスを作成することはできません。Font クラスは、抽象基本クラスとして使用します。
 
 </apiDesc></apiClassifierDetail><apiOperation id="flash.text:Font:enumerateFonts"><apiName>enumerateFonts</apiName><shortdesc> 
    現在使用可能な埋め込みフォントのリストを提供するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>使用可能なフォントのリストを表す Font オブジェクトの配列です。
	</apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>enumerateDeviceFonts</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>現在使用可能な埋め込みフォントのみにリストを制限するかどうかを指定します。<codeph>true</codeph> に設定されている場合、デバイスフォントと埋め込みフォントの両方を含む、すべてのフォントのリストが返されます。<codeph>false</codeph> に設定されている場合、埋め込みフォントのリストのみが返されます。
        </apiDesc></apiParam></apiOperationDef><apiDesc> 
    現在使用可能な埋め込みフォントのリストを提供するかどうかを指定します。
        </apiDesc><example conref="examples\Font.enumerateFonts.1.as"> この例ではまず、静的メソッド <codeph>Font.enumerateFonts()</codeph> を呼び出し、すべてのデバイスフォントおよび埋め込みフォントのリストを取得します。次に、<codeph>fontName</codeph> プロパティによって、結果の Font オブジェクトの配列をソートします。
 
 <p>次に、<codeph>Font.enumerateFonts()</codeph> メソッドの呼び出し方法を示します。このとき、<codeph>enumerateDeviceFonts</codeph> パラメーターは false に設定します。結果の配列には、埋め込みフォントオブジェクトのみが含まれます。埋め込みフォントが含まれないアプリケーション内でこのコードを実行すると、<codeph>embeddedFonts</codeph> 配列は空になります。</p>
<codeblock>
 
import flash.text.Font;

var allFonts:Array = Font.enumerateFonts(true);
allFonts.sortOn("fontName", Array.CASEINSENSITIVE);

var embeddedFonts:Array = Font.enumerateFonts(false);
embeddedFonts.sortOn("fontName", Array.CASEINSENSITIVE);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:Font:hasGlyphs"><apiName>hasGlyphs</apiName><shortdesc> 
        現在割り当てられているフォントを使用して指定されたストリングを表示できるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このフォントを使用して、指定されたストリングを完全に表示できる場合は <codeph>true</codeph> になります。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>現在のフォントを検査するストリングです。
        </apiDesc></apiParam></apiOperationDef><apiDesc> 
        現在割り当てられているフォントを使用して指定されたストリングを表示できるかどうかを指定します。
        </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text:Font:registerFont"><apiName>registerFont</apiName><shortdesc> 
	フォントクラスをグローバルフォントリストに登録します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>font</apiItemName><apiOperationClassifier>Class</apiOperationClassifier><apiDesc>グローバルフォントリストに追加するクラスです。
	</apiDesc></apiParam></apiOperationDef><apiDesc> 
	フォントクラスをグローバルフォントリストに登録します。
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text:Font:fontName:get"><apiName>fontName</apiName><shortdesc> 
	埋め込みフォントの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	埋め込みフォントの名前です。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:Font:fontStyle:get"><apiName>fontStyle</apiName><shortdesc> 
	フォントのスタイルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	フォントのスタイルです。この値は、FontStyle クラスに定義されている任意の値です。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#FontStyle"><linktext>flash.text.FontStyle</linktext></link></related-links></apiValue><apiValue id="flash.text:Font:fontType:get"><apiName>fontType</apiName><shortdesc> 
	フォントのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	フォントのタイプです。この値は、FontType クラスに定義されている任意の定数です。
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#FontType"><linktext>flash.text.FontType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextRenderer"><apiName>TextRenderer</apiName><shortdesc>
 TextRenderer クラスには、埋め込みフォントの高度なアンチエイリアス機能が用意されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>-- Class sample changed due to bug 193833
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>埋め込みフォントのアンチエイリアスを制御します。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextRenderer クラスには、埋め込みフォントの高度なアンチエイリアス機能が用意されています。高度なアンチエイリアスに設定すると、小さいフォントを非常に高品質でレンダリングできます。高度なアンチエイリアスは、小さいフォントのテキストが多いアプリケーションで使用します。非常に大きいフォント（48 ポイント以上）に対して高度なアンチエイリアスを使用することはお勧めしません。高度なアンチエイリアスは、Flash Player 8 以降でのみ使用できます。
 
 <p>テキストフィールドで高度なアンチエイリアスを設定するには、TextField インスタンスの <codeph>antiAliasType</codeph> プロパティを設定します。</p>
 
 <p>高度なアンチエイリアスには、線の太さとエッジのシャープネスの両方を連続的に変調する CSM (Continuous Stroke Modulation) 機能が用意されています。高度な機能として、<codeph>setAdvancedAntiAliasingTable()</codeph> メソッドを使用すると、特定の書体やフォントサイズの設定を定義できます。</p>
 
 </apiDesc><example conref="examples\TextRendererExample2.as"> 次の例では、TextRendererExample クラスを作成して、大小のフォントサイズについて高度なアンチエイリアス設定の効果を示します。この例をテストには、前もってフォントを埋め込んでおく必要があります。Flex を使用する場合には、次の方法でフォントを埋め込みます。
 <ol>
    <li>georgia.ttf という名前の Georgia フォントをこの AS ファイルと同じディレクトリに置きます。</li>
    <li>クラス定義のすぐ下に次の各行を追加します。</li>
    <li><codeph>[Embed(source="georgia.ttf", fontFamily="Georgia")]</codeph></li>
    <li><codeph>private var embeddedFont:String;</codeph></li>
 </ol>
 Flash を使用する場合には、次の方法でフォントを埋め込みます。
 <ol>
     <li>ステージ上にテキストフィールドを配置してそれを選択します。</li>
     <li>プロパティトインスペクターでそのテキストのフィールドのフォントを Georgia に設定します。</li>
     <li>次に、プロパティインスペクターで「埋め込み」を押して「すべて」を選択します。</li>
 </ol>
 <p> <b>注意：</b>
  <ul>
     <li>「ローカルでの再生に関するセキュリティ」を「ローカルファイルにのみアクセスする」に設定して SWF ファイルをコンパイルする必要があります。</li>
    </ul>
 </p>
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.events.*;
    import flash.text.*;
    
    public class TextRendererExample2 extends Sprite {

        private var gutter:int = 10;

        public function TextRendererExample2() {
            createTextField(8,AntiAliasType.NORMAL);
            createTextField(8,AntiAliasType.ADVANCED);
            createTextField(24,AntiAliasType.NORMAL);
            createTextField(24,AntiAliasType.ADVANCED);
        }
            
        private function createTextField(fontSize:Number,antiAliasType:String):TextField {
            var tf:TextField = new TextField();
            tf.embedFonts = true;
            tf.autoSize = TextFieldAutoSize.LEFT;
            tf.antiAliasType = antiAliasType;
            tf.defaultTextFormat = getTextFormat(fontSize);
            tf.selectable = false;
            tf.mouseEnabled = true;
            tf.text = "The quick brown fox jumped over the lazy dog.";
            if(numChildren > 0) {
                var sibling:DisplayObject = getChildAt(numChildren - 1);
                tf.y = sibling.y + sibling.height + gutter;
            }
            addChild(tf);
            return tf;
        }
        
        private function getTextFormat(fontSize:Number):TextFormat {
            var format:TextFormat = new TextFormat();
            format.size = fontSize;
            format.font = "Georgia";
            return format;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/antiAliasType"><linktext>flash.text.TextField.antiAliasType</linktext></link></related-links><apiOperation id="flash.text:TextRenderer:setAdvancedAntiAliasingTable"><apiName>setAdvancedAntiAliasingTable</apiName><shortdesc>
	 フォントのカスタム CSM ルックアップテーブルを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates two anti-alias entries and two text fields to 
	 illustrate them. For this example to work, the SWF file must have a shared font embedded with a linkage identifier of <code>
	 "myArial"</code>. 
	 To embed the font, follow these steps:
	 <ol>
	 <li>Open your Library.</li>
	 <li>Click the Library options menu in the upper-right corner of the Library.</li>
	 <li>Select New Font from the pop-up menu.</li>
	 <li>Name the font <b>myArial</b>.</li>
	 <li>Select Arial from the font pop-up menu.</li>
	 <li>Click OK.</li>
	 <li>Right-click the newly created font, and select Linkage.</li>
	 <li>Select the Export for ActionScript check box.</li>
	 <li>Click OK to accept the default identifier, myArial.</li>
	 </ol>
	 
	 <listing version="2.0">
	 import flash.text.TextRenderer;
	 
	 var antiAliasEntry_1 = {fontSize:24, insideCutoff:1.61, outsideCutoff:-3.43};
	 var antiAliasEntry_2 = {fontSize:48, insideCutoff:0.8, outsideCutoff:-0.8};
	 var arialTable:Array = new Array(antiAliasEntry_1, antiAliasEntry_2);
	 
	 var lbl_1:TextField = createLabel(0, 0, 300, 100, 24);
	 var lbl_2:TextField = createLabel(0, 100, 300, 100, 48);
	 
	 TextRenderer.setAdvancedAntiAliasingTable("Arial", "none", "dark", arialTable);
	 
	 function createLabel(x:Number, y:Number, width:Number, height:Number, fontSize:Number):TextField {
	 var depth:Number = this.getNextHighestDepth();
	 
	 var tmpTxt = this.createTextField("txt_" + depth, depth, x, y, width, height);
	 tmpTxt.antiAliasType = "advanced";
	 tmpTxt.gridFitType = "pixel";
	 tmpTxt.border = true;
	 tmpTxt.text = "Hello World";
	 tmpTxt.embedFonts = true;
	 tmpTxt.setTextFormat(getTextFormat(fontSize));
	 return tmpTxt;
	 }
	 
	 function getTextFormat(fontSize:Number):TextFormat {
	 	var tf:TextFormat = new TextFormat();
	 	tf.align = "center";
	 	tf.size = fontSize;
	 	tf.font = "myArial";
	 	return tf;
	 }
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>設定を適用するフォントの名前です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fontStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>flash.text.FontStyle クラスのいずれかの値を使用して示されるフォントスタイルです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>colorType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>この値によって、線が濃いか薄いかが決定されます。flash.text.TextColorType クラスのいずれかの値を使用します。 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>advancedAntiAliasingTable</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>指定されたフォントの CSMSettings オブジェクトの配列です。各オブジェクトには、次のプロパティがあります。
	 
	 <ul>
	 
	   <li><codeph>fontSize</codeph></li>
	   <li><codeph>insideCutOff</codeph></li>
	   <li><codeph>outsideCutOff</codeph></li>
	 
	 </ul>
	 
	 <p><codeph>advancedAntiAliasingTable</codeph> 配列には、異なるフォントサイズの CSM 設定を指定する複数の項目を含めることができます。</p>
	 
	 <p><codeph>fontSize</codeph> は、設定が適用されるサイズです（ピクセル単位）。</p>
	 
	 <p>高度なアンチエイリアスは、ADF（Adaptively sampled Distance Fields）を使用して、字形を決定するアウトラインを表します。Flash Player では、外部カットオフ値（<codeph>outsideCutOff</codeph>：この値未満だと密度が 0 に設定される）と、その内部カットオフ値（<codeph>insideCutOff</codeph>：この値を超過すると密度が最大密度値（255 など）に設定される）が使用されます。これら 2 つのカットオフ値間でマッピング関数を実行すると、外部カットオフの 0 から内部カットオフの最大密度までの直線になります。</p>
	 
	 <p>外部カットオフ値と内部カットオフ値を調整すると、線の太さとエッジのシャープネスに影響します。これら 2 つのパラメーター間の間隔は、標準のアンチエイリアスメソッドのフィルター半径の 2 倍に相当します。間隔が狭ければ、エッジがシャープになり、間隔が広ければ、エッジがぼやけて、フィルターの適用度が高い状態になります。間隔が 0 の場合、結果の密度イメージは 2 層のビットマップとなります。間隔が非常に広ければ、結果の密度イメージのエッジは水彩画のようになります。</p>
	 
	 <p>通常、ユーザーは、小さなポイントサイズではシャープでコントラストのはっきりしたエッジを、アニメーションテキストや大きなポイントサイズではぼやけたエッジを好みます。 </p>
	 
	 <p>通常、外部カットオフは負の値、内部カットオフは正の値で、中間点は 0 の近辺になります。これらのパラメーターを調整して、中間点を負の無限大に向かってシフトすると、線の太さが増します。中間点を正の無限大に向かってシフトすると、線の太さは減ります。外部カットオフ値が常に内部カットオフ値以下になるようにする必要があります。</p>
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 フォントのカスタム CSM ルックアップテーブルを設定します。Flash Player は、フォントに最適な CSM を検出しようとします。Flash Player で提供される CSM が適切ではない場合、<codeph>setAdvancedAntiAliasingTable()</codeph> メソッドを使用して独自の CSM をカスタマイズできます。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#FontStyle"><linktext>flash.text.FontStyle</linktext></link><link href="flash.text.xml#TextColorType"><linktext>flash.text.TextColorType</linktext></link><link href="flash.text.xml#CSMSettings"><linktext>CSMSettings</linktext></link></related-links></apiOperation><apiValue id="flash.text:TextRenderer:displayMode:get"><apiName>displayMode</apiName><shortdesc> 
	 高度なアンチエイリアスの適用されたテキストの表示を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiDefaultValue>"default"
	 </apiDefaultValue></apiValueDef><apiDesc> 
	 高度なアンチエイリアスの適用されたテキストの表示を制御します。テキストの表示品質は主観的です。Flash Player がさまざまな条件に最適な設定を使用しようとしても、デザイナーは別の外観や感触をテキストに対して選択する場合があります。また、<codeph>displayMode</codeph> を使用すると、デザイナーは Flash Player のサブピクセル選択をオーバーライドし、ユーザーのハードウェアに依存しない表示の一貫性を実現できます。TextDisplayMode クラスの値を使用して、このプロパティを設定します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextDisplayMode"><linktext>TextDisplayMode クラス</linktext></link></related-links></apiValue><apiValue id="flash.text:TextRenderer:maxLevel:get"><apiName>maxLevel</apiName><shortdesc>
	 高度なアンチエイリアス用の ADF 品質レベルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example specifies the <code>maxLevel</code> value for the entire
	 SWF file, and then displays a text field with the value set. For the 
	 text in this example to display correctly, there must be a font symbol available with
	 a linkage identifier of <code>"CustomFont"</code>. 
	 <listing version="2.0">
	 import flash.text.TextRenderer;
	 TextRenderer.maxLevel = 3;
	 
	 var txtFormat:TextFormat = new TextFormat();
	 txtFormat.font = "CustomFont";
	 txtFormat.size = 64;
	 
	 var label:TextField = this.createTextField("label", this.getNextHighestDepth(), 10, 10, 500, 100);
	 label.setNewTextFormat(txtFormat);
	 label.text = "Hello World";
	 label.embedFonts = true;
	 trace("TextRenderer.maxLevel: " + TextRenderer.maxLevel);
	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiDefaultValue>4
	 </apiDefaultValue></apiValueDef><apiDesc>
	 高度なアンチエイリアス用の ADF 品質レベルです。有効な値は 3、4、7 のみです。 
	 
	 <p>高度なアンチエイリアスは、ADF を使用して、字形を決定するアウトラインを表します。品質が高くなるほど、ADF 構造用により多くのキャッシュ領域が必要となります。値 <codeph>3</codeph> を指定すると、必要なメモリ量は最小で、品質は最低となります。フォントが大きければ、より多くのキャッシュ領域が必要となります。フォントサイズが 64 ピクセルの場合、品質レベルは <codeph>3</codeph> から <codeph>4</codeph>、または <codeph>4</codeph> から <codeph>7</codeph>（レベルが既に <codeph>7</codeph> に設定されている場合を除く）に上がります。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextLineMetrics"><apiName>TextLineMetrics</apiName><shortdesc>
 TextLineMetrics クラスには、テキストフィールド内のテキストの位置およびテキストの行の測定に関する情報が含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>テキストフィールド内のテキストの位置およびテキストの行の測定に関する情報が含まれます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextLineMetrics クラスには、テキストフィールド内のテキストの位置および <i>テキストの行</i> のプロパティに関する情報が含まれています。すべてのプロパティ値はピクセル単位です。このクラスのオブジェクトは、<codeph>flash.text.TextField.getLineMetrics()</codeph> メソッドによって返されます。
 <p>テキストの行を含むテキストフィールドに関する測定（例えば、次の図の「テキストフィールドの高さ」の測定など）については、flash.text.TextField を参照してください。 </p>
 
 <p>次の図に、テキストフィールドおよびフィールドに含まれるテキストの行のポイントと測定を示します。</p>
 <p>
 <adobeimage alt="テキストメトリックを示すイメージ" href="../../images/text-metrics.jpg"/></p>
 
 </apiDesc><example conref="examples\TextLineMetricsExample.as"> 次の例は、TextLineMetricsExample および LineMetricsReader というクラスを作成し XML オブジェクトを介して Flash Player 内にメッセージを出力します。ここでは以下の手順を実行します。
 <ol>
  <li>タイプが TextField の <codeph>label</codeph> という名前のプロパティを作成します。</li>
  <li>コンストラクターが、<codeph>configureAssets()</codeph> を呼び出し、
  <ul>
      <li>ステージの整列を、左上および拡大 / 縮小なしに設定します。</li>
      <li><codeph>label</codeph> という名前の新しい TextField オブジェクトを作成します。</li>
      <li><codeph>label</codeph> の背景を有効にし、その色を白に設定します。</li>
      <li>自動折り返しによって、<codeph>label</codeph> のテキストを複数行にできるようにします。</li>
      <li><codeph>getLabelText()</codeph> の呼び出しの結果を、<codeph>text</codeph> プロパティ（<codeph>label</codeph>）に割り当てます。<codeph>getLabelText()</codeph> メソッドは、タイプが XML の変数を作成し、それを <codeph>body</codeph> という名前の XML ノードに割り当てます。ここに、長いテキストが格納されます。</li>
      <li><codeph>label</codeph> を表示リストに追加します。これには <codeph>addChild()</codeph> を使用します。</li>
  </ul>
  </li>
  <li>ステージで実行される <codeph>resize</codeph> イベントを受け取るメソッドが追加されます。このメソッドは、<codeph>resizeHandler()</codeph> です。Flash Player のウィンドウサイズが変更されるたびに <codeph>RESIZE</codeph> イベントが送出され、次の処理が行われます。 
  <ul>
      <li><codeph>draw()</codeph> が呼び出されます。これで <codeph>label</codeph> がステージの中央に 10 ピクセルのバッファーに囲まれて表示されるようになります。</li>
      <li>次に、<codeph>setTimeout()</codeph> が、少し遅れて <codeph>showMetrics()</codeph> を実行します。この遅延が発生するのは、<codeph>RESIZE</codeph> イベントが完了し、ステージが完全に再描画されるまで行メトリックが更新されないためです。</li>
      <li><codeph>showMetrics()</codeph> は、<codeph>metrics</codeph> という名前の TextLineMetrics 変数を <codeph>getLineMetrics()</codeph> の呼び出しの結果に割り当て、この変数が <codeph>reader</codeph> という名前の新しい LineMetricsReader インスタンスに渡されます。次に、2 つの変数は <codeph>trace()</codeph> の呼び出し内で使用され、<codeph>label</codeph> の最初の（唯一の）行と、LineMetricsReader インスタンスが <codeph>toString()</codeph> メソッドによって提供する情報を出力します。</li>
  </ul>
  </li>
  <li>コンストラクターは強制的に <codeph>resize</codeph> イベントを単独で送出し、SWF ファイルが最初にロードされるときに <codeph>label</codeph> が適切に描画されるようにします。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.*;
    import flash.text.TextField;
    import flash.text.TextLineMetrics;
    import flash.utils.setTimeout;

    public class TextLineMetricsExample extends Sprite {
        private var gutter:int = 10;
        private var label:TextField;

        public function TextLineMetricsExample() {
            configureAssets();
            configureListeners();
            resizeHandler(new Event(Event.RESIZE));
        }

        private function showMetrics():void {
            var metrics:TextLineMetrics = label.getLineMetrics(0);
            var reader:LineMetricsReader = new LineMetricsReader(metrics);
            trace("lineText: " + label.getLineText(0));
            trace("metrics: " + reader);
        }

        private function configureAssets():void {
            stage.align = StageAlign.TOP_LEFT;
            stage.scaleMode = StageScaleMode.NO_SCALE;

            label = new TextField();
            label.background = true;
            label.backgroundColor = 0xFFFFFF;
            label.multiline = true;
            label.wordWrap = true;
            label.text = getLabelText();
            addChild(label);
        }

        private function configureListeners():void {
            stage.addEventListener(Event.RESIZE, resizeHandler);
        }

        private function resizeHandler(event:Event):void {
            draw();
            setTimeout(showMetrics, 100);
        }

        private function draw():void {
            label.x = gutter;
            label.y = gutter;
            label.width = stage.stageWidth - (gutter * 2);
            label.height = stage.stageHeight - (gutter * 2);
        }

        private function getLabelText():String {
            var text:XML = &lt;body>The Flex product line enables developers to build rich Internet applications that blend the responsiveness of desktop software, the cross-platform reach of the web, and the expressiveness of the Flash Platform.&lt;/body>
            return text.toString();
        }
    }
}

import flash.text.TextLineMetrics;

class LineMetricsReader {
    private var metrics:TextLineMetrics;

    public function LineMetricsReader(metrics:TextLineMetrics) {
        this.metrics = metrics;
    }

    public function toString():String {
        return "[TextLineMetrics ascent:" + metrics.ascent
            + ", descent:" + metrics.descent
            + ", leading:" + metrics.leading
            + ", width:" + metrics.width
            + ", height:" + metrics.height
            + ", x:" + metrics.x
            + "]";
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiConstructor id="flash.text:TextLineMetrics:TextLineMetrics"><apiName>TextLineMetrics</apiName><shortdesc>
	 TextLineMetrics オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>最初の文字の左の位置です（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>選択されている行のテキスト（テキスト全体とは限りません）の幅です（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>選択されている行のテキスト（テキスト全体とは限りません）の高さです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>ascent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ベースラインから行の高さの最上部までの長さです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>descent</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ベースラインから行の最深部までの長さです（ピクセル単位）。
	 </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>テキストの行間の垂直距離の測定です。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>テキストフィールド内のテキストの位置およびテキストの行の測定に関する情報が含まれます。
  	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 TextLineMetrics オブジェクトを作成します。TextLineMetrics オブジェクトには、テキストフィールド内のテキストの行のテキストメトリックに関する情報が含まれます。このクラスのオブジェクトは、<codeph>flash.text.TextField.getLineMetrics()</codeph> メソッドによって返されます。
	 <p>各プロパティについては、このクラスの概要にある図を参照してください。</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link><link href="flash.text.xml#TextField/getLineMetrics()"><linktext>flash.text.TextField.getLineMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text:TextLineMetrics:ascent"><apiName>ascent</apiName><shortdesc>
	 テキストの ascent 値は、行のベースラインから最上部までの距離です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>including accents? is it really the line or the font itself?
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 テキストの ascent 値は、行のベースラインから最上部までの距離です（ピクセル単位）。このクラスの概要図の「アセント」の測定を参照してください。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:descent"><apiName>descent</apiName><shortdesc>
	 テキストの descent 値は、行のベースラインから最下部までの距離です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>is it really the line? or the font itself?
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 テキストの descent 値は、行のベースラインから最下部までの距離です（ピクセル単位）。このクラスの概要図の「ディセント」の測定を参照してください。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:height"><apiName>height</apiName><shortdesc>
	 選択されている行のテキスト（テキスト全体とは限りません）の高さの値です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 選択されている行のテキスト（テキスト全体とは限りません）の高さの値です（ピクセル単位）。テキスト行の高さには、ふち取りの高さは含まれません。このクラスの概要図の「行の高さ」の測定を参照してください。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:leading"><apiName>leading</apiName><shortdesc>
	 leading 値は、テキストの行間の垂直距離を測定した結果です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 leading 値は、テキストの行間の垂直距離を測定した結果です。このクラスの概要図の「レディング」の測定を参照してください。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:width"><apiName>width</apiName><shortdesc>
	 width の値は、選択されている行のテキスト（テキスト全体とは限りません）の幅です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 width の値は、選択されている行のテキスト（テキスト全体とは限りません）の幅です（ピクセル単位）。テキスト行の幅は、テキストフィールドの幅と同じではありません。テキスト行の幅はテキストフィールドの幅と相対的であり、ふち取りの幅 4 ピクセル（両側に 2 ピクセルずつ）を引いた値です。このクラスの概要図の「テキスト行の幅」の測定を参照してください。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text:TextLineMetrics:x"><apiName>x</apiName><shortdesc>
	 x 値は、最初の文字の左の位置です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 x 値は、最初の文字の左の位置です（ピクセル単位）。この値には、マージン、インデント（ある場合）、ふち取りの幅が含まれます。このクラスの概要図の「テキスト行の x 位置」を参照してください。
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextLineMetrics"><linktext>TextLineMetrics class overview</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:StyleSheet"><apiName>StyleSheet</apiName><shortdesc>
 StyleSheet クラスを使用すると、フォントのサイズや色、その他のスタイルなどのテキストフォーマット規則を含む StyleSheet オブジェクトを作成することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextField, StyleSheet class, built-in class, style sheet, stylesheet
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiTipTexts><apiTipText>StyleSheet オブジェクトを作成できます。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 StyleSheet クラスを使用すると、フォントのサイズや色、その他のスタイルなどのテキストフォーマット規則を含む StyleSheet オブジェクトを作成することができます。スタイルシートによって定義したスタイルは、HTML 形式または XML 形式のテキストを含む TextField オブジェクトに適用することができます。TextField オブジェクトに含まれるテキストは、StyleSheet オブジェクトによって定義されるタグスタイルに従って、自動的にフォーマットされます。テキストスタイルを使用して、新しいフォーマットタグの定義、ビルトイン HTML タグの再定義、特定の HTML タグに適用できるスタイルクラスの作成を行うことができます。
 
 <p>スタイルを TextField オブジェクトに適用するには、StyleSheet オブジェクトを TextField オブジェクトの <codeph>styleSheet</codeph> プロパティに適用します。</p>
 <p><b>注意：</b>スタイルシートを使用するテキストフィールドは編集できません。つまり、<codeph>type</codeph> プロパティが <codeph>TextFieldType.INPUT</codeph> に設定されたテキストフィールドの場合、テキストフィールドのデフォルトのテキストに StyleSheet が適用され、その内容は、ユーザー側で編集することができません。入力テキストフィールドにスタイルを割り当てる場合は、TextFormat クラスの使用を検討してください。</p> 
 
 <p>Flash Player は、オリジナルの CSS1 仕様（<xref href="http://www.w3.org/TR/REC-CSS1" scope="external">www.w3.org/TR/REC-CSS1</xref>）の一部のプロパティをサポートします。次の表に、サポートされている CSS（カスケーディングスタイルシート）プロパティとその値、および対応する ActionScript プロパティの名前を示します。ActionScript プロパティ名は、どれも対応する CSS プロパティ名から派生しており、名前にハイフンが含まれる場合はハイフンを省略し、後ろの文字を大文字にしています。</p>
 
 <adobetable class="innertable">
 
   
 
   
 
   
 
   
 
   
 
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
 <tgroup cols="3"><thead><row><entry>CSS プロパティ</entry><entry>ActionScript プロパティ</entry><entry>用途とサポートされる値</entry></row></thead><tbody><row>
     <entry><codeph>color</codeph></entry>
     <entry><codeph>color</codeph></entry>
     <entry>16 進数のカラー値のみがサポートされます。<codeph>blue</codeph> などの名前付きカラーはサポートされません。カラーは、<codeph>#FF0000</codeph> のようなフォーマットで記述されます。</entry>
   </row><row>
     <entry><codeph>display</codeph></entry>
     <entry><codeph>display</codeph></entry>
     <entry>サポートされる値は <codeph>inline</codeph>、<codeph>block</codeph>、および <codeph>none</codeph> です。</entry>
   </row><row>
     <entry><codeph>font-family</codeph></entry>
     <entry><codeph>fontFamily</codeph></entry>
     <entry>使用するフォントをカンマ区切りリストで指定します。優先度の高い順に並べます。任意のフォントファミリ名を使用できます。汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。次のようなフォント変換が行われます。<codeph>mono</codeph> は <codeph>_typewriter</codeph> に、<codeph>sans-serif</codeph> は <codeph>_sans</codeph> に、<codeph>serif</codeph> は <codeph>_serif</codeph> にそれぞれ変換されます。</entry>
   </row><row>
     <entry><codeph>font-size</codeph></entry>
     <entry><codeph>fontSize</codeph> </entry>
     <entry>値の数字の部分だけを使用します。単位（px、pt）は解析されません。ピクセルとポイントは同じ意味になります。</entry>
   </row><row>
     <entry><codeph>font-style</codeph></entry>
     <entry><codeph>fontStyle</codeph></entry>
     <entry>有効な値は <codeph>normal</codeph> と <codeph>italic</codeph> です。</entry>
   </row><row>
     <entry><codeph>font-weight</codeph></entry>
     <entry><codeph>fontWeight</codeph></entry>
     <entry>有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。</entry>
   </row><row>
     <entry><codeph>kerning</codeph></entry>
     <entry><codeph>kerning</codeph></entry>
     <entry>有効な値は <codeph>true</codeph> と <codeph>false</codeph> です。カーニングは、埋め込みフォントに対してのみサポートされています。Courier New など特定のフォントでは、カーニングがサポートされていません。カーニングのプロパティは、Macintosh で作成された SWF ファイルではなく、Windows で作成された SWF ファイルでのみサポートされます。ただし、これらの SWF ファイルは Windows 以外のバージョンの Flash Player で表示することが可能であり、カーニングも適用されます。</entry>
   </row><row>
     <entry><codeph>leading</codeph></entry>
     <entry><codeph>leading</codeph></entry>
     <entry>行間に均等に配分されるスペースの量です。各行の下に追加されるピクセル数を表す値です。負の値を指定すると、行の間隔が狭くなります。値の数字の部分だけを使用します。単位（px、pt）は解析されません。ピクセルとポイントは同じ意味になります。</entry>
   </row><row>
     <entry><codeph>letter-spacing</codeph></entry>
     <entry><codeph>letterSpacing</codeph></entry>
     <entry>文字間に均等に配分されるスペースの量です。この値は、各文字の後の送りに追加されるピクセル数を示します。負の値を指定すると、文字の間隔が狭くなります。値の数字の部分だけを使用します。単位（px、pt）は解析されません。ピクセルとポイントは同じ意味になります。</entry>
   </row><row>
     <entry><codeph>margin-left</codeph></entry>
     <entry><codeph>marginLeft</codeph></entry>
     <entry>値の数字の部分だけを使用します。単位（px、pt）は解析されません。ピクセルとポイントは同じ意味になります。 </entry>
   </row><row>
     <entry><codeph>margin-right</codeph></entry>
     <entry><codeph>marginRight</codeph></entry>
     <entry>値の数字の部分だけを使用します。単位（px、pt）は解析されません。ピクセルとポイントは同じ意味になります。</entry>
   </row><row>
     <entry><codeph>text-align</codeph></entry>
     <entry><codeph>textAlign</codeph></entry>
     <entry>有効な値は <codeph>left</codeph>、<codeph>center</codeph>、<codeph>right</codeph>、および <codeph>justify</codeph> です。</entry>
   </row><row>
     <entry><codeph>text-decoration</codeph></entry>
     <entry><codeph>textDecoration</codeph></entry>
     <entry>有効な値は <codeph>none</codeph> と <codeph>underline</codeph> です。</entry>
   </row><row>
     <entry><codeph>text-indent</codeph></entry>
     <entry><codeph>textIndent</codeph></entry>
     <entry>値の数字の部分だけを使用します。単位（px、pt）は解析されません。ピクセルとポイントは同じ意味になります。 </entry>
   </row></tbody></tgroup></adobetable> 
 
 <p><ph outputclass="flexonly">StyleSheet クラスを使用すると、低レベルでのテキストレンダリングが可能になります。ただし、Flex では一般的に Label、Text、TextArea、TextInput コントロールを使用して、テキスト処理を行います。</ph></p>
 
 
 </apiDesc><example conref="examples\StyleSheetExample.as"> 次の例では、新しいスタイルシートを作成して、見出しのスタイルにボールドと赤のフォント属性を割り当てます。
<codeblock>
 
package {
    import flash.display.Sprite;
    import flash.text.StyleSheet;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class StyleSheetExample extends Sprite {

        public function StyleSheetExample() {
            var style:StyleSheet = new StyleSheet();

            var heading:Object = new Object();
            heading.fontWeight = "bold";
            heading.color = "#FF0000";

            var body:Object = new Object();
            body.fontStyle = "italic";

            style.setStyle(".heading", heading);
            style.setStyle("body", body);

            var label:TextField = new TextField();
            label.styleSheet = style;
            label.htmlText = "&lt;body>&lt;span class='heading'>Hello &lt;/span>World...&lt;/body>";
            addChild(label);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><apiConstructor id="flash.text:StyleSheet:StyleSheet"><apiName>StyleSheet</apiName><shortdesc>
	 新しい StyleSheet オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet, constructor
	 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 新しい StyleSheet オブジェクトを作成します。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#StyleSheet/getStyle()"><linktext>flash.text.StyleSheet.getStyle()</linktext></link></related-links></apiConstructor><apiOperation id="flash.text:StyleSheet:clear"><apiName>clear</apiName><shortdesc>
	 スタイルシートオブジェクトのスタイルをすべて削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.clear, clear
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 スタイルシートオブジェクトのスタイルをすべて削除します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text:StyleSheet:getStyle"><apiName>getStyle</apiName><shortdesc> 
	 styleName という名前のスタイルに関連付けられているスタイルオブジェクトのコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.getStyle, getStyle
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>取得するスタイルの名前を示すストリングです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 <codeph>styleName</codeph> という名前のスタイルに関連付けられているスタイルオブジェクトのコピーを返します。<codeph>styleName</codeph> に関連付けられているスタイルオブジェクトがない場合は、<codeph>null</codeph> が返されます。
	 
	 </apiDesc><example><xref href="StyleSheet.html#parseCSS()">parseCSS()</xref> または <xref href="StyleSheet.html#transform()">transform()</xref> メソッドの例を参照して、<codeph>getStyle()</codeph> メソッドの使用方法を確認してください。 
	 </example></apiOperationDetail><related-links><link href="flash.text.xml#StyleSheet/setStyle()"><linktext>flash.text.StyleSheet.setStyle()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:StyleSheet:parseCSS"><apiName>parseCSS</apiName><shortdesc>
	 CSSText の CSS を解析し、その内容を含むスタイルシートをロードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.parseCSS, parseCSS
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>CSSText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>解析する CSS テキストです（ストリング）。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>cssText の CSS を解析し、その内容を含む StyleSheet をロードします。
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 <codeph>CSSText</codeph> の CSS を解析し、その内容を含むスタイルシートをロードします。<codeph>CSSText</codeph> 内のスタイルが <codeph>styleSheet</codeph> に既に含まれている場合は、<codeph>styleSheet</codeph> のプロパティは維持され、<codeph>CSSText</codeph> だけに含まれるスタイルが <codeph>styleSheet</codeph> に追加または変更されます。
	 
	 <p>ネイティブ CSS 解析機能を拡張するには、StyleSheet クラスのサブクラスを作成して、このメソッドをオーバーライドします。</p>
	 
	 </apiDesc><example conref="examples\StyleSheet_parseCSSExample.as"> 次の例では、ユーザーがテキストファイルをクリックすると、ファイルからロードした CSS スタイルがコンテンツに適用されます。
 
 <p>コンストラクターで、複数行テキストフィールドが作成され、そのコンテンツが HTML フォーマットのストリングに設定されます。（CSS スタイルが適用されるまで、HTML ヘッダーと span タグはレンダリングされません。） CSS ファイルの場所を識別するために、<codeph>URLRequest</codeph> オブジェクトが作成されます。この例では、CSS ファイルは SWF ファイルと同じディレクトリにあります。ファイルが <codeph>URLLoader</codeph> オブジェクトによってロードされます。2 つのイベントリスナーが <codeph>loader</codeph> URLLoader オブジェクトに追加されます。IO エラーが発生すると、<codeph>errorHandler()</codeph> メソッドが呼び出され、テキストフィールドにエラーメッセージが表示されます。すべてのデータを受信して <codeph>loader</codeph> URLLoader オブジェクトのデータプロパティに配置した後に、<codeph>loaderCompleteHandler()</codeph> メソッドが呼び出されます。このメソッドは、ファイルからロードしたデータの CSS スタイルを解析し、そのスタイル定義を <codeph>sheet</codeph> StyleSheet オブジェクトに設定します。</p>
 
 <p>ユーザーがテキストフィールドをクリックすると、<codeph>clickHandler()</codeph> メソッドが呼び出されます。<codeph>clickHandler()</codeph> メソッドの if ステートメントが、スタイルシートをテキストフィールドに適用する前にファイルのロードが完了しているかどうかを確認します。スタイルシートを有効にするために、スタイルシートをテキストフィールドに割り当ててから、<codeph>htmlText</codeph> プロパティをコンテンツに再割り当てする必要があります。CSS <codeph>font-family</codeph> とヘッダータグの <codeph>color</codeph> プロパティの値もテキストフィールドのコンテンツに追加されます。スタイルシートの値が有効になっていない場合、これらのプロパティの値は "undefined" になります。</p> 
 
 <p>この例で使用できる CSS ファイルのコンテンツの例を以下に示します。この例を実行する前に、テキストファイルを作成し、次の CSS コンテンツをこのファイルにコピーし、ファイル名を <codeph>test.css</codeph> として SWF ファイルと同じディレクトリに保存します。</p>
 
 <pre>
   p {
      font-family: Times New Roman, Times, _serif;
      font-size: 14;
       font-Style: italic;
        margin-left: 10;  
   }
   h1 {
      font-family: Arial, Helvetica, _sans;
      font-size: 20;
      font-weight: bold;
   }
   .bluetext {
      color: #0000CC;
   }
 </pre>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.StyleSheet;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.IOErrorEvent;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class StyleSheet_parseCSSExample extends Sprite {
        private var loader:URLLoader = new URLLoader();
        private var field:TextField = new TextField();
        private var exampleText:String = "&lt;h1>This is a headline&lt;/h1>"
                    + "&lt;p>This is a line of text. &lt;span class='bluetext'>" 
                    + "This line of text is colored blue.&lt;/span>&lt;/p>";
        private var sheet:StyleSheet = new StyleSheet();
        private var cssReady:Boolean = false;

        public function StyleSheet_parseCSSExample() {
            field.x = 10;
            field.y = 10;
            field.background = true;
            field.multiline = true;
            field.autoSize = TextFieldAutoSize.LEFT;
            field.htmlText = exampleText;

            field.addEventListener(MouseEvent.CLICK, clickHandler);
            
            addChild(field);
            
            var req:URLRequest = new URLRequest("test.css");
            loader.load(req);

            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);
        }

        public function errorHandler(e:IOErrorEvent):void {
            field.htmlText = "Couldn't load the style sheet file.";
        }

        public function loaderCompleteHandler(event:Event):void {
            sheet.parseCSS(loader.data);
            cssReady = true;
        }

        public function clickHandler(e:MouseEvent):void {

            if (cssReady) {
                field.styleSheet = sheet;
                field.htmlText = exampleText;
                
                var style:Object = sheet.getStyle("h1");
                field.htmlText += "&lt;p>Headline font-family is: " + style.fontFamily + "&lt;/p>";
                field.htmlText += "&lt;p>Headline color is: " + style.color + "&lt;/p>";  

            } else {
                field.htmlText = "Couldn't apply the CSS styles.";
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text:StyleSheet:setStyle"><apiName>setStyle</apiName><shortdesc>
	 指定された名前を使用して、新しいスタイルをスタイルシートオブジェクトに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><oldexample>The following example adds a style named <code>emphasized</code> to the 
	 StyleSheet <code>myStyleSheet</code>. The style includes two style properties: <code>color</code> 
	 and <code>fontWeight</code>. The style object is defined with the <code>{}</code> operator.
	 <pre><code>
	 myStyleSheet.setStyle("emphasized", {color:'#000000',fontWeight:'bold'});
	 </code></pre>
	 
	 <p>You could also create a style object using an instance of the Object class, and 
	 then pass that object (<code>styleObj</code>) as 
	 the <code>style</code> parameter, as the next example shows:</p>
	 <listing version="2.0">
	 import TextField.StyleSheet;
	 var my_styleSheet:StyleSheet = new StyleSheet();
	 
	 var styleObj:Object = new Object();
	 styleObj.color = "#000000";
	 styleObj.fontWeight = "bold";
	 my_styleSheet.setStyle("emphasized", styleObj);
	 delete styleObj;
	 
	 var styleNames_array:Array = my_styleSheet.getStyleNames();
	 for (var i=0;i&lt;styleNames_array.length;i++) {
	 	var styleName:String = styleNames_array[i];
	 	var thisStyle:Object = my_styleSheet.getStyle(styleName);
	 	trace(styleName);
	 	for (var prop in thisStyle) {
	 		trace("\t"+prop+": "+thisStyle[prop]);
	 	}
	 	trace("");
	 }
	 </listing>
	 <p><span class="flashonly">The following information appears in the Output 
	 panel:</span><span class="flexonly">The following information writes to the 
	 log file:</span></p>
	 <pre><code>
	 emphasized
	   fontWeight: bold
	   color: #000000
	 </code></pre>
	 
	 <p><strong>Note: </strong>Because Flash Player creates a copy of the style object
	 you pass to <code>setStyle()</code>, the <code> delete styleObj</code> command in the 
	 code example reduces memory usage by deleting the original style object passed to 
	 <code>setStyle()</code>.</p>
	 
	 </oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>スタイルシートに追加するスタイルの名前を示すストリングです。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>styleObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>スタイルを記述するオブジェクト、または <codeph>null</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された名前を使用して、新しいスタイルをスタイルシートオブジェクトに追加します。指定したスタイルがスタイルシートに存在しない場合は、追加されます。指定したスタイルがスタイルシートに既に存在する場合は、新しいスタイルに置き換えられます。<codeph>styleObject</codeph> パラメーターに <codeph>null</codeph> を指定した場合は、指定したスタイルが削除されます。
	 
	 <p>このメソッドに渡したスタイルオブジェクトのコピーが作成されます。</p>
	 
	 <p>サポートされるスタイルの一覧については、StyleSheet クラスの説明に記載されている表を参照してください。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text:StyleSheet:transform"><apiName>transform</apiName><shortdesc>
	 CSS 解析機能を拡張します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.transform, transform
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>CSS 規則をテキストフォーマットプロパティにマッピングした結果を含む TextFormat オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.text:TextFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>formatObject</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>スタイルを記述するオブジェクト、または <codeph>null</codeph> です。このスタイルには、オブジェクトのプロパティとしてスタイル規則が含まれます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 CSS 解析機能を拡張します。上級開発者であれば、StyleSheet クラスを拡張して、このメソッドをオーバーライドできます。 
	 
	 </apiDesc><example conref="examples\StyleSheet_transformExample.as"> この例では、<codeph>transform()</codeph> メソッドを使用して CSS ファイルのスタイルをテキストフィールドの TextFormat オブジェクトに適用します。
 
 <p>通常、CSS スタイルは HTML コンテンツをフォーマットするために使用されます。ただし、StyleSheet オブジェクトの <codeph>transform()</codeph> メソッドを使用することで、特定の CSS スタイルを TextFormat オブジェクトに割り当て、任意のテキストフィールドに適用できます。</p> 
 
 <p><codeph>URLRequest</codeph> および <codeph>URLLoader</codeph> オブジェクトは CSS ファイルをロードするために使用されます。イベントリスナーが <codeph>Event.COMPLETE</codeph> イベントに追加されます。このイベントは、すべてのデータが受信され、<codeph>loader</codeph> URLLoader オブジェクトの data プロパティに配置された後に発生します。次に、<codeph>loaderCompleteHandler()</codeph> メソッドがファイルからロードしたデータの CSS を解析し、このスタイルを <codeph>sheet</codeph> StyleSheet オブジェクトに設定します。スタイルシートの <codeph>getStyle()</codeph> メソッドが HTML 段落スタイルを取得し、<codeph>cssFormat</codeph> TextFormat オブジェクトに割り当てます（スタイルシートの <codeph>transform()</codeph> メソッドを使用）。最後に、<codeph>inputField</codeph> テキストフィールドのデフォルトのテキストフォーマットが、新しい <codeph>cssFormat</codeph> テキストフォーマットに設定されます。</p> 
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.StyleSheet;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.text.TextFieldType;
    import flash.events.IOErrorEvent;
    import flash.events.Event;

    public class StyleSheet_transformExample extends Sprite {
        private var loader:URLLoader = new URLLoader();
        private var inputField:TextField = new TextField();
        private var sheet:StyleSheet = new StyleSheet();

        public function StyleSheet_transformExample() {
            inputField.x = 10;
            inputField.y = 10;
            inputField.background = true;
            inputField.width = 300;
            inputField.height = 200;
            inputField.wordWrap = true;
            inputField.multiline = true;    
            inputField.type = TextFieldType.INPUT;

            addChild(inputField);
            
            var req:URLRequest = new URLRequest("test.css");
            loader.load(req);

            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);
        }

        public function errorHandler(e:IOErrorEvent):void {
            inputField.htmlText = "Couldn't load the style sheet file.";
        }

        public function loaderCompleteHandler(event:Event):void {
            var cssFormat:TextFormat = new TextFormat();
            sheet.parseCSS(loader.data);
            var style:Object = sheet.getStyle("p");
            cssFormat = sheet.transform(style);
            inputField.defaultTextFormat = cssFormat;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.xml#TextFormat"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiValue id="flash.text:StyleSheet:styleNames:get"><apiName>styleNames</apiName><shortdesc>
	 このスタイルシートに登録されているすべてのスタイルの名前（ストリング）を含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>StyleSheet.getStyleNames, getStyleNames
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier><apiTipTexts><apiTipText>この StyleSheet に登録されているすべてのスタイルの名前を返します。
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 このスタイルシートに登録されているすべてのスタイルの名前（ストリング）を含む配列です。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:TextSnapshot"><apiName>TextSnapshot</apiName><shortdesc> 
 TextSnapshot オブジェクトを使用すると、ムービークリップ内の静止テキストを操作できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
 TextSnapshot オブジェクトを使用すると、ムービークリップ内の静止テキストを操作できます。例えば、ダイナミックテキストでは不可能な高い精度でテキストをレイアウトできます。ただし、テキストへのアクセスは読み取り専用になります。
 
 <p>TextSnapshot オブジェクトはコンストラクターを使用して作成するのではなく、<codeph>flash.display.DisplayObjectContainer.textSnapshot</codeph> プロパティで取得します。</p>
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObjectContainer/textSnapshot"><linktext>flash.display.DisplayObjectContainer.textSnapshot</linktext></link></related-links><apiOperation id="flash.text:TextSnapshot:findText"><apiName>findText</apiName><shortdesc>
	 指定された TextSnapshot オブジェクト内を検索し、最初に（または beginIndex の後に）見つかった textToFind の位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.findText, findText
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたテキストが最初に見つかった位置を示す、0 から始まるインデックス位置、または -1 です。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>指定されたテキストを検索する開始ポイントを指定します。	 
	 
	 </apiDesc></apiParam><apiParam><apiItemName>textToFind</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>検索対象のテキストを指定します。String 型の変数ではなく、ストリングリテラルを指定する場合は、その文字列を引用符で囲む必要があります。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>caseSensitive</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc><codeph>textToFind</codeph> で検索する際に大文字と小文字を区別するかどうかを指定します。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された TextSnapshot オブジェクト内を検索し、<codeph>textToFind</codeph> の位置について、最初または <codeph>beginIndex</codeph> の後に見つかった位置を返します。<codeph>textToFind</codeph> が見つからなかった場合は、<codeph>-1</codeph> を返します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/getText()"><linktext>flash.text.TextSnapshot.getText()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getSelected"><apiName>getSelected</apiName><shortdesc>
	 選択されたテキストが TextSnapshot オブジェクトの指定範囲に存在するかどうかを表すブール値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.getSelected, getSelected
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された範囲の少なくとも 1 文字が、対応する <codeph>setSelected()</codeph> メソッドで選択されているかどうかを示すブール値です。選択されている場合は <codeph>true</codeph>、選択されていない場合は <codeph>false</codeph> です。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>検査を開始する文字の位置を示します。<codeph>beginIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>TextSnapshot.charCount - 1</codeph> です。<codeph>beginIndex</codeph> が負の値の場合、<codeph>0</codeph> が使用されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>検査する最後の文字のインデックスに 1 を加えた値です。<codeph>endIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>charCount</codeph> です。<codeph>endIndex</codeph> パラメーターで指定されたインデックス位置の文字は、抽出されるストリングには含まれません。このパラメーターを省略すると、<codeph>charCount</codeph> が使用されます。この値が <codeph>beginIndex</codeph> に指定された値と同じか小さい場合、<codeph>beginIndex + 1</codeph> が使用されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 選択されたテキストが TextSnapshot オブジェクトの指定範囲に存在するかどうかを表すブール値を返します。 
	 
	 <p>すべての文字を検索するには、<codeph>0</codeph> を <codeph>start</codeph> に指定し、<codeph>charCount</codeph>（または十分に大きな数値）を <codeph>end</codeph> に指定します。1 つの文字だけを検索する場合は、<codeph>end</codeph> パラメーターに対して、<codeph>start</codeph> パラメーターに 1 を加えた値を指定します。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/charCount"><linktext>flash.text.TextSnapshot.charCount</linktext></link><link href="flash.text.xml#TextSnapshot/getText()"><linktext>flash.text.TextSnapshot.getText()</linktext></link><link href="flash.text.xml#TextSnapshot/getSelectedText()"><linktext>flash.text.TextSnapshot.getSelectedText()</linktext></link><link href="flash.text.xml#TextSnapshot/setSelected()"><linktext>flash.text.TextSnapshot.setSelected()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getSelectedText"><apiName>getSelectedText</apiName><shortdesc>
	 対応する setSelected() メソッドで指定されたすべての文字を含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.getSelectedText, getSelectedText
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>対応する <codeph>setSelected()</codeph> コマンドで指定されたすべての文字を含むストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>includeLineEndings</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ブール値です。戻り値のストリングの適切な箇所に、改行文字（newline）を挿入するかどうかを指定します。このパラメーターはオプションです。デフォルト値は <codeph>false</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 対応する <codeph>setSelected()</codeph> メソッドで指定されたすべての文字を含むストリングを返します。<codeph>setSelected()</codeph> メソッドで文字が指定されない場合は、空のストリングが返されます。
	 
	 <p><codeph>true</codeph> を <codeph>includeLineEndings</codeph> に指定した場合は、返されるストリングに改行文字（newline）が挿入され、返されるストリングは入力範囲よりも長くなる場合があります。<codeph>includeLineEndings</codeph> に <codeph>false</codeph> を指定した場合、または省略した場合は、何の文字も追加されずに選択されたテキストが返されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/getSelected()"><linktext>flash.text.TextSnapshot.getSelected()</linktext></link><link href="flash.text.xml#TextSnapshot/setSelected()"><linktext>flash.text.TextSnapshot.setSelected()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getText"><apiName>getText</apiName><shortdesc>
	 beginIndex パラメーターと endIndex パラメーターで指定されたすべての文字を含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.getText, getText
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された範囲の文字を含むストリング。指定された範囲に文字が存在しない場合は空のストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>返されるストリングに入れる先頭文字の位置を示します。<codeph>beginIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>charCount - 1</codeph> です。<codeph>beginIndex</codeph> が負の値の場合、<codeph>0</codeph> が使用されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>検査する最後の文字のインデックスに 1 を加えた値です。<codeph>endIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>charCount</codeph> です。<codeph>endIndex</codeph> パラメーターで指定されたインデックス位置の文字は、抽出されるストリングには含まれません。このパラメーターを省略すると、<codeph>charCount</codeph> が使用されます。この値が <codeph>beginIndex</codeph> に指定された値と同じか小さい場合、<codeph>beginIndex + 1</codeph> が使用されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>includeLineEndings</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ブール値です。戻り値のストリングに改行文字（newline）を挿入するか（<codeph>true</codeph>）、または挿入しないか（<codeph>false</codeph>）を指定します。このパラメーターはオプションです。デフォルト値は <codeph>false</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>beginIndex</codeph> パラメーターと <codeph>endIndex</codeph> パラメーターで指定されたすべての文字を含むストリングを返します。選択された文字が存在しない場合は、空のストリングが返されます。 
	 
	 <p>すべての文字を取得するには、<codeph>0</codeph> を <codeph>beginIndex</codeph> に指定し、<codeph>charCount</codeph>（または十分に大きな数値）を <codeph>endIndex</codeph> に指定します。1 つの文字だけを返す場合は、<codeph>beginIndex + 1</codeph> を <codeph>endIndex</codeph> に指定します。 </p>
	 
	 <p><codeph>true</codeph> を <codeph>includeLineEndings</codeph> に指定した場合は、返されたストリングの適当な位置に改行文字（newline）が挿入されます。この場合、返されるストリングは、入力範囲よりも長くなる場合があります。<codeph>includeLineEndings</codeph> に <codeph>false</codeph> を指定した場合、または省略した場合は、何の文字も追加されずに選択されたテキストが返されます。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/charCount"><linktext>flash.text.TextSnapshot.charCount</linktext></link><link href="flash.text.xml#TextSnapshot/getSelectedText()"><linktext>flash.text.TextSnapshot.getSelectedText()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:getTextRunInfo"><apiName>getTextRunInfo</apiName><shortdesc>
	 連続したテキストに関する情報を含むオブジェクトの配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>beginIndex</codeph> パラメーターおよび <codeph>endIndex</codeph> パラメーターで指定された文字の範囲内の特定の文字に関する情報が含まれる個々のオブジェクトで構成されたオブジェクトの配列です。各オブジェクトには、次の 11 個のプロパティがあります。
	 <ul>
	 
	  	<li><codeph>indexInRun</codeph>：その文字のインデックス。選択されているテキスト範囲ではなく、ストリング全体を基準とした 0 から始まる整数のインデックスです。</li>
	 
	  	<li><codeph>selected</codeph>：文字が選択されるかどうかを示すブール値。選択される場合は <codeph>true</codeph>、選択されない場合は <codeph>false</codeph> です。</li>
	 
	  	<li><codeph>font</codeph>：その文字のフォント名です。</li>
	 
	  	<li><codeph>color</codeph>：その文字のカラーとアルファ (透明度) の値の組み合わせです。16 進数の最初の 2 桁はアルファ値を表し、残りの桁はカラー値を表します。</li>
	 
	  	<li><codeph>height</codeph>：その文字の高さ（ピクセル単位）。</li>
	 
	  	<li><codeph>matrix_a</codeph>、<codeph>matrix_b</codeph>、<codeph>matrix_c</codeph>、<codeph>matrix_d</codeph>、<codeph>matrix_tx</codeph>、<codeph>matrix_ty</codeph>：文字に関する図形変換を定義するマトリックス値。通常、正立テキストのマトリックスは <codeph>[1 0 0 1 x y]</codeph> の形式です。ここで、<codeph>x</codeph> と <codeph>y</codeph> は親ムービークリップ内の文字の位置です。テキストの高さは関係ありません。このマトリックスは親ムービークリップの座標系にあり、そのムービークリップ自身または親ムービークリップでの変換を含みません。 </li>
	 
	 	<li><codeph>corner0x</codeph>、<codeph>corner0y</codeph>、<codeph>corner1x</codeph>、<codeph>corner1y</codeph>、<codeph>corner2x</codeph>、<codeph>corner2y</codeph>、<codeph>corner3x</codeph>、<codeph>corner3y</codeph>：親ムービークリップの座標系に基づく、文字の境界ボックスの頂点。これらの値は、文字に使用するフォントが SWF ファイルに埋め込まれている場合にのみ使用できます。</li>
	 
	 </ul>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>TextSnapshot オブジェクト内の文字範囲内の最初の文字を示すインデックス値です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>TextSnapshot オブジェクト内の文字範囲内の最後の文字を示すインデックス値です。
	 
 	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 連続したテキストに関する情報を含むオブジェクトの配列を返します。各オブジェクトは、2 つのメソッドパラメーターで指定した文字範囲内の 1 つの文字に対応します。 
	 
	 <p><b>注意：</b>大きな範囲のテキストに対して <codeph>getTextRunInfo()</codeph> メソッドを使用すると、大きなオブジェクトを返すことができます。<codeph>beginIndex</codeph> パラメーターおよび <codeph>endIndex</codeph> パラメーターで定義するテキスト範囲を制限することをお勧めします。 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.geom.xml#Matrix"><linktext>Matrix クラス</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:hitTestTextNearPos"><apiName>hitTestTextNearPos</apiName><shortdesc>
	 TextSnapshot オブジェクト内のどの文字が、そのテキストを含むムービークリップの指定 x、y 座標上またはその付近に存在するかを評価できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.hitTestTextNearPos, hitTestTextNearPos
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された <codeph>x</codeph> および <codeph>y</codeph> 座標に最も近い文字のインデックス値を表す数値です。文字が見つからない場合、またはフォントに文字メトリック情報が含まれていない場合には <codeph>-1</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>テキストを含むムービークリップの <codeph>x</codeph> 座標を表す数値です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>テキストを含むムービークリップの <codeph>y</codeph> 座標を表す数値です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>maxDistance</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>テキストの検索が可能な、<codeph>x</codeph>、<codeph>y</codeph> からの最大距離を表す数値です。このパラメーターはオプションです。この距離は、各文字の中心位置を基準にして測ります。デフォルト値は <codeph>0</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 TextSnapshot オブジェクト内のどの文字が、TextSnapshot オブジェクトのテキストを含むムービークリップの指定座標 <codeph>x</codeph>、<codeph>y</codeph> 上またはその付近に存在するかを評価します。
	 
	 <p><codeph>0</codeph> を <codeph>maxDistance</codeph> に指定する場合、またはその指定を省略する場合、<codeph>x</codeph>、<codeph>y</codeph> 座標で指定される位置は、TextSnapshot オブジェクトの境界ボックス内にある必要があります。 
	 </p>
	 
	 <p>このメソッドは、文字メトリック情報を含むフォントを使用する場合にのみ正常に機能します。ただし、デフォルトでは、Flash オーサリングツールの静止テキストフィールドにこの情報は含まれません。<ph outputclass="flashonly">したがって、インデックス値の代わりに <codeph>-1</codeph> が返されます。インデックス値が返されるように、Flash オーサリングツールで強制的にフォントの文字メトリック情報を含めることができます。これを行うには、そのフォントを使用するダイナミックテキストフィールドを追加して、そのダイナミックテキストフィールドの「文字オプション」を選択し、フォントのアウトラインの埋め込みを 1 つ以上の文字に対して指定します。どの文字を指定しても問題ありません。また、静止テキストフィールドでその文字が使用されていてもかまいません。</ph></p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject/x"><linktext>flash.display.DisplayObject.x</linktext></link><link href="flash.display.xml#DisplayObject/y"><linktext>flash.display.DisplayObject.y</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:setSelectColor"><apiName>setSelectColor</apiName><shortdesc>
	 setSelected() メソッドで選択された文字を強調表示するときに使用する色を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.setSelectColor, setSelectColor
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hexColor</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0xFFFF00</apiData><apiDesc>対応する <codeph>setSelected()</codeph> コマンドで選択された文字の境界に使用する色です。16 進数形式（0x<i>RRGGBB</i>）で指定します。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>setSelected()</codeph> メソッドで選択された文字を強調表示するときに使用する色を指定します。色は常に不透明になります。透明度値を指定することはできません。
	 
	 <p>このメソッドは、文字メトリック情報を含むフォントを使用する場合にのみ正常に機能します。ただし、デフォルトでは、Flash オーサリングツールの静止テキストフィールドにこの情報は含まれません。したがって、インデックス値の代わりに <codeph>-1</codeph> が返されます。<ph outputclass="flashonly">インデックス値が返されるように、Flash オーサリングツールで強制的にフォントの文字メトリック情報を含めることができます。これを行うには、そのフォントを使用するダイナミックテキストフィールドを追加して、そのダイナミックテキストフィールドの「文字オプション」を選択し、フォントのアウトラインの埋め込みを 1 つ以上の文字に対して指定します。どの文字を指定しても問題ありません。また、静止テキストフィールドでその文字が使用されていてもかまいません。</ph></p>	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/setSelected()"><linktext>flash.text.TextSnapshot.setSelected()</linktext></link></related-links></apiOperation><apiOperation id="flash.text:TextSnapshot:setSelected"><apiName>setSelected</apiName><shortdesc>
	 選択または選択解除する TextSnapshot オブジェクトの文字範囲を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9."/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.setSelected, setSelected
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>選択を開始する文字の位置を示します。<codeph>beginIndex</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>charCount - 1</codeph> です。<codeph>beginIndex</codeph> が負の値の場合、<codeph>0</codeph> が使用されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>検査する最後の文字のインデックスに 1 を加えた整数です。<codeph>end</codeph> に指定できる値は、<codeph>0</codeph> ～ <codeph>charCount</codeph> です。<codeph>end</codeph> パラメーターで指定されたインデックス位置の文字は、抽出されるストリングには含まれません。このパラメーターを省略すると、<codeph>TextSnapshot.charCount</codeph> が使用されます。<codeph>beginIndex</codeph> の値が <codeph>endIndex</codeph> に指定された値と同じか小さい場合、<codeph>beginIndex + 1</codeph> が使用されます。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>select</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>テキストを選択するかどうかを指定するブール値です。選択する場合は <codeph>true</codeph>、選択解除する場合は <codeph>false</codeph> です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 選択または選択解除する TextSnapshot オブジェクトの文字範囲を指定します。選択された文字は、文字の境界ボックスに合わせて背景色付きの矩形で描画されます。境界ボックスの色は、<codeph>setSelectColor()</codeph> で定義されます。
	 
	 <p>すべての文字を選択または選択解除するには、<codeph>0</codeph> を <codeph>beginIndex</codeph> に指定し、<codeph>charCount</codeph>（または十分に大きな数値）を <codeph>endIndex</codeph> に指定します。1 つの文字だけを指定する場合は、<codeph>start + 1</codeph> を <codeph>endIndex</codeph> に指定します。 </p>
	 
	 <p>文字の選択状態は個々にマーキングされるため、このメソッドを何回か呼び出すことで、複数の文字を選択できます。つまり、このメソッドを使用しても、既にこのメソッドで選択されている他の文字については選択解除されません。</p>
	 
	 <p>選択範囲を示す色付きの矩形は、文字メトリック情報を含むフォントに対してのみ表示されます。デフォルトでは、静止テキストフィールドにはこの情報は含まれません。これが原因で、選択されたテキストが画面に選択状態で表示されない場合があります。<ph outputclass="flashonly">選択されたテキスト全体が選択状態で表示されるように、Flash オーサリングツールで強制的にフォントの文字メトリック情報を含めることができます。これを行うには、そのフォントを使用するダイナミックテキストフィールドを追加して、そのダイナミックテキストフィールドの「文字オプション」を選択し、フォントのアウトラインの埋め込みを 1 つ以上の文字に対して指定します。どの文字を指定しても問題ありません。また、対象となる静止テキストフィールドでその文字が使用されていてもかまいません。</ph></p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.xml#TextSnapshot/charCount"><linktext>flash.text.TextSnapshot.charCount</linktext></link><link href="flash.text.xml#TextSnapshot/setSelectColor()"><linktext>flash.text.TextSnapshot.setSelectColor()</linktext></link></related-links></apiOperation><apiValue id="flash.text:TextSnapshot:charCount:get"><apiName>charCount</apiName><shortdesc>
	 TextSnapshot オブジェクト内の文字数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>TextSnapshot.charCount, charCount, count
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 TextSnapshot オブジェクト内の文字数です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextSnapshot/getText()"><linktext>flash.text.TextSnapshot.getText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextFieldAutoSize"><apiName>TextFieldAutoSize</apiName><shortdesc>
TextFieldAutoSize クラスは、TextField クラスの autoSize プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextFieldAutoSize クラスは、TextField クラスの <codeph>autoSize</codeph> プロパティの設定で使用される定数値の列挙です。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/autoSize"><linktext>flash.text.TextField.autoSize</linktext></link></related-links><apiValue id="flash.text:TextFieldAutoSize:CENTER"><apiName>CENTER</apiName><shortdesc> 
	テキストが中央揃えテキストとして扱われることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストが中央揃えテキストとして扱われることを指定します。テキストフィールドの単一行のサイズ変更を行うと、左右両側が均等に伸縮されます。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldAutoSize:LEFT"><apiName>LEFT</apiName><shortdesc> 
	テキストが左揃えテキストとして扱われることを指定します。つまり、テキストフィールドの左側が固定され、テキストフィールドの単一行の右側のみが伸縮します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストが左揃えテキストとして扱われることを指定します。つまり、テキストフィールドの左側が固定され、テキストフィールドの単一行の右側のみが伸縮します。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldAutoSize:NONE"><apiName>NONE</apiName><shortdesc> 
	
	サイズ変更が発生しないことを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	
	サイズ変更が発生しないことを指定します。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldAutoSize:RIGHT"><apiName>RIGHT</apiName><shortdesc> 
	テキストが右揃えテキストとして扱われることを指定します。つまり、テキストフィールドの右側が固定され、テキストフィールドの単一行の左側のみが伸縮します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	テキストが右揃えテキストとして扱われることを指定します。つまり、テキストフィールドの右側が固定され、テキストフィールドの単一行の左側のみが伸縮します。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text:FontStyle"><apiName>FontStyle</apiName><shortdesc>
FontStyle クラスは、TextRenderer クラスに値を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontStyle クラスは、TextRenderer クラスに値を提供します。

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextRenderer"><linktext>flash.text.TextRenderer</linktext></link></related-links><apiValue id="flash.text:FontStyle:BOLD"><apiName>BOLD</apiName><shortdesc>
    setAdvancedAntiAliasingTable() メソッドの fontStyle パラメーターのフォントのボールドスタイルを定義します。</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>fontStyle</codeph> パラメーター（<codeph>setAdvancedAntiAliasingTable()</codeph> メソッド）のフォントのボールドスタイルを定義します。シンタックス <codeph>FontStyle.BOLD</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:FontStyle:BOLD_ITALIC"><apiName>BOLD_ITALIC</apiName><shortdesc>
    setAdvancedAntiAliasingTable() メソッドの fontStyle パラメーターのフォントのボールドとイタリックの組み合せスタイルを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>boldItalic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>fontStyle</codeph> パラメーター（<codeph>setAdvancedAntiAliasingTable()</codeph> メソッド）のフォントのボールドとイタリックの組み合せスタイルを定義します。シンタックス <codeph>FontStyle.BOLD_ITALIC</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:FontStyle:ITALIC"><apiName>ITALIC</apiName><shortdesc>
    setAdvancedAntiAliasingTable() メソッドの fontStyle パラメーターのフォントのイタリックスタイルを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>fontStyle</codeph> パラメーター（<codeph>setAdvancedAntiAliasingTable()</codeph> メソッド）のフォントのイタリックスタイルを定義します。シンタックス <codeph>FontStyle.ITALIC</codeph> を使用します。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue><apiValue id="flash.text:FontStyle:REGULAR"><apiName>REGULAR</apiName><shortdesc>
    setAdvancedAntiAliasingTable() メソッドの fontStyle パラメーターのフォントの標準スタイルを定義します。</shortdesc><prolog><author>Bob Pappas
	</author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>regular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    <codeph>fontStyle</codeph> パラメーター（<codeph>setAdvancedAntiAliasingTable()</codeph> メソッド）のフォントの標準スタイルを定義します。 シンタックス <codeph>FontStyle.REGULAR</codeph> を使用します。 
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextRenderer/setAdvancedAntiAliasingTable()"><linktext>flash.text.TextRenderer.setAdvancedAntiAliasingTable()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text:TextFieldType"><apiName>TextFieldType</apiName><shortdesc>
TextFieldType クラスは、TextField クラスの type プロパティの設定で使用される定数値の列挙です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextFieldType クラスは、TextField クラスの <codeph>type</codeph> プロパティの設定で使用される定数値の列挙です。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.xml#TextField/type"><linktext>flash.text.TextField.type</linktext></link></related-links><apiValue id="flash.text:TextFieldType:DYNAMIC"><apiName>DYNAMIC</apiName><shortdesc> 
	ダイナミックな TextField を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dynamic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	<codeph>dynamic</codeph> TextField を指定するために使用されます。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text:TextFieldType:INPUT"><apiName>INPUT</apiName><shortdesc> 
	input TextField を指定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>input</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	<codeph>input</codeph> TextField を指定するために使用されます。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>