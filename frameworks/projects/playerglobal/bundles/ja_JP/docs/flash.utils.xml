<?xml version="1.0"?>
<apiPackage id="flash.utils"><apiName>flash.utils</apiName><apiDetail/><apiClassifier id="flash.utils:Proxy"><apiName>Proxy</apiName><shortdesc>
 Proxy クラスでは、オブジェクトに対する ActionScript 操作（プロパティの取得や変更など）のデフォルトの動作をオーバーライドできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Proxy クラスでは、オブジェクトに対する ActionScript 操作（プロパティの取得や変更など）のデフォルトの動作をオーバーライドできます。
 
 <p>Proxy クラスにはコンストラクターがないため、Proxy をインスタンス化しないでください。代わりに、Proxy クラスをサブクラス化して <codeph>getProperty</codeph> などのメソッドを上書きし、カスタムビヘイビアーを指定します。メソッドをオーバーライドせずに Proxy クラスのメソッドを使用しようとすると、例外が発生します。</p>
 <p>また、Proxy クラスのメソッドを上書きする独自のコードによって、意図しない形で例外がスローされる場合があります。これらのメソッドの使用時に例外がスローされると、(<codeph>in</codeph>、<codeph>is</codeph>、<codeph>delete</codeph>などの演算子を使用する) 呼び出し元コードで例外が予期されていないため、問題が発生します。メソッドの上書きによって例外がスローされないことを確認しない限り、演算子によってメソッドを呼び出す際に致命的なエラーが発生することを避けるため、Proxy クラスの実装には <codeph>try..catch</codeph> ステートメントを使用することをお勧めします。次に実際の使用例を示します。 </p> 
 <codeblock>
 dynamic class MyProxy extends Proxy {
     flash_proxy override function callProperty(name:~~, ...rest):~~ {
       try {
         // custom code here
       }
       catch (e:Error) {
         // respond to error here
       }
 }   
 </codeblock>
 
 <p>Proxy クラスは ActionScript 2.0 の <codeph>Object.__resolve</codeph> および <codeph>Object.addProperty</codeph> 機能の後継です。これらの機能は、ActionScript 3.0 では使用できなくなります。<codeph>Object.addProperty()</codeph> 機能を使用すると、ActionScript 2.0 の get および set メソッドを動的に作成できます。ActionScript 3.0 では、コンパイル時に get および set メソッドが提供されますが、Proxy クラスを使用しない場合はオブジェクトに動的に割り当てることができません。</p>
 
 <p><codeph>public</codeph> 名前空間の競合を避けるために、Proxy クラスのメソッドは <codeph>flash_proxy</codeph> 名前空間にあります。</p>
 
 <p>Proxy クラスのメソッドが <codeph>name</codeph> 引数を取る場合、<codeph>name</codeph> は String オブジェクトまたは QName オブジェクト（名前空間を使用する場合）のいずれかにすることができます。</p>
 
 </apiDesc><example conref="examples\ProxyExample.as"><codeblock>
package {
    import flash.display.Sprite;

    public class ProxyExample extends Sprite {
        public function ProxyExample() {
            var arr:ProxyArray = new ProxyArray();
            arr.push(1);
            arr.push(-2);
            arr.push(3);
            arr.push(4);
            arr.push("five");
            
            trace(arr.length); // 5
            trace(arr[0]);     // 1
            trace(arr[1]);     // -2
            trace(arr[2]);     // 3
            trace(arr[3]);     // 4

            trace(arr.sum());  // 6

            arr.clear();
            trace(arr); // (empty string)
            
            arr[0] = "zero";
            trace(arr); // zero
        }
    }
}

import flash.utils.Proxy;
import flash.utils.flash_proxy;

dynamic class ProxyArray extends Proxy {
    private var _item:Array;

    public function ProxyArray() {
        _item = new Array();
    }

    override flash_proxy function callProperty(methodName:*, ... args):* {
        var res:*;
        switch (methodName.toString()) {
            case 'clear':
                _item = new Array();
                break;
            case 'sum':
                var sum:Number = 0;
                for each (var i:* in _item) {
                    // ignore non-numeric values
                    if (!isNaN(i)) {
                        sum += i;
                    }
                }
                res = sum;
                break;
            default:
                res = _item[methodName].apply(_item, args);
                break;
        }
        return res;
    }

    override flash_proxy function getProperty(name:*):* {
        return _item[name];
    }

    override flash_proxy function setProperty(name:*, value:*):void {
        _item[name] = value;
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.utils:Proxy:flash_proxy:callProperty"><apiName>callProperty</apiName><shortdesc>
	 関数として呼び出し可能なオブジェクトプロパティの動作をオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>呼び出したメソッドの戻り値です。
     </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>呼び出されるメソッドの名前です。
	 </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>呼び出されるメソッドの引数を指定する配列です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 関数として呼び出し可能なオブジェクトプロパティの動作をオーバーライドします。オブジェクトのメソッドが呼び出されるときに、このメソッドが呼び出されます。関数として呼び出し可能なオブジェクトもありますが、関数として呼び出し可能なオブジェクトプロパティもあります。 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Function/call()"><linktext>Function.call()</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"><linktext>ECMA-262 Language Specification, 3rd Edition, section 15</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:deleteProperty"><apiName>deleteProperty</apiName><shortdesc>
	 プロパティを削除する要求をオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>プロパティが削除された場合は <codeph>true</codeph>、それ以外は <codeph>false</codeph> を返します。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>削除するプロパティの名前です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 プロパティを削除する要求をオーバーライドします。プロパティが <codeph>delete</codeph> 操作で削除されると、このメソッドが呼び出されて削除が実行されます。 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="../../operators.html#delete"><linktext>delete 演算子</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"><linktext>ECMA-262 Language Specification, 3rd Edition, 8.6.2.5</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:getDescendants"><apiName>getDescendants</apiName><shortdesc>
	 descendant 演算子の使用をオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc><codeph>descendant</codeph> 演算子の結果です。
     </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>オブジェクト内で下位に移動して検索するプロパティの名前です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>descendant</codeph> 演算子の使用をオーバーライドします。<codeph>descendant</codeph> 演算子が使用されると、このメソッドが呼び出されます。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="../../operators.html#descendant_accessor"><linktext>descendant 演算子</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm"><linktext>E4X 仕様</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:getProperty"><apiName>getProperty</apiName><shortdesc>
     プロパティの値に対する要求をオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>指定されたプロパティ。プロパティが見つからなかった場合は <codeph>undefined</codeph> が返されます。
     </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>取得するプロパティの名前です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     プロパティの値に対する要求をオーバーライドします。プロパティが見つからなかった場合、このメソッドは <codeph>undefined</codeph> を返します。この動作について詳しくは、ECMA-262 言語仕様 Edition 3 のセクション 8.6.2.1 を参照してください。
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="../../statements.html#get"><linktext>get ステートメント</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"><linktext>ECMA-262 Language Specification, 3rd Edition, section 8.6.2.1</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:hasProperty"><apiName>hasProperty</apiName><shortdesc>
	 オブジェクトが特定のプロパティを持っているかどうかをプロパティ名によってチェックする要求をオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>パラメーターが存在する場合は <codeph>true</codeph>、それ以外は <codeph>false</codeph> を返します。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>チェックするプロパティの名前です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 オブジェクトが特定のプロパティを持っているかどうかをプロパティ名によってチェックする要求をオーバーライドします。 
     
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#Object/hasOwnProperty()"><linktext>Object.hasOwnProperty()</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"><linktext>ECMA-262 Language Specification, 3rd Edition, section 8.6.2.4</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:isAttribute"><apiName>isAttribute</apiName><shortdesc>
	 指定された QName が属性としてマークされているかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>属性としてマークされている QName が <codeph>name</codeph> の属性である場合、<codeph>true</codeph> を返します。
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>チェックするプロパティの名前です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定された QName が属性としてマークされているかどうかを確認します。 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="#QName"><linktext>QName クラス</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:nextName"><apiName>nextName</apiName><shortdesc>
	 インデックス番号を使用して、プロキシになるオブジェクトのプロパティを列挙してプロパティ名を取得できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>String - プロパティの名前です。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>オブジェクトのプロパティを示す、0 から始まるインデックス値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 インデックス番号を使用して、プロキシになるオブジェクトのプロパティを列挙してプロパティ名を取得できます。ただし、Proxy クラス自身のプロパティを列挙することはできません。この関数では、目的の値を取得するために、オブジェクトに対する <codeph>for...in</codeph> および <codeph>for each..in</codeph> ループの実装がサポートされています。
	 <p>例（<codeph>Proxy.nextNameIndex()</codeph> のコード）：</p>
     <codeblock>
     protected var _item:Array; // array of object's properties
     override flash_proxy function nextNameIndex (index:int):int {
         // initial call
         if (index == 0) {
             _item = new Array();
             for (var x:~~ in _target) {
                _item.push(x);
             }
         }
     
         if (index &lt; _item.length) {
             return index + 1;
         } else {
             return 0;
         }
     }
     override flash_proxy function nextName(index:int):String {
         return _item[index - 1];
     }
     </codeblock>
 	 
 	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#Proxy/nextNameIndex()"><linktext>Proxy.nextNameIndex()</linktext></link><link href="flash.utils.xml#Proxy/nextValue()"><linktext>Proxy.nextValue()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:nextNameIndex"><apiName>nextNameIndex</apiName><shortdesc>
	 インデックス番号を使用して、プロキシになるオブジェクトのプロパティを列挙できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>プロパティのインデックス値です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>列挙を開始する位置を示す、0 から始まるインデックス値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 インデックス番号を使用して、プロキシになるオブジェクトのプロパティを列挙できます。ただし、Proxy クラス自身のプロパティを列挙することはできません。この関数では、目的の値を取得するために、オブジェクトに対する <codeph>for...in</codeph> および <codeph>for each..in</codeph> ループの実装がサポートされています。
	 <p>次に実際の使用例を示します。</p>
	 <codeblock>
     protected var _item:Array; // array of object's properties
     override flash_proxy function nextNameIndex (index:int):int {
         // initial call
         if (index == 0) {
             _item = new Array();
             for (var x:~~ in _target) {
                _item.push(x);
             }
         }
     
         if (index &lt; _item.length) {
             return index + 1;
         } else {
             return 0;
         }
     }
     override flash_proxy function nextName(index:int):String {
         return _item[index - 1];
     }
	 </codeblock>
     
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#Proxy/nextName()"><linktext>Proxy.nextName()</linktext></link><link href="flash.utils.xml#Proxy/nextValue()"><linktext>Proxy.nextValue()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:nextValue"><apiName>nextValue</apiName><shortdesc>
 	 インデックス番号を使用して、プロキシになるオブジェクトのプロパティを列挙してプロパティ値を取得できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiDesc>プロパティの値です。
	 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>オブジェクトのプロパティを示す、0 から始まるインデックス値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
 	 インデックス番号を使用して、プロキシになるオブジェクトのプロパティを列挙してプロパティ値を取得できます。ただし、Proxy クラス自身のプロパティを列挙することはできません。この関数では、目的の値を取得するために、オブジェクトに対する <codeph>for...in</codeph> および <codeph>for each..in</codeph> ループの実装がサポートされています。
	 
	 <p>例（<codeph>Proxy.nextNameIndex()</codeph> のコード：</p>
     <codeblock>
     protected var _item:Array; // array of object's properties
     override flash_proxy function nextNameIndex (index:int):int {
         // initial call
         if (index == 0) {
             _item = new Array();
             for (var x:~~ in _target) {
                _item.push(x);
             }
         }
     
         if (index &lt; _item.length) {
             return index + 1;
         } else {
             return 0;
         }
     }
     override flash_proxy function nextName(index:int):String {
         return _item[index - 1];
     }
     </codeblock>   
     </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#Proxy/nextNameIndex()"><linktext>Proxy.nextNameIndex()</linktext></link><link href="flash.utils.xml#Proxy/nextName()"><linktext>Proxy.nextName()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Proxy:flash_proxy:setProperty"><apiName>setProperty</apiName><shortdesc>
	 プロパティの値を変更する呼び出しをオーバーライドします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="flash_proxy"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value=""/><apiDesc>変更するプロパティの名前です。
	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>プロパティに設定する値です。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 プロパティの値を変更する呼び出しをオーバーライドします。プロパティが見つからなかった場合、このメソッドは、指定された名前および値を使用してプロパティを作成します。 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="../../statements.html#set"><linktext>set ステートメント</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-262.htm"><linktext>ECMA-262 Language Specification, 3rd Edition, section 8.6.2.2</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flash.utils:ByteArray"><apiName>ByteArray</apiName><shortdesc>
 ByteArray クラスには、バイナリデータの読み取り、書き込み、および操作を最適化するメソッドおよびプロパティがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ByteArray クラスには、バイナリデータの読み取り、書き込み、および操作を最適化するメソッドおよびプロパティがあります。
 
 <p><i>注意：</i>ByteArray クラスは、バイトレベルでデータにアクセスする必要がある上級の開発者を対象としています。</p>
 
 <p>メモリ内データはバイトの詰め込み配列（最もコンパクトなデータ型の表現）ですが、ByteArray クラスのインスタンスは標準 <codeph>[]</codeph>（配列アクセス）演算子を使用して操作できます。また、URLStream および Socket クラスと同じメソッドを使用し、メモリ内ファイルとして読み取りおよび書き込みを行うことができます。</p>
 
 <p>さらに、AMF（Action Message Format）オブジェクトの直列化に加えて、zlib 圧縮および解凍もサポートされています。</p>
 
 <p>ByteArray クラスを使用すると、以下の操作が可能です。
 
 <ul>
 
  <li>カスタム プロトコルを作成してサーバーに接続</li>
 
  <li>独自の URLEncoder および URLDecoder の作成</li>
 
  <li platform="actionscript">独自の AMF および Remoting パケットの作成</li>
 
  <li>データ型を使用したデータのサイズの最適化</li>
 
 	 <li>Adobe<sup>®</sup> AIR<sup>®</sup> 内のファイルからロードされたバイナリデータの操作</li>
 
 </ul>
 </p>
 
 </apiDesc><example conref="examples\ByteArrayExample.as"> 次の例では、クラス <codeph>ByteArrayExample</codeph> を使用して、ブールおよび pi の倍精度の浮動小数表現をバイト配列に書き込みます。ここでは以下の手順を実行します。
 <ol>
     <li>新しい ByteArray オブジェクトインスタンス <codeph>byteArr</codeph> を宣言します。</li>
     <li>バイトと等価のブール値 <codeph>false</codeph> を書き込み、長さをチェックしてその値を戻します。</li>
     <li>pi の数値と等価の倍精度の浮動小数を書き込みます。</li>
     <li>バイト配列に書き込まれた 9 バイトを 1 つずつ読み出します。</li>
 </ol>
 
 <p><b>注意：</b><codeph>trace()</codeph> がバイトに対して呼び出されると、バイト配列に保存された 10 進表現のバイトが出力されます。</p>
 
 <p>コードセグメントが最後に追加され、ファイルの終端エラーをチェックして、バイトストリームが最後まで読み取られないことを確認します。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.ByteArray;
    import flash.errors.EOFError;

    public class ByteArrayExample extends Sprite {        
        public function ByteArrayExample() {
            var byteArr:ByteArray = new ByteArray();

            byteArr.writeBoolean(false);
            trace(byteArr.length);            // 1
            trace(byteArr[0]);            // 0

            byteArr.writeDouble(Math.PI);
            trace(byteArr.length);            // 9
            trace(byteArr[0]);            // 0
            trace(byteArr[1]);            // 64
            trace(byteArr[2]);            // 9
            trace(byteArr[3]);            // 33
            trace(byteArr[4]);            // 251
            trace(byteArr[5]);            // 84
            trace(byteArr[6]);            // 68
            trace(byteArr[7]);            // 45
            trace(byteArr[8]);            // 24
            
            byteArr.position = 0;

            try {
                trace(byteArr.readBoolean() == false); // true
            } 
            catch(e:EOFError) {
                trace(e);           // EOFError: Error #2030: End of file was encountered.
            }
            
            try {
                trace(byteArr.readDouble());        // 3.141592653589793
            }
            catch(e:EOFError) {
                trace(e);           // EOFError: Error #2030: End of file was encountered.
            }
            
            try {
                trace(byteArr.readDouble());
            } 
            catch(e:EOFError) {
                trace(e);            // EOFError: Error #2030: End of file was encountered.
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="../../operators.html#array_access"><linktext>[] (array access)</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket クラス</linktext></link><link href="flash.net.xml#URLStream"><linktext>URLStream クラス</linktext></link></related-links><apiConstructor id="flash.utils:ByteArray:ByteArray"><apiName>ByteArray</apiName><shortdesc>
 バイトの詰め込み配列を表す ByteArray インスタンスを作成します。これにより、このクラスのメソッドおよびプロパティを使用して、データストレージおよびデータストリームを最適化できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
 バイトの詰め込み配列を表す ByteArray インスタンスを作成します。これにより、このクラスのメソッドおよびプロパティを使用して、データストレージおよびデータストリームを最適化できます。
 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.utils:ByteArray:clear"><apiName>clear</apiName><shortdesc> 
	 バイト配列の内容を消去し、長さと位置のプロパティを 0 にリセットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	 バイト配列の内容を消去し、<codeph>長さ</codeph>と<codeph>位置</codeph>のプロパティを 0 にリセットします。このメソッドを明示的に呼び出すと、ByteArray インスタンスによって使用されるメモリを解放します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:compress"><apiName>compress</apiName><shortdesc>
	 バイト配列を圧縮します。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.compress, compress
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>algorithm</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc>圧縮時に使用する圧縮アルゴリズムです。有効な値は、CompressionAlgorithm クラスに定数で定義されています。デフォルトでは zlib 形式が使用されます。<ph platform="actionscript">このパラメーターは、Adobe AIR で実行しているコンテンツに対してのみ有効です。 Flash Player はデフォルトの zlib アルゴリズムのみをサポートしているため、このパラメーターの値を渡そうとすると例外をスローします。</ph><codeph>compress( <ph platform="javascript">air.</ph>CompressionAlgorithm.DEFLATE)</codeph> の呼び出しには、<codeph>deflate()</codeph> メソッドの呼び出しと同じ効果があります。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイト配列を圧縮します。バイト配列全体が圧縮されます。Adobe AIR で実行しているコンテンツの場合、CompressionAlgorithm クラスに定義されている値を <codeph>algorithm</codeph> パラメーターとして渡すことにより、圧縮アルゴリズムを指定できます。<ph platform="actionscript">Flash Player は、デフォルトの zlib アルゴリズムのみをサポートします。</ph>
	 
	 <p>呼び出し後、ByteArray の <codeph>length</codeph> プロパティが新しい長さに設定されます。<codeph>position</codeph> プロパティがバイト配列の末尾に設定されます。</p>
	 
	 <p>zlib 圧縮データ形式の詳細については、<xref href="http://www.ietf.org/rfc/rfc1950.txt" scope="external">http://www.ietf.org/rfc/rfc1950.txt</xref> の説明を参照してください。</p>
	 
	 <p>deflate 圧縮アルゴリズムについては、<xref href="http://www.ietf.org/rfc/rfc1951.txt" scope="external">http://www.ietf.org/rfc/rfc1951.txt</xref> の説明を参照してください。</p>
	 
	 <p>deflate 圧縮アルゴリズムは、zlib、gzip、一部の zip 実装などの様々な圧縮形式で使用されています。これらの圧縮形式のいずれかを使用してデータを圧縮した場合、その圧縮形式データ（.zip ファイルなど）には、元のデータの圧縮されたバージョンに加えてメタデータ情報も保存されます。各種ファイル形式に含まれるメタデータの種類の例としては、ファイル名、ファイル修正日時、元のファイルサイズ、オプションのコメント、チェックサムデータなどがあります。</p>
	 
	 <p>例えば、zlib アルゴリズムを使用して ByteArray を圧縮すると、生成された ByteArray の構造はある特定のフォーマットになります。特定のバイト位置に圧縮データに関するメタデータが格納され、それ以外のバイト位置に元の ByteArray データの実際に圧縮されたバージョンが格納されます。zlib 圧縮データ形式の仕様で規定されているように、このバイト部分（つまり、元のデータの圧縮されたバージョンを含む部分）は deflate アルゴリズムを使用して圧縮されます。したがって、それらのバイトは、元の ByteArray で <codeph>compress(<ph outputclass="javascript">air.</ph>CompressionAlgorithm.DEFLATE)</codeph> を呼び出した結果と同じです。ただし、<codeph>compress(<ph outputclass="javascript">air.</ph>CompressionAlgorithm.ZLIB)</codeph> からの結果には余分なメタデータが含まれており、<codeph>compress(<ph platform="javascript">air.</ph>CompressionAlgorithm.DEFLATE)</codeph> の結果には元の ByteArray データの圧縮されたバージョンのみが含まれ、それ以外には何も含まれません。</p>
	 
	 <p>したがって、deflate 形式を使用して ByteArray インスタンスのデータを gzip や zip などの特定の形式に圧縮する場合は、単に <codeph>compress(<ph platform="javascript">air.</ph>CompressionAlgorithm.DEFLATE)</codeph> を呼び出すだけでは目的を達することはできません。圧縮形式の仕様に従い、適切なメタデータと deflate 形式で圧縮されたデータで構成された ByteArray を作成する必要があります。同様に、gzip や zip などの形式で圧縮されたデータを解凍する場合、単にそのデータに対して <codeph>uncompress(<ph platform="javascript">air.</ph>CompressionAlgorithm.DEFLATE)</codeph> を呼び出すだけでは不十分です。まず、圧縮データからメタデータを分離してから、deflate 形式を使用して圧縮データを解凍する必要があります。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#ByteArray/uncompress()"><linktext>uncompress()</linktext></link><link href="flash.utils.xml#CompressionAlgorithm"><linktext>flash.utils.CompressionAlgorithm</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:deflate"><apiName>deflate</apiName><shortdesc>
	 deflate 圧縮アルゴリズムを使用してバイト配列を圧縮します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 deflate 圧縮アルゴリズムを使用してバイト配列を圧縮します。バイト配列全体が圧縮されます。
	 
	 <p>呼び出し後、ByteArray の <codeph>length</codeph> プロパティが新しい長さに設定されます。<codeph>position</codeph> プロパティがバイト配列の末尾に設定されます。</p>
	 
	 <p>deflate 圧縮アルゴリズムについては、<xref href="http://www.ietf.org/rfc/rfc1951.txt" scope="external">http://www.ietf.org/rfc/rfc1951.txt</xref> の説明を参照してください。</p>
	 
	 <p>deflate 形式を使用して ByteArray インスタンスのデータを gzip や zip などの特定の形式に圧縮する場合は、単に <codeph>deflate()</codeph> を呼び出すだけでは目的を達することはできません。圧縮形式の仕様に従い、適切なメタデータと deflate 形式で圧縮されたデータで構成された ByteArray を作成する必要があります。同様に、gzip や zip などの形式で圧縮されたデータを解凍する場合、単にそのデータに対して <codeph>inflate()</codeph> を呼び出すだけでは不十分です。まず、圧縮データからメタデータを分離してから、deflate 形式を使用して圧縮データを解凍する必要があります。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#ByteArray/inflate()"><linktext>inflate()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:inflate"><apiName>inflate</apiName><shortdesc>
	 deflate 圧縮アルゴリズムを使用してバイト配列を圧縮します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.uncompress, uncompress
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>データが有効な圧縮データではありません。指定された圧縮アルゴリズムと同じアルゴリズムを使用して圧縮されていません。
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 deflate 圧縮アルゴリズムを使用してバイト配列を圧縮します。同じアルゴリズムを使用してバイト配列が圧縮されている必要があります。 
	 
	 <p>呼び出し後、ByteArray の <codeph>length</codeph> プロパティが新しい長さに設定されます。<codeph>position</codeph> プロパティが 0 に設定されます。</p>
	 
	 <p>deflate 圧縮アルゴリズムについては、<xref href="http://www.ietf.org/rfc/rfc1951.txt" scope="external">http://www.ietf.org/rfc/rfc1951.txt</xref> の説明を参照してください。</p>
	 
	 <p>deflate 圧縮アルゴリズムを使用する形式で圧縮されたデータ（gzip 形式や zip 形式のデータ）を解凍する場合、圧縮形式データを含む ByteArray に対して単に <codeph>inflate()</codeph> を呼び出してもデータは解凍されません。まず、圧縮データ形式の構成要素であるメタデータを実際の圧縮データから分離する必要があります。詳細については、<codeph>compress()</codeph> メソッドの説明を参照してください。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#ByteArray/deflate()"><linktext>deflate()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:readBoolean"><apiName>readBoolean</apiName><shortdesc>
	 バイトストリームからブール値を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readBoolean, readBoolean
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>バイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> が返されます。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームからブール値を読み取ります。1 バイトが読み取られ、バイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> が返されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readByte"><apiName>readByte</apiName><shortdesc>
	 バイトストリームから符号付きバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readByte, readByte
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>-128 ～ 127 の整数です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから符号付きバイトを読み取ります。
	 <p>戻り値は -128 ～ 127 の範囲です。</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readBytes"><apiName>readBytes</apiName><shortdesc>
	 バイトストリームから、length パラメーターで指定したデータバイト数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readBytes, readBytes
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
     </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiException><apiDesc>
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データの読み込み先の ByteArray オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>読み取ったデータが書き込まれる <codeph>bytes</codeph> 内のオフセット（位置）です。
	 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>読み取るバイト数です。デフォルト値の 0 に設定すると、すべてのデータが読み取られます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームから、<codeph>length</codeph> パラメーターで指定したデータバイト数を読み取ります。バイトは、<codeph>bytes</codeph> パラメーターによって指定された ByteArray オブジェクトに読み取られ、<codeph>offset</codeph> によって指定された位置から始まるターゲット ByteArray に書き込まれます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readDouble"><apiName>readDouble</apiName><shortdesc>
	 バイトストリームから IEEE 754 倍精度（64 ビット）浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readDouble, readDouble
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>倍精度（64 ビット）浮動小数点数です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから IEEE 754 倍精度（64 ビット）浮動小数点数を読み取ります。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readFloat"><apiName>readFloat</apiName><shortdesc>
	 バイトストリームから IEEE 754 単精度（32 ビット）浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readFloat, readFloat
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>単精度（32 ビット）浮動小数点数です。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから IEEE 754 単精度（32 ビット）浮動小数点数を読み取ります。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readInt"><apiName>readInt</apiName><shortdesc>
	 バイトストリームから符号付き 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readInt, readInt
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>-2147483648 ～ 2147483647 の 32 ビット符号付き整数です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから符号付き 32 ビット整数を読み取ります。
	 
         <p>戻り値は -2147483648 ～ 2147483647 の範囲です。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readMultiByte"><apiName>readMultiByte</apiName><shortdesc>
	 指定した文字セットを使用して、バイトストリームから指定した長さのマルチバイトストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readMultiByte, readMultiByte
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 エンコードされたストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>バイトストリームから読み取るバイト数です。
	 </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift-jis"</codeph>、<codeph>"cn-gb"</codeph>、および <codeph>"iso-8859-1"</codeph> などがあります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。 
     <p><b>注意：</b> <codeph>charSet</codeph> パラメーターの値が現在のシステムによって認識されない場合、アプリケーションはシステムのデフォルトコードページを文字セットとして使用します。例えば、<codeph>charSet</codeph> パラメーターの指定で、<codeph>myTest.readMultiByte(22, "iso-8859-01")</codeph> のように、<codeph>01</codeph> を <codeph>1</codeph> の代わりに使用した場合、その文字セットパラメーターは開発マシンでは認識されるかもしれませんが、別のマシンでは認識されない可能性があります。もう一方のマシンでは、アプリケーションがシステムのデフォルトコードページを使用することになります。</p>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した文字セットを使用して、バイトストリームから指定した長さのマルチバイトストリングを読み取ります。
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readObject"><apiName>readObject</apiName><shortdesc>
	 バイト配列から AMF 直列化形式でエンコードされたオブジェクトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readObject, readObject
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。	 
	 
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>非直列化されたオブジェクトです。
	 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	 バイト配列から AMF 直列化形式でエンコードされたオブジェクトを読み取ります。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:readShort"><apiName>readShort</apiName><shortdesc>
	 バイトストリームから符号付き 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readShort, readShort
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>-32768 ～ 32767 の 16 ビット符号付き整数です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから符号付き 16 ビット整数を読み取ります。
	 
	 <p>戻り値は -32768 ～ 32767 の範囲です。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readUTF"><apiName>readUTF</apiName><shortdesc>
	 バイトストリームから UTF-8 ストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readUTF, readUTF
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 エンコードされたストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから UTF-8 ストリングを読み取ります。このストリングには、バイト単位の長さを示す符号なし short が前に付いているものと見なされます。
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#IDataInput/readUTF()"><linktext>flash.utils.IDataInput.readUTF()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:readUTFBytes"><apiName>readUTFBytes</apiName><shortdesc>
	 バイトストリームまたはバイト配列から、length パラメーターで指定した UTF-8 バイトのシーケンスを読み取り、ストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readUTFBytes, readUTFBytes
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定した長さの UTF-8 バイトで構成するストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>UTF-8 バイトの長さを示す符号なし short です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームまたはバイト配列から、<codeph>length</codeph> パラメーターで指定した UTF-8 バイトのシーケンスを読み取り、ストリングを返します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readUnsignedByte"><apiName>readUnsignedByte</apiName><shortdesc>
	 バイトストリームから符号なしバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readUnsignedByte, readUnsignedByte
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>0 ～ 255 の 32 ビット符号なし整数です。
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから符号なしバイトを読み取ります。
	 
	 <p>戻り値は 0 ～ 255 の範囲です。 </p>	
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readUnsignedInt"><apiName>readUnsignedInt</apiName><shortdesc>
	 バイトストリームから符号なし 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readUnsignedInt, readUnsignedInt
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>0 ～ 4294967295 の 32 ビット符号なし整数です。
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから符号なし 32 ビット整数を読み取ります。
	 
	 <p>戻り値は 0 ～ 4294967295 の範囲です。 </p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:readUnsignedShort"><apiName>readUnsignedShort</apiName><shortdesc>
	 バイトストリームから符号なし 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.readUnsignedShort, readUnsignedShort
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>0 ～ 65535 の 16 ビット符号なし整数です。
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイトストリームから符号なし 16 ビット整数を読み取ります。
	 
	 <p>戻り値は 0 ～ 65535 の範囲です。 </p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:toString"><apiName>toString</apiName><shortdesc>
	 バイト配列をストリングに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.toString, toString
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>バイト配列のストリング表現です。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 バイト配列をストリングに変換します。配列のデータが Unicode バイト順マークで開始する場合、アプリケーションではストリングの変換時に、そのマークが使用されます。<codeph>System.useCodePage</codeph> を <codeph>true</codeph> に設定すると、アプリケーションでは、変換時の配列のデータは現在のシステムコードページにあると見なされます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:uncompress"><apiName>uncompress</apiName><shortdesc>
	 バイト配列を解凍します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.uncompress, uncompress
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>データが有効な圧縮データではありません。指定された圧縮アルゴリズムと同じアルゴリズムを使用して圧縮されていません。
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>algorithm</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc>解凍時に使用する圧縮アルゴリズムです。データの圧縮に使用されたものと同じ圧縮アルゴリズムを指定する必要があります。有効な値は、CompressionAlgorithm クラスに定数で定義されています。デフォルトでは zlib 形式が使用されます。このパラメーターは、Adobe AIR で実行しているコンテンツに対してのみ有効です。<ph platform="actionscript">Flash Player はデフォルトの zlib アルゴリズムのみをサポートしているため、このパラメーターの値を渡そうとすると例外をスローします。</ph>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイト配列を解凍します。Adobe AIR で実行しているコンテンツの場合、CompressionAlgorithm クラスに定義されている値を <codeph>algorithm</codeph> パラメーターとして渡すことにより、圧縮アルゴリズムを指定できます。 同じアルゴリズムを使用してバイト配列が圧縮されている必要があります。<ph platform="actionscript">Flash Player は、デフォルトの zlib アルゴリズムのみをサポートします。</ph>
	 
	 <p>呼び出し後、ByteArray の <codeph>length</codeph> プロパティが新しい長さに設定されます。<codeph>position</codeph> プロパティが 0 に設定されます。</p>
	 
	 <p>zlib 圧縮データ形式の詳細については、<xref href="http://www.ietf.org/rfc/rfc1950.txt" scope="external">http://www.ietf.org/rfc/rfc1950.txt</xref> の説明を参照してください。</p>
	 
	 <p>deflate 圧縮アルゴリズムについては、<xref href="http://www.ietf.org/rfc/rfc1951.txt" scope="external">http://www.ietf.org/rfc/rfc1951.txt</xref> の説明を参照してください。</p>
	 
	 <p>deflate 圧縮アルゴリズムを使用する形式で圧縮されたデータ（gzip 形式や zip 形式のデータ）を解凍する場合、圧縮形式データを含む ByteArray に対して <codeph>uncompress(CompressionAlgorithm.DEFLATE)</codeph> を呼び出してもデータは解凍されません。まず、圧縮データ形式の構成要素であるメタデータを実際の圧縮データから分離する必要があります。詳細については、<codeph>compress()</codeph> メソッドの説明を参照してください。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#ByteArray/compress()"><linktext>compress()</linktext></link><link href="flash.utils.xml#CompressionAlgorithm"><linktext>flash.utils.CompressionAlgorithm</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:writeBoolean"><apiName>writeBoolean</apiName><shortdesc>
	 ブール値を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeBoolean, writeBoolean
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>書き込むバイトを決定するブール値です。このパラメーターが <codeph>true</codeph> の場合は 1、<codeph>false</codeph> の場合は 0 がメソッドによって書き込まれます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ブール値を書き込みます。<codeph>value</codeph> パラメーターに従って、1 バイトが書き込まれます。<codeph>true</codeph> の場合は 1、<codeph>false</codeph> の場合は 0 のいずれかが書き込まれます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeByte"><apiName>writeByte</apiName><shortdesc>
	 バイトストリームにバイトを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeByte, writeByte
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>32 ビット整数です。バイトストリームに下位 8 ビットが書き込まれます。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームにバイトを書き込みます。 
	 <p>パラメーターの下位 8 ビットが使用されます。上位 24 ビットは無視されます。 </p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeBytes"><apiName>writeBytes</apiName><shortdesc>
	 指定したバイト配列の offset（0 から始まるインデックス値）バイトから開始される length バイトのシーケンス bytes をバイトストリームに書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeBytes, writeBytes
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>ByteArray オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>書き込みを開始する配列の位置を示す、0 から始まるインデックスです。
	 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>書き込むバッファーの長さを示す符号付きの整数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定したバイト配列の <codeph>offset</codeph>（0 から始まるインデックス値）バイトから開始される <codeph>length</codeph> バイトのシーケンス <codeph>bytes</codeph> をバイトストリームに書き込みます。
	 
	 <p><codeph>length</codeph> パラメーターを省略すると、デフォルトの長さの 0 が使用され、メソッドによって <codeph>offset</codeph> から開始されるバッファー全体が書き込まれます。 <codeph>offset</codeph> パラメーターも省略した場合は、バッファー全体が書き込まれます。 </p> <p><codeph>offset</codeph> または <codeph>length</codeph> が範囲外の場合、これらは <codeph>bytes</codeph> 配列の最初と最後に固定されます。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeDouble"><apiName>writeDouble</apiName><shortdesc>
	 バイトストリームに IEEE 754 倍精度（64 ビット）浮動小数点数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeDouble, writeDouble
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>倍精度（64 ビット）浮動小数点数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに IEEE 754 倍精度（64 ビット）浮動小数点数を書き込みます。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeFloat"><apiName>writeFloat</apiName><shortdesc>
	 バイトストリームに IEEE 754 単精度（32 ビット）浮動小数点数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeFloat, writeFloat
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>単精度（32 ビット）浮動小数点数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに IEEE 754 単精度（32 ビット）浮動小数点数を書き込みます。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeInt"><apiName>writeInt</apiName><shortdesc>
	 バイトストリームに 32 ビット符号付き整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeInt, writeInt
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>バイトストリームに書き込む整数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに 32 ビット符号付き整数を書き込みます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeMultiByte"><apiName>writeMultiByte</apiName><shortdesc>
	 指定した文字セットを使用して、バイトストリームにマルチバイトストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeMultiByte, writeMultiByte
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
	 </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift-jis"</codeph>、<codeph>"cn-gb"</codeph>、および <codeph>"iso-8859-1"</codeph> などがあります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した文字セットを使用して、バイトストリームにマルチバイトストリングを書き込みます。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeObject"><apiName>writeObject</apiName><shortdesc>
	 バイト配列に AMF 直列化形式でオブジェクトを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeObject, writeObject
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value=""/><apiDesc>直列化するオブジェクトです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイト配列に AMF 直列化形式でオブジェクトを書き込みます。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:ByteArray:writeShort"><apiName>writeShort</apiName><shortdesc>
	 バイトストリームに 16 ビット整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeShort, writeShort
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>バイトストリームに下位 16 ビットが書き込まれる 32 ビット整数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに 16 ビット整数を書き込みます。パラメーターの下位 16 ビットが使用されます。上位 16 ビットは無視されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeUTF"><apiName>writeUTF</apiName><shortdesc>
	 バイトストリームに UTF-8 ストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeUTF, writeUTF
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>長さが 65535 よりも大きい場合。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに UTF-8 ストリングを書き込みます。最初に UTF-8 ストリングの長さがバイト単位で 16 ビット整数として書き込まれ、その後にストリングの文字を表すバイトが続きます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeUTFBytes"><apiName>writeUTFBytes</apiName><shortdesc>
	 バイトストリームに UTF-8 ストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeUTFBytes, writeUTFBytes
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに UTF-8 ストリングを書き込みます。<codeph>writeUTF()</codeph> メソッドと似ていますが、<codeph>writeUTFBytes()</codeph> では、ストリングに 16 ビット長の接頭辞が付きません。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:ByteArray:writeUnsignedInt"><apiName>writeUnsignedInt</apiName><shortdesc>
	 バイトストリームに 32 ビット符号なし整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.writeUnsignedInt, writeUnsignedInt
	  
	  </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>バイトストリームに書き込む符号なし整数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームに 32 ビット符号なし整数を書き込みます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.utils:ByteArray:bytesAvailable:get"><apiName>bytesAvailable</apiName><shortdesc>
	 バイト配列の現在の位置から最後までの読み取り可能なデータのバイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>available, bytes, position 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 バイト配列の現在の位置から最後までの読み取り可能なデータのバイト数です。
	 
	 <p>ByteArray オブジェクトにアクセスするたびに <codeph>bytesAvailable</codeph> プロパティと読み取りメソッドを組み合わせて使用すれば、有効なデータを確実に読み取ることができます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:ByteArray:defaultObjectEncoding:get"><apiName>defaultObjectEncoding</apiName><shortdesc>
	 新しい ByteArray インスタンスに使用する ByteArray クラス用のデフォルトオブジェクトのエンコードを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.defaultObjectEncoding, defaultObjectEncoding
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 新しい ByteArray インスタンスに使用する ByteArray クラス用のデフォルトオブジェクトのエンコードを表します。新しい ByteArray インスタンスを作成すると、そのインスタンスのエンコードが <codeph>defaultObjectEncoding</codeph> の値で開始します。<codeph>defaultObjectEncoding</codeph> プロパティは <codeph>ObjectEncoding.AMF3</codeph> に初期化されます。
	 
	 
	 <p>バイナリデータからオブジェクトの書き込みまたは読み取りをすると、<codeph>objectEncoding</codeph> 値を使用して、ActionScript 3.0、ActionScript 2.0、または ActionScript 1.0 の形式を使用する必要があるかどうかが特定されます。この値は、ObjectEncoding クラスの定数です。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link><link href="flash.utils.xml#ByteArray/objectEncoding"><linktext>flash.utils.ByteArray.objectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.utils:ByteArray:endian:get"><apiName>endian</apiName><shortdesc>
	 データのバイト順序（Endian.BIG_ENDIAN または Endian.LITTLE_ENDIAN）を変更するか、読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 データのバイト順序（<codeph>Endian.BIG_ENDIAN</codeph> または <codeph>Endian.LITTLE_ENDIAN</codeph>）を変更するか、読み取ります。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Endian"><linktext>Endian クラス</linktext></link></related-links></apiValue><apiValue id="flash.utils:ByteArray:length:get"><apiName>length</apiName><shortdesc>
	 ByteArray オブジェクトのバイト単位の長さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.length, length
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ByteArray オブジェクトのバイト単位の長さです。
	 
	 <p>この長さに現在の長さよりも大きい値を設定すると、バイト配列の右側は 0 で埋められます。</p>
	 
	 <p>この長さに現在の長さよりも小さい値を設定すると、バイト配列は切り詰められます。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:ByteArray:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
	 ByteArray インスタンスへの書き込み、または ByteArray インスタンスからの読み取り時の、ActionScript 3.0、ActionScript 2.0、または ActionScript 1.0 の形式を使用する必要があるかどうかの特定に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.objectEncoding, objectEncoding
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ByteArray インスタンスへの書き込み、または ByteArray インスタンスからの読み取り時の、ActionScript 3.0、ActionScript 2.0、または ActionScript 1.0 の形式を使用する必要があるかどうかの特定に使用されます。この値は、ObjectEncoding クラスの定数です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link><link href="flash.utils.xml#ByteArray/defaultObjectEncoding"><linktext>flash.utils.ByteArray.defaultObjectEncoding</linktext></link></related-links></apiValue><apiValue id="flash.utils:ByteArray:position:get"><apiName>position</apiName><shortdesc>
	 ByteArray オブジェクト内でのファイルポインターの現在の位置をバイト単位で移動するか、または現在の位置をバイト単位で返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>ByteArray, ByteArray.getFilePointer, 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ByteArray オブジェクト内でのファイルポインターの現在の位置をバイト単位で移動するか、または現在の位置をバイト単位で返します。これは、次に読み取りメソッドまたは書き込みメソッドを呼び出したときに読み取りまたは書き込みが開始されるポイントです。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.utils:IDataOutput"><apiName>IDataOutput</apiName><shortdesc>
IDataOutput インターフェイスには、バイナリデータを書き込む一連のメソッドがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
IDataOutput インターフェイスには、バイナリデータを書き込む一連のメソッドがあります。このインターフェイスは、バイナリデータを読み取る IDataInput インターフェイスと同様に I/O 処理を行います。IDataOutput インターフェイスは、FileStream クラス、Socket クラスおよび ByteArray クラスで実装されています。
<p>IDataInput および IDataOutput 操作のすべては、デフォルトでは "bigEndian"（シーケンスの最上位バイトが最下位または最初の記憶領域アドレスに保存されます）で、ブロッキングは発生しません。 </p>
<p>データの書き込み時ではなく、読み取り時にのみ符号拡張が問題となります。したがって、<codeph>IDataInput.readUnsignedByte()</codeph> と <codeph>IDataInput.readUnsignedShort()</codeph> を処理するために、書き込みメソッドを分割する必要はありません。つまり、次のようになります。</p>
<ul>
  <li><codeph>IDataOutput.writeByte()</codeph> は、<codeph>IDataInput.readUnsignedByte()</codeph> および <codeph>IDataInput.readByte()</codeph> と共に使用します。</li>
  <li><codeph>IDataOutput.writeShort()</codeph> は、<codeph>IDataInput.readUnsignedShort()</codeph> および <codeph>IDataInput.readShort()</codeph> と共に使用します。</li>
</ul>

</apiDesc><example conref="examples\DataOutputExample.as"> 次の例では、クラス <codeph>DataOutputExample</codeph> を使用して、ブールおよび pi の倍精度の浮動小数表現をバイト配列に書き込みます。ここでは以下の手順を実行します。
 <ol>
     <li>新しい ByteArray オブジェクトインスタンス <codeph>byteArr</codeph> を宣言します。</li>
     <li>バイトと等価のブール値 <codeph>false</codeph> および pi の平方根と等価の倍精度の浮動小数を書き込みます。</li>
     <li>ブール値および倍精度浮動小数点数を読み出します。</li>
 </ol>
 
 <p>コードセグメントが最後に追加され、ファイルの終端エラーをチェックして、バイトストリームが最後まで読み取られないことを確認します。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.ByteArray;
    import flash.errors.EOFError;

    public class DataOutputExample extends Sprite {        
        public function DataOutputExample() {
            var byteArr:ByteArray = new ByteArray();

            byteArr.writeBoolean(false);
            byteArr.writeDouble(Math.PI);
            
            byteArr.position = 0;

            try {
                trace(byteArr.readBoolean()); // false
            } 
            catch(e:EOFError) {
                trace(e);           // EOFError: Error #2030: End of file was encountered.
            }
                        
            try {
                trace(byteArr.readDouble());    // 3.141592653589793
            } 
            catch(e:EOFError) {
                trace(e);           // EOFError: Error #2030: End of file was encountered.
            }
            
            try {
                trace(byteArr.readDouble());
            } 
            catch(e:EOFError) {
                trace(e);        // EOFError: Error #2030: End of file was encountered.
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#IDataInput"><linktext>IDataInput インターフェイス</linktext></link><link href="flash.utils.xml#IDataOutput/endian"><linktext>endian</linktext></link><link href="flash.filesystem.xml#FileStream"><linktext>FileStream クラス</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket クラス</linktext></link><link href="flash.net.xml#URLStream"><linktext>URLStream クラス</linktext></link><link href="flash.utils.xml#ByteArray"><linktext>ByteArray クラス</linktext></link></related-links><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeBoolean"><apiName>writeBoolean</apiName><shortdesc>
	 ブール値を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>書き込むバイトを決定するブール値です。このパラメーターが <codeph>true</codeph> の場合は 1、<codeph>false</codeph> の場合は 0 が書き込まれます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ブール値を書き込みます。<codeph>value</codeph> パラメーターに従って、1 バイトが書き込まれます。<codeph>true</codeph> の場合は 1、<codeph>false</codeph> の場合は 0 のいずれかが書き込まれます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeByte"><apiName>writeByte</apiName><shortdesc>
	 バイトを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>整数としてのバイト値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトを書き込みます。パラメーターの下位 8 ビットが使用されます。上位 24 ビットは無視されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeBytes"><apiName>writeBytes</apiName><shortdesc>
	 指定したバイト配列（bytes）の offset（0 から始まるインデックス値）バイトから開始される length バイトのシーケンスをファイルストリーム、バイトストリームまたはバイト配列に書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>書き込むバイト配列です。
	 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>書き込みを開始する配列の位置を指定する、0 から始まるインデックスです。
	 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>書き込むバッファーの長さを指定する符号なし整数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定したバイト配列（<codeph>bytes</codeph>）の <codeph>offset</codeph>（0 から始まるインデックス値）バイトから開始される <codeph>length</codeph> バイトのシーケンスをファイルストリーム、バイトストリームまたはバイト配列に書き込みます。
	 
	 <p><codeph>length</codeph> パラメーターを省略すると、デフォルトの長さの 0 が使用され、<codeph>offset</codeph> から開始されるバッファー全体が書き込まれます。 <codeph>offset</codeph> パラメーターも省略した場合は、バッファー全体が書き込まれます。 </p>
	 
	 <p><codeph>offset</codeph> または <codeph>length</codeph> パラメーターが範囲外の場合は、これらは <codeph>bytes</codeph> 配列の最初と最後に固定されます。</p>
 	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeDouble"><apiName>writeDouble</apiName><shortdesc>
	 IEEE 754 倍精度（64 ビット）浮動小数点数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>倍精度（64 ビット）浮動小数点数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 IEEE 754 倍精度（64 ビット）浮動小数点数を書き込みます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeFloat"><apiName>writeFloat</apiName><shortdesc>
	 IEEE 754 単精度（32 ビット）浮動小数点数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>単精度（32 ビット）浮動小数点数です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 IEEE 754 単精度（32 ビット）浮動小数点数を書き込みます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeInt"><apiName>writeInt</apiName><shortdesc>
	 32 ビット符号付き整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>符号付き整数としてのバイト値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 32 ビット符号付き整数を書き込みます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeMultiByte"><apiName>writeMultiByte</apiName><shortdesc>
	 指定した文字セットを使用して、ファイルストリーム、バイトストリームまたはバイト配列にマルチバイトストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>IDataOutput, IDataOutput.writeMultiByte, writeMultiByte
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
	 </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift-jis"</codeph>、<codeph>"cn-gb"</codeph>、および <codeph>"iso-8859-1"</codeph> などがあります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した文字セットを使用して、ファイルストリーム、バイトストリームまたはバイト配列にマルチバイトストリングを書き込みます。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeObject"><apiName>writeObject</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列に、AMF 直列化形式でオブジェクトを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value=""/><apiDesc>直列化されるオブジェクトです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列に、AMF 直列化形式でオブジェクトを書き込みます。
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#IDataOutput/objectEncoding"><linktext>objectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeShort"><apiName>writeShort</apiName><shortdesc>
	 16 ビット整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>整数としてのバイト値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 16 ビット整数を書き込みます。パラメーターの下位 16 ビットが使用されます。上位 16 ビットは無視されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeUTF"><apiName>writeUTF</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列に UTF-8 ストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>長さが 65535 よりも大きい場合。
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列に UTF-8 ストリングを書き込みます。 最初に UTF-8 ストリングの長さがバイト単位で 16 ビット整数として書き込まれ、その後にストリングの文字を表すバイトが続きます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeUTFBytes"><apiName>writeUTFBytes</apiName><shortdesc>
	 UTF-8 ストリングを書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>書き込まれるストリング値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 UTF-8 ストリングを書き込みます。<codeph>writeUTF()</codeph> と似ていますが、ストリングに 16 ビット長の接頭辞が付きません。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataOutput:flash.utils:IDataOutput:writeUnsignedInt"><apiName>writeUnsignedInt</apiName><shortdesc>
	 32 ビット符号なし整数を書き込みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>throws IOError An I/O error occurred?
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>符号なし整数としてのバイト値です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 32 ビット符号なし整数を書き込みます。
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.utils:IDataOutput:flash.utils:IDataOutput:endian:get"><apiName>endian</apiName><shortdesc>
	 データのバイト順序（Endian クラスの BIG_ENDIAN 定数または LITTLE_ENDIAN 定数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 データのバイト順序（Endian クラスの <codeph>BIG_ENDIAN</codeph> 定数または <codeph>LITTLE_ENDIAN</codeph> 定数）です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Endian"><linktext>Endian クラス</linktext></link></related-links></apiValue><apiValue id="flash.utils:IDataOutput:flash.utils:IDataOutput:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     writeObject() メソッドを使用してバイナリデータの書き込みまたは読み取りを行うときに AMF3 と AMF0 のどちらのフォーマットを使用するかを特定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>writeObject()</codeph> メソッドを使用してバイナリデータの書き込みまたは読み取りを行うときに AMF3 と AMF0 のどちらのフォーマットを使用するかを特定するために使用されます。 この値は、ObjectEncoding クラスの定数です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#IDataInput/readObject()"><linktext>IDataInput.readObject()</linktext></link><link href="flash.utils.xml#IDataOutput/writeObject()"><linktext>writeObject()</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.utils:Endian"><apiName>Endian</apiName><shortdesc>
 Endian クラスには、マルチバイトの数値の表現に使用されるバイト順序を示す値が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Endian クラスには、マルチバイトの数値の表現に使用されるバイト順序を示す値が含まれます。バイト順序は、bigEndian（最上位のバイトが最初）または littleEndian（最下位のバイトが最初）のいずれかです。
 
 <p><ph platform="actionscript">Flash Player または </ph>Adobe<sup>®</sup> AIR™ のコンテンツでは、サーバーのバイナリプロトコルを使用して直接サーバーとやり取りできます。 バイト順序に bigEndian を使用するサーバーと、littleEndian を使用するサーバーがあります。"ネットワークバイト順序" が bigEndian であるため、インターネット上の大部分のサーバーでは bigEndian のバイト順序が使用されています。Intel x86 アーキテクチャでは littleEndian が使用されているため、littleEndian のバイト順序が一般的です。データを送受信するサーバーのプロトコルに合ったエンディアンバイト順序を使用します。</p>
 
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.utils.xml#ByteArray/endian"><linktext>flash.utils.ByteArray.endian</linktext></link><link href="flash.filesystem.xml#FileStream/endian"><linktext>flash.filesystem.FileStream.endian</linktext></link><link href="flash.utils.xml#IDataInput/endian"><linktext>flash.utils.IDataInput.endian</linktext></link><link href="flash.utils.xml#IDataOutput/endian"><linktext>flash.utils.IDataOutput.endian</linktext></link><link href="flash.net.xml#Socket/endian"><linktext>flash.net.Socket.endian</linktext></link><link href="flash.net.xml#URLStream/endian"><linktext>flash.net.URLStream.endian</linktext></link></related-links><apiValue id="flash.utils:Endian:BIG_ENDIAN"><apiName>BIG_ENDIAN</apiName><shortdesc>
	 マルチバイト数値の最上位バイトが、バイトのシーケンスの最初に来ることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bigEndian</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 マルチバイト数値の最上位バイトが、バイトのシーケンスの最初に来ることを示します。
	 <p>16 進数の 0x12345678 は 4 バイト（1 バイトごとに 2 桁の 16 進数）です。最上位バイトは 0x12 です。最下位バイトは 0x78 です（これに対応する 10 進数は 305419896、最上位の桁は 3、最下位の桁は 6 です）。 </p>
	 <p>bigEndian のバイト順序を使用したストリーム（最上位のバイトが最初）では、次のように書き込まれます。</p>
	 <pre>
	 12 34 56 78
	 </pre>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:Endian:LITTLE_ENDIAN"><apiName>LITTLE_ENDIAN</apiName><shortdesc>
	 マルチバイト数値の最下位バイトが、バイトのシーケンスの最初に来ることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>littleEndian</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 マルチバイト数値の最下位バイトが、バイトのシーケンスの最初に来ることを示します。
	 <p>16 進数の 0x12345678 は 4 バイト（1 バイトごとに 2 桁の 16 進数）です。最上位バイトは 0x12 です。最下位バイトは 0x78 です（これに対応する 10 進数は 305419896、最上位の桁は 3、最下位の桁は 6 です）。 </p>
	 <p>littleEndian のバイト順序を使用したストリーム（最下位のバイトが最初）では、次のように書き込まれます。</p>
	 <pre>
	 78 56 34 12
	 </pre>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.utils:IExternalizable"><apiName>IExternalizable</apiName><shortdesc>
 IExternalizable インターフェイスは、クラスがデータストリームにエンコードされるときに、クラスの直列化を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
 IExternalizable インターフェイスは、クラスがデータストリームにエンコードされるときに、クラスの直列化を制御します。IExternalizable インターフェイスの <codeph>writeExternal()</codeph> メソッドおよび <codeph>readExternal()</codeph> メソッドは、オブジェクトおよびそのスーパータイプのデータストリームの内容や形式のカスタマイズを可能にするためにクラスによって実装されています。ただし、クラス名やタイプはカスタマイズできません。個々のクラスを直列化して、インスタンスの状態を再構築する必要があります。これらのメソッドは、その状態を保存するためにスーパータイプと対称になっている必要があります。これらのメソッドは、AMF（Action Message Format）直列化の動作よりも優先されます。 
 <p>クラスが IExternalizable インターフェイスを実装せず、IExternalizable インターフェイスを実装するクラスからの継承もしない場合は、public メンバーのみのデフォルトのメカニズムを使用して、クラスのインスタンスが直列化されます。したがって、クラスの private、internal および protected メンバーは使用できなくなります。</p>
 <p>private メンバーを直列化するには、クラスに IExternalizable インターフェイスを使用する必要があります。例えば次のクラスは、メンバーが private メンバーなので直列化されません。</p>
 <codeblock>
 class Example {
 
       private var one:int;
       private var two:int;
 }
 </codeblock>
 <p>ただし、IExternalizable インターフェイスを実装すると、次のように、クラスの private メンバーへの書き込み、およびクラスの private メンバーからの読み取りを行うことができます。</p>
 <codeblock>
 class Example implement IExternalizable {
 
       private var one:int;
       private var two:int;
 
       public function writeExternal(output:IDataOutput) {
 
            output.writeInt(one);
            output.writeInt(two);
       }
 
       public function readExternal(input:IDataInput) {
 
            one = input.readInt();
            two = input.readInt();
       }
 }
 </codeblock>
 <p><b>注意：</b>クラスが IExternalizable を実装する場合、そのクラスのインスタンスには、デフォルトの直列化は適用されません。そのクラスがスーパークラスから public メンバーを継承する場合、これらのメンバーも慎重に管理する必要があります。</p>
 <p>IExternalizable を実装するクラスのサブクラスに固有の private メンバーが含まれている場合、そのサブクラスは、次のように、IExternalizable のメソッドを上書きする必要があります。</p>
 <codeblock>
 public class Base implements IExternalizable {
  
      private var one:Boolean;
  
      public function writeExternal(output:IDataOutput):void {
  
          output.writeBoolean(one);
      }
  
      public function readExternal(input:IDataInput):void {
  
          one = input.readBoolean();
      }
 }
  
 public class Example extends Base {
  
      private var one:String;
  
  
      public override function writeExternal(output:IDataOutput):void {
  
          super.writeExternal(output);
          output.writeUTF(one);
      }
  
      public override function readExternal(input:IDataInput):void {
      
          super.readExternal(input);
          one = input.readUTF();
      }
 }
 </codeblock>
 <p>IExternalizable インターフェイスを使用して、データストリームに書き込む前にデータを圧縮することもできます。次に実際の使用例を示します。</p>
 <codeblock>
 class Example implements IExternalizable {
  
      public var one:Boolean;
      public var two:Boolean;
      public var three:Boolean;
      public var four:Boolean;
      public var five:Boolean;
      public var six:Boolean;
      public var seven:Boolean;
      public var eight:Boolean;
 
      public function writeExternal(output:IDataOutput) {
 
          var flag:int = 0;
 
          if (one) flag |= 1;
          if (two) flag |= 2;
          if (three) flag |= 4;
          if (four) flag |= 8;
          if (five) flag |= 16;
          if (six) flag |= 32;
          if (seven) flag |= 64;
          if (eight) flag |= 128;
 
          output.writeByte(flag);
      }
 
      public function readExternal(input:IDataInput) {
 
          var flag:int = input.readByte();
 
          one = (flag &amp; 1) != 0;
          two = (flag &amp; 2) != 0;
          three = (flag &amp; 4) != 0;
          four = (flag &amp; 8) != 0;
          five = (flag &amp; 16) != 0;
          six = (flag &amp; 32) != 0;
          seven = (flag &amp; 64) != 0;
          eight = (flag &amp; 128) != 0;
      }
 }
 </codeblock>
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>flash.net.ObjectEncoding</linktext></link></related-links><apiOperation id="flash.utils:IExternalizable:flash.utils:IExternalizable:readExternal"><apiName>readExternal</apiName><shortdesc>
	 このメソッドは、IDataInput インターフェイスのメソッドを呼び出してデータストリームからデコードできるように、クラスで実装されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>input</apiItemName><apiOperationClassifier>flash.utils:IDataInput</apiOperationClassifier><apiDesc>IDataInput インターフェイスを実装するクラスの名前です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 このメソッドは、IDataInput インターフェイスのメソッドを呼び出してデータストリームからデコードできるように、クラスで実装されています。このメソッドでは、<codeph>writeExternal()</codeph> メソッドで書き込まれたときと同じシーケンスおよびタイプで、値を読み出す必要があります。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IExternalizable:flash.utils:IExternalizable:writeExternal"><apiName>writeExternal</apiName><shortdesc>
	 このメソッドは、IDataOutput インターフェイスのメソッドを呼び出してそれ自身をデータストリームにエンコードするために、クラスに実装します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>output</apiItemName><apiOperationClassifier>flash.utils:IDataOutput</apiOperationClassifier><apiDesc>IDataOutput インターフェイスを実装するクラスの名前です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 このメソッドは、IDataOutput インターフェイスのメソッドを呼び出してそれ自身をデータストリームにエンコードするために、クラスに実装します。
     </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiOperation id="globalOperation:flash.utils:describeType"><apiName>describeType</apiName><shortdesc>
	 メソッドのパラメーターとして指定された ActionScript オブジェクトを記述する XML オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>パラメーターとして渡されたオブジェクトの詳細が含まれる XML オブジェクトです。オブジェクトに関する次の情報が記述されています。
	 
	 <ul>
	  <li>オブジェクトのクラス</li> 
	 	 <li>クラスの属性</li> 
	 	 <li>クラスから基本クラスへの継承ツリー</li> 
	 	 <li>クラスによって実装されているインターフェイス</li> 
	 	 <li>クラスの宣言されたインスタンスプロパティ</li> 
	 	 <li>クラスの宣言された静的プロパティ</li> 
	 	 <li>クラスのインスタンスメソッド</li>
	 	 <li>クラスの静的メソッド </li>
	 	 <li>クラスの各メソッドの名前、パラメーター数、戻り値の型、およびパラメーターの型 </li>
	 </ul>
     <p><b>注意：</b><codeph>describeType()</codeph> では、パブリックなプロパティおよびメソッドのみが表示されます。プライベート、パッケージ内部、またはカスタム名前空間にあるプロパティおよびメソッドは表示されません。 </p>
	 
 	 </apiDesc><apiOperationClassifier>XML</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>型の記述が必要なオブジェクトです。このメソッドには、使用可能なすべての ActionScript 型、オブジェクトインスタンス、ユニットやクラスオブジェクトなどのプリミティブ型を含む任意の ActionScript 値を渡すことができます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 メソッドのパラメーターとして指定された ActionScript オブジェクトを記述する XML オブジェクトを作成します。このメソッドは、ActionScript 言語に対して<i>リフレクション</i>のプログラミング概念を実装します。
	 <p><codeph>value</codeph> パラメーターが特定の型のインスタンスである場合、返される XML オブジェクトにはその型のすべてのインスタンスプロパティが含まれますが、静的プロパティは含まれません。この状態は、XML オブジェクトの解析時に <codeph>&lt;type></codeph> タグの <codeph>isStatic</codeph> 属性の値を調べることによって確認できます。<codeph>value</codeph> パラメーターが特定の型のインスタンスである場合、この属性は <codeph>false</codeph> になります。</p>
	 <p>特定の型の静的プロパティを取得するには、型自体を <codeph>value</codeph> パラメーターに渡します。返される XML オブジェクトには、そのタイプの静的プロパティのみでなく、すべてのインスタンスプロパティも含まれています。インスタンスプロパティは、<codeph>&lt;factory></codeph> というタグ内にネストされ、静的プロパティと区別されます。この場合、<codeph>&lt;type></codeph> タグの <codeph>isStatic</codeph> 属性は <codeph>true</codeph> です。</p>
	 <p><b>注意：</b>オブジェクトの継承階層間の移動のみが必要で、<codeph>describeType()</codeph> によって提供されるその他の情報は不要な場合には、代わりに、<codeph>getQualifiedClassName()</codeph> 関数および <codeph>getQualifiedSuperclassName()</codeph> 関数を使用します。</p>
	 <p>次の表は、<codeph>describeType()</codeph> によって生成される XML オブジェクトのタグおよび属性のいくつかについて説明したものです（返されるすべてのクラス名およびインターフェイス名は完全修飾名です）。</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>タグ</entry><entry>属性</entry><entry>説明</entry></row></thead><tbody><row><entry><codeph>&lt;type></codeph></entry><entry> </entry><entry>XML オブジェクトのルートタグです。</entry></row><row><entry> </entry><entry>name</entry><entry>ActionScript オブジェクトのデータ型の名前です。</entry></row><row><entry> </entry><entry>base</entry><entry>ActionScript オブジェクトを定義しているクラスのすぐ上のスーパークラスです。ActionScript オブジェクトがクラスオブジェクトの場合、値は <codeph>Class</codeph> になります。</entry></row><row><entry> </entry><entry>isDynamic</entry><entry>ActionScript オブジェクトを定義しているクラスが dynamic の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。ActionScript オブジェクトがクラスオブジェクトの場合、Class クラスは dynamic なので、値は <codeph>true</codeph> になります。</entry></row><row><entry> </entry><entry>isFinal</entry><entry>ActionScript オブジェクトを定義しているクラスが final の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。</entry></row><row><entry> </entry><entry>isStatic</entry><entry>ActionScript オブジェクトがクラスオブジェクトまたはコンストラクター関数の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。この属性が <codeph>true</codeph> の場合には <codeph>factory</codeph> タグ内にネストされていないすべてのタグが静的になるため、この属性には <codeph>isStatic</codeph> という名前が付けられています。</entry></row><row><entry><codeph>&lt;extendsClass></codeph></entry><entry> </entry><entry>ActionScript オブジェクトを定義しているクラスの各スーパークラスには、個別に <codeph>extendsClass</codeph> というタグがあります。</entry></row><row><entry> </entry><entry>type</entry><entry>ActionScript オブジェクトを定義しているクラスが拡張しているスーパークラスの名前です。</entry></row><row><entry><codeph>&lt;implementsInterface></codeph></entry><entry> </entry><entry>ActionScript オブジェクトを定義しているクラスまたはそのいずれかのスーパークラスによって実装されている各インターフェイスには、個別に <codeph>implementsInterface</codeph> というタグがあります。</entry></row><row><entry> </entry><entry>type</entry><entry>ActionScript オブジェクトを定義しているクラスが実装しているインターフェイスの名前です。</entry></row><row><entry><codeph>&lt;accessor></codeph></entry><entry> </entry><entry>アクセッサーは、getter 関数と setter 関数によって定義されたプロパティです。</entry></row><row><entry> </entry><entry>name</entry><entry>アクセッサーの名前です。</entry></row><row><entry> </entry><entry>access</entry><entry>プロパティのアクセス権です。有効な値には、<codeph>readonly</codeph>、<codeph>writeonly</codeph>、<codeph>readwrite</codeph> などがあります。</entry></row><row><entry> </entry><entry>type</entry><entry>プロパティのデータ型です。</entry></row><row><entry> </entry><entry>declaredBy</entry><entry>関連する getter 関数または setter 関数が含まれるクラスです。</entry></row><row><entry><codeph>&lt;constant></codeph></entry><entry> </entry><entry>定数は、<codeph>const</codeph> ステートメントで定義されたプロパティです。</entry></row><row><entry> </entry><entry>name</entry><entry>定数の名前です。</entry></row><row><entry> </entry><entry>type</entry><entry>定数のデータ型です。</entry></row><row><entry><codeph>&lt;method></codeph></entry><entry> </entry><entry>メソッドは、クラス定義の一部として宣言された関数です。</entry></row><row><entry> </entry><entry>name</entry><entry>メソッドの名前です。</entry></row><row><entry> </entry><entry>declaredBy</entry><entry>メソッドの定義が含まれるクラスです。</entry></row><row><entry> </entry><entry>returnType</entry><entry>メソッドの戻り値のデータ型です。</entry></row><row><entry><codeph>&lt;parameter></codeph></entry><entry> </entry><entry>メソッドによって定義されるパラメーターごとに別個の <codeph>parameter</codeph> タグが使用されます。このタグは、常に <codeph>&lt;method></codeph> タグ内にネストされます。</entry></row><row><entry> </entry><entry>index</entry><entry>メソッドのパラメーターリストにパラメーターが表示される順序に対応する番号です。最初のパラメーターの値は 1 です。</entry></row><row><entry> </entry><entry>type</entry><entry>パラメーターのデータ型です。</entry></row><row><entry> </entry><entry>optional</entry><entry>パラメーターがオプションの場合には <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。</entry></row><row><entry><codeph>&lt;variable></codeph></entry><entry> </entry><entry>変数は、<codeph>var</codeph> ステートメントで定義されたプロパティです。</entry></row><row><entry> </entry><entry>name</entry><entry>変数の名前です。</entry></row><row><entry> </entry><entry>type</entry><entry>変数のデータ型です。</entry></row><row><entry><codeph>&lt;factory></codeph></entry><entry> </entry><entry>ActionScript オブジェクトがクラスオブジェクトまたはコンストラクター関数の場合、インスタンスのすべてのプロパティおよびメソッドは、このタグ内にネストされます。<codeph>&lt;type></codeph> タグの <codeph>isStatic</codeph> 属性が <codeph>true</codeph> の場合、<codeph>&lt;factory></codeph> タグ内にネストされていないすべてのプロパティおよびメソッドは静的です。このタグは、ActionScript オブジェクトがクラスオブジェクトまたはコンストラクター関数の場合にのみ含まれます。</entry></row></tbody></tgroup></adobetable>
	 
	 
	 </apiDesc><example conref="examples\DescribeTypeExample.as"><codeblock>package {
    import flash.display.Sprite;
    import flash.utils.describeType;
    
    public class DescribeTypeExample extends Sprite {
        public function DescribeTypeExample() {
            var child:Sprite = new Sprite();
            var description:XML = describeType(child);
            trace(description..accessor.@name.toXMLString());
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.utils.xml#/getQualifiedClassName()"><linktext>getQualifiedClassName()</linktext></link><link href="flash.utils.xml#/getQualifiedSuperclassName()"><linktext>getQualifiedSuperclassName()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:escapeMultiByte"><apiName>escapeMultiByte</apiName><shortdesc>
	  System.useCodePage の値に従って、UTF-8 またはシステムコードページのいずれかにエンコードされた入力ストリングをエスケープしたコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>入力ストリングをエスケープしたコピーです。System.useCodePage が <codeph>true</codeph> の場合、エスケープしたストリングはシステムコードページでエンコードされます。System.useCodePage が <codeph>false</codeph> の場合、エスケープしたストリングは UTF-8 でエンコードされます。例えば、System.useCodePage が <codeph>false</codeph> の場合、入力ストリング "CrÃ¼e" はすべてのシステムで "Cr%C3%BCe" としてエスケープされます。System.useCodePage が <codeph>true</codeph> で、ラテン語のコードページが使用されている場合、"CrÃ¼e" は "Cr%FCe" としてエスケープされます。文字 'Ã¼' を含まないラテン語以外のコードページが使用されている場合は "Cr?e" になります。
	  
	  </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>エスケープするストリングです。
	  
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  System.useCodePage の値に従って、UTF-8 またはシステムコードページのいずれかにエンコードされた入力ストリングをエスケープしたコピーを返します。System.useCodePage を使用すると、ローカルコードページでエンコードされた古いコンテンツにプレーヤーでアクセスできます。ただし、古いコードページを使用しているシステムでしかアクセスできません。例えば、<codeph>Shift-JIS</codeph> としてエンコードされた日本語データは、日本語のデフォルトコードページを使用した OS でしか正しくエスケープおよびアンエスケープできません。
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:flash.utils:getDefinitionByName"><apiName>getDefinitionByName</apiName><shortdesc>
	 name パラメーターで指定したクラスのクラスオブジェクトへの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定された名前の公開定義は存在しません。
	 
     </apiDesc><apiItemName>ReferenceError</apiItemName><apiOperationClassifier>ReferenceError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>name</codeph> パラメーターで指定したクラスのクラスオブジェクトへの参照を返します。
	 
	 </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>クラス名です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>name</codeph> パラメーターで指定したクラスのクラスオブジェクトへの参照を返します。
	 </apiDesc><example conref="examples\GetDefinitionByNameExample.as"> 次の例では、クラス <codeph>GetDefinitionByNameExample</codeph> を使用してステージ上にオレンジ色の四角形を作成します。ここでは以下の手順を実行します。
 <ol>
     <li>オレンジ色の背景色と 80 ピクセルのサイズの変数を宣言します。これらは後で四角形の描画に使用されます。</li>
     <li>コンストラクター内で、Class 型の <codeph>ClassReference</codeph> 変数は Sprite に割り当てられます。</li>
     <li><codeph>instance</codeph> という ClassReference のインスタンスがインスタンス化されます。</li>
     <li>参照によって <codeph>instance</codeph> が Sprite オブジェクトになるため、四角形は Sprite で使用可能なメソッドを使用して描画したり、表示リストに追加したりできます。</li>
 </ol>
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.utils.getDefinitionByName;

    public class GetDefinitionByNameExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 80;

        public function GetDefinitionByNameExample() {
            var ClassReference:Class = getDefinitionByName("flash.display.Sprite") as Class;
            var instance:Object = new ClassReference();
            instance.graphics.beginFill(bgColor);
            instance.graphics.drawRect(0, 0, size, size);
            instance.graphics.endFill();
            addChild(DisplayObject(instance));
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="globalOperation:flash.utils:getQualifiedClassName"><apiName>getQualifiedClassName</apiName><shortdesc>
	  オブジェクトの完全修飾クラス名を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>完全修飾クラス名を含むストリングです。
	  </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>完全修飾クラス名が必要なオブジェクトです。このメソッドには、使用可能なすべての ActionScript 型、オブジェクトインスタンス、ユニットやクラスオブジェクトなどのプリミティブ型を含む任意の ActionScript 値を渡すことができます。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  オブジェクトの完全修飾クラス名を返します。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#/describeType()"><linktext>describeType()</linktext></link><link href="flash.utils.xml#/getQualifiedSuperclassName()"><linktext>getQualifiedSuperclassName()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:getQualifiedSuperclassName"><apiName>getQualifiedSuperclassName</apiName><shortdesc>
	value パラメーターで指定したオブジェクトの基本クラスの完全修飾クラス名を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>完全修飾基本クラス名。存在しない場合は <codeph>null</codeph> が返されます。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>任意の値です。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	<codeph>value</codeph> パラメーターで指定したオブジェクトの基本クラスの完全修飾クラス名を返します。この関数では <codeph>describeType()</codeph> よりも迅速に基本クラス名を取得できますが、<codeph>describeType()</codeph> で提供されるすべての情報が提供されるわけではありません。
	<p>この関数を使用してクラス名を取得した後、<codeph>getDefinitionByName()</codeph> 関数を使用してクラス名をクラス参照に変換できます。</p>
	<p><b>注意：</b>この関数はインスタンス階層に制限されています。一方、<codeph>describeType()</codeph> 関数は、<codeph>value</codeph> パラメーターがデータ型の場合には、クラスオブジェクト階層を使用します。データ型に対して <codeph>describeType()</codeph> を呼び出すと、クラスオブジェクト階層に基づいてスーパークラスが返されます。スーパークラスでは、すべてのクラスオブジェクトが Class から継承されます。ただし、<codeph>getQualifiedSuperclassName()</codeph> 関数はクラスオブジェクト階層を無視し、より使い慣れたインスタンス階層に基づいてスーパークラスを返します。例えば、<codeph>getQualifiedSuperclassName(String)</codeph> を呼び出すと、技術的には String クラスオブジェクトは Class から継承されますが、<codeph>Object</codeph> が返されます。つまり、型のインスタンスと型自体のどちらを使用するかに関係なく、結果は同じです。</p>
	</apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#/describeType()"><linktext>describeType()</linktext></link><link href="flash.utils.xml#/getDefinitionByName()"><linktext>getDefinitionByName()</linktext></link><link href="flash.utils.xml#/getQualifiedClassName()"><linktext>getQualifiedClassName()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:getTimer"><apiName>getTimer</apiName><shortdesc>
	 相対時間の計算に使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ランタイムが初期化されてからのミリ秒数（ActionScript 2.0 を処理する場合）、または仮想マシンが起動してからのミリ秒数（ActionScript 3.0 を処理する場合）です。ランタイムで SWF ファイルの再生を開始し、後で別の SWF ファイルをロードした場合、戻り値は最初の SWF ファイルがロードされた時刻からの相対時間になります。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 相対時間の計算に使用します。ActionScript 3.0 を処理する Flash ランタイムの場合、このメソッドは ActionScript 3.0 用の Flash ランタイム仮想マシン（AVM2）が起動してから経過したミリ秒数を返します。ActionScript 2.0 を処理する Flash ランタイムの場合、このメソッドは、Flash ランタイムの初期化が開始されてからのミリ秒数を返します。Flash ランタイムは、2 つの仮想マシンを使用して ActionScript を処理します。AVM1 は、ActionScript 1.0 および 2.0 を実行するために使用される ActionScript 仮想マシンです。AVM2 は、ActionScript 3.0 を実行するために使用される ActionScript 仮想マシンです。<codeph>getTimer()</codeph> メソッドの動作は、AVM1 と AVM2 で異なります。
	 <p>カレンダー日付（タイムスタンプ）については、Date オブジェクトを参照してください。</p> 	 
	 
	 </apiDesc><example conref="examples\getTimerExample.as"> 次の例では、クラス <codeph>GetTimerExample</codeph> を使用して、Flash Player で再生を開始した時点からのミリ秒数を取得および出力します。
<codeblock>
package {
    import flash.utils.getTimer;
    import flash.display.Sprite;

    public class GetTimerExample extends Sprite {
        public function GetTimerExample() {
            var duration:uint = getTimer();
            trace("duration: " + duration);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.display.xml#AVM1Movie"><linktext>flash.display.AVM1Movie</linktext></link><link href="#Date"><linktext>Date クラス</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:unescapeMultiByte"><apiName>unescapeMultiByte</apiName><shortdesc>
	  System.useCodePage の値に従って、UTF-8 またはシステムコードページのいずれかからデコードされた入力ストリングをアンエスケープしたコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>入力ストリングをエスケープしたコピーです。System.useCodePage が <codeph>true</codeph> の場合、エスケープしたストリングはシステムコードページでエンコードされます。System.useCodePage が <codeph>false</codeph> の場合、エスケープしたストリングは UTF-8 でエンコードされます。たとえば、System.useCodePage が <codeph>false</codeph> の場合、入力ストリングの「Crüe」はどのシステムでも「Cr%C3%BCe」としてエスケープされます。system.useCodePage が <codeph>true</codeph> で、ラテン語のコードページが使用されている場合、"Crüe" は "Cr%FCe" としてエスケープされます。'ü' 文字が含まれていないラテン語以外のコードページが使用されていると、"Cr?e" という結果になる場合があります。System.useCodePage を <codeph>true</codeph> にして "Cr%C3%BCe" をアンエスケープすると、ラテン語のシステムで "CrÃ¼e" が発生するなど、さまざまなシステムでさまざまな不適切な結果が発生します。同様に、System.useCodePage を <codeph>false</codeph> にして "Cr%FCe" をアンエスケープすると、システムのコードページによって、"Cre" や"Cr?e" などのさまざまな結果が発生する可能性があります。	
	  
	  </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>アンエスケープする、エスケープされたストリングです。
	  
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  System.useCodePage の値に従って、UTF-8 またはシステムコードページのいずれかからデコードされた入力ストリングをアンエスケープしたコピーを返します。System.useCodePage を使用すると、ローカルコードページでエンコードされた古いコンテンツにプレーヤーでアクセスできます。ただし、古いコードページを使用しているシステムでしかアクセスできません。例えば、<codeph>Shift-JIS</codeph> としてエンコードされた日本語データは、日本語のデフォルトコードページを使用した OS でしか正しくエスケープおよびアンエスケープできません。
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:flash.utils:clearInterval"><apiName>clearInterval</apiName><shortdesc>
 指定した setInterval() 呼び出しをキャンセルします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>setInterval()</codeph> 呼び出しの ID です。次のように変数を設定します。
 
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 指定した <codeph>setInterval()</codeph> 呼び出しをキャンセルします。
 
 </apiDesc><example conref="examples\ClearIntervalExample.as"> 次の例では、<codeph>setInterval()</codeph> メソッドを使用して、時間制限を設けた間隔を作成し、通常の間隔である 1 秒後に <codeph>myRepeatingFunction()</codeph> メソッドを呼び出します。
 <p><codeph>myRepeatingFunction</codeph> メソッドの各呼び出しによって、<codeph>counter</codeph> プロパティがインクリメントされ、<codeph>stopCount</codeph> プロパティと等しくなったときにプロパティ <codeph>intervalId</codeph> によって <codeph>clearInterval()</codeph> メソッドが呼び出されます。これは、先に作成された間隔のリファレンス ID です。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.*;

    public class ClearIntervalExample extends Sprite {
        private var intervalDuration:Number = 1000; // duration between intervals, in milliseconds
        private var intervalId:uint;
        private var counter:uint     = 0;
        private var stopCount:uint     = 3;
        
        public function ClearIntervalExample() {
            intervalId = setInterval(myRepeatingFunction, intervalDuration, "Hello", "World");
        }

        public function myRepeatingFunction():void {
            trace(arguments[0] + " " + arguments[1]);

            counter++;
            if(counter == stopCount) {
                trace("Clearing Interval");
                clearInterval(intervalId);    
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.utils.xml#/setInterval()"><linktext>setInterval()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:clearTimeout"><apiName>clearTimeout</apiName><shortdesc>
 指定した setTimeout() 呼び出しをキャンセルします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph>setTimeout()</codeph> 呼び出しの ID です。次のように変数を設定します。
 
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 指定した <codeph>setTimeout()</codeph> 呼び出しをキャンセルします。
 
 </apiDesc><example conref="examples\ClearTimeoutExample.as"> 次の例では、<codeph>setTimeout()</codeph> メソッドを使用して、指定した遅延時間後に別のメソッドを呼び出します。
 <p>ループが作成され、100 万までカウントされます。このリクエストを 1 秒未満で処理可能なコンピューターで所定の時間が経過すると、<codeph>clearTimeout()</codeph> によって <codeph>setTimeout()</codeph> リクエストが削除され、<codeph>myDelayedFunction()</codeph> は呼び出されません。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.*;

    public class ClearTimeoutExample extends Sprite {
        private var delay:Number = 1000; // delay before calling myDelayedFunction
        private var intervalId:uint;
        private var count:uint = 1000000;
        
        public function ClearTimeoutExample() {
            intervalId = setTimeout(myDelayedFunction, delay);
            startCounting();
        }

        public function startCounting():void {
            var i:uint = 0;
            do {
                if(i == count-1) {
                    clearTimeout(intervalId);
                    trace("Your computer can count to " + count + " in less than " + delay/1000 + " seconds.");    
                }
                i++;
            } while(i &lt; count)            
        }
        
        public function myDelayedFunction():void {
            trace("Time expired.");
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.utils.xml#/setTimeout()"><linktext>setTimeout()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:setInterval"><apiName>setInterval</apiName><shortdesc>
 ミリ秒単位で指定した間隔ごとに関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>時間設定されたプロセスに対する一意の数値識別子です。プロセスをキャンセルするには、この識別子を使用して <codeph>clearInterval()</codeph> メソッドを呼び出します。
 
 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>closure</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>実行する関数の名前です。引用符や括弧を使用しないでください。また、呼び出す関数にパラメーターを指定しないでください。例えば、<codeph>functionName</codeph> を使用して、<codeph>functionName()</codeph> や <codeph>functionName(param)</codeph> は使用しないでください。
 
 </apiDesc></apiParam><apiParam><apiItemName>delay</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ミリ秒単位の間隔です。 
 
 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>closure 関数に渡す引数のオプションのリストです。
 
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 ミリ秒単位で指定した間隔ごとに関数を実行します。
 
 <p><codeph>setInterval()</codeph> メソッドを使用する代わりに、<codeph>repeatCount</codeph> パラメーターを 0（タイマーを無限に繰り返す設定）にして、指定した間隔で Timer オブジェクトを作成することを検討してください。</p>
 
 <p><codeph>clearInterval()</codeph> メソッドを使用して <codeph>setInterval()</codeph> 呼び出しをキャンセルする場合は、<codeph>setInterval()</codeph> 呼び出しを変数（後で <codeph>clearInterval()</codeph> 関数で参照する）に割り当てます。<codeph>clearInterval()</codeph> 関数を呼び出して <codeph>setInterval()</codeph> 呼び出しをキャンセルしない場合は、タイムアウトクロージャ設定関数はガベージコレクションされません。 </p>
 
 </apiDesc><example conref="examples\SetIntervalExample.as"> 次の例では、<codeph>setInterval()</codeph> メソッドを使用して、時間制限を設けた間隔を作成し、通常の間隔である 1 秒後に <codeph>myRepeatingFunction()</codeph> メソッドを呼び出します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.*;

    public class SetIntervalExample extends Sprite {
        private var intervalDuration:Number = 1000; // duration between intervals, in milliseconds
        
        public function SetIntervalExample() {
            var intervalId:uint = setInterval(myRepeatingFunction, intervalDuration, "Hello", "World");
        }

        public function myRepeatingFunction():void {
            trace(arguments[0] + " " + arguments[1]);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.utils.xml#/clearInterval()"><linktext>clearInterval()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:flash.utils:setTimeout"><apiName>setTimeout</apiName><shortdesc>
 ミリ秒単位で指定した遅延時間の経過後に、指定した関数を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>時間設定されたプロセスに対する一意の数値識別子です。プロセスをキャンセルするには、この識別子を使用して <codeph>clearTimeout()</codeph> メソッドを呼び出します。
 
 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>closure</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>実行する関数の名前です。引用符や括弧を使用しないでください。また、呼び出す関数にパラメーターを指定しないでください。例えば、<codeph>functionName</codeph> を使用して、<codeph>functionName()</codeph> や <codeph>functionName(param)</codeph> は使用しないでください。
 
 </apiDesc></apiParam><apiParam><apiItemName>delay</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>関数が実行されるまでの遅延時間（ミリ秒単位）です。 
 
 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>closure 関数に渡す引数のオプションのリストです。
 
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 ミリ秒単位で指定した遅延時間の経過後に、指定した関数を実行します。
 
 <p>このメソッドを使用する代わりに、<codeph>repeatCount</codeph> パラメーターを 1（タイマーを 1 回のみ実行する設定）にして、指定した間隔で Timer オブジェクトを作成することを検討してください。</p>
 
 <p><codeph>clearTimeout()</codeph> メソッドを使用して <codeph>setTimeout()</codeph> 呼び出しをキャンセルする場合は、<codeph>setTimeout()</codeph> 呼び出しを変数（後で <codeph>clearTimeout()</codeph> 関数で参照する）に割り当てます。<codeph>clearTimeout()</codeph> 関数を呼び出して <codeph>setTimeout()</codeph> 呼び出しをキャンセルしない場合は、タイムアウトクロージャ設定関数はガベージコレクションされません。 </p>
 
 </apiDesc><example conref="examples\SetTimeoutExample.as"> 次の例では、<codeph>setTimeout()</codeph> メソッドを使用して、指定した遅延時間後に別のメソッドを呼び出します。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.*;

    public class SetTimeoutExample extends Sprite {
        private var delay:Number = 1000; // delay before calling myDelayedFunction
        
        public function SetTimeoutExample() {
            var intervalId:uint = setTimeout(myDelayedFunction, delay, "Hello", "World");
        }

        public function myDelayedFunction():void {
            trace(arguments[0] + " " + arguments[1]);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.utils.xml#/clearTimeout()"><linktext>clearTimeout()</linktext></link></related-links></apiOperation><apiClassifier id="flash.utils:Timer"><apiName>Timer</apiName><shortdesc>
 Timer クラスはタイマーへのインターフェイスです。タイマーを使用すると、指定した時間系列に従ってコードを実行できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 Timer クラスはタイマーへのインターフェイスです。タイマーを使用すると、指定した時間系列に従ってコードを実行できます。 タイマーを開始するには <codeph>start()</codeph> メソッドを使用します。<codeph>timer</codeph> イベントのイベントリスナーをセットアップコードに追加すると、そのタイマー間隔で実行されます。
 
 <p>Timer オブジェクトを作成して、1 回実行または指定した間隔で繰り返して定時にコードを実行できます。<ph platform="actionscript">Flash Player または Adobe AIR では、SWF ファイルのフレームレートまたは Flash Player の環境（使用可能なメモリやその他の要素）によっては、イベントを送出する間隔が少しずれる場合があります。 たとえば、SWF ファイルを 10 fps（1 秒あたりのフレーム数）、つまり 100 ミリ秒間隔で再生するように設定し、80 ミリ秒でイベントが発生するようにタイマーを設定すると、100 ミリ秒に近い間隔でイベントが送出されます。</ph> <ph platform="javascript">アプリケーションは、そのアプリケーション自体の内部フレームレートに基づいて、少しずれた間隔でイベントを送出する場合があります。</ph>また、メモリに負荷のかかるスクリプトでも、イベントの送出がずれる場合があります。</p>
 
 </apiDesc><example conref="examples\TimerExample.as"> 次の例では、クラス <codeph>TimerExample</codeph> を使用して、リスナーメソッド <codeph>timerHandler()</codeph> が新しい TimerEvent を受け取り、送出する方法を示します。タイマーは、<codeph>start()</codeph> が呼び出されたときに起動し、その後にタイマーイベントが送出されます。  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerExample extends Sprite {

        public function TimerExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener("timer", timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.utils:Timer_flash.events.TimerEvent.TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><shortdesc>
 Timer.repeatCount で設定された数の要求が完了するたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TimerEvent.TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.TimerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>Timer.repeatCount</codeph> で設定された要求数を完了するたびに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.utils:Timer_flash.events.TimerEvent.TIMER_timer"><apiName>timer</apiName><shortdesc>
 Timer オブジェクトが Timer.delay プロパティに従って指定された時間間隔に達するたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TimerEvent.TIMER</apiEventType><adobeApiEventClassifier>flash.events.TimerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Timer オブジェクトが <codeph>Timer.delay</codeph> プロパティに従って指定された時間間隔に達するたびに送出されます。 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.utils:Timer:Timer"><apiName>Timer</apiName><shortdesc>
	 delay および repeatCount に指定した状態で、新しい Timer オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定した遅延がマイナスの場合、または有限数でない場合
	 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiParam><apiItemName>delay</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>ミリ秒単位で指定したタイマーイベント間の遅延です。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>repeatCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>繰り返しの回数を指定します。ゼロを指定すると、タイマーは無限に繰り返されます。ゼロ以外に指定すると、タイマーは指定した回数実行された後に停止します。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 <codeph>delay</codeph> および <codeph>repeatCount</codeph> に指定した状態で、新しい Timer オブジェクトを作成します。
	 
	 <p>タイマーが自動的に起動しない場合は、<codeph>start()</codeph> メソッドを呼び出して起動させる必要があります。</p>
	 
	 </apiDesc><example conref="examples\Timer_constructorExample.as"> 次の例では、ユーザーが入力テキストフィールドに応答を書き込む時間が 90 秒間あります。 さらに 30 秒ごとに、ユーザーに対してステータスメッセージが表示され、残り時間が通知されます。
 
 <p>30 秒ごとに起動し（遅延を 30000 ミリ秒に設定）、合計 90 秒間に 3 回起動を繰り返す Timer オブジェクトが作成されます。（タイマーは 3 回で停止します。）</p>
 
 <p><codeph>myTimer</codeph> タイマーに 2 つのイベントリスナーが追加されます。1 つ目のイベントリスナーは、タイマーが起動するたびに発生する <codeph>TimerEvent.TIMER</codeph> イベントによってトリガーされます。<codeph>timerHandler()</codeph> メソッドによって <codeph>statusTextField</codeph> テキストフィールドのテキストが変更され、残りの秒数が反映されます。 </p>
 <p><b>注意：</b>Timer クラスは、起動する必要がある回数（<codeph>repeats</codeph>）を管理します。これは、<codeph>currentCount</codeph> プロパティの数値を増やすことによって実行されます。</p> 
 
 <p>最後にタイマーが呼び出された後、<codeph>TimerEvent.TIMER_COMPLETE</codeph> イベントが送出され、<codeph>completeHandler()</codeph> メソッドが呼び出されます。 <codeph>completeHandler()</codeph> メソッドによって <codeph>inputTextField</codeph> テキストフィールドの型が <codeph>INPUT</codeph> から <codeph>DYNAMIC</codeph> に変更されます。これは、ユーザーがテキストを入力または変更できなくなることを意味します。</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.Event;

    public class Timer_constructorExample extends Sprite {
            private var statusTextField:TextField = new TextField();        
            private var inputTextField:TextField = new TextField();
            private var delay:uint = 30000;
            private var repeat:uint = 3;
            private var myTimer:Timer = new Timer(delay, repeat);
            
        public function Timer_constructorExample() {
            inputTextField.x = 10;
            inputTextField.y = 10;
            inputTextField.border = true;
            inputTextField.background = true;
            inputTextField.height = 200;
            inputTextField.width = 200;
            inputTextField.multiline = true;
            inputTextField.wordWrap = true;
            inputTextField.type = TextFieldType.INPUT;

            statusTextField.x = 10;
            statusTextField.y = 220;
            statusTextField.background = true;
            statusTextField.autoSize = TextFieldAutoSize.LEFT;   

            myTimer.start(); 
            statusTextField.text = "You have " + ((delay * repeat) / 1000) 
                                 + " seconds to write your response.";

            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);

            addChild(inputTextField);
            addChild(statusTextField);
        }

        private function timerHandler(e:TimerEvent):void{
            repeat--;
            statusTextField.text = ((delay * repeat) / 1000) + " seconds left.";
        }

        private function completeHandler(e:TimerEvent):void {
            statusTextField.text = "Times Up.";
            inputTextField.type = TextFieldType.DYNAMIC;    
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.utils:Timer:reset"><apiName>reset</apiName><shortdesc>
   	 タイマーが実行されている場合はタイマーを停止して、ストップウォッチのリセットボタンのように currentCount プロパティを 0 に戻します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
   	 タイマーが実行されている場合はタイマーを停止して、ストップウォッチのリセットボタンのように、<codeph>currentCount</codeph> プロパティを 0 に戻します。その後、<codeph>start()</codeph> が呼び出されると、<codeph>repeatCount</codeph> 値で指定した繰り返しの回数のタイマーインスタンスが実行されます。
   	 
   	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#Timer/stop()"><linktext>Timer.stop()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:Timer:start"><apiName>start</apiName><shortdesc>
	 タイマーがまだ実行されていない場合は、タイマーを起動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 タイマーがまだ実行されていない場合は、タイマーを起動します。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:Timer:stop"><apiName>stop</apiName><shortdesc>
	 タイマーを停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 タイマーを停止します。<codeph>stop()</codeph> の後に <codeph>start()</codeph> が呼び出されると、<codeph>repeatCount</codeph> プロパティで指定した残りの<i/>繰り返しの回数のタイマーインスタンスが実行されます。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#Timer/reset()"><linktext>Timer.reset()</linktext></link></related-links></apiOperation><apiValue id="flash.utils:Timer:currentCount:get"><apiName>currentCount</apiName><shortdesc>
	 ゼロで開始してから現在までに起動されたタイマーの合計回数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 ゼロで開始してから現在までに起動されたタイマーの合計回数です。タイマーをリセットした場合は、リセット以降の回数のみがカウントされます。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:Timer:delay:get"><apiName>delay</apiName><shortdesc>
	 ミリ秒単位で指定したタイマーイベント間の遅延です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>指定した遅延がマイナスの場合、または有限数でない場合は、例外が発生します。
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 ミリ秒単位で指定したタイマーイベント間の遅延です。タイマーの実行中に遅延間隔を設定すると、同じ <codeph>repeatCount</codeph> の繰り返し回数でタイマーが再起動されます。
     
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:Timer:repeatCount:get"><apiName>repeatCount</apiName><shortdesc>
	 タイマーを実行する合計回数を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 タイマーを実行する合計回数を設定します。繰り返し回数を 0 に設定すると、<codeph>stop()</codeph> メソッドが呼び出されるまで、またはプログラムによって停止されるまで、タイマーは無限に継続されます。繰り返し回数をゼロ以外に指定すると、タイマーは指定した回数実行されます。<codeph>currentCount</codeph> 以下の合計を <codeph>repeatCount</codeph> に設定するとタイマーは停止し、再起動されません。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:Timer:running:get"><apiName>running</apiName><shortdesc>
     タイマーの現在の状態です。タイマーの実行中は true、それ以外は false です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     タイマーの現在の状態です。タイマーの実行中は <codeph>true</codeph>、それ以外は <codeph>false</codeph> です。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.utils:CompressionAlgorithm"><apiName>CompressionAlgorithm</apiName><shortdesc>
 CompressionAlgorithm クラスは、圧縮オプションと非圧縮オプションの名前のストリング定数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 CompressionAlgorithm クラスは、圧縮オプションと非圧縮オプションの名前のストリング定数を定義します。これらの定数は、<codeph>algorithm</codeph> パラメーターの値として <codeph>ByteArray.compress()</codeph> メソッドおよび <codeph>ByteArray.uncompress()</codeph> メソッドで使用されます。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.utils.xml#ByteArray/compress()"><linktext>flash.utils.ByteArray.compress()</linktext></link><link href="flash.utils.xml#ByteArray/uncompress()"><linktext>flash.utils.ByteArray.uncompress()</linktext></link></related-links><apiValue id="flash.utils:CompressionAlgorithm:DEFLATE"><apiName>DEFLATE</apiName><shortdesc>
	 deflate 圧縮アルゴリズムに使用するストリングを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deflate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 deflate 圧縮アルゴリズムに使用するストリングを定義します。
	 
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:CompressionAlgorithm:ZLIB"><apiName>ZLIB</apiName><shortdesc>
	zlib 圧縮アルゴリズムに使用するストリングを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>zlib</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	zlib 圧縮アルゴリズムに使用するストリングを定義します。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.utils:IDataInput"><apiName>IDataInput</apiName><shortdesc>
IDataInput インターフェイスには、バイナリデータを読み取る一連のメソッドがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
IDataInput インターフェイスには、バイナリデータを読み取る一連のメソッドがあります。このインターフェイスは、バイナリデータを書き込む IDataOutput インターフェイスと同様に I/O 処理を行います。
<p>IDataInput および IDataOutput 操作のすべては、デフォルトでは "bigEndian"（シーケンスの最上位バイトが最下位または最初の記憶領域アドレスに保存されます）で、ブロッキングは発生しません。データが十分にない場合は、<codeph>EOFError</codeph> 例外が発生します。<codeph>IDataInput.bytesAvailable</codeph> プロパティを使用して、読み取り可能なデータ数を特定します。</p>

<p>データの書き込み時ではなく、読み取り時にのみ符号拡張が問題となります。したがって、<codeph>IDataInput.readUnsignedByte()</codeph> と <codeph>IDataInput.readUnsignedShort()</codeph> を処理するために書き込みメソッドを分割する必要はありません。つまり、次のようになります。</p>
<ul><li><codeph>IDataOutput.writeByte()</codeph> は、<codeph>IDataInput.readUnsignedByte()</codeph> および <codeph>IDataInput.readByte()</codeph> と共に使用します。</li>
<li><codeph>IDataOutput.writeShort()</codeph> は、<codeph>IDataInput.readUnsignedShort()</codeph> および <codeph>IDataInput.readShort()</codeph> と共に使用します。</li></ul>

</apiDesc><example conref="examples\DataInputExample.as"> 次の例では、クラス <codeph>DataInputExample</codeph> を使用して、ブールおよび pi の倍精度の浮動小数表現をバイト配列に書き込みます。ここでは以下の手順を実行します。
 <ol>
     <li>新しい ByteArray オブジェクトインスタンス <codeph>byteArr</codeph> を宣言します。</li>
     <li>バイトと等価のブール値 <codeph>false</codeph> および pi の平方根と等価の倍精度の浮動小数を書き込みます。</li>
     <li>ブール値および倍精度浮動小数点数を読み出します。</li>
 </ol>
 
 <p>コードセグメントが最後に追加され、ファイルの終端エラーをチェックして、バイトストリームが最後まで読み取られないことを確認します。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.utils.ByteArray;
    import flash.errors.EOFError;

    public class DataInputExample extends Sprite {        
        public function DataInputExample() {
            var byteArr:ByteArray = new ByteArray();

            byteArr.writeBoolean(false);
            byteArr.writeDouble(Math.PI);
            
            byteArr.position = 0;

            try {
                trace(byteArr.readBoolean()); // false
            } 
            catch(e:EOFError) {
                trace(e);           // EOFError: Error #2030: End of file was encountered.
            }
            
            try {
                trace(byteArr.readDouble());    // 3.141592653589793
            } 
            catch(e:EOFError) {
                trace(e);           // EOFError: Error #2030: End of file was encountered.
            }
            
            try {
                trace(byteArr.readDouble());
            } 
            catch(e:EOFError) {
                trace(e);        // EOFError: Error #2030: End of file was encountered.
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#IDataOutput"><linktext>IDataOutput インターフェイス</linktext></link><link href="flash.utils.xml#IDataInput/endian"><linktext>endian</linktext></link><link href="flash.filesystem.xml#FileStream"><linktext>FileStream クラス</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket クラス</linktext></link><link href="flash.net.xml#URLStream"><linktext>URLStream クラス</linktext></link><link href="flash.utils.xml#ByteArray"><linktext>ByteArray クラス</linktext></link><link href="flash.errors.xml#EOFError"><linktext>EOFError クラス</linktext></link></related-links><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readBoolean"><apiName>readBoolean</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列からブール値を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>バイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> のブール値が返されます。
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列からブール値を読み取ります。 1 バイトが読み取られ、バイトがゼロ以外の場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> が返されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readByte"><apiName>readByte</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号付きバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>戻り値は -128 ～ 127 の範囲です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号付きバイトを読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readBytes"><apiName>readBytes</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から、length パラメーターで指定したデータバイト数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>データの読み込み先の <codeph>ByteArray</codeph> オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>データの読み取りを開始する <codeph>bytes</codeph> パラメーターへのオフセットです。
	 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>読み取るバイト数です。デフォルト値の 0 に設定すると、すべてのデータが読み取られます。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から、<codeph>length</codeph> パラメーターで指定したデータバイト数を読み取ります。 このバイトは、<codeph>bytes</codeph> パラメーターで指定した ByteArray オブジェクトの、<codeph>offset</codeph> で指定された位置以降に読み込まれます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readDouble"><apiName>readDouble</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から IEEE 754 倍精度浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>IEEE 754 倍精度浮動小数点数です。
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から IEEE 754 倍精度浮動小数点数を読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readFloat"><apiName>readFloat</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から IEEE 754 単精度浮動小数点数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>IEEE 754 単精度浮動小数点数です。
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から IEEE 754 単精度浮動小数点数を読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readInt"><apiName>readInt</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号付き 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>戻り値は -2147483648 ～ 2147483647 の範囲です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号付き 32 ビット整数を読み取ります。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readMultiByte"><apiName>readMultiByte</apiName><shortdesc>
	 指定した文字セットを使用して、ファイルストリーム、バイトストリームまたはバイト配列から指定した長さのマルチバイトストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>IDataInput, IDataInput.readMultiByte, readMultiByte
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>UTF-8 エンコードされたストリングです。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>バイトストリームから読み取るバイト数です。
	 </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>バイトの解釈に使用する文字セットを表すストリングです。文字セットのストリングには、<codeph>"shift-jis"</codeph>、<codeph>"cn-gb"</codeph>、および <codeph>"iso-8859-1"</codeph> などがあります。完全な一覧については、<xref href="../../charset-codes.html">「サポートする文字セット」</xref>を参照してください。 
	 
     <p><b>メモ：</b><codeph>charSet</codeph> パラメーターの値が現在のシステムで認識されない場合、<ph platform="actionscript">Adobe<sup>®</sup> Flash<sup>®</sup> Player または</ph> Adobe<sup>®</sup> AIR<sup>®</sup> は、システムのデフォルトコードページを文字セットとして使用します。 例えば、<codeph>charSet</codeph> パラメーターの指定で <codeph>myTest.readMultiByte(22, "iso-8859-01")</codeph> のように <codeph>01</codeph> を <codeph>1</codeph> の代わりに使用した場合、その文字セットパラメーターは開発マシンでは認識される場合がありますが、別のマシンでは認識されない可能性があります。もう一方のマシンでは、<ph platform="actionscript">Flash Player または</ph> AIR ランタイムがシステムのデフォルトコードページを使用することになります。</p>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定した文字セットを使用して、ファイルストリーム、バイトストリームまたはバイト配列から指定した長さのマルチバイトストリングを読み取ります。
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readObject"><apiName>readObject</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から、AMF 直列化形式でエンコードされたオブジェクトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>非直列化されたオブジェクトです。
	 
	 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から、AMF 直列化形式でエンコードされたオブジェクトを読み取ります。
	 </apiDesc></apiOperationDetail><related-links><link href="flash.utils.xml#IDataInput/objectEncoding"><linktext>objectEncoding</linktext></link><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readShort"><apiName>readShort</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号付き 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>戻り値は -32768 ～ 32767 の範囲です。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号付き 16 ビット整数を読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readUTF"><apiName>readUTF</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から UTF-8 ストリングを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>文字のバイト表現で作成された UTF-8 ストリングです。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から UTF-8 ストリングを読み取ります。 このストリングには、バイト単位の長さを示す符号なし short が前に付いているものと見なされます。
	 
	 <p>このメソッドは、Java IDataInput インターフェイスの <codeph>readUTF()</codeph> メソッドによく似ています。<sup/></p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readUTFBytes"><apiName>readUTFBytes</apiName><shortdesc>
	 バイトストリームまたはバイト配列から UTF-8 の   バイトのシーケンスを読み取り、ストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定した長さの文字のバイト表現で作成された UTF-8 ストリングです。	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>読み取るバイト数です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 バイトストリームまたはバイト配列から UTF-8 の   バイトのシーケンスを読み取り、ストリングを返します。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readUnsignedByte"><apiName>readUnsignedByte</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号なしバイトを読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>戻り値は 0 ～ 255 の範囲です。 	   
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号なしバイトを読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readUnsignedInt"><apiName>readUnsignedInt</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号なし 32 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>戻り値は 0 ～ 4294967295 の範囲です。
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号なし 32 ビット整数を読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.utils:IDataInput:flash.utils:IDataInput:readUnsignedShort"><apiName>readUnsignedShort</apiName><shortdesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号なし 16 ビット整数を読み取ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>読み取り可能なデータが不足しています。
	 </apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>戻り値は 0 ～ 65535 の範囲です。 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 ファイルストリーム、バイトストリームまたはバイト配列から符号なし 16 ビット整数を読み取ります。
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.utils:IDataInput:flash.utils:IDataInput:bytesAvailable:get"><apiName>bytesAvailable</apiName><shortdesc>
	 入力バッファーで読み取ることができるデータのバイト数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 入力バッファーで読み取ることができるデータのバイト数を返します。読み取りメソッドを使用する前に、ユーザーコードで <codeph>bytesAvailable</codeph> を呼び出して、読み取るデータが十分にあることを確認します。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.utils:IDataInput:flash.utils:IDataInput:endian:get"><apiName>endian</apiName><shortdesc>
	 データのバイト順序（Endian クラスの BIG_ENDIAN 定数または LITTLE_ENDIAN 定数）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 データのバイト順序（Endian クラスの <codeph>BIG_ENDIAN</codeph> 定数または <codeph>LITTLE_ENDIAN</codeph> 定数）です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Endian"><linktext>Endian クラス</linktext></link></related-links></apiValue><apiValue id="flash.utils:IDataInput:flash.utils:IDataInput:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     readObject() メソッドを使用してバイナリデータの書き込みまたは読み取りを行うときに AMF3 と AMF0 のどちらのフォーマットを使用するかを特定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>readObject()</codeph> メソッドを使用してバイナリデータの書き込みまたは読み取りを行うときに AMF3 と AMF0 のどちらのフォーマットを使用するかを特定するために使用されます。 この値は、ObjectEncoding クラスの定数です。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#IDataInput/readObject()"><linktext>readObject()</linktext></link><link href="flash.utils.xml#IDataOutput/writeObject()"><linktext>IDataOutput.writeObject()</linktext></link><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding クラス</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.utils:Dictionary"><apiName>Dictionary</apiName><shortdesc>
 Dictionary クラスでは、プロパティの動的なコレクションを作成し、キーの比較に厳密な等式（===）を使用できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Dictionary クラスでは、プロパティの動的なコレクションを作成し、キーの比較に厳密な等式（<codeph>===</codeph>）を使用できます。オブジェクトがキーとして使用されている場合は、オブジェクトの識別子を使用してオブジェクトを検索し、オブジェクトの <codeph>toString()</codeph> を呼び出して返される値は使用されません。Dictionary コレクション内の Numbers のようなプリミティブ（ビルトイン）オブジェクトは、通常のオブジェクトのプロパティであるときと同じように動作します。
 
 <p platform="actionscript">次のステートメントは、Dictionary オブジェクトと Key オブジェクトの関係を示します。</p>
 
 <codeblock platform="actionscript">
 var dict:Dictionary = new Dictionary();
 var obj:Object = new Object();
 var key:Object = new Object();
 key.toString = function() { return "key" }
  
 dict[key] = "Letters";
 obj["key"] = "Letters";
  
 dict[key] == "Letters"; // true
 obj["key"] == "Letters"; // true 
 obj[key] == "Letters"; // true because key == "key" is true because key.toString == "key"
 dict["key"] == "Letters"; // false because "key" === key is false
 delete dict[key]; //removes the key
 </codeblock>
 
 <p><b>重要 :</b> Dictionary クラスは ActionScript 3.0 コード (SWF コンテンツで実行) のみで使用できます。JavaScript コード (Adobe<sup>®</sup> AIR™ で実行) では使用できません。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="../../operators.html#strict_equality"><linktext>=== (strict equality)</linktext></link></related-links><apiConstructor id="flash.utils:Dictionary:Dictionary"><apiName>Dictionary</apiName><shortdesc>
	 新しい Dictionary オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>weakKeys</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>オブジェクトキーに "弱" 参照を使用するように、Dictionary オブジェクトに指示します。オブジェクトへの唯一の参照が、指定した Dictionary オブジェクトにある場合は、そのキーがガベージコレクションの対象となり、オブジェクトが収集されるときにテーブルから削除されます。
  	 
  	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい Dictionary オブジェクトを作成します。Dictionary オブジェクトからキーを削除するには、<codeph>delete</codeph> 演算子を使用します。
  	 
  	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>