<?xml version="1.0"?>
<apiPackage id="flash.xml"><apiName>flash.xml</apiName><apiDetail/><apiClassifier id="flash.xml:XMLNode"><apiName>XMLNode</apiName><shortdesc>
 XMLNode クラスは、ActionScript 2.0 に存在していて、ActionScript 3.0 で名前が変更された、古い XML オブジェクトを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode, XMLNode object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 XMLNode クラスは、ActionScript 2.0 にあり、ActionScript 3.0 で名前が変更された、古い XML オブジェクトを表します。ActionScript 3.0 では、代わりに E4X（ECMAScript for XML）をサポートする新しいトップレベルの <xref href="../../XML.html">XML</xref> クラスおよび関連クラスを使用することをお勧めします。XMLNode クラスがあるのは、後方互換性を維持するためです。
 
 </apiDesc><example conref="examples\XMLDocumentExample.as"> 次の例では、XMLDocument クラスおよび XMLNode クラスを使用し、XML ドキュメントを解析してフォーマットします。この例では、外部 XML ファイルをロードするのではなく、トップレベルの XML クラスを使用して、XML ドキュメントを作成し、これを解析します。 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.xml.XMLDocument;
    import flash.xml.XMLNode;
    import flash.xml.XMLNodeType;

    public class XMLDocumentExample extends Sprite {
        public function XMLDocumentExample() {
            var result:XMLDocument = new XMLDocument();
            result.ignoreWhite = true;
            result.parseXML(getXMLString());

            var books:Array = parseBooks(result.firstChild);
            trace("books: \n" + books);
        }

        private function parseBooks(node:XMLNode):Array {
            var books:Array = new Array();

            var kids:Array = node.childNodes;
            for each(var item:XMLNode in kids) {
                parseBook(item, books);
            }

            return books;
        }

        private function parseBook(node:XMLNode, books:Array):void {
            var item:Book = new Book();
            item.setPublisher(node.attributes.publisher);
            item.setName(node.attributes.name);
            books.push(item);
        }

        private function getXMLString():String {
            var list:XML = &lt;books>
                                &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                                &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                                &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                                &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                                &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                                &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                            &lt;/books>;
            return list.toXMLString();
        }
    }

}
class Book {
    private var publisher:String;
    private var name:String;

    public function setPublisher(publisher:String):void {
        this.publisher = publisher;
    }

    public function setName(name:String):void {
        this.name = name;
    }

    public function toString():String {
        return "[Book name: " + name + " publisher: " + publisher + "]\n";
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#XML"><linktext>XML</linktext></link><link href="flash.xml.xml#XMLDocument"><linktext>flash.xml.XMLDocument</linktext></link></related-links><apiConstructor id="flash.xml:XMLNode:XMLNode"><apiName>XMLNode</apiName><shortdesc>
 新しい XMLNode オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>new XMLNode, new, constructor
 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>ノードタイプは、XML エレメントの場合は 1、テキストノードの場合は 3 になります。
 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>新しい XMLNode オブジェクトを作成するために解析される XML テキストです。 
 
 
 
 
 
 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 新しい XMLNode オブジェクトを作成します。XMLNode クラスのメソッドを呼び出す前に、コンストラクターを使用して XMLNode オブジェクトを作成する必要があります。
 <p><b>注意：XML ドキュメントツリーにエレメントとテキストノードを追加するには、</b><codeph>createElement()</codeph> メソッドおよび <codeph>createTextNode()</codeph> メソッドを使用します。</p>
 
 </apiDesc></apiConstructorDetail><related-links><link href="flash.xml.xml#XMLDocument/createElement()"><linktext>XMLDocument.createElement()</linktext></link><link href="flash.xml.xml#XMLDocument/createTextNode()"><linktext>XMLDocument.createTextNode()</linktext></link></related-links></apiConstructor><apiOperation id="flash.xml:XMLNode:appendChild"><apiName>appendChild</apiName><shortdesc>
	  
	 指定されたノードを XML オブジェクトの子リストに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.appendchild, appendchild
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier><apiDesc>現在の場所から <codeph>my_xml</codeph> オブジェクトの子リストに移動されるノードを表す XMLNode です。
	 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 指定されたノードを XML オブジェクトの子リストに追加します。このメソッドは、パラメーター <codeph>childNode</codeph> で参照されるノードに対して直接実行されます。ノードのコピーが追加されるわけではありません。追加するノードが別のツリー構造内に既に存在している場合は、ノードを新しい場所に追加すると現在の場所からノードが削除されます。パラメーター <codeph>childNode</codeph> が、別の XML ツリー構造内に既に存在しているノードを参照している場合、追加される子ノードは、今までの親ノードから削除された後で新しいツリー構造に置かれます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:cloneNode"><apiName>cloneNode</apiName><shortdesc>
	  
	 指定された XML オブジェクトと同じタイプ、名前、値、および属性を持つ新しい XML ノードを作成し、返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.clonenode, clodenode
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLNode オブジェクトです。
	 
	 
	 
	 </apiDesc><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>deep</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>ブール値です。<codeph>true</codeph> に設定した場合、指定された XML オブジェクトの子のクローンが再帰的に作成されます。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 指定された XML オブジェクトと同じタイプ、名前、値、および属性を持つ新しい XML ノードを作成し、返します。<codeph>deep</codeph> に <codeph>true</codeph> を設定すると、すべての子ノードのクローンが再帰的に作成されるため、元のオブジェクトのドキュメントツリーが正確に複製されます。 
	 <p>返されるノードのクローンは、クローン作成元のアイテムのツリーとは関連がなくなります。その結果、<codeph>nextSibling</codeph>、<codeph>parentNode</codeph>、および <codeph>previousSibling</codeph> の値はすべて <codeph>null</codeph> になります。<codeph>deep</codeph> パラメーターが <codeph>false</codeph> の場合、または <codeph>my_xml</codeph> ノードに子ノードがない場合は、<codeph>firstChild</codeph> と <codeph>lastChild</codeph> も null です。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:getNamespaceForPrefix"><apiName>getNamespaceForPrefix</apiName><shortdesc>
	 ノードに指定された接頭辞に関連付けられている名前空間 URI を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された接頭辞に関連付けられている名前空間です。 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>このメソッドが返す名前空間に関連付けられている接頭辞です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ノードに指定された接頭辞に関連付けられている名前空間 URI を返します。URI を特定するために、<codeph>getPrefixForNamespace()</codeph> は XML 階層をノードから上方向に検索し、最初の <codeph>xmlns</codeph> 宣言の名前空間 URI を必要に応じて返します。この名前空間 URI は、指定された <codeph>prefix</codeph> に関連付けられているものです。
	 
	 <p>指定された接頭辞に対して定義されている名前空間がない場合は、<codeph>null</codeph> 値が返されます。</p>
	 
	 <p>空のストリング（<codeph>""</codeph>）を <codeph>prefix</codeph> として指定する場合、ノードに対して定義されているデフォルトの名前空間（例えば <codeph>xmlns="http://www.example.com/"</codeph>）があると、このメソッドはデフォルトの名前空間 URI を返します。
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLNode/getPrefixForNamespace()"><linktext>XMLNode.getPrefixForNamespace()</linktext></link><link href="flash.xml.xml#XMLNode/namespaceURI"><linktext>XMLNode.namespaceURI</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLNode:getPrefixForNamespace"><apiName>getPrefixForNamespace</apiName><shortdesc>
	 ノードに指定された名前空間 URI に関連付けられている接頭辞を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された名前空間に関連付けられている接頭辞です。 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>ns</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>このメソッドが返す接頭辞に関連付けられている名前空間 URI です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 ノードに指定された名前空間 URI に関連付けられている接頭辞を返します。接頭辞を特定するために、<codeph>getPrefixForNamespace()</codeph> は XML 階層をノードから上方向に検索し、最初の <codeph>xmlns</codeph> 宣言の接頭辞を必要に応じて返します。この接頭辞は、<codeph>ns</codeph> に一致する名前空間 URI に関連付けられているものです。
	 
	 <p>その URI に対応する <codeph>xmlns</codeph> 宣言がない場合、<codeph>null</codeph> が返されます。その URI に対応する <codeph>xmlns</codeph> 宣言があり、その宣言に関連付けられている接頭辞がない場合は、空のストリング（<codeph>""</codeph>）が返されます。
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLNode/getNamespaceForPrefix()"><linktext>XMLNode.getNamespaceForPrefix()</linktext></link><link href="flash.xml.xml#XMLNode/namespaceURI"><linktext>XMLNode.namespaceURI</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLNode:hasChildNodes"><apiName>hasChildNodes</apiName><shortdesc>
	 指定された XMLNode オブジェクトに子ノードがあるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.haschildnodes, haschildnodes, has child nodes
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された XMLNode オブジェクトに子ノードがある場合は <codeph>true</codeph> を、それ以外の場合は <codeph>false</codeph> を返します。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定された XMLNode オブジェクトに子ノードがあるかどうかを示します。このプロパティは、指定された XMLNode オブジェクトに子ノードがある場合は <codeph>true</codeph> で、それ以外の場合は <codeph>false</codeph> です。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:insertBefore"><apiName>insertBefore</apiName><shortdesc>
	 XML オブジェクトの子リスト内の beforeNode ノードの前に新しい子ノードを挿入します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.insertbefore, insertbefore, insert before
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier><apiDesc>挿入される XMLNode オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>before</apiItemName><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier><apiDesc><codeph>childNode</codeph> の挿入位置の直前の XMLNode オブジェクトです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 XML オブジェクトの子リスト内の <codeph>beforeNode</codeph> ノードの前に新しい子ノードを挿入します。<codeph>beforeNode</codeph> パラメーターが undefined または null の場合、ノードは <codeph>appendChild()</codeph> メソッドを使用して追加されます。<codeph>beforeNode</codeph> が <codeph>my_xml</codeph> の子でない場合、挿入は失敗します。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLNode/cloneNode()"><linktext>XMLNode.cloneNode()</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLNode:removeNode"><apiName>removeNode</apiName><shortdesc>
	 指定された XML オブジェクトをその親から削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.removenode, removenode, remove node
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 指定された XML オブジェクトをその親から削除します。また、ノードのすべての子孫も削除します。
	 
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:toString"><apiName>toString</apiName><shortdesc>
	 指定された XMLNode オブジェクトを評価し、ノード、子、および属性を含む XML 構造体のテキスト表現を作成し、結果をストリングとして返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.tostring, tostring
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLNode オブジェクトを表すストリングです。
	 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 指定された XMLNode オブジェクトを評価し、ノード、子、および属性を含む XML 構造体のテキスト表現を作成し、結果をストリングとして返します。 
	 
	 <p>トップレベルの XMLDocument オブジェクト（コンストラクターで作成されたオブジェクト）の場合は、<codeph>XMLDocument.toString()</codeph> メソッドがドキュメントの XML 宣言（保存場所は <codeph>XMLDocument.xmlDecl</codeph> プロパティ）を出力し、その後にドキュメントの <codeph>DOCTYPE</codeph> 宣言（保存場所は <codeph>XMLDocument.docTypeDecl</codeph> プロパティ）、さらにオブジェクト内のすべての XML ノードのテキスト表現と続きます。XML 宣言は、<codeph>XMLDocument.xmlDecl</codeph> プロパティが <codeph>null</codeph> の場合は出力されません。<codeph>DOCTYPE</codeph> 宣言は、<codeph>XMLDocument.docTypeDecl</codeph> プロパティが <codeph>null</codeph> の場合は出力されません。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLDocument/docTypeDecl"><linktext>XMLDocument.docTypeDecl</linktext></link><link href="flash.xml.xml#XMLDocument/xmlDecl"><linktext>XMLDocument.xmlDecl</linktext></link></related-links></apiOperation><apiValue id="flash.xml:XMLNode:firstChild"><apiName>firstChild</apiName><shortdesc>
	 指定された XMLDocument オブジェクトを評価し、親ノードの子リスト内の最初の子を参照します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.firstchild, first child
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 指定された XMLDocument オブジェクトを評価し、親ノードの子リスト内の最初の子を参照します。このプロパティは、ノードに子がないときは <codeph>null</codeph> です。ノードがテキストノードの場合、このプロパティは <codeph>undefined</codeph> です。これは読み取り専用プロパティなので、子ノードの操作には使用できません。子ノードを操作するには、<codeph>appendChild()</codeph> メソッド、<codeph>insertBefore()</codeph> メソッド、および <codeph>removeNode()</codeph> メソッドを使用します。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:lastChild"><apiName>lastChild</apiName><shortdesc>
	 ノードの子リスト内の最後の子を参照する XMLNode 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.lastchild, lastchild, last child
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 ノードの子リスト内の最後の子を参照する XMLNode 値です。<codeph>XMLNode.lastChild</codeph> プロパティは、ノードに子がないときは <codeph>null</codeph> です。このプロパティは子ノードの操作には使用できません。子ノードを操作するには、<codeph>appendChild()</codeph> メソッド、<codeph>insertBefore()</codeph> メソッド、および <codeph>removeNode()</codeph> メソッドを使用します。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nextSibling"><apiName>nextSibling</apiName><shortdesc>
	 親ノードの子リスト内の次の子ノードを参照する XMLNode 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.nextsibling, next sibling
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 親ノードの子リスト内の次の子ノードを参照する XMLNode 値です。子リストに次のノードがない場合、このプロパティは <codeph>null</codeph> になります。このプロパティは子ノードの操作には使用できません。子ノードを操作するには、<codeph>appendChild()</codeph> メソッド、<codeph>insertBefore()</codeph> メソッド、および <codeph>removeNode()</codeph> メソッドを使用します。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/firstChild"><linktext>XMLNode.firstChild</linktext></link><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nodeName"><apiName>nodeName</apiName><shortdesc>
	 XMLNode オブジェクトのノード名を表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.nodename, node name
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 XMLNode オブジェクトのノード名を表すストリングです。XMLNode オブジェクトが XML エレメントである場合（<codeph>nodeType == 1</codeph>）、<codeph>nodeName</codeph> は XML ファイル内のノードを表すタグの名前です。例えば、<codeph>TITLE</codeph> は <codeph>nodeName</codeph>（HTML <codeph>TITLE</codeph> タグ）です。XMLNode オブジェクトがテキストノードである（<codeph>nodeType == 3</codeph>）場合、nodeName は <codeph>null</codeph> です。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nodeType"><apiName>nodeType</apiName><shortdesc>
	 nodeType 定数値です。XML エレメントの場合は XMLNodeType.ELEMENT_NODE、テキストノードの場合は XMLNodeType.TEXT_NODE になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML.nodetype, node type
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>nodeType</codeph> の定数値。XML エレメントの場合は <codeph>XMLNodeType.ELEMENT_NODE</codeph>、テキストノードの場合は <codeph>XMLNodeType.TEXT_NODE</codeph> になります。 
	 <p><codeph>nodeType</codeph> は、W3C DOM レベル 1 勧告（<xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>）の NodeType の一覧に記載されている数値です。次の表は、これらの数値の一覧です。</p>
	 <p><adobetable><row><entry>4</entry><entry>CDATA_SECTION_NODE</entry></row>
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry align="left">整数値</entry><entry align="left">定義されている定数</entry></row></thead><tbody><row><entry>1</entry><entry>ELEMENT_NODE</entry></row><row><entry>3</entry><entry>TEXT_NODE</entry></row><row><entry>5</entry><entry>ENTITY_REFERENCE_NODE</entry></row><row><entry>7</entry><entry>PROCESSING_INSTRUCTION_NODE</entry></row><row><entry>9</entry><entry>DOCUMENT_NODE</entry></row><row><entry>11</entry><entry>DOCUMENT_FRAGMENT_NODE</entry></row></tbody></tgroup></adobetable></p>
	 <p>Flash Player に組み込まれている XMLNode クラスがサポートするのは、<codeph>XMLNodeType.ELEMENT_NODE</codeph> と <codeph>XMLNodeType.TEXT_NODE</codeph> だけです。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNodeType/TEXT_NODE"><linktext>XMLNodeType.TEXT_NODE</linktext></link><link href="flash.xml.xml#XMLNodeType/ELEMENT_NODE"><linktext>XMLNodeType.ELEMENT_NODE</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nodeValue"><apiName>nodeValue</apiName><shortdesc>
	 XMLDocument オブジェクトのノード値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.nodevalue, nodevalue, node value
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 XMLDocument オブジェクトのノード値です。XMLDocument オブジェクトがテキストノードである場合、<codeph>nodeType</codeph> は 3 であり、<codeph>nodeValue</codeph> はノードのテキストです。XMLDocument オブジェクトが XML エレメントである（<codeph>nodeType</codeph> が 1）場合、<codeph>nodeValue</codeph> は <codeph>null</codeph> で、読み取り専用です。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:parentNode"><apiName>parentNode</apiName><shortdesc>
	 指定された XML オブジェクトの親ノードを参照する XMLNode 値です。ノードに親がない場合は null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.parentnode, parentnode, parent node
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 指定された XML オブジェクトの親ノードを参照する XMLNode 値。ノードに親がない場合は <codeph>null</codeph> を返します。これは読み取り専用プロパティなので、子ノードの操作には使用できません。子ノードを操作するには、<codeph>appendChild()</codeph> メソッド、<codeph>insertBefore()</codeph> メソッド、および <codeph>removeNode()</codeph> メソッドを使用します。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:previousSibling"><apiName>previousSibling</apiName><shortdesc>
	 親ノードの子リスト内の前の子ノードを参照する XMLNode 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.previousSibling, previousSibling
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 親ノードの子リスト内の前の子ノードを参照する XMLNode 値です。ノードに前の子ノードがない場合は、null を返します。このプロパティは子ノードの操作には使用できません。子ノードを操作するには、<codeph>appendChild()</codeph> メソッド、<codeph>insertBefore()</codeph> メソッド、および <codeph>removeNode()</codeph> メソッドを使用します。
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/lastChild"><linktext>XMLNode.lastChild</linktext></link><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:attributes:get"><apiName>attributes</apiName><shortdesc>
	 指定された XMLNode インスタンスのすべての属性を含むオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.attributes, attributes
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 指定された XMLNode インスタンスのすべての属性を含むオブジェクトです。XMLNode 属性オブジェクトには、XMLNode インスタンスの各属性に対して 1 つずつ変数があります。この変数はオブジェクトの一部として定義されているので、通常はオブジェクトのプロパティとして参照されます。各属性の値は、対応するプロパティにストリングとして保存されます。例えば、<codeph>color</codeph> という名前の属性がある場合、次のコードで示すように、<codeph>color</codeph> をプロパティ名として指定して、その属性の値を取得することができます。 
	 <pre>
	 var myColor:String = doc.firstChild.attributes.color
	 </pre>
	 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLNode:childNodes:get"><apiName>childNodes</apiName><shortdesc>
	 指定された XMLNode オブジェクトの子の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.childnodes, childnodes
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 指定された XMLNode オブジェクトの子の配列です。配列内の各エレメントは、子ノードを表す XMLNode オブジェクトへの参照です。これは読み取り専用プロパティであり、子ノードの操作には使用できません。 子ノードを操作するには、<codeph>appendChild()</codeph>、<codeph>insertBefore()</codeph>、<codeph>removeNode()</codeph> の各メソッドを使用してください。 
	 
	 <p>テキストノード（<codeph>nodeType == 3</codeph>）の場合、このプロパティは undefined になります。</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:localName:get"><apiName>localName</apiName><shortdesc>
	 XML ノード名のローカル名部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 XML ノード名のローカル名部分です。名前空間の接頭辞を除いたエレメント名です。例えば、ノード <codeph>&lt;contact:mailbox/>bob@example.com&lt;/contact:mailbox></codeph> には、ローカル名 "mailbox" と接頭辞 "contact" があり、この 2 つで完全なエレメント名 "contact.mailbox" が構成されます。
	 
	 <p>名前空間の接頭辞には、XML ノードオブジェクトの <codeph>prefix</codeph> プロパティによってアクセスできます。<codeph>nodeName</codeph> プロパティは、接頭辞とローカル名を含む完全な名前を返します。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLNode:namespaceURI:get"><apiName>namespaceURI</apiName><shortdesc>
	 XML ノードに接頭辞が付いている場合、namespaceURI はその接頭辞（URI）の xmlns 宣言の値となります。これは通常、名前空間 URI と呼ばれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>XML ノードの接頭辞が解決される名前空間の URI です。 
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 XML ノードに接頭辞が付いている場合、<codeph>namespaceURI</codeph> はその接頭辞（URI）の <codeph>xmlns</codeph> 宣言の値となります。これは通常、名前空間 URI と呼ばれます。<codeph>xmlns</codeph> 宣言は、現在のノードか、XML 階層でそれより上位のノードにあります。 
	 
	 <p>XML ノードに接頭辞が付いていない場合、<codeph>namespaceURI</codeph> プロパティの値は、定義済みのデフォルトの名前空間（例えば <codeph>xmlns="http://www.example.com/"</codeph>）があるかどうかによって異なります。デフォルト名前空間がある場合、<codeph>namespaceURI</codeph> プロパティの値はデフォルトの名前空間の値です。デフォルトの名前空間がない場合、そのノードの <codeph>namespaceURI</codeph> プロパティは空のストリング（<codeph>""</codeph>）です。</p>
	 
	 <p><codeph>getNamespaceForPrefix()</codeph> メソッドを使用すると、特定の接頭辞に関連付けられている名前空間を特定できます。<codeph>namespaceURI</codeph> プロパティは、ノード名に関連付けられている接頭辞を返します。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/getNamespaceForPrefix()"><linktext>getNamespaceForPrefix()</linktext></link><link href="flash.xml.xml#XMLNode/getPrefixForNamespace()"><linktext>getPrefixForNamespace()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:prefix:get"><apiName>prefix</apiName><shortdesc>
	 XML ノード名の接頭辞部分です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 XML ノード名の接頭辞部分です。例えば、ノード <codeph>&lt;contact:mailbox/>bob@example.com&lt;/contact:mailbox></codeph> には、ローカル名 "mailbox" と接頭辞 "contact" があり、この 2 つで完全なエレメント名 "contact.mailbox" が構成されます。
	 
	 <p>XML ノードオブジェクトの <codeph>nodeName</codeph> プロパティは、接頭辞とローカル名を含む完全な名前を返します。エレメント名のローカル名部分には、<codeph>localName</codeph> プロパティ経由でアクセスできます。 </p>
	 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.xml:XMLNodeType"><apiName>XMLNodeType</apiName><shortdesc>
 XMLNodeType クラスには、XMLNode.nodeType で使用する定数があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 XMLNodeType クラスには、<codeph>XMLNode.nodeType</codeph> で使用する定数があります。値は、W3C DOM レベル 1 勧告（<xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>）の NodeType の一覧に定義されています。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links><apiValue id="flash.xml:XMLNodeType:ELEMENT_NODE"><apiName>ELEMENT_NODE</apiName><shortdesc>
 	 ノードがエレメントであることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
 	 ノードがエレメントであることを指定します。この定数は、<codeph>XMLNode.nodeType</codeph> で使用します。値は、W3C DOM レベル 1 勧告（<xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>）の NodeType の一覧に定義されています。
 	 
 	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNodeType:TEXT_NODE"><apiName>TEXT_NODE</apiName><shortdesc>
	 ノードがテキストノードであることを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 ノードがテキストノードであることを指定します。この定数は、<codeph>XMLNode.nodeType</codeph> で使用します。値は、W3C DOM レベル 1 勧告（<xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>）の NodeType の一覧に定義されています。
 	 
 	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.xml:XMLDocument"><apiName>XMLDocument</apiName><shortdesc>
 XMLDocument クラスは、ActionScript 2.0 に存在していた古い XML オブジェクトを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.xml:XMLNode</apiBaseClassifier></apiClassifierDef><apiDesc>
 XMLDocument クラスは、ActionScript 2.0 にあった古い XML オブジェクトを表します。ActionScript 3.0 で新しい XML クラスと名前が競合しないように、ActionScript 3.0 では名前が XMLDocument に変更されています。ActionScript 3.0 では、E4X（ECMAScript for XML）をサポートしている新しい <xref href="../../XML.html">XML</xref> クラスおよび関連クラスを使用することをお勧めします。
 
 <p>XMLDocument クラスと、XMLNode および XMLNodeType があるのは、後方互換性を維持するためです。XML ドキュメントをロードする機能は、現在では URLLoader クラスにあります。</p>
 
 </apiDesc><example conref="examples\XMLDocumentExample.as"> 次の例では、XMLDocument クラスおよび XMLNode クラスを使用し、XML ドキュメントを解析してフォーマットします。この例では、外部 XML ファイルをロードするのではなく、トップレベルの XML クラスを使用して、XML ドキュメントを作成し、これを解析します。 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.xml.XMLDocument;
    import flash.xml.XMLNode;
    import flash.xml.XMLNodeType;

    public class XMLDocumentExample extends Sprite {
        public function XMLDocumentExample() {
            var result:XMLDocument = new XMLDocument();
            result.ignoreWhite = true;
            result.parseXML(getXMLString());

            var books:Array = parseBooks(result.firstChild);
            trace("books: \n" + books);
        }

        private function parseBooks(node:XMLNode):Array {
            var books:Array = new Array();

            var kids:Array = node.childNodes;
            for each(var item:XMLNode in kids) {
                parseBook(item, books);
            }

            return books;
        }

        private function parseBook(node:XMLNode, books:Array):void {
            var item:Book = new Book();
            item.setPublisher(node.attributes.publisher);
            item.setName(node.attributes.name);
            books.push(item);
        }

        private function getXMLString():String {
            var list:XML = &lt;books>
                                &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                                &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                                &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                                &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                                &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                                &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                            &lt;/books>;
            return list.toXMLString();
        }
    }

}
class Book {
    private var publisher:String;
    private var name:String;

    public function setPublisher(publisher:String):void {
        this.publisher = publisher;
    }

    public function setName(name:String):void {
        this.name = name;
    }

    public function toString():String {
        return "[Book name: " + name + " publisher: " + publisher + "]\n";
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLLoader"><linktext>flash.net.URLLoader</linktext></link><link href="#XML"><linktext>XML クラス</linktext></link></related-links><apiConstructor id="flash.xml:XMLDocument:XMLDocument"><apiName>XMLDocument</apiName><shortdesc>
	 新しい XMLDocument オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a new, empty XMLDocument object:
	 <listing>
	 var my_xml:XML = new XML();
	 </listing>
	 <p>The following example creates an XML object by parsing the XML text specified in the <code>source</code> parameter, and populates the newly created XML object with the resulting XML document tree:</p>
	 <listing>
	 var other_xml:XML = new XML("&lt;state name=\"California\">&lt;city>San Francisco&lt;/city>&lt;/state>");
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>新しい XMLDocument オブジェクトを作成するために解析される XML テキストです。 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 新しい XMLDocument オブジェクトを作成します。XMLDocument クラスのメソッドを呼び出す前に、コンストラクターを使用して XMLDocument オブジェクトを作成する必要があります。
	 <p><b>注意：XML ドキュメントツリーにエレメントとテキストノードを追加するには、</b><codeph>createElement()</codeph> メソッドおよび <codeph>createTextNode()</codeph> メソッドを使用します。</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.xml.xml#XMLDocument/createElement()"><linktext>XMLDocument.createElement()</linktext></link><link href="flash.xml.xml#XMLDocument/createTextNode()"><linktext>XMLDocument.createTextNode()</linktext></link></related-links></apiConstructor><apiOperation id="flash.xml:XMLDocument:createElement"><apiName>createElement</apiName><shortdesc>
	 パラメーターで指定された名前を持つ新しい XMLNode オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates three XML nodes using the <code>createElement()</code> method:
	 <listing>
	 // create an XML document
	 var doc:XML = new XML();
	 
	 // create three XML nodes using createElement()
	 var element1:XMLNode = doc.createElement("element1");
	 var element2:XMLNode = doc.createElement("element2");
	 var element3:XMLNode = doc.createElement("element3");
	 
	 // place the new nodes into the XML tree
	 doc.appendChild(element1);
	 element1.appendChild(element2);
	 element1.appendChild(element3);
	 
	 trace(doc);
	 // output: &lt;element1>&lt;element2 />&lt;element3 />&lt;/element1>
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLNode オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>作成する XMLDocument エレメントのタグ名です。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 パラメーターで指定された名前を持つ新しい XMLNode オブジェクトを作成します。初期状態では、新しいノードには、親、子、および兄弟はありません。このメソッドは、エレメントとして新しく作成された XMLNode オブジェクトへの参照を返します。このメソッドと <codeph>XMLDocument.createTextNode()</codeph> メソッドは、XMLDocument オブジェクトのノードを作成するためのコンストラクターメソッドです。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLDocument/createTextNode()"><linktext>XMLDocument.createTextNode()</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLDocument:createTextNode"><apiName>createTextNode</apiName><shortdesc>
	 指定されたテキストを持つ新しい XML テキストノードを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates two XML text nodes using the <code>createTextNode()</code> method, and places them into existing XML nodes:
	 <listing>
	 // create an XML document
	 var doc:XML = new XML();
	 
	 // create three XML nodes using createElement()
	 var element1:XMLNode = doc.createElement("element1");
	 var element2:XMLNode = doc.createElement("element2");
	 var element3:XMLNode = doc.createElement("element3");
	 
	 // place the new nodes into the XML tree
	 doc.appendChild(element1);
	 element1.appendChild(element2);
	 element1.appendChild(element3);
	 
	 // create two XML text nodes using createTextNode()
	 var textNode1:XMLNode = doc.createTextNode("textNode1 String value");
	 var textNode2:XMLNode = doc.createTextNode("textNode2 String value");
	 
	 // place the new nodes into the XML tree
	 element2.appendChild(textNode1);
	 element3.appendChild(textNode2);
	 
	 trace(doc);
	 // output (with line breaks added between tags):
	 // &lt;element1>
	 //    &lt;element2>textNode1 String value&lt;/element2>
	 //    &lt;element3>textNode2 String value&lt;/element3>
	 // &lt;/element1>
	 </listing>
	 
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLNode オブジェクトです。
	 
	 </apiDesc><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>新しいテキストノードを作成するためのテキストです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指定されたテキストを持つ新しい XML テキストノードを作成します。初期状態では、新しいノードには親がありません。また、テキストノードは、子または兄弟を持つことができません。このメソッドは、新しいテキストノードを表す XMLDocument オブジェクトへの参照を返します。このメソッドと <codeph>XMLDocument.createElement()</codeph> メソッドは、XMLDocument オブジェクトのノードを作成するためのコンストラクターメソッドです。
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLDocument/createElement()"><linktext>XMLDocument.createElement()</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLDocument:parseXML"><apiName>parseXML</apiName><shortdesc>
	 value パラメーターで指定された XML テキストを解析し、指定された XMLDocument オブジェクトに XML ツリーを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates and parses an XML packet:
	 <listing>
	 var xml_str:String = "&lt;state name=\"California\">
	 &lt;city>San Francisco&lt;/city>&lt;/state>"
	 
	 // defining the XML source within the XML constructor:
	 var my1_xml:XML = new XML(xml_str);
	 trace(my1_xml.firstChild.attributes.name); // output: California
	 
	 // defining the XML source using the XML.parseXML method:
	 var my2_xml:XML = new XML();
	 my2_xml.parseXML(xml_str);
	 trace(my2_xml.firstChild.attributes.name); // output: California
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>解析され、指定した XMLDocument オブジェクトに渡される XML テキストです。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph>value</codeph> パラメーターで指定された XML テキストを解析し、指定された XMLDocument オブジェクトに XML ツリーを設定します。XMLDocument オブジェクト内の既存のツリーはすべて破棄されます。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLDocument:toString"><apiName>toString</apiName><shortdesc>
	 XML オブジェクトのストリング表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>XML オブジェクトのストリング表現です。
 	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 XML オブジェクトのストリング表現を返します。
	 
 	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.xml:XMLDocument:docTypeDecl"><apiName>docTypeDecl</apiName><shortdesc>
	 XML ドキュメントの DOCTYPE 宣言についての情報を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example uses the <code>XML.docTypeDecl</code> property to set the <code>DOCTYPE</code> declaration for an XML object:
	 <listing>
	 <code><em>my_xml</em></code>.<code>docTypeDecl = "&lt;!DOCTYPE greeting SYSTEM \"hello.dtd\">";</code>
	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 XML ドキュメントの <codeph>DOCTYPE</codeph> 宣言についての情報を指定します。XML テキストが解析され XMLDocument オブジェクトになると、XMLDocument オブジェクトの <codeph>XMLDocument.docTypeDecl</codeph> プロパティはその XML ドキュメントの <codeph>DOCTYPE</codeph> 宣言（例えば <codeph>&lt;!DOCTYPE</codeph> <codeph>greeting SYSTEM "hello.dtd"></codeph> など）のテキストに設定されます。 このプロパティは、XMLNode オブジェクトでなく <codeph>DOCTYPE</codeph> 宣言のストリング表現を使用して設定されます。
	 <p>古い ActionScript の XML パーサーは、妥当性検証用パーサーではありません。<codeph>DOCTYPE</codeph> 宣言はパーサーにより読み取られ、<codeph>XMLDocument.docTypeDecl</codeph> プロパティに格納されますが、DTD の妥当性検査は行われません。</p>
	 <p>解析中に <codeph>DOCTYPE</codeph> 宣言が見つからなかった場合、<codeph>XMLDocument.docTypeDecl</codeph> プロパティは <codeph>null</codeph> に設定されます。<codeph>XML.toString()</codeph> メソッドは、<codeph>XML.docTypeDecl</codeph> の内容を、<codeph>XML.xmlDecl</codeph> に保存されている XML 宣言のすぐ後、XML オブジェクト内の他のテキストよりも前に出力します。<codeph>XMLDocument.docTypeDecl</codeph> が null である場合、<codeph>DOCTYPE</codeph> 宣言は出力されません。</p>
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLDocument:idMap"><apiName>idMap</apiName><shortdesc>
	 id 属性が割り当てられた XML のノードを含むオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a text file named "idMapTest.xml" containing the following text:
	 
	 <listing>&lt;?xml version="1.0"?> 
	 &lt;doc xml:base="http://example.org/today/" xmlns:xlink="http://www.w3.org/1999/xlink"> 
	   &lt;head> 
	     &lt;title>Virtual Library&lt;/title> 
	   &lt;/head> 
	   &lt;body> 
	     &lt;paragraph id="linkP1">See &lt;link xlink:type="simple" xlink:href="new.xml">what's 
	       new&lt;/link>!&lt;/paragraph> 
	     &lt;paragraph>Check out the hot picks of the day!&lt;/paragraph> 
	     &lt;olist xml:base="/hotpicks/"> 
	       &lt;item> 
	         &lt;link id="foo" xlink:type="simple" xlink:href="pick1.xml">Hot Pick #1&lt;/link> 
	       &lt;/item> 
	       &lt;item> 
	         &lt;link id="bar" xlink:type="simple" xlink:href="pick2.xml">Hot Pick #2&lt;/link> 
	       &lt;/item> 
	       &lt;item> 
	         &lt;link xlink:type="simple" xlink:href="pick3.xml">Hot Pick #3&lt;/link> 
	       &lt;/item> 
	     &lt;/olist>
	   &lt;/body> 
	  &lt;/doc>
	 </listing>
	 
	 <p>Then create a SWF file in the same directory as the XML file. Include the following
	 script in the SWF:</p>
	 
	 <listing>
	 var readXML = new XMLDocument();
	 readXML.load("idMapTest.xml");
	 readXML.onLoad = function(success) {
	 	myXML = new XMLDocument();
	 	myXML.parseXML(readXML);	
	 	for (var x in myXML.idMap){
	 		 trace('idMap.' + x + " = " + newline + myXML.idMap[x]);
	 		 trace('____________' + newline);
	 	}
	 }
	 </listing>
	 
	 <p>When you test the SWF file, the following output is generated:</p>
	 
	 <listing>
	 idMap.bar = 
	 &lt;link id="bar" xlink:type="simple" xlink:href="pick2.xml">Hot Pick #2&lt;/link>
	 ____________
	 
	 idMap.foo = 
	 &lt;link id="foo" xlink:type="simple" xlink:href="pick1.xml">Hot Pick #1&lt;/link>
	 ____________
	 
	 idMap.linkP1 = 
	 &lt;paragraph id="linkP1">See &lt;link xlink:type="simple" xlink:href="new.xml">what's 
	 
	       new&lt;/link>!&lt;/paragraph>
	 ____________
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>id</codeph> 属性が割り当てられた XML のノードを含むオブジェクトです。ノードを格納する各オブジェクトのプロパティの名前は <codeph>id</codeph> 属性の値に一致します。
	 
	 <p>例えば、次のような XMLDocument オブジェクトを検討します。</p>
	 
	 <codeblock>
	 &lt;employee id='41'>
	 	&lt;name>
	 		John Doe
	 	&lt;/name>
	 	&lt;address>
	 		601 Townsend St.
	 	&lt;/address>
	 &lt;/employee>
	 
	 &lt;employee id='42'>
	 	&lt;name>
	 		Jane Q. Public
	 	&lt;/name>
	 &lt;/employee>
	 &lt;department id="IT">
	 	Information Technology
	 &lt;/department>
	 </codeblock>
	 
	 <p>この例では、この XMLDocument オブジェクトの <codeph>idMap</codeph> プロパティは、<codeph>41</codeph>、<codeph>42</codeph> および <codeph>IT</codeph> という 3 つのプロパティを持つオブジェクトです。これらのプロパティはそれぞれ対応する <codeph>id</codeph> 値を持つ XMLNode です。例えば、<codeph>IT</codeph> プロパティ（<codeph>idMap</codeph> オブジェクトのプロパティ）は次のノードになります。</p> 
	 
	 <codeblock>
	 &lt;department id="IT">
	 	Information Technology
	 &lt;/department>
	 </codeblock>
	 
	 <p>XMLDocument オブジェクトの <codeph>parseXML()</codeph> メソッドを使用して、<codeph>idMap</codeph> プロパティをインスタンス化する必要があります。</p>
	 
	 <p>同じ <codeph>id</codeph> 値を持つ XMLNode が複数ある場合は、<codeph>idNode</codeph> オブジェクトの対応するプロパティは、解析された最後のノードのプロパティです。次に実際の使用例を示します。</p>
	 
	 <codeblock>
	 var x1:XML = new XMLDocument("&lt;a id='1'>&lt;b id='2' />&lt;c id='1' />&lt;/a>");
	 x2 = new XMLDocument();
	 x2.parseXML(x1);
	 trace(x2.idMap['1']);
	 </codeblock>
	 
	 これによって、<codeph>&lt;c></codeph> ノードが出力されます。 
	 
	 <codeblock>
	 <codeph>&lt;c id='1' /></codeph>
	 </codeblock>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLDocument:ignoreWhite"><apiName>ignoreWhite</apiName><shortdesc>
	 true を設定すると、空白のみを含むテキストノードは解析処理中に破棄されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example loads an XML file with a text node that contains only white space; the <code>foyer</code> tag comprises fourteen space characters. To run this example, create a text file named <em>flooring.xml</em>, and copy the following tags into it:
	 <listing>
	 &lt;house>
	    &lt;kitchen>   ceramic tile   &lt;/kitchen>
	    &lt;bathroom>linoleum&lt;/bathroom>
	    &lt;foyer>              &lt;/foyer>
	 &lt;/house>
	 </listing>
	 <p>Create a new Flash document named <em>flooring.fla</em> and save it to the same directory as the XML file. Place the following code into the main Timeline:</p>
	 <listing>
	 // create a new XML object
	 var flooring:XML = new XML();
	 
	 // set the ignoreWhite property to true (default value is false)
	 flooring.ignoreWhite = true;
	 
	 // After loading is complete, trace the XML object
	 flooring.onLoad = function(success:Boolean) {
	   trace(flooring);
	 }
	 
	 // load the XML into the flooring object
	 flooring.load("flooring.xml");
	 
	 // output (line breaks added for clarity):
	 &lt;house>
	    &lt;kitchen>   ceramic tile   &lt;/kitchen>
	    &lt;bathroom>linoleum&lt;/bathroom>
	    &lt;foyer />
	 &lt;/house>
	 
	 </listing>
	 <p>If you then change the setting of <code>flooring.ignoreWhite</code> to <code>false</code>, or simply remove that line of code entirely, the fourteen space characters in the <code>foyer</code> tag will be preserved:</p>
	 <listing>
	 ...
	 // set the ignoreWhite property to false (default value)
	 flooring.ignoreWhite = false;
	 ...
	 // output (line breaks added for clarity):
	 &lt;house>
	    &lt;kitchen>   ceramic tile   &lt;/kitchen>
	    &lt;bathroom>linoleum&lt;/bathroom>
	    &lt;foyer>              &lt;/foyer>
	 &lt;/house>
	 
	 </listing>
	 <span class="flashonly"><p>The XML_blogTracker.fla and XML_languagePicker.fla files in the ActionScript samples folder also contain a code example. The following are typical paths to this folder:</p>
	 <ul>
	   <li>Windows: <i>boot drive</i>\Program Files\Macromedia\Flash 8\Samples and Tutorials\Samples\ActionScript </li>
	   <li>Macintosh: <i>Macintosh HD</i>/Applications/Macromedia Flash 8/Samples and Tutorials/Samples/ActionScript </li>
	   <li/>
	 </ul>
	 </span>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>true</codeph> を設定すると、空白のみを含むテキストノードは解析処理中に破棄されます。先頭または末尾に空白があるテキストノードは影響を受けません。デフォルト設定は、<codeph>false</codeph> です。 
	 <p>次のコードに示すように、XMLDocument オブジェクトごとに <codeph>ignoreWhite</codeph> プロパティを設定できます。</p>
	 <codeblock>
	 my_xml.ignoreWhite = true;
	 </codeblock>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLDocument:xmlDecl"><apiName>xmlDecl</apiName><shortdesc>
	 ドキュメントの XML 宣言についての情報を指定するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a text field called <code>my_txt</code> 
	 that has the same dimensions as the Stage. The text field displays properties of the XML packet that loads into the SWF file. The doc type declaration displays in <code>my_txt</code>. Add the following ActionScript to your FLA or AS file:
	 <listing>
	 <code>var my_fmt:TextFormat = new TextFormat();</code>
	 <code>my_fmt.font = "_typewriter";</code>
	 <code>my_fmt.size = 12;</code>
	 <code>my_fmt.leftMargin = 10;</code>
	 
	 <code>this.createTextField("my_txt", this.getNextHighestDepth(), 0, 0, Stage.width, Stage.height);</code>
	 <code>my_txt.border = true;</code>
	 <code>my_txt.multiline = true;</code>
	 <code>my_txt.wordWrap = true;</code>
	 <code>my_txt.setNewTextFormat(my_fmt);</code>
	 
	 <code>var my_xml:XML = new XML();</code>
	 <code>my_xml.ignoreWhite = true;</code>
	 <code>my_xml.onLoad = function(success:Boolean) {</code>
	 <code>  var endTime:Number = getTimer();</code>
	 <code>  var elapsedTime:Number = endTime-startTime;</code>
	 <code>  if (success) {</code>
	 <code>    my_txt.text = "xmlDecl:"+newline+my_xml.xmlDecl+newline+newline;</code>
	 <code>    my_txt.text += "contentType:"+newline+my_xml.contentType+newline+newline;</code>
	 <code>    my_txt.text += "docTypeDecl:"+newline+my_xml.docTypeDecl+newline+newline;</code>
	 <code>    my_txt.text += "packet:"+newline+my_xml.toString()+newline+newline;</code>
	 <code>  } else {</code>
	 <code>    my_txt.text = "Unable to load remote XML."+newline+newline;</code>
	 <code>  }</code>
	 <code>  my_txt.text += "loaded in: "+elapsedTime+" ms.";</code>
	 <code>};</code>
	 <code>my_xml.load("http://www.helpexamples.com/crossdomain.xml");</code>
	 <code>var startTime:Number = getTimer();</code>
	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 ドキュメントの XML 宣言についての情報を指定するストリングです。XML ドキュメントが XMLDocument オブジェクトに解析された後、このプロパティはドキュメントの XML 宣言のテキストに設定されます。このプロパティは、XMLNode オブジェクトでなく XML 宣言のストリング表現を使用して設定されます。解析中に XML 宣言が見つからなかった場合、プロパティは <codeph>null</codeph> に設定されます。<codeph>XMLDocument.toString()</codeph> メソッドは、XML オブジェクト内の他のテキストの前に、<codeph>XML.xmlDecl</codeph> プロパティの内容を出力します。<codeph>XML.xmlDecl</codeph> プロパティに <codeph>null</codeph> が含まれている場合、XML 宣言は出力されません。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>