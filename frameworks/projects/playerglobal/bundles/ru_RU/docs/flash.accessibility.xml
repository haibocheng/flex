<?xml version="1.0"?>
<apiPackage id="flash.accessibility"><apiName>flash.accessibility</apiName><apiDetail/><apiClassifier id="flash.accessibility:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Этот класс обеспечивает связь между компонентом и средством чтения с экрана. Средства чтения с экрана применяются для представления содержимого экрана в виде синтезированной речи или шрифта Брайля для слабовидящих пользователей.
 
 <p/>
 
 <p> <i/></p>
 
 <p><xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx"/></p>
 
 <p/>
 
 <p>  <i/></p>
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
	 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  
	 
	 </apiDesc></apiConstructorDetail><related-links><link href=""><linktext/></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction"><apiName>accDoDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p/>
	 
	 <p><codeph/> <codeph/><codeph/></p>
	 
	 </apiDesc><example> 
	 <codeblock rev="3.0">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation"><apiName>accLocation</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph/><codeph/><codeph/>
	 
	 
	 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph/><codeph/>
	 
	 <p><codeph/>  </p>
	 
	 <p> <codeph/> <codeph/></p>	
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/><codeph/><codeph/><codeph/>  <codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect"><apiName>accSelect</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selFlag</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>  
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 
	 <p><codeph/> </p>
	 
	 <p><codeph/><codeph/>  <codeph/></p>
	 
	 <p><codeph/><codeph/> <codeph/><codeph/> </p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/> <codeph/> <codeph/> <codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p></li>
	 </ul>
	 
	 <p><codeph/><codeph/><codeph/> <codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/></p>
	 <p><codeph/><i/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray"><apiName>getChildIDArray</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 <p>  </p>
	 
	 <p>  <i/> </p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction"><apiName>get_accDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc> 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p> </p>
	 
	 <p><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus"><apiName>get_accFocus</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName"><apiName>get_accName</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><codeph/><codeph/></p>
	 
	 <p><codeph/></p>
	 
	 <p>  <codeph/>  </p>
	 
	 <p><codeph/>  <codeph/> </p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><b/><codeph/><codeph/> <codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><b/><codeph/><codeph/> <codeph/></p>
     	 </li>
     	 <li><p><b/><codeph/><codeph/> <codeph/><codeph/><codeph/></p>
     	 </li>
	 </ul>
     	 <p> <codeph/><codeph/> </p>
     	 
     	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="flash.accessibility.xml#AccessibilityProperties"><linktext>flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name"><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole"><apiName>get_accRole</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	  
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2143"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> 
	  
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	  	 
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accRole(childID:uint):uint
	 {
	 	if (childID == 0)
	 		return role;
	 		
	 	return ROLE_SYSTEM_LISTITEM;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#roles"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection"><apiName>get_accSelection</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState"><apiName>get_accState</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2144"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> <codeph/> 
	 
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><xref href="../../accessibilityImplementationConstants.html"/> <codeph/></p>
	 
	 <p/>
	 
	 <p> </p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#states"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue"><apiName>get_accValue</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	  
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p> <codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example><codeph/>
	 
	 <codeblock rev="3.0">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno"><apiName>errno</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	  <codeph/>  <codeph/>
	 
	 </apiDesc></apiValueDetail><related-links><link href="../../accessibilityImplementationConstants.html"><linktext/></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub"><apiName>stub</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	   
	 
	 <p><codeph/></p> 
	 
	 </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.accessibility:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
 Класс AccessibilityProperties позволяет управлять представлением объектов Flash в средствах обеспечения специальных возможностей, например в средствах чтения с экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс AccessibilityProperties позволяет управлять представлением объектов Flash в средствах обеспечения специальных возможностей, например в средствах чтения с экрана.
 
 <p>Можно прикрепить объект AccessibilityProperties к любому экранному объекту, но проигрыватель Flash Player будет читать объект AccessibilityProperties только для определенных объектов: SWF-файлы целиком (представленные классом <codeph>DisplayObject.root</codeph>, объектами контейнера <codeph>DisplayObjectContainer</codeph> и подклассами), кнопки (представленные <codeph>SimpleButton</codeph> и подклассами) и текстовые поля (представленные <codeph>TextField</codeph> и подклассами).</p>
 
 <p>Свойство <codeph>name</codeph> этих объектов является самым важным задаваемым свойством, потому что навигация с использованием средств расширенного доступа осуществляется по именам объектов. Не путайте свойство <codeph>AccessibilityProperties.name</codeph> со свойством <codeph>DisplayObject.name</codeph> – это разные не связанные свойства. Свойство <codeph>AccessibilityProperties.name</codeph> является именем, читаемым вслух с помощью средств расширенного доступа, тогда как <codeph>DisplayObject.name</codeph> является именем переменной, доступной только в коде ActionScript.</p>
 
 <p product="flash">Во время разработки свойства объектов <codeph>AccessibilityProperties</codeph> подменяют соответствующие параметры, доступные на панели специальных возможностей.</p>
 
 <p>Для определения, запущен ли проигрыватель Flash Player в окружении, поддерживающем средства расширенного доступа, используйте свойство <codeph>Capabilities.hasAccessibility</codeph>. При модификации объекта AccessibilityProperties необходимо вызвать метод <codeph>Accessibility.updateProperties()</codeph>, чтобы изменения вступили в силу.</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as"> В следующем примере показано, как использовать классы <codeph>AccessibilityExample</codeph>, <codeph>CustomAccessibleButton</codeph>, <codeph>CustomSimpleButton</codeph> и <codeph>ButtonDisplayState</codeph> для создания меню, соответствующего требованиям доступности веб-контента и совместимого с основными программами экранного доступа. Основные функции класса <codeph>AccessibilityProperties</codeph> таковы:
 
 <ol TYPE="1">
    <li> Вызовите <codeph>configureAssets</codeph>, в результате чего будет создана специальная кнопка, а для нее будут заданы ярлык и описание. Это значения, которые программа экранного доступа отображает для конечного пользователя.</li>        
    <li>Вызовите функцию <codeph>setTimeOut()</codeph>, чтобы дать проигрывателю Flash Player достаточно времени для обнаружения программы экранного доступа, прежде чем будут обновлены свойства.</li>
    </ol>
 
 <p><b>Примечание.</b> Вызовите <codeph>setTimeout()</codeph> перед проверкой <codeph>Accessibility.active</codeph>. чтобы дать проигрывателю Flash Player те 2 секунды, которые требуются ему для подключения к программе чтения экрана (если доступна). Если не будет выделено достаточно времени задержки, вызов <codeph>setTimeout</codeph> может возвратить значение <codeph>false</codeph>, даже если существует доступная программа чтения экрана.</p>
 
 <p>В следующем примере показана обработка метода <codeph>Accessibility.updateProperties()</codeph> только в том случае, если вызов <codeph>Accessibility.active</codeph> возвращает <codeph>true</codeph>, что происходит лишь когда проигрыватель Flash Player подключен к активной программе чтения экрана. Если метод <codeph>updateProperties</codeph> вызывается без средства чтения с экрана, то вызывается исключение <codeph>IllegalOperationError</codeph>.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex"><linktext>flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
	 Создает новый объект AccessibilityProperties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Создает новый объект AccessibilityProperties.
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description"><apiName>description</apiName><shortdesc>
	 Позволяет назначить экранному объекту описание в файле презентации с расширенным доступом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Позволяет назначить экранному объекту описание в файле презентации с расширенным доступом. Если на текущий момент имеется достаточно информации об объекте, то целесообразней выбрать короткое имя и поместить большую часть содержания в свойство <codeph>description</codeph>. Применяется к SWF-файлам целиком, контейнерам, кнопкам и тексту. Значение по умолчанию – пустая строка.
     <p product="flash">Соответствует полю Description на панели специальных возможностей.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple"><apiName>forceSimple</apiName><shortdesc>
	 При значении true предписывает проигрывателю Flash Player исключить нижестоящие объекты этого экранного объекта из файла презентации с расширенным доступом.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 При значении <codeph>true</codeph> предписывает проигрывателю Flash Player исключить нижестоящие объекты этого экранного объекта из файла презентации с расширенным доступом. Значение по умолчанию равно <codeph>false</codeph>. Применяется к SWF-файлам целиком и контейнерам.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name"><apiName>name</apiName><shortdesc>
	 Позволяет назначить экранному объекту имя в файле презентации с расширенным доступом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Позволяет назначить экранному объекту имя в файле презентации с расширенным доступом. Применяется к SWF-файлам целиком, контейнерам, кнопкам и тексту. Не путайте с не связанным свойством <codeph>DisplayObject.name</codeph>. Значение по умолчанию – пустая строка.
     <p product="flash">Соответствует полю Name на панели специальных возможностей.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling"><apiName>noAutoLabeling</apiName><shortdesc>
	 При значении, равном true, отключает систему автоматических подписей по умолчанию для проигрывателя Flash Player.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 При значении <codeph>true</codeph> отключает систему автоматических подписей по умолчанию для проигрывателя Flash Player. Автоматические подписи могут вызвать обработку текстовых объектов внутри кнопок как имен кнопок и обработку текстовых объектов около текстового поля как имен текстового поля. Значение по умолчанию равно <codeph>false</codeph>. Применяется только к SWF-файлам целиком.
     <p>Значение свойства <codeph>noAutoLabeling</codeph> игнорируется, пока оно не будет определено перед первой проверкой SWF-файла средством обеспечения расширенного доступа. Если планируется установить для свойства <codeph>noAutoLabeling</codeph> значение <codeph>true</codeph>, необходимо сделать это в коде как можно раньше.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut"><apiName>shortcut</apiName><shortdesc>
	 Указывает на сочетание клавиш, связанное с этим экранным объектом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает на сочетание клавиш, связанное с этим экранным объектом. Задайте данную строку только для элементов управления пользовательского интерфейса, которые ассоциированы с сочетанием клавиш. Применяется к контейнерам, кнопкам и тексту. Значение по умолчанию – пустая строка.
	 
	 <p><b>Примечание.</b>Установка данного свойства не привязывает автоматически комбинации клавиш к данному объекту, необходимо это делать самостоятельно, например путем прослушивания события <codeph>KeyboardEvent</codeph>.</p>
	 
	 <p>Синтаксис для данной строки использует длинные имена для управляющих клавиш и знак плюс (+), указывая на комбинацию клавиш. Примеры допустимых строк: Ctrl+F, Ctrl+Shift+Z и так далее.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent"><apiName>silent</apiName><shortdesc>
	 При значении true исключает этот экранный объект из файла презентации с расширенным доступом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 При значении <codeph>true</codeph> исключает этот экранный объект из файла презентации с расширенным доступом. Значение по умолчанию равно <codeph>false</codeph>. Применяется к SWF-файлам целиком, контейнерам, кнопкам и тексту.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.accessibility:Accessibility"><apiName>Accessibility</apiName><shortdesc>
 Класс Accessibility управляет связью со средствами чтения с экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс Accessibility управляет связью со средствами чтения с экрана. Чтение с экрана – это вспомогательная технология для пользователей с ослабленным зрением, предоставляющая аудиоверсию содержимого экрана. Методы класса Accessibility статические, то есть нет необходимости создавать экземпляр класса, чтобы воспользоваться его методами.
 
 <p>Для получения или установки свойства расширенного доступа для определенного объекта, такого как кнопка, видеоролик или текстовое поле, используйте свойство <codeph>DisplayObject.accessibilityProperties</codeph>. Для определения, запущен ли проигрыватель Flash Player в окружении, поддерживающем средства расширенного доступа, используйте свойство <codeph>Capabilities.hasAccessibility</codeph>. </p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as"> Ниже показано, как использовать примеры классов <codeph>AccessibilityExample</codeph>, <codeph>CustomAccessibleButton</codeph>, <codeph>CustomSimpleButton</codeph> и <codeph>ButtonDisplayState</codeph> для создания меню, соответствующего требованиям доступности веб-содержимого и совместимого с большинством программ чтения экрана. Для этого выполняются следующие задачи:
 <ol>
    <li>Отслеживает свойство <codeph>Accessibility.active</codeph> для определения активности программы чтения экрана и наличия установленной связи проигрывателя с ней.</li>
    <li>Если свойство <codeph>active</codeph> возвращает значение <codeph>true</codeph>, вызывается метод <codeph>updateProperties()</codeph>, который применяет изменения специальных возможностей к кнопкам из данного примера.</li>
    <li>В примере вызывается метод <codeph>flash.utils.setTimeout()</codeph>, указывающий, что метод закрытия <codeph>updateAccessibility()</codeph> будет вызван через 2 секунды.</li>
 </ol>
 
 <p><b>Примечание. </b>Вызовите метод <codeph>setTimeout()</codeph>, прежде чем проверять <codeph>Accessibility.active</codeph>, чтобы дать проигрывателю Flash Player те 2 секунды, которые ему требуются для подключения к программе чтения экрана (если доступна). Если не будет выделено достаточно времени задержки, вызов <codeph>setTimeout</codeph> может возвратить значение <codeph>false</codeph>, даже если существует доступная программа чтения экрана.
 </p>
 <p>В следующем примере показана обработка метода <codeph>Accessibility.updateProperties()</codeph> только в том случае, если вызов <codeph>Accessibility.active</codeph> возвращает <codeph>true</codeph>, что происходит лишь когда проигрыватель Flash Player подключен к активной программе чтения экрана. Если метод <codeph>updateProperties</codeph> вызывается без средства чтения с экрана, то вызывается исключение <codeph>IllegalOperationError</codeph>.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:sendEvent"><apiName>sendEvent</apiName><shortdesc>
	 
	 </shortdesc><prolog><asCustoms><nonHTML>A Boolean value indicating whether the event is one of the standard event types
	 that can be generated from an HTML form. When set to true, this parameter helps prevent
	 some problems that may occur with screen readers that interpret Flash content as part of
	 the HTML page. The default value is false.
	 </nonHTML></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiDesc>
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc> <codeph/>
	 </apiDesc></apiParam><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc> 
	 </apiDesc></apiParam><apiParam><apiItemName>nonHTML</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
	 
	   <codeph/><codeph/>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation"><linktext/></link><link href="" invalidHref="mx.accessibility.AccImpl.xml"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:Accessibility:updateProperties"><apiName>updateProperties</apiName><shortdesc>
	Предписывает проигрывателю Flash Player применять любые изменения специальных возможностей, внесенные с помощью свойства DisplayObject.accessibilityProperties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Специальные возможности не поддерживаются этой версией проигрывателя Flash Player. Не вызывайте метод <codeph>Accessibility.updateProperties()</codeph>, если свойство <codeph>flash.system.Capabilities.hasAccessibility</codeph> равно <codeph>false</codeph>.
	
	
	</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Предписывает проигрывателю Flash Player применять любые изменения специальных возможностей, внесенные с помощью свойства <codeph>DisplayObject.accessibilityProperties</codeph>. Необходимо вызвать данный метод, чтобы изменения вступили в силу. 
	
	<p>Если выполняется модификация свойств расширенного доступа для нескольких объектов, то необходим только один вызов метода <codeph>Accessibility.updateProperties()</codeph>, так как несколько вызовов может привести к уменьшению производительности и некорректной работе средства чтения с экрана.</p>
	
	<p/>
	<pre>
	if (my_displayObj.accProps == undefined ) {
	  my_displayObj.accProps = new Object();
	}
	my_displayObj.accProps.name = "Photo of Mount Rushmore";
	Accessibility.updateProperties();
	</pre>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get"><apiName>active</apiName><shortdesc>
	Показывает, активно ли средство чтения с экрана в данный момент и поддерживает ли проигрыватель связь с ним.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает, активно ли средство чтения с экрана в данный момент и поддерживает ли проигрыватель связь с ним. 
	
	<p><b/><sup/><codeph/> Это происходит из-за асинхронного механизма связи между Flash и клиентами расширенного доступа. Можно обойти данное ограничение, обеспечивая задержку в 1 или 2 секунды перед вызовом метода после загрузки документа.</p>
	
	Для определения, запущен ли проигрыватель в окружении, поддерживающим средства чтения с экрана, используйте свойство <codeph>Capabilities.hasAccessibility</codeph>. 
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>