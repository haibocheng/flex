<?xml version="1.0"?>
<apiPackage id="flash.events"><apiName>flash.events</apiName><apiDetail/><apiClassifier id="flash.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
 Идентификатор объекта KeyboardEvent, отправляемого в ответ на ввод пользователем данных с клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий Keyboard.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Идентификатор объекта KeyboardEvent, отправляемого в ответ на ввод пользователем данных с клавиатуры. Существует два типа событий клавиатуры: <codeph>KeyboardEvent.KEY_DOWN</codeph> и <codeph>KeyboardEvent.KEY_UP</codeph>
 
 <p>Так как соответствие клавиш определенным символам варьируется в зависимости от устройства и операционной системы, для обработки ввода символов необходимо использовать тип события TextEvent.</p>
 
 <p>Чтобы прослушивать события клавиш в глобальном масштабе, необходимо добавить прослушиватель события к объекту Stage для фазы захвата и для фаз цели и восходящей цепочки.</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as"> В следующем примере используется класс <codeph>KeyboardEventExample</codeph> для демонстрации событий клавиатуры и их функций прослушивателей. Для этого выполняются следующие задачи:
 <ol>
  <li>Создается новый экземпляр Sprite с именем <codeph>child</codeph>.</li>
     <li>Объявляются свойства для последующего использования при задании фонового цвета и размера квадрата.</li>
     <li>С помощью методов объекта Sprite рисуется голубой квадрат, отображаемый в рабочей области в точке по умолчанию с координатами (0,0), путем вызова метода <codeph>addChild()</codeph>.</li>
     <li>Добавляется один прослушиватель событий мыши и два прослушивателя событий клавиатуры:
     <ul>
      <li><codeph>click</codeph>/<codeph>clickHandler</codeph> отправляется при щелчке по квадрату с целью перевода фокуса на спрайт <codeph>child</codeph>, чтобы он мог прослушивать события клавиатуры;</li>
         <li><codeph>keyDown</codeph>/<codeph>keyDownHandler</codeph> отправляется при нажатии любой клавиши; Метод подписчика печатает сведения о событии с помощью оператора <codeph>trace()</codeph>;</li>
         <li><codeph>keyUp</codeph>/<codeph>keyUpHandler</codeph> отправляется, когда клавиша отпускается.</li>
     </ul></li>
 </ol>
 
 <p>При тестировании этого примера сначала необходимо щелкнуть по квадрату, чтобы заработали события клавиатуры.</p>
 <p product="flash">Также, если используется команда «Тестировать ролик» в программе разработки Flash, на некоторые клавиши может реагировать интерфейс программы, а не прослушиватели событий, добавленные для дочернего спрайта.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation"><linktext>KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown"><apiName>keyDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp"><apiName>keyUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	Создает объект Event, содержащий данные о событиях клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения: <codeph>KeyboardEvent.KEY_DOWN</codeph> and <codeph>KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event.
	</apiDesc></apiParam><apiParam><apiItemName>charCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Значение кода символа для нажатой или отпущенной клавиши. Возвращаемые значения кодов символов являются значениями англоязычной раскладки клавиатуры. Например, если нажать «Shift+3», метод <codeph>Keyboard.charCode()</codeph> возвращает символ «#» на японской раскладке клавиатуры так же, как на английской.
	</apiDesc></apiParam><apiParam><apiItemName>keyCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Значение кода клавиши для нажатой или отпущенной клавиши.
	</apiDesc></apiParam><apiParam><apiItemName>keyLocationValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Расположение клавиши на клавиатуре.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>В Windows указывает на то, активирована ли клавиша Ctrl. В Mac указывает на то, активирована ли клавиша Ctrl или Command.
	</apiDesc></apiParam><apiParam><apiItemName>altKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирован ли модификатор клавиши Alt (только для Windows).
	</apiDesc></apiParam><apiParam><apiItemName>shiftKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирован ли модификатор клавиши Shift.
	</apiDesc></apiParam><apiParam><apiItemName>controlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Control в Mac или клавиши Control или Ctrl в Windows или Linux.
	</apiDesc></apiParam><apiParam><apiItemName>commandKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Command (только для Mac).
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов KeyboardEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий данные о событиях клавиатуры. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode"><linktext>Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта KeyboardEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект KeyboardEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта KeyboardEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта KeyboardEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта KeyboardEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта KeyboardEvent. Строка имеет следующий формат:
	<p><codeph>[KeyboardEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> ... shiftKey=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Указывает на то, что необходимо выполнить визуализацию после обработки данного события, если список отображения был изменен.
	
	</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Указывает на то, что необходимо выполнить визуализацию после обработки данного события, если список отображения был изменен.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN"><apiName>KEY_DOWN</apiName><shortdesc>
	Константа KeyboardEvent.KEY_DOWN определяет значение свойства type объекта события keyDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>KeyboardEvent.KEY_DOWN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>keyDown</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> в AIR, <codeph>false</codeph> в Flash Player. Отмена этого события в AIR предотвращает ввод этого символа в текстовое поле.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Значение кода символа для нажатой или отпущенной клавиши.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна. В противном случае <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> в Windows и Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Control активна. В противном случае <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows и Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Значение кода клавиши для нажатой или отпущенной клавиши.</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>Расположение клавиши на клавиатуре.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр InteractiveObject, находящийся в фокусе. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP"><apiName>KEY_UP</apiName><shortdesc>
	Константа KeyboardEvent.KEY_UP определяет значение свойства type объекта события keyDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>KeyboardEvent.KEY_UP</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>keyDown</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Содержит значение кода символа для нажатой или отпущенной клавиши.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна. В противном случае <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> в Windows и Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Control активна. В противном случае <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Значение кода клавиши для нажатой или отпущенной клавиши.</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>Расположение клавиши на клавиатуре.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр InteractiveObject, находящийся в фокусе. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
	В Windows указывает на то, активирована клавиша Alt (true) или нет (false). В Mac OS указывает на то, активирована ли клавиша Option.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	В Windows указывает на то, активирована клавиша Alt (<codeph>true</codeph>) или нет (<codeph>false</codeph>). В Mac OS указывает на то, активирована ли клавиша Option.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
	Содержит значение кода символа для нажатой или отпущенной клавиши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Содержит значение кода символа для нажатой или отпущенной клавиши. Значения кодов символов являются значениями английской раскладки клавиатуры. Например, если нажать «Shift+3», <codeph>charCode</codeph> – это символ «#» на японской раскладке клавиатуры так же, как на английской.
	<p><b>Примечание. </b>Если работает редактор метода ввода (IME), <codeph>charCode</codeph> не сообщает точные коды символов.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Показывает активность клавиши Command: true – активна, false – неактивна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает активность клавиши Command: <codeph>true</codeph> – активна, <codeph>false</codeph> – неактивна. Поддерживается только для Mac OS. В Mac OS свойство <codeph>commandKey</codeph> имеет то же значение, что и свойство <codeph>ctrlKey</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Показывает активность клавиши Control: true – активна, false – неактивна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает активность клавиши Control: <codeph>true</codeph> – активна, <codeph>false</codeph> – неактивна. В Windows и Linux это свойство также имеет значение true, если клавиша Ctrl активна.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	В Windows и Linux указывает на то, активирована ли клавиша Ctrl (true) или нет (false). В Mac OS указывает на то, активирована ли клавиша Ctrl или Command.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	В Windows и Linux указывает на то, активирована ли клавиша Ctrl (<codeph>true</codeph>) или нет (<codeph>false</codeph>). В Mac OS указывает на то, активирована ли клавиша Ctrl или Command.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	Значение кода клавиши для нажатой или отпущенной клавиши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Значение кода клавиши для нажатой или отпущенной клавиши.
	<p><b>Примечание. </b>Если работает редактор метода ввода (IME), <codeph>charCode</codeph> не сообщает точные коды клавиш.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
	Указывает расположение клавиши на клавиатуре.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Указывает расположение клавиши на клавиатуре. Это целесообразно для дифференциации клавиш, встречающихся на клавиатуре несколько раз. Например, можно дифференцировать левую и правую клавиши Shift по значению этого свойства: <codeph>KeyLocation.LEFT</codeph> – левая, а <codeph>KeyLocation.RIGHT</codeph> – правая. Другой пример – дифференциация клавиш с цифрами, нажатых на стандартной клавиатуре (<codeph>KeyLocation.STANDARD</codeph>) и на числовой панели (<codeph>KeyLocation.NUM_PAD</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Показывает, активирован ли модификатор клавиши Shift: true – активирован, false – не активирован.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает, активирован ли модификатор клавиши Shift: <codeph>true</codeph> – активирован, <codeph>false</codeph> – не активирован.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
 Объект NativeWindow отправляет события класса NativeWindowDisplayStateEvent при изменении состояния отображения окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий NativeWindow, изменяющие состояние отображения окна.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект NativeWindow отправляет события класса NativeWindowDisplayStateEvent при изменении состояния отображения окна. Существует два типа событий:
 <ul>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange"><apiName>displayStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging"><apiName>displayStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
    Создает объект Event со специфической информацией, имеющей отношение к событиям состояния отображения окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения:
    <ul>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event.
    </apiDesc></apiParam><apiParam><apiItemName>beforeDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc><codeph>displayState</codeph> до изменения.
    </apiDesc></apiParam><apiParam><apiItemName>afterDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc><codeph>displayState</codeph> после изменения. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Создает объект Event со специфической информацией, имеющей отношение к событиям состояния отображения окна. Объекты Event передаются прослушивателям событий в качестве параметров.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone"><apiName>clone</apiName><shortdesc>
    Создает копию объекта NativeWindowDisplayStateEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект NativeWindowDisplayStateEvent, значения свойств которого соответствуют значениям оригинала.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Создает копию объекта NativeWindowDisplayStateEvent и задает значение каждого свойства, совпадающее с оригиналом.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString"><apiName>toString</apiName><shortdesc>
    Возвращает строку, содержащую все свойства объекта NativeWindowDisplayStateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта NativeWindowDisplayStateEvent.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Возвращает строку, содержащую все свойства объекта NativeWindowDisplayStateEvent. Строка имеет следующий формат:
    <p><codeph>[NativeWindowDisplayStateEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> beforeDisplayState=<i>значение</i> afterDisplayState=<i>значение</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE"><apiName>DISPLAY_STATE_CHANGE</apiName><shortdesc>
    Задает значение свойства type для объекта события displayStateChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>displayStateChange</codeph>. Это событие имеет следующие свойства:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>Старое состояние отображения окна.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>Новое состояние отображения окна.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр NativeWindow, который только что изменил состояние. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Указывает объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; нет поведения по умолчанию для отмены.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING"><apiName>DISPLAY_STATE_CHANGING</apiName><shortdesc>
    Задает значение свойства type для объекта события displayStateChanging.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChanging</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>displayStateChanging</codeph>. Это событие имеет следующие свойства:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>Состояние отображения окна до ожидаемого изменения.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>Состояние отображения окна после ожидаемого изменения.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр NativeWindow, который только что изменил состояние. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Указывает объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена события предотвратит изменение.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get"><apiName>afterDisplayState</apiName><shortdesc>
     Состояние отображения NativeWindow после изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Состояние отображения NativeWindow после изменения.  
     
     <p>Если событие – <codeph>displayStateChanging</codeph>, состояние отображения еще не изменилось; <codeph>afterDisplayState</codeph> указывает новое состояние отображения, если событие не отменено. Если событие – <codeph>displayStateChanged</codeph>, <codeph>afterDisplayState</codeph> указывает текущее значение.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get"><apiName>beforeDisplayState</apiName><shortdesc>
     Состояние отображения NativeWindow до изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Состояние отображения NativeWindow до изменения.  
     
     <p>Если событие – <codeph>displayStateChanging</codeph>, состояние отображения еще не изменилось; <codeph>beforeDisplayState</codeph> отражает текущее состояние отображения окна. Если событие – <codeph>displayStateChanged</codeph>, <codeph>beforeDisplayState</codeph> указывает предыдущее значение.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
Объект Stage отправляет объект FullScreenEvent при каждом переходе объекта Stage в полноэкранный режим или выходе из него.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий FullScreenEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект Stage отправляет объект FullScreenEvent при каждом переходе объекта Stage в полноэкранный режим или выходе из него. Существует только один тип события <codeph>fullScreen</codeph>: <codeph>FullScreenEvent.FULL_SCREEN</codeph>.

</apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier>flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
	Создает объект события, содержащий информацию о событиях fullScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события <codeph>fullScreen</codeph>: <codeph>FullScreenEvent.FULL_SCREEN</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	</apiDesc></apiParam><apiParam><apiItemName>fullScreen</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Показывает состояние, в которое переходит устройство: активное (<codeph>true</codeph>) или неактивное (<codeph>false</codeph>). Прослушиватели событий могут получать эту информацию через свойство <codeph>activating</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов FullScreenEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект события, содержащий информацию о событиях <codeph>fullScreen</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
	
    </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN"><linktext>FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта FullScreenEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект FullScreenEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта FullScreenEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта FullScreenEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта FullScreenEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта FullScreenEvent. Используется следующий формат:
	<p><codeph>[FullScreenEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> activating=<i>значение</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN"><apiName>FULL_SCREEN</apiName><shortdesc>
	Константа FullScreenEvent.FULL_SCREEN определяет значение свойства type для объекта события fullScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>FullScreenEvent.FULL_SCREEN</codeph> определяет значение свойства <codeph>type</codeph> для объекта события <codeph>fullScreen</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>fullScreen</codeph></entry><entry><codeph>true</codeph>, если состояние отображения – на весь экран или <codeph>false</codeph>, если состояние обычное.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Stage.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get"><apiName>fullScreen</apiName><shortdesc>
	Показывает, что объект Stage находится в полноэкранном режиме (true) или в оконном режиме (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает, что объект Stage находится в полноэкранном режиме (<codeph>true</codeph>) или в оконном режиме (<codeph>false</codeph>).
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
 Объект Timer отправляет объекты TimerEvent каждый раз, когда объект Timer достигает интервала, указанного в свойстве Timer.delay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий Timer.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект Timer отправляет объекты TimerEvent каждый раз, когда объект Timer достигает интервала, указанного в свойстве <codeph>Timer.delay</codeph>.
 
 </apiDesc><example conref="examples\TimerEventExample.as"> В следующем примере используется класс TimerExample, чтобы продемонстрировать создание метода прослушивателя <codeph>timerHandler()</codeph> и его использование для прослушивания нового события TimerEvent, которое отправляется при вызове метода <codeph>start()</codeph> объекта Timer.  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#Timer"><linktext>flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer"><apiName>timer</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
	Создает объект Event со специфической информацией, имеющей отношение к событиям timer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, находится ли объект Event в фазе восходящей цепочки. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов TimerEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event со специфической информацией, имеющей отношение к событиям <codeph>timer</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта TimerEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект TimerEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта TimerEvent и задает значение каждого свойства, совпадающее с оригиналом.
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта TimerEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта TimerEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта TimerEvent. Строка имеет следующий формат:
	<p><codeph>[TimerEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i>]</codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Предписывает проигрывателю Flash Player или среде выполнения AIR выполнить визуализацию после обработки данного события, если список отображения был изменен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Предписывает проигрывателю <ph platform="actionscript">Flash Player или</ph> среде выполнения AIR выполнить визуализацию после обработки данного события, если список отображения был изменен.
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as"> Ниже приведен пример метода <codeph>TimerEvent.updateAfterEvent()</codeph>.   
<codeblock>
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER"><apiName>TIMER</apiName><shortdesc>
    Задает значение свойства type для объекта события timer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timer</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>timer</codeph>.
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Timer, достигший заданного интервала.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE"><apiName>TIMER_COMPLETE</apiName><shortdesc>
    Задает значение свойства type для объекта события timerComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timerComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>timerComplete</codeph>.
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Timer, выполнивший запросы.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
Объект IOErrorEvent отправляется, когда операция отправки или загрузки завершается с ошибкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий IOErrorEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект IOErrorEvent отправляется, когда операция отправки или загрузки завершается с ошибкой.

<p>Проверять события ошибки, для которых нет прослушивателей, можно с помощью отладочной версии Flash Player или приложения AIR Debug Launcher (ADL). Отображается строка, заданная параметром <codeph>text</codeph> конструктора IOErrorEvent. Существует только один тип события ошибки ввода/вывода: <codeph>IOErrorEvent.IO_ERROR</codeph>. </p>

</apiDesc><example conref="examples\IOErrorEventExample.as"> В следующем примере используется класс <codeph>IOErrorEventExample</codeph>, чтобы продемонстрировать отправку события ошибки при попытке загрузить несуществующий файл. Для этого выполняются следующие задачи:
 <ol>
    <li>Конструктор класса создает новый экземпляр объекта URLLoader и назначает его переменной <codeph>loader</codeph>.</li>
    <li>Экземпляр URLLoader создает прослушиватель событий типа <codeph>ioError</codeph> со связанным методом подписчика <codeph>ioErrorHandler()</codeph>, который просто печатает сведения о событии с использованием метода <codeph>trace()</codeph>.</li>
    <li>Затем конструктор создает новый экземпляр объекта URLRequest, <codeph>request</codeph>, передающий <codeph>MissingFile.xml</codeph>, чтобы сообщить имя и местоположение отсутствующего файла.</li>
    <li>Затем переменная <codeph>request</codeph> передается методу <codeph>loader.load()</codeph>, который пытается загрузить отсутствующий файл. Так как файл не существует, обработчик событий отправляет событие <codeph>ioError</codeph>.</li>
 </ol>
 
 <p> <b>Примечания.</b>
 <ul>
     <li>SWF-файл требуется откомпилировать с установленным для параметра «Безопасность локального воспроизведения» режимом «Доступ только к локальным файлам».</li>
     <li>Проверьте, чтобы не было файла с именем «MissingFile.xml» на одном уровне с SWF-файлом. </li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
	Создает объект Event, содержащий данные о событиях ioError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события ошибки ввода/вывода: <codeph>IOErrorEvent.IO_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Текст, отображаемый в качестве сообщения об ошибке. Прослушиватели событий могут получать эту информацию через свойство <codeph>text</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Ссылочный номер, связываемый с конкретной ошибкой (поддерживается только в Adobe AIR). 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов IOErrorEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий данные о событиях <codeph>ioError</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта IOErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект IOErrorEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта IOErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта IOErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта IOErrorEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта IOErrorEvent. Строка имеет следующий формат:
	<p><codeph>[IOErrorEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> text=<i>значение</i> errorID=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc>
	Задает значение свойства type для объекта события ioError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>ioError</codeph>.
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>Ссылочный номер, связываемый с конкретной ошибкой (только AIR).</entry></row><row><entry><codeph>target</codeph></entry><entry>Сетевой объект, с которым произошла ошибка ввода/вывода.</entry></row><row><entry><codeph>text</codeph></entry><entry>Текст, отображаемый в качестве сообщения об ошибке.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
Объект NetConnection, NetStream или SharedObject отправляет объекты NetStatusEvent, когда сообщает о своем состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий NetStatusEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект NetConnection, NetStream или SharedObject отправляет объекты NetStatusEvent, когда сообщает о своем состоянии. Существует только один тип события состояния: <codeph>NetStatusEvent.NET_STATUS</codeph>.

</apiDesc><example conref="examples\NetStatusEventExample.as"> В следующем примере объект Video с классами NetConnection и NetStream используется для загрузки и воспроизведения FLV-файла.
 <p>Здесь метод <codeph>netStatusHandler</codeph> регистрируется в качестве прослушивателя события NetStatusEvent – <codeph>NetConnection.netStatus</codeph>. Когда определяется состояние (успешно или неуспешно) попытки выполнить <codeph>NetConnection.connect()</codeph>, событие <codeph>netStatus</codeph> запускает этот метод. Если попытка подключиться к объекту NetConnection успешная (другими словами, если свойство <codeph>info</codeph> объекта NetStatusEvent, отправленного событием <codeph>netStatus</codeph>, имеет свойство <codeph>code</codeph> с указанием успешного выполнения), код создает объекты Video и NetStream и вызывает методы <codeph>Video.attachNetStream()</codeph> и <codeph>NetStream.play()</codeph>.</p>
 
 <p><b>Примечание.</b> Чтобы запустить данный пример, вам потребуется FLV-файл, имя и место расположения которого совпадают с переменной, переданной <codeph>videoURL</codeph>. В данном случае, FLV-файл Video.flv находится в том же каталоге, где размещается SWF-файл.</p>
<codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject"><linktext>flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus"><apiName>netStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
	Создает объект Event, содержащий сведения о событиях netStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события состояния: <codeph>NetStatusEvent.NET_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект, содержащий свойства, описывающие состояние объекта. Прослушиватели событий могут получать этот объект через свойство <codeph>info</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов NetStatusEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий сведения о событиях <codeph>netStatus</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта NetStatusEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект NetStatusEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта NetStatusEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта NetStatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта NetStatusEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта NetStatusEvent. Строка имеет следующий формат:
	<p><codeph>[NetStatusEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> info=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS"><apiName>NET_STATUS</apiName><shortdesc>
    Задает значение свойства type для объекта события netStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>netStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>netStatus</codeph>.
  	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>info</codeph></entry><entry>Объект со свойствами, описывающими состояние объекта или условие ошибки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NetConnection или NetStream, сообщающий свое состояние. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get"><apiName>info</apiName><shortdesc>
	 Объект со свойствами, описывающими состояние объекта или условие ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Объект со свойствами, описывающими состояние объекта или условие ошибки.
	 
	 <p>Информационный объект может иметь свойство <codeph>code</codeph>, содержащее строку, представляющую конкретное событие, или свойство <codeph>level</codeph>, содержащее строку, являющуюся<codeph>status</codeph> или <codeph>error</codeph>. </p>
	 
	 <p>Информационный объект может быть и другим. Свойства <codeph>code</codeph> и <codeph>level</codeph> могут не поддерживаться для некоторых реализаций, также некоторые серверы могут отправлять другие объекты. </p>
	 
	 <p>Подключения P2P отправляют сообщения для <codeph>NetConnection</codeph> с параметром <codeph>stream</codeph> в информационном объекте, который указывает, к какому объекту <codeph>NetStream</codeph> относится сообщение. <ph product="flex">Например, система Flex Data Services отправляет объекты Message, которые являются причиной ошибок поведения типа данных, при попытке доступа к свойству <codeph>code</codeph> или <codeph>level</codeph>.</ph></p> 
	 
	 <p>В следующей таблице описываются возможные строковые значения свойств <codeph>code</codeph> и <codeph>level</codeph>.</p>
 <adobetable class="innertable">
  
 
 

  
   
  
  
    
  
  
  
  
  
  
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<tgroup cols="3"><thead><row><entry>Свойство code</entry><entry>Свойство level</entry><entry>Значение</entry></row></thead><tbody><row>
     <entry><codeph>"NetStream.Buffer.Empty"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>Данные поступают недостаточно быстро для заполнения буфера. Поток данных будет прерван до повторного заполнения буфера, после чего будет отправлено сообщение <codeph>NetStream.Buffer.Full</codeph> и возобновится потоковое воспроизведение.</entry>
 </row><row>
     <entry><codeph>NetStream.Buffer.Full</codeph></entry>
     <entry><codeph>status</codeph></entry>
     <entry>Буфер заполнен, начнется потоковое воспроизведение.</entry>
</row><row>
    <entry><codeph>NetStream.Buffer.Flush</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Потоковое воспроизведение данных прекратилось, оставшийся буфер будет очищен.</entry>
  </row><row>
    <entry><codeph>NetStream.Failed</codeph> </entry>
    <entry>error</entry>
    <entry>Только для Flash Media Server. Произошла ошибка по причине, не указанной среди других кодов событий.
    </entry>
  </row><row>
    <entry><codeph>NetStream.Publish.Start</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Публикация выполнена успешно.</entry>
  </row><row>
    <entry><codeph>NetStream.Publish.BadName</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Попытка опубликовать поток, уже публикуемый другим пользователем.</entry>
  </row><row>
    <entry><codeph>NetStream.Publish.Idle</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Сервер публикации потока свободен и не передает данных.</entry>
  </row><row>
    <entry><codeph>NetStream.Unpublish.Success</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Операция отмены публикации выполнена успешно.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Start</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Началось воспроизведение.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Stop</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Воспроизведение остановлено.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Произошла ошибка при воспроизведении по причине, не указанной в таблице, например, у подписчика нет доступа для чтения.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.StreamNotFound</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>FLV-файл, переданный методу <codeph>play()</codeph>, не найден.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Reset</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Вызвано сбросом списка воспроизведения.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.PublishNotify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Исходная публикация потока отправляется всем подписчикам.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.UnpublishNotify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Отмена публикации потока отправляется всем подписчикам.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.InsufficientBW</codeph> </entry>
    <entry>warning</entry>
    <entry>Только для Flash Media Server. Пропускной способности клиента недостаточно для воспроизведения данных с нормальной скоростью. </entry>
  </row><row>
    <entry><codeph>NetStream.Play.FileStructureInvalid</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Приложение обнаруживает недопустимую структуру файла и не будет пытаться воспроизвести данный тип файла. Для AIR и Flash Player версии 9.0.115.0 и более поздних версий.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.NoSupportedTrackFound</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Приложение не обнаруживает поддерживаемых каналов (видео, аудио или данных) и не будет пытаться воспроизвести файл. Для AIR и Flash Player версии 9.0.115.0 и более поздних версий.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Transition</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Только для Flash Media Server. Один поток переходит в другой в результате переключения скорости потоков. Данный код означает состояние успешного выполнения вызова <codeph>NetStream.play2()</codeph> для инициации переключения потоков. Если переключение не выполнено, сервер отправляет событие <codeph>NetStream.Play.Failed</codeph>. Для проигрывателя Flash Player версии 10 и более поздних версий.</entry>
  </row><row>
    <entry><codeph>NetStream.Play.Transition</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Только Flash Media Server 3.5 и более поздней версии. Сервер получает команду перехода к другому потоку в результате переключения потока битовой передачи данных. Данный код означает состояние успешного выполнения вызова <codeph>NetStream.play2()</codeph> для инициации переключения потоков. Если переключение не выполнено, сервер отправляет событие <codeph>NetStream.Play.Failed</codeph>. При переключении потока выполняется отправка события <codeph>onPlayStatus</codeph> с кодом NetStream.Play.TransitionComplete. Для проигрывателя Flash Player версии 10 и более поздних версий.</entry>
  </row><row>
    <entry><codeph>NetStream.Pause.Notify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Поток приостановлен.</entry>
  </row><row>
    <entry><codeph>NetStream.Unpause.Notify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Поток возобновлен.</entry>
  </row><row>
    <entry><codeph>NetStream.Record.Start</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Началась запись.</entry>
  </row><row>
    <entry><codeph>NetStream.Record.NoAccess</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Попытка записать поток, который все еще воспроизводится или к которому у клиента нет права доступа.</entry>
  </row><row>
    <entry><codeph>NetStream.Record.Stop</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Запись остановлена.</entry>
  </row><row>
    <entry><codeph>NetStream.Record.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Попытка записи потока не удалась.</entry>
  </row><row>
    <entry><codeph>NetStream.Seek.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Невозможно выполнить поиск, если поток не поддерживает поиск.</entry>
  </row><row>
    <entry><codeph>NetStream.Seek.InvalidTime</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>В ходе загрузки видео в прогрессивном режиме пользователь попытался найти или воспроизвести еще не загруженные на данный момент видеоданные или данные, находящиеся за пределами полностью загруженного файла. Свойство <codeph>message.details</codeph> содержит временной код, указывающий последнюю действительную позицию, доступную для поиска.</entry>
  </row><row>
    <entry><codeph>NetStream.Seek.Notify</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Операция поиска выполнена.</entry>
  </row><row>
    <entry><codeph>NetConnection.Call.BadVersion</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Пакет закодирован в неопределенном формате.</entry>
  </row><row>
    <entry><codeph>NetConnection.Call.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Методу <codeph>NetConnection.call</codeph> не удалось вызвать метод или команду на сервере.</entry>
  </row><row>
    <entry><codeph>NetConnection.Call.Prohibited</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Выполнение операции Action Message Format (AMF) предотвращено по соображениям безопасности. Либо URL-адрес AMF не принадлежит тому же домену, что и файл, содержащий код, который вызывает метод <codeph>NetConnection.call()</codeph>, либо на сервере AMF отсутствует файл политики, устанавливающий отношения доверия с доменом файла, содержащего код, который вызывает метод <codeph>NetConnection.call()</codeph>. 
	</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Closed</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Подключение успешно разорвано.</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Попытка подключения не удалась.</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Success</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Попытка подключения удалась.</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.Rejected</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>При попытке подключения отсутствовали права на доступ к приложению.</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Closed</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Подключение Р2Р успешно разорвано. Свойство <codeph>info.stream</codeph> указывает на то, что поток закрыт.</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Failed</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Попытка подключения Р2Р не удалась. Свойство <codeph>info.stream</codeph> указывает на то, что поток не открыт.</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Success</codeph></entry>
    <entry><codeph>status</codeph></entry>
    <entry>Попытка подключения Р2Р удалась. Свойство <codeph>info.stream</codeph> указывает на то, что поток открыт.</entry>
  </row><row>
    <entry><codeph>NetStream.Connect.Rejected</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>При попытке подключения Р2Р отсутствовали права на доступ к другому одноранговому приложению. Свойство <codeph>info.stream</codeph> указывает на то, что поток отклонен.</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.AppShutdown</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>Завершается работа указанного приложения.</entry>
  </row><row>
    <entry><codeph>NetConnection.Connect.InvalidApp</codeph></entry>
    <entry><codeph>error</codeph></entry>
    <entry>При подключении указано недопустимое имя приложения.</entry>
  </row><row>
    <entry><codeph>SharedObject.Flush.Success</codeph></entry>
  	<entry><codeph>status</codeph></entry>
  	<entry>Состояние ожидания pending разрешено, и вызов <codeph>SharedObject.flush()</codeph> выполнен успешно.</entry>
  </row><row> 
    <entry><codeph>SharedObject.Flush.Failed</codeph></entry>
 	<entry><codeph>error</codeph></entry>
  	<entry>Состояние ожидания pending разрешено, но вызов <codeph>SharedObject.flush()</codeph> не удался.</entry>
  </row><row>
    <entry><codeph>SharedObject.BadPersistence</codeph></entry>
  	<entry><codeph>error</codeph></entry>
  	<entry>Запрос на создание общего объекта с флагами постоянства отправлен, но не удовлетворен, так как объект уже создан с другими флагами.</entry> 
  </row><row>
    <entry><codeph>SharedObject.UriMismatch</codeph></entry>
  	<entry><codeph>error</codeph></entry>
  	<entry>Предпринята попытка подключения к объекту NetConnection, URI (URL) которого не совпадает с общим объектом.</entry> 
</row></tbody></tgroup></adobetable>
	<p>Если постоянно появляются ошибки, связанные с буфером, попробуйте изменить его с помощью свойства <codeph>NetStream.bufferTime</codeph>.</p>

	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>Класс NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>Класс NetStream</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
 Объект MouseEvent отправляется в поток событий при каждом событии мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий мыши.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект MouseEvent отправляется в поток событий при каждом событии мыши. Как правило, событие мыши генерируется устройством ввода пользователя, например мышью или шаровым манипулятором, в котором используется указатель. 
 
 <p>Когда в процессе принимают участие вложенные узлы, события мыши нацелены на самый глубокий вложенный узел, видимый в списке отображения. Этот узел называется <i>целевым</i>. Чтобы предок целевого узла получал оповещение о событии мыши, используйте метод <codeph>EventDispatcher.addEventListener()</codeph> для предка, указав в качестве параметра <codeph>type</codeph> конкретное событие мыши, которое нужно отслеживать.</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as"> В следующем примере используются классы <codeph>MouseEventExample</codeph> и <codeph>ChildSprite</codeph>, чтобы показать, как отправляются события мыши для простого изображения. Этот код выполняет следующие задачи.
 <ol>
    <li>Заявляются свойства для размера (100 x 100 пикселей) и фонового цвета (оранжевый) для последующего использования при рисовании квадрата.</li>
     <li>Конструктор создает новый объект ChildSprite с именем <codeph>child</codeph>. Его конструктор сначала рисует оранжевый квадрат 100 x 100 пикселей в точке с координатами (0,0) путем вызова метода <codeph>draw()</codeph>, а затем добавляет семь прослушивателей событий с подписчиками.
     <ul>
         <li><codeph>click</codeph>/<codeph>clickHandler()</codeph>: отправляется, когда пользователь один раз щелкает квадрат левой кнопкой мыши.</li>
         <li><codeph>doubleClick</codeph>/<codeph>doubleClickHandler()</codeph>: отправляется, когда пользователь дважды щелкает квадрат левой кнопкой мыши.</li>
         <li><codeph>mouseDown</codeph>/<codeph>mouseDownHandler()</codeph>: когда нажимают объект ChildSprite (оранжевый квадрат), на экране печатается сообщение <codeph>trace()</codeph>, а затем вызывается метод <codeph>ChildSprite.draw()</codeph>, рисующий темно-желтый квадрат вместо голубого, нарисованного методом <codeph>mouseOverHandler()</codeph>. Метод <codeph>mouseDownHandler()</codeph> также добавляет прослушиватель событий <codeph>mouseMove</codeph> и подписчик <codeph>mouseMoveHandler()</codeph> (как описано ниже), обрабатывающий перемещение мыши. Затем вызывается метод <codeph>startDrag()</codeph>, позволяющий перетаскивать объект Sprite.</li>
         <li><codeph>mouseOut</codeph>/<codeph>mouseOutHandler()</codeph>: отправляется, когда указатель покидает область квадрата. Вызывается метод <codeph>draw()</codeph>, чтобы вернуть квадрату обычный размер и цвет.</li>
         <li><codeph>mouseOver</codeph>/<codeph>mouseOverHandler()</codeph>: отправляется, когда указатель мыши находится над квадратом. Этот метод перерисовывает квадрат так, что он становится больше, а фон становится темно-желтым.</li>
         <li><codeph>mouseUp</codeph>/<codeph>mouseUpHandler()</codeph>: когда пользователь отпускает кнопку мыши, прослушиватель события <codeph>mouseMove</codeph> удаляется и вызывается метод <codeph>stopDrag</codeph> фиксирующий местоположение квадрата.</li> 
      <li><codeph>mouseMove</codeph>/<codeph>mouseMoveHandler()</codeph>: вызывается в рамках функции <codeph>mouseDownHandler()</codeph> и отправляется, когда пользователь удерживает левую кнопку мыши и перетаскивает квадрат.</li>
         <li><codeph>mouseWheel</codeph>/<codeph>mouseWheelHandler()</codeph>: отправляется при прокручивании пользователем колесика мыши над квадратом.</li>
 </ul></li>
    <li>Затем экземпляр ChildSprite с именем <codeph>child</codeph> добавляется в список отображения с помощью метода <codeph>addChild()</codeph>, который быстро рисует оранжевый квадрат.</li>
 </ol> 
 
 <p><b>Примечания. </b></p>
 <ul>
     <li>Класс <codeph>MouseEventExample</codeph> должен быть в корне документа.</li>
    <li>Некоторые из перечисленных выше методов событий объявляют локальную переменную <codeph>sprite</codeph>, которой присваивается значение <codeph>event.target</codeph> типа Sprite.</li>
 </ul>
<codeblock>
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu"><apiName>contextMenu</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick"><apiName>doubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick"><apiName>middleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown"><apiName>middleMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp"><apiName>middleMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> В следующем примере рассматривается простая программа для рисования. Пользователь может рисовать на основном объекте Sprite или на прямоугольном объекте Sprite меньшего размера. 
   
 <p>В конструкторе создается прямоугольный объект Sprite с именем <codeph>innerRect</codeph> и задается зеленый цвет для стиля линии. Стилю линий для рисования контейнера Sprite <codeph>MouseEvent_MOUSE_MOVEExample</codeph> задается красный цвет. Добавляются отдельный прослушиватели событий <codeph>MouseEvent.MOUSE_UP</codeph> и <codeph>MouseEvent.MOUSE_DOWN</codeph> для основного объекта Sprite и объекта Sprite с именем <codeph>innerRect</codeph> приложения. В обоих случаях методы прослушивателя событий для нажатого положения мыши перемещают текущее положение точки рисования в местоположение указателя мыши и добавляют прослушиватель для события <codeph>MouseEvent.MOUSE_MOVE</codeph>. При перемещении указателя мыши вызванный метод прослушивателя событий следует за указателем и рисует линию с помощью метода <codeph>graphics.LineTo()</codeph>. (<b>Примечание.</b> Объект Sprite с именем <codeph>innerRect</codeph> скрывает красные линии основного объекта Sprite, нарисованного за прямоугольником.) Когда происходит событие <codeph>MouseEvent.MOUSE_UP</codeph>, прослушиватель события <codeph>MOUSE_MOVE</codeph> удаляется и рисование прекращается.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut"><apiName>mouseOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver"><apiName>mouseOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel"><apiName>mouseWheel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown"><apiName>RightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut"><apiName>rollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver"><apiName>rollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
     Создает объект Event, содержащий данные о событиях мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения: <codeph>MouseEvent.CLICK</codeph>, <codeph>MouseEvent.DOUBLE_CLICK</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_MOVE</codeph>, <codeph>MouseEvent.MOUSE_OUT</codeph>, <codeph>MouseEvent.MOUSE_OVER</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph>, <codeph>MouseEvent.MIDDLE_CLICK</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_DOWN</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_UP</codeph>, <codeph>MouseEvent.RIGHT_CLICK</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_DOWN</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_UP</codeph>, <codeph>MouseEvent.MOUSE_WHEEL</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph> и <codeph>MouseEvent.ROLL_OVER</codeph>. 
	 
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event.
	 </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Горизонтальная координата события относительно спрайта-контейнера.
	 </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Вертикальная координата события относительно спрайта-контейнера.
	 </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Дополняющий экземпляр InteractiveObject, на который влияет событие. Например, когда происходит событие <codeph>mouseOut</codeph>, <codeph>relatedObject</codeph> представляет объект списка отображения, на который теперь показывает указатель.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>В Windows или Linux указывает на то, активирована ли клавиша Ctrl. В Mac указывает на то, активирована ли клавиша Ctrl или Command.
     </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает на то, активирована ли клавиша Alt (только для Windows или Linux).
	 </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Shift.
	 </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, нажата ли основная кнопка мыши.
	 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Указывает количество строк, подлежащих прокрутке в каждом случае вращения пользователем колесика мыши. Положительное значение delta показывает прокручивание вверх, отрицательное значение показывает прокрутку вниз. Как правило, используются значения в пределах 1-3, но при более быстром прокручивании это число увеличивается. Этот параметр используется только для события <codeph>MouseEvent.mouseWheel</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(Только для AIR) Указывает, активирована ли клавиша Command (только для Mac). Этот параметр используется только для событий <codeph>MouseEvent.click</codeph>, <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph> и <codeph>MouseEvent.doubleClick</codeph>. Этот параметр только для Adobe AIR; не устанавливать его для содержимого Flash Player.
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(Только для AIR)Указывает активирована ли клавиша Control или Ctrl. Этот параметр используется только для событий <codeph>MouseEvent.click</codeph>, <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph> и <codeph>MouseEvent.doubleClick</codeph>. Этот параметр только для Adobe AIR; не устанавливать его для содержимого Flash Player.
	</apiDesc></apiParam><apiParam><apiItemName>clickCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>(Только для AIR) Указывает на то, является ли событие мыши частью последовательности нажатий мышью. Этот параметр будет нулевым для всех событий мыши, кроме <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightMouseDown</codeph> и <codeph>MouseEvent.rightMouseUp</codeph>. С помощью параметра <codeph>clickCount</codeph> можно прослушивать единичные, двойные и множественные нажатия мышью. Этот параметр только для Adobe AIR; не устанавливать его для содержимого Flash Player.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов MouseEvent.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Создает объект Event, содержащий данные о событиях мыши. Объекты Event передаются прослушивателям событий в качестве параметров.
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта MouseEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект MouseEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта MouseEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта MouseEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта MouseEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта MouseEvent. Строка имеет следующий формат:
	<p><codeph>[MouseEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> ... delta=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Предписывает проигрывателю Flash Player или Adobe AIR выполнить визуализацию после обработки данного события, если список отображения был изменен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Предписывает проигрывателю Flash Player или Adobe AIR выполнить визуализацию после обработки данного события, если список отображения был изменен.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	Задает значение свойства type для объекта события click.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>click</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU"><apiName>CONTEXT_MENU</apiName><shortdesc>
	Константа MouseEvent.CONTEXT_MENU определяет значение свойства type объекта события contextMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contextMenu</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>MouseEvent.CONTEXT_MENU</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>contextMenu</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если правая кнопка мыши нажата; иначе –<codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для общения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK"><apiName>DOUBLE_CLICK</apiName><shortdesc>
	Задает значение свойства type для объекта события doubleClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>doubleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>doubleClick</codeph>. Свойство <codeph>doubleClickEnabled</codeph> должно иметь значение <codeph>true</codeph>, чтобы объект мог генерировать событие <codeph>doubleClick</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK"><apiName>MIDDLE_CLICK</apiName><shortdesc>
	Определяет значение свойства type объекта события middleClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>middleClick</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN"><apiName>MIDDLE_MOUSE_DOWN</apiName><shortdesc>
	Определяет значение свойства type объекта события middleMouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>middleMouseDown</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата средняя кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP"><apiName>MIDDLE_MOUSE_UP</apiName><shortdesc>
	Определяет значение свойства type объекта события middleMouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>middleMouseUp</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата средняя кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	Задает значение свойства type для объекта события mouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>mouseDown</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows и Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Пример использования этой константы см. в примере константы <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
	Задает значение свойства type для объекта события mouseMove.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>mouseMove</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> В следующем примере рассматривается простая программа для рисования. Пользователь может рисовать на основном объекте Sprite или на прямоугольном объекте Sprite меньшего размера. 
   
 <p>В конструкторе создается прямоугольный объект Sprite с именем <codeph>innerRect</codeph> и задается зеленый цвет для стиля линии. Стилю линий для рисования контейнера Sprite <codeph>MouseEvent_MOUSE_MOVEExample</codeph> задается красный цвет. Добавляются отдельный прослушиватели событий <codeph>MouseEvent.MOUSE_UP</codeph> и <codeph>MouseEvent.MOUSE_DOWN</codeph> для основного объекта Sprite и объекта Sprite с именем <codeph>innerRect</codeph> приложения. В обоих случаях методы прослушивателя событий для нажатого положения мыши перемещают текущее положение точки рисования в местоположение указателя мыши и добавляют прослушиватель для события <codeph>MouseEvent.MOUSE_MOVE</codeph>. При перемещении указателя мыши вызванный метод прослушивателя событий следует за указателем и рисует линию с помощью метода <codeph>graphics.LineTo()</codeph>. (<b>Примечание.</b> Объект Sprite с именем <codeph>innerRect</codeph> скрывает красные линии основного объекта Sprite, нарисованного за прямоугольником.) Когда происходит событие <codeph>MouseEvent.MOUSE_UP</codeph>, прослушиватель события <codeph>MOUSE_MOVE</codeph> удаляется и рисование прекращается.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT"><apiName>MOUSE_OUT</apiName><shortdesc>
	Задает значение свойства type для объекта события mouseOut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>mouseOut</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Объект списка отображения, на который сейчас указывает мышь.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER"><apiName>MOUSE_OVER</apiName><shortdesc>
	Задает значение свойства type для объекта события mouseOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>mouseOver</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Объект списка отображения, на который указывала мышь.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	Задает значение свойства type объекта события mouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> объекта события <codeph>mouseUp</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Пример использования этой константы см. в примере константы <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL"><apiName>MOUSE_WHEEL</apiName><shortdesc>
	Задает значение свойства type для объекта события mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>mouseWheel</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>delta</codeph></entry><entry>Число строк за каждую прокрутку колесика мышки.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	Определяет значение свойства type объекта события rightClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>rightClick</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	Определяет значение свойства type объекта события rightMouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>rightMouseDown</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	Определяет значение свойства type объекта события rightMouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>rightMouseUp</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если правая кнопка мыши нажата; иначе –<codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Число нажатий мышью, указывающее на то, является ли событие частью последовательности множественных нажатий мышью.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
	Задает значение свойства type для объекта события rollOut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>rollOut</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Объект списка отображения, на который сейчас указывает мышь.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
	Задает значение свойства type для объекта события rollOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>rollOver</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Alt активна (Windows или Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Объект списка отображения, на который указывала мышь.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Горизонтальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Вертикальная координата события относительно спрайта-контейнера.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Горизонтальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Вертикальная координата события в глобальных координатах рабочей области.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject под указателем. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
    Показывает активность клавиши Alt: true – активна, false – неактивна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    Показывает активность клавиши Alt: <codeph>true</codeph> – активна, <codeph>false</codeph> – неактивна. Поддерживается только в операционных системах Windows и Linux.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get"><apiName>buttonDown</apiName><shortdesc>
	Указывает состояние левой кнопки мыши: нажата (true) или не нажата (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает, нажата ли основная кнопка мыши: <codeph>true</codeph> – да, <codeph>false</codeph> – нет.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get"><apiName>clickCount</apiName><shortdesc>
	Указывает на то, является ли событие для нажатого положения мыши частью последовательности нажатий мышью.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Указывает на то, является ли событие для нажатого положения мыши частью последовательности нажатий мышью. Этот параметр будет нулевым для всех событий мыши, кроме <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightMouseDown</codeph> и <codeph>MouseEvent.rightMouseUp</codeph>. С помощью параметра <codeph>clickCount</codeph> можно прослушивать единичные, двойные и множественные нажатия мышью. Например, для первоначального события <codeph>MouseEvent.mouseDown</codeph> и <codeph>MouseEvent.mouseUp</codeph> свойство <codeph>clickCount</codeph> будет иметь значение 1, а для второго события <codeph>MouseEvent.mouseDown</codeph> и <codeph>MouseEvent.mouseUp</codeph> в последовательности двойного нажатия свойство <codeph>clickCount</codeph> будет иметь значение 2. При значительном движении мыши или если последовательность множественных нажатий мышью прервана по каким-либо причинам, следующее событие <codeph>MouseEvent.mouseDown</codeph> будет иметь значение свойства clickCount равное 1. Событие doubleClick будет отправляться, как обычно.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Указывает, активирована ли клавиша Command (только для Mac). Свойство commandKey будет иметь то же значение, что и свойство ctrlKey в Mac.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Указывает, активирована ли клавиша Command (только для Mac). 
	
	<p>Свойство <codeph>commandKey</codeph> будет иметь то же значение, что и свойство <codeph>ctrlKey</codeph> в Mac. Всегда значение false в Windows или Linux.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Указывает, активирована ли клавиша Control в Mac или клавиша Ctrl в Windows или Linux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Указывает, активирована ли клавиша Control в Mac или клавиша Ctrl в Windows или Linux.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	В Windows или Linux указывает на то, активирована ли клавиша Ctrl (true) или нет (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	В Windows или Linux указывает на то, активирована ли клавиша Ctrl (<codeph>true</codeph>) или нет (<codeph>false</codeph>). В Macintosh указывает на то, активирована ли клавиша Control или Command.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get"><apiName>delta</apiName><shortdesc>
	Указывает количество строк, подлежащих прокрутке в каждом случае вращения пользователем колесика мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Указывает количество строк, подлежащих прокрутке в каждом случае вращения пользователем колесика мыши. Положительное значение delta показывает прокручивание вверх, отрицательное значение показывает прокрутку вниз. Как правило, используются значения в пределах 1-3, но при более быстром прокручивании это число увеличивается. Этот параметр зависит от устройства и операционной системы, как правило, его может настраивать пользователь. Это свойство применяется только к событию <codeph>MouseEvent.mouseWheel</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 Если принимает значение true, свойство relatedObject принимает значение null по причинам, связанным с изолированными средами безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Если принимает значение <codeph>true</codeph>, свойство <codeph>relatedObject</codeph> принимает значение <codeph>null</codeph> по причинам, связанным с изолированными средами безопасности. Если номинальным значением свойства <codeph>relatedObject</codeph> является ссылка на объект DisplayObject в другой изолированной среде, свойство <codeph>relatedObject</codeph> принимает значение <codeph>null</codeph>, пока не будут заданы двусторонние права в границах данной изолированной среды. Права задаются путем вызова метода <codeph>Security.allowDomain()</codeph> из SWF-файла или указания файла политик на сервере файла изображений и задания свойства <codeph>LoaderContext.checkPolicyFile</codeph> при загрузке изображения.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/relatedObject"><linktext>MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get"><apiName>localX</apiName><shortdesc>
	Горизонтальная координата события относительно спрайта-контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Горизонтальная координата события относительно спрайта-контейнера.
	
	</apiDesc><example>Пример использования этого свойства см. в примере для константы <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get"><apiName>localY</apiName><shortdesc>
	Вертикальная координата события относительно спрайта-контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Вертикальная координата события относительно спрайта-контейнера.
	
	</apiDesc><example>Пример использования этого свойства см. в примере для константы <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	Ссылка на объект списка отображения, связанный с событием.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Ссылка на объект списка отображения, связанный с событием. Например, когда происходит событие <codeph>mouseOut</codeph>, <codeph>relatedObject</codeph> представляет объект списка отображения, на который теперь показывает указатель. Это свойство применяется к событиям <codeph>mouseOut</codeph>, <codeph>mouseOver</codeph>, <codeph>rollOut</codeph> и <codeph>rollOver</codeph>.
	<p>Это свойство может принимать значение <codeph>null</codeph> по двум причинам: связанный объект отсутствует, или связанный объект существует, но находится в изолированной программной среде безопасности, доступ к которой запрещен. Используйте свойство <codeph>isRelatedObjectInaccessible()</codeph> для определения причины.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible"><linktext>MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Показывает активность клавиши Shift: true – активна, false – неактивна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает активность клавиши Shift: <codeph>true</codeph> – активна, <codeph>false</codeph> – неактивна.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get"><apiName>stageX</apiName><shortdesc>
	Горизонтальная координата события в глобальных координатах рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Горизонтальная координата события в глобальных координатах рабочей области. Это свойство вычисляется, когда задано свойство <codeph>localX</codeph>.
	
	</apiDesc><example>Пример использования этого свойства см. в примере для константы <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>. 
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get"><apiName>stageY</apiName><shortdesc>
	Вертикальная координата события в глобальных координатах рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Вертикальная координата события в глобальных координатах рабочей области. Это свойство вычисляется, когда задано свойство <codeph>localY</codeph>.
	
	</apiDesc><example>Пример использования этого свойства см. в примере для константы <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>.
	</example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
	
	Объект NetStream отправляет объект DRMStatusEvent, когда содержимое, защищенное системой управления цифровыми правами (DRM), успешно начинает воспроизводиться (когда ваучер проверен и пользователь получает право на просмотр содержимого).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты Event объектов с защитой DRM.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	
	Объект NetStream отправляет объект DRMStatusEvent, когда содержимое, защищенное системой управления цифровыми правами (DRM), успешно начинает воспроизводиться (когда ваучер проверен и пользователь получает право на просмотр содержимого). Объект DRMStatusEvent содержит информацию, связанную с ваучером, например, может ли содержимое предоставляться в автономном режиме, или когда истекает срок действия ваучера и просмотр содержимого будет запрещен. Приложение может использовать эти данные для информирования пользователя о состоянии его политик и прав доступа.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS"><linktext>DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
 	    Создает объект Event, содержащий данные о событиях состояния DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent, constructor
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события DRMAuthenticate: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>inPolicies</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Пользовательский объект, содержащий пользовательские свойства DRM.  		
		</apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Контекст события.  		
		</apiDesc></apiParam><apiParam><apiItemName>inAvailableOffline</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, может ли содержимое просматриваться в автономном режиме.
		</apiDesc></apiParam><apiParam><apiItemName>inAnonymous</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, доступно ли содержимое анонимным пользователям.
		</apiDesc></apiParam><apiParam><apiItemName>inVoucherEndDate</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Данные о сроке действия ваучера, выраженные значением epoch.
		</apiDesc></apiParam><apiParam><apiItemName>inOfflineLeasePeriod</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Оставшееся число дней, в течение которых пользователь может просматривать содержимое в автономном режиме.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inVoucher</apiItemName><apiOperationClassifier>flash.net.drm:DRMVoucher</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inLocal</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Создает объект Event, содержащий данные о событиях состояния DRM. Объекты Event передаются прослушивателям событий в качестве параметров. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone"><apiName>clone</apiName><shortdesc>
		Создает копию объекта DRMStatusEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект DRMStatusEvent, значения свойств которого соответствуют значениям оригинала.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Создает копию объекта DRMStatusEvent и задает значение каждого свойства, совпадающее с оригиналом. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString"><apiName>toString</apiName><shortdesc>
		Возвращает строку, содержащую все свойства объекта DRMStatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта DRMStatusEvent.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Возвращает строку, содержащую все свойства объекта DRMStatusEvent. 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS"><apiName>DRM_STATUS</apiName><shortdesc>
		Константа DRMStatusEvent.DRM_STATUS определяет значение свойства type объекта события drmStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Константа <codeph>DRMStatusEvent.DRM_STATUS</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>drmStatus</codeph>. 
		
		
		<p>Это событие имеет следующие свойства:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>detail</codeph></entry><entry>Строка, объясняющая контекст события состояния.</entry></row><row><entry><codeph>isAnonymous</codeph></entry><entry>Указывает, доступно ли содержимое с DRM-шифрованием без запроса учетных данных пользователя для проверки подлинности.</entry></row><row><entry><codeph>isAvailableOffline</codeph></entry><entry>Указывает, доступно ли содержимое с DRM-шифрованием в автономном режиме.</entry></row><row><entry><codeph>offlineLeasePeriod</codeph></entry><entry>Оставшееся число дней, в течение которых содержимое можно просматривать в автономном режиме.</entry></row><row><entry><codeph>policies</codeph></entry><entry>Пользовательский объект события состояния DRM.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NetStream.</entry></row><row><entry><codeph>voucherEndDate</codeph></entry><entry>Абсолютная дата завершения срока действия ваучера, после которой содержимое становится недоступным для просмотра пользователями</entry></row><row><entry><codeph>contentData</codeph></entry><entry>Объект DRMContentData для содержимого</entry></row><row><entry><codeph>voucher</codeph></entry><entry>Объект DRMVoucher для содержимого.</entry></row><row><entry><codeph>isLocal</codeph></entry><entry>Указывает на то, хранится ли содержимое в локальной файловой системе</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get"><apiName>detail</apiName><shortdesc>
		Строка, объясняющая контекст события состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Строка, объясняющая контекст события состояния.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get"><apiName>isAnonymous</apiName><shortdesc>
		Указывает, доступно ли содержимое, защищенное DRM-шифрованием, без запроса учетных данных пользователя для проверки подлинности; если да, то значение – true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Указывает, доступно ли содержимое, защищенное DRM-шифрованием, без запроса учетных данных пользователя для проверки подлинности; если да, то значение – <codeph>true</codeph>. В противном случае, значение – <codeph>false</codeph>, и пользователь должен предоставить имя пользователя и пароль, соответствующий тому, который известен поставщику содержимого и ожидается им. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get"><apiName>isAvailableOffline</apiName><shortdesc>
		Указывает, доступно ли содержимое с DRM-шифрованием, в автономном режиме; если да, то значение – true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Указывает, доступно ли содержимое с DRM-шифрованием, в автономном режиме; если да, то значение – <codeph>true</codeph>. В противном случае значение – <codeph>false</codeph>.
		<p>
		Чтобы содержимое с цифровой защитой было доступным в автономном режиме, его ваучер должен быть сохранен в кэше локального компьютера пользователя. (Приложение определяет место локального хранения содержимого, чтобы оно было доступным в автономном режиме.)
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get"><apiName>offlineLeasePeriod</apiName><shortdesc>
		Оставшееся число дней, в течение которых содержимое можно просматривать в автономном режиме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		Оставшееся число дней, в течение которых содержимое можно просматривать в автономном режиме.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get"><apiName>policies</apiName><shortdesc>
		Пользовательский объект события состояния DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		Пользовательский объект события состояния DRM.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get"><apiName>voucherEndDate</apiName><shortdesc>
		Абсолютная дата завершения срока действия ваучера, после которой содержимое становится недоступным для просмотра пользователями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
		Абсолютная дата завершения срока действия ваучера, после которой содержимое становится недоступным для просмотра пользователями. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 Объект DRMContentData, содержащий информацию, необходимую для получения ваучера на просмотр содержимого с защитой по технологии DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 Объект DRMContentData, содержащий информацию, необходимую для получения ваучера на просмотр содержимого с защитой по технологии DRM.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:set"><apiName>isLocal</apiName><shortdesc>
		 Указывает на то, записывается ли ваучер в кэш-память локального хранилища ваучеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Указывает на то, записывается ли ваучер в кэш-память локального хранилища ваучеров.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:set"><apiName>voucher</apiName><shortdesc>
		 Объект DRMVoucher для содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc>
		 Объект DRMVoucher для содержимого.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Объект отправляет событие AsyncErrorEvent, когда выдается исключение из собственного асинхронного кода, например из LocalConnection, NetConnection, SharedObject или NetStream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий AsyncErrorEvent.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	Объект отправляет событие AsyncErrorEvent, когда выдается исключение из собственного асинхронного кода, например из LocalConnection, NetConnection, <ph platform="actionscript">SharedObject</ph> или NetStream. Существует только один тип события асинхронной ошибки: <codeph>ErrorEvent.ERROR</codeph>.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR"><linktext>ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Создает объект AsyncErrorEvent, содержащий информацию о событиях asyncError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события ошибки: <codeph>ErrorEvent.ERROR</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, находится ли объект Event в фазе восходящей цепочки. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>. <ph platform="javascript">Это свойство применяется для объектов отображения в SWF-содержимом, в котором используется архитектура отображения ActionScript 3.0.</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Текст, отображаемый в качестве сообщения об ошибке. Прослушиватели событий могут получать эту информацию через свойство <codeph>text</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier><apiData>null</apiData><apiDesc>Созданное исключение. Если ошибка не имеет значение null, для свойства <codeph>errorId</codeph> события задается значение свойства <codeph>errorId</codeph> ошибки.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов AsyncErrorEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект AsyncErrorEvent, содержащий информацию о событиях asyncError. Объекты AsyncErrorEvent передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта AsyncErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект AsyncErrorEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта AsyncErrorEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта AsyncErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта AsyncErrorEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта AsyncErrorEvent. Строка имеет следующий формат:
	<p><codeph>[AsyncErrorEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> ... error=<i>значение</i> errorID=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR"><apiName>ASYNC_ERROR</apiName><shortdesc>
	Константа AsyncErrorEvent.ASYNC_ERROR определяет значение свойства type объекта события asyncError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>asyncError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>asyncError</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>имеет значение <codeph>false</codeph><ph platform="javascript"> Это свойство применяется для объектов отображения ActionScript 3.0 (в файлах SWF).</ph></entry> </row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено. <ph platform="javascript">Это свойство применяется для объектов отображения в SWF-содержимом, в котором используется архитектура отображения ActionScript 3.0.</ph></entry> </row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий. <ph platform="javascript">Это свойство применяется для объектов отображения в SWF-содержимом, в котором используется архитектура отображения ActionScript 3.0.</ph></entry> </row><row><entry><codeph>target</codeph></entry> <entry>Объект, отправляющий событие.</entry> </row><row><entry><codeph>error</codeph></entry><entry>Ошибка, запускаемая событием.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error"><apiName>error</apiName><shortdesc>
	Выброшенное исключение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Error</apiValueClassifier></apiValueDef><apiDesc>
	Выброшенное исключение.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
 Объект отправляет объект StatusEvent, когда устройство (например, камера или микрофон) или объект (например, объект LocalConnection) сообщает о своем состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий StatusEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект отправляет объект StatusEvent, когда устройство (например, камера или микрофон) или объект (например, объект LocalConnection) сообщает о своем состоянии. Существует только один тип события состояния: <codeph>StatusEvent.STATUS</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link><link href="air.net.xml#ServiceMonitor"><linktext>air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
	 Создает объект Event, содержащий информацию о событиях состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события состояния: <codeph>StatusEvent.STATUS</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	 </apiDesc></apiParam><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Описание состояния объекта. Прослушиватели событий могут получать эту информацию через свойство <codeph>code</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Категория сообщения, например <codeph>status</codeph>, <codeph>warning</codeph> или <codeph>error</codeph>. Прослушиватели событий могут получать эту информацию через свойство <codeph>level</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов StatusEvent.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Создает объект Event, содержащий информацию о событиях состояния. Объекты Event передаются прослушивателям событий в качестве параметров.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#StatusEvent/STATUS"><linktext>STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone"><apiName>clone</apiName><shortdesc>
	 Создает копию объекта StatusEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект StatusEvent, значения свойств которого соответствуют значениям оригинала.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает копию объекта StatusEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString"><apiName>toString</apiName><shortdesc>
	 Возвращает строку, содержащую все свойства объекта StatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта StatusEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Возвращает строку, содержащую все свойства объекта StatusEvent. Строка имеет следующий формат:
	 <p><codeph>[StatusEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> code=<i>значение</i> level=<i>значение</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS"><apiName>STATUS</apiName><shortdesc>
     Задает значение свойства type для объекта события Status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>status</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Задает значение свойства <codeph>type</codeph> для объекта события <codeph>status</codeph>.
	 <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>code</codeph></entry><entry>Описание состояния объекта.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>уровень</codeph></entry><entry>Категория сообщения, например, <codeph>status</codeph>, <codeph>warning</codeph> или <codeph>error</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, сообщающий свое состояние.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get"><apiName>code</apiName><shortdesc>
	 Описание состояния объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Описание состояния объекта.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get"><apiName>level</apiName><shortdesc>
 	 Категория сообщения, например status, warning или error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 	 Категория сообщения, например <codeph>status</codeph>, <codeph>warning</codeph> или <codeph>error</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
	 DRMManager отправляет объект DRMAuthenticationErrorEvent при сбое вызова метода authenticate() объекта DRMManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DRMManager отправляет объект DRMAuthenticationErrorEvent при сбое вызова метода <codeph>authenticate()</codeph> объекта DRMManager.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
		 Создает новый экземпляр объекта DRMAuthenticationErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>строка типа события
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>вызывает ли событие показ списка отображения
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>можно ли отменить событие
		 </apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Описание ошибки
		 </apiDesc></apiParam><apiParam><apiItemName>inErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Идентификатор ошибки общего типа
		 </apiDesc></apiParam><apiParam><apiItemName>inSubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Идентификатор конкретной ошибки этого типа
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>URL-адрес сервера, на который был выполнен вход
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>проверенный домен сервера, на который был выполнен вход
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает новый экземпляр объекта DRMAuthenticationErrorEvent.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR"><apiName>AUTHENTICATION_ERROR</apiName><shortdesc>
		 Строковая константа, используемая для события ошибки аутентификации в параметре type при добавлении и удалении прослушивателей событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>AuthenticationError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Строковая константа, используемая для события ошибки аутентификации в параметре type при добавлении и удалении прослушивателей событий.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:set"><apiName>subErrorID</apiName><shortdesc>
		 Более подробный код ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 Более подробный код ошибки.
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:IEventDispatcher"><apiName>IEventDispatcher</apiName><shortdesc>
Интерфейс IEventDispatcher определяет методы добавления и удаления прослушивателей событий, проверяет, зарегистрированы ли определенные типы прослушивателей событий и отправляет события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
Интерфейс IEventDispatcher определяет методы добавления и удаления прослушивателей событий, проверяет, зарегистрированы ли определенные типы прослушивателей событий и отправляет события.

<p>Цели событий являются важным компонентом модели событий во Flash<sup>®</sup> Player и Adobe AIR. Цель события является основным фактором, определяющим прохождение потока событий по иерархии списка отображения. Когда происходит такое событие, как щелчок мыши или нажатие клавиши, объект Event отправляется в поток событий из корня списка отображения. Объект Event проходит путь к цели события и обратно, разделенный на три фазы: фаза захвата от корня к последнему узлу перед целевым узлом события; фаза цели включает только целевой узел события; а фаза восходящей цепочки включает все последующие узлы на пути обратно к корневому узлу списка отображения.</p>

<p>Как правило, чтобы дать определенному пользователем классу возможность отправлять события, проще всего расширить класс EventDispatcher. Если это невозможно (например, если класс уже расширяет другой класс), можно внедрить интерфейс IEventDispatcher, создайте элемент EventDispatcher и создайте простые процедуры для направления вызовов в собранный EventDispatcher.</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as"> В следующем примере используются классы IEventDispatcherExample и DecoratedDispatcher, чтобы продемонстрировать реализацию и использование класса IEventDispatcher. Для этого каждый метод DecoratedDispatcher реализуется так же, как и в EventDispatcher. В конструкторе IEventDispatcherExample создается новый экземпляр класса DecoratedDispatcher (с именем <codeph>decorDispatcher</codeph>), затем с помощью переменной <codeph>decorDispatcher</codeph> вызывается метод <codeph>addEventListener()</codeph> с пользовательским событием <codeph>doSomething</codeph>, которое затем обрабатывается методом <codeph>didSomething()</codeph>, распечатывающим строку текста с помощью <codeph>trace()</codeph>.
<codeblock> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace(">> didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Регистрирует объект прослушивателя события на объекте EventDispatcher для получения прослушивателем уведомления о событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Функция прослушивателя, обрабатывающая событие. Эта функция принимает объект события как единственный параметр и ничего не возвращает, например:
	<p><codeph>function(evt:Event):void</codeph></p>
	Эта функция может иметь любое имя.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, работает ли прослушиватель в фазе захвата или в целевой фазе и в фазе восходящей цепочки. Если значение <codeph>useCapture</codeph> равно <codeph>true</codeph>, прослушиватель обрабатывает событие только во время фазы захвата, но не во время целевой фазы или фазы восходящей цепочки. Если значение <codeph>useCapture</codeph> равно <codeph>false</codeph>, то прослушиватель обрабатывает событие только в целевой фазе или фазе восходящей цепочки. Для прослушивания события во всех трех фазах следует дважды вызвать <codeph>addEventListener()</codeph>, первый раз с <codeph>useCapture</codeph>, равным <codeph>true</codeph>, а второй раз с <codeph>useCapture</codeph>, равным <codeph>false</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Уровень приоритета прослушателя события. Приоритеты обозначены 32-разрядным целым числом. Чем больше число, тем выше приоритет. Все прослушиватели с приоритетом <i>n</i> обрабатываются перед обработкой прослушивателей с приоритетом <i>n-1</i>. Прослушиватели с одинаковым приоритетом обрабатываются в порядке их добавления. Значение приоритета по умолчанию равно 0. 
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, является ли ссылка на прослушивателя «сильной» или «слабой». «Сильная» ссылка (по умолчанию) предотвращает удаление прослушивателя сборщиком мусора. «Слабая» ссылка позволяет удалить прослушиватель. <p>Функции элементов уровня класса не подлежат удалению в качестве мусора, вследствие чего можно установить <codeph>useWeakReference</codeph> равным <codeph>true</codeph> для функций элементов уровня класса, не подвергая их возможности подобного удаления. Если значение <codeph>useWeakReference</codeph> равно <codeph>true</codeph> для прослушивателя, являющегося вложенной внутренней функцией, такая функция может быть удалена в качестве мусора и перестанет быть устойчивой. При создании ссылок на внутреннюю функцию (возможно сохранение в другой переменной) она не будет собираться в качестве мусора и останется устойчивой.</p>
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Регистрирует объект прослушивателя события на объекте EventDispatcher для получения прослушивателем уведомления о событии. Можно регистрировать прослушиватели событий в любом узле из списка отображения для каждого типа события, фазы и приоритета.
	<p>После успешной регистрации прослушивателя события невозможно изменить его приоритет путем дополнительных вызовов <codeph>addEventListener()</codeph>. Для изменения приоритета прослушивателя следует вначале вызвать <codeph>removeEventListener()</codeph>. Затем можно снова зарегистрировать прослушиватель с новым приоритетом.</p>
	<p>После регистрации прослушивателя последующие вызовы <codeph>addEventListener()</codeph> со значениями, отличающимися от <codeph>type</codeph> и <codeph>useCapture</codeph> приводят к его отдельной регистрации. Например, прослушиватель, изначально зарегистрированный со значением <codeph>useCapture</codeph>, равным <codeph>true</codeph>, прослушивает только во время фазы захвата. После повторного вызова <codeph>addEventListener()</codeph> с помощью аналогичного объекта прослушивания, но со значением <codeph>useCapture</codeph>, равным <codeph>false</codeph>, активными становятся два отдельных прослушивателя: один прослушивает во время фазы захвата, второй – во время целевой фазы и фазы восходящей цепочки.</p>
	<p>Невозможно зарегистрировать прослушиватель события только для целевой фазы или для фазы восходящей цепочки. Эти фазы соединены при регистрации, поскольку восходящая цепочка применяется только к предшественникам целевого узла.</p>
	<p>При отсутствии необходимости в прослушивателе события он может быть удален с помощью вызова <codeph>EventDispatcher.removeEventListener()</codeph>; в противном случае могут возникнуть проблемы с памятью. Объекты с зарегистрированными прослушивателями события автоматически не удаляются из памяти, поскольку сборщик мусора не удаляет объекты, на которые имеются ссылки.</p>
	<p>Копирование экземпляра EventDispatcher не приводит к копированию прослушивателей событий, присоединенных к нему. (Если для вновь создаваемого узла требуется прослушиватель событий, его необходимо присоединить после создания узла.) При этом при перемещении экземпляра EventDispatcher присоединенные к нему прослушиватели событий перемещаются вместе с ним.</p>
	<p>Прослушиватель событий, регистрируемый на узле, на котором в это время обрабатывается событие, не запускается в ходе текущей фазы, но может быть запущен в потоке событий более поздней фазы, например, фазы восходящей цепочки.</p>
	<p>Прослушиватель событий, удаленный из узла во время обработки события на этом узле, будет запускаться текущими операциями. После удаления прослушиватель событий никогда не вызывается повторно (если только он не был повторно зарегистрирован для будущей обработки). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Посылает событие в поток событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph> до тех пор, пока <codeph>preventDefault()</codeph> не будет вызван для события; в этом случае возвращается значение <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>Объект события, переданный в поток событий.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Посылает событие в поток событий. Адресатом события является объект EventDispatcher, в котором вызывается <codeph>dispatchEvent()</codeph>.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Проверяет, имеет ли объект EventDispatcher прослушиватели, зарегистрированные для определенного типа события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение <codeph>true</codeph>, если прослушиватель указанного типа зарегистрирован; в противном случае – <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Проверяет, имеет ли объект EventDispatcher прослушиватели, зарегистрированные для определенного типа события. Это позволяет определить, где объект EventDispatcher изменил обработку типа события в иерархии потока событий. Для определения, действительно ли определенный тип события запускает прослушиватель события, следует использовать <codeph>IEventDispatcher.willTrigger()</codeph>.
	<p>Различие между <codeph>hasEventListener()</codeph> и <codeph>willTrigger()</codeph> заключается в том, что <codeph>hasEventListener()</codeph> анализирует только объект, к которому он принадлежит, тогда как <codeph>willTrigger()</codeph> – весь поток событий для события, указанного параметром <codeph>type</codeph>.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#IEventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Удаляет прослушиватель из объекта EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Удаляемый объект прослушивателя.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, был ли прослушиватель зарегистрирован для фазы захвата или целевой фазы и фазы восходящей цепочки. Если прослушиватель был зарегистрирован для фазы захвата, целевой фазы и фазы восходящей цепочки, необходимо удалить оба вызова <codeph>removeEventListener()</codeph>: один вызов с <codeph>useCapture</codeph>, равным <codeph>true</codeph>, и второй вызов с <codeph>useCapture</codeph>, равным <codeph>false</codeph>. 
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Удаляет прослушиватель из объекта EventDispatcher. При отсутствии прослушивателя, зарегистрированного с объектом EventDispatcher, вызов этого метода не оказывает никакого воздействия.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Проверяет, зарегистрирован ли прослушиватель события для указанного типа события с данным объектом EventDispatcher или любым его предшественником.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph> при запуске прослушивателя указанного типа; в противном случае значение равно <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Проверяет, зарегистрирован ли прослушиватель события для указанного типа события с данным объектом EventDispatcher или любым его предшественником. Этот метод возвращает значение <codeph>true</codeph>, если прослушиватель события запускается в течение любой фазы потока событий, когда событие указанного типа передается объекту EventDispatcher или любому из его нижестоящих элементов.
	<p>Различие между <codeph>hasEventListener()</codeph> и <codeph>willTrigger()</codeph> заключается в том, что <codeph>hasEventListener()</codeph> анализирует только объект, к которому он принадлежит, тогда как <codeph>willTrigger()</codeph> – весь поток событий для события, указанного параметром <codeph>type</codeph>.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
	Объект HTMLLoader отправляет объект HTMLUncaughtScriptExceptionEvent при каждом выбросе исключения JavaScript, не обработанного инструкцией catch.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	Объект HTMLLoader отправляет объект HTMLUncaughtScriptExceptionEvent при каждом выбросе исключения JavaScript, не обработанного инструкцией <codeph>catch</codeph>.
	
	</apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
		Создает объект HTMLUncaughtScriptExceptionEvent для передачи в качестве параметра прослушивателям событий.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>exceptionValue</apiItemName><apiType value=""/><apiDesc>Когда процесс JavaScript выдает неперехваченное исключение, <codeph>exceptionValue</codeph> представляет собой результат оценки выражения в инструкции throw, полученной в результате неперехваченного исключения. Свойство <codeph>exceptionValue</codeph> может быть представлено примитивным значение, ссылкой на объект JavaScript или на объект ActionScript.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Создает объект HTMLUncaughtScriptExceptionEvent для передачи в качестве параметра прослушивателям событий.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone"><apiName>clone</apiName><shortdesc>
		 
		Создает копию объекта HTMLUncaughtScriptExceptionEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Копия объекта HTMLUncaughtScriptExceptionEvent.
		
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		Создает копию объекта HTMLUncaughtScriptExceptionEvent и задает значение каждого свойства, совпадающее с оригиналом.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION"><apiName>UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc>
		Константа HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION определяет значение свойства type для объекта события uncaughtScriptException.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncaughtScriptException</apiData><apiType value=""/></apiValueDef><apiDesc>
		Константа <codeph>HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> определяет значение свойства <codeph>type</codeph> для объекта события <codeph>uncaughtScriptException</codeph>.
		
		 
		 <p>Это событие имеет следующие свойства:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>exceptionValue</codeph></entry><entry>Результат оценки выражения в инструкции <codeph>throw</codeph>, полученной в результате неперехваченного исключения.</entry></row><row><entry><codeph>stackTrace</codeph></entry><entry>Массив объектов, представляющих трассировку стека во время выполнения инструкции <codeph>throw</codeph>, полученной в результате неперехваченного исключения.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект HTMLLoader.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue"><apiName>exceptionValue</apiName><shortdesc>
	Результат оценки выражения в инструкции throw, полученной в результате неперехваченного исключения.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	Результат оценки выражения в инструкции throw, полученной в результате неперехваченного исключения. Свойство <codeph>exceptionValue</codeph> может быть представлено примитивным значение, ссылкой на объект JavaScript или на объект ActionScript.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get"><apiName>stackTrace</apiName><shortdesc>
	Массив объектов, представляющих трассировку стека во время выполнения инструкции throw, полученной в результате неперехваченного исключения.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	Массив объектов, представляющих трассировку стека во время выполнения инструкции throw, полученной в результате неперехваченного исключения. Каждый объект в массиве имеет три свойства:
	
	<ul>
	
		<li><codeph>sourceURL</codeph> (строка): URL-адрес сценария фрейма списка вызовов.</li>
	
		<li><codeph>line</codeph> (число): номер строки в ресурсе <codeph>sourceURL</codeph> фрейма списка вызовов.</li>
	
		<li><codeph>functionName</codeph> (строка): имя функции для фрейма списка вызовов.</li>
	
	</ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
 Экземпляр SQLErrorEvent отправляется экземпляром SQLConnection или SQLStatement при ошибке во время выполнения операции базы данных в асинхронном режиме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Экземпляр SQLErrorEvent отправляется экземпляром SQLConnection или SQLStatement при ошибке во время выполнения операции базы данных в асинхронном режиме. Экземпляр SQLErrorEvent, передаваемый в качестве объекта события прослушивателям, предоставляет доступ к сведениям о причине ошибки и предпринятой операции.
 
 <p>Конкретные сведения о сбое можно найти в объекте SQLError свойства <codeph>error</codeph> экземпляра SQLErrorEvent.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
     Создает объект SQLErrorEvent для передачи в качестве аргумента прослушивателям событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события, доступный в свойстве <codeph>type</codeph>. SQLErrorEvent определяет один тип событий, <codeph>error</codeph>, представленный константой <codeph>SQLErrorEvent.ERROR</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Значение по умолчанию <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, может ли объект Event быть отменен. Значение по умолчанию <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект SQLError, содержащий сведения об ошибке.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Используется для создания нового объекта SQLErrorEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Создает объект SQLErrorEvent для передачи в качестве аргумента прослушивателям событий.
     
     </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.errors.SQLError;.xml"><linktext>flash.errors.SQLError;</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR"><linktext>ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	 Создает копию объекта SQLErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект SQLErrorEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает копию объекта SQLErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	 Возвращает строку, содержащую все свойства объекта SQLErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта SQLErrorEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Возвращает строку, содержащую все свойства объекта SQLErrorEvent. Строка имеет следующий формат:
	 
	 <p><codeph>[SQLErrorEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> error=<i>значение</i>]</codeph></p>
	 
	 <p>Значение свойства error имеет следующий формат: <codeph>SQLError : <i>сообщение</i> code=<i>значение</i> operation=<i>значение</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
     Константа SQLErrorEvent.ERROR определяет значение свойства type события ошибки, отправляемого, когда вызов метода экземпляра SQLConnection или SQLStatement завершается ошибкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLErrorEvent.ERROR</codeph> определяет значение свойства <codeph>type</codeph> события ошибки, отправляемого, когда вызов метода экземпляра SQLConnection или SQLStatement завершается ошибкой. Объект события <codeph>error</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>error</codeph></entry><entry>Объект SQLError, содержащий информацию о типе возникшей ошибки и о вызвавшей ее операции.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection или SQLStatement, сообщающий об ошибке.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get"><apiName>error</apiName><shortdesc>
     Объект SQLError, содержащий подробные сведения о причине ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc>
     Объект SQLError, содержащий подробные сведения о причине ошибки.
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
Объект отправляет объект ErrorEvent, когда сетевая операция завершается с ошибкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий ErrorEvent.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект отправляет объект ErrorEvent, когда сетевая операция завершается с ошибкой. Существует только один тип события <codeph>error</codeph>: <codeph>ErrorEvent.ERROR</codeph>.

<p>Класс ErrorEvent также служит базовым классом для классов AsyncErrorEvent, IOErrorEvent, SecurityErrorEvent и SQLErrorEvent.</p>

<p>Проверять события <codeph>error</codeph>, для которых нет прослушивателей, можно с помощью <ph platform="actionscript">отладочной версии Flash Player или</ph> приложения AIR Debug Launcher (ADL). <ph platform="actionscript">Отладочная версия Flash Player или</ph> приложение AIR Debug Launcher (ADL) отображают эти события в виде строк (заданных параметром <codeph>text</codeph> конструктора ErrorEvent).</p>

</apiDesc><example conref="examples\ErrorEventExample.as"> Следующий пример демонстрирует использование одного обработчика событий (<codeph>errorHandler()</codeph>), захватывающего несколько типов событий ошибки. Если получено событие <codeph>ioError</codeph>, обработчик выполнить загрузку из сети, в результате чего выдается <codeph>securityError</codeph>.
 
 <p><b>Примечание. </b> Этот пример не распространяется на случаи, когда файл с именем MissingFile.xml находится в том же каталоге, что и SWF-файл.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
	Создает объект Event, содержащий данные о событиях ошибок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события ошибки: <codeph>ErrorEvent.ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, находится ли объект Event в фазе пузыря. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Текст, отображаемый в качестве сообщения об ошибке. Прослушиватели событий могут получать эту информацию через свойство <codeph>text</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Ссылочный номер, связываемый с конкретной ошибкой (поддерживается только в Adobe AIR).
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов ErrorEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий данные о событиях ошибок. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта ErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект ErrorEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта ErrorEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта ErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта ErrorEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта ErrorEvent. Строка имеет следующий формат:
	<p><codeph> [ErrorEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> text= <i>value</i> errorID= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
	Определяет значение свойства type объекта события error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>error</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, испытывающий сбой сетевой операции.</entry></row><row><entry><codeph>text</codeph></entry><entry>Текст, отображаемый в качестве сообщения об ошибке.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get"><apiName>errorID</apiName><shortdesc>
	Содержит ссылочный номер, связанный с конкретной ошибкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Содержит ссылочный номер, связанный с конкретной ошибкой. Для пользовательского объекта ErrorEvent это число является значением параметра <codeph>id</codeph>, представленного в конструкторе. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
 Объект ProgressEvent отправляется, если началась операция загрузки или сокет получил данные.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий ProgressEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект ProgressEvent отправляется, если началась операция загрузки или сокет получил данные. Эти события обычно генерируются, когда SWF-файлы, изображения или данные загружаются в приложение. Существует два типа событий прогресса: <codeph>ProgressEvent.PROGRESS</codeph> и <codeph>ProgressEvent.SOCKET_DATA</codeph>.
 
 </apiDesc><example conref="examples\ProgressEventExample.as"> В следующем примере используется класс <codeph>ProgressEventExample</codeph>, чтобы продемонстрировать использование различных прослушивателей событий при загрузке файла. Для этого выполняются следующие задачи:
 <ol>
  <li>Создаются свойства <codeph>downloadURL</codeph> и <codeph>fileName</codeph>, указывающие местоположение и имя загружаемого файла.</li>
  <li>В конструкторе <codeph>ProgressEventExample</codeph> создается новый объект FileReference с именем <codeph>file</codeph> и передается методу <codeph>configureListeners()</codeph>.</li>
  <li>Затем свойства <codeph>downloadURL</codeph> и <codeph>fileName</codeph> передаются методу <codeph>file.download()</codeph>, который указывает местоположение для загрузки файла.</li>
  <li>Метод <codeph>configureListeners()</codeph> добавляет семь прослушивателей событий со связанными методами подписчиков:
  <ol outputclass="A">
      <li><codeph>cancel</codeph>/<codeph>cancelHandler()</codeph> отправляется в случае отмены загрузки;</li> 
      <li><codeph>complete</codeph>/<codeph>complereHandler()</codeph> отправляется по окончании загрузки файла;</li> 
      <li><codeph>ioError</codeph>/<codeph>ioErrorHandler()</codeph> отправляется, если загружаемый файл недоступен.</li> 
      <li><codeph>open</codeph>/<codeph>openHandler()</codeph> отправляется после начала операции загрузки;</li> 
      <li><codeph>progress</codeph>/<codeph>progressHandler()</codeph> отправляется два раза: когда процесс загрузки начинается и когда заканчивается;</li> 
      <li><codeph>securityError</codeph>/<codeph>securityErrorHandler</codeph> отправляется, если параметр безопасности локального воспроизведения не соответствует типу доступа к данным для загружаемого файла (локальный/сетевой); см. примечания ниже;</li> 
      <li><codeph>select</codeph>/<codeph>selectHandler()</codeph> отправляется, когда выбирается загружаемый файл.</li> 
  </ol>
  </li>
 </ol>
 <p> <b>Примечания.</b>
 <ul>
  <li>SWF-файл требуется откомпилировать с установленным для параметра «Безопасность локального воспроизведения» режимом «Доступ только к сетевым файлам».</li>
  <li>Для реализации данного примера требуется файл с именем SomeFile.pdf.</li> 
  <li>Хотя в этом примере используются все события, доступные для объекта FileReference, в большинстве случаев требуется только та или иная подгруппа..</li>
 </ul>
 </p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.filesystem.xml"><linktext>Класс FileStream</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>Класс LoaderInfo</linktext></link><link href="flash.net.xml#Socket"><linktext>Класс Socket</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData"><apiName>socketData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
	Создает объект Event, содержащий данные о событиях в ходе работы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения:<codeph>ProgressEvent.PROGRESS</codeph> и <codeph>ProgressEvent.SOCKET_DATA</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. 
	</apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Число элементов или байтов, загруженных на момент обработки события прослушивателем.
	</apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Общее число элементов или байтов, которые будут получены в случае успешного завершения загрузки.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов <codeph>ProgressEvent</codeph>.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий данные о событиях в ходе работы. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта ProgressEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект ProgressEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта ProgressEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта ProgressEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта <codeph>ProgressEvent</codeph>.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта ProgressEvent. Строка имеет следующий формат:
	<p><codeph>[ProgressEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> bytesLoaded=<i>значение</i> bytesTotal=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
	Задает значение свойства type для объекта события progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>progress</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Число элементов или байтов, загруженных на момент обработки события прослушивателем.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Общее число элементов или байтов, которые в итоге будут получены в случае успешного завершения загрузки.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект , сообщающий сведения о прогрессе. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA"><apiName>SOCKET_DATA</apiName><shortdesc>
	Задает значение свойства type для объекта события socketData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>socketData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>socketData</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	     
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий событие.</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Число элементов или байтов, загруженных на момент обработки события прослушивателем.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>0; это свойство не используется объектами события <codeph>socketData</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Socket, сообщающий сведения о прогрессе.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	Число элементов или байтов, загруженных на момент обработки события прослушивателем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Число элементов или байтов, загруженных на момент обработки события прослушивателем.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	Общее число элементов или байтов, которые будут получены в случае успешного завершения загрузки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Общее число элементов или байтов, которые будут получены в случае успешного завершения загрузки. Если событие прогресса отправляется/присоединяется к объекту Socket, свойство bytesTotal будет всегда иметь значение 0, если значение не задано в параметре bytesTotal конструктора. Фактическое число байт, отправляемых в обоих направлениях, не задано и определяется разработчиком приложения.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
	 Событие ShaderEvent отправляется после завершения выполнения операции затенения, вызванной объектом ShaderJob.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Событие ShaderEvent отправляется после завершения выполнения операции затенения, вызванной объектом ShaderJob.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#ShaderJob"><linktext>flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
		 Создает объект ShaderEvent для передачи прослушивателям событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события, доступный в свойстве <codeph>type</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Значение по умолчанию <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Значение по умолчанию <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bitmap</apiItemName><apiOperationClassifier>flash.display:BitmapData</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект BitmapData, содержащий результаты выполненной операции (или <codeph>null</codeph>, если целевым объектом не являлся объект BitmapData).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>array</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект ByteArray, содержащий результаты выполненной операции (или <codeph>null</codeph>, если целевым объектом не являлся объект ByteArray).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vector</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>Объект Vector. Экземпляр &lt;Number>, содержащий результаты выполненной операции (или <codeph>null</codeph>, если целевым объектом не являлся объект Vectorэкземпляра &lt;Number>).
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает объект ShaderEvent для передачи прослушивателям событий.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone"><apiName>clone</apiName><shortdesc>
		 Создает копию объекта ShaderEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект ShaderEvent, значения свойств которого соответствуют значениям оригинала.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Создает копию объекта ShaderEvent и задает значение каждого свойства, совпадающее с оригиналом.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString"><apiName>toString</apiName><shortdesc>
		 Возвращает строку, содержащую все свойства объекта ShaderEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта ShaderEvent.
		 
		 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Возвращает строку, содержащую все свойства объекта ShaderEvent. Строка имеет следующий формат:
		 
		 <p><codeph>[ShaderEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> bitmapData=<i>value</i> byteArray=<i>value</i> vector=<i>value</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
		 Задает значение свойства type для объекта события complete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Задает значение свойства <codeph>type</codeph> для объекта события <codeph>complete</codeph>.
		 
		 <p>Это событие имеет следующие свойства:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		      
		  <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bitmapData</codeph></entry><entry>Объект BitmapData, содержащий результаты выполненной операции (или <codeph>null</codeph>, если целевым объектом не являлся объект BitmapData).</entry></row><row><entry><codeph>byteArray</codeph></entry><entry>Объект ByteArray, содержащий результаты выполненной операции (или <codeph>null</codeph>, если целевым объектом не являлся объект ByteArray).</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект ShaderJob, сообщающий о завершении выполнения задачи.</entry></row><row><entry><codeph>vector</codeph></entry><entry>Объект Vector. Экземпляр &lt;Number>, содержащий результаты выполненной операции (или <codeph>null</codeph>, если целевым объектом не являлся объект Vectorэкземпляра &lt;Number>).</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get"><apiName>bitmapData</apiName><shortdesc>
		 Объект BitmapData, переданный методу ShaderJob.start().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc>
		 Объект BitmapData, переданный методу <codeph>ShaderJob.start()</codeph>. Если объект ByteArray или Vector&lt;Number> передан методу <codeph>start()</codeph>, это свойство имеет значение <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get"><apiName>byteArray</apiName><shortdesc>
		 
		 Объект ByteArray, переданный методу ShaderJob.start().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Объект ByteArray, переданный методу <codeph>ShaderJob.start()</codeph>. Если объект BitmapData или Vector. Объект &lt;Number> передан методу <codeph>start()</codeph>, это свойство имеет значение <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get"><apiName>vector</apiName><shortdesc>
		 
         Объект Vector. Объект &amp;lt;Number&amp;gt; был передан методу ShaderJob.start().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
		 
         Объект Vector. Объект &lt;Number>, переданный методу <codeph>ShaderJob.start()</codeph>. Если объект BitmapData или ByteArray передан методу <codeph>start()</codeph>, это свойство имеет значение <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
 События собственного перетаскивания отправляются интерактивными объектами, участвующими в операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 События собственного перетаскивания отправляются интерактивными объектами, участвующими в операции перетаскивания.
 
 <p>Инициирующий объект отправляет:</p> 
 <ul>
    <li><codeph>nativeDragStart</codeph> в момент начала операции перетаскивания;</li>
    <li><codeph>nativeDragUpdate</codeph> по ходу выполнения операции перетаскивания;</li>
    <li><codeph>nativeDragComplete</codeph>, когда пользователь отпускает перетаскиваемый объект (независимо от того, принято ли новое положение объекта).</li>
 </ul>
 
 <p>Инициирующий объект – это передаваемый интерактивный объект, то есть объект NativeDragManager в вызове метода <codeph>NativeDragManager.doDrag()</codeph>, начавшего операцию перетаскивания.</p>
 
 <p>Потенциальные целевые интерактивные объекты отправляют:</p>
 <ul>
    <li><codeph>nativeDragEnter</codeph> при попадании траектории перетаскивания в границы объекта;</li>
    <li><codeph>nativeDragOver</codeph> во время пребывания жеста перетаскивания в границах объекта;</li>
    <li><codeph>nativeDragExit</codeph> при выходе жеста перетаскивания за границы объекта;</li>
    <li><codeph>nativeDragDrop</codeph>, когда пользователь отпускает перетаскиваемый элемент над объектом и он отпускается, предварительно вызвав метод <codeph>NativeDragManager.acceptDragDrop()</codeph>.</li>
 </ul>
 
 <p>Как правило, обработчик события <codeph>nativeDragEnter</codeph> или <codeph>nativeDragOver</codeph> оценивает перетаскиваемые данные и допустимые действия перетаскивания, чтобы определить, может ли интерактивный объект принять опускание. Чтобы указать, что интерактивный объект может быть целью, обработчик событий должен вызвать функцию <codeph>NativeDragManager.acceptDrop()</codeph>, передающую ссылку на объект. Если пользователь отпускает кнопку мыши над заданным объектом, этот объект становиться целью опускания и отправляет событие <codeph>nativeDragDrop</codeph>.</p>
 
 <p>Любой объект типа InteractiveObject может быть инициатором перетаскивания или целью опускания.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#NativeDragManager"><linktext>flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject"><linktext>flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete"><apiName>nativeDragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop"><apiName>nativeDragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter"><apiName>nativeDragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit"><apiName>nativeDragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver"><apiName>nativeDragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart"><apiName>nativeDragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate"><apiName>nativeDragUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
    Создает объект Event со специфической информацией, имеющей отношение к собственным событиям перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения: <codeph>NativeDragEvent.NATIVE_DRAG_START</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_ENTER</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_OVER</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_EXIT</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_DROP</codeph> и <codeph>NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>.
	
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, участвует ли объект Event в фазе восходящей цепочки потока событий.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Указывает, можно ли отменить объект Event.
	</apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Горизонтальная координата события относительно спрайта-контейнера.
	</apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Вертикальная координата события относительно спрайта-контейнера.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Связанный интерактивный экранный объект. 
    </apiDesc></apiParam><apiParam><apiItemName>clipboard</apiItemName><apiOperationClassifier>flash.desktop:Clipboard</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект Clipboard, содержащий передаваемые данные.
    </apiDesc></apiParam><apiParam><apiItemName>allowedActions</apiItemName><apiOperationClassifier>flash.desktop:NativeDragOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект NativeDragOptions, определяющий допустимые действия (перемещение, копирование или ссылка).
    </apiDesc></apiParam><apiParam><apiItemName>dropAction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Текущее действие.
    
 	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Control.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Alt.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Shift.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирована ли клавиша Command.
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Создает объект Event со специфической информацией, имеющей отношение к собственным событиям перетаскивания.
    
	<p>Объекты Event передаются прослушивателям событий в качестве параметров. Отправка события собственного перетаскивания не запускает связанного с этим поведения.</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию данного объекта NativeDragEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект NativeDragEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию данного объекта NativeDragEvent.
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString"><apiName>toString</apiName><shortdesc>
	 Форматирует свойства данного объекта NativeDragEvent в виде строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Свойства данного объекта NativeDragEvent в виде строки.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Форматирует свойства данного объекта NativeDragEvent в виде строки.
	 
	 <p>Строка имеет следующий формат:</p>
	 <p><codeph>[NativeDragEvent type=value bubbles=value cancelable=value ... commandKey=value]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE"><apiName>NATIVE_DRAG_COMPLETE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE определяет значение свойства type объекта события nativeDragComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragComplete</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP"><apiName>NATIVE_DRAG_DROP</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_DROP определяет значение свойства type объекта события nativeDragDrop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragDrop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_DROP определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragDrop</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена данного события отменяет операцию перетаскивания.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные. Буфер обмена может считываться даже если объект, отправивший данное событие находится не в том же домене защиты, что и инициатор.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER"><apiName>NATIVE_DRAG_ENTER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_ENTER определяет значение свойства type объекта события nativeDragEnter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragEnter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_ENTER определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragEnter</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные. Буфер обмена может считываться только если объект, отправивший данное событие находится том же домене защиты, что и инициатор.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT"><apiName>NATIVE_DRAG_EXIT</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_EXIT определяет значение свойства type объекта события nativeDragExit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragExit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_EXIT определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragExit</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные. Буфер обмена может считываться только если объект, отправивший данное событие находится том же домене защиты, что и инициатор.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER"><apiName>NATIVE_DRAG_OVER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_OVER определяет значение свойства type объекта события nativeDragOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_OVER определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragOver</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена данного события отменяет операцию перетаскивания.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные. Буфер обмена может считываться только если объект, отправивший данное событие находится том же домене защиты, что и инициатор.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START"><apiName>NATIVE_DRAG_START</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_START определяет значение свойства type объекта события nativeDragStart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragStart</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_START определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragStart</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена данного события отменяет операцию перетаскивания.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE"><apiName>NATIVE_DRAG_UPDATE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE определяет значение свойства type объекта события nativeDragUpdate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragUpdate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE определяет значение свойства <codeph>type</codeph> объекта события <codeph>nativeDragUpdate</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Объект NativeDragOptions, указывающий действия, имеющие отношение к данной операции перетаскивания.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Объект Clipboard, содержащий перетаскиваемые данные.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Действие, выбранное целью опускания (или <codeph>none</codeph>, если действие не было задано).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions"><apiName>allowedActions</apiName><shortdesc>
	Объект NativeDragOptions, указывающий действия, разрешенные экранным объектом, инициировавшим данную операцию перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc>
	Объект NativeDragOptions, указывающий действия, разрешенные экранным объектом, инициировавшим данную операцию перетаскивания.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard"><apiName>clipboard</apiName><shortdesc>
	 Объект Clipboard, содержащий данные этой операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc>
	 Объект Clipboard, содержащий данные этой операции перетаскивания.
	 
	 <p>Если объект, отправивший событие, находится не в том же домене защиты, что и объект-инициатор, то буфер обмена может считываться только в обработчике события <codeph>nativeDragDrop</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction"><apiName>dropAction</apiName><shortdesc>
	Текущее действие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Текущее действие. В событии <codeph>nativeDragComplete</codeph> свойство <codeph>dropAction</codeph> сообщает окончательное действие. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
	 DRMManager отправляет объект DRMAuthenticationCompleteEvent при успешном вызове метода authenticate() объекта DRMManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DRMManager отправляет объект DRMAuthenticationCompleteEvent при успешном вызове метода <codeph>authenticate()</codeph> объекта DRMManager.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
		 Создает новый экземпляр объекта DRMAuthenticationCompleteEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>строка типа события
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>вызывает ли событие показ списка отображения
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>можно ли отменить событие
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>URL-адрес сервера, на который был выполнен вход
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>проверенный домен сервера, на который был выполнен вход
		 </apiDesc></apiParam><apiParam><apiItemName>inToken</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>маркер аутентификации
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает новый экземпляр объекта DRMAuthenticationCompleteEvent.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone"><apiName>clone</apiName><shortdesc> 
	 Создает дубликат экземпляра подкласса Event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект Event, идентичный исходному.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
	 Создает дубликат экземпляра подкласса Event.
	 
     <p>Возвращает новый объект Event, являющийся копией исходного экземпляра объекта Event. Обычно метод <codeph>clone()</codeph> не вызывается; класс EventDispatcher вызывает его автоматически при повторной отправке события, то есть, при вызове <codeph>dispatchEvent(event)</codeph> из обработчика события <codeph>event</codeph>.</p>
	 
	 <p>Новый объект Event включает все свойства исходного.</p> 
	 
	 <p platform="actionscript">При создании собственного пользовательского класса Event, необходимо переопределять наследуемый метод <codeph>Event.clone()</codeph>, чтобы дублировать свойства пользовательского класса. Если не задать все свойства, добавляемые в ваш подкласс Event, они могут иметь неправильные значения, когда прослушиватели будут обрабатывать повторно отправленное событие.</p>
	 
	 <p platform="actionscript">В данном примере <codeph>PingEvent</codeph> является подклассом класса <codeph>Event</codeph> и реализует собственную версию <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE"><apiName>AUTHENTICATION_COMPLETE</apiName><shortdesc>
		 Строковая константа, используемая для события authentication complete в параметре type при добавлении и удалении прослушивателей событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>authenticationComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Строковая константа, используемая для события authentication complete в параметре type при добавлении и удалении прослушивателей событий.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:set"><apiName>domain</apiName><shortdesc>
		 Домен содержимого сервера управления правами доступа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Домен содержимого сервера управления правами доступа. (Не имя сетевого или интернет-домена.)
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:set"><apiName>serverURL</apiName><shortdesc>
		 URL-адрес сервера управления правами доступа к содержимому.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 URL-адрес сервера управления правами доступа к содержимому.
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:set"><apiName>token</apiName><shortdesc>
		 Маркер аутентификации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 Маркер аутентификации.
		 
		 <p>Аутентификация автоматически добавляется в кэш сеанса DRMManager. Можно сохранить маркер и использовать его для последующей аутентификации пользователя. С помощью метода <codeph>setAuthenticationToken()</codeph> объекта DRMManager можно повторно использовать маркер. Срок действия маркера и другие свойства определяются сервером, создавшим маркер.</p>
		   
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()"><linktext>flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
 Объект IMEEvent отправляется при вводе пользователем текста  с помощью редактора методов ввода (IME).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий IMEEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект IMEEvent отправляется при вводе пользователем текста  с помощью редактора методов ввода (IME). Редакторы IME, как правило, используются для ввода текста на языках, использующих идеографы вместо букв, таких как японский, китайский и корейский. Существует только одно событие IME: <codeph>IMEEvent.IME_COMPOSITION</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
	 Создает объект Event со специфической информацией, имеющей отношение к событиям редактора IME.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только одно событие IME: <codeph>IMEEvent.IME_COMPOSITION</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Строка считывания из IME. Это начальная строка, введенная пользователем до выбора кандидатов. Конечная строка композиции, переданная объекту, находящемуся в фокусе клавиатуры, в событии <codeph>TextEvent.TEXT_INPUT</codeph>. Прослушиватели событий могут получать эту информацию через свойство <codeph>text</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов IMEEvent.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Создает объект Event со специфической информацией, имеющей отношение к событиям редактора IME. Объекты Event передаются прослушивателям событий в качестве параметров.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone"><apiName>clone</apiName><shortdesc>
	 Создает копию объекта IMEEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект IMEEvent, значения свойств которого соответствуют значениям оригинала. 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает копию объекта IMEEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString"><apiName>toString</apiName><shortdesc>
	 Возвращает строку, содержащую все свойства объекта IMEEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта IMEEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Возвращает строку, содержащую все свойства объекта IMEEvent. Строка имеет следующий формат:
	 <p><codeph>[IMEEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> text=<i>значение</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION"><apiName>IME_COMPOSITION</apiName><shortdesc>
	 Задает значение свойства type для объекта события imeComposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeComposition</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Задает значение свойства <codeph>type</codeph> для объекта события <codeph>imeComposition</codeph>. 
	 <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект IME.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DataEvent"><apiName>DataEvent</apiName><shortdesc>
Объект отправляет объект DataEvent при завершении загрузки необработанных данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий DataEvent.

</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект отправляет объект DataEvent при завершении загрузки необработанных данных. Существует два типа события данных: 
<ul><li><codeph>DataEvent.DATA</codeph>: отправляется для отправленных или полученных данных;</li>
<li><codeph>DataEvent.UPLOAD_COMPLETE_DATA</codeph>: отправляется, когда данные отправлены и ответил сервер.</li></ul>

</apiDesc><example conref="examples\DataEventExample.as"> В следующем примере создается объект XMLSocket и подключается к серверу сокетов с портом 8080 домена <codeph>yourDomain</codeph>. К объекту XMLSocket добавляется прослушиватель событий <codeph>data</codeph>, отправляемых при получении необработанных данных.
 
 <p> <b>Примечания.</b> 
 <ul>
    <li>Чтобы генерировать событие <codeph>securityError</codeph> в данном примере, необходимо компилировать SWF-файл с настройкой «Безопасность локального воспроизведения» в значении «Доступ только к сети».</li>
    <li>Потребуется сервер на домене [<codeph>yourDomain</codeph>], использующий порт 8080.</li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent"><apiName>DataEvent</apiName><shortdesc>
	Создает объект Event, содержащий информацию о событиях data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события данных: <codeph>DataEvent.DATA</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Необработанные данные, загружаемые в Flash Player или Adobe AIR. Прослушиватели событий могут получать эту информацию через свойство <codeph>data</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов DataEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий информацию о событиях data. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA"><linktext>DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта DataEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект DataEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта DataEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта DataEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта DataEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта DataEvent. Строка имеет следующий формат:
	<p><codeph>[DataEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> data=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA"><apiName>DATA</apiName><shortdesc>
	Определяет значение свойства type объекта события data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>data</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>data</codeph>.  
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>data</codeph></entry><entry>Необработанные данные, загружаемые в Flash Player или Adobe AIR.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект XMLSocket, получающий данные.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA"><apiName>UPLOAD_COMPLETE_DATA</apiName><shortdesc>
	Определяет значение свойства type объекта события uploadCompleteData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uploadCompleteData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>uploadCompleteData</codeph>.
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>data</codeph></entry><entry>Необработанные данные, возвращенные сервером после успешной отправки файла.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект FileReference, получающий данные после успешной отправки.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get"><apiName>data</apiName><shortdesc>
	Необработанные данные, загружаемые в Flash Player или Adobe AIR.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Необработанные данные, загружаемые в Flash Player или Adobe AIR.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
Объект отправляет объект SecurityErrorEvent, чтобы сообщить об ошибке безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий SecurityErrorEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект отправляет объект SecurityErrorEvent, чтобы сообщить об ошибке безопасности. Ошибки безопасности, о которых сообщается с помощью этого класса, обычно происходят в результате выполнения асинхронных операций, таких как загрузка данных, при которых нарушения политики безопасности могут выявляться в некоторой задержкой. Прослушиватель событий может обратиться к свойству <codeph>text</codeph> объекта, чтобы определить, какая предпринималась операция, и вовлеченные URL. Если прослушивателей событий нет, <ph platform="actionscript">отладочная версия Flash Player</ph> или приложение AIR Debug Launcher (ADL) автоматически отображает сообщение об ошибке с содержимым свойства <codeph>text</codeph>. Существует один тип события ошибки безопасности: <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.

<p>События ошибки безопасности — это окончательные события, отправляемые для целевого объекта. Это значит, что для целевого объекта, столкнувшегося с ошибкой безопасности, другие события, включая события общих ошибок, не отправляются.</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as"> В следующем примере используется класс <codeph>SecurityErrorEventExample</codeph>, чтобы продемонстрировать создание метода прослушивателя <codeph>securityErrorHandler()</codeph> и его использование для прослушивания отправляемых событий <codeph>securityError</codeph>. Это событие происходит, когда объект <codeph>URLRequest</codeph> находится не в том же домене, что и вызывающий SWF-файл, и запрашиваемому домену не предоставлено право доступа с помощью файла политики междоменного доступа.
 <p>Чтобы создать <codeph>SecurityErrorEvent</codeph>, замените <codeph>http://www. [yourDomain].com</codeph> путем, не авторизованным для междоменного доступа.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>Класс Security</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError"><apiName>securityError</apiName><prolog><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
	Создает объект Event, содержащий сведения о событиях ошибки безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события ошибки: <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Текст, отображаемый в качестве сообщения об ошибке. Прослушиватели событий могут получать эту информацию через свойство <codeph>text</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Ссылочный номер, связываемый с конкретной ошибкой. 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов SecurityErrorEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий сведения о событиях ошибки безопасности. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта SecurityErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект securityErrorEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта SecurityErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта SecurityErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта SecurityErrorEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта SecurityErrorEvent. Строка имеет следующий формат:
	<p><codeph> [securityErrorEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> text= <i>value</i> errorID= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc>
	Константа SecurityErrorEvent.SECURITY_ERROR определяет значение свойства type для объекта события securityError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> определяет значение свойства <codeph>type</codeph> для объекта события <codeph>securityError</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Сетевой объект, сообщающий об ошибке безопасности.</entry></row><row><entry><codeph>text</codeph></entry><entry>Текст, отображаемый в качестве сообщения об ошибке.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
 Объект передает объект TextEvent при вводе текста в текстовое поле или при выборе гиперссылки в текстовом поле с поддержкой HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий TextEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект передает объект TextEvent при вводе текста в текстовое поле или при выборе гиперссылки в текстовом поле с поддержкой HTML. Существует два типа событий текста: <codeph>TextEvent.LINK</codeph> и <codeph>TextEvent.TEXT_INPUT</codeph>.
 
 </apiDesc><example conref="examples\TextEventExample.as"> В следующем примере используется класс TextEventExample для создания текстовых полей и прослушивания различных событий текста. Для этого выполняются следующие задачи:
 <ol>
     <li>Объявляются константы для двух URL-адресов, которые будут использоваться в дальнейшем.</li>
    <li>Объявляются две переменные типа TextField для использования в дальнейшем.</li>
     <li>Конструктор класса вызывает два следующих метода:
     <ul>
       <li><codeph>init()</codeph> инициализирует объекты TextField и добавляет к ним прослушиватели событий;</li>
       <li><codeph>draw()</codeph> добавляет объекты TextField в список отображения и назначает им текст для отображения.</li>
  </ul></li>
     <li>Прослушиватели <codeph>linkHandler()</codeph> и <codeph>textInputHandler()</codeph> реагируют на соответствующие события. Метод <codeph>linkHandler()</codeph> открывает web-браузер, если это еще не сделано и открывает URL-адрес, по которому щелкнул пользователь. Метод <codeph>textInputHandler()</codeph> просто отображает информацию при каждом нажатии клавиши в соответствующем текстовом поле.</li>
 </ol>
 
 <p><b>Примечание. </b>В этом примере используется вымышленный домен, <codeph>[yourDomain]</codeph> необходимо заменить существующим доменом.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br />";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'>";
            link += "&lt;u>";
            link += "&lt;b>";
            link += "&lt;a href='event:" + url + "'>" + text + "&lt;/a>";
            link += "&lt;/b>";
            link += "&lt;/u>";
            link += "&lt;/font>";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace(">> ============================");
            trace(">> e.text: " + e.text);
            trace(">> textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link"><apiName>link</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as"> В данном примере, когда пользователь щелкает гиперссылку и HTML-тексте, отправляется событие текста. В зависимости от ссылки пользователь направляется на заданный web-сайт в зависимости от операционной системы компьютера, либо рисуется круг с использованием выбранного пользователем радиуса. 
   
 <p>Создается текстовое поле, а его содержимому задается вид строки в формате HTML с помощью свойства <codeph>htmlText</codeph>. Ссылки подчеркиваются, чтобы пользователю было проще их найти. (Adobe Flash Player изменяет указатель мыши только после того, как он наводится на ссылку.) Чтобы щелчок пользователя гарантированно вызвал метод ActionScript, URL-адрес ссылки начинается со строки <codeph>event:</codeph>, а для события <codeph>TextEvent.LINK</codeph> добавляется прослушиватель.</p> 
 
 <p>Метод <codeph>linkHandler()</codeph>, запускаемый после щелчка пользователя по ссылке, управляет всеми событиями ссылок для текстового поля. Первая инструкция if проверяет свойство <codeph>text</codeph> события, которое содержит остальную часть URL-адрес после строки <codeph>event:</codeph>. Если пользователь щелкнул ссылку для операционной системы, имя его текущей операционной системы, полученное из свойства системы <codeph>Capabilities.os</codeph>, используется для перехода на заданный web-сайт. В противном случае под текстовым полем рисуется круг с использованием радиуса выбранного размера, передаваемого свойством <codeph>text</codeph>. Каждый раз, когда пользователь нажимает на ссылку радиуса, нарисованный ранее круг удаляется и отображается новый красный круг с радиусом выбранного размера.</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput"><apiName>textInput</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as"> В следующем примере рассматривается руководство по созданию особой комбинации ключа (напоминающей пароль). Эта комбинация состоит из семи буквенно-числовых символов, в которой второй и пятый символы — это цифры.
 
 <p>Создается три текстовых поля для предварительных инструкций, пользовательского ввода и предупреждения (ошибки) Добавляется прослушиватель событий, который реагирует на ввод текста пользователем, запуская метод <codeph>textInputHandler()</codeph>. Каждый раз, когда пользователь вводит текст, отправляется событие <codeph>TextEvent.TEXT_INPUT</codeph>. </p>
 <p><b>Примечание.</b> События текста отправляются, когда пользователь вводит символы, и не отправляются в ответ на любой ввод с клавиатуры, например на нажатие клавиши «Назад». Чтобы фиксировать все события клавиатуры, необходимо использовать прослушиватель событий <codeph>KeyboardEvent</codeph>.)</p>
 
 <p>Метод <codeph>textInputHandler()</codeph> контролирует пользовательский ввод и управляет им. Метод <codeph>preventDefault()</codeph> используется для того, чтобы проигрыватель Adobe Flash Player не отображал текст в поле ввода текста сразу. За обновление поля отвечает приложение. Чтобы отменить удаление или изменение уже введенных пользователем символов (строка <codeph>result</codeph>, содержимое поля ввода текста переназначается строке <codeph>result</codeph>, когда пользователь вводит новые символы. Также для обеспечения согласованности функций, метод <codeph>setSelection()</codeph> помещает точку вставки (знак «^») после последнего выделенного символа в текстовом поле.</p>
 
 <p>Первая инструкция if в методе <codeph>textInputHandler()</codeph> проверяет ввод для второй и пятой позиции символов в комбинации ключа, в которых должны быть цифры. Если пользователь ввел правильные символы, вызывается метод <codeph>updateCombination()</codeph>, и в строку комбинации ключа (<codeph>result</codeph>) добавляется ввод пользователя. Метод <codeph>updateCombination()</codeph> также помещает точку вставки после выделенного символа.. После ввода седьмого символа последняя инструкция if метода <codeph>textInputHandler()</codeph> изменяет тип текстового поля <codeph>inputTextField</codeph> с <codeph>INPUT</codeph> на <codeph>DYNAMIC</codeph>: это значит, что пользователь больше не может вводить и изменять символы.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 Создает объект Event, содержащий данные о событиях text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Возможные значения: <codeph>TextEvent.LINK</codeph> и <codeph>TextEvent.TEXT_INPUT</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Один или несколько символов текста, введенные пользователем. Прослушиватели событий могут получать эту информацию через свойство <codeph>text</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов TextEvent.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Создает объект Event, содержащий данные о событиях text. Объекты Event передаются прослушивателям событий в качестве параметров.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone"><apiName>clone</apiName><shortdesc>
	 Создает копию объекта TextEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект TextEvent, значения свойств которого соответствуют значениям оригинала.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает копию объекта TextEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString"><apiName>toString</apiName><shortdesc>
	 Возвращает строку, содержащую все свойства объекта TextEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта TextEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Возвращает строку, содержащую все свойства объекта TextEvent. Строка имеет следующий формат:
	 <p><codeph>[TextEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> text=<i>значение</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK"><apiName>LINK</apiName><shortdesc>
     Задает значение свойства type для объекта события link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Задает значение свойства <codeph>type</codeph> для объекта события <codeph>link</codeph>.
	 
	 <p>Это событие имеет следующие свойства:</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Текстовое поле, содержащее гиперссылку, по которой щелкнул пользователь. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row><row><entry><codeph>text</codeph></entry><entry>Оставшаяся часть URL-адреса после event:</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as"> В данном примере, когда пользователь щелкает гиперссылку и HTML-тексте, отправляется событие текста. В зависимости от ссылки пользователь направляется на заданный web-сайт в зависимости от операционной системы компьютера, либо рисуется круг с использованием выбранного пользователем радиуса. 
   
 <p>Создается текстовое поле, а его содержимому задается вид строки в формате HTML с помощью свойства <codeph>htmlText</codeph>. Ссылки подчеркиваются, чтобы пользователю было проще их найти. (Adobe Flash Player изменяет указатель мыши только после того, как он наводится на ссылку.) Чтобы щелчок пользователя гарантированно вызвал метод ActionScript, URL-адрес ссылки начинается со строки <codeph>event:</codeph>, а для события <codeph>TextEvent.LINK</codeph> добавляется прослушиватель.</p> 
 
 <p>Метод <codeph>linkHandler()</codeph>, запускаемый после щелчка пользователя по ссылке, управляет всеми событиями ссылок для текстового поля. Первая инструкция if проверяет свойство <codeph>text</codeph> события, которое содержит остальную часть URL-адрес после строки <codeph>event:</codeph>. Если пользователь щелкнул ссылку для операционной системы, имя его текущей операционной системы, полученное из свойства системы <codeph>Capabilities.os</codeph>, используется для перехода на заданный web-сайт. В противном случае под текстовым полем рисуется круг с использованием радиуса выбранного размера, передаваемого свойством <codeph>text</codeph>. Каждый раз, когда пользователь нажимает на ссылку радиуса, нарисованный ранее круг удаляется и отображается новый красный круг с радиусом выбранного размера.</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT"><apiName>TEXT_INPUT</apiName><shortdesc>
     Задает значение свойства type для объекта события textInput.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Задает значение свойства <codeph>type</codeph> для объекта события <codeph>textInput</codeph>.
     <p><b>Примечание.</b> Это событие не отправляется для клавиш Delete или Backspace.</p>     
	 <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; вызовите метод <codeph>preventDefault()</codeph> для отмены поведения по умолчанию.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Текстовое поле, в которое вводятся символы. Свойство target не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row><row><entry><codeph>text</codeph></entry><entry>Символ или последовательность символов, введенных пользователем.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as"> В следующем примере рассматривается руководство по созданию особой комбинации ключа (напоминающей пароль). Эта комбинация состоит из семи буквенно-числовых символов, в которой второй и пятый символы — это цифры.
 
 <p>Создается три текстовых поля для предварительных инструкций, пользовательского ввода и предупреждения (ошибки) Добавляется прослушиватель событий, который реагирует на ввод текста пользователем, запуская метод <codeph>textInputHandler()</codeph>. Каждый раз, когда пользователь вводит текст, отправляется событие <codeph>TextEvent.TEXT_INPUT</codeph>. </p>
 <p><b>Примечание.</b> События текста отправляются, когда пользователь вводит символы, и не отправляются в ответ на любой ввод с клавиатуры, например на нажатие клавиши «Назад». Чтобы фиксировать все события клавиатуры, необходимо использовать прослушиватель событий <codeph>KeyboardEvent</codeph>.)</p>
 
 <p>Метод <codeph>textInputHandler()</codeph> контролирует пользовательский ввод и управляет им. Метод <codeph>preventDefault()</codeph> используется для того, чтобы проигрыватель Adobe Flash Player не отображал текст в поле ввода текста сразу. За обновление поля отвечает приложение. Чтобы отменить удаление или изменение уже введенных пользователем символов (строка <codeph>result</codeph>, содержимое поля ввода текста переназначается строке <codeph>result</codeph>, когда пользователь вводит новые символы. Также для обеспечения согласованности функций, метод <codeph>setSelection()</codeph> помещает точку вставки (знак «^») после последнего выделенного символа в текстовом поле.</p>
 
 <p>Первая инструкция if в методе <codeph>textInputHandler()</codeph> проверяет ввод для второй и пятой позиции символов в комбинации ключа, в которых должны быть цифры. Если пользователь ввел правильные символы, вызывается метод <codeph>updateCombination()</codeph>, и в строку комбинации ключа (<codeph>result</codeph>) добавляется ввод пользователя. Метод <codeph>updateCombination()</codeph> также помещает точку вставки после выделенного символа.. После ввода седьмого символа последняя инструкция if метода <codeph>textInputHandler()</codeph> изменяет тип текстового поля <codeph>inputTextField</codeph> с <codeph>INPUT</codeph> на <codeph>DYNAMIC</codeph>: это значит, что пользователь больше не может вводить и изменять символы.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get"><apiName>text</apiName><shortdesc>
	 Для события textInput – введенный пользователем знак или последовательность знаков.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Для события <codeph>textInput</codeph> – введенный пользователем знак или последовательность знаков. Для события <codeph>link</codeph> – текст атрибута <codeph>event</codeph> атрибута <codeph>href</codeph> тега <codeph>&lt;a></codeph>.
	 
	 </apiDesc><example>На примере следующего кода показывается отправка события <codeph>link</codeph>, когда пользователь щелкает гипертекстовую ссылку.
	 
	<codeblock>
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'>Click Me.&lt;/a>";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:Event"><apiName>Event</apiName><shortdesc>
 Класс Event используется как базовый класс для создания объектов Event, которые передаются прослушивателям событий в качестве параметров, когда происходит какое-либо событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Базовый класс объектов событий.
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс Event используется как базовый класс для создания объектов Event, которые передаются прослушивателям событий в качестве параметров, когда происходит какое-либо событие.
 
 <p>Свойства класса Event передают базовую информацию о событии, такую как его тип или возможность отмены действия по умолчанию. Для многих событий, таких как представленные константами класса Events, достаточно этих базовых сведений. Однако для других событий может потребоваться более подробная информация. <ph platform="actionscript">События, связанные с нажатием кнопки мыши, например, требуют включения дополнительной информации о положении события click и о том, были ли нажаты какие-либо клавиши во время события click. Такую дополнительную информацию можно передать прослушивателям событий, расширив класс Event с помощью класса MouseEvent. ActionScript 3.0</ph><ph platform="javascript"> Adobe<sup>®</sup> AIR™</ph> API определяет несколько подклассов Event для общих событий, для которых требуется дополнительная информация. События, связанные подклассами Event, описываются в документации по каждому такому классу.</p>
 
 <p>Методы класса Event можно использовать в функциях прослушивателей событий с целью воздействия на повеление объекта события. С некоторыми событиями связано поведение по умолчанию. <ph platform="actionscript"> Например, событие <codeph>doubleClick</codeph> по умолчанию, как правило, выделяет слово, на которое наведен указатель мыши в момент события. </ph> <ph platform="javascript">Например, событие <codeph>closing</codeph>, отправленное объектом NativeWindow имеет соответствующее поведение, закрывающее окно. </ph>Прослушиватель события может изменить это поведение, вызвав метод <codeph>preventDefault()</codeph>. <ph platform="actionscript">Также можно сделать текущий прослушиватель событий последним для обработки события путем вызова метода <codeph>stopPropogation()</codeph> или <codeph>stopImmediatePropogation()</codeph>.</ph></p>
 
 <p platform="javascript"><b>Примечание.</b> Некоторые константы в этом классе используются для определения свойства <codeph>type</codeph> для используемых в SWF-файле событий, отправка которых выполняется списком отображения ActionScript 3.0. Однако некоторые константы в этом классе используются для определения свойства <codeph>type</codeph> для событий, которые <i>не</i> связаны со списком отображения ActionScript 3.0 и необходимы в коде JavaScript, выполняющемся в среде AIR.</p>
 
 </apiDesc><example conref="examples\EventExample.as"> В следующем примере класс <codeph>EventExample</codeph> и пользовательский класс <codeph>Square</codeph> используются, чтобы показать возможности управления фазой восходящей цепочки события.
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace(">> stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace(">> --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace(">> 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace(">> 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace(">> --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace(">> 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as"> Для этого создается интерактивная демонстрация различий между событиями <codeph>ADDED</codeph> и <codeph>ADDED_TO_STAGE</codeph>, а также между событиями <codeph>REMOVED</codeph> и <codeph>REMOVED_FROM_STAGE</codeph>. Щелчок по спрайту приводит к тому, что он и все его вложенные элементы удаляются из рабочей области. Например, щелчок по самому большому спрайту вызовет событие <codeph>REMOVED</codeph>, а также три события <codeph>REMOVED_FROM_STAGE</codeph>.
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate"><apiName>activate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added"><apiName>added</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage"><apiName>addedToStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel"><apiName>cancel</apiName><prolog><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing"><apiName>closing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COPY</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut"><apiName>cut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CUT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate"><apiName>deactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying"><apiName>displaying</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame"><apiName>enterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting"><apiName>exiting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame"><apiName>exitFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed"><apiName>frameConstructed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>Событие htmlBoundsChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>Событие htmlDOMInitialize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>Событие htmlRender</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3"><apiName>id3</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ID3</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init"><apiName>init</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:INIT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>Событие locationChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave"><apiName>mouseLeave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange"><apiName>networkChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste"><apiName>paste</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed"><apiName>removed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage"><apiName>removedFromStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render"><apiName>render</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll"><apiName>selectAll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange"><apiName>tabChildrenChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange"><apiName>tabEnabledChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange"><apiName>tabIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event"><apiName>Event</apiName><shortdesc>
     Создает объект Event для передачи в качестве параметра прослушивателям событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события, представленный в виде <codeph>Event.type</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Значение по умолчанию <codeph>false</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Значение по умолчанию - <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Используется для создания нового объекта Event.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Создает объект Event для передачи в качестве параметра прослушивателям событий.
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone"><apiName>clone</apiName><shortdesc>
	 Создает дубликат экземпляра подкласса Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Новый объект Event, идентичный исходному.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает дубликат экземпляра подкласса Event.
	 
     <p>Возвращает новый объект Event, являющийся копией исходного экземпляра объекта Event. Обычно метод <codeph>clone()</codeph> не вызывается; класс EventDispatcher вызывает его автоматически при повторной отправке события, то есть, при вызове <codeph>dispatchEvent(event)</codeph> из обработчика события <codeph>event</codeph>.</p>
	 
	 <p>Новый объект Event включает все свойства исходного.</p> 
	 
	 <p platform="actionscript">При создании собственного пользовательского класса Event, необходимо переопределять наследуемый метод <codeph>Event.clone()</codeph>, чтобы дублировать свойства пользовательского класса. Если не задать все свойства, добавляемые в ваш подкласс Event, они могут иметь неправильные значения, когда прослушиватели будут обрабатывать повторно отправленное событие.</p>
	 
	 <p platform="actionscript">В данном примере <codeph>PingEvent</codeph> является подклассом класса <codeph>Event</codeph> и реализует собственную версию <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString"><apiName>formatToString</apiName><shortdesc>
	 Служебная функция для реализации метода toString() в пользовательских классах ActionScript 3.0 Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Имя пользовательского класса Event и строковое значение для параметра <codeph>...arguments</codeph>.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>className</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Имя пользовательского класса Event. <ph platform="actionscript">В предыдущем примере параметру <codeph>className</codeph> задано значение <codeph>PingEvent</codeph>.</ph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>Свойства класса Event <ph platform="actionscript"> и свойства, добавляемые в пользовательский класс Event. В предыдущем примере параметр <codeph>...arguments</codeph> включает в себя свойства <codeph>type</codeph>, <codeph>bubbles</codeph>, <codeph>cancelable</codeph>, <codeph>eventPhase</codeph> и <codeph>URL</codeph></ph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Служебная функция для реализации метода <codeph>toString()</codeph> в пользовательских классах ActionScript 3.0 Event. <ph platform="actionscript">Переопределение метода <codeph>toString()</codeph> рекомендуется, но не является обязательным.</ph>
	 
	 <pre platform="actionscript">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 <p platform="javascript">Этот метод применяется при создании классов ActionScript 3.0, которые будут использоваться в содержимом SWF.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented"><apiName>isDefaultPrevented</apiName><shortdesc>
	Проверяет, выполнялся ли для события вызова метода preventDefault().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Если был вызван метод <codeph>preventDefault()</codeph>, возвращается значение <codeph>true</codeph>; иначе - <codeph>false</codeph>.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Проверяет, выполнялся ли для события вызова метода <codeph>preventDefault()</codeph>. Если был вызван метод <codeph>preventDefault()</codeph>, возвращается значение <codeph>true</codeph>; иначе - <codeph>false</codeph>.
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
	Отменяет поведение по умолчанию для события, если такое поведение можно отменить.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Отменяет поведение по умолчанию для события, если такое поведение можно отменить.
	
	<p>Многие события связаны с поведением по умолчанию. <ph platform="actionscript">Например, если пользователь вводит символ в текстовое поле, этот символ по умолчанию отображается в текстовом поле. Так как поведение события <codeph>TextEvent.TEXT_INPUT</codeph>, принятое по умолчанию, можно отменить, можно использовать метод <codeph>preventDefault()</codeph> для предотвращения отображения символа. </ph> <ph platform="javascript">Например, если пользователь нажимает кнопку закрытия окна, поведением по умолчанию является закрытие окна. Так как поведение события <codeph>closing</codeph>, принятое по умолчанию, можно отменить, можно использовать метод <codeph>preventDefault()</codeph> для предотвращения закрытия окна.</ph>
	</p>
	
    <p platform="actionscript">Примером неотменяемого поведения является поведение по умолчанию, связанное с событием <codeph>Event.REMOVED</codeph>, которое создается при каждой попытке Flash Player удалить экранный объект из списка отображения. Такое поведение по умолчанию (удаление элемента) нельзя отменить, поэтому метод <codeph>preventDefault()</codeph> не влияет на такое поведение по умолчанию. </p>
	
	<p>Можно использовать свойство <codeph>Event.cancelable</codeph>, чтобы проверить, можно ли отменить поведение по умолчанию, связанное с тем или иным событием. Если <codeph>Event.cancelable</codeph> имеет значение <codeph>true</codeph>, то метод <codeph>preventDefault()</codeph> можно вызвать для отмены события; в противном случае, <codeph>preventDefault()</codeph> не будет иметь силы.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/isDefaultPrevented()"><linktext>flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable"><linktext>Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation"><apiName>stopImmediatePropagation</apiName><shortdesc>
	Отменяет обработку прослушивателей событий в текущем узле, а также во всех узлах, которые следуют в потоке событий за текущим узлом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Отменяет обработку прослушивателей событий в текущем узле, а также во всех узлах, которые следуют в потоке событий за текущим узлом. <ph platform="actionscript">Данный метод начинает действовать немедленно и влияет на прослушивателей событий в текущем узле. Наоборот, метод <codeph>stopPropagation()</codeph> не начнет действовать, пока все прослушиватели событий не закончат обработку в текущем узле.</ph>
	
	<p platform="actionscript"><b>Примечание.</b> Данный метод не отменяет поведение, связанное с данным событием; см. описание <codeph>preventDefault()</codeph>, чтобы использовать эту функцию.</p>
	
	<p platform="javascript">Поток событий определяется для экранных объектов в содержимом SWF, в котором используется модель экранных объектов ActionScript 3.0.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopPropagation()"><linktext>flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation"><apiName>stopPropagation</apiName><shortdesc>
	Отменяет обработку прослушивателей событий в узлах, которые следуют в потоке событий за текущим узлом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Отменяет обработку прослушивателей событий в узлах, которые следуют в потоке событий за текущим узлом. <ph platform="actionscript">Этот метод не влияет на прослушивателей событий в текущем узле (<codeph>currentTarget</codeph>). Наоборот, метод <codeph>stopImmediatePropagation()</codeph> предотвращает обработку прослушивателями событий и в текущем, и в последующих узлах. Дополнительные вызовы этого метода не имеют эффекта. Этот метод можно вызвать на любой стадии потока событий.</ph>
	
	<p platform="actionscript"><b>Примечание.</b> Данный метод не отменяет поведение, связанное с данным событием; см. описание <codeph>preventDefault()</codeph>, чтобы использовать эту функцию.</p>
	
	<p platform="javascript">Поток событий определяется для экранных объектов в содержимом SWF, в котором используется модель экранных объектов ActionScript 3.0.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopImmediatePropagation()"><linktext>flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Строка, содержащая все свойства объекта Event.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта Event. Строка имеет следующий формат:
	<p><codeph>[Event type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE"><apiName>ACTIVATE</apiName><shortdesc>
	Константа ACTIVATE определяет значение свойства type объекта события activate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ACTIVATE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>activate</codeph>. 
	<p><b>Примечание.</b> Это событие не имеет фазы захвата и фазы восходящей цепочки, поэтому отправляется непосредственно целевому элементу независимо от того, находится он в списке отображения или нет.</p>
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>activate</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED"><apiName>ADDED</apiName><shortdesc>
	Константа Event.ADDED определяет значение свойства type объекта события added.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>added</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.ADDED</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>added</codeph>. 
	
	<p platform="javascript">Событие <codeph>added</codeph> применяется к списку отображения ActionScript 3.0 и не относится к коду JavaScript.</p>
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр DisplayObject, добавляемый в список отображения. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE"><apiName>ADDED_TO_STAGE</apiName><shortdesc>
	Константа Event.ADDED_TO_STAGE определяет значение свойства type объекта события addedToStage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addedToStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.ADDED_TO_STAGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>addedToStage</codeph>. 
	
	<p platform="javascript">Событие <codeph>addedToStage</codeph> применяется к списку отображения ActionScript 3.0 и не относится к коду JavaScript.</p>
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр DisplayObject, добавляемый в список отображения рабочей области напрямую или путем добавления поддерева, в котором он содержится. Если экземпляр DisplayObject добавляется напрямую, перед этим событием отправляется событие <codeph>added</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL"><apiName>CANCEL</apiName><shortdesc>
	Константа Event.CANCEL определяет значение свойства type объекта события cancel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.CANCEL</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>cancel</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Ссылка на объект, для которого отменена операция.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	Константа Event.CHANGE определяет значение свойства type объекта события change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>change</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, значение которого было изменено. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR"><apiName>CLEAR</apiName><shortdesc>
	Константа Event.CLEAR определяет значение свойства type объекта события clear.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clear</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.CLEAR</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>clear</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>clear</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Примечание.</b> Объектами TextField <i>не</i> отправляются события <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Объекты TextField в контекстном меню всегда включают команды «Вырезать», «Скопировать», «Вставить» и «Выбрать все». Удалить эти команды из контекстного меню для объектов TextField невозможно. Для объектов TextField выбор этих команд (или сочетаний клавиш, эквивалентных элементу меню) не приводит к генерации событий <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Однако другие классы, которые расширяют класс InteractiveObject, включая компоненты, созданные с помощью Flash Text Engine (FTE), могут отправлять эти события.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	Константа Event.CLOSE определяет значение свойства type объекта события close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.CLOSE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>close</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, для которого разорвано подключение.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING"><apiName>CLOSING</apiName><shortdesc>
	Константа Event.CLOSING определяет значение свойства type объекта события closing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>closing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.CLOSING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>closing</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена данного объекта отменяет операцию закрытия.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, для которого подключение будет разорвано.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	Константа Event.COMPLETE определяет значение свойства type объекта complete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.COMPLETE</codeph> определяет значение свойства <codeph>type</codeph> объекта <codeph>complete</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Сетевой объект, который завершил загрузку. 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT"><apiName>CONNECT</apiName><shortdesc>
	Константа Event.CONNECT определяет значение свойства type объекта события connect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.CONNECT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>connect</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Socket или XMLSocket, установивший сетевое подключение.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY"><apiName>COPY</apiName><shortdesc>
	Задает значение свойства type для объекта события copy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>copy</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр InteractiveObject, для которого зарегистрирован прослушиватель события <codeph>copy</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Примечание.</b> Объектами TextField <i>не</i> отправляются события <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Объекты TextField в контекстном меню всегда включают команды «Вырезать», «Скопировать», «Вставить» и «Выбрать все». Удалить эти команды из контекстного меню для объектов TextField невозможно. Для объектов TextField выбор этих команд (или сочетаний клавиш, эквивалентных элементу меню) не приводит к генерации событий <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Однако другие классы, которые расширяют класс InteractiveObject, включая компоненты, созданные с помощью Flash Text Engine (FTE), могут отправлять эти события.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT"><apiName>CUT</apiName><shortdesc>
	Задает значение свойства type для объекта события cut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>cut</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр InteractiveObject, для которого зарегистрирован прослушиватель события <codeph>cut</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Примечание.</b> Объектами TextField <i>не</i> отправляются события <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Объекты TextField в контекстном меню всегда включают команды «Вырезать», «Скопировать», «Вставить» и «Выбрать все». Удалить эти команды из контекстного меню для объектов TextField невозможно. Для объектов TextField выбор этих команд (или сочетаний клавиш, эквивалентных элементу меню) не приводит к генерации событий <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Однако другие классы, которые расширяют класс InteractiveObject, включая компоненты, созданные с помощью Flash Text Engine (FTE), могут отправлять эти события.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE"><apiName>DEACTIVATE</apiName><shortdesc>
	Константа Event.DEACTIVATE определяет значение свойства type объекта события deactivate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.DEACTIVATE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>deactivate</codeph>. 
	<p><b>Примечание.</b> Это событие не имеет фазы захвата и фазы восходящей цепочки, поэтому отправляется непосредственно целевому элементу независимо от того, находится он в списке отображения или нет.</p>
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>deactivate</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING"><apiName>DISPLAYING</apiName><shortdesc>
	 Константа Event.DISPLAYING определяет значение свойства type объекта события displaying.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displaying</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Константа <codeph>Event.DISPLAYING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>displaying</codeph>. 
	 <p><b>Примечание.</b> Это событие не проходит фазу захвата и отправляется непосредственно целевому элементу независимо от того, находится он в списке отображения или нет.</p>
	 <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	  <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, который сейчас будет отображаться.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
	Константа Event.ENTER_FRAME определяет значение свойства type объекта события enterFrame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.ENTER_FRAME</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>enterFrame</codeph>. 
	<p><b>Примечание.</b> Это событие не имеет фазы захвата и фазы восходящей цепочки, поэтому отправляется непосредственно целевому объекту независимо от того, находится он в списке отображения или нет.</p>
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>enterFrame</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING"><apiName>EXITING</apiName><shortdesc>
	Константа Event.EXITING определяет значение свойства type объекта события exiting.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exiting</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.EXITING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>exiting</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена данного объекта отменяет операцию выхода.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект NativeApplication.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME"><apiName>EXIT_FRAME</apiName><shortdesc>
	Константа Event.EXIT_FRAME определяет значение свойства type объекта события exitFrame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.EXIT_FRAME</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>exitFrame</codeph>. 
	<p><b>Примечание.</b> Это событие не имеет фазы захвата и фазы восходящей цепочки, поэтому отправляется непосредственно целевому элементу независимо от того, находится он в списке отображения или нет.</p>
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>enterFrame</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED"><apiName>FRAME_CONSTRUCTED</apiName><shortdesc>
	Константа Event.FRAME_CONSTRUCTED определяет значение свойства type объекта события frameConstructed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>frameConstructed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.FRAME_CONSTRUCTED</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>frameConstructed</codeph>. 
	
	<p><b>Примечание.</b> Это событие не имеет фазы захвата и фазы восходящей цепочки, поэтому отправляется непосредственно целевому элементу независимо от того, находится он в списке отображения или нет.</p>
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>frameConstructed</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN"><apiName>FULLSCREEN</apiName><shortdesc>
	Константа Event.FULL_SCREEN определяет значение свойства type объекта события fullScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.FULL_SCREEN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>fullScreen</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Stage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE"><apiName>HTML_BOUNDS_CHANGE</apiName><shortdesc>
	Константа Event.HTML_BOUNDS_CHANGE определяет значение свойства type объекта события htmlBoundsChange.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlBoundsChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.HTML_BOUNDS_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>htmlBoundsChange</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>Событие htmlBoundsChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE"><apiName>HTML_DOM_INITIALIZE</apiName><shortdesc>
	Константа Event.HTML_DOM_INITIALIZE определяет значение свойства type объекта события htmlDOMInitialize.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlDOMInitialize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.HTML_DOM_INITIALIZE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>htmlDOMInitialize</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>Событие htmlDOMInitialize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER"><apiName>HTML_RENDER</apiName><shortdesc>
	Константа Event.HTML_RENDER определяет значение свойства type объекта события htmlRender.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlRender</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.HTML_RENDER</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>htmlRender</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>Событие htmlRender</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3"><apiName>ID3</apiName><shortdesc>
	Константа Event.ID3 определяет значение свойства type объекта события id3.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id3</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.ID3</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>id3</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Sound, загружающий MP3, для которого уже стали доступными данные ID3. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT"><apiName>INIT</apiName><shortdesc>
	Константа Event.INIT определяет значение свойства type объекта события init.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>init</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.INIT</codeph> определяет значение свойства <codeph>type</codeph>объекта события <codeph>init</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект LoaderInfo, связанный с загружаемым SWF-файлом.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE"><apiName>LOCATION_CHANGE</apiName><shortdesc>
	Константа Event.LOCATION_CHANGE определяет значение свойства type объекта события locationChange.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>locationChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.LOCATION_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>locationChange</codeph>.
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект HTMLLoader.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект HTMLLoader.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>Событие locationChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE"><apiName>MOUSE_LEAVE</apiName><shortdesc>
	Константа Event.MOUSE_LEAVE определяет значение свойства type объекта события mouseLeave.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseLeave</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.MOUSE_LEAVE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>mouseLeave</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Stage. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE"><apiName>NETWORK_CHANGE</apiName><shortdesc>
	Константа Event.NETWORK_CHANGE определяет значение свойства type объекта события networkChange.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>networkChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.NETWORK_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>networkChange</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN"><apiName>OPEN</apiName><shortdesc>
	Константа Event.OPEN определяет значение свойства type объекта события open.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.OPEN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>open</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Сетевой объект, установивший подключение. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE"><apiName>PASTE</apiName><shortdesc>
	Константа Event.PASTE определяет значение свойства type объекта события paste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paste</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.PASTE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>paste</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр InteractiveObject, для которого зарегистрирован прослушиватель события <codeph>paste</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Примечание.</b> Объектами TextField <i>не</i> отправляются события <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Объекты TextField в контекстном меню всегда включают команды «Вырезать», «Скопировать», «Вставить» и «Выбрать все». Удалить эти команды из контекстного меню для объектов TextField невозможно. Для объектов TextField выбор этих команд (или сочетаний клавиш, эквивалентных элементу меню) не приводит к генерации событий <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Однако другие классы, которые расширяют класс InteractiveObject, включая компоненты, созданные с помощью Flash Text Engine (FTE), могут отправлять эти события.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED"><apiName>REMOVED</apiName><shortdesc>
	Константа Event.REMOVED определяет значение свойства type объекта события removed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.REMOVED</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>removed</codeph>. 
	
	<p platform="javascript">Событие <codeph>removed</codeph> применяется к списку отображения ActionScript 3.0 и не относится к коду JavaScript.</p>
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр DisplayObject, удаляемый из списка отображения. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE"><apiName>REMOVED_FROM_STAGE</apiName><shortdesc>
	Константа Event.REMOVED_FROM_STAGE определяет значение свойства type объекта события removedFromStage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removedFromStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.REMOVED_FROM_STAGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>removedFromStage</codeph>. 
	
	<p platform="javascript">Событие <codeph>removedFromStage</codeph> применяется к списку отображения ActionScript 3.0 и не относится к коду JavaScript.</p>
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр DisplayObject, удаляемый из списка отображения рабочей области напрямую или путем удаления поддерева, в котором он содержится. Если экземпляр DisplayObject добавляется напрямую, перед этим событием отправляется событие <codeph>removed</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER"><apiName>RENDER</apiName><shortdesc>
	Константа Event.RENDER определяет значение свойства type объекта события render.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.RENDER</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>render</codeph>. 
	<p><b>Примечание.</b> Это событие не имеет фазы захвата и фазы восходящей цепочки, поэтому отправляется непосредственно целевому элементу независимо от того, находится он в списке отображения или нет.</p>
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию отменить невозможно.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр DisplayObject, для которого зарегистрирован прослушиватель события <codeph>render</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	Константа Event.RESIZE определяет значение свойства type объекта события resize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.RESIZE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>resize</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект Stage.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	Константа Event.SCROLL определяет значение свойства type объекта события scroll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.SCROLL</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>scroll</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Прокручиваемый объект TextField. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT"><apiName>SELECT</apiName><shortdesc>
	Константа Event.SELECT определяет значение свойства type объекта события select.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.SELECT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>select</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, в котором выделен элемент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc>
	Константа Event.SELECT_ALL определяет значение свойства type объекта события selectAll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.SELECT_ALL</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>selectAll</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Любой экземпляр InteractiveObject, для которого зарегистрирован прослушиватель события <codeph>selectAll</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Примечание.</b> Объектами TextField <i>не</i> отправляются события <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Объекты TextField в контекстном меню всегда включают команды «Вырезать», «Скопировать», «Вставить» и «Выбрать все». Удалить эти команды из контекстного меню для объектов TextField невозможно. Для объектов TextField выбор этих команд (или сочетаний клавиш, эквивалентных элементу меню) не приводит к генерации событий <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> или <codeph>selectAll</codeph>. Однако другие классы, которые расширяют класс InteractiveObject, включая компоненты, созданные с помощью Flash Text Engine (FTE), могут отправлять эти события.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE"><apiName>SOUND_COMPLETE</apiName><shortdesc>
	Константа Event.SOUND_COMPLETE определяет значение свойства type объекта события soundComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>soundComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.SOUND_COMPLETE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>soundComplete</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SoundChannel, в котором завершилось воспроизведение звука.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE"><apiName>TAB_CHILDREN_CHANGE</apiName><shortdesc>
	Константа Event.TAB_CHILDREN_CHANGE определяет значение свойства type объекта события tabChildrenChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabChildrenChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.TAB_CHILDREN_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>tabChildrenChange</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, для которого изменен флаг tabChildren. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE"><apiName>TAB_ENABLED_CHANGE</apiName><shortdesc>
	Константа Event.TAB_ENABLED_CHANGE определяет значение свойства type объекта события tabEnabledChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabEnabledChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.TAB_ENABLED_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>tabEnabledChange</codeph>. 
	
	<p platform="javascript">Событие <codeph>tabEnabledChange</codeph> применяется к списку отображения ActionScript 3.0 и не относится к коду JavaScript.to JavaScript code.</p>
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject, для которого изменен флаг tabEnabled. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE"><apiName>TAB_INDEX_CHANGE</apiName><shortdesc>
	Константа Event.TAB_INDEX_CHANGE определяет значение свойства type объекта события tabIndexChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabIndexChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.TAB_INDEX_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>tabIndexChange</codeph>. 
	
	<p platform="javascript">Событие <codeph>tabIndexChange</codeph> применяется к списку отображения ActionScript 3.0 и не относится к коду JavaScript.</p>
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, для которого изменилось свойство tabIndex. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
	Константа Event.UNLOAD определяет значение свойства type объекта события unload.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.UNLOAD</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>unload</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект LoaderInfo, связанный с выгружаемым или заменяемым SWF-файлом.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE"><apiName>USER_IDLE</apiName><shortdesc>
	Константа Event.USER_IDLE определяет значение свойства type объекта события userIdle.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userIdle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.USER_IDLE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>userIdle</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT"><apiName>USER_PRESENT</apiName><shortdesc>
	Константа Event.USER_PRESENT определяет значение свойства type объекта события userPresent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userPresent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>Event.USER_PRESENT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>userPresent</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeApplication.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
	Определяет, является ли событие событием восходящей цепочки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Определяет, является ли событие событием восходящей цепочки. Если событие может переходить пузырем вверх по цепочке, то значение — <codeph>true</codeph>; иначе — <codeph>false</codeph>.
	
	<p platform="javascript">Всплывание событий определяется для экранных объектов в содержимом SWF, в котором используется модель экранных объектов ActionScript 3.0. Свойство <codeph>bubbles</codeph> значимо только в коде ActionScript 3.0.</p>
	
	<p platform="actionscript">При возникновении события оно проходит три фазы потока событий: фазу захвата, которая идет сверху иерархии списка отображения до узла непосредственно перед целевым узлом; фазу цели, которая включает только целевой узел; и фазу восходящей цепочки, которая идет от узла, следующего за целевым, обратно вверх по иерархии списка отображения.</p>
	
	<p platform="actionscript">Некоторые события, например события <codeph>activate</codeph> и <codeph>unload</codeph>, не имеют фазы восходящей цепочки. Свойство <codeph>bubbles</codeph> имеет значение <codeph>false</codeph> для событий, не имеющих фазы восходящей цепочки.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
	Указывает, можно ли предотвратить поведение, связанное с событием.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Указывает, можно ли предотвратить поведение, связанное с событием. Если событие может быть отменено, то значение — <codeph>true</codeph>; иначе — <codeph>false</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
	Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	Объект, активно обрабатывающий объект Event с помощью прослушивателя событий. Например, если пользователь нажимает кнопку «ОК», текущей целью может быть узел, содержащий эту кнопку, или один из его предшественников, для которого зарегистрирован прослушиватель данного события.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
	Текущая фаза в потоке событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Текущая фаза в потоке событий. Это свойство может содержать следующие численные значения:
	<ul>
	    <li> Фаза захвата (<codeph>EventPhase.CAPTURING_PHASE</codeph>).</li>
	    <li> Фаза цели (<codeph>EventPhase.AT_TARGET</codeph>).</li>
	    <li> Фаза восходящей цепочки (<codeph>EventPhase.BUBBLING_PHASE</codeph>).</li></ul>
	
	<p platform="javascript">Поток событий определяется для экранных объектов в содержимом SWF, в котором используется модель экранных объектов ActionScript 3.0. Свойство <codeph>eventPhase</codeph> значимо только в коде ActionScript 3.0.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get"><apiName>target</apiName><shortdesc>
	Целевой объект события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	Целевой объект события. Это свойство содержит целевой узел. Например, если пользователь нажимает кнопку «ОК», целевым является узел списка отображения, содержащий эту кнопку.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get"><apiName>type</apiName><shortdesc>
	Тип события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Тип события. Данный тип является зависит от регистра.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc> 
  Отправляется при запросе проигрывателем новых аудиоданных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Отправляется при запросе проигрывателем новых аудиоданных. 
 
  <p>Используйте это событие для управления динамически создаваемыми аудиоданными. В данной среде объект Sound на самом деле не содержит звуковых данных. Вместо этого он выполняет функцию сокета для потока звуковых данных, направляемых ему при помощи функции, назначенной для этого события. </p>
 
  <p>В функции используется метод <codeph>ByteArray.writeFloat()</codeph> для записи в объект ByteArray (<codeph>event.data</codeph>), который содержит отобранные для воспроизведения данные.</p>
 
  <p>При вызове <codeph>Sound.play()</codeph> проигрыватель посылает вызов обработчику событий, запрашивая блоки данных, содержащие звуковые данные. Проигрыватель продолжает отправлять события в течение воспроизведения звука до прекращения поступления данных или до вызова метода <codeph>SoundChannel.stop()</codeph>.</p>
 
  <p>Время ожидания события варьируется от платформы к платформе и может измениться в будущих версиях Flash Player. Рекомендуется вычислять время ожидания, а не полагаться на указанную величину. Для вычисления времени ожидания в ActionScript используйте формулу: <codeph>((SampleDataEvent.position/44.1) — SoundChannelObject.position)</codeph>.</p>
 
  <p>Укажите от 2048 до 8192 образцов данных для объекта <codeph>SampleDataEvent</codeph>. Для лучшей производительности укажите как можно больше образцов. Чем меньше образцов вы укажете, тем больше вероятность возникновения звуковых помех во время воспроизведения. Однако этот принцип действует по-разному на разных платформах, и помехи могут возникнуть в различных ситуациях, например при изменении размера браузера. Вы можете написать код, который будет работать на одной платформе с 2048 образцами, но это не значит, что этот код будет работать так же хорошо на другой платформе. Если вам требуется как можно меньший период ожидания, предоставьте пользователям возможность выбирать объем данных.</p>
 
  <p>Если указать менее 2048 образцов, Flash Player воспроизведет оставшиеся образцы и остановит звук, как-будто был достигнут конец аудиофайла, создав событие SoundComplete.</p>
 
  <p>Можно также использовать метод <codeph>Sound.extract()</codeph> для извлечения данных из объекта Sound, которые потом можно записать в динамический поток для воспроизведения.  </p>
 
  <p>При использовании данного события с объектом Sound единственными другими доступными методами Sound являются <codeph>Sound.extract()</codeph> и <codeph>Sound.play()</codeph>. Вызов любых других методов или свойств приводит к возникновению исключения «недопустимый вызов». Все методы и свойства объекта SoundChannel остаются доступными.</p>
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as"> Следующий пример воспроизводит простую гармоническую волну.
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc>
		Создает объект события, содержащий данные о событиях звуковых данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Этим значением является: <codeph>Event.SAMPLE_DATA</codeph>.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. 
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. 
		</apiDesc></apiParam><apiParam><apiItemName>theposition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Положение данных в аудиопотоке.
		</apiDesc></apiParam><apiParam><apiItemName>thedata</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Массив байт данных.
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Создает объект события, содержащий данные о событиях звуковых данных. Объекты Event передаются прослушивателям событий в качестве параметров. 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone"><apiName>clone</apiName><shortdesc>
		Создает копию объекта SampleDataEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект SampleDataEvent, значения свойств которого соответствуют значениям оригинала.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Создает копию объекта SampleDataEvent и задает значение каждого свойства, совпадающее с оригиналом. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString"><apiName>toString</apiName><shortdesc>
		Возвращает строку, содержащую все свойства объекта SampleDataEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта <codeph>SampleDataEvent</codeph>.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Возвращает строку, содержащую все свойства объекта SampleDataEvent. Строка имеет следующий формат:
		<p><codeph>[SampleDataEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> theposition=<i>значение</i> thedata=<i>значение</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA"><apiName>SAMPLE_DATA</apiName><shortdesc>
		Задает значение свойства type для объекта события SampleDataEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sampleData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Задает значение свойства <codeph>type</codeph> для объекта события <codeph>SampleDataEvent</codeph>. 
		<p>Это событие имеет следующие свойства:</p>
		<adobetable class="innertable">
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>position</codeph></entry><entry>Точка, из которой поступают аудиоданные.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get"><apiName>data</apiName><shortdesc>
		Данные в аудиопотоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		Данные в аудиопотоке.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get"><apiName>position</apiName><shortdesc>
		Положение данных в аудиопотоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		Положение данных в аудиопотоке.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 Объект NativeApplication приложения AIR отправляет событие invoke при вызове приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Объект NativeApplication приложения AIR отправляет событие <codeph>invoke</codeph> при вызове приложения. 
	 
	 <p>Объект NativeApplication всегда отправляет событие <codeph>invoke</codeph> при запуске приложения, но событие может отправляться и в других случаях. Например, работающее приложение отправляет дополнительное событие InvokeEvent, когда пользователь активирует файл, связанный с приложением.</p>
	 
	 <p>Может быть запущен только один экземпляр данного приложения. Последующие попытки запустить приложение приведут к отправке новых событий <codeph>invoke</codeph> объекта NativeApplication работающего экземпляра. Приложение отвечает за обработку данного события и выполнение соответствующего действия, например открытия нового окна приложения для отображения данных файла.</p>
	  
	 <p>Объекты InvokeEvent отправляются объектом NativeApplication (<codeph>NativeApplication.nativeApplication</codeph>). Для получения событий <codeph>invoke</codeph> необходимо вызвать метод <codeph>addEventListener()</codeph> объекта NativeApplication. Когда регистрируется прослушиватель события <codeph>invoke</codeph>, он также получает все события <codeph>invoke</codeph>, отправленные до регистрации. Эти предшествующие события отправлены после возврата вызова <codeph>addEventListener()</codeph>, но не обязательно перед новым событием <codeph>invoke</codeph>, которое может быть отправлено после регистрации. Поэтому не следует полагаться на порядок отправки.</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#BrowserInvokeEvent"><linktext>flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier>flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 Функция конструктора для класса InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события, представленный в виде <codeph>Event.type</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Имеет значение <codeph>false</codeph> для объекта InvokeEvent.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Имеет значение <codeph>false</codeph> для объекта InvokeEvent.
	 </apiDesc></apiParam><apiParam><apiItemName>dir</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiData>null</apiData><apiDesc>Каталог, который должен использоваться для разрешения относительных путей в массиве <codeph>arguments</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>argv</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Массив аргументов (строк), передаваемых приложению.
	 </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>standard</apiData><apiDesc>причиной события является либо <codeph>InvokeEventReason.LOGIN</codeph> либо <codeph>InvokeEventReason.STANDARD</codeph>. (Этот параметр доступен как в версии AIR 1.5.1.) 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Функция конструктора для класса InvokeEvent.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Создает новую копию данного события.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Копия события.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Создает новую копию данного события.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE"><apiName>INVOKE</apiName><shortdesc>
	 Константа InvokeEvent.INVOKE определяет значение свойства typeм объекта InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Константа <codeph>InvokeEvent.INVOKE</codeph> определяет значение свойства <codeph>type</codeph> объекта InvokeEvent.
	 
     <p>Объект InvokeEvent имеет следующие свойства.</p>
 	 <adobetable class="innertable">
        
	     
	    
	    
	     
	    
	     
	        
	  <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>Массив строковых аргументов, передаваемых в ходе данного вызова.</entry></row><row><entry><codeph>currentDirectory</codeph></entry><entry>Объект File, представляющий каталог, который должен использоваться для разрешения относительных путей в массиве arguments.</entry></row><row><entry><codeph>reason</codeph></entry><entry>Код, обозначающий, было ли отправлено событие вызова из-за автоматического запуска при входе в систему (<codeph>InvokeEventReason.LOGIN</codeph>) или по другой причине (<codeph>InvokeEventReason.STANDARD</codeph>). Доступно как в версии AIR 1.5.1.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект InvokeEvent с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Всегда объект NativeApplication. 
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 Массив строковых аргументов, передаваемых в ходе данного вызова.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Массив строковых аргументов, передаваемых в ходе данного вызова. Если это вызов из командной строки, массив содержит аргументы командной строки (<i>за исключением</i> имени процесса).
		 
		 <p><i>Примечание.</i> Когда несколько файлов выделяются и открываются в Mac<sup>®</sup> OS X, AIR отправляет одно событие <codeph>invoke</codeph>, содержащее имена всех выбранных файлов в массиве<codeph>arguments</codeph>. В Windows<sup>®</sup> и Linux, однако, AIR отправляет отдельное событие <codeph>invoke</codeph> для каждого выделенного файла, содержащее только имя этого файла в массиве <codeph>arguments</codeph>.
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get"><apiName>currentDirectory</apiName><shortdesc>
		 Каталог, который должен использоваться для разрешения относительных путей в массиве arguments.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
		 Каталог, который должен использоваться для разрешения относительных путей в массиве <codeph>arguments</codeph>. 
		 
		 <p>Если приложение запускается из командной строки, для этого свойства обычно задается текущий рабочий каталог оболочки командной строки, из которой запущено приложение. Если приложение запускается из оболочки графического пользовательского интерфейса, как правило, задается корневой каталог файловой системы.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get"><apiName>reason</apiName><shortdesc>
		 Причина данного InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Причина данного InvokeEvent. Данное свойство указывает на способ запуска приложения: вручную пользователем или автоматически при входе в систему. Возможные значения перечислены в виде констант в классе <codeph>InvokeEventReason</codeph>.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Константа InvokeEventReason</entry><entry>Значение</entry></row></thead><tbody><row>
		 	<entry><codeph>LOGIN</codeph></entry>
		 	<entry>Автоматический запуск при входе в систему.</entry>
		 
		 </row><row>
		 	<entry><codeph>STANDARD</codeph></entry>
		 	<entry>Запуск по какой-либо другой причине.</entry>
		 
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
Приложение отправляет объекты HTTPStatusEvent, когда сетевой запрос возвращает код состояния HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Приложение отправляет объекты HTTPStatusEvent, когда сетевой запрос возвращает код состояния HTTP. 

<p>Объекты HTTPStatusEvent всегда отправляются перед событиями ошибок или выполнения. Объект HTTPStatusEvent не обязательно указывает на наличие ошибок; он просто отражает код состояния HTTP (если он есть), передаваемый сетевым стеком. <ph platform="actionscript">Некоторые среды выполнения Flash Player не могут отслеживать коды состояния HTTP; в таких случаях всегда выдается код состояния 0.</ph> </p>

<p><ph platform="actionscript">В Flash Player существует только один тип события HTTPStatus: <codeph>httpStatus</codeph>. </ph>В среде выполнения AIR есть возможность зарегистрировать FileReference, URLLoader или URLStream в качестве прослушивателей <codeph>httpResponseStatus</codeph>, куда входят свойства <codeph>responseURL</codeph> и <codeph>responseHeaders</codeph>. В событии <codeph>httpStatus</codeph> данные свойства имеют значение undefined.</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as"> В следующем примере предпринимается попытка загрузить несуществующий файл из корневого web-каталога http://www. [yourDomain].com, в результате чего должно быть передано событие <codeph>httpStatusHandler</codeph> с кодом состояния 404, указывающим на то, что файл не найден. Событие <codeph>httpStatusHandler</codeph> обрабатывается методом <codeph>httpStatusHandler()</codeph>, который просто печатает две строки сведений о событии.
 
 <p> <b>Примечания.</b> 
 <ol>
    <li>SWF-файл необходимо компилировать с параметром «Безопасность локального воспроизведения» в значении «Доступ только к сети», чтобы генерировать событие <codeph>securityError</codeph> в этом примере.</li>
    <li>Для реализации примера нужен сервер в домене http://www. [yourDomain].com, прослушивающий порт 80, иначе событие <codeph>httpStatusHandler</codeph> будет отправлено с кодом состояния 0 вместо 404.</li>
    <li>Не должно быть файла с именем MissingFile.html в корневом web-каталоге домена http://www. [yourDomain].com, иначе не будет отправлено требуемое событие <codeph>httpStatusHandler</codeph>.</li>
 </ol>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
	Создает объект Event, содержащий данные о событиях состояния HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события HTTPStatus: <codeph>HTTPStatusEvent.HTTP_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Численный код состояния. Прослушиватели событий могут получать эту информацию через свойство <codeph>status</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов HTTPStatusEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий данные о событиях состояния HTTP. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS"><linktext>HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта HTTPStatusEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект HTTPStatusEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта HTTPStatusEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта HTTPStatusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта HTTPStatusEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта HTTPStatusEvent. Строка имеет следующий формат:
	<p><codeph>[HTTPStatusEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> status=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS"><apiName>HTTP_RESPONSE_STATUS</apiName><shortdesc>
	В отличии от события httpStatus, событие httpResponseStatus доставляется до получения данных ответа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpResponseStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	В отличии от события <codeph>httpStatus</codeph>, событие <codeph>httpResponseStatus</codeph> доставляется до получения данных ответа. Таким образом, в событие <codeph>httpResponseStatus</codeph> входят значения свойств <codeph>responseHeaders</codeph> и <codeph>responseURL</codeph> (которые для события <codeph>httpStatus</codeph> имеют значение undefined.) Обратите внимание на то, что <codeph>httpResponseStatus</codeph> (при наличии такового) будет отправляться до (как дополнение) любого события <codeph>complete</codeph> или <codeph>error</codeph>. 
	
	<p>Константа <codeph>HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>httpResponseStatus</codeph>. </p>
	
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>responseURL</codeph></entry><entry>URL-адрес, с которого был получен ответ.</entry></row><row><entry><codeph>responseHeaders</codeph></entry><entry>Заголовки ответа, возвращаемые в ответе, представляют собой массив объектов URLRequestHeader.</entry></row><row><entry><codeph>status</codeph></entry><entry>Код состояния HTTP, возвращенный сервером.</entry></row><row><entry><codeph>target</codeph></entry><entry>Сетевой объект, получающий код состояния НТТР. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS"><apiName>HTTP_STATUS</apiName><shortdesc>
	Константа HTTPStatusEvent.HTTP_STATUS определяет значение свойства type объекта события httpStatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>HTTPStatusEvent.HTTP_STATUS</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>httpStatus</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>status</codeph></entry><entry>Код состояния HTTP, возвращенный сервером.</entry></row><row><entry><codeph>target</codeph></entry><entry>Сетевой объект, получающий код состояния НТТР. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get"><apiName>responseHeaders</apiName><shortdesc>
	 Заголовки ответа, возвращаемые в ответе, представляют собой массив объектов URLRequestHeader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Заголовки ответа, возвращаемые в ответе, представляют собой массив объектов URLRequestHeader.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get"><apiName>responseURL</apiName><shortdesc>
	 URL-адрес, с которого был получен ответ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 URL-адрес, с которого был получен ответ. При наличии перенаправлений данный адрес будет отличаться от URL-адреса, на который отправлен запрос.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get"><apiName>status</apiName><shortdesc>
	Код состояния HTTP, возвращенный сервером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Код состояния HTTP, возвращенный сервером. Например, значение 404 указывает на то, что сервер не нашел соответствия для запрашиваемого URI. Коды состояния HTTP описаны в разделах 10.4 и 10.5 спецификации HTTP на странице <xref href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">ftp://ftp.isi.edu/in-notes/rfc2616.txt</xref>.
	
	<p>Если <ph platform="actionscript">Flash Player или</ph> AIR не удается получить код состояния от сервера или не удается установить связь с сервером, значение по умолчанию 0 передается в ваш код. <ph platform="actionscript">Значение 0 может быть создано в любом проигрывателе (например, при запросе неправильного URL-адреса), и оно всегда создается подключаемым программным модулем Flash Player при его выполнении в следующих браузерах, которые не передают код состояния HTTP проигрывателю: Netscape, Mozilla, Safari, Opera и Internet Explorer для ОС Macintosh.</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
	 Объект File отправляет событие FileListEvent, когда вызов его метода getDirectoryListingAsync() успешно перечисляет набор файлов и каталогов или когда пользователь выделяет файлы после вызова метода browseForOpenMultiple().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объект File отправляет объект FileListEvent после успешных вызовов метода getDirectoryListingAsync() или browseForOpenMultiple().
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Объект File отправляет событие FileListEvent, когда вызов его метода <codeph>getDirectoryListingAsync()</codeph> успешно перечисляет набор файлов и каталогов или когда пользователь выделяет файлы после вызова метода <codeph>browseForOpenMultiple()</codeph>. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
		Функция конструктора для объекта FileListEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, имеет ли объект Event фазу восходящей цепочки (<codeph>false</codeph> для объекта FileListEvent).
		
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event (<codeph>false</codeph> для объекта FileListEvent).
		
		</apiDesc></apiParam><apiParam><apiItemName>files</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Массив объектов File.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Функция конструктора для объекта FileListEvent. 
		
		<p>Во время выполнения этот класс используется для создания объектов FileListEvent. Этот конструктор не используется в коде напрямую.</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING"><apiName>DIRECTORY_LISTING</apiName><shortdesc>
		 Константа FileListEvent.DIRECTORY_LISTING определяет значение свойства type объекта события directoryListing.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoryListing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Константа <codeph>FileListEvent.DIRECTORY_LISTING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>directoryListing</codeph>.
		 
		 <p>Это событие имеет следующие свойства:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>files</codeph></entry><entry>Массив объектов File, представляющий найденные файлы и каталоги.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект FileListEvent.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE"><apiName>SELECT_MULTIPLE</apiName><shortdesc>
		 Константа FileListEvent.SELECT_MULTIPLE определяет значение свойства type объекта события selectMultiple.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectMultiple</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Константа <codeph>FileListEvent.SELECT_MULTIPLE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>selectMultiple</codeph>.
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>files</codeph></entry><entry>Массив объектов File, представляющий выделенные файлы.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект FileListEvent.</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files"><apiName>files</apiName><shortdesc>
		 Массив объектов File, представляющий найденные или выделенные файлы и каталоги.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Массив объектов File, представляющий найденные или выделенные файлы и каталоги. 
		 
		 <p>Для метода <codeph>File.getDirectoryListingAsync()</codeph> это список файлов и каталогов, найденных в корне каталога, представленного объектом File, который вызвал этот метод. Для метода <codeph>File.browseForOpenMultiple()</codeph> это список файлов, выделенных пользователем.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
 Объект NativeWindow отправляет событие NativeWindowBoundsEvent при изменении размера или местоположения окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий NativeWindow, изменяющие размер и/или местоположение окна.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект NativeWindow отправляет событие NativeWindowBoundsEvent при изменении размера или местоположения окна. Существует четыре типа событий:
 <ul>
     <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING"><linktext>flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE"><linktext>flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING"><linktext>flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE"><linktext>flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving"><apiName>moving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing"><apiName>resizing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
    Создает объект Event со специфической информацией, имеющей отношение к событиям границ окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения:
    <ul>
        <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Указывает, участвует ли объект Event в фазе восходящей цепочки потока событий.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, можно ли отменить объект Event.
    </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает границы до самого последнего или ожидаемого изменения.
    </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает границы после самого последнего или ожидаемого изменения. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Создает объект Event со специфической информацией, имеющей отношение к событиям границ окна. Объекты Event передаются прослушивателям событий в качестве параметров.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone"><apiName>clone</apiName><shortdesc>
    Создает копию объекта NativeWindowBoundsEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект NativeWindowBoundsEvent, значения свойств которого соответствуют значениям оригинала.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Создает копию объекта NativeWindowBoundsEvent и задает значение каждого свойства, совпадающее с оригиналом.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString"><apiName>toString</apiName><shortdesc>
    Возвращает строку, содержащую все свойства объекта NativeWindowBoundsEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта NativeWindowBoundsEvent.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Возвращает строку, содержащую все свойства объекта NativeWindowBoundsEvent. Строка имеет следующий формат:
    <p><codeph>[NativeWindowBoundsEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> previousDisplayState=<i>значение</i> currentDisplayState=<i>значение</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
    Задает значение свойства type для объекта события move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>move</codeph>. Это событие имеет следующие свойства:
    <adobetable class="innertable">
        
         
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Новые границы окна.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Старые границы окна.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeWindow, который только что изменил состояние. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Указывает объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; нет поведения по умолчанию для отмены.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING"><apiName>MOVING</apiName><shortdesc>
    Задает значение свойства type для объекта события moving.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moving</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>moving</codeph>. Это событие имеет следующие свойства:
    <adobetable class="innertable">
        
         
         
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Границы окна после ожидаемого изменения.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Границы окна до ожидаемого изменения.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена события предотвращает перемещение окна.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Указывает объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeWindow, который только что изменил состояние.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
    Задает значение свойства type для объекта события Resize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>Resize</codeph>. Это событие имеет следующие свойства:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Новые границы окна.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Старые границы окна.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeWindow, который только что изменил состояние. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Указывает объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; нет поведения по умолчанию для отмены.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
    Задает значение свойства type для объекта события resizing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>resizing</codeph>. Это событие имеет следующие свойства:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Границы окна после ожидаемого изменения.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Границы окна до ожидаемого изменения.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NativeWindow, который только что изменил состояние. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Указывает объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; отмена события предотвращает перемещение окна.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get"><apiName>afterBounds</apiName><shortdesc>
     Границы окна после изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     Границы окна после изменения.
       
     <p>Если событие — <codeph>moving</codeph> или <codeph>resizing</codeph>, границы еще не изменены; <codeph>afterBounds</codeph> показывает новые границы, если событие не будет отменено. Если событие — <codeph>move</codeph> или <codeph>resize</codeph>, <codeph>afterBounds</codeph> показывает новые границы.
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get"><apiName>beforeBounds</apiName><shortdesc>
     Границы окна до изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     Границы окна до изменения.  
     
     <p>Если событие — <codeph>moving</codeph> или <codeph>resizing</codeph>, границы еще не изменены; <codeph>beforeBounds</codeph> отражает текущие границы. Если событие — <codeph>move</codeph> или <codeph>resize</codeph>, <codeph>beforeBounds</codeph> показывает исходное значение.
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
Объект SystemTrayIcon отправляет события типа ScreenMouseEvent в ответ на поведение мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объект событий ScreenMouseEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект SystemTrayIcon отправляет события типа ScreenMouseEvent в ответ на поведение мыши.

<p>Объект ScreenMouseEvent расширяет класс MouseEvent, чтобы передать два дополнительных свойства (<codeph>screenX</codeph> и <codeph>screenY</codeph>), сообщающих координаты мыши относительно главного экрана рабочего стола, а не окна приложения или рабочей области.</p>
 
</apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#SystemTrayIcon"><linktext>flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown"><apiName>rightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
	Создает объект ScreenMouseEvent, содержащий местоположение мыши в системе координат экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Положение по оси Х щелчка мыши в системе координат экрана.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Положение по оси Y щелчка мыши в системе координат экрана.
	</apiDesc></apiParam><apiParam><apiItemName>screenX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Имеет значение <codeph>false</codeph>, так как экранные события мыши не имеют фазы восходящей цепочки. 
	</apiDesc></apiParam><apiParam><apiItemName>screenY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Имеет значение <codeph>false</codeph>, так как нет поведения по умолчанию для отмены.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>В Windows или Linux указывает, была ли нажата клавиша Ctrl, когда произошло это событие. В Mac указывает, была нажата клавиша Ctrl или Command.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Имеет значение <codeph>true</codeph>, чтобы показать, что была нажата клавиша Alt, когда произошло событие.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Имеет значение <codeph>true</codeph>, чтобы показать, что была нажата клавиша Shift, когда произошло событие.
	</apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Имеет значение <codeph>true</codeph>, чтобы показать, что была нажата кнопка мыши, когда произошло событие.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, была ли нажата клавиша Command (только в Mac).
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, была ли нажата клавиша Ctrl или Control.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов ScreenMouseEvent.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект ScreenMouseEvent, содержащий местоположение мыши в системе координат экрана.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта ScreenMouseEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект ScreenMouseEvent, значения свойств которого соответствуют значениям оригинала.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта ScreenMouseEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта ScreenMouseEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта ScreenMouseEvent.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта ScreenMouseEvent. Строка имеет следующий формат:
	<p><codeph>[ScreenMouseEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> status=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	Константа ScreenMouseEvent.CLICK определяет значение свойства type объекта события click.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ScreenMouseEvent.CLICK</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>click</codeph>. 
	
	<p>Данное событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Горизонтальная координата события в координатах экрана.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Вертикальная координата события в координатах экрана.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SystemTrayIcon, находящийся под указывающим устройством.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	Константа ScreenMouseEvent.MOUSE_DOWN определяет значение свойства type объекта события mouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ScreenMouseEvent.MOUSE_DOWN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>mouseDown</codeph>. 
	
	<p>Данное событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Горизонтальная координата события в координатах экрана.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Вертикальная координата события в координатах экрана.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SystemTrayIcon, находящийся под указывающим устройством.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	Константа ScreenMouseEvent.MOUSE_UP определяет значение свойства type объекта события mouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ScreenMouseEvent.MOUSE_UP</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>mouseUp</codeph>. 
	
	<p>Данное событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Горизонтальная координата события в координатах экрана.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Вертикальная координата события в координатах экрана.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SystemTrayIcon, находящийся под указывающим устройством.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	Константа ScreenMouseEvent.RIGHT_CLICK определяет значение свойства type объекта события rightClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ScreenMouseEvent.RIGHT_CLICK</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>rightClick</codeph>. 
	
	<p>Данное событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Горизонтальная координата события в координатах экрана.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Вертикальная координата события в координатах экрана.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SystemTrayIcon, находящийся под указывающим устройством.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	Константа ScreenMouseEvent.RIGHT_MOUSE_DOWN определяет значение свойства type объекта события rightMouseDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>rightMouseDown</codeph>. 
	
	<p>Данное событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Горизонтальная координата события в координатах экрана.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Вертикальная координата события в координатах экрана.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SystemTrayIcon, находящийся под указывающим устройством.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	Константа ScreenMouseEvent.RIGHT_MOUSE_UP определяет значение свойства type объекта события rightMouseUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ScreenMouseEvent.RIGHT_MOUSE_UP</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>rightMouseUp</codeph>. 
	
	<p>Данное событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, если нажата основная кнопка мыши; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> в Windows или Linux, если клавиша Ctrl активна. <codeph>true</codeph> в Mac, если клавиша Ctrl или Command активна. В противном случае <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Shift активна; иначе – <codeph>false</codeph>.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> в Mac, если клавиша Command активна; <codeph>false</codeph>, если неактивна. Всегда <codeph>false</codeph> в Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, если клавиша Ctrl или Control активна; <codeph>false</codeph>, если неактивна.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Горизонтальная координата события в координатах экрана.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Вертикальная координата события в координатах экрана.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SystemTrayIcon, находящийся под указывающим устройством.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
	Положение по оси Х щелчка мыши в системе координат экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Положение по оси Х щелчка мыши в системе координат экрана.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
	Положение по оси Y щелчка мыши в системе координат экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Положение по оси Y щелчка мыши в системе координат экрана.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
    Объект NetStream отправляет объект DRMAuthenticateEvent при попытке воспроизвести содержимое, зашифрованное с использованием управления цифровыми правами (DRM) и требующее ввода учетных данных пользователя для проверки подлинности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты Event объектов с защитой DRM.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
    Объект NetStream отправляет объект DRMAuthenticateEvent при попытке воспроизвести содержимое, зашифрованное с использованием управления цифровыми правами (DRM) и требующее ввода учетных данных пользователя для проверки подлинности. 
	<p>
	Обработчик DRMAuthenticateEvent отвечает за сбор необходимых учетных данных (имени пользователя, пароля, типа) и передачу значений методу <codeph>NetStream.setDRMAuthenticationCredentials()</codeph> для проверки подлинности. Каждое приложение AIR должно предусматривать механизм получения учетных данных пользователя. Например, приложение может открывать простой пользовательский интерфейс для ввода имени пользователя и пароля и, по необходимости, типа.  
	</p> 
	<p>
	При неудачной проверке подлинности пользователя приложение попытается проверить подлинность повторно и отправит новое событие DRMAuthenticateEvent для объекта NetStream.
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>flash.net.NetStream.setDRMAuthenticationCredentials()</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE"><linktext>DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
 	    Создает объект Event, содержащий данные о событиях проверки подлинности DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события DRMAuthenticate: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>header</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Заголовок файла с зашифрованным содержимым, передаваемый сервером.
  		</apiDesc></apiParam><apiParam><apiItemName>userPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc> Запрос имени пользователя, передаваемый сервером.
		</apiDesc></apiParam><apiParam><apiItemName>passPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Запрос пароля пользователя, передаваемый сервером.
		</apiDesc></apiParam><apiParam><apiItemName>urlPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Запрос URL-адреса для отображения, передаваемый сервером.
		</apiDesc></apiParam><apiParam><apiItemName>authenticationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Указывает, должны ли предоставленные учетные данные проверяться сервером Flash Media Rights Management Server (FMRMS) или прокси-сервером.
		</apiDesc></apiParam><apiParam><apiItemName>netstream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект NetStream, инициировавший событие.
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	    Создает объект Event, содержащий данные о событиях проверки подлинности DRM. Объекты Event передаются прослушивателям событий в качестве параметров. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone"><apiName>clone</apiName><shortdesc>
		Создает копию объекта DRMAuthenticateEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект DRMAuthenticateEvent, значения свойств которого соответствуют значениям оригинала.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Создает копию объекта DRMAuthenticateEvent и задает значение каждого свойства, совпадающее с оригиналом.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString"><apiName>toString</apiName><shortdesc>
		Возвращает строку, содержащую все свойства объекта DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта DRMAuthenticateEvent.
		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Возвращает строку, содержащую все свойства объекта DRMAuthenticateEvent. Строка имеет следующий формат: 
     	<p><codeph>[DRMAuthenticateEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> eventPhase=<i>значение</i> header=<i>значение</i> usernamePrompt=<i>значение</i> passwordPrompt=<i>значение</i> urlPrompt=<i>значение</i>] authenticationType=<i>значение</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM"><apiName>AUTHENTICATION_TYPE_DRM</apiName><shortdesc>
		Константа DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM определяет значение свойства authenticationType объекта DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drm</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Константа <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph> определяет значение свойства <codeph>authenticationType</codeph> объекта DRMAuthenticateEvent. 
		
		<p>Это событие имеет следующие свойства:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Указывает, должны ли предоставленные учетные данные проверяться сервером Flash Media Rights Management Server (FMRMS) или прокси-сервером.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>header</codeph></entry><entry>Заголовок файла с зашифрованным содержимым, передаваемый сервером.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>Объект NetStream, инициировавший событие.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Запрос пароля пользователя, передаваемый сервером.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NetStream.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Запрос URL-адреса для отображения, передаваемый сервером.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Запрос имени пользователя, передаваемый сервером.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY"><apiName>AUTHENTICATION_TYPE_PROXY</apiName><shortdesc>
		Константа DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY определяет значение свойства authenticationType объекта DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proxy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Константа <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph> определяет значение свойства <codeph>authenticationType</codeph> объекта DRMAuthenticateEvent. 
		
		<p>Это событие имеет следующие свойства:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Указывает, должны ли предоставленные учетные данные проверяться сервером Flash Media Rights Management Server (FMRMS) или прокси-сервером.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>header</codeph></entry><entry>Заголовок файла с зашифрованным содержимым, передаваемый сервером.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>Объект NetStream, инициировавший событие.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Запрос пароля пользователя, передаваемый сервером.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NetStream.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Запрос URL-адреса для отображения, передаваемый сервером.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Запрос имени пользователя, передаваемый сервером.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE"><apiName>DRM_AUTHENTICATE</apiName><shortdesc>
		Константа DRMAuthenticateEvent.DRM_AUTHENTICATE определяет значение свойства type объекта DRMAuthenticateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmAuthenticate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Константа <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> определяет значение свойства <codeph>type</codeph> объекта DRMAuthenticateEvent. 
		
		<p>Это событие имеет следующие свойства:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Указывает, должны ли предоставленные учетные данные проверяться сервером Flash Media Rights Management Server (FMRMS) или прокси-сервером.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; нет поведения по умолчанию для отмены.</entry></row><row><entry><codeph>header</codeph></entry><entry>Заголовок файла с зашифрованным содержимым, передаваемый сервером.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>Объект NetStream, инициировавший событие.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Запрос пароля пользователя, передаваемый сервером.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NetStream.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Запрос URL-адреса для отображения, передаваемый сервером.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Запрос имени пользователя, передаваемый сервером.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get"><apiName>authenticationType</apiName><shortdesc>
		Указывает, должны ли предоставленные учетные данные проверяться сервером Flash Media Rights Management Server (FMRMS) или прокси-сервером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Указывает, должны ли предоставленные учетные данные проверяться сервером Flash Media Rights Management Server (FMRMS) или прокси-сервером. Например, вариант <codeph>proxy</codeph> позволяет приложению выполнять проверку подлинности на прокси-сервере, если организация требует от пользователя выполнения этого шага перед выходом в Интернет. Если не используется анонимная проверка подлинности, то после проверки подлинности на прокси-сервере пользователю все равно нужно пройти авторизацию FMRMS, чтобы получить ваучер и воспроизвести содержимое. Метод <codeph>setDRMAuthenticationcredentials()</codeph> можно использовать во второй раз с параметром <codeph>drm</codeph> для проверки подлинности FMRMS.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get"><apiName>header</apiName><shortdesc>
		Заголовок файла с зашифрованным содержимым, передаваемый сервером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Заголовок файла с зашифрованным содержимым, передаваемый сервером. Содержит информацию о контексте зашифрованного содержимого.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get"><apiName>netstream</apiName><shortdesc>
		Объект NetStream, инициировавший событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc>
		Объект NetStream, инициировавший событие.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get"><apiName>passwordPrompt</apiName><shortdesc>
		Запрос пароля пользователя, передаваемый сервером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Запрос пароля пользователя, передаваемый сервером. Строка может содержать инструкции для типа запрашиваемого пароля.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get"><apiName>urlPrompt</apiName><shortdesc>
		Запрос строки URL-адреса, представленного сервером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Запрос строки URL-адреса, предоставленного сервером. В строке может указываться местоположение, куда будут отправлены имя пользователя и пароль.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get"><apiName>usernamePrompt</apiName><shortdesc>
		Запрос имени пользователя, передаваемый сервером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Запрос имени пользователя, передаваемый сервером. Строка может содержать инструкции для типа запрашиваемого имени пользователя. Например, поставщик содержимого может запросить в качестве имени пользователя электронный адрес.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
 Объект InteractiveObject отправляет объект ContextMenuEvent, когда пользователь открывает контекстное меню или взаимодействует с ним.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий ContextMenuEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект InteractiveObject отправляет объект ContextMenuEvent, когда пользователь открывает контекстное меню или взаимодействует с ним. Существует два типа объекта ContextMenuEvent:
 <ul>
   <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
   <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as"> В следующем примере используется класс <codeph>ContextMenuEventExample</codeph> для удаления элементов контекстного меню по умолчанию из рабочей области и добавления нового элемента меню, изменяющего свет квадрата в рабочей области. Для этого выполняются следующие задачи:
 
 <ol>
     <li>Объявляется свойство <codeph>myContextMenu</codeph>, которое затем назначается новому объекту ContextMenu, и свойство <codeph>redRectangle</codeph> (типа Sprite).</li>
     <li>Вызывается метод <codeph>removeDefaultItems()</codeph>. Этот метод удаляет все встройнные элементы контекстного меню, кроме «Печать».</li>
 
     <li>Вызывается метод <codeph>addCustomMenuItems()</codeph>. Этот метод помещает элемент меню <codeph>Противоположные цвета</codeph> в массиве <codeph>defaultItems</codeph> с помощью метода <codeph>push()</codeph> объекта Array. Добавляется прослушиватель событий <codeph>menuItemSelect</codeph> для объекта ContextMenuItem и вызывается соответствующий метод <codeph>menuItemSelectHandler()</codeph>. Этот метод печатает несколько выписок <codeph>trace()</codeph> при каждом выборе позиции «Противоположные цвета» из контекстного меню. Помимо этого, красный квадрат становится черным, а черный текст - красным.</li>
 
     <li>В конструкторе добавляется прослушиватель событий <codeph>menuSelect</codeph> и соответствующий метод <codeph>menuSelectHandler()</codeph>, который просто распечатывает три выписки <codeph>trace()</codeph> при каждом выборе элемента в контекстном меню.</li>
 
 <li>Конструктор вызывает метод <codeph>addChildren()</codeph>, который рисует красный квадрат и добавляет его в список отображения, который сразу показывает квадрат.</li>
 
     <li>В завершение, <codeph>myContextMenu</codeph> назначается контекстному меню свойства <codeph>redRectangle</codeph>, чтобы пользовательское контекстное меню отображалось, только когда указатель мыши находится над квадратом.</li>
 </ol>
<codeblock>
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.ui.xml#ContextMenu"><linktext>Класс ContextMenu</linktext></link><link href="flash.ui.xml#ContextMenuItem"><linktext>Класс ContextMenuItem</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect"><apiName>menuItemSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect"><apiName>menuSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
	Создает объект Event, содержащий данные о событиях меню.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения:
	<ul>
	    <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
	    <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
	</ul>
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>mouseTarget</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект списка отображения, который пользователь щелкает правой кнопкой мыши для отображения контекстного меню. Это может быть <codeph>contextMenuOwner</codeph> или один из его нижестоящих элементов в списке отображения.
	</apiDesc></apiParam><apiParam><apiItemName>contextMenuOwner</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект списка отображения, к которому присоединено меню. Это может быть <codeph>mouseTarget</codeph> или один из его предков в списке отображения.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов ContextMenuEvent.
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект Event, содержащий данные о событиях меню. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT"><linktext>ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта ContextMenuEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект ContextMenuEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта ContextMenuEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта ContextMenuEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта ContextMenuEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта ContextMenuEvent. Строка имеет следующий формат:
	<p><codeph>[ContextMenuEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> ... contextMenuOwner=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT"><apiName>MENU_ITEM_SELECT</apiName><shortdesc>
	Определяет значение свойства type объекта события «menuItemSelect».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuItemSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>menuItemSelect</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
		<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>Объект списка отображения, к которому присоединено меню.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>Объект списка отображения, который пользователь щелкает правой кнопкой мыши для отображения контекстного меню.</entry></row><row><entry><codeph>target</codeph></entry><entry>Выбранный объект ContextMenuItem. Свойство target не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT"><apiName>MENU_SELECT</apiName><shortdesc>
	Определяет значение свойства type объекта события menuSelect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Определяет значение свойства <codeph>type</codeph> объекта события <codeph>menuSelect</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>Объект списка отображения, к которому присоединено меню.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>Объект списка отображения, который пользователь щелкает правой кнопкой мыши для отображения контекстного меню.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект ContextMenu, который сейчас будет отображаться. Свойство target не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get"><apiName>contextMenuOwner</apiName><shortdesc>
	Объект списка отображения, к которому присоединено меню.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Объект списка отображения, к которому присоединено меню. Это может быть цель мыши (<codeph>mouseTarget</codeph>) или один из его предков в списке отображения.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get"><apiName>isMouseTargetInaccessible</apiName><shortdesc>
	 Указывает на то, было ли свойству mouseTarget присвоено значение null по соображениям безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает на то, было ли свойству <codeph>mouseTarget</codeph> присвоено значение <codeph>null</codeph> по соображениям безопасности. Если номинальным значением свойства <codeph>menuTarget</codeph> является ссылка на объект <codeph>DisplayObject</codeph> в другой изолированной программной среде, свойство <codeph>menuTarget</codeph> принимает значение <codeph>null</codeph>, пока не будут заданы двусторонние права в границах данной изолированной среды. Права задаются путем вызова метода <codeph>Security.allowDomain()</codeph> из SWF-файла или путем указания файла политики на сервере файла изображения и установки флага <codeph>LoaderContext.checkPolicyFile</codeph> при загрузке изображения.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/mouseTarget"><linktext>ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get"><apiName>mouseTarget</apiName><shortdesc>
	Объект списка отображения, который пользователь щелкает правой кнопкой мыши для отображения контекстного меню.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Объект списка отображения, который пользователь щелкает правой кнопкой мыши для отображения контекстного меню. Это может быть объект списка отображения, к которому прикреплено меню (<codeph>contextMenuOwner</codeph>), или один из его потомков в списке отображения.
	<p>Это свойство может принимать значение <codeph>null</codeph> по двум причинам: отсутствует целевой объект для мыши (например, курсор мыши находится над объектом фона) или существует целевой объект для мыши, но он находится в изолированной среде безопасности, доступ к которой запрещен. Используйте свойство <codeph>isMouseTargetInaccessible()</codeph> для определения причины.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible"><linktext>ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
 Adobe AIR отправляет объекты SQLEvent, когда успешно завершается одна из операций, выполняемая экземпляром SQLConnection или SQLStatement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Adobe AIR отправляет объекты SQLEvent, когда успешно завершается одна из операций, выполняемая экземпляром SQLConnection или SQLStatement.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
     Создает объект SQLEvent для передачи в качестве параметра прослушивателям событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события, доступный в свойстве <codeph>type</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Значение по умолчанию <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Значение по умолчанию <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Используется для создания нового объекта SQLEvent.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Создает объект SQLEvent для передачи в качестве параметра прослушивателям событий.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone"><apiName>clone</apiName><shortdesc>
	 Создает копию объекта SQLEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект SQLEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает копию объекта SQLEvent и задает значение каждого свойства, совпадающее с оригиналом.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     Константа SQLEvent.ANALYZE определяет значение свойства type объекта события analyze.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.ANALYZE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>analyze</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.analyze()</codeph>. Объект события <codeph>analyze</codeph> имеет следующие свойства:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     Константа SQLEvent.ATTACH определяет значение свойства type объекта события Attach.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.ATTACH</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>attach</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.attach()</codeph>. Объект события <codeph>attach</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     Константа SQLEvent.BEGIN определяет значение свойства type объекта события begin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.BEGIN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>begin</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.begin()</codeph>. Объект события <codeph>begin</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL"><apiName>CANCEL</apiName><shortdesc>
     Константа SQLEvent.CANCEL определяет значение свойства type объекта события cancel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.CANCEL</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>cancel</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.cancel()</codeph>. Объект события <codeph>cancel</codeph> имеет следующие свойства.
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection или SQLStatement, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     Константа SQLEvent.CLOSE определяет значение свойства type объекта события close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.CLOSE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>close</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.close()</codeph>. Объект события <codeph>close</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     Константа SQLEvent.COMMIT определяет значение свойства type объекта события commit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.COMMIT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>commit</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.commit()</codeph>. Объект события <codeph>commit</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     Константа SQLEvent.COMPACT определяет значение свойства type объекта события compact.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.COMPACT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>compact</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.compact()</codeph>. Объект события <codeph>compact</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     Константа SQLEvent.DEANALYZE определяет значение свойства type объекта события deanalyze.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.DEANALYZE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>deanalyze</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.deanalyze()</codeph>. Объект события <codeph>deanalyze</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH"><apiName>DETACH</apiName><shortdesc>
     Константа SQLEvent.DETACH определяет значение свойства type объекта события detach.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.DETACH</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>detach</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.detach()</codeph>.
     
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
     Константа SQLEvent.OPEN определяет значение свойства type объекта события open.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.OPEN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>open</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.open()</codeph> или <codeph>SQLConnection.openAsync()</codeph> Объект события <codeph>open</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     Константа SQLEvent.REENCRYPT определяет значение свойства type объекта события reencrypt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.REENCRYPT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>reencrypt</codeph>. Событие этого типа отправляется при успешном завершении вызова метода <codeph>SQLConnection.reencrypt()</codeph>. Событие <codeph>reencrypt</codeph> имеет следующие свойства:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT"><apiName>RESULT</apiName><shortdesc>
     Константа SQLEvent.RESULT определяет значение свойства type объекта события result.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>result</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.RESULT</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>result</codeph>. Отправляется, когда успешно завершается выполнение метода <codeph>SQLStatement.execute()</codeph> или <codeph>SQLStatement.next()</codeph> После отправки события <codeph>SQLEvent.RESULT</codeph> можно вызвать метод <codeph>SQLStatement.getResult()</codeph> для просмотра результатов. Объект события <codeph>result</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLStatement, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     Константа SQLEvent.ROLLBACK определяет значение свойства type объекта события rollback.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.ROLLBACK</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>rollback</codeph>. Этот тип события отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.rollback()</codeph>. Объект события <codeph>rollback</codeph> имеет следующие свойства.
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     Константа SQLEvent.SCHEMA определяет значение свойства type объекта события schema.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLEvent.SCHEMA</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>schema</codeph>. Отправляется, когда успешно завершается выполнение метода <codeph>SQLConnection.loadSchema()</codeph>. После отправки события <codeph>SQLEvent.SCHEMA</codeph> можно вызвать метод <codeph>SQLConnection.getSchemaResult()</codeph> для получения данных схемы. Объект события <codeph>schema</codeph> имеет следующие свойства:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, выполнивший операцию.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
 Объект SQLUpdateEvent отправляется объектом SQLConnection при изменении данных в любой таблице, связанной с экземпляром SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект SQLUpdateEvent отправляется объектом SQLConnection при изменении данных в любой таблице, связанной с экземпляром SQLConnection. Изменение данных может возникнуть в результате выполнения инструкции SQL <codeph>INSERT</codeph>, <codeph>UPDATE</codeph> или <codeph>DELETE</codeph>, либо напрямую, либо из-за пускового механизма, активированного выполнением инструкции.
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as"> Следующий пример иллюстрирует использование экземпляра SQLUpdateEvent при ответе на событие <codeph>update</codeph>.
<codeblock>

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete"><apiName>delete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert"><apiName>insert</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update"><apiName>update</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
     Создает новый экземпляр класса SQLUpdateEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события, доступный через свойство <codeph>type</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Значение по умолчанию <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, может ли объект Event быть отменен. Значение по умолчанию <codeph>false</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает имя таблицы, в которой изменились данные.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Уникальный идентификатор строки, которая была вставлена, удалена или обновлена.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Используется для создания нового объекта SQLUpdateEvent.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Создает новый экземпляр класса SQLUpdateEvent.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone"><apiName>clone</apiName><shortdesc>
     Создает копию объекта SQLUpdateEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект SQLUpdateEvent, значения свойств которого соответствуют значениям оригинала.
     
     </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     Создает копию объекта SQLUpdateEvent и задает значение каждого свойства, совпадающее с оригиналом.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE"><apiName>DELETE</apiName><shortdesc>
     Константа SQLUpdateEvent.DELETE определяет значение свойства type события delete для SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLUpdateEvent.DELETE</codeph> определяет значение свойства <codeph>type</codeph>события <codeph>delete</codeph> для SQLConnection. Объект события <codeph>delete</codeph> имеет следующие свойства.
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>Уникальный идентификатор строки, которая была вставлена, удалена или обновлена.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, для которого выполнялась операция.</entry></row><row><entry><codeph>table</codeph></entry><entry>Имя таблицы, в которой произошло изменение.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT"><apiName>INSERT</apiName><shortdesc>
     Константа SQLUpdateEvent.INSERT определяет значение свойства typeсобытия insert для SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insert</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Константа <codeph>SQLUpdateEvent.INSERT</codeph> определяет значение свойства <codeph>type</codeph>события <codeph>insert</codeph> для SQLConnection. Объект события <codeph>insert</codeph> имеет следующие свойства.
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>Уникальный идентификатор строки, которая была вставлена, удалена или обновлена.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, для которого выполнялась операция.</entry></row><row><entry><codeph>table</codeph></entry><entry>Имя таблицы, в которой произошло изменение.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 Константа SQLUpdateEvent.UPDATE определяет значение свойства typeсобытия update для SQLConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Константа <codeph>SQLUpdateEvent.UPDATE</codeph> определяет значение свойства <codeph>type</codeph>события <codeph>update</codeph> для SQLConnection.
	 
	 <p>Объект события <codeph>update</codeph> имеет следующие свойства.</p>
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>Уникальный идентификатор строки, которая была вставлена, удалена или обновлена.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект SQLConnection, для которого выполнялась операция.</entry></row><row><entry><codeph>table</codeph></entry><entry>Имя таблицы, в которой произошло изменение.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get"><apiName>rowID</apiName><shortdesc>
     Уникальный идентификатор строки, которая была вставлена, удалена или обновлена.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Уникальный идентификатор строки, которая была вставлена, удалена или обновлена.
	 
	 <p>Уникальный идентификатор строки в таблице, используемый для поиска в базе данных. Это значение часто генерируется базой данных.</p>
	 
	 <p>Идентификатор строки для однократного выполнения инструкции SQL <codeph>INSERT</codeph> можно получить через свойство <codeph>lastInsertRowID</codeph> объекта SQLResult, возвращенного методом <codeph>getResult()</codeph> объекта SQLStatement (когда он вызывается после отправки объектом SQLStatement события <codeph>result</codeph>).</p>
	 
	 <p>Дополнительные сведения об основных клавишах и генерируемых идентификаторах строк см. в разделах <xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref> и <xref href="../../localDatabaseSQLSupport.html#expressions">Выражения</xref> в приложении <xref href="../../localDatabaseSQLSupport.html">Поддержка SQL в локальных базах данных</xref>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get"><apiName>table</apiName><shortdesc>
     Имя таблицы, изменение данных которой вызвало отправку события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Имя таблицы, изменение данных которой вызвало отправку события.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
	AIR отправляет объект DRMErrorEvent, когда объект NetStream пытается воспроизвести файл с DRM-шифрованием и сталкивается с ошибкой, связанной с управлением цифровыми правами (DRM).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты Event объектов с защитой DRM.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	AIR отправляет объект DRMErrorEvent, когда объект NetStream пытается воспроизвести файл с DRM-шифрованием и сталкивается с ошибкой, связанной с управлением цифровыми правами (DRM). Например, объект DRMErrorEvent отправляется, когда поставщик содержимого не поддерживает приложение для просмотра или когда пользователь не может пройти авторизацию, возможно, потому что не приобрел права доступа к содержимому.
	<p>
	Если используются недействительные учетные данные пользователя, объект DRMAuthenticateEvent обрабатывает ошибку путем многократной отправки события, пока пользователь не введет правильные учетные данные или пока приложение AIR не отклонит последующие попытки. Приложение должно прослушивать все остальные события ошибок DRM, чтобы выявлять, распознавать и обрабатывать ошибки, имеющие отношения к DRM.
	</p>
	<p>
	Этот класс содержит свойства, содержащие объект, выдавший исключение, код ошибки и, если применимо, дополнительный код ошибки, а также текстовое сообщение, содержащее информацию об ошибке.
	</p> 
	
	<adobetable class="innertable">
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
 	  
 	  
 	  
 	  
 	  
	<tgroup cols="4"><thead><row><entry>Код ошибки</entry><entry>Дополнительный код ошибки</entry><entry>Сведения об ошибке</entry><entry>Описание</entry></row></thead><tbody><row>
	    <entry><codeph>3300</codeph></entry>
	    <entry><codeph><i>Код ошибки Adobe Policy Server</i></codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Приложение обнаружило недействительный ваучер, связанный с содержимым.</entry>
	  </row><row>
	    <entry><codeph>3301</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Сбой проверки подлинности пользователя.</entry>
	  </row><row>
	    <entry><codeph>3302</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Secure Sockets Layer (SSL) не поддерживается сервером Flash Media Rights Management Server (FMRMS).</entry>
	  </row><row>
	    <entry><codeph>3303</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Срок действия содержимого истек, и оно больше не доступно для просмотра.</entry>
	  </row><row>
	    <entry><codeph>3304</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Сбой авторизации пользователя. Это может произойти, даже когда пользователь прошел проверку подлинности, например, если он не приобрел права на просмотр содержимого.</entry>
	  </row><row>
	    <entry><codeph>3305</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>URL-адрес сервера</i></codeph></entry>
	    <entry>Не удается подключиться к серверу.</entry>
	  </row><row>
	    <entry><codeph>3306</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Необходимо обновить клиент; сервер Flash Media Rights Management Server требует новой версии клиента управления цифровыми правами.</entry>
	  </row><row>
	    <entry><codeph>3307</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Общая внутренняя ошибка системы управления цифровыми правами.</entry>
	  </row><row>
	    <entry><codeph>3308</codeph></entry>
	    <entry><codeph><i>Код ошибки с подробным описанием</i></codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Неверный ключ лицензии.</entry>
	  </row><row>
	    <entry><codeph>3309</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Видеосодержимое повреждено.</entry>
	  </row><row>
	    <entry><codeph>3310</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>publisherID</i>:<i>applicationID</i></codeph></entry>
	    <entry>Идентификатор просматривающего приложения не соответствует действительному идентификатору, поддерживаемому издателем содержимого. Поставщик содержимого не поддерживает приложение.</entry>
	  </row><row>
	    <entry><codeph>3311</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph>Min=x:max=y</codeph></entry>
	    <entry>Версия приложения не соответствует указанной в ваучере.</entry>
	  </row><row>
	    <entry><codeph>3312</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Сбой проверки ваучера, связанного с зашифрованным содержимым, что может свидетельствовать о повреждении содержимого.</entry>
	  </row><row>
	    <entry><codeph>3313</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Ваучер, связанный с зашифрованным содержимым не удалось сохранить в Microsafe.</entry>
	  </row><row>
	    <entry><codeph>3314</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Сбой проверки целостности заголовка FLV, что может свидетельствовать о повреждении содержимого.</entry>
	  </row><row>
	    <entry><codeph>3315</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>Нет данных</entry>
	    <entry>Удаленное воспроизведение содержимого с DRM защитой запрещено.</entry>
	  </row><row>
 	    <entry><codeph>3316</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>Нет данных</entry>
 	    <entry>Отсутствует модуль AdobeCP.</entry>
 	  </row><row>
 	    <entry><codeph>3317</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>Нет данных</entry>
 	    <entry>Ошибка загрузки модуля AdobeCP.</entry>
 	  </row><row>
 	    <entry><codeph>3318</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>Нет данных</entry>
 	    <entry>Обнаружена несовместимая версия AdobeCP.</entry>
 	  </row><row>
 	    <entry><codeph>3319</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>Нет данных</entry>
 	    <entry>Отсутствует точка входа API AdobeCP.</entry>
 	  </row><row>
 	    <entry><codeph>3320</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>Нет данных</entry>
 	    <entry>Модуль AdobeCP не прошел аутентификацию. </entry>
 	  </row></tbody></tgroup></adobetable>
 	
 	</apiDesc><example conref="examples\DRMErrorEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR"><linktext>DRMErrorEvent.DRM_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError"><apiName>drmError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
 	    Создает объект Event, содержащий данные о событиях ошибок DRM.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события DRMAuthenticate: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>inErrorDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Конкретные синтаксические сведения об ошибке, если это применимо.
  		</apiDesc></apiParam><apiParam><apiItemName>inErrorCode</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Основной код ошибки.
		</apiDesc></apiParam><apiParam><apiItemName>insubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Второстепенный идентификатор ошибки.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Создает объект Event, содержащий данные о событиях ошибок DRM. Объекты Event передаются прослушивателям событий в качестве параметров. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone"><apiName>clone</apiName><shortdesc>
		Создает копию объекта DRMErrorEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект DRMErrorEvent, значения свойств которого соответствуют значениям оригинала.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Создает копию объекта DRMErrorEvent и задает значение каждого свойства, совпадающее с оригиналом. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString"><apiName>toString</apiName><shortdesc>
		Возвращает строку, содержащую все свойства объекта DRMErrorEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта DRMErrorEvent.
  		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Возвращает строку, содержащую все свойства объекта DRMErrorEvent. Строка имеет следующий формат: 
     	<p><codeph>[DRMErrorEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> eventPhase=<i>значение</i> errroID=<i>значение</i> subErrorID=<i>значение</i> text=<i>значение</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR"><apiName>DRM_ERROR</apiName><shortdesc>
		Константа DRMErrorEvent.DRM_ERROR определяет значение свойства type для объекта события drmError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Константа <codeph>DRMErrorEvent.DRM_ERROR</codeph> определяет значение свойства <codeph>type</codeph> для объекта события <codeph>drmError</codeph>. 
		
		<p>Это событие имеет следующие свойства:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>Числовой код ошибки, присвоенный проблеме.</entry></row><row><entry><codeph>subErrorID</codeph></entry><entry>Код ошибки, содержащий более подробную информацию о возникшей проблеме.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект NetStream.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
		Идентификатор ошибки, сообщающий более подробную информацию о вызывавшей ее проблеме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		Идентификатор ошибки, сообщающий более подробную информацию о вызывавшей ее проблеме.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 Объект DRMContentData для медиафайла.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 Объект DRMContentData для медиафайла.
		 
		 <p>С помощью объекта, на который ссылается свойство <codeph>contentData</codeph>, можно получить соответствующий ваучер DRM из кэша ваучеров DRMManager. Свойства ваучера описывают лицензию, доступную для пользователя, и могут указать причину, по которой запрещен просмотр содержимого с защитой по технологии DRM.</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
Класс EventDispatcher является базовым классом для всех классов среды выполнения, отправляющих события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс EventDispatcher является базовым классом для всех <ph platform="javascript">выполняемых</ph> классов, которые отправляют события. <ph platform="actionscript">Класс EventDispatcher реализует интерфейс IEventDispatcher и является базовым классом для класса DisplayObject. Класс EventDispatcher позволяет любому объекту в списке отображения стать целью события и в этом качестве использовать методы интерфейса IEventDispatcher.</ph>

<p platform="actionscript">Цели событий являются важным компонентом модели событий во Flash<sup>®</sup> Player и Adobe<sup>®</sup> AIR<sup>®</sup> Цель события является основным фактором, определяющим прохождение потока событий по иерархии списка отображения. Когда происходит такое событие, как щелчок мыши или нажатие клавиши, Flash Player или приложение AIR отправляет объект Event в поток событий из корня списка отображения. Тогда объект события проходит путь через список отображения, пока не достигнет цели события, после чего он возвращается в начало пути. Путь к цели события и обратно разделен на три фазы: фаза захвата проходит от корня к последнему узлу перед целевым узлом события; фаза цели включает только целевой узел события; а фаза восходящей цепочки включает все последующие узлы на пути обратно к корневому узлу списка отображения.</p>

<p platform="actionscript">Как правило, чтобы дать определенному пользователем классу возможность отправлять события, проще всего расширить класс EventDispatcher. Если это невозможно (например, если класс уже расширяет другой класс), можно внедрить интерфейс IEventDispatcher, создайте элемент EventDispatcher и создайте простые процедуры для направления вызовов в собранный EventDispatcher.</p>

<p platform="javascript">Возможна регистрация функций для обработки событий во время выполнения путем вызова метода <codeph>addEventListener()</codeph> объекта, отправляющего событие.</p>

</apiDesc><example conref="examples\EventDispatcherExample.as"> В следующем примере используются классы <codeph>EventDispatcherExample</codeph> и <codeph>CustomDispatcher</codeph>, подкласс <codeph>EventDispatcher</codeph>, чтобы показать процесс создания и отправки пользовательского события. Для этого выполняются следующие задачи:
 <ol>
     <li>Конструктор <codeph>EventDispatcherExample</codeph> создает локальную переменную <codeph>dispatcher</codeph> и назначает ее новому экземпляру CustomDispatcher.</li>
     <li>Внутри <codeph>CustomDispatcher</codeph> задается строка, присваивающая событию имя <codeph>action</codeph>, и объявляется метод <codeph>doAction()</codeph>. При вызове этого метода создается событие <codeph>action</codeph> и отправляется с помощью метода <codeph>EventDispatcher.dispatchEvent()</codeph>.</li>
     <li>Затем используется свойство <codeph>dispatcher</codeph> для добавления прослушивателя события <codeph>action</codeph> и связанного метода подписчика <codeph>actionHandler()</codeph>, который при отправке события просто печатает информацию о нем.</li>
     <li>Вызывается метод <codeph>doAction()</codeph>, отправляющий событие <codeph>action</codeph>.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate"><apiName>deactivate</apiName><shortdesc>
 [многоадресное событие] Отправляется, когда проигрыватель Flash Player или приложение AIR теряет фокус системы и становится неактивным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [многоадресное событие] Отправляется, когда проигрыватель <ph platform="actionscript">Flash Player или</ph> приложение AIR теряет фокус системы и становится неактивным. Это многоадресное событие, которое отправляется всеми объектами EventDispatcher, для которых зарегистрированы прослушиватели данного события. <ph platform="actionscript">Дополнительную информацию о многоадресных событиях см. в описании класса DisplayObject.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate"><apiName>activate</apiName><shortdesc>
 [многоадресное событие] Отправляется, когда проигрыватель Flash Player или приложение AIR перемещается в фокус операционной системы и становится активным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [многоадресное событие] Отправляется, когда проигрыватель <ph platform="actionscript">Flash Player или</ph> приложение AIR перемещается в фокус операционной системы и становится активным. Это многоадресное событие, которое отправляется всеми объектами EventDispatcher, для которых зарегистрированы прослушиватели данного события. <ph platform="actionscript">Дополнительную информацию о многоадресных событиях см. в описании класса DisplayObject.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	Агрегирует экземпляр класса EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.events:IEventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Целевой объект для событий, отправляемых объекту EventDispatcher. <ph platform="actionscript">Этот параметр используется, когда экземпляр EventDispatcher агрегируется классом, внедряющим IEventDispatcher; это необходимо, чтобы содержащий его объект мог быть целью для событий. Не используйте этот параметр в простых случаях, когда класс расширяет EventDispatcher. </ph> <ph platform="javascript">Целевые объекты релевантны только в экранных объектах в содержимом SWF, в котором используется архитектура списка отображения ActionScript 3.0.</ph>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Агрегирует экземпляр класса EventDispatcher.
	
    <p>Как правило, класс EventDispatcher используется как базовый класс <ph platform="javascript"> в коде ActionScript 3.0, применяемом в содержимом SWF</ph>, что означает, что <ph platform="actionscript">большинству разработчиков</ph> <ph platform="javascript">JavaScript</ph> не требуется использовать эту функцию конструктора. <ph platform="actionscript">Однако более опытным разработчикам, внедряющим интерфейс IEventDispatcher, использовать этот конструктор необходимо. Если не удается расширить класс EventDispatcher и вместо этого приходится внедрять интерфейс IEventDispatcher, используйте этот конструктор, чтобы агрегировать экземпляр класса EventDispatcher.</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Регистрирует объект прослушивателя события на объекте EventDispatcher для получения прослушивателем уведомления о событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Заданный объект <codeph>listener</codeph> не является функцией.
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Функция прослушивателя, обрабатывающая событие. Эта функция должна принимать объект Event в качестве единственного параметра и не должна что-либо возвращать <ph platform="actionscript">, как показано в примере:</ph> <ph platform="javascript">.</ph>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>Эта функция может иметь любое имя.</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">Этот параметр применяется для отображения объектов в архитектуре списка отображения ActionScript 3.0, используемой в SWF-содержимом. </ph> <ph platform="actionscript">Определяет, работает ли прослушиватель в фазе захвата или в целевой фазе и в фазе восходящей цепочки. Если значение <codeph>useCapture</codeph> равно <codeph>true</codeph>, прослушиватель обрабатывает событие только во время фазы захвата, но не во время целевой фазы или фазы восходящей цепочки. Если значение <codeph>useCapture</codeph> равно <codeph>false</codeph>, то прослушиватель обрабатывает событие только в целевой фазе или фазе восходящей цепочки. Чтобы прослушивать событие во всех трех фазах, необходимо вызвать <codeph>addEventListener()</codeph> дважды: один раз с <codeph>useCapture</codeph> в значении <codeph>true</codeph>, а другой – с <codeph>useCapture</codeph> в значении <codeph>false</codeph>. </ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Уровень приоритета прослушивателя событий. Приоритет определяется 32-разрядным целым числом со знаком. Чем больше число, тем выше приоритет. Все прослушиватели событий с приоритетом <i>n</i> обрабатываются перед прослушивателями с приоритетом <i>n</i>-1. Прослушиватели с одинаковым приоритетом обрабатываются в порядке их добавления. Значение приоритета по умолчанию равно 0.
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, является ли ссылка на прослушивателя «сильной» или «слабой». «Сильная» ссылка (по умолчанию) предотвращает удаление прослушивателя сборщиком мусора. «Слабая» ссылка позволяет удалить прослушиватель. <p>Функции элементов уровня класса не подлежат удалению в качестве мусора, вследствие чего можно установить <codeph>useWeakReference</codeph> равным <codeph>true</codeph> для функций элементов уровня класса, не подвергая их возможности подобного удаления. Если свойству <codeph>useWeakReference</codeph> присвоить значение <codeph>true</codeph> для прослушивателя, который является вложенной внутренней функцией, то функция будет очищена и перестанет быть постоянной. При создании ссылок на внутреннюю функцию (возможно сохранение в другой переменной) она не будет собираться в качестве мусора и останется устойчивой.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Регистрирует объект прослушивателя события на объекте EventDispatcher для получения прослушивателем уведомления о событии. <ph platform="actionscript">Можно регистрировать прослушиватели событий в любом узле из списка отображения для каждого типа события, фазы и приоритета.</ph>
	
	<p platform="javascript">В коде JavaScript в среде выполнения AIR этот метод используется в целях регистрации прослушивателей событий, определенных интерфейсами AIR API. Для других событий JavaScript (таких как событие <codeph>onload</codeph> объекта <codeph>body</codeph> в модели DOM) можно использовать те же стандартные способы обработки событий, что и для содержимого в обозревателе.</p>
	
	<p>После успешной регистрации прослушивателя событий невозможно изменить его приоритет путем дополнительных вызовов <codeph>addEventListener()</codeph>. Чтобы изменить приоритет прослушивателя, необходимо сначала вызвать метод <codeph>removeListener()</codeph>. Затем можно снова зарегистрировать прослушиватель с новым приоритетом. </p>
	
	<p>Следует учесть, что после регистрации прослушивателя последующие вызовы метода <codeph>addEventListener()</codeph> с другим значением свойства <codeph>type</codeph> или <codeph>useCapture</codeph> приводят к регистрации другого прослушивателя. <ph platform="actionscript">Например, прослушиватель, изначально зарегистрированный со значением <codeph>useCapture</codeph>, равным <codeph>true</codeph>, прослушивает только во время фазы захвата. Если вызвать метод <codeph>addEventListener()</codeph> еще раз с тем же объектом прослушивателя, но со свойством <codeph>useCapture</codeph> в значении <codeph>false</codeph>, то будет два прослушивателя: один – прослушивающий в фазе захвата, а другой – в целевой фазе и фазе восходящей цепочки. </ph>
	</p>
	
	<p platform="actionscript">Невозможно зарегистрировать прослушиватель события только для целевой фазы или для фазы восходящей цепочки. Эти фазы соединены при регистрации, поскольку восходящая цепочка применяется только к предшественникам целевого узла.</p>
	
	<p>Если прослушиватель событий больше не нужен, его можно удалить, вызвав метод <codeph>removeEventListener()</codeph>, иначе могут возникнуть проблемы с памятью. Прослушиватели событий не удаляются из памяти автоматически, так как сборщик мусора не удаляет прослушиватель, пока существует объект, отправляющий соответствующее событие (если параметру <codeph>useWeakReference</codeph> не задано значение <codeph>true</codeph>).</p>
		
	<p>Копирование экземпляра EventDispatcher не приводит к копированию прослушивателей событий, присоединенных к нему. (Если для вновь создаваемого узла требуется прослушиватель событий, его необходимо присоединить после создания узла.) При этом при перемещении экземпляра EventDispatcher присоединенные к нему прослушиватели событий перемещаются вместе с ним.</p>
	
	
	<p platform="actionscript">Если прослушиватель регистрируется для узла в тот момент, когда на нем обрабатывается событие, то в текущей фазе он не запускается, однако может запуститься в следующей фазе потока события, например в фазе восходящей цепочки.</p>
	
	<p platform="actionscript">Прослушиватель событий, удаленный из узла во время обработки события на этом узле, будет запускаться текущими операциями. После удаления прослушиватель событий больше не вызывается (если не будет снова зарегистрирован для дальнейшей обработки). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Посылает событие в поток событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Достигнут предел рекурсии отправки события.
	</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>Значение <codeph>true</codeph> в случае успешной передачи события. Значение <codeph>false</codeph> указывает на ошибку или на то, что для события был вызван метод <codeph>preventDefault()</codeph>.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>Объект события, передаваемый в поток событий. Если осуществляется повторная отправка события, автоматически создается его клон. После отправки события нельзя изменить его свойство <codeph>target</codeph>, поэтому необходимо создать новую копию события, чтобы обеспечить правильное выполнение повторной отправки.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Посылает событие в поток событий. Целью события является объект EventDispatcher, для которого вызывается метод <codeph>dispatchEvent()</codeph>.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Проверяет, имеет ли объект EventDispatcher прослушиватели, зарегистрированные для определенного типа события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение <codeph>true</codeph>, если прослушиватель указанного типа зарегистрирован; в противном случае – <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Проверяет, имеет ли объект EventDispatcher прослушиватели, зарегистрированные для определенного типа события. Это позволяет определить, где объект EventDispatcher изменил обработку типа события в иерархии потока событий. Чтобы определить, запускает ли на самом деле определенный тип событий прослушиватель, используйте метод <codeph>willTrigger()</codeph>.
	
	<p>Различие между <codeph>hasEventListener()</codeph> и <codeph>willTrigger()</codeph> заключается в том, что <codeph>hasEventListener()</codeph> анализирует только объект, к которому он принадлежит, тогда как <codeph>willTrigger()</codeph> – весь поток событий для события, указанного параметром <codeph>type</codeph>. <ph platform="javascript">Поток событий применяется к списку отображения ActionScript 3.0, используемому в содержимом SWF.</ph>
	</p>
	
	<p>Когда метод <codeph>hasEventListener()</codeph> вызывается из объекта LoaderInfo, учитываются только те прослушиватели, к которым есть доступ у вызывающего объекта.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#EventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Удаляет прослушиватель из объекта EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Удаляемый объект прослушивателя.
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">Этот параметр применяется для отображения объектов в архитектуре списка отображения ActionScript 3.0, используемой в SWF-содержимом. </ph> <ph platform="actionscript">Указывает, был ли прослушиватель зарегистрирован для фазы захвата или целевой фазы и фазы восходящей цепочки. Если прослушиватель зарегистрирован и для фазы захвата, и для фаз цели и восходящей цепочки, метод <codeph>removeEventListener()</codeph> необходимо вызвать дважды: один раз с <codeph>useCapture()</codeph> в значении <codeph>true</codeph>, а другой раз с <codeph>useCapture()</codeph> в значении <codeph>false</codeph>. </ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Удаляет прослушиватель из объекта EventDispatcher. При отсутствии прослушивателя, зарегистрированного с объектом EventDispatcher, вызов этого метода не оказывает никакого воздействия.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Проверяет, зарегистрирован ли прослушиватель события для указанного типа события с данным объектом EventDispatcher или любым его предшественником.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph> при запуске прослушивателя указанного типа; в противном случае значение равно <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Проверяет, зарегистрирован ли прослушиватель события для указанного типа события с данным объектом EventDispatcher или любым его предшественником. Этот метод возвращает значение <codeph>true</codeph>, если прослушиватель события запускается в течение любой фазы потока событий, когда событие указанного типа передается объекту EventDispatcher или любому из его нижестоящих элементов.
	
	<p>Разница между методами <codeph>hasEventListener()</codeph> и <codeph>willTrigger()</codeph> заключается в том, что <codeph>hasEventListener()</codeph> просматривает только тот объект, которому принадлежит, а <codeph>willTrigger()</codeph> просматривает весь поток событий для события, указанного в параметре <codeph>type</codeph>. <ph platform="javascript">Поток событий применяется к списку отображения ActionScript 3.0, используемому в содержимом SWF.</ph></p>
	
	<p>Когда метод <codeph>willTrigger()</codeph> вызывается из объекта LoaderInfo, учитываются только те прослушиватели, к которым есть доступ у вызывающего объекта.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:EventPhase"><apiName>EventPhase</apiName><shortdesc>
 Класс EventPhase передает значения для свойства eventPhase класса Event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс EventPhase передает значения для свойства <codeph>eventPhase</codeph> класса Event.
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#Event"><linktext>Класс Event</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>Класс EventDispatcher</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
	Целевая фаза, которая является второй фазой потока событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Фаза назначения, вторая фаза потока событий.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
	Фаза восходящей цепочки, третья фаза потока событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Фаза восходящей цепочки, третья фаза потока событий.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
	Фаза захвата, первая фаза потока событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Фаза захвата, первая фаза потока событий.
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
 Объект передает объект FocusEvent, когда пользователь переносит фокус с одного объекта в списке отображения на другой объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий Focus.
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект передает объект FocusEvent, когда пользователь переносит фокус с одного объекта в списке отображения на другой объект. Существует четыре типа событий фокуса:
 <ul>
     <li><codeph>FocusEvent.FOCUS_IN</codeph></li>
     <li><codeph>FocusEvent.FOCUS_OUT</codeph></li>
     <li><codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph></li>
     <li><codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as"> В следующем примере используются классы <codeph>FocusEventExample</codeph> и <codeph>CustomSprite</codeph>, чтобы продемонстрировать, как фокус можно использовать вместе с элементами, нарисованными в рабочей области, для захвата и печати информации. Этот код выполняет следующие задачи.
 <ol>
     <li>Объявляются свойства <codeph>child</codeph> (типа Sprite) и <codeph>childCount</codeph> (типа uint).</li>
    <li>Цикл <codeph>for</codeph> создает пять голубых квадратов в точке с координатами (0,0). Сначала свойство <codeph>child</codeph> назначается новому экземпляру CustomSprite. При создании каждого объекта CustomSprite происходит следующее.
     <ul>
             <li>Свойству <codeph>size</codeph> типа uint задается значение 50 (в пикселях), а для <codeph>bgColor</codeph> задается голубой цвет. </li>
             <li>В конструкторе свойствам класса Sprite <codeph>buttonMode</codeph> и <codeph>useHandCursor</codeph> задается значение <codeph>true</codeph>.</li>
             <li>Регистрируется прослушиватель событий типа <codeph>click</codeph>вместе со связанным подписчиком <codeph>clickHandler()</codeph>. Метод подписчика создает локальную переменную <codeph>target</codeph> типа Sprite и присваивает ее полю, получившему щелчок. После этого фокус монтажного стола переводится на <codeph>target</codeph>.</li>
             <li>Вызывается метод <codeph>draw()</codeph>, создающий квадрат 50 x 50 пикселей путем вызова методов <codeph>beginFill()</codeph>, <codeph>drawRect()</codeph> и <codeph>endFill()</codeph> класса Graphics и свойств экземпляра.</li>
      </ul></li>
         <li>В цикле for вызывается метод <codeph>configureListeners()</codeph>, создающий три пары прослушивателей событий и подписчиков:
         <ul>
             <li><codeph>focusIn</codeph>/<codeph>focusInHandler()</codeph> отправляется после события <codeph>click</codeph> для любого объекта списка отображения (поля) получившего щелчок.</li>
             <li><codeph>focusOut</codeph>/<codeph>focusOutHandler()</codeph> отправляется, когда щелчок получает другое поле или когда фокус покидает монтажный стол (например, при щелчке за пределами Flash Player).</li>
             <li><codeph>keyFocusChange</codeph>/<codeph>keyFocusChangeHandler()</codeph> отправляется, если для выбора объекта списка отображения используется клавиша Tab или клавиши со стрелками влево или вправо. Однако метод <codeph>keyFocusChangeHandler()</codeph> перехватывает клавиши со стрелками влево и вправо и отключает их, вызвав метод <codeph>preventDefault()</codeph>.</li>
             
      </ul></li>
     <li>В цикле <codeph>for</codeph> каждый квадрат добавляется в список отображения и показывается с помощью метода <codeph>addChild()</codeph> (все в одной и той же области).</li>
     <li>Конструктор вызывает метод <codeph>refreshLayout()</codeph>, располагающий оранжевые квадраты по верхнему краю экрана (y = 0) на расстоянии 5 пикселов друг от друга.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn"><apiName>focusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut"><apiName>focusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange"><apiName>keyFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange"><apiName>mouseFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
    Создает объект Event со специфической информацией, имеющей отношение к событиям фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Возможные значения: <codeph>FocusEvent.FOCUS_IN</codeph>, <codeph>FocusEvent.FOCUS_OUT</codeph>, <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> и <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph>.
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Ссылка на дополняющий экземпляр InteractiveObject, на который влияет смена фокуса. Например, когда происходит событие <codeph>focusIn</codeph>, <codeph>relatedObject</codeph> представляет InteractiveObject, потерявший фокус.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, активирован ли модификатор клавиши Shift.
	</apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Значение кода клавиши, нажатой для запуска события <codeph>keyFocusChange</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>none</apiData><apiDesc>Указывает направление активации целевого интерактивного объекта. Имеет значение <codeph>FocusDirection.NONE</codeph> (по умолчанию) для всех событий, кроме <codeph>focusIn</codeph>.
    
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов FocusEvent.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Создает объект Event со специфической информацией, имеющей отношение к событиям фокуса. Объекты Event передаются прослушивателям событий в качестве параметров.
    
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта FocusEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект FocusEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта FocusEvent и задает значение каждого свойства, совпадающее с оригиналом.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта FocusEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта FocusEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта FocusEvent. Строка имеет следующий формат:
	<p><codeph>[FocusEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> relatedObject=<i>значение</i> shiftKey=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN"><apiName>FOCUS_IN</apiName><shortdesc>
	Задает значение свойства type для объекта события focusIn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusIn</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>focusIn</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; применяется только к событиям <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Дополняющий экземпляр InteractiveObject, на который влияет смена фокуса.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; применяется только к событиям <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр InteractiveObject, только что получивший фокус. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph>, чтобы обратиться к объекту в списке отображения, обрабатывающему событие в данный момент.
	</entry></row><row><entry><codeph>direction</codeph></entry><entry>Направление, по которому был получен фокус. Это свойство сообщает значение параметра <codeph>direction</codeph> метода <codeph>assignFocus()</codeph> рабочей области. Если фокус изменился другим способом, значение всегда будет <codeph>FocusDirection.NONE</codeph>. Применяется только к событиям <codeph>focusIn</codeph>. Для всех других событий фокуса значение будет <codeph>FocusDirection.NONE</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT"><apiName>FOCUS_OUT</apiName><shortdesc>
	Задает значение свойства type для объекта события focusOut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>focusOut</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; применяется только к событиям <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Дополняющий экземпляр InteractiveObject, на который влияет смена фокуса.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; применяется только к событиям <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр InteractiveObject, только что потерявший фокус. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE"><apiName>KEY_FOCUS_CHANGE</apiName><shortdesc>
	Задает значение свойства type для объекта события keyFocusChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>keyFocusChange</codeph>. 
	
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; вызовите метод <codeph>preventDefault()</codeph> для отмены поведения по умолчанию.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Значение кода клавиши, нажатой для запуска события <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Дополняющий экземпляр InteractiveObject, на который влияет смена фокуса.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, если активирована клавиша Shift; иначе — <codeph>false</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject, который в данный момент находится в фокусе. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE"><apiName>MOUSE_FOCUS_CHANGE</apiName><shortdesc>
	Задает значение свойства type для объекта события mouseFocusChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает значение свойства <codeph>type</codeph> для объекта события <codeph>mouseFocusChange</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; вызовите метод <codeph>preventDefault()</codeph> для отмены поведения по умолчанию.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; применяется только к событиям <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Дополняющий экземпляр InteractiveObject, на который влияет смена фокуса.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; применяется только к событиям <codeph>keyFocusChange</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект InteractiveObject, который в данный момент находится в фокусе. Свойство <codeph>target</codeph> не всегда является объектом из списка отображения, для которого зарегистрирован прослушиватель событий. Используйте свойство <codeph>currentTarget</codeph> для обращения к объекту в списке отображения, обрабатывающему событие в данный момент.
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get"><apiName>direction</apiName><shortdesc>
	Указывает направление фокуса для события focusIn.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Указывает направление фокуса для события <codeph>focusIn</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()"><linktext>flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 Если принимает значение true, свойство relatedObject принимает значение null по причинам, связанным с изолированными средами безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Если принимает значение <codeph>true</codeph>, свойство <codeph>relatedObject</codeph> принимает значение <codeph>null</codeph> по причинам, связанным с изолированными средами безопасности. Если номинальным значением свойства <codeph>relatedObject</codeph> является ссылка на объект DisplayObject в другой изолированной среде, свойство <codeph>relatedObject</codeph> принимает значение <codeph>null</codeph>, пока не будут заданы двусторонние права в границах данной изолированной среды. Права задаются путем вызова метода <codeph>Security.allowDomain()</codeph> из SWF-файла или указания файла политик на сервере файла изображений и задания свойства <codeph>LoaderContext.checkPolicyFile</codeph> при загрузке изображения.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/relatedObject"><linktext>FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	Значение кода клавиши, нажатой для запуска события keyFocusChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Значение кода клавиши, нажатой для запуска события <codeph>keyFocusChange</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	Ссылка на дополняющий экземпляр InteractiveObject, на который влияет смена фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Ссылка на дополняющий экземпляр InteractiveObject, на который влияет смена фокуса. Например, когда происходит событие <codeph>focusOut</codeph>, <codeph>relatedObject</codeph> представляет InteractiveObject, получивший фокус.
	<p>Это свойство может принимать значение <codeph>null</codeph> по двум причинам: связанный объект отсутствует или связанный объект существует, но находится в изолированной программной среде безопасности, доступ к которой запрещен. Используйте свойство <codeph>isRelatedObjectInaccessible()</codeph> для определения причины.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible"><linktext>FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Определяет, активирован ли модификатор клавиши Shift. Если да, то параметр имеет значение true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Определяет, активирован ли модификатор клавиши <codeph>Shift</codeph>. Если да, то параметр имеет значение true. В противном случае значение — <codeph>false</codeph>. Это свойство используется, только если FocusEvent относится к типу <codeph>keyFocusChange</codeph>.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 Объект NativeApplication приложения AIR отправляет событие browserInvoke при вызове приложения, когда SWF-файл в браузере использует функцию вызова браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Объект NativeApplication приложения AIR отправляет событие <codeph>browserInvoke</codeph> при вызове приложения, когда SWF-файл в браузере использует функцию вызова браузера. Объект NativeApplication также отправляет событие <codeph>browserInvoke</codeph>, когда пользователь инициирует функцию бесшовной установки в браузере и SWF-файл в браузере передает массив параметру <codeph>arguments</codeph> метода <codeph>launchApplication()</codeph> файла air.swf. (Подробные сведения см. в разделе «Распределение, установка и запуск приложений AIR» в руководстве по разработке AIR.)
	 
	 <p>Вызов браузера разрешается, только если приложение указывает следующие данные в файле дескриптора приложения.</p>
	 
	 <codeblock>&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 <p>Если приложение не запущено, объект NativeApplication отправляет и объект InvokeEvent и событие <codeph>browserInvoke</codeph> при запуске из браузера. А если приложение <i>уже</i> запущено, то при запуске из браузера объект NativeApplication отправляет только событие <codeph>browserInvoke</codeph>. </p>
	 
	 <p> Если приложение запущено в результате бесшовной установки из браузера (когда пользователь выбирает запуск после установки), объект NativeApplication отправляет событие BrowserInvoke, только если были переданы аргументы (SWF-файл в браузере должен передать массив параметру <codeph>arguments</codeph> метода <codeph>installApplication()</codeph> файла air.swf). Подробные сведения см. в разделе «Распределение, установка и запуск приложений AIR» в руководстве по разработке AIR.</p>
	 
	 <p>Как и события <codeph>invokeEvent</codeph>, события <codeph>browserInvokeEvent</codeph> отправляются объектом NativeApplication (<codeph>NativeApplication.nativeApplication</codeph>). Для получения событий <codeph>browserInvoke</codeph> необходимо вызвать метод <codeph>addEventListener()</codeph> объекта NativeApplication. Когда регистрируется прослушиватель события <codeph>browserInvoke</codeph>, он также получает все события <codeph>browserInvoke</codeph>, отправленные до регистрации. Эти события отправлены после возврата вызова <codeph>addEventListener()</codeph>, но не обязательно перед другими событиями <codeph>browserInvoke</codeph>, которые могут быть получены после регистрации. Это позволяет обрабатывать события <codeph>browserInvoke</codeph>, которые произошли до выполнения кода инициализации (например, если приложение было сначала вызвано из браузера). Следует учитывать, что если прослушиватель событий добавляется позже при выполнении (после инициализации приложения), он все равно получает все события <codeph>browserInvoke</codeph>, отправленные с момента запуска.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#InvokeEvent"><linktext>flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier>flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 Функция конструктора для класса BrowserInvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события, представленный в виде <codeph>Event.type</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Имеет значение <codeph>false</codeph> для объекта BrowserInvokeEvent.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Имеет значение <codeph>false</codeph> для объекта BrowserInvokeEvent.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>Массив аргументов (строк), передаваемых приложению.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>sandboxType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип изолированной программной среды для содержимого в обозревателе.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Домен защиты для содержимого в обозревателе.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isHTTPS</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Указывает, использует ли содержимое в браузере безопасный URL-адрес (HTTPS).
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isUserEvent</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Указывает, был ли вызов из браузера результатом события пользователя.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Функция конструктора для класса BrowserInvokeEvent. Как правило, разработчики не вызывают конструктор <codeph>BrowserInvokeEvent()</codeph> напрямую. Объект BrowserInvokeEvent должен создаваться только во время выполнения.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Создает новую копию данного события.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Копия события.
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Создает новую копию данного события.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE"><apiName>BROWSER_INVOKE</apiName><shortdesc>
		 Константа BrowserInvokeEvent.BROWSER_INVOKE определяет значение свойства type объекта BrowserInvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserInvoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Константа <codeph>BrowserInvokeEvent.BROWSER_INVOKE</codeph> определяет значение свойства <codeph>type</codeph> объекта BrowserInvokeEvent.
		 
		 <p>Объект BrowserInvokeEvent имеет следующие свойства.</p>
		 <adobetable class="innertable">
		    
		     
		    
		    
		    
		    
		     
		    
		     
		        
		  <tgroup cols="2"><thead><row><entry>Свойства</entry><entry>Значения</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>Массив строковых аргументов, передаваемых в ходе данного вызова.</entry></row><row><entry><codeph>sandBoxType</codeph></entry><entry>Строка, представляющая тип изолированной программной среды содержимого в браузере (<codeph>Security.APPLICATION</codeph>, <codeph>Security.LOCAL_TRUSTED</codeph>, <codeph>Security.LOCAL_WITH_FILE</codeph>, <codeph>Security.LOCAL_LOCAL_WITH_NETWORK</codeph> или <codeph>Security.REMOTE</codeph>).</entry></row><row><entry><codeph>securityDomain</codeph></entry><entry>Строка, представляющая домен защиты для содержимого в браузере (например, <codeph>www.example.com</codeph>).</entry></row><row><entry><codeph>isHTTPS</codeph></entry><entry>Указывает, использует ли содержимое в браузере URL-адрес с HTTPS (<codeph>true</codeph>) или нет (<codeph>false</codeph>)</entry></row><row><entry><codeph>isUserEvent</codeph></entry><entry>Указывает, выполнен ли вызов из обозревателя в результате события пользователя (всегда <codeph>true</codeph> в AIR 1.0).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Нет.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; нет поведения по умолчанию для отмены.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект InvokeEvent с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Всегда объект NativeApplication. 
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 Массив аргументов (строк), передаваемых приложению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Массив аргументов (строк), передаваемых приложению.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get"><apiName>isHTTPS</apiName><shortdesc>
		 Указывает, использует ли содержимое в браузере URL-адрес с HTTPS (true) или нет (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Указывает, использует ли содержимое в браузере URL-адреса с HTTPS (<codeph>true</codeph>) или нет (<codeph>false</codeph>).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get"><apiName>isUserEvent</apiName><shortdesc>
		 Указывает, выполнен ли вызов из браузера в результате события пользователя (например, щелчка мыши).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Указывает, выполнен ли вызов из браузера в результате события пользователя (например, щелчка мыши). В AIR 1.0 всегда имеет значение <codeph>true</codeph>; в AIR требуется, чтобы пользователь инициировал вызов функции вызова приложения из браузера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
		 Тип изолированной программной среды для содержимого в браузере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Тип изолированной программной среды для содержимого в браузере. Может иметь одно из следующих значений.
		 
		 <ul>
		 
		 	<li><codeph>Security.APPLICATION</codeph> — содержимое находится в изолированной программной среде безопасности приложения.</li>
		 
		 	<li><codeph>Security.LOCAL_TRUSTED</codeph> — содержимое находится в изолированной программной среде безопасности, надежной для локальной системы.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_FILE</codeph> — содержимое находится в изолированной программной среде безопасности, локальной для файловой системы.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_NETWORK</codeph> — содержимое находится в изолированной программной среде безопасности, локальной для сети.</li>
		 
		 	<li><codeph>Security.REMOTE</codeph> — содержимое находится в удаленном (сетевом) домене.</li>
		 
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get"><apiName>securityDomain</apiName><shortdesc>
		 Домен защиты для содержимого в браузере, например www.adobe.com или www.example.org.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Домен защиты для содержимого в браузере, например <codeph>www.adobe.com</codeph> или <codeph>www.example.org</codeph>. Это свойство задается только для содержимого в удаленной изолированной программной среде безопасности (для содержимого из сетевого домена), а не для содержимого в локальной среде или среде приложения.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
 Объект FileStream отправляет объекты OutputProgressEvent при выполнении незавершенных асинхронных операций записи файлов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий прогресса вывода (для асинхронных операций записи файла).
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект FileStream отправляет объекты OutputProgressEvent при выполнении незавершенных асинхронных операций записи файлов. Существует один тип события прогресса вывода: <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
    Создает объект Event, содержащий данные о событиях прогресса вывода.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Существует только один тип события ошибки: <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. 
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. 
    </apiDesc></apiParam><apiParam><apiItemName>bytesPending</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Число еще не записанных байт.
    </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Общее число байт, записанных или ожидающих записи.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов OutputProgressEvent.
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Создает объект Event, содержащий данные о событиях прогресса вывода. Объекты Event передаются прослушивателям событий в качестве параметров.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone"><apiName>clone</apiName><shortdesc>
    Создает копию объекта OutputProgressEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект OutputProgressEvent, значения свойств которого соответствуют значениям оригинала.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Создает копию объекта OutputProgressEvent и задает значение каждого свойства, совпадающее с оригиналом. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString"><apiName>toString</apiName><shortdesc>
    Возвращает строку, содержащую все свойства объекта OutputProgressEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта OutputProgressEvent.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Возвращает строку, содержащую все свойства объекта OutputProgressEvent. Строка имеет следующий формат:
    
    <p><codeph>[OutputProgressEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> eventPhase=<i>значение</i> bytesPending=<i>значение</i> bytesTotal=<i>значение</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS"><apiName>OUTPUT_PROGRESS</apiName><shortdesc>
    Задает значение свойства type для объекта события outputProgress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outputProgress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Задает значение свойства <codeph>type</codeph> для объекта события <codeph>outputProgress</codeph>.
    
    <p>Это событие имеет следующие свойства:</p>
    
    <adobetable class="innertable">
        
        
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesPending</codeph></entry><entry>Число байт, которые остается записать на момент обработки события прослушивателем.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Общее число элементов или байт, которые в итоге будут записаны в случае успешного завершения записи.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект FileStream, сообщающий сведения о прогрессе. </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get"><apiName>bytesPending</apiName><shortdesc>
    Число байт, еще не записанных на момент обработки события прослушивателем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    Число байт, еще не записанных на момент обработки события прослушивателем.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
    Общее число записанных на данный момент байт плюс число байт, ожидающих записи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    Общее число записанных на данный момент байт плюс число байт, ожидающих записи.
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
 Объект SharedObject, представляющий удаленный общий объект, отправляет объект SyncEvent при обновлении сервером этого удаленного общего объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий SyncEvent.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект SharedObject, представляющий удаленный общий объект, отправляет объект SyncEvent при обновлении сервером этого удаленного общего объекта. Существует только один тип события <codeph>sync</codeph>: <codeph>SyncEvent.SYNC</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject"><linktext>Класс SharedObject</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync"><apiName>sync</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier>flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
	 Создает объект Event, содержащий данные о событиях sync.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события sync: <codeph>SyncEvent.SYNC</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>. 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>changeList</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Массив объектов, описывающих синхронизацию с удаленным объектом SharedObject. Прослушиватели событий могут получать этот объект через свойство <codeph>changeList</codeph>.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов SyncEvent.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Создает объект Event, содержащий данные о событиях <codeph>sync</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SyncEvent/changeList"><linktext>changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone"><apiName>clone</apiName><shortdesc>
	 Создает копию объекта SyncEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект SyncEvent, значения свойств которого соответствуют значениям оригинала.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает копию объекта SyncEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString"><apiName>toString</apiName><shortdesc>
	 Возвращает строку, содержащую все свойства объекта SyncEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта SyncEvent.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Возвращает строку, содержащую все свойства объекта SyncEvent. Строка имеет следующий формат:
	 <p><codeph>[SyncEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> list=<i>значение</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC"><apiName>SYNC</apiName><shortdesc>
     Задает значение свойства type для объекта события sync.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sync</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Задает значение свойства <codeph>type</codeph> для объекта события <codeph>sync</codeph>.
	 <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>changeList</codeph></entry><entry>Массив со свойствами, описывающими его состояние</entry></row><row><entry><codeph>target</codeph></entry><entry>Экземпляр SharedObject, обновленный сервером.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get"><apiName>changeList</apiName><shortdesc>
     Массив объектов, каждый из которых содержит свойства, описывающие измененные элементы удаленного общего объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     Массив объектов, каждый из которых содержит свойства, описывающие измененные элементы удаленного общего объекта. Каждый объект имеет свойства <codeph>code</codeph>, <codeph>name</codeph> и <codeph>oldValue</codeph>. 
     <p>При первом подключении к удаленному общему объекту, постоянно находящемуся на компьютере и/или на сервере, строки всех его свойств пусты.</p><p>В противном случае, Flash устанавливает свойство <codeph>code</codeph> на<codeph>clear</codeph>, <codeph>success</codeph>, <codeph>reject</codeph>, <codeph>change</codeph> или <codeph>delete</codeph>. </p>
     <ul><li>Значение <codeph>clear</codeph> говорит о том, что либо успешно установлено подключение к удаленному общему объекту, непостоянному на сервере или в клиенте, либо что все свойства объекта удалены (например, когда копии клиента и сервера настолько не синхронизированы, что проигрыватель Flash Player повторно синхронизирует объект клиента с объектом сервера. В последнем случае отправляется событие <codeph>SyncEvent.SYNC</codeph>, и "code" имеет значение <codeph>"change"</codeph>. </li>
     <li>Значение <codeph>success</codeph> указывает на то, что клиент изменил общий объект. </li>
     <li>Значение <codeph>reject</codeph> говорит о том, что клиент безуспешно попытался изменить объект: вместо этого объект был изменен другим клиентом. </li>
     <li>Значение <codeph>change</codeph> говорит о том, что другой клиент изменил объект или что сервер выполнял повторную синхронизацию объекта. </li>
     <li>Значение <codeph>"delete"</codeph> говорит о том, что атрибут удален. </li></ul>
     <p>Свойство <codeph>name</codeph> содержит имя измененного свойства.</p>
     <p>Свойство <codeph>oldValue</codeph> содержит предыдущее значение измененного свойства. Этот параметр имеет значение <codeph>null</codeph>, за исключение случаев, когда code имеет значение <codeph>reject</codeph> или <codeph>change</codeph>.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>Класс NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>Класс NetStream</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
Объект Camera или Microphone передает объект ActivityEvent каждый раз при получении сообщения от камеры или микрофона о переходе в активное или неактивное состояние.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Объекты событий ActivityEvent.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Объект Camera или Microphone передает объект ActivityEvent каждый раз при получении сообщения от камеры или микрофона о переходе в активное или неактивное состояние. Существует только один тип события активности: <codeph>ActivityEvent.ACTIVITY</codeph>.

</apiDesc><example conref="examples\ActivityEventExample.as"> В следующем примере демонстрируется использование класса ActivityEvent путем добавления метода прослушивателя событий <codeph>activityHandler()</codeph> к микрофону и генерации текстовой информации при каждой отправке события <codeph>activity</codeph>.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity"><apiName>activity</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
	Создает объект события, содержащий информацию о событиях активности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события активности: <codeph>ActivityEvent.ACTIVITY</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. 
	</apiDesc></apiParam><apiParam><apiItemName>activating</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Показывает состояние, в которое переходит устройство: активное (<codeph>true</codeph>) или неактивное (<codeph>false</codeph>). Прослушиватели событий могут получать эту информацию через свойство <codeph>activating</codeph>.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Конструктор для объектов ActivityEvent.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Создает объект события, содержащий информацию о событиях активности. Объекты Event передаются прослушивателям событий в качестве параметров.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone"><apiName>clone</apiName><shortdesc>
	Создает копию объекта ActivityEvent и задает значение каждого свойства, совпадающее с оригиналом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый объект ActivityEvent, значения свойств которого соответствуют значениям оригинала.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Создает копию объекта ActivityEvent и задает значение каждого свойства, совпадающее с оригиналом. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString"><apiName>toString</apiName><shortdesc>
	Возвращает строку, содержащую все свойства объекта ActivityEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, содержащая все свойства объекта ActivityEvent.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Возвращает строку, содержащую все свойства объекта ActivityEvent. Используется следующий формат:
	<p><codeph>[ActivityEvent type=<i>значение</i> bubbles=<i>значение</i> cancelable=<i>значение</i> activating=<i>значение</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY"><apiName>ACTIVITY</apiName><shortdesc>
	Константа ActivityEvent.ACTIVITY определяет значение свойства type объекта события activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Константа <codeph>ActivityEvent.ACTIVITY</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>activity</codeph>. 
	<p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>activating</codeph></entry><entry><codeph>true</codeph>, если устройство активируется, или<codeph>false</codeph>, если деактивируется.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, активно обрабатывающий объект Event с помощью прослушивателя событий.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, начинающий или завершающий сеанс, например объект Camera или Microphone.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get"><apiName>activating</apiName><shortdesc>
	Показывает состояние, в которое переходит устройство: активное (true) или неактивное (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Показывает состояние, в которое переходит устройство: активное (<codeph>true</codeph>) или неактивное (<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>