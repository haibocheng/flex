<?xml version="1.0"?>
<apiPackage id="flash.text.engine"><apiName>flash.text.engine</apiName><apiDetail/><apiClassifier id="flash.text.engine:TextLine"><apiName>TextLine</apiName><shortdesc>
 Класс TextLine служит для отображения текста, добавленного в список отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObjectContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс TextLine служит для отображения текста, добавленного в список отображения.
 
 <p>Нельзя создать объект TextLine непосредственно из кода ActionScript. При вызове функции <codeph>new TextLine()</codeph>, выдается исключение. Чтобы создать объект TextLine, вызовите метод <codeph>createTextLine()</codeph> объекта TextBlock.</p>
 
 <p>Объект TextLine включает минимальную информацию, необходимую для визуализации его содержимого. Дополнительные сведения, полезные для интерактивности, можно получить с помощью методов, описывающих свойства атомов строки. Термин «атом» относится к графическим элементам и символам (включая группы объединенных символов), неделимым сущностям в строке. Важно помнить, что проигрыватель не создает и не хранит данных, требуемых для этих методов, пока они не будут вызваны. Во избежание перегрузки памяти атомарные данные следует создавать только в случае необходимости. Если больше нет необходимости в атомарных данных, вызовите метод <codeph>flushAtomData()</codeph>, чтобы сделать их доступными для сбора мусора.</p>
 
 <p>Следующие методы и свойства генерируют атомарные данные, если они не существуют.</p>
 <ul>
 <li><codeph>atomCount</codeph></li>
 <li><codeph>getAtomBidiLevel()</codeph></li>
 <li><codeph>getAtomBounds()</codeph></li>
 <li><codeph>getAtomCenter()</codeph></li>
 <li><codeph>getAtomIndexAtCharIndex()</codeph></li>
 <li><codeph>getAtomIndexAtPoint()</codeph></li>
 <li><codeph>getAtomGraphic()</codeph></li>
 <li><codeph>getAtomTextBlockBeginIndex()</codeph></li>
 <li><codeph>getAtomTextBlockEndIndex()</codeph></li>
 <li><codeph>getAtomTextRotation()</codeph></li>
 <li><codeph>getAtomWordBoundaryOnLeft()</codeph></li>
 </ul>
 
 
 <p>После завершения обычной отправки событий для строки текста, если она действительна, ее события зеркально отображаются в отправителях событий, заданных в свойствах <codeph>eventMirror</codeph> объектов элементов содержимого, которые передаются текстовой строке. Эти объекты записываются в свойстве <codeph>TextLine.mirrorRegions</codeph>. События не зеркалируются, если распространение событий завершилось ошибкой или остановлено, или если строка недействительна.</p>
 
 <p>Зеркалирование событий мыши является особым случаем. Поскольку зеркальные области в действительности не являются экранными объекты, для них имитируются события <codeph>mouseOver</codeph> и <codeph>mouseOut</codeph>. События <codeph>rollOver</codeph> и <codeph>rollOut</codeph> не имитируются. Все естественным образом возникающие события <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph> и <codeph>rollOut</codeph> (в отношении текстовой строки или нижестоящего элемента текстовой строки) игнорируются – их зеркалирование не выполняется.</p>
 
 <p>Исходной точкой объекта текстовой строки является начало базовой линии. Если не задать положение по вертикали (свойство <codeph>y</codeph>) для строки, содержащей латинский текст на базовой линии прямого шрифта, только подстрочные элементы литер появляются под верхним краем объекта Sprite, в который добавляется текстовая строка. См. следующий рисунок.</p>
 
 <p><adobeimage alt="Базовые линии текста" href="../../../images/TextLine.gif"/></p>
 
 <p>Класс TextLine имеет несколько предков: классы DisplayObjectContainer, InteractiveObject, DisplayObject и EventDispatcher, – от которых он наследует свойства и методы. Следующие унаследованные свойства не применимы к объектам TextLine: </p>
 
 <ul>
 <li><codeph>contextMenu</codeph></li>
 <li><codeph>focusRect</codeph></li>
 <li><codeph>tabChildren</codeph></li>
 <li><codeph>tabEnabled</codeph></li>
 <li><codeph>tabIndex</codeph></li>
 <li><codeph>transform</codeph></li>
 </ul>
 
 <p>При попытке задать эти свойства текстовый процессор выдает ошибку: IllegalOperationError. Эти свойства можно считывать, но они всегда содержат значения по умолчанию.</p>
 
 </apiDesc><example conref="examples\TextLineExample.as"> В примере показаны разные текстовые строки и шаги по атомам в текстовом блоке с использованием для обрамления каждого из них <codeph>getAtomBounds()</codeph>.
    <ol>
        <li>Добавьте компонент NumericStepper в библиотеку.</li>
         <li>Сохраните этот код под именем TextLineExample.as в том же каталоге, где и FLA-файл.</li>
        <li>В окне «Свойства» FLA-файла задайте класс TextLineExample.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.FontPosture;
    import flash.text.engine.FontWeight;
    import fl.controls.NumericStepper;
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public class TextLineExample extends Sprite {
        
        private var atomStepper:NumericStepper = new NumericStepper();
        private var atomDataContainer:Sprite;
        private var fontDescriptionItalic:FontDescription = new FontDescription("Arial", FontWeight.NORMAL, FontPosture.ITALIC);
        private var fontDescriptionNormal:FontDescription = new FontDescription("Arial", FontWeight.NORMAL , FontPosture.NORMAL);
        private var textBlock:TextBlock = new TextBlock();
        private var textLine:TextLine;
        
        public function TextLineExample():void {
            
            var myText:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. From the text block, " +
            "the createTextLine() method created these lines, 300 pixels wide, "  +
            "for display." ;
            
            atomStepper.minimum = 0;
            atomStepper.value = 0;
            atomStepper.width = 50;
            addChild(atomStepper);
            atomStepper.x = 20;
            atomStepper.y = 120;
            atomStepper.addEventListener(Event.CHANGE, nsChange);
            
            var directions:String = "Click up / down arrows to frame atoms in text block above.";
            
            var formatItalic:ElementFormat = new ElementFormat(fontDescriptionItalic);
            formatItalic.fontSize = 12;
            var textElement1:TextElement = new TextElement(directions, formatItalic);
            textBlock.content = textElement1;
            createLines(textBlock, 15, 160, 400, this);
            
            var formatNormal:ElementFormat = new ElementFormat(fontDescriptionNormal);
            formatNormal.fontSize = 16;
            var textElement2:TextElement = new TextElement(myText, formatNormal);
            textBlock.content = textElement2;
            createLines(textBlock, 15.0, 20.0, 300, this);
            textLine = textBlock.firstLine;
            atomStepper.maximum = textLine.atomCount - 1;
            showAtom(textLine, 0);
        }
            
        private function nsChange(event:Event):void
        {
            removeAtom(textLine);
            if (atomStepper.value == textLine.atomCount - 1)
            {
                if(textLine != textBlock.lastLine)
                {
                    textLine = textLine.nextLine;
                    atomStepper.maximum = textLine.atomCount - 1;
                    atomStepper.value = 0;
                }
            }
            showAtom(textLine, atomStepper.value);
        }
            
        private function createLines(textBlock, startX, startY, width, container)
        {
            var textLine:TextLine = textBlock.createTextLine (null, width);
            while (textLine)
            {
                textLine.x = startX;
                textLine.y = startY;
                startY += textLine.height + 2;
                container.addChild(textLine);
                textLine = textBlock.createTextLine (textLine, width);
            }
        }
            
        private function showAtom(textLine, i):void
        {
            var box:Sprite = new Sprite();
            var mcGraphics = box.graphics;
            var bounds:Rectangle = textLine.getAtomBounds(i);
            mcGraphics.lineStyle(1, 0xFF0000, 1.0);
            mcGraphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
            textLine.userData = textLine.addChild(box);
            displayAtomData(textLine,i);
        }
            
        private function displayAtomData(textLine, i)
        {
            if(atomDataContainer != null)
                removeChild(atomDataContainer);
            atomDataContainer=new Sprite();
            var format = new ElementFormat(fontDescriptionNormal);
            format.color = 0x00000FF;
            var n:int = 0;
            var nxtY:Number = 0;
            var atomInfo:String = "value of getAtomBidiLevel() is: " + textLine.getAtomBidiLevel(i)+"\n"
            +"value of getAtomCenter() is: " + textLine.getAtomCenter(i)+"\n"
            +"value of getAtomIndexAtCharIndex() is: " + textLine.getAtomIndexAtCharIndex(i)+"\n"
            +"value of getAtomTextBlockBeginIndex() is: " + textLine.getAtomTextBlockBeginIndex(i)+"\n"
            +"value of getAtomTextBlockEndIndex() is: " + textLine.getAtomTextBlockEndIndex(i)+"\n"
            +"value of getAtomTextRotation() is: " + textLine.getAtomTextRotation(i)+"\n";
            var atomtextBlock:TextBlock = new TextBlock();
            var textElement3:TextElement = new TextElement(atomInfo, format);
            atomtextBlock.content = textElement3;
            createLines(atomtextBlock,20,200,500, atomDataContainer)
            addChild(atomDataContainer);
        }
            
        private function removeAtom(textLine):void
        {
            textLine.removeChild(textLine.userData);
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links><apiOperation id="flash.text.engine:TextLine:dump"><apiName>dump</apiName><shortdesc>
	 Выдает базовое содержимое TextLine в виде строки XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Выдает базовое содержимое TextLine в виде строки XML. Это может пригодиться при автоматическом тестировании, т.к. включает сведения о тексте, формате и визуализации. Опция доступна только в отладчике Flash Player.
	 
	 <p>Для описания выхода см. метод TextBlock.dump().</p>
	 
	 <p><b>Примечание.</b> Содержимое и формат выхода этого метода могут в будущем измениться. Adobe не гарантирует обратной совместимости данного метода.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/dump()"><linktext>TextBlock.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:flushAtomData"><apiName>flushAtomData</apiName><shortdesc>
	 Освобождает атомные данные строки для удаления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Освобождает атомные данные строки для удаления. Термин <i>«атом»</i> относится к неделимым сущностям в строке. Текстовый процессор создает атомарные данные при обращении к свойству <codeph>atomCount</codeph> или при вызове одного из методов, получающих сведения об атоме.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>atomCount</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBidiLevel()"><linktext>getAtomBidiLevel()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBounds()"><linktext>getAtomBounds()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomCenter()"><linktext>getAtomCenter()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomGraphic()"><linktext>getAtomGraphic()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtCharIndex()"><linktext>getAtomIndexAtCharIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtPoint()"><linktext>getAtomIndexAtPoint()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockBeginIndex()"><linktext>getAtomTextBlockBeginIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockEndIndex()"><linktext>getAtomTextBlockEndIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>getAtomTextRotation()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomWordBoundaryOnLeft()"><linktext>getAtomWordBoundaryOnLeft()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBidiLevel"><apiName>getAtomBidiLevel</apiName><shortdesc>
	 Определяет двусторонний уровень атома по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки – <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Двунаправленный уровень атома по индексу <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет двусторонний уровень атома по заданному индексу. Определяется комбинацией <codeph>TextBlock.bidiLevel</codeph> и двунаправленных свойств Юникод для символов, образующих строку.
	 
	 <p>Например, если текстовый блок начинается с текста на иврите, необходимо задать для <codeph>TextBlock.bidiLevel</codeph> значение 1, установив по умолчанию направление справа налево. Если в тексте имеется цитата на английском (слева направо), для этого текста <codeph>AtomBidiLevel</codeph> имеет значение 2. Если в английском тексте включен фрагмент на арабском (справа налево), то для него <codeph>AtomBidiLevel</codeph> имеет значение 3. Если в арабском фрагменте встречается число (слева направо), <codeph>AtomBidiLevel</codeph> для числа имеет значение 4. Не имеет значения, в какой строке оказываются атомы. Атомы иврита имеют <codeph>AtomBidiLevel</codeph> 1, атомы английского – <codeph>AtomBidiLevel</codeph> 2, атомы арабского – <codeph>AtomBidiLevel</codeph> 3, а атомы чисел – <codeph>AtomBidiLevel</codeph> 4.</p>
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>TextBlock.bidiLevel</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBounds"><apiName>getAtomBounds</apiName><shortdesc>
	 Определяет границы атома по указанному индексу, связанному с текстовой строкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки – <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Границы атома по индексу <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет границы атома по указанному индексу, связанному с текстовой строкой. Границы заданного атома состоят из положения по горизонтали (<codeph>x</codeph>) в строке, положения по вертикали (<codeph>y</codeph>) в строке, ширины (<codeph>w</codeph>) и высоты (<codeph>h</codeph>). Все значения в пикселях. 
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomCenter"><apiName>getAtomCenter</apiName><shortdesc>
	 Определяет центр атома, согласно изменениями, вдоль опорной линии по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Центр атома по индексу <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет центр атома, согласно изменениями, вдоль опорной линии по заданному индексу.
	 
	 <p>В результате вызова этого метода проигрыватель создает атомные данные, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomGraphic"><apiName>getAtomGraphic</apiName><shortdesc>
	 Определяет график атома по заданному индексу или null, если атом является символом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>График атома по индексу <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет график атома по заданному индексу или <codeph>null</codeph>, если атом является символом.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtCharIndex"><apiName>getAtomIndexAtCharIndex</apiName><shortdesc>
	 Возвращает индекс атома, содержащего символ, заданный параметром charIndex или -1, если символ не входит ни в один атом в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс атома, содержащего символ по индексу <codeph>charIndex</codeph>. Возвращает -1, если символ не входит ни в один атом строки.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса для символа (например, первый символ – 0, второй символ – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает индекс атома, содержащего символ, заданный параметром <codeph>charIndex</codeph> или -1, если символ не входит ни в один атом в строке. Параметр <codeph>charIndex</codeph> относится ко всему содержимому текстового блока, в который входит строка.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtPoint"><apiName>getAtomIndexAtPoint</apiName><shortdesc>
	 Возвращает индекс атома в точке, заданной параметрами x и y или -1, если в этой точке нет атома.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс атома под точкой. Возвращает -1, если точка не переходит ни один из атомов.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>stageX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Глобальная координата <i>x</i> тестируемой точки.
	 </apiDesc></apiParam><apiParam><apiItemName>stageY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Глобальная координата <i>y</i> тестируемой точки.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает индекс атома в точке, заданной параметрами <codeph>x</codeph> и <codeph>y</codeph> или -1, если в этой точке нет атома.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 <p>Этот метод получает глобальные координаты, чтобы его можно было легко использовать со свойствами <codeph>MouseEvent.stageX</codeph> и <codeph>MouseEvent.stageY</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockBeginIndex"><apiName>getAtomTextBlockBeginIndex</apiName><shortdesc>
	 Определяет индекс начала текстового блока атома по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс начала текстового блока атома <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет индекс начала текстового блока атома по заданному индексу.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockEndIndex"><apiName>getAtomTextBlockEndIndex</apiName><shortdesc>
	 Определяет индекс конца текстового блока атома по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс конца текстового блока атома <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет индекс конца текстового блока атома по заданному индексу.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextRotation"><apiName>getAtomTextRotation</apiName><shortdesc>
	 Определяет вращение атома по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Вращение атома по индексу <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Определяет вращение атома по заданному индексу. Для этого свойства используются константы TextRotation. Поворот атома является суммой поворотов элемента и строки. Основным назначением является настройка ориентации каретки (курсора) при взаимодействии с объектом TextLine.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomWordBoundaryOnLeft"><apiName>getAtomWordBoundaryOnLeft</apiName><shortdesc>
	 Указывает, лежит ли граница слова слева от атома по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс атома лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Логическое значение, указывающее, находится ли граница слова слева от атома в <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса атома (например, первый атом имеет индекс 0, второй – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Указывает, лежит ли граница слова слева от атома по заданному индексу. Границы слова определяются на основе свойств Unicode символов, переданных строке.
	 
	 <p>В результате вызова этого метода проигрыватель создает данные атома, если их еще не существует.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getBaselinePosition"><apiName>getBaselinePosition</apiName><shortdesc>
	 Получает положение заданной базовой линии относительно TextBlock.baselineZero.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Заданный языковой стандарт <codeph>baseline</codeph> не является элементом <codeph>TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Положение заданной базовой линии относительно <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Базовая линия, относительно которой задано положение. Используйте значения <codeph>TextBaseline</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Получает положение заданной базовой линии относительно <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getMirrorRegion"><apiName>getMirrorRegion</apiName><shortdesc>
	 Возвращает первый TextLineMirrorRegion в строке, чье свойство mirror совпадает с параметром mirror или null, если нет совпадений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Первый <codeph>TextLineMirrorRegion</codeph> в строке, чье свойство <codeph>mirror</codeph> совпадает с заданным значением или <codeph>null</codeph>, если нет совпадений.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLineMirrorRegion</apiOperationClassifier></apiReturn><apiParam><apiItemName>mirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiDesc>Зеркальный объект <codeph>EventDispatcher</codeph> для поиска.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает первый <codeph>TextLineMirrorRegion</codeph> в строке, чье свойство <codeph>mirror</codeph> совпадает с параметром <codeph>mirror</codeph> или <codeph>null</codeph>, если нет совпадений.
	 <p>Даже один <codeph>TextElement</codeph> может произвести несколько объектов <codeph>TextLineMirrorRegion</codeph> на одной или более строках в зависимости от уровня двунаправленности и разрывов строк. Свойства <codeph>nextRegion</codeph> и <codeph>previousRegion</codeph> связывают все зеркальные области, генерируемые одним элементом текста.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextLine:MAX_LINE_WIDTH"><apiName>MAX_LINE_WIDTH</apiName><shortdesc> 
	Максимальная запрашиваемая ширина строки текста в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000000</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	Максимальная запрашиваемая ширина строки текста в пикселях. Метод <codeph>TextBlock.createTextLine()</codeph> использует эту константу в качестве значения по умолчанию для параметра <codeph>width</codeph>, если не задано другое значение.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:userData"><apiName>userData</apiName><shortdesc>
	 Дает возможность автору связать произвольные данные с текстовой строкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Дает возможность автору связать произвольные данные с текстовой строкой. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:ascent:get"><apiName>ascent</apiName><shortdesc>
	 Указывает число пикселей от базовой линии до верхней точки самых высоких символов в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает число пикселей от базовой линии до верхней точки самых высоких символов в строке. Для объекта TextLine, содержащего только графический элемент, <codeph>ascent</codeph> имеет значение 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:atomCount:get"><apiName>atomCount</apiName><shortdesc>
	 Число атомов в строке, которое представляет число невидимых элементов, включая пробелы и графические элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc><codeph>validity</codeph> строки является <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Число атомов в строке, которое представляет число невидимых элементов, включая пробелы и графические элементы.
	 
	 <p>В результате обращения к этому свойству проигрыватель создает атомарные данные, если их еще не существует.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:descent:get"><apiName>descent</apiName><shortdesc>
	 Указывает число пикселей от базовой линии до нижней точки символов с самыми низким выносным элементом в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает число пикселей от базовой линии до нижней точки символов с самыми низким выносным элементом в строке. Для объекта TextLine, содержащего только графический элемент, <codeph>descent</codeph> имеет значение 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:hasGraphicElement:get"><apiName>hasGraphicElement</apiName><shortdesc>
	 Указывает, содержит ли текстовая строка графические элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает, содержит ли текстовая строка графические элементы.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:mirrorRegions:get"><apiName>mirrorRegions</apiName><shortdesc>
	 Объект Vector содержащий объекты TextLineMirrorRegion, связанные со строкой, или null, если таких не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flash.text.engine:TextLineMirrorRegion"/></apiValueDef><apiDesc>
	 Объект Vector содержащий объекты <codeph>TextLineMirrorRegion</codeph>, связанные со строкой, или <codeph>null</codeph>, если таких не существует.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:nextLine:get"><apiName>nextLine</apiName><shortdesc>
	 Следующий объект TextLine в TextBlock или null, если текущая строка является последней в блоке или если строка имеет validity TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Следующий объект TextLine в TextBlock или <codeph>null</codeph>, если текущая строка является последней в блоке или если строка имеет действительность <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/previousLine"><linktext>previousLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:previousLine:get"><apiName>previousLine</apiName><shortdesc>
	 Предыдущий объект TextLine в TextBlock или null, если текущая строка является первой в блоке или если строка имеет действительность TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Предыдущий объект TextLine в TextBlock или <codeph>null</codeph>, если текущая строка является первой в блоке или если строка имеет действительность <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/nextLine"><linktext>nextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:rawTextLength:get"><apiName>rawTextLength</apiName><shortdesc>
	 Длина необработанного текста в блоке, который стал строкой, включая символы U+FDEF, представляющие графические элементы и концевые пробелы, которые являются частью строки, но не отображаются.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Длина необработанного текста в блоке, который стал строкой, включая символы U+FDEF, представляющие графические элементы и концевые пробелы, которые являются частью строки, но не отображаются.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement/rawText"><linktext>TextElement.rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:specifiedWidth:get"><apiName>specifiedWidth</apiName><shortdesc>
	 Ширина, переданная методу TextBlock.createTextLine() при создании строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Ширина, переданная методу <codeph>TextBlock.createTextLine()</codeph> при создании строки. Это значение помогает определить, требует ли внесенное изменения повторной разбивки строки.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link><link href="flash.text.engine.xml#TextLine/unjustifiedTextWidth"><linktext>unjustifiedTextWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 Объект TextBlock, содержащий эту текстовую строку или null, если она имеет действительность TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 Объект TextBlock, содержащий эту текстовую строку или null, если она имеет действительность <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 Индекс первого символа в строка в необработанном тексте блока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Индекс первого символа в строка в необработанном тексте блока.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 Логическая высота текстовой строки, равная сумме значений ascent и descent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Логическая высота текстовой строки, равная сумме значений <codeph>ascent</codeph> и <codeph>descent</codeph>. Чтобы получить фактическую высоту, используйте унаследованное свойство <codeph>height</codeph>.
	 
	 <p>Это значение рассчитывается по разнице между базовыми строками, окружающими строку, – идеографическими верхней и нижней, либо надстрочной и подстрочной в зависимости от того, является TextBlock.baselineZero идеографическим или нет. Графические элементы на учитываются при расчете этих базовых строк.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/height"><linktext>flash.display.DisplayObject.height</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 Логическая ширина текстовой строки, то есть ширина, используемая текстовым процессором для раскладки строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Логическая ширина текстовой строки, то есть ширина, используемая текстовым процессором для раскладки строки. Используйте унаследованное свойство <codeph>width</codeph>, чтобы получить фактическую ширину ограничительного прямоугольника всех нарисованных пикселей.
	 
	 </apiDesc><example conref="examples\TextLine_textWidthExample.as"> В данном примере отображается строка один раз в обычном начертании и один раз в курсивном, и для каждого случая отслеживаются значения свойств <codeph>specifiedWidth</codeph>, <codeph>textWidth</codeph> и <codeph>width</codeph>. Получены следующие результаты отслеживания: 
 <ul>
         <li>specifiedWidth: 500</li>
      <li>textWidth: 268.9921875</li>
      <li>width: 269</li>
      <li>specifiedWidth: 500</li>
      <li>textWidth: 267,52734375</li>
      <li>width: 267,55</li>
 </ul>
<codeblock>
 
package {
import flash.display.Sprite;
import flash.text.engine.TextBlock;
import flash.text.engine.TextElement;
import flash.text.engine.TextLine;
import flash.text.engine.FontDescription;
import flash.text.engine.ElementFormat;
import flash.text.engine.FontPosture;

    public class TextLine_textWidthExample extends Sprite {
        
        public function TextLine_textWidthExample() {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
            var yPos:Number = 20;
            var fontDescription:FontDescription = new FontDescription();
            var textBlock:TextBlock = new TextBlock();
            fontDescription.fontPosture = FontPosture.NORMAL;
            var format:ElementFormat = new ElementFormat(fontDescription, 12);
            var textElement:TextElement = new TextElement(str, format);
            textBlock.content = textElement;
            createLine(textBlock, yPos);
            var fontDescriptionItalic = fontDescription.clone();
            fontDescriptionItalic.fontPosture = FontPosture.ITALIC;
            var formatItalic = new ElementFormat(fontDescriptionItalic, 12);
            textElement = new TextElement(str, formatItalic);
            textBlock.content = textElement;
            createLine(textBlock, yPos + 20);
        }

        private function createLine(textBlock:TextBlock, yPos:Number):void {
            var textLine:TextLine = textBlock.createTextLine (null, 500);
            trace("specifiedWidth is: " + textLine.specifiedWidth);
            trace("textWidth is: " + textLine.textWidth);
            trace("width is: " + textLine.width);
            addChild(textLine);
            textLine.x = 15;
            textLine.y = yPos;     
        }
    }
}

</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/specifiedWidth"><linktext>specifiedWidth</linktext></link><link href="flash.display.xml#DisplayObject/width"><linktext>flash.display.DisplayObject.width</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc>
	 Ширина строки, если она не выровнена.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Ширина строки, если она не выровнена. Для невыровненного текста это значение совпадает с <codeph>textWidth</codeph>. Для выровненного текста это значение представляет длину, которую бы строка имела без выравнивания, а <codeph>textWidth</codeph> представляет фактическую ширину строки. Например, когда следующая строка выравнивается и передается методу <codeph>TextBlock.createTextLine()</codeph> с шириной 500, ее фактическая ширина составляет 500, а ширина без выравнивания – 268,9921875.
	 
	 </apiDesc><example>Когда строка в следующем примере выравнивается и передается методу TextBlock.createTextLine() с шириной 500, ее фактическая ширина составляет 500, а ширина без выравнивания – 268,9921875.
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import flash.text.engine.TextBlock;
	 import flash.text.engine.TextElement;
	 import flash.text.engine.TextLine;
	 import flash.text.engine.FontDescription;
	 import flash.text.engine.ElementFormat;
	 import flash.text.engine.SpaceJustifier;
	 import flash.text.engine.LineJustification;

	 var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
	 var fontDescription:FontDescription = new FontDescription();
	 var textBlock:TextBlock = new TextBlock();
	 var format:ElementFormat = new ElementFormat(fontDescription, 12);
	 var textElement:TextElement = new TextElement(str, format);
	 textBlock.content = textElement;
	 var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_INCLUDING_LAST);
	 textBlock.textJustifier = spaceJustifier;
	 var textLine:TextLine = textBlock.createTextLine(null, 500);
	 textLine.y = 20;

	 addChild(textLine);
	 trace("textWidth value is: " + textLine.textWidth);		// 500.00244140625
	 trace("unjustifiedTextWidth is: " + textLine.unjustifiedTextWidth); // 268.9921875
	 </codeblock>
	 
	 </example></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextLine/specifiedTextWidth"><linktext>specifiedTextWidth</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:validity:get"><apiName>validity</apiName><shortdesc>
	 Указывает текущую валидность текстовой строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если текущее значение является <codeph>TextLineValidity.STATIC</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если текущее значение является <codeph>TextLineValidity.INVALID</codeph>, а новое значение не является <codeph>TextValidity.STATIC</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если текущее значение является <codeph>TextLineValidity.POSSIBLY_INVALID</codeph>, а новое значение является <codeph>TextLineValidity.VALID</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если новое значение является <codeph>TextLineValidity.POSSIBLY_INVALID</codeph>.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Указывает текущую действительность текстовой строки. Системные значения для этого свойства находятся в элементах класса <codeph>TextLineValidity</codeph>. Это свойство должно задаваться по следующим правилам.
	 
	 <p>Строке присваивается значение USER_INVALID, если действительность имеет строковое значение, не являющееся элементом класса <codeph>TextLineValidity</codeph>. USER_INVALID – это абстракция, используемая здесь для представления подобных значений.</p>
	 
	 <p>При изменении содержимого объекта TextBlock код проигрывателя помечает затронутые текстовые строки, а также предшествующую и следующую строки как INVALID. Предшествующая строка должна помечаться как недействительная, когда изменение позволяет ей включить в себя часть содержимого, которая раньше находилась в первой затронутой строке.</p>
	 
	 <p>Вновь разбитые строки всегда помечаются как VALID. Проигрыватель может изменять следующие строки с VALID на POSSIBLY_INVALID или INVALID. Он может менять строки с POSSIBLY_INVALID на VALID, если разрывы строк совпадают, или на INVALID, если нет.</p>
	 
	 <p>Код пользователя может изменить строки с VALID на INVALID или USER_INVALID, а также с USER_INVALID на VALID. Код пользователя не может помечать строки как POSSIBLY_INVALID.</p>
	 
	 <p>Код пользователя может пометить любую строку как STATIC. В результате этого элемент <codeph>block</codeph> получает значение <codeph>null</codeph>. Он также создает атомарные данные строки и предотвращает ее повторное создание. Все графические элементы в текстовой строке с пометкой STATIC удаляются, и для них восстанавливаются вышестоящие отношения, если они являются частью новой текстовой строки, оторванной от текстового блока, к которому сначала принадлежала исходная строка STATIC.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabStop"><apiName>TabStop</apiName><shortdesc>
 Класс TabStop представляет свойства позиции табуляции в текстовом блоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс TabStop представляет свойства позиции табуляции в текстовом блоке. Позиции табуляции назначаются в виде Vector объектов TabStop свойству <codeph>TextBlock.tabStops</codeph>.
 
 <p>Если определить свойства объекта TabStop после его применения к TextBlock, объект TextBlock не становится недействительным.</p>
 
 </apiDesc><example conref="examples\TabStopExample.as"> В данном примере иллюстрируются четыре параметра выравнивания позиции табуляции – START, CENTER, DECIMAL и END.
<codeblock>
package {
    
    import flash.text.engine.*;
    import flash.display.Sprite;
    
    public class TabStopExample extends Sprite {
        
        public function TabStopExample():void {
            var container:Sprite = new Sprite(); 
            
            var english:ElementFormat = new ElementFormat(); 
            english.fontDescription = new FontDescription("Arial"); 
            english.fontSize = 16;
            english.locale = "en"; 
            
            var tabStops:Vector.&lt;TabStop> = new Vector.&lt;TabStop>();    
            tabStops.push(
                new TabStop(TabAlignment.START, 20),
                new TabStop(TabAlignment.CENTER, 120),
                new TabStop(TabAlignment.DECIMAL, 220, "."),
                new TabStop(TabAlignment.END, 320)
            ); 
    
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(
                "\tstart\tcenter\tdeci.mal\tend\n" +        
                "\tl\tl\t3.4\tl\n" +
                "\tlm\tlm\t234.56\tlm\n" +
                "\tlmn\tlmn\t12345678.34567\tlmn\n"
                , english); 
            textBlock.tabStops = tabStops;
            var y:Number = 60;
            var previousTextLine:TextLine = null; 
            var textLine:TextLine;
            var i:int;
            var tabOrigin:Number = 100;
            for (i = 0; i &lt; 4; i++) {
                textLine = textBlock.createTextLine(previousTextLine, 1000, 0); 
                textLine.x = 20;
                textLine.y = y; 
                
                container.addChild(textLine);     
                
                y += 25; 
                previousTextLine = textLine; 
            }
            addChild(container);        
        }
    }
}

</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>TextBlock.tabStops</linktext></link><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links><apiConstructor id="flash.text.engine:TabStop:TabStop"><apiName>TabStop</apiName><shortdesc>
	 Создает новый ограничитель TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Заданная локаль <codeph>alignment</codeph> не является членом <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>alignment</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>start</apiData><apiDesc>Выравнивание табуляции для этого отступа. Действительные значения для этого свойства находятся в членах класса <codeph>TabAlignment</codeph>. Значение по умолчанию равно <codeph>TabAlignment.START</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Положение отступа в пикселях. По умолчанию используется значение <codeph>0.0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>decimalAlignmentToken</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Выравнивание, которое используется, если <codeph>alignment</codeph> равно <codeph>TabAlignment.DECIMAL</codeph>, значение по умолчанию <codeph>""</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Создает новый ограничитель TabStop.
     </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:TabStop:alignment:get"><apiName>alignment</apiName><shortdesc>
	 Задает выравнивание для данной позиции табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает выравнивание для данной позиции табуляции. Для определения этого свойства используются значения класса TabAlignment.
	 
	 <p>Значение по умолчанию равно <codeph>TabAlignment.START</codeph>.</p>
	 
	 <p>Используйте аргумент <codeph>lineOffset</codeph> для <codeph>TextBlock.createTextLine()</codeph>, чтобы корректировать табуляцию, если исходная точка строки не выровнена по другим строкам, использующим те же позиции табуляции.</p>
	 
	 <p>Используйте следующие константы класса TabAlignment, чтобы задать значение для этого свойства.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TabAlignment.START</codeph></entry>
	 	<entry>Свойство <codeph>position</codeph> определяет количество пикселей от начала текстовой строки до точки <i>start</i> текста с табуляцией.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.CENTER</codeph></entry>
	 	<entry>Свойство <codeph>position</codeph> определяет количество пикселей от начала текстовой строки до точки <i>center</i> текста с табуляцией.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.END</codeph></entry>
	 	<entry>Свойство <codeph>position</codeph> определяет количество пикселей от начала текстовой строки до точки <i>end</i> текста с табуляцией.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.DECIMAL</codeph></entry>
	 	<entry>Свойство <codeph>position</codeph> определяет количество пикселей от начала текстовой строки до метки выравнивания.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
	 Задает метку выравнивания, которая должна использоваться вместе со свойством alignment в значении TabAlignment.DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Задает метку выравнивания, которая должна использоваться вместе со свойством <codeph>alignment</codeph> в значении <codeph>TabAlignment.DECIMAL</codeph>. Это значение является объектом String в текстовой строке.
	 
	 <p>По умолчанию используется значение <codeph>""</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment/DECIMAL"><linktext>TabAlignment.DECIMAL</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:position:get"><apiName>position</apiName><shortdesc>
	 Место позиции табуляции (в пикселях) относительно начала текстовой строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Если задано значение меньше 0,0.
   	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Место позиции табуляции (в пикселях) относительно начала текстовой строки.
	 
	 <p>Значением по умолчанию является 0,0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontLookup"><apiName>FontLookup</apiName><shortdesc>
Класс FontLookup является перечислением констант, используемых вместе с FontDescription.fontLookup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс FontLookup является перечислением констант, используемых вместе с <codeph>FontDescription.fontLookup</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links><apiValue id="flash.text.engine:FontLookup:DEVICE"><apiName>DEVICE</apiName><shortdesc> 
	Используется для указания поиска шрифтов устройства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Используется для указания поиска шрифтов устройства. Проигрыватель Flash Player использует шрифты, установленные в системе, в которой выполняется SWF-файл.
	
	<p>Использование шрифтов устройства сокращает размер ролика, так как в файл не включаются данные шрифтов.</p>
	
	<p>Текст, визуализируемый с помощью шрифтов устройства, не всегда отображается одинаково в разных системах и на разных платформах, так как проигрыватель Flash Player использует шрифты, установленные в системе.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontLookup:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc> 
	Используется для указания поиска строенных шрифтов CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Используется для указания поиска строенных шрифтов CFF. Flash Player использует контуры шрифтов, встроенные в опубликованный SWF-файл.
	
	<p>Текстовые поля, использующие встроенные шрифты, всегда отображаются с выбранным шрифтом, независимо от того, установлен он в воспроизводящей системе или нет.</p>
	
	<p>Недостатком встроенных шрифтов является то, что они увеличивают размер SWF-файла.</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TypographicCase"><apiName>TypographicCase</apiName><shortdesc>
Класс TypographicCase является перечислением констант для определения свойства typographicCase класса ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс TypographicCase является перечислением констант для определения свойства <codeph>typographicCase</codeph> класса ElementFormat. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/typographicCase"><linktext>ElementFormat.typographicCase</linktext></link></related-links><apiValue id="flash.text.engine:TypographicCase:CAPS"><apiName>CAPS</apiName><shortdesc> 
	Указывает, что на выходе для символов верхнего регистра корректируются интервалы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что на выходе для символов верхнего регистра корректируются интервалы.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:CAPS_AND_SMALL_CAPS"><apiName>CAPS_AND_SMALL_CAPS</apiName><shortdesc> 
	Указывает, что на выходе все символы нижнего регистра используют капительные глифы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsAndSmallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что на выходе все символы нижнего регистра используют капительные глифы.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Задает регистр текста по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает регистр текста по умолчанию. Результаты зависят от шрифта; символы используют настройки, определенные дизайнером шрифтов без применения каких-либо функций.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 
	Указывает, что на выходе все символы используют глифы нижнего регистра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что на выходе все символы используют глифы нижнего регистра.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:SMALL_CAPS"><apiName>SMALL_CAPS</apiName><shortdesc> 
	Указывает, что на выходе символы верхнего регистра используют капительные глифы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>smallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что на выходе символы верхнего регистра используют капительные глифы.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:TITLE"><apiName>TITLE</apiName><shortdesc> 
	Указывает, что на выходе символы верхнего регистра используют заголовочные глифы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>title</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что на выходе символы верхнего регистра используют заголовочные глифы.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 
	Указывает, что на выходе все символы используют глифы верхнего регистра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что на выходе все символы используют глифы верхнего регистра.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitCase"><apiName>DigitCase</apiName><shortdesc>
Класс DigitCase является перечислением констант, с помощью которых задается свойство digitCase класса ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс DigitCase является перечислением констант, с помощью которых задается свойство <codeph>digitCase</codeph> класса ElementFormat. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitCase"><linktext>flash.text.engine.ElementFormat.digitCase</linktext></link></related-links><apiValue id="flash.text.engine:DigitCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Служит для задания регистра цифр по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Служит для задания регистра цифр по умолчанию. Результаты зависят от шрифта; символы используют настройки, определенные дизайнером шрифтов без применения каких-либо функций.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:LINING"><apiName>LINING</apiName><shortdesc> 
	Служит для задания маюскульного регистра цифр.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lining</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Служит для задания маюскульного регистра цифр.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:OLD_STYLE"><apiName>OLD_STYLE</apiName><shortdesc> 
	Служит для задания минускульного регистра цифр.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>oldStyle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Служит для задания минускульного регистра цифр.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextElement"><apiName>TextElement</apiName><shortdesc>
 Класс TextElement представляет строку отформатированного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс TextElement представляет строку отформатированного текста. Назначьте объект TextElement свойству <codeph>content</codeph> объекта TextBlock, чтобы создать блок текста. Назначьте его объекту GroupElement, чтобы объединить с другими текстовыми и графическими элементами в единое целое. Используйте класс ElementFormat для форматирования текста.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:TextElement:TextElement"><apiName>TextElement</apiName><shortdesc>
	 Создает новый экземпляр TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Текст элемента. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Формат элемента для текста в элементе. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект <codeph>EventDispatcher</codeph>, получающий копии каждого события, вызванного для текстовых строк, созданных на основе данного элемента содержимого. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>При вращении элемент был использован в качестве единицы измерения. Используйте константы <codeph>flash.text.engine.TextRotation</codeph> для этого свойства. Значение по умолчанию равно <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Создает новый экземпляр TextElement. 
	 
	 </apiDesc><example conref="examples\TextElementExample.as"> В следующем примере из строки текста создается объект TextElement, он форматируется до размера 12 и красного цвета (0xCC0000), затем назначается свойству <codeph>content</codeph> блока TextBlock. Вызывается функция createLines() для разбиения блока текста на строки по 150 пикселей.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    
    public class TextElementExample extends Sprite {
        
        public function TextElementExample():void {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:TextElement:replaceText"><apiName>replaceText</apiName><shortdesc>
	 Заменяет диапазон символов, заданный параметрами beginIndex и endIndex, содержанием параметра newText.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Заданный параметр <codeph>beginIndex</codeph> или <codeph>endIndex</codeph> находится за пределами диапазона.
     	 
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса для начального положения диапазона замены.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса, следующее за конечным положением диапазона замены.
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Текст для замены заданного диапазона символов.
	  
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Заменяет диапазон символов, заданный параметрами <codeph>beginIndex</codeph> и <codeph>endIndex</codeph>, содержанием параметра <codeph>newText</codeph>. Значения <codeph>beginIndex</codeph> и <codeph>endIndex</codeph> относятся к текущему содержимому <codeph>text</codeph>.
	 <p>Для удаления текста передайте <codeph>null</codeph> для <codeph>newText</codeph>.</p>
	 <p>Для вставки текста передайте то же значение для <codeph>beginIndex</codeph> и <codeph>endIndex</codeph>. Новый текст вставляется перед заданным индексом.</p>
	 <p>Для добавления текста передайте <codeph>text.length</codeph> для <codeph>beginIndex</codeph> и <codeph>endIndex</codeph>.</p>
	 <p>Для задания всего текста передайте 0 для <codeph>beginIndex</codeph> и <codeph>text.length</codeph> для <codeph>endIndex</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextElement_replaceTextExample.as"> В этом примере показано, как многократно вызывать <codeph>replaceText()</codeph> для следующих целей:
     <ul>
         <li> вставить строку в начале текста</li>
         <li> добавить строку в конец текста</li>
         <li> вставить строку в середине текста</li>
        <li> заменить текст новым</li>
    </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    
    
    public class TextElement_replaceTextExample extends Sprite {
        public function TextElement_replaceTextExample():void {
            
            var str:String = "0123456";
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 14;
            var textElement:TextElement = new TextElement(str, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textElement.replaceText(0, 0, "abc");  
            createLine(textBlock, 20);           //"abc0123456"
            textElement.replaceText(10, 10, "abc");   
            createLine(textBlock, 40);            // "abc0123456abc"
            textElement.replaceText(5, 8, "abc");
            createLine(textBlock, 60);         // "abc01abc56abc"
            textElement.replaceText(0, 13, "abc");
            createLine(textBlock, 80);            // "abc"
            textElement.replaceText(0, 3, "That's all she wrote!");
            createLine(textBlock, 100);        // "That's all she wrote" */
        }
            
        private function createLine(textBlock:TextBlock, y:Number):void {
            var textLine:TextLine = textBlock.createTextLine(null, 150);
            textLine.x = 10;
            textLine.y = y;
            addChild(textLine);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextElement:text:set"><apiName>text</apiName><shortdesc>
	 Получает текст, являющийся содержимым элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Получает текст, являющийся содержимым элемента.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineValidity"><apiName>TextLineValidity</apiName><shortdesc>
Класс TextLineValidity является перечислением констант для определения свойства validity класса TextLine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс TextLineValidity является перечислением констант для определения свойства <codeph>validity</codeph> класса TextLine. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link></related-links><apiValue id="flash.text.engine:TextLineValidity:INVALID"><apiName>INVALID</apiName><shortdesc> 
	Указывает, что текстовая строка недействительна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что текстовая строка недействительна.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:POSSIBLY_INVALID"><apiName>POSSIBLY_INVALID</apiName><shortdesc> 
	Указывает, что текстовая строка, возможно, недействительна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>possiblyInvalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что текстовая строка, возможно, недействительна. Flash Player использует эту валидность при повторной разбивке строк ранее разбитого текстового блока, содержимое которого не изменялось. Это значение задать нельзя.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:STATIC"><apiName>STATIC</apiName><shortdesc> 
	Указывает на то, что строка статична, что соединение между строкой и текстовым блоком разорвано, и что атомарные данные, которые не нужны для визуализации, игнорируются.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>static</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает на то, что строка статична, что соединение между строкой и текстовым блоком разорвано, и что атомарные данные, которые не нужны для визуализации, игнорируются.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:VALID"><apiName>VALID</apiName><shortdesc> 
	Указывает, что текстовая строка действительна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что текстовая строка действительна.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontPosture"><apiName>FontPosture</apiName><shortdesc>
Класс FontPosture является перечислением констант, используемых с FontDescription.fontPosture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс FontPosture является перечислением констант, используемых с <codeph>FontDescription.fontPosture</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontPosture"><linktext>flash.text.engine.FontDescription.fontPosture</linktext></link></related-links><apiValue id="flash.text.engine:FontPosture:ITALIC"><apiName>ITALIC</apiName><shortdesc> 
	Используется для указания курсивного начертания шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Используется для указания курсивного начертания шрифта.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontPosture:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Используется для указания обычного начертания шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Используется для указания обычного начертания шрифта.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:JustificationStyle"><apiName>JustificationStyle</apiName><shortdesc>
Класс JustificationStyle является перечислением констант для определения свойства justificationStyle класса EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс JustificationStyle является перечислением констант для определения свойства <codeph>justificationStyle</codeph> класса EastAsianJustifier. Эти константы задают параметры для обработки символов кинсоку, японских символов, которые не должны появляться в начале и конце строк.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/justificationStyle"><linktext>EastAsianJustifier.justificationStyle</linktext></link></related-links><apiValue id="flash.text.engine:JustificationStyle:PRIORITIZE_LEAST_ADJUSTMENT"><apiName>PRIORITIZE_LEAST_ADJUSTMENT</apiName><shortdesc> 
	Выполняет выравнивание по ширине на основе сжатия или расширения строки в зависимости от того, что обеспечить результат, наиболее приближенный к желаемой ширине.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>prioritizeLeastAdjustment</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Выполняет выравнивание по ширине на основе сжатия или расширения строки в зависимости от того, что обеспечить результат, наиболее приближенный к желаемой ширине.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_IN_KINSOKU"><apiName>PUSH_IN_KINSOKU</apiName><shortdesc> 
	Выполняет выравнивание по ширине на основе сжатия кинсоку в конце строки или расширяя его, если кинсоку нет или недостаточно места.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushInKinsoku</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Выполняет выравнивание по ширине на основе сжатия кинсоку в конце строки или расширяя его, если кинсоку нет или недостаточно места.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_OUT_ONLY"><apiName>PUSH_OUT_ONLY</apiName><shortdesc> 
	Выполняет выравнивание по ширине на основе расширения строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushOutOnly</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Выполняет выравнивание по ширине на основе расширения строки.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
 Класс EastAsianJustifier имеет свойства для управления параметрами выравнивания по ширине текстовых строк, содержание которых представлено в основном восточно-азиатским текстом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс EastAsianJustifier имеет свойства для управления параметрами выравнивания по ширине текстовых строк, содержание которых представлено в основном восточно-азиатским текстом. 
 
 <p> Используйте конструктор <codeph>new EastAsianJustifier()</codeph>, чтобы создать объект EastAsianJustifier, прежде чем определять его свойства. Если определить свойства объекта EastAsianJustifier после его применения к TextBlock, объект TextBlock не становится недействительным.</p>
 
 </apiDesc><example conref="examples\EastAsianJustifierExample.as"> В этом примере блок японского текста отображается по вертикали с использованием свойств EastAsianJustifier для полной выключки текста.
<codeblock>
 
package {
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.EastAsianJustifier;
    import flash.text.engine.LineJustification;
    import flash.text.engine.TextRotation;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.display.Stage;
    import flash.display.Sprite;
    import flash.system.Capabilities;
    
    public class EastAsianJustifierExample extends Sprite {
        
        public function EastAsianJustifierExample():void {
            
            var Japanese_txt:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);
            
            var textBlock:TextBlock = new TextBlock();
            var font:FontDescription = new FontDescription();
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0xCC0000;
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_INCLUDING_LAST);
            textBlock.lineRotation = TextRotation.ROTATE_90;
            var linePosition:Number = this.stage.stageWidth - 75;
            if (Capabilities.os.search("Mac OS") > -1) 
                // set fontName: Kozuka Mincho Pro R
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R";                     
            else 
                font.fontName = "Kozuka Mincho Pro R";
            textBlock.content = new TextElement(Japanese_txt, format);
            var previousLine:TextLine = null;
                
            while (true) 
            {
                var textLine:TextLine = textBlock.createTextLine(previousLine, 320);
                if (textLine == null) 
                    break;
                textLine.y = 20;
                textLine.x = linePosition;
                linePosition -= 25;
                addChild(textLine);                
                previousLine = textLine;
            }
        }
    }
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:EastAsianJustifier:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
     Создает объект EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Локаль <codeph>locale</codeph> имеет значение <codeph>null</codeph> или слишком коротка, чтобы быть действительной.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданная локаль <codeph>lineJustification</codeph> не является членом <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданная локаль <codeph>justifictionStyle</codeph> не является членом <codeph>JustifictionStyle</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>ja</apiData><apiDesc>Локаль, определяющая правила выравнивания. Значением по умолчанию является <codeph>ja</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>allButLast</apiData><apiDesc>Тип выравнивания строк в абзаце. Используйте константы <codeph>LineJustification</codeph> для этого свойства. Значением по умолчанию являетеся <codeph>LineJustification.ALL_BUT_LAST</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>justificationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>pushInKinsoku</apiData><apiDesc>Стиль выравнивания текста в текстовом блоке с помощью средства выравнивания для восточно-азиатских языков. Используйте константы <codeph>JustificationStyle</codeph> для этого свойства. Значение по умолчанию <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Создает объект EastAsianJustifier.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:EastAsianJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Создает клонированную копию объекта EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>In the Flash Player 10 release, this method is for internal use. In future releases,
	 users will be able to subclass this class and will then need to use this method. This class is 
	 currently stored as a live reference, but there is no way to track when its properties change.  
	 This means that when changes are made, text blocks are not invalidated, which in the current 
	 implementation can lead to player crashes.  Even from the API perspective its wrong, as the affected 
	 text lines should be marked INVALID when format changes are made, but they�re not. The solution is 
	 to use a copy-on-set model.  When the object is passed in, the player copies it, so later changes to 
	 the object that was passed in have no effect. The setter makes an internal copy of the array; the 
	 getter returns a copy of the internal copy. Operations like 
         myBlock.textJustifier.justificationStyle = JustificationStyle.PUSH_IN_KINSOKU will have no effect. 
         Users who subclass this class in the future will need to use the clone() method to 
	 implement this technique of 'locking' the format once it has been set.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Копия объекта <codeph>EastAsianJustifier</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает клонированную копию объекта EastAsianJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:EastAsianJustifier:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
     Задает стиль выравнивания текста в блоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Задает стиль выравнивания текста в блоке.
     
     <p>Значение по умолчанию <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.</p>
     
	 <p>Используйте одну из констант класса JustificationStyle в качестве значения для этого свойства. В следующей таблице перечислены возможные значения.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph></entry>
	 	<entry>Задает выравнивание в пределах заданной области.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PUSH_OUT_ONLY</codeph></entry>
	 	<entry>Задает выравнивание с выступом за пределы заданной области.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT</codeph></entry>
	 	<entry>Задает выравнивание с использованием минимальной корректировки.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:RenderingMode"><apiName>RenderingMode</apiName><shortdesc>
Класс RenderingMode передает значения для режима визуализации в классе flash.text.engine.FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс RenderingMode передает значения для режима визуализации в классе flash.text.engine.FontDescription.
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:RenderingMode:CFF"><apiName>CFF</apiName><shortdesc>
	Задает режим визуализации CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cff</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает режим визуализации CFF. Визуализация CFF улучшает удобочитаемость текста на дисплее. Этот параметр рекомендуется для приложений с большим объемом мелкого текста. Эта константа используется для свойства <codeph>renderingMode</codeph> в классе FontDescription. Используйте синтаксис <codeph>RenderingMode.CFF</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:RenderingMode:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	Задает режим визуализации, используемый в Flash Player 7 и более ранних версиях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Задает режим визуализации, используемый в Flash Player 7 и более ранних версиях. Этот параметр рекомендуется для анимированного текста. Эта константа используется для свойства <codeph>renderingMode</codeph> в классе FontDescription. Используйте синтаксис <codeph>RenderingMode.NORMAL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 Класс ElementFormat представляет информацию о форматировании, применимую к ContentElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс ElementFormat представляет информацию о форматировании, применимую к <codeph>ContentElement</codeph>. Используйте класс ElementFormat для создания специального форматирования текста для различных подклассов ContentElement. Свойства класса ElementFormat применяются к шрифтам устройства и встроенным шрифтам. 
 
 <p>Объект ElementFormat, примененный к ContentElement в элементе TextBlock, не аннулирует действие TextBlock. После применения объекта ElementFormat к ContentElement для его свойства <codeph>locked</codeph> задается значение <codeph>true</codeph>. Изменение свойств заблокированного объекта ElementFormat невозможно. Вместо этого необходимо использовать метод <codeph>clone()</codeph> для создания разблокированной копии объекта, который можно изменить и присвоить объекту ContentElement.</p>
 
 </apiDesc><example conref="examples\ElementFormatExample.as"> <p>В этом примере показано, как создавать два объекта <codeph>ElementFormat</codeph> и задавать для них некоторые свойства. Назначается новый ElementFormats объекту <codeph>TextElement</codeph>, который назначался в качестве содержимого <codeph>TextBlock</codeph>. Изменение <codeph>ElementFormat</codeph> объекта <codeph>TextElement</codeph> не влияет на текстовые строки, созданные вышестоящим блоком.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormatExample extends Sprite {
        
        public function ElementFormatExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            ef1.alpha = 100;
            ef1.kerning = flash.text.engine.Kerning.ON;
            ef1.trackingRight = 2;
            ef1.typographicCase = flash.text.engine.TypographicCase.UPPERCASE;
            ef1.alignmentBaseline = flash.text.engine.TextBaseline.DESCENT;
            ef1.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
            
            var ef2:ElementFormat = new ElementFormat(fd);
            ef2.fontSize = 30;
            ef2.color = 0xFF0000;
            ef2.alpha = 0.3;
            ef2.kerning = flash.text.engine.Kerning.OFF;
            ef2.typographicCase = flash.text.engine.TypographicCase.LOWERCASE;
            ef2.digitCase = flash.text.engine.DigitCase.OLD_STYLE;
            ef2.textRotation = flash.text.engine.TextRotation.ROTATE_180;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            line1.x = 15;
            line1.y = 30;

            tb.content.elementFormat = ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            line2.x = 15;
            line2.y = 60;
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/elementFormat"><linktext>flash.text.engine.ContentElement.elementFormat</linktext></link></related-links><apiConstructor id="flash.text.engine:ElementFormat:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 	 Создает объект ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Заданный <codeph>fontSize</codeph> меньше 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>FontMetrics</codeph> не является членом <codeph>flash.text.engine.TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>dominantBaseline</codeph> не является членом <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>alignmentBaseline</codeph> не является членом <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>kerning</codeph> не является членом <codeph>flash.text.engine.Kerning</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>breakOpportunity</codeph> не является членом <codeph>flash.text.engine.BreakOpportunity</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>digitCase</codeph> не является членом <codeph>flash.text.engine.DigitCase</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>digitWidth</codeph> не является членом <codeph>flash.text.engine.DigitWidth</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>ligatureLevel</codeph> не является членом <codeph>flash.text.engine.LigatureLevel</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>typographicCase</codeph> не является членом <codeph>flash.text.engine.TypographicCase</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект FontDescription задающий шрифт формата элемента. По умолчанию используется <codeph>null</codeph>. Если не выбрано описание шрифта, используется описание по умолчанию.
	 </apiDesc></apiParam><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>Размер текста в пикселях.
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0x000000</apiData><apiDesc>Цвет текста. Число, содержащее три 8-разрядных компонента RGB; например, 0xFF0000 – это красный, 0x00FF00 – это зеленый.
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>Свойство <codeph>alpha</codeph> применяется ко всем атомам строки на основе формата элемента.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>вращение, применяемое к отдельным образам символа. Используйте константы <codeph>flash.text.engine.TextRotation</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>dominantBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Базовая линия, по которой равняются образы символов в тексте. Используйте константы <codeph>flash.text.engine.TextBaseline</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>alignmentBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>useDominantBaseline</apiData><apiDesc>Базовая линия содержащий строки, по которой равняется доминирующая базовая линия. Используйте константы <codeph>flash.text.engine.TextBaseline</codeph> для этого свойства.
     </apiDesc></apiParam><apiParam><apiItemName>baselineShift</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Сдвиг базовой линии для текста в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>kerning</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>on</apiData><apiDesc>Кернинг текста. Используйте <codeph>flash.text.engine.Kerning</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingRight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Трекинг или ручной кернинг, применяемый справа от каждого глифа (в пикселях).
	 </apiDesc></apiParam><apiParam><apiItemName>trackingLeft</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Трекинг или ручной кернинг, применяемый слева от каждого глифа (в пикселях).
	 </apiDesc></apiParam><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>Локаль текста.
     </apiDesc></apiParam><apiParam><apiItemName>breakOpportunity</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>Возможный разрыв строки в тексте. Используйте константы <codeph>flash.text.engine.BreakOpportunity</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>digitCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Регистр цифр в тексте. Используйте константы <codeph>flash.text.engine.DigitCase</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>digitWidth</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Ширина цифр в тексте. Используйте константы <codeph>flash.text.engine.DigitWidth</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>ligatureLevel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>common</apiData><apiDesc>Лигатура в тексте. Используйте константы <codeph>flash.text.engine.LigatureLevel</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>typographicCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Регистр текста. Используйте константы <codeph>flash.text.engine.TypographicCase</codeph> для этого свойства.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Создает объект ElementFormat.
	 
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:ElementFormat:clone"><apiName>clone</apiName><shortdesc>
	 Создание разблокированной клонированной копии объекта ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Разблокированная копия объекта <codeph>ElementFormat</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создание разблокированной клонированной копии объекта ElementFormat.
	 
     </apiDesc><example conref="examples\ElementFormat_cloneExample.as"> <p>В этом примере создается объект <codeph>ElementFormat</codeph> и задается свойство <codeph>FontSize</codeph>. Создается новый объект <codeph>TextElement</codeph> с использованием <codeph>ElementFormat</codeph> (и блокируется таким образом), затем этот объект <codeph>TextElement</codeph> используется в качестве содержимого для объекта <codeph>TextBlock</codeph>. Из объекта <codeph>TextBlock</codeph> создается текстовая строка.</p>
 <p>Для изменения объекта <codeph>ElementFormat</codeph> сначала проверьте его свойство <codeph>locked</codeph>. Если оно имеет значение true, используйте метод <codeph>clone()</codeph> для создания разблокированной копии объекта <codeph>ElementFormat</codeph>, измените его свойства, затем повторно свяжите новый объект <codeph>ElementFormat</codeph> с объектом <codeph>TextBlock</codeph>. При повторной разбивке строк новые строки получат новые параметры шрифтов.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormat_cloneExample extends Sprite {
        private var ef1:ElementFormat;
        private var ef2:ElementFormat;
        
        public function ElementFormat_cloneExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize=20;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            ef2 = (ef1.locked) ? ef1.clone() : ef1;    
            ef2.fontSize = 32;

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:ElementFormat:getFontMetrics"><apiName>getFontMetrics</apiName><shortdesc>
	 Возвращает объект FontMetrics со свойствами, описывающими emBox, положение зачеркивания, толщину зачеркивания, положение подчеркивания, толщину подчеркивания и шрифта, заданного fontDescription и fontSize.
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект <codeph>FontMetrics</codeph>, описывающий свойства шрифта, заданного <codeph>fontDescription</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <p>Возвращает объект <codeph>FontMetrics</codeph> со свойствами, описывающими emBox, положение зачеркивания, толщину зачеркивания, положение подчеркивания, толщину подчеркивания и шрифта, заданного <codeph>fontDescription</codeph> и <codeph>fontSize</codeph>.</p>
	 
	 </apiDesc><example conref="examples\FontMetricsExample.as"> В этом примере показано, как создавать объект <codeph>ElementFormat</codeph> и назначать ему <codeph>FontDescription</codeph>, а также использовать метод <codeph>getFontMetrics</codeph> для отображения метрики выбранного шрифта.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontMetricsExample extends Sprite {
        
        public function FontMetricsExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            var fm1:FontMetrics = ef1.getFontMetrics();
            trace(fm1.emBox);
            trace(fm1.strikethroughOffset);
            trace(fm1.strikethroughThickness);
            trace(fm1.subscriptScale);
            trace(fm1.subscriptOffset);
            trace(fm1.superscriptScale);
            trace(fm1.superscriptOffset);
            trace(fm1.underlineOffset);
            trace(fm1.underlineThickness);
            
            
        }
    }    
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link><link href="flash.text.engine.xml#FontMetrics"><linktext>flash.text.engine.FontMetrics</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:ElementFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
	 Указывает, по какой из базовых линий строки, содержащей элемент, выравнивается dominantBaseline, определяя вертикальную позицию элемента в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Указывает, по какой из базовых линий строки, содержащей элемент, выравнивается <codeph>dominantBaseline</codeph>, определяя вертикальную позицию элемента в строке. Используйте константы <codeph>flash.text.engine.TextBaseline</codeph> для этого свойства.
	 
	 <p>Базовые линии определяются самым большим элементом в строке, если не заданы <codeph>TextBlock.baselineFontDescription</codeph> и <codeph>TextBlock.baselineFontSize</codeph> для изменения этой логики.</p>
	 
	 <p>Значение по умолчанию – <codeph>flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по латинской базовой линии строки.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по надстрочной базовой линии строки.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по подстрочной базовой линии строки.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по идеографической верхней базовой линии строки.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по идеографической центральной базовой линии строки.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по идеографической нижней базовой линии строки.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.USE_DOMINANT_BASELINE</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> выравнивается по той же базовой линии строки.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Задает базовую линию выравнивания строки, по которой выравнивается <codeph>dominantBaseline</codeph> графического элемента.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Задает базовую линию выравнивания строки, по которой выравнивается <codeph>dominantBaseline</codeph> текстового элемента.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>flash.text.engine.ElementFormat.dominantBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:alpha:get"><apiName>alpha</apiName><shortdesc>
	 Дает автору возможность автоматически задавать свойству alpha для всех атомов строки, основанных на формате элемента, указанное значение Number.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Дает автору возможность автоматически задавать свойству <codeph>alpha</codeph> для всех атомов строки, основанных на формате элемента, указанное значение Number.
	 
	 <p>Указывает значение альфа-прозрачности заданного объекта. Допустимые значения находятся в диапазоне от 0 (полностью прозрачный) до 1 (полностью непрозрачный). Значением по умолчанию является 1. Экранные объекты, для которых значение alpha равно 0, являются активными, несмотря на невидимость.</p>
	 
	 <p>По умолчанию используется значение <codeph>1.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Применяет заданное значение альфа-канала к графическому элементу. Мультипликативно объединяется с любым значением альфа-канала, заданным в самом графическом объекте <codeph>DisplayObject</codeph> или в <codeph>TextLine</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Применяет заданное значение альфа-канала к текстовому элементу. Мультипликативно объединяется с любым значением альфа-канала, заданным в <codeph>TextLine</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
	 Указывает смещение базовой линии для элемента в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Указывает смещение базовой линии для элемента в пикселях.
	 <p>Элемент смещается с <codeph>dominantBaseline</codeph> на это расстояние. Сдвиг добавляется к положение по оси у членов элемента, поэтому в не вращающемся тексте положительное смещение базовой линии сдвигает элемент вниз, а отрицательное – вверх.</p>
	 
	 <p>Значение по умолчанию <codeph>0,0</codeph>, что указывает на отсутствие смещения.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Смещает графический элемент с базовой линии.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Смещает текстовый элемент с базовой линии.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
	 Возможный разрыв строки в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если заданное значение не является членом <codeph>flash.text.engine.BreakOpportunity</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Возможный разрыв строки в тексте. Это свойство определяет, какие символы могут использоваться для разрыва, когда обтекающий текст разбивается на несколько строк. Используйте константы <codeph>flash.text.engine.BreakOpportunity</codeph> для этого свойства.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.BreakOpportunity.AUTO</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>BreakOpportunity.AUTO</codeph></entry>
	 	<entry>Возможные разрывы строк определяются в соответствии со стандартными свойствами символов Юникод, например разрыв между словами и после дефиса.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ANY</codeph></entry>
	 	<entry>Любой символ в объекте <codeph>ContentElement</codeph> рассматривается как возможность разрыва строки. Это значение обычно используется, когда латинский текст встраивается с восточно-азиатский текст и желательны разрывы строк в середине слов.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.NONE</codeph></entry>
	 	<entry>Ни один из символов диапазона не рассматривается как возможность разрыва строки.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ALL</codeph></entry>
	 	<entry>Все символы диапазона рассматриваются как возможность разрыва строки. Полезно для создания таких эффектов, как текст вдоль кривой.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Определяет возможность разрыва строки между смежными текстовыми элементами в группе. Если elementFormat группы имеет значение <codeph>null</codeph>, используется формат первого из смежных элементов.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет возможность разрыва строки между символами в текстовом элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#BreakOpportunity"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:color:get"><apiName>color</apiName><shortdesc>
	 Указывает цвет текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Указывает цвет текста. Целое число, содержащее три 8-разрядных компонента RGB; например, 0xFF0000 – это красный, 0x00FF00 – это зеленый. 
	 
	 <p>Значением по умолчанию является <codeph>0x000000</codeph>, то есть проигрыватель Flash Player использует черный цвет.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Задает цвет текста.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
	 Регистр цифр в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.DigitCase</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Регистр цифр в тексте. Регистр цифр влияет на стиль и расположение групп числовых символов. Используйте константы <codeph>flash.text.engine.DigitCase</codeph> для этого свойства.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.DigitCase.DEFAULT</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitCase.DEFAULT</codeph></entry>
	 	<entry>Применяет к тексту регистр цифр по умолчанию.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.LINING</codeph></entry>
	 	<entry>Применяет к тексту маюскульный регистр цифр.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.OLD_STYLE</codeph></entry>
	 	<entry>Применяет к тексту минускульный регистр цифр.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет регистр цифр, используемый для текста в элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitCase"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
	 Ширина цифр в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.DigitWidth</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Ширина цифр в тексте. Используйте константы <codeph>flash.text.engine.DigitWidth</codeph> для этого свойства.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.DigitWidth.DEFAULT</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitWidth.DEFAULT</codeph></entry>
	 	<entry>Применяет к тексту ширину цифр по умолчанию.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.PROPORTIONAL</codeph></entry>
	 	<entry>Применяет к тексту пропорциональную ширину цифр.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.TABULAR</codeph></entry>
	 	<entry>Применяет к тексту табличную ширину цифр.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет ширину цифр, используемую для текста в элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitWidth"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
	 Указывает, какая из базовых линий элемента выравнивается по alignmentBaseline для определения вертикальной позиции элемента в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Указывает, какая из базовых линий элемента выравнивается по <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке. Используйте константы <codeph>flash.text.engine.TextBaseline</codeph> для этого свойства.
	 
	 <p>Содержимое элемента определяет базовые линии. В случае с <codeph>TextElement</codeph> базовые линии определяются шрифтом и размером кегля. В случае с <codeph>GraphicElement</codeph> базовые линии определяются высотой элемента.</p>
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>Латинская базовая линия элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>Надстрочная базовая линия элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>Подстрочная базовая линия элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>Идеографическая верхняя базовая линия элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>Идеографическая центральная базовая линия элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>Идеографическая нижняя базовая линия элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Определяет, какая из базовых линий графического элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет, какая из базовых линий текстового элемента выравнивается по <codeph>alignmentBaseline</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>flash.text.engine.ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontDescription:get"><apiName>fontDescription</apiName><shortdesc>
	 Объект, включающий свойства, необходимые для описания шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Объект, включающий свойства, необходимые для описания шрифта.
	 
	 <p>Значением по умолчанию является объект FontDescription, созданный по умолчанию.</p>
     
	 <p>Если задается свойство fontDescription, предоставленный объект FontDescription заблокирован: для его свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>. Изменение заблокированного объекта FontDescription невозможно.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет шрифт, используемый для текста в элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
	 Размер текста в пикселах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Если задано значение меньше нуля.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Размер текста в пикселах. 
	 
	 <p>По умолчанию используется значение <codeph>12.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет размер текста элемента в пикселах.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 Кернинг текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Кернинг текста. Используйте константы <codeph>flash.text.engine.Kerning</codeph> для этого свойства. Кернинг регулирует количество пикселей между определенными парами символов с целью улучшения удобочитаемости текста. Кернинг поддерживается для всех шрифтов, имеющих таблицы кернинга.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.Kerning.ON</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>Kerning.ON</codeph></entry>
	 	<entry>Кернинг включен.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.OFF</codeph></entry>
	 	<entry>Кернинг выключен.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.AUTO</codeph></entry>
	 	<entry>Кернинг включается только для соответствующих символов в восточно-азиатской типографике. Кернинг применяется между двумя символами, если ни один из них не принадлежит к кандзи, хирагана или катакана.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Определяет, применяется ли кернинг между смежными текстовыми элементами в группе. Если elementFormat группы имеет значение <codeph>null</codeph>, используется формат первого из смежных элементов.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет, применяется ли кернинг между символами в текстовом элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
	 Лигатура в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.LigatureLevel</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Лигатура в тексте. Лигатура возникает, когда две или более литеры объединяются в один глиф. Лигатуры обычно заменяют последовательные символы с общими компонентами, такие как пары букв «fi», «fl» или «ae». Они используются как с латинскими, так и с нелатинскими наборами символов. Используйте константы <codeph>flash.text.engine.LigatureLevel</codeph> для этого свойства.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.LigatureLevel.COMMON</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>LigatureLevel.NONE</codeph></entry>
	 	<entry>Лигатуры не создаются.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.MINIMUM</codeph></entry>
	 	<entry>Создаются минимальные лигатуры.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.COMMON</codeph></entry>
	 	<entry>Создаются обычные лигатуры.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.UNCOMMON</codeph></entry>
	 	<entry>Создаются необычные лигатуры.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.EXOTIC</codeph></entry>
	 	<entry>Создаются экзотические лигатуры.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Определяет уровень лигатуры между смежными текстовыми элементами в группе. Если elementFormat группы имеет значение <codeph>null</codeph>, используется формат первого из смежных элементов.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет уровень лигатуры между символами в текстовом элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LigatureLevel"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:locale:get"><apiName>locale</apiName><shortdesc>
	 Языковой стандарт текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Языковой стандарт текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали. Например en, en_US и en-US относятся к английскому, а ja – к японскому.
	 
     <p>Значение по умолчанию равно <codeph>en</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет преобразования и формирование для текста в элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:locked:get"><apiName>locked</apiName><shortdesc>
	 Обозначает, заблокирован ли объект ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Обозначает, заблокирован ли объект ElementFormat. Если задано значение <codeph>true</codeph>, изменение объекта ElementFormat невозможно. Вызовите метод <codeph>ElementFormat.clone()</codeph> для получения разблокированной копии объекта ElementFormat.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Задает вращение, применяемое к отдельным глифам символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.TextRotation</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает вращение, применяемое к отдельным глифам символа. Используйте константы <codeph>flash.text.engine.TextRotation</codeph> для этого свойства.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.TextRotation.AUTO</codeph>.</p>
	 
	 <p>Конечный поворот любого глифа является суммой <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph> и <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>ElementFormat.textRotation</codeph> обычно применяется для восточно-азиатского текста, где символы должны поворачиваться для правильного отображения в вертикальной раскладке: значение <codeph>flash.text.engine.TextRotation.AUTO</codeph> используется в сочетании с <codeph>TextBlock.lineRotation = flash.text.engine.ROTATE_90</codeph>.</p>
	 
	 <p>Определение этого свойства для шрифтов, не содержащих сведений о вертикальной раскладке, может дать нежелательные результаты. Шрифты, содержащие таблицу vmtx или VORG, такие как японский шрифт MS Mincho, работают правильно, так как эти таблицы предоставляют данные, необходимые процессору раскладки. Такие шрифты, как Verdana, не содержащие необходимой информации, работают неправильно.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Глифы не поворачиваются.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Глифы поворачиваются на 90 градусов по часовой стрелке.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Глифы поворачиваются на 180 градусов.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Глифы поворачиваются на 270 градусов по часовой стрелке.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 <entry>Задает поворот на 90 градусов против часовой стрелки только для полноширинных и широких глифов, в соответствии со свойствами Юникод для глифа. Обычно это значение используется с восточно-азиатскими текстами, чтобы поворачивать только глифы, требующие поворота. Этот поворот применяется только к вертикальному тексту, чтобы возвращать полноширинным и широким символам вертикальную ориентацию, не затрагивая остальных символов.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет поворот глифов в текстовом элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>flash.text.engine.TextRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>flash.text.engine.ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>flash.text.engine.TextBlock.lineRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
	 Трекинг или ручной кернинг, применяемый слева от каждого глифа (в пикселях).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Трекинг или ручной кернинг, применяемый слева от каждого глифа (в пикселях). Если <codeph>kerning</codeph> включен, значение <codeph>trackingLeft</codeph> добавляется к значениям в таблице кернинга для шрифта. Если <codeph>kerning</codeph> выключен, значение <codeph>trackingLeft</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения.
	 
	 <p>Обычно желаемое значение трекинга делится между <codeph>trackingRight</codeph> и <codeph>trackingLeft</codeph>. В противном случае в тексте со смешанной направленностью у одной двунаправленной границы будет двойной трекинг, а у другой – нулевой.</p>
	 
	 <p>По умолчанию используется значение <codeph>0.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Определяет трекинг, применяемый к левой стороне графического элемента.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет трекинг, применяемый к левой стороне символов в текстовом элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Пример:</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingLeft = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingLeft = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
	 Трекинг или ручной кернинг, применяемый справа от каждого глифа (в пикселях).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Трекинг или ручной кернинг, применяемый справа от каждого глифа (в пикселях). Если <codeph>kerning</codeph> включен, значение <codeph>trackingRight</codeph> добавляется к значениям в таблице кернинга для шрифта. Если <codeph>kerning</codeph> выключен, значение <codeph>trackingRight</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения.
	 
	 <p>Обычно желаемое значение трекинга делится между <codeph>trackingRight</codeph> и <codeph>trackingLeft</codeph>. В противном случае в тексте со смешанной направленностью у одной двунаправленной границы будет двойной трекинг, а у другой – нулевой.</p>
	 
	 
	 <p>По умолчанию используется значение <codeph>0.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Определяет трекинг, применяемый к правой стороне графического элемента.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет трекинг, применяемый к правой стороне символов в текстовом элементе.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Пример:</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingRight = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingRight = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
	 Регистр текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если заданное значение не является членом <codeph>flash.text.engine.TypographicCase</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта ElementFormat (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Регистр текста. Используйте константы <codeph>flash.text.engine.TypographicCase</codeph> для этого свойства.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.TypographicCase.DEFAULT</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TypographicCase.DEFAULT</codeph></entry>
	 	<entry>Применяет регистр текста по умолчанию.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.TITLE</codeph></entry>
	 	<entry>Указывает, что на выходе символы верхнего регистра используют заголовочные глифы.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS</codeph></entry>
	 	<entry>Указывает, что на выходе для символов верхнего регистра корректируются интервалы.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.SMALL_CAPS</codeph></entry>
	 	<entry>Указывает, что на выходе символы верхнего регистра используют капительные глифы.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.UPPERCASE</codeph></entry>
	 	<entry>Указывает, что на выходе все символы используют глифы верхнего регистра.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.LOWERCASE</codeph></entry>
	 	<entry>Указывает, что на выходе все символы используют глифы нижнего регистра.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS_AND_SMALL_CAPS</codeph></entry>
	 	<entry>Указывает, что на выходе все символы нижнего регистра используют капительные глифы.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Подкласс</entry><entry>Результат определения свойства</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Не оказывает влияния.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Определяет регистр текста, используемый для текстового элемента.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TypographicCase"><linktext>flash.text.engine.TypographicCase</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
 Класс FontMetrics содержит сведения о размерах и сдвигах шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс FontMetrics содержит сведения о размерах и сдвигах шрифта. Метод <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> возвращает объекты этого класса.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links><apiConstructor id="flash.text.engine:FontMetrics:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
	 Создает объект FontMetrics.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>emBox</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>emBox шрифта в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Сдвиг зачеркивания в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Толщина зачеркивания в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Сдвиг подчеркивания в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Толщина подчеркивания в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Сдвиг подстрочного индекса в пикселах.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Масштабирование для применения к точке нижнего индекса.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Сдвиг надстрочного индекса в пикселях.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Масштабирование для применения к точке верхнего индекса.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Создает объект FontMetrics. Объект FontMetrics содержит информацию о метрике шрифта элемента. Метод <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> возвращает объекты этого класса.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:FontMetrics:emBox"><apiName>emBox</apiName><shortdesc>
	 Значение emBox представляет пространство проектных параметров шрифта и служит для размещения китайских, корейских и японских глифов относительно латинской базовой линии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 Значение emBox представляет пространство проектных параметров шрифта и служит для размещения китайских, корейских и японских глифов относительно латинской базовой линии. Как правило, это квадрат, сторона которого равна размеру кегля шрифта. Исходная точка (с координатами 0,0) для emBox задается у левого края латинской базовой линии прямоугольника. Например для шрифта 10 emBox может быть прямоугольником [L,T,R,B] с размерами [0, -8.8, 10, 1.2].
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughOffset"><apiName>strikethroughOffset</apiName><shortdesc>
	 Значение strikethroughOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для зачеркивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение strikethroughOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для зачеркивания.
	 
	 <p>Обратите внимание, что в зависимости от поворота строки, это значение либо добавляется, либо вычитается из позиции строки, чтобы вычислить позицию зачеркивания. В строке с <codeph>TextRotation.ROTATE_0</codeph>, <codeph>strikethrough.y = line.y + strikethroughOffset</codeph>. В строке с <codeph>TextRotation.ROTATE_90</codeph>, <codeph>strikethrough.x = line.x - strikethroughOffset</codeph>.</p>
	 
	 <p>При применении оформления, например, зачеркивания, рекомендуется задавать <codeph>eventMirror</codeph> для объекта <codeph>ContentElement</codeph>, к которому будет применяться оформление. В ответ на событие <codeph>flash.events.Event.ADDED</codeph>, свойство <codeph>bounds</codeph> объекта <codeph>TextLineMirrorRegion</codeph> может использоваться вместе с <codeph>strikethroughOffset</codeph> для определения позиции зачеркивания.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughThickness"><apiName>strikethroughThickness</apiName><shortdesc>
	 Значение strikethroughThickness представляет предлагаемую толщину зачеркивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение strikethroughThickness представляет предлагаемую толщину зачеркивания.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptOffset"><apiName>subscriptOffset</apiName><shortdesc>
	 Значение subscriptOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для подстрочного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение subscriptOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для подстрочного индекса.
	 
	 <p>Значение subscriptOffset используется вместе с <codeph>ElementFormat.baselineShift</codeph> для определения позиции подстрочного индекса.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptScale"><apiName>subscriptScale</apiName><shortdesc>
	 Значение subscriptScale представляет рекомендуемый коэффициент масштабирования, которые должен применяться к размеру кегля подстрочного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение subscriptScale представляет рекомендуемый коэффициент масштабирования, которые должен применяться к размеру кегля подстрочного индекса. Коэффициент 1,0 обозначает отсутствие масштабирования.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptOffset"><apiName>superscriptOffset</apiName><shortdesc>
	 Значение superscriptOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для надстрочного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение superscriptOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для надстрочного индекса.
	 
	 <p>Значение superscriptOffset используется вместе с <codeph>ElementFormat.baselineShift</codeph> для определения позиции надстрочного индекса.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptScale"><apiName>superscriptScale</apiName><shortdesc>
	 Значение superscriptScale представляет рекомендуемый коэффициент масштабирования, которые должен применяться к размеру кегля надстрочного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение superscriptScale представляет рекомендуемый коэффициент масштабирования, которые должен применяться к размеру кегля надстрочного индекса. Коэффициент 1,0 обозначает отсутствие масштабирования.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineOffset"><apiName>underlineOffset</apiName><shortdesc>
	 Значение underlineOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для подчеркивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение underlineOffset представляет предлагаемый вертикальный сдвиг латинской базовой линии для подчеркивания.
	 
	 <p>Обратите внимание, что в зависимости от поворота строки, это значение либо добавляется, либо вычитается из позиции строки, чтобы вычислить позицию подчеркивания. В строке с <codeph>TextRotation.ROTATE_0</codeph>, <codeph>underline.y = line.y + underlineOffset</codeph>. В строке с <codeph>TextRotation.ROTATE_90</codeph>, <codeph>underline.x = line.x - underlineOffset</codeph>.</p>
	 
	 <p>При применении оформления, например, подчеркивания, рекомендуется задавать <codeph>eventMirror</codeph> для объекта <codeph>ContentElement</codeph>, к которому будет применяться оформление. В ответ на событие <codeph>flash.events.Event.ADDED</codeph>, свойство <codeph>bounds</codeph> объекта <codeph>TextLineMirrorRegion</codeph> может использоваться вместе с <codeph>underlineOffset</codeph> для определения позиции зачеркивания.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineThickness"><apiName>underlineThickness</apiName><shortdesc>
	 Значение underlineThickness представляет предлагаемую толщину подчеркивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Значение underlineThickness представляет предлагаемую толщину подчеркивания.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Обзор класса FontMetrics</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 Класс FontDescription представляет свойства, необходимые для описания шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс FontDescription представляет свойства, необходимые для описания шрифта. Свойства класса FontDescription применяются к шрифтам устройства и встроенным шрифтам. 
 
 <p>Объект FontDescription применен к объекту ElementFormat, который в свою очередь применяется к ContentElement в TextBlock. После применения объекта FontDescription к объекту ElementFormat для его свойства <codeph>locked</codeph> задается значение <codeph>true</codeph>. Изменение свойств заблокированного объекта FontDescription невозможно. Вместо этого необходимо использовать метод <codeph>clone()</codeph> для создания разблокированной копии объекта, который можно изменить и присвоить объекту ElementFormat.</p>
 
 <p><b>Примечание.</b> FTE не поддерживает шрифты Type 1 или растровые шрифты, такие как Type 3, ATC, sfnt-wrapped CID или Naked CID.</p>
 
 </apiDesc><example conref="examples\FontDescriptionExample.as"> <p>В этом примере создается объект <codeph>FontDescription</codeph>, ему назначается шрифт устройства, задаются разные свойства шрифта и назначается новый объект объекту <codeph>ElementFormat</codeph>. Дополнительное форматирование шрифта выполняется с помощью <codeph>ElementFormat</codeph>. Создается новый объект <codeph>TextElement</codeph> с использованием <codeph>ElementFormat</codeph>, затем этот<codeph>TextElement</codeph> используется в качестве содержимого для объекта <codeph>TextBlock</codeph>. Из объекта <codeph>TextBlock</codeph> создается текстовая строка.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescriptionExample extends Sprite {
        
        public function FontDescriptionExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/fontDescription"><linktext>flash.text.engine.ElementFormat.fontDescription</linktext></link></related-links><apiConstructor id="flash.text.engine:FontDescription:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 	 Создает объект FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Заданный языковой стандарт <codeph>fontWeight</codeph> не является членом <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>lineJustification</codeph> не является членом <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>fontPosture</codeph> не является членом <codeph>flash.text.engine.FontLookup</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>renderingMode</codeph> не является членом <codeph>flash.text.engine.renderingMode</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>cffHinting</codeph> не является членом <codeph>flash.text.engine.CFFHinting</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>_serif</apiData><apiDesc>Имя используемого шрифта или разделенный запятой список имен.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Задает толщину шрифта.
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Задает начертание шрифта.
	 </apiDesc></apiParam><apiParam><apiItemName>fontLookup</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>device</apiData><apiDesc>Задает метод поиска шрифта.
	 </apiDesc></apiParam><apiParam><apiItemName>renderingMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>cff</apiData><apiDesc>Режим визуализации, используемый для данного текста. Используйте константы <codeph>flash.text.engine.RenderingMode</codeph> для этого свойства.
	 </apiDesc></apiParam><apiParam><apiItemName>cffHinting</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>horizontalStem</apiData><apiDesc>Тип используемого для текста хинтинга CFF. Используйте константы <codeph>flash.text.engine.CFFHinting</codeph> для этого свойства.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Создает объект FontDescription.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:FontDescription:clone"><apiName>clone</apiName><shortdesc>
	 Создание разблокированной клонированной копии объекта FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Разблокированная копия объекта <codeph>FontDescription</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создание разблокированной клонированной копии объекта FontDescription.
	 
     </apiDesc><example conref="examples\FontDescription_cloneExample.as"> <p>В этом примере создается объект <codeph>FontDescription</codeph>, ему назначается шрифт устройства, задаются разные свойства шрифта и назначается новый объект (и таким образом блокируется) объекту <codeph>ElementFormat</codeph>. Создается новый объект <codeph>TextElement</codeph> с использованием <codeph>ElementFormat</codeph>, затем этот<codeph>TextElement</codeph> используется в качестве содержимого для объекта <codeph>TextBlock</codeph>. Из объекта <codeph>TextBlock</codeph> создается текстовая строка.</p>
 <p>Для изменения объекта <codeph>FontDescription</codeph> сначала проверьте его свойство <codeph>locked</codeph>. Если значение true, используйте метод <codeph>clone()</codeph> для создания разблокированной копии объекта <codeph>FontDescription</codeph>, измените его свойства и назначьте его новому объекту ElementFormat. Затем повторно создайте связь нового объекта <codeph>ElementFormat</codeph> и объекта <codeph>TextBlock</codeph>. При повторной разбивке строк новые строки получат новые параметры шрифтов.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescription_cloneExample extends Sprite {
        private var fd:FontDescription;
        private var fd2:FontDescription;
        
        public function FontDescription_cloneExample():void {
            fd = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            fd2 = (fd.locked) ? fd.clone() : fd;    
            fd2.fontWeight = flash.text.engine.FontWeight.NORMAL;
            var ef2:ElementFormat = new ElementFormat(fd2);

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:FontDescription:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Возвращает значение true, если доступен встроенный шрифт с указанными свойствами fontName, fontWeight и fontPosture, где Font.fontType – это flash.text.FontType.EMBEDDED_CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Заданный языковой стандарт <codeph>fontWeight</codeph> не является членом <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>lineJustification</codeph> не является членом <codeph>LineJustification</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Значение <codeph>true</codeph>, если доступен совместимый встроенный шрифт, в противном случае значение – <codeph>false</codeph>.
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Имя проверяемого встроенного шрифта.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Задает толщину шрифта. Используйте <codeph>flash.text.engine.FontWeight</codeph>
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Задает начертание шрифта. Используйте <codeph>flash.text.engine.FontPosture</codeph>
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает значение true, если доступен встроенный шрифт с указанными свойствами <codeph>fontName</codeph>, <codeph>fontWeight</codeph> и <codeph>fontPosture</codeph>, где <codeph>Font.fontType</codeph> – это <codeph>flash.text.FontType.EMBEDDED_CFF</codeph>. Начиная с Flash Player 10, SWF-файле могут отображаться два вида встроенных шрифтов. Обычные встроенные шрифты используются только объектами TextField. Встроенные шрифты CFF используются только классами flash.text.engine. Два типа различаются свойством <codeph>fontType</codeph> класса <codeph>Font</codeph>, возвращенным функцией <codeph>enumerateFonts()</codeph>.
	 
	 <p>Классы flash.text.engine не могут использовать шрифты типа <codeph>EMBEDDED</codeph>. Если <codeph>fontLookup</codeph> имеет значение <codeph>FontLookup.EMBEDDED_CFF</codeph> в среде выполнения единственным доступным шрифтом с заданным именем и стилем является шрифт типа <codeph>EMBEDDED</codeph>, Flash Player использует шрифты устройства и визуализирует текст глиф за глифом, как будто в файле нет встроенного шрифта с заданным именем и стилем.</p>
	 
	 <p>Если имеются шрифты <codeph>EMBEDDED</codeph> и <codeph>EMBEDDED_CFF</codeph> с одинаковым именем и стилем, выбирается шрифт типа <codeph>EMBEDDED_CFF</codeph>, и для визуализации текста используется шрифт <codeph>EMBEDDED_CFF</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:FontDescription:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
	 Тип используемого для текста хинтинга CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.CFFHinting</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Тип используемого для текста хинтинга CFF. Используйте константы <codeph>flash.text.engine.CFFHinting</codeph> для этого свойства. Это свойство применяется, только если свойство <codeph>flash.text.engine.RenderingMode</codeph> текста имеет значение <codeph>flash.text.engine.RenderingMode.CFF</codeph>.
	 
	 <p>Используемый тип хинтинга CFF определяет, будет ли Flash Player в принудительном порядке привязывать жирные горизонтальные основы к подписксельной сетке или нет.</p>
	 
	 <p>Применяется только к встроенным шрифтам.</p>
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.CFFHinting.HORIZONTAL_STEM</codeph>.</p>
	 
	 <p>Для свойства <codeph>flash.text.engine.CFFHinting</codeph> можно использовать следующие строковые значения.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	     <entry><codeph>CFFHinting.NONE</codeph></entry>
	     <entry>Задает отсутствие хинтинга CFF. Горизонтальные основы глифов не привязываются к подпиксельной сетке. Этот параметр подходит для анимации или для шрифтов большого размера.</entry>
	   </row><row>
	     <entry><codeph>CFFHinting.HORIZONTAL_STEM</codeph></entry>
	     <entry>Задает хинтинг CFF. Жирные горизонтальные основы привязываются к подпиксельной сетке на ЖК-мониторе. Чтобы использовать этот параметр, свойство <codeph>RenderingMode</codeph> должно иметь значение <codeph>RenderingMode.CFF</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#CFFHinting"><linktext>flash.text.engine.CFFHinting</linktext></link><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontDescription:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
	 Задает способ поиска шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает способ поиска шрифта.
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.FontLookup.DEVICE</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>FontLookup.DEVICE</codeph></entry>
	 	<entry>Для визуализации текста Flash Player ищет шрифт устройства с заданным свойством <codeph>name</codeph> в локальной системе.</entry>
	   </row><row>
	  <entry><codeph>FontLookup.EMBEDDED_CFF</codeph></entry>
	 	<entry>Для визуализации текста Flash Player ищет встроенный шрифт CFF с заданными свойством <codeph>name</codeph>. Рассматриваются только шрифты типа <codeph>flash.text.Font.fontType.EMBEDDED_CFF</codeph>. Если заданный шрифт CFF не встроен в SWF-файл, Flash Player пытается использовать резервный шрифт устройства для каждого глифа. Этот метод менее эффективен, чем изначальный выбор шрифта устройства.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontName:get"><apiName>fontName</apiName><shortdesc>
	 Имя используемого шрифта или разделенный запятой список имен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Имя используемого шрифта или разделенный запятой список имен. Flash Player визуализирует элемент с помощью первого доступного шрифта в списке. Например, если задать Arial, Helvetica, _sans проигрыватель сначала ищет Arial, затем Helvetica, если Arial не обнаружен, а потом _sans, если не обнаружен ни тот, ни другой.
	 
	 <p>Flash поддерживает три родовых имени шрифтов устройства: _sans (как Helvetica и Arial), _serif (как Times Roman) и _typewriter (как Courier). Они соотносятся с определенными шрифтами устройств в зависимости от платформы.</p>
	 
	 <p>Значением по умолчанию является <codeph>_serif</codeph>.</p>
	 
	 <p>Flash Player обеспечивает резервные шрифты для глифов, которых нет в выбранном шрифте. Независимо от того, встроен используемый шрифт или нет, если глиф не найден в данном шрифте, Flash Player пытается визуализировать его с использованием другого шрифта устройства, который может содержать нужный глиф.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontPosture:get"><apiName>fontPosture</apiName><shortdesc>
	 Задает начертание шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает начертание шрифта.
	 
	 <p>Применяется только к шрифтам устройства.</p>
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.FontPosture.NORMAL</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>FontPosture.NORMAL</codeph></entry>
	 	<entry>Обычное начертание шрифта.</entry>
	   </row><row>
	  <entry><codeph>FontPosture.ITALIC</codeph></entry>
	 	<entry>Курсивное начертание шрифта.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
	 Задает толщину шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.FontWeight</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает толщину шрифта.
	 
	 <p>Применяется только к шрифтам устройства.</p>
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.FontWeight.NORMAL</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>FontWeight.NORMAL</codeph></entry>
	 	<entry>Обычная толщина шрифта.</entry>
	   </row><row>
	  <entry><codeph>FontWeight.BOLD</codeph></entry>
	 	<entry>Полужирная толщина шрифта.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:locked:get"><apiName>locked</apiName><shortdesc>
	 Определяет, является ли объект FontDescription заблокированным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Определяет, является ли объект FontDescription заблокированным. Если задано значение <codeph>true</codeph>, изменение объекта FontDescription невозможно. Вызовите метод <codeph>FontDescription.clone()</codeph> для получения разблокированной копии объекта FontDescription.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
	 Режим визуализации, используемый для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся элементом <codeph>flash.text.engine.RenderingMode</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задается после блокирования объекта FontDescription (для свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Режим визуализации, используемый для данного текста. Используйте константы <codeph>flash.text.engine.RenderingMode</codeph> для этого свойства. 
	 
	 <p>Применяется только к встроенным шрифтам.</p>
	 
	 <p>Значением по умолчанию является <codeph>flash.text.engine.RenderingMode.CFF</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>RenderingMode.NORMAL</codeph></entry>
	 	<entry>Применяет обычную визуализацию текста, которая соответствует типу визуализации, используемому в Flash Player 7 и более ранних версиях.</entry>
	   </row><row>
	   	<entry><codeph>RenderingMode.CFF</codeph></entry>
	 	<entry>Применяет визуализацию CFF, которая делает текст более удобочитаемым. (Эта функция стала доступной в проигрывателе Flash Player 10.) Визуализация CFF обеспечивает высококачественную визуализацию шрифтов мелкого размера.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
 Класс TextJustifier является абстрактным базовым классом для типов выравнивания, которые можно применять к TextBlock, в частности, классы EastAsianJustifier и SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс TextJustifier является абстрактным базовым классом для типов выравнивания, которые можно применять к TextBlock, в частности, классы EastAsianJustifier и SpaceJustifier.
 
 <p>Нельзя создать экземпляры класса TextJustifier напрямую. При вызове <codeph>new TextJustifier()</codeph> выдается исключение <codeph>ArgumentError</codeph>. Если определить свойства объекта EastAsianJustifier или SpaceJustifier после его применения к TextBlock, объект TextBlock не становится недействительным.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:TextJustifier:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
	 При вызове конструктора new TextJustifier() выдается исключение ArgumentError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Языковой стандарт <codeph>locale</codeph> имеет значение <codeph>null</codeph> или значение, являющееся слишком коротким, чтобы быть действительным.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный языковой стандарт <codeph>lineJustification</codeph> не является членом <codeph>LineJustification</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Языковой стандарт, определяющий правила выравнивания по ширине.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Тип выравнивания по ширине строк в абзаце. Используйте константы <codeph>LineJustification</codeph> для этого свойства.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 При вызове конструктора <codeph>new TextJustifier()</codeph> выдается исключение <codeph>ArgumentError</codeph>. Однако <i>можно</i> вызывать конструкторы для следующих подклассов TextJustifier:
	 
	 <ul>
	 
	 	<li><codeph>new SpaceJustifier()</codeph></li>
	 	<li><codeph>new EastAsianJustifier()</codeph></li>
	 
	 </ul>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Создает клонированную копию объекта TextJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Копия объекта <codeph>TextJustifier</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает клонированную копию объекта TextJustifier.
	 
	 <p>Подклассы объекта TextJustifier должны перезаписывать этот метод.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextJustifier:getJustifierForLocale"><apiName>getJustifierForLocale</apiName><shortdesc>
	 Собирает подкласс TextJustifier, соответствующий заданному языковому стандарту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Языковой стандарт <codeph>locale</codeph> имеет значение <codeph>null</codeph> или значение, являющееся слишком коротким, чтобы быть действительным.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ссылка на объект <codeph>TextJustifier</codeph>.
     
     </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Языковой стандарт, определяющий выравнивание.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Собирает подкласс TextJustifier, соответствующий заданному языковому стандарту.
	 
	 <p>Китайский, японский и корейский языковые стандарты формируют объект EastAsianJustifier по умолчанию. В остальных случаях создается объект по умолчанию SpaceJustifier.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextJustifier:lineJustification:get"><apiName>lineJustification</apiName><shortdesc>
     Задает выравнивание по ширине строк для текста в блоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Задает выравнивание строк по ширине для текста в блоке. 
     
     <p>Действительными значениями для этого свойства являются константы, определенные в <codeph>LineJustification</codeph>.</p>
     
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>LineJustification.UNJUSTIFIED</codeph></entry>
	 	<entry>Не выравнивает строки.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_BUT_LAST</codeph></entry>
	 	<entry>Выравнивает все строки, кроме последней.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_INCLUDING_LAST</codeph></entry>
	 	<entry>Выравнивает все строки.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextJustifier:locale:get"><apiName>locale</apiName><shortdesc>
     Задает языковой стандарт для определения правил выравнивания по ширине для текста в блоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Языковой стандарт <codeph>locale</codeph> имеет значение <codeph>null</codeph> или его значение слишком короткое, чтобы быть действительным.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Задает языковой стандарт для определения правил выравнивания по ширине для текста в блоке. Используются стандартные идентификаторы языкового стандарта. Например en, en_US и en-US относятся к английскому, а ja – к японскому.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GroupElement"><apiName>GroupElement</apiName><shortdesc>
 Объект GroupElement группирует коллекцию объектов TextElement, GraphicElement или других объектов GroupElement, которые можно назначить как одно целое свойству content объекта TextBlock.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Объект GroupElement группирует коллекцию объектов TextElement, GraphicElement или других объектов GroupElement, которые можно назначить как одно целое свойству <codeph>content</codeph> объекта TextBlock. Объект GroupElement также может просто использовать общее форматирование с другим элементом GroupElement. 
 
 <p>Когда GroupElement содержит другой объект GroupElement, этот внутренний GroupElement сохраняет собственное форматирование (параметры ElementFormat). Он не наследует форматирование внешнего GroupElement.</p>
 
 <p>Большинство свойств форматирования не влияют на GroupElement. По этой причине можно создать текстовую строку для объекта GroupElement, имеющего нулевой параметр <codeph>elementFormat</codeph>. Несколько свойств формата, такие как <codeph>kerning</codeph> и <codeph>ligature</codeph>, все же оказывают влияние на форматирование там, где имеет место пересечение между членами группы. Если группа имеет нулевой формат, то при пересечении членов группы форматирование определяется форматом предшествующего элемента.</p>
  
 </apiDesc><example conref="examples\GroupElementExample.as"> В примере создается красная рамка в виде объекта GraphicElement и совмещается с двумя текстовыми элементами для создания объекта GroupElement. Назначает объект GroupElement свойству <codeph>content</codeph> текстового блока TextBlock, из которого создаются три строки.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.ContentElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GroupElementExample extends Sprite {
        
        public function GroupElementExample():void {
            
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0, 0, 20, 20);
            redBox.graphics.endFill(); 
            
            var format:ElementFormat = new ElementFormat();
            var fontDescription:FontDescription = new FontDescription("Arial");
            format.fontSize = 16;
            format.fontDescription = fontDescription;
            
            var str1:String = "This red box is a GraphicElement ";
            var str2:String = " in the middle of two TextElements, " +
            " which together make " +
            "up a GroupElement in a TextBlock that is broken into three lines.";
            
            var textElement1:TextElement = new TextElement(str1,format);
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textElement2:TextElement = new TextElement(str2, format);
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>();
            groupVector.push(textElement1, graphicElement, textElement2);
            var groupElement = new GroupElement(groupVector);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = groupElement;
            createTextLines(textBlock);
        }
        
        private function createTextLines(textBlock:TextBlock):void 
        {
        
            var yPos = 20;
            var line_length:Number = 450;
            var textLine:TextLine = textBlock.createTextLine (null, line_length);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.height+8;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, line_length);
            }
        }
    }    
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links><apiConstructor id="flash.text.engine:GroupElement:GroupElement"><apiName>GroupElement</apiName><shortdesc>
	 Создает новый экземпляр GroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Заданный <codeph>element</codeph> содержит элементы со значением <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>element</codeph> содержит элемент, не являющийся известным подклассом <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>element</codeph> содержит элементы, заданные в качестве значения <codeph>content</codeph> объекта <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>element</codeph> содержит элементы, которые уже являются членами группы, либо встречаются более одного раза в <codeph>elements</codeph>.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>elements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiData>null</apiData><apiDesc>Вектор объектов ContentElement в GroupElement. Вектор может быть пуст. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Формат элемента для группы. По умолчанию используется <codeph>null</codeph>. Формат применяется к пересечениям элементов в группе, эти элементы не наследуют формат.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект <codeph>EventDispatcher</codeph>, получающий копии каждого события, вызванного для текстовых строк, созданных на основе данного элемента содержимого. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>При вращении элемент был использован в качестве единого целого. Используйте константы <codeph>TextRotation</codeph> для этого свойства. Значение по умолчанию равно <codeph>TextRotation.ROTATE_0</codeph>. 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Создает новый экземпляр GroupElement.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:GroupElement:getElementAt"><apiName>getElementAt</apiName><shortdesc>
	 Возвращает элемент из группы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если <codeph>index</codeph> вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Индекс получаемого элемента.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает элемент из группы.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementAtCharIndex"><apiName>getElementAtCharIndex</apiName><shortdesc>
	 Возвращает элемент, содержащий символ, заданный параметром charIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если <codeph>charIndex</codeph> вне диапазона <codeph>0 – rawText.length</codeph>.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент, содержащий символ с индексом <codeph>charIndex</codeph>
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение символа, чей элемент нужно найти. Значение 0 соответствует первому символу в группе, ноне первому символу TextBlock.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает элемент, содержащий символ, заданный параметром <codeph>charIndex</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
	 Возвращает элемент, содержащий символ, заданный параметром element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс элемента, заданный свойством <codeph>element</codeph> или -1, если элемент вне группы.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiDesc>Элемент в группе, индекс которого необходимо возвратить.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает элемент, содержащий символ, заданный параметром <codeph>element</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:groupElements"><apiName>groupElements</apiName><shortdesc>
	 Заменяет диапазон элементов, который задается параметрами beginIndex и endIndex  для нового GroupElement с этими элементами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индексы <codeph>beginIndex</codeph> или <codeph>endIndex</codeph> находятся вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Новая группа.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:GroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса для начального положения диапазона группировки.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса, следующее за конечным положением диапазона группировки.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Заменяет диапазон элементов, который задается параметрами <codeph>beginIndex</codeph> и <codeph>endIndex </codeph> для нового <codeph>GroupElement</codeph> с этими элементами. Согласно проекту, заменяются элементы от beginIndex до endIndex-1.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:mergeTextElements"><apiName>mergeTextElements</apiName><shortdesc>
	 Смешивает текст из диапазона элементов, задаваемого параметрами beginIndex и endIndex в элементе, заданном beginIndex без изменения формата элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индексы <codeph>beginIndex</codeph> или <codeph>endIndex</codeph> находятся вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Если какой-либо элемент в диапазоне не является объектом TextElement.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Первый текстовый элемент в диапазоне, теперь содержащим весь текст диапазона.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса для начального положения диапазона замены.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса, следующее за конечным положением диапазона слияния.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Смешивает текст из диапазона элементов, задаваемого параметрами <codeph>beginIndex</codeph> и <codeph>endIndex</codeph> в элементе, заданном <codeph>beginIndex</codeph> без изменения формата элемента. Согласно проекту, сливаются элементы от beginIndex до endIndex-1. После смешивания текста элементы от beginIndex+1 до endIndex-1 удаляются из группы и для них отменяются родители, значение <codeph>null</codeph> присваивается их свойству <codeph>group</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:replaceElements"><apiName>replaceElements</apiName><shortdesc>
	 Заменяет диапазон элементов, заданный параметрами beginIndex и endIndex, содержанием параметра newElements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Заданный параметр <codeph>beginIndex</codeph> или <codeph>endIndex</codeph> находится за пределами диапазона.
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>newElements</codeph> содержит элементы со значением <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>newElements</codeph> содержит элементы <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>newElements</codeph> содержит элементы, которые не являются известными подклассами <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>newElements</codeph> содержит элементы, заданные в качестве значения свойства <codeph>content</codeph> объекта <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное свойство <codeph>newElements</codeph> содержит элементы, которые уже являются членами группы, либо встречаются более раза в <codeph>elements</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если операция должна привести к вложенным вращениям внутри элемента <codeph>GroupElement</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Вектор, содержащий замещенные элементы.
	  
     </apiDesc><apiType value="Vector$flash.text.engine:ContentElement"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса для начального положения диапазона замены.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса, следующее за конечным положением диапазона замены.
	 </apiDesc></apiParam><apiParam><apiItemName>newElements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiDesc>Элементы для замены заданного диапазона элементов.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Заменяет диапазон элементов, заданный параметрами <codeph>beginIndex</codeph> и <codeph>endIndex</codeph>, содержанием параметра <codeph>newElements</codeph>. Согласно проекту, заменяются элементы от beginIndex до endIndex-1.
	 <p>Для создания элементов передайте <codeph>null</codeph> для <codeph>newElements</codeph>.</p>
	 <p>Для вставки элемента передайте то же значение для <codeph>beginIndex</codeph> и <codeph>endIndex</codeph>. Новый элемент вставляется перед заданным индексом.</p>
	 <p>Для добавления элемента передайте <codeph>elementCount</codeph> для <codeph>beginIndex</codeph> и <codeph>endIndex</codeph>.</p>
	 <p>После выполнения операции замещенные элементы лишаются родителей и принимают значение <codeph>null</codeph> для свойств <codeph>group</codeph>.</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:setElements"><apiName>setElements</apiName><shortdesc>
	 Устанавливает элементы в группе для содержимого вектора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Заданное <codeph>значение</codeph> содержит элементы <codeph>null</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное <codeph>значение</codeph> содержит элементы <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное <codeph>значение</codeph> содержит элементы, которые не являются известными подклассами <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное <codeph>значение</codeph> содержит элементы в виде <codeph>content</codeph>, которые не являются известными подклассами <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное <codeph>значение</codeph> содержит элементы, которые уже являются членами группы, либо встречаются более раза в <codeph>значении</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если операция должна привести к вложенным вращениям внутри элемента <codeph>GroupElement</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/></apiParam></apiOperationDef><apiDesc>
	 Устанавливает элементы в группе для содержимого вектора.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:splitTextElement"><apiName>splitTextElement</apiName><shortdesc>
	 Разбивает позицию TextElement в группе на новый TextElement, который вставляется в группу, следующую за указанным элементом TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индексы <codeph>elementIndex</codeph> или <codeph>charIndex</codeph> лежат вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Если элемент по индексу <codeph>elementIndex</codeph> не является TextElement.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Новый элемент, содержащий последнюю часть исходного текстового элемента.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемый от нуля индекс положения элемента в группе.
	 </apiDesc></apiParam><apiParam><apiItemName>splitIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемый от нуля индекс положения элемента в TextElement, где будет производиться разбиение. Заданный символ – это первый символ нового TextElement.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Разбивает позицию TextElement в группе на новый TextElement, который вставляется в группу, следующую за указанным элементом TextElement.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:ungroupElements"><apiName>ungroupElements</apiName><shortdesc>
	 Разгруппировывает элементы во вложенном GroupElement, который задается с помощью groupIndex внутри внешнего GroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если <codeph>groupIndex</codeph> вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Если элемент по индексу <codeph>groupIndex</codeph> не является объектом GroupElement.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>groupIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемый от нуля индекс для положения разбиваемой группы.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Разгруппировывает элементы во вложенном GroupElement, который задается с помощью <codeph>groupIndex</codeph> внутри внешнего GroupElement. После выполнения операции разгрупированные элементы заменяют вложенный GroupElement, который становится элементом без родителей со значением <codeph>null</codeph> свойства <codeph>group</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:GroupElement:elementCount:get"><apiName>elementCount</apiName><shortdesc>
	 Количество элементов в группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Количество элементов в группе.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ContentElement"><apiName>ContentElement</apiName><shortdesc>
 Класс ContentElement служит в качестве базового класса для типов элементов, которые могут появляться в GroupElement, а именно: объект GraphicElement, другой GroupElement или TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс ContentElement служит в качестве базового класса для типов элементов, которые могут появляться в GroupElement, а именно: объект GraphicElement, другой GroupElement или TextElement.
 
 <p>ContentElement – это абстрактный базовый класс, поэтому экземпляры ContentElement нельзя создавать непосредственно. При вызове <codeph>new ContentElement()</codeph> выдается исключение <codeph>ArgumentError</codeph>. </p>
 
 <p>Элемент ContentElement можно назначить только одному <codeph>GroupElement</codeph> или свойству <codeph>content</codeph> только одного текстового блока.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock/content"><linktext>TextBlock.content</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links><apiConstructor id="flash.text.engine:ContentElement:ContentElement"><apiName>ContentElement</apiName><shortdesc>
	При вызове конструктора new СontentElement() выдается исключение ArgumentError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Формат элемента для текста в элементе. По умолчанию используется <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект <codeph>EventDispatcher</codeph>, получающий копии каждого события, вызванного для действительных текстовых строк, созданных на основе данного элемента содержимого. По умолчанию используется <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>При вращении элемент был использован в качестве единицы измерения. Используйте константы <codeph>TextRotation</codeph> для этого свойства. Значение по умолчанию равно <codeph>TextRotation.ROTATE_0</codeph>.
   	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	При вызове конструктора <codeph>new СontentElement()</codeph> выдается исключение <codeph>ArgumentError</codeph>. Однако <i>можно</i> вызывать конструкторы для следующих подклассов ContentElement:
	
	<ul>
	
		<li><codeph>new GraphicElement()</codeph></li>
		<li><codeph>new GroupElement()</codeph></li>
		<li><codeph>new TextElement()</codeph></li>
	
	</ul>
	
 	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.engine:ContentElement:GRAPHIC_ELEMENT"><apiName>GRAPHIC_ELEMENT</apiName><shortdesc> 
	Указывает на присутствие в тексте графического элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFDEF</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает на присутствие в тексте графического элемента.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/rawText"><linktext>rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:userData"><apiName>userData</apiName><shortdesc>
	 Дает возможность автору связать произвольные данные с элементом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Дает возможность автору связать произвольные данные с элементом.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:elementFormat:get"><apiName>elementFormat</apiName><shortdesc>
	 Объект ElementFormat, используемый для элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ElementFormat</apiValueClassifier></apiValueDef><apiDesc>
	 Объект ElementFormat, используемый для элемента.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 <p>Если задается свойство elementFormat, предоставленный объект ElementFormat заблокирован: для его свойства <codeph>locked</codeph> задано значение <codeph>true</codeph>. Изменение заблокированного объекта ElementFormat невозможно.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:eventMirror:get"><apiName>eventMirror</apiName><shortdesc>
	 Объект EventDispatcher, получающий копии каждого события, вызванного для действительных текстовых строк, созданных на основе данного элемента содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 Объект <codeph>EventDispatcher</codeph>, получающий копии каждого события, вызванного для действительных текстовых строк, созданных на основе данного элемента содержимого. Заданный объект может использоваться для настройки прослушивателей для текстовой ссылки или другого интерактивного фрагмента текста, так как при исполнении может быть сложно определить, какие части строк получены от определенных элементов содержимого. Также прослушиватели можно использовать для применения отделки, например подчеркивания, показатели которой невозможно определить до раскладки текста. Значение по умолчанию – <codeph>null</codeph>, то есть, зеркальные события не отправляются.
	 
	 <p>Зеркала событий представлены в текстовых строках в качестве экземпляров класса <codeph>TextLineMirrorRegion</codeph>. В зависимости от двунаправленной обработки и разрывов строк, можно создавать одну или несколько зеркальных областей.</p>
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextElement/eventMirror"><linktext>TextElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:groupElement:get"><apiName>groupElement</apiName><shortdesc>
	 Объект GroupElement, содержащий этот элемент, или null, если это не группа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:GroupElement</apiValueClassifier></apiValueDef><apiDesc>
	 Объект GroupElement, содержащий этот элемент, или <codeph>null</codeph>, если это не группа.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:rawText:get"><apiName>rawText</apiName><shortdesc>
	 Копия текста в элементе, включая символы U+FDEF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Копия текста в элементе, включая символы U+FDEF. Символ U+FDEF представляет собой произвольный символ, представляющий графический элемент в объекте String.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:text:get"><apiName>text</apiName><shortdesc>
	 Копия текста в элементе, за исключением символов U+FDEF, представляющих графические элементы в объекте String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Копия текста в элементе, за исключением символов U+FDEF, представляющих графические элементы в объекте String.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextElement/text"><linktext>TextElement.text</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 Объект TextBlock, которому принадлежит этот элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 Объект TextBlock, которому принадлежит этот элемент.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 Индекс в первого символа в этом элементе текстового блока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Индекс в первого символа в этом элементе текстового блока. Это значение берется не из кэша, а вычисляется при каждом вызове метода.
	 
	 <p>Значением по умолчанию является -1.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Поворот, который должен применяться к элементу, как к едином целому.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся членом <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задано значение <codeph>TextRotation.AUTO</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если операция должна привести к вложенным вращениям внутри элемента <codeph> GroupElement</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Поворот, который должен применяться к элементу, как к едином целому. Используйте константы <codeph>TextRotation</codeph> для этого свойства.
	 
	 <p>Значение по умолчанию равно <codeph>TextRotation.ROTATE_0</codeph>.</p>
	 
	 <p>Конечный поворот любого глифа является суммой ElementFormat.textRotation, ContentElement.textRotation и TextBlock.lineRotation.</p>
	 
	 <p><codeph>ContentElement.textRotation</codeph> используется для создания короткого фрагмента текста, поворот которого отличается от поворота содержащей его строки. В качестве примера можно привести фрагменты TCY в японском тексте. TCY – это сокращение от Tate-Chu-Yoko, так называется размещение небольшого фрагмента текста по горизонтали (обычно это числа) среди вертикального японского текста. Чтобы создать абзац вертикального японского текста с фрагментом TCY, выполните следующие действия.</p>
	 <ol>
	 <li>Задайте <codeph>TextBlock.lineRotation=TextRotation.ROTATE_90</codeph></li>
	 <li>Задайте для <codeph>TextBlock.content</codeph> объект <codeph>GroupElement</codeph>, состоящий из трех объектов <codeph>TextElement</codeph>. Первый из этих элементов – это японский текст до фрагмента TCY, второй – латинский текст фрагмента TCY, а третий – японский текст после TCY.</li>
	 <li>Задайте свойству <codeph>textRotation</codeph> объекта TCY <codeph>TextElement</codeph> значение <codeph>TextRotation.ROTATE_270</codeph>. Текстовый элемент TCY поворачивается как единое целое. Операция начинается с поворота на 90 градусов, унаследованного от строки. Добавление поворота на 270 градусов переводит фрагмент в горизонтальное положение.</li>
	 </ol>
	 
	 <p>Повернутые элементы содержимого не поддерживают вложенность. В любой иерархии элементов содержимого, независимо от уровня сложности, свойство <codeph>textRotation</codeph> можно задать только для одного элемента. Следующие методы и функции определения свойств выдают ошибку аргумента в случае обнаружения вложенного поворота:</p>
	 <ol>
	 <li><codeph>ContentElement.textRotation</codeph></li>
	 <li><codeph>GroupElement.setElements</codeph></li>
	 <li><codeph>GroupElement.replaceElements</codeph></li>
	 </ol>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Элемент не поворачивается.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Элемент поворачивается на 90 градусов по часовой стрелке.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Элемент поворачивается на 180 градусов.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Элемент поворачивается на 270 градусов по часовой стрелке.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Не поддерживается.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 Класс TextBlock является базовым для создания объектов TextLine, которые можно визуализировать, добавляя в список отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс TextBlock является базовым для создания объектов TextLine, которые можно визуализировать, добавляя в список отображения.
 
 <p>Класс TextBlock должен содержать один абзац, так как алгоритмы двунаправленности и разрывов строк в Юникод одновременно могут обрабатывать один абзац. Для приложений, создающих несколько абзацев текста, используйте язык разметки или анализ текста, чтобы разбить текст на абзацы и создать для каждого из них объект TextBlock.</p>
 
 <p>Объект TextBlock сохраняет свое содержимое в свойстве <codeph>content</codeph>, которое является экземпляром класса ContentElement. Так как невозможно создать экземпляр класса ContentElement, задайте для <codeph>content</codeph> экземпляр одного из его подклассов: TextElement, GraphicElement или GroupElement. Используйте TextElement для чисто текстового содержимого, GraphicElement для изображений или графического содержимого и GroupElement для содержимого, в котором сочетаются объекты TextElement, GraphicElement и другие объект GroupElement. Подробные сведения об управлении форматированными фрагментами текста, встроенными фрагментами и графическими элементами см. описание класса ContentElement.</p>
 
 <p>Создав экземпляр TextBlock и настроив его свойство <codeph>content</codeph>, вызовите метод <codeph>createTextLine()</codeph>, чтобы создать строки текста, являющиеся экземплярами класса <codeph>TextLine</codeph>. </p>
 
 </apiDesc><example conref="examples\TextBlockExample.as"> В этом примере демонстрируется три абзаца TextBlock японского и английского текста. Японский текст из кодов символов Юникод преобразуется в строки. При нажатии кнопки пример поворачивает текст из горизонтального в вертикальное положение или наоборот.
 <ol>
     <li>Добавьте Button в библиотеку.</li>
  <li>Сохраните этот код под именем TextBlockExample.as в том же каталоге, где и FLA-файл.</li>
  <li>Задайте класс TextBlockExample на панели «Свойства» в FLA-файле.</li>
 </ol>

<codeblock>
package { 
    import fl.controls.Button;
     import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextRotation;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.LineJustification;
    import flash.text.engine.FontDescription;
    import flash.text.engine.EastAsianJustifier; 
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.display.Stage;
    import flash.events.MouseEvent;
    import flash.system.Capabilities;
    
    public class TextBlockExample extends Sprite {
        
        var vertical:Boolean;    
        var container:Sprite;
        var textBlocks:Vector.&lt;TextBlock>;
        var loader:Loader = new Loader();
        var directionButton:Button = new Button();
        
        public function TextBlockExample():void {
            addChild(directionButton);
            directionButton.width = 30;
            directionButton.move(50, 350);
            directionButton.addEventListener(MouseEvent.CLICK, clickHandler);
            createContent();
            createLines();
        }

        private function createEmptyBlock():TextBlock {
        
            var textBlock:TextBlock = new TextBlock();
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_BUT_LAST);
            textBlock.lineRotation = vertical? TextRotation.ROTATE_90: TextRotation.ROTATE_0;
            return textBlock;    
        }
        
        private function paragraph1(format:ElementFormat):TextBlock {
        
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;
        }

        private function paragraph2(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x30AF, 0x30ED, 0x30B9, 0x30D7, 0x30E9, 0x30C3, 0x30C8, 0x30D5, 
                0x30A9, 0x30FC, 0x30E0, 0x4E0A, 0x3067, 0x518D, 0x751F, 0x53EF, 
                0x80FD, 0x306A
            ) + 
            "Flash Video" +
            String.fromCharCode(
                0x3092, 0x914D, 0x4FE1, 0x3001, 0x653F, 0x5E9C, 0x6700, 0x65B0, 
                0x60C5, 0x5831, 0x3092, 0x3088, 0x308A, 0x591A, 0x304F, 0x306E, 
                0x56FD, 0x6C11, 0x306B, 0x9AD8, 0x54C1, 0x8CEA, 0x306A, 0x753B, 
                0x50CF, 0x3067, 0x7C21, 0x5358, 0x304B, 0x3064, 0x30EA, 0x30A2, 
                0x30EB, 0x30BF, 0x30A4, 0x30E0, 0x306B, 0x63D0, 0x4F9B, 0x3059, 
                0x308B, 0x3053, 0x3068, 0x304C, 0x53EF, 0x80FD, 0x306B, 0x306A, 
                0x308A, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;    
        }

        private function paragraph3(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(0x3010) +
            "2007" +
            String.fromCharCode(0x5E74) + "2" + String.fromCharCode(0x6708) +
            "21" +
            String.fromCharCode(0x65E5, 0x3011),
            format);
            return textBlock;    
        }

        private function createContent():void {
            
            var font:FontDescription = new FontDescription();
            if (Capabilities.os.search("Mac OS") > -1) 
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R"; // "Kozuka Mincho Pro R"                    koFont.fontName = "Adobe " + String.fromCharCode(0xBA85, 0xC870) + " Std M"; // "Adobe Myungjo Std M"
            else 
                font.fontName = "Kozuka Mincho Pro R";        
            var format:ElementFormat = new ElementFormat();
            format.fontDescription = font;
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0x000000;
            if (!vertical) 
                format.textRotation = TextRotation.ROTATE_0; 
            textBlocks = new Vector.&lt;TextBlock>();
            textBlocks.push(
                paragraph1(format),
                paragraph2(format),
                paragraph3(format)//,
            );
        }

        private function createLines():void {    
        
            if (container != null) {
                removeChild(container);
            }            
            container = new Sprite();
            container.y = 45;
            container.x = 40;
            addChild(container);
            var linePosition:Number = vertical? this.stage.stageWidth - 120: 12;
        
            for (var i:uint = 0; i &lt; textBlocks.length; i++) {
                var textBlock:TextBlock = textBlocks[i];
                var previousLine:TextLine = null;
        
                while (true) {
                    var textLine:TextLine = textBlock.createTextLine(
                        previousLine, 
                        300);
                    if (textLine == null) 
                        break;
                    if (vertical) 
                    {
                        textLine.x = linePosition;
                        linePosition -= 24;
                        directionButton.label = " -- ";
                    }
                    else 
                    {
                        textLine.y = linePosition+50;
                        linePosition += 24;
                        directionButton.label = " | ";
                    }
                    container.addChild(textLine);                
                    previousLine = textLine;
                }
                if (vertical) 
                    linePosition -= 16;
                else 
                    linePosition += 16; 
            }
        }

        private function clickHandler(event:MouseEvent):void {
            
            vertical = !vertical;
            createContent();
            createLines();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links><apiConstructor id="flash.text.engine:TextBlock:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 	 Создает объект TextBlock
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Заданный <codeph>content</codeph> не является известным подклассом <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>content</codeph> уже является членом группы.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданная локаль <codeph>lineRotation</codeph> не является членом <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданная локаль <codeph>baselineZero</codeph> не является членом <codeph>TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>bidiLevel</codeph> меньше 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>tabStops</codeph> содержит <codeph>null</codeph> элементов.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданные <codeph>tabStops</codeph> не отсортированы по возрастанию позиции.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданный <codeph>baselineFontSize</codeph> меньше 0.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Содержимое текстового блока.
	 </apiDesc></apiParam><apiParam><apiItemName>tabStops</apiItemName><apiType value="Vector$flash.text.engine:TabStop"/><apiData>null</apiData><apiDesc>Отступы для текста в блоке.
     </apiDesc></apiParam><apiParam><apiItemName>textJustifier</apiItemName><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект TextJustifier для использования в этом блоке при создании строки. Средство расстановки переносов отсутствует, будет создано средство по умолчанию на основе английского языка.
     </apiDesc></apiParam><apiParam><apiItemName>lineRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Вращение, примененное к текстовым строкам, созданным из текстового блока в виде единиц.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineZero</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Указывает, какая базовая строка находит в точке y=0 для всех строк блока.
     </apiDesc></apiParam><apiParam><apiItemName>bidiLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Уровень двусторонней вложенности текста в блоке по умолчанию.
	 </apiDesc></apiParam><apiParam><apiItemName>applyNonLinearFontScaling</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Указывает, что необходимо улучшить внешний вид экрана за счет качества печати визуального редактора.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Задает описание шрифта, из которого нужно выводить базовые строки для всех строк блока.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>Задает размер для использования с baselineFontDescription. Этот параметр игнорируется, если <codeph>baselineFontDescription</codeph> равно <codeph>null</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Создает объект TextBlock
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TextBlock/applyNonLinearFontScaling"><linktext>applyNonLinearFontScaling</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>baselineZero</linktext></link><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>bidiLevel</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>lineRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>tabStops</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextBlock:createTextLine"><apiName>createTextLine</apiName><shortdesc>
	 Предписывает текстовому блоку создать строку текста из своего содержимого, которая бы начиналась в точке, заданной параметром previousLine, и заканчивалась в точке, заданной параметром width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если элемент TextLine, заданный параметром <codeph>previousLine</codeph>, недействителен.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если <codeph>width</codeph> меньше нуля, кроме случаев, когда <codeph>fitSomething</codeph> равно true.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если значение <codeph>width</codeph> больше, чем <codeph>TextLine.MAX_LINE_WIDTH</codeph>.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если один или несколько элементов содержимого текстового блока равны <codeph>null ElementFormat</codeph>.
     	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Текстовая строка или <codeph>null</codeph>, если текстовый блок пуст или его ширина меньше ширины текстового элемента. Для различения этих случаев проверьте свойство <codeph>textLineCreationResult</codeph> текстового блока.
     	 
     	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>previousLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает на ранее короткую строку, которой закрывается абзац. Может быть <codeph>null</codeph>, если первая строка короткая.
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000000</apiData><apiDesc>Указывает требуемую ширину строки в пикселях. Фактическая ширина может быть меньше.
	 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Необязательный параметр, задающий разницу в пикселях между началом линии и отступом. Может использоваться, если строки не выровнены, но при этом необходимо выровнять их отступы. Значение этого параметра по умолчанию <codeph>0,0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Необязательный параметр, который предписывает проигрывателю Flash Player вместить хотя бы один символ в текстовую строку вне зависимости от того, какая задана ширина (даже если она равна нулю или отрицательна, что в остальных случаях приводит к исключению).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Предписывает текстовому блоку создать строку текста из своего содержимого, которая бы начиналась в точке, заданной параметром <codeph>previousLine</codeph>, и заканчивалась в точке, заданной параметром <codeph>width</codeph>. Текстовая строка – это объект TextLine, который можно добавить к списку отображения.
	 
	 <p>Разрыв строк в диапазоне текста в блоке, который уже разорван, может привести к изменению валидности строк в диапазоне разрыва и после него. Состояние строк может меняться с VALID на INVALID или POSSIBLY_INVALID. Если заново разорванная строка выравнивается с ранее разорванной строкой с состоянием POSSIBLY_INVALID, ранее разорванная строка и все последующие с состоянием POSSIBLY_INVALID снова меняют состояние на VALID. Валидность строк, значения которых не являются членами класса <codeph>TextLineValidity</codeph> не изменяются на VALID, но могут измениться на INVALID. Проверьте свойство <codeph>firstInvalidLine</codeph> после внесения любых изменений в текстовый блок, чтобы увидеть, где начинается или возобновляется разрыв строк.</p>
	 
	 <p>Можно создать искусственные разрывы слов, включив в текст нулевой пробел Unicode (ZWSP). Это может быть полезно для таких языков, как тайский, где для правильного разрыва строк требуется словарь. В проигрыватель Flash Player не встроен такой словарь.</p>
	 
	 </apiDesc><example conref="examples\TextBlock_createTextLineExample.as"> В примере показано, как вызывать метод <codeph>createTextLine()</codeph> для создания текстовых строк в текстовом блоке. Проигрыватель выполняет для этого следующие действия:
  <ul>
     <li>создает элемент TextElement из строки и задает для него размер шрифта 20;</li> 
     <li>создает объект TextBlock и назначает ему TextBlock;</li>
     <li>Вызов метода <codeph>createTextLine()</codeph> для создания строки шириной 300 пикселей из текстового блока;</li>
    <li>помещает каждую строку в рабочую область (<codeph>addChild()</codeph>) и задает положение (<codeph>x</codeph> и <codeph>y</codeph>).</li>
  </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_createTextLineExample extends Sprite {
        
        public function TextBlock_createTextLineExample():void {
            
            var str:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. The createTextLine() method " +
            "then created these lines, 300 pixels wide, for display." ;
            
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 16;
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock); 
        }
        
        private function createLines(textBlock:TextBlock):void 
        {            
            var lineWidth:Number = 300;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:dump"><apiName>dump</apiName><shortdesc>
	 Выдает базовое содержимое TextBlock в виде строки XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Выдает базовое содержимое TextBlock в виде строки XML. Это может пригодиться при автоматическом тестировании, т.к. включает сведения о тексте, формате и визуализации. Опция доступна только в отладчике Flash Player.
	 
	 <p><b>Примечание.</b> Содержимое и формат вывода могут измениться в будущем. Adobe не гарантирует обратной совместимости данного метода.</p>
	 
	 <p>В следующей таблице показаны выходные данные:</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>Тег</entry><entry>Атрибут</entry><entry>Описание</entry></row></thead><tbody><row><entry><codeph>&lt;block></codeph></entry><entry> </entry><entry>TextBlock</entry></row><row><entry><codeph>&lt;line</codeph></entry><entry> </entry><entry>TextLine</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>начальный встроенный элемент запуска</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>ограничение встроенного элемента запуска</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>закрытие тега line</entry></row><row><entry><codeph>&lt;run</codeph></entry><entry> </entry><entry>элементы строки</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>начальный встроенный элемент запуска</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>ограничение встроенного элемента запуска</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>закрытие тега run</entry></row><row><entry><codeph>&lt;inter</codeph></entry><entry> </entry><entry>внутренний элемент</entry></row><row><entry> </entry><entry><codeph>cursor=</codeph></entry><entry>курсор символа (индекс исходного текста)</entry></row><row><entry> </entry><entry><codeph>tcb=</codeph></entry><entry>граница типографического кластера</entry></row><row><entry> </entry><entry><codeph>wb=</codeph></entry><entry>граница слова</entry></row><row><entry> </entry><entry><codeph>lbo=</codeph></entry><entry>возможный разрыв строки</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>действительный разрыв строки</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>конец тега inter</entry></row><row><entry><codeph>&lt;char</codeph></entry><entry> </entry><entry>элемент символа</entry></row><row><entry> </entry><entry><codeph>usv=</codeph></entry><entry>Скалярное значение в кодировке Юникод</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>конец тега char</entry></row><row><entry><codeph>&lt;glyph</codeph></entry><entry> </entry><entry>вычисленный или сформированный элемент глифа</entry></row><row><entry> </entry><entry><codeph>font=</codeph></entry><entry>название шрифта</entry></row><row><entry> </entry><entry><codeph>gid=</codeph></entry><entry>индекс глифа</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>вращение</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>attached=</codeph></entry><entry>соединены ли два элемента</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>смещения внутренних типографических границ кластера</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>двусторонний уровень</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>интервальный класс</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>конец тега glyph</entry></row><row><entry><codeph>&lt;fo</codeph></entry><entry> </entry><entry>графический элемент</entry></row><row><entry> </entry><entry><codeph>id=</codeph></entry><entry>идентификатор элемента</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>вращение</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>левая граница</entry></row><row><entry> </entry><entry><codeph>rb=</codeph></entry><entry>правая граница</entry></row><row><entry> </entry><entry><codeph>tb=</codeph></entry><entry>верхняя граница</entry></row><row><entry> </entry><entry><codeph>bb=</codeph></entry><entry>нижняя граница</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>смещения внутренних типографических границ кластера</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>двусторонний уровень</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>интервальный класс</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>конец тега fo</entry></row><row><entry><codeph>&lt;embeddedRun</codeph></entry><entry> </entry><entry>встроенный запуск</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>вращение</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>закрытие тега embeddedRun</entry></row><row><entry><codeph>&lt;run></codeph></entry><entry> </entry><entry>запуск</entry></row><row><entry><codeph>&lt;/run></codeph></entry><entry> </entry><entry>окончание тега run</entry></row><row><entry><codeph>&lt;/embeddedRun></codeph></entry><entry> </entry><entry>закрытие тега embeddedRun</entry></row><row><entry><codeph>&lt;carets</codeph></entry><entry> </entry><entry>знаки вставки строки</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>начальный встроенный элемент запуска</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>ограничение встроенного элемента запуска</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>закрытие тега carets</entry></row><row><entry><codeph>&lt;cursor></codeph></entry><entry> </entry><entry>курсор</entry></row><row><entry> </entry><entry><codeph>x=</codeph></entry><entry>положение по х слева</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>конец тега cursor</entry></row><row><entry><codeph>&lt;cluster</codeph></entry><entry> </entry><entry>кластер</entry></row><row><entry> </entry><entry><codeph>c=</codeph></entry><entry>положение по центру</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>начало смещения tc</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>ограничение смещения tc</entry></row><row><entry> </entry><entry><codeph>bidi</codeph></entry><entry>двусторонний уровень</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>конец тега cluster</entry></row><row><entry><codeph>&lt;/carets></codeph></entry><entry> </entry><entry>закрытие тега carets</entry></row><row><entry><codeph>&lt;/строка></codeph></entry><entry> </entry><entry>закрытие тега line</entry></row><row><entry><codeph>&lt;/block></codeph></entry><entry> </entry><entry>закрытие тега block</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/dump()"><linktext>TextLine.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc>
	 Находит индекс следующей границы атома для заданного индекса символа, исключая символ по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный <codeph>индекс</codeph> лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Строка TextLine, которой принадлежит индексируемый символ, недействительна.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс следующей границы атома после заданного индекса символа.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Задает индекс символа, после которого нужно искать следующую границу атома.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Находит индекс следующей границы атома для заданного индекса символа, исключая символ по заданному индексу. Символы между границами атомов вместе формируют один атом в <codeph>TextLine</codeph>, например, «e» и надстрочный значок ударения.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc>
	 Находит индекс следующей границы слова от указанного индекса символа, исключая символ по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный <codeph>индекс</codeph> лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Строка TextLine, которой принадлежит индексируемый символ, недействительна.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс следующей границы слова после заданного индекса символа.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Задает индекс символа, после которого нужно искать следующую границу слова.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Находит индекс следующей границы слова от указанного индекса символа, исключая символ по заданному индексу. Границы слов определяются на основе свойств символов в кодировке Unicode.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc>
	 Находит индекс предыдущей границы атома для указанного индекса символа, исключая символ по указанному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный <codeph>индекс</codeph> лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Строка TextLine, которой принадлежит индексируемый символ, недействительна.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс предыдущей границы атома до заданного индекса символа.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Задает индекс символа, до которого нужно искать предыдущую границу атома.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Находит индекс предыдущей границы атома для указанного индекса символа, исключая символ по указанному индексу. Символы между границами атомов вместе формируют один атом в <codeph>TextLine</codeph>, например, «e» и надстрочный значок ударения.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc>
	 Находит индекс предыдущей границы слова для указанного индекса символа, исключая символ по указанному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный <codeph>index</codeph> лежит вне диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Строка TextLine, которой принадлежит индексируемый символ, недействительна.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Индекс предыдущей границы слова до заданного иныдекса символа.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Задает индекс символа, до которого нужно искать предыдущую границу слова.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Находит индекс предыдущей границы слова для указанного индекса символа, исключая символ по указанному индексу. Границы слов определяются на основе свойств символов в кодировке Unicode.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:getTextLineAtCharIndex"><apiName>getTextLineAtCharIndex</apiName><shortdesc>
	 Возвращает элемент TextLine, содержащий символ, заданный параметром charIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный индекс символа находится за пределами диапазона.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент TextLine, содержащий символ с индексом <codeph>charIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Отсчитываемое от нуля значение индекса для символа (например, первый символ – 0, второй символ – 1 и т.д.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Возвращает элемент TextLine, содержащий символ, заданный параметром <codeph>charIndex</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:releaseLines"><apiName>releaseLines</apiName><shortdesc>
	 Удаляет диапазон текстовых строк из списка строк, поддерживаемых текстовым блоком TextBlock.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если TextLine, заданная параметрами <codeph>firstLine</codeph> или <codeph>lastLine</codeph> не включена в список текстовых строк, поддерживаемых блоком.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>firstLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Указывает первую строку для освобождения.
	 </apiDesc></apiParam><apiParam><apiItemName>lastLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Указывает последнюю строку для освобождения.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Удаляет диапазон текстовых строк из списка строк, поддерживаемых текстовым блоком TextBlock. Это позволяет очищать строки, если не существует других ссылок.
	 
	 <p>Задает значение членов <codeph>textBlock</codeph>, <codeph>nextLine</codeph> и <codeph>previousLine</codeph> удаленных строк как <codeph>null</codeph>. Задает значение <codeph>валидности</codeph> удаленных строк и следующих за ними в блоке TextBlock <codeph>TextLineValidity.INVALID</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextBlock:userData"><apiName>userData</apiName><shortdesc>
	 Дает возможность автору связать произвольные данные с текстовым блоком.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Дает возможность автору связать произвольные данные с текстовым блоком. Данные могут быть информацией, ссылающейся на содержимое, такое как дата редакции или имя автора, или могут быть кэшированными данными, используемыми при обработке.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:applyNonLinearFontScaling:get"><apiName>applyNonLinearFontScaling</apiName><shortdesc>
	 Указывает, что требуется улучшить внешний вид экрана за счет качества печати WYSIWYG («получаешь то, что видишь»).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает, что требуется улучшить внешний вид экрана за счет качества печати WYSIWYG («получаешь то, что видишь»). Для платформ и шрифтов, поддерживающих нелинейное масштабирование, это свойство в значении <codeph>true</codeph> позволяет использовать эти показатели отчасти за счет качества печати WYSIWYG, особенно для малых размеров кегля.
	 
	 <p>По умолчанию используется значение <codeph>true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontDescription:get"><apiName>baselineFontDescription</apiName><shortdesc>
	 Шрифт, который используется для определения базовых линий для всех строк, созданных из блока, независимо от их содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier></apiValueDef><apiDesc>
	 Шрифт, который используется для определения базовых линий для всех строк, созданных из блока, независимо от их содержимого. Базовые линии зависят от шрифта и его размера.
	 
	 <p>По умолчанию используется <codeph>null</codeph>. Когда шрифт базовой линии имеет значение <codeph>null</codeph>, размер шрифта базовой линии игнорируется, а базовая линия отдельно взятой строки определяется на основе шрифта и размера самого крупного текста в строке. Если заданы и <codeph>baselineFontDescription</codeph> и <codeph>baselineFontSize</codeph>, эти свойства определяют базовые линии для всех строк в текстовом блоке, независимо от их содержимого. Такая комбинация чаще всего используется в восточно-азиатской типографике.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontSize:get"><apiName>baselineFontSize</apiName><shortdesc>
	 Размер шрифта, который используется для вычисления базовых линий для строк, создаваемых из блока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Заданный <codeph>baselineFontSize</codeph> меньше 0.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Размер шрифта, который используется для вычисления базовых линий для строк, создаваемых из блока. Базовые линии зависят от шрифта и его размера.
	 
	 <p>По умолчанию используется значение <codeph>12</codeph>. Когда шрифт базовой линии имеет значение <codeph>null</codeph>, размер шрифта базовой линии игнорируется, а базовая линия отдельно взятой строки определяется на основе шрифта и размера самого крупного текста в строке.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineZero:get"><apiName>baselineZero</apiName><shortdesc>
	 Задает, какая базовая линия находится в точке с координатой у=0 для строк, созданных из этого блока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся членом <codeph>TextBaseline</codeph>.
     
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает, какая базовая линия находится в точке с координатой у=0 для строк, созданных из этого блока. Действительные значения для этого свойства находятся в членах класса <codeph>TextBaseline</codeph>.
	 
	 <p>Значение по умолчанию – <codeph>TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>В качестве значений этого свойства используйте следующие строковые значения:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>Латинская базовая линия строк имеет координату у=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>Надстрочная базовая линия строк имеет координату у=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>Подстрочная базовая линия строк имеет координату у=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>Идеографическая верхняя базовая линия строк имеет координату у=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>Идеографическая центральная базовая линия строк имеет координату у=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>Идеографическая нижняя базовая линия строк имеет координату у=0.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:bidiLevel:get"><apiName>bidiLevel</apiName><shortdesc>
	 Задает уровень двунаправленной вложенности текста в блоке по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>Если задано значение меньше 0.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает уровень двунаправленной вложенности текста в блоке по умолчанию. Четное число означает направление слева направо, а нечетное – справа налево. Можно увеличить значение <codeph>bidiLevel</codeph>, чтобы указать количество уровней вложенности того или иного текста с точки зрения направления слева направо и справа налево.
	 
	 <p>Значением по умолчанию является 0.</p>
	 
	 <p>При модификации <codeph>bidiLevel</codeph> валидность всех разбитых ранее строк меняется на TextLineValidity.INVALID. После изменения <codeph>bidiLevel</codeph> свойство <codeph>firstInvalidLine</codeph> имеет то же значение, что и <codeph>firstLine</codeph>, и в объекте TextBlock необходимо повторно разбивать все строки.</p>
	 
     </apiDesc><example conref="examples\TextBlock_bidiLevelExample.as"> В этом примере показан та же текстовая строка (логический порядок: a, b, c, alef, bet, gimel) визуализирована сначала с четным значением <codeph>bidiLevel</codeph>, а потом с нечетным значением <codeph>bidiLevel</codeph>.
<codeblock>

package {
    
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_bidiLevelExample extends Sprite {
        
        public function TextBlock_bidiLevelExample():void {             
            var fontSize:Number = 36;

            var format:ElementFormat = new ElementFormat();        
            format.fontDescription = new FontDescription("Adobe Hebrew");
            format.fontSize = fontSize;
            var y:Number = 0;
            var leading:Number = fontSize * 0.2;
            var text:String = "abc" + String.fromCharCode(0x05D0, 0x05D1, 0x05D2);

            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(text, format);
                        
            // bidiLevel even
            textBlock.bidiLevel = 0;
            var textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;
            textLine.y = y;
            y += textLine.descent;
            addChild(textLine);      
            
            // bidiLevel odd
            textBlock.content = new TextElement(text, format);
            textBlock.bidiLevel = 1;
            textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;          
            textLine.y = y;
            addChild(textLine);   
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:content:get"><apiName>content</apiName><shortdesc>
	 Хранит содержимое текстового блока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся известным подклассом <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданное значение <codeph>value</codeph> уже является членом группы.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Хранит содержимое текстового блока. Так как ContentElement является базовым классом, назначьте для <codeph>content</codeph> экземпляр подкласса ContentElement: TextElement, GraphicElement или GroupElement. TextElement содержит объект String, GraphicElement содержит объект DisplayObject, а GroupElement содержит объект Vector, включающий один или несколько объектов TextElement, GraphicElement или других объектов GroupElement. Используйте TextElement для абзаца однородного текста, GraphicElement для графики, а GroupElement для комбинации текстовых и графических элементов или нескольких экземпляров этих элементов, а также для других объектов GroupElement.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 <p>Модификация свойства <codeph>content</codeph>приводит к изменению валидности всех созданных ранее строк на <codeph>TextLineValidity.INVALID</codeph>. После изменения <codeph>content</codeph> свойство <codeph>firstInvalidLine</codeph> имеет то же значение, что и <codeph>firstLine</codeph>, и в объекте TextBlock необходимо повторно разбивать все строки.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstInvalidLine:get"><apiName>firstInvalidLine</apiName><shortdesc>
	 Указывает первую строку в текстовом блоке, в котором значение свойства TextLine.validity не равно TextLineValidity.VALID.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Указывает первую строку в текстовом блоке, в котором значение свойства <codeph>TextLine.validity</codeph> не равно <codeph>TextLineValidity.VALID</codeph>.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstLine:get"><apiName>firstLine</apiName><shortdesc>
	 Первый объект TextLine в TextBlock, если такой имеется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Первый объект TextLine в TextBlock, если такой имеется.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lastLine:get"><apiName>lastLine</apiName><shortdesc>
	 Последний объект TextLine в TextBlock, если такой имеется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Последний объект TextLine в TextBlock, если такой имеется.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lineRotation:get"><apiName>lineRotation</apiName><shortdesc>
	 Поворачивает строки в текстовом блоке как единое целое.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся членом <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если задано значение <codeph>TextRotation.AUTO</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Поворачивает строки в текстовом блоке как единое целое. Вызовите метод <codeph>createTextLine()</codeph> <i>после</i> настройки <codeph>lineRotation</codeph>, иначе он не будет иметь силы. Значение по умолчанию равно <codeph>TextRotation.ROTATE_0</codeph>.
	 
	 <p>Конечный поворот любого глифа зависит от значений <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph> и <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>TextBlock.lineRotation</codeph> обычно используется для восточно-азиатского текста. Чтобы создать абзац вертикального японского текста, выполните следующие действия.</p>
     <ol>
     <li>Задайте свойству <codeph>TextBlock.lineRotation</codeph> значение <codeph>TextRotation.ROTATE_90</codeph>.</li>
     <li>Оставьте для свойства <codeph>ElementFormat.textRotation</codeph> содержимого значение по умолчанию, <codeph>TextRotation.AUTO</codeph>.</li>
     </ol>
	 
	 <p>Используйте следующие константы, определенные в классе <codeph>TextRotation</codeph>, чтобы задать значение для этого свойства.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Строки не поворачиваются.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Строки поворачиваются на 90 градусов по часовой стрелке.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Строки поворачиваются на 180 градусов.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Строки поворачиваются на 270 градусов по часовой стрелке.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Не поддерживается.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextBlock_lineRotationExample.as"> В этом примере в TextBlock добавляется японский текст, и свойству <codeph>lineRotation</codeph> задается значение TextRotation.ROTATE_90 для вертикального отображения строки. 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextRotation;
    import flash.text.engine.ElementFormat;
    
    public class TextBlock_lineRotationExample extends Sprite {
        
        public function TextBlock_lineRotationExample():void {
            var Japanese:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);

            var fontDescription:FontDescription = new FontDescription("MS Mincho");
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 15;
            format.fontDescription = fontDescription;
                        
            var textElement:TextElement = new TextElement(Japanese, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.lineRotation = TextRotation.ROTATE_90;

            var linePosition:Number = this.stage.stageWidth - 120;
            var previousLine:TextLine = null;
        
            while (true) {
                var textLine:TextLine = textBlock.createTextLine(
                    previousLine, 
                    300);
                if (textLine == null) 
                    break;
                textLine.y = 30;    
                textLine.x = linePosition;
                linePosition -= 24;
                addChild(textLine);                
                previousLine = textLine;
            }        
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 Задает позиции табуляции для текста в блоке в виде Vector объектов TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$flash.text.engine:TabStop"/><apiException><apiDesc>Заданный <codeph>tabStops</codeph> содержит <codeph>null</codeph> элементов.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданные <codeph>tabStops</codeph> не отсортированы по возрастанию позиции.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает позиции табуляции для текста в блоке в виде Vector объектов <codeph>TabStop</codeph>.
	 
	 <p>Значение по умолчанию – <codeph>null</codeph>, то есть, позиции табуляции выключены. Когда позиции табуляции не заданы, символ табуляции (\t) вызывает создание новой строки.</p>
	 
	 <p>Когда задается свойство <codeph>tabStops</codeph>, объект TextBlock создает копию вектора для внутреннего использования. Изменение исходного вектора или его содержимого не влияет на объект TextBlock. Когда запрашивается свойство <codeph>tabStops</codeph>, возвращается копия внутреннего вектора. И опять же, изменение этого возвращенного вектора или его содержимого не влияет на объект TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textJustifier:get"><apiName>textJustifier</apiName><shortdesc>
	 Задает TextJustifier для использования при создании строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:TextJustifier</apiValueClassifier><apiException><apiDesc>Если задано значение, не являющееся известным подклассом <codeph>TextJustifier</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Задает TextJustifier для использования при создании строки.
	 
	 <p>Значением по умолчанию является объект TextJustifier, созданный по умолчанию.</p>
	 
	 <p>Когда задается свойство <codeph>textJustifier</codeph>, объект TextBlock создает копию объекта для внутреннего использования. Изменение исходного объекта не влияет на объект TextBlock. Когда запрашивается свойство <codeph>textJustifier</codeph>, возвращается копия внутреннего объекта. И опять же, изменение этого возвращенного объекта не влияет на объект TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textLineCreationResult:get"><apiName>textLineCreationResult</apiName><shortdesc>
	 Показывает результат операции createTextLine().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Показывает результат операции <codeph>createTextLine()</codeph>. Изменение содержимого в блоке приводит к тому, что сделанные ранее разрывы строк становятся недействительными, а значение свойства сбрасывается на <codeph>null</codeph>.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 <p>Значениями этого свойства являются члены класса <codeph>TextLineCreationResult</codeph></p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Строковое значение</entry><entry>Описание</entry></row></thead><tbody><row>
	 	<entry><codeph>TextLineCreationResult.SUCCESS</codeph></entry>
	 	<entry>Разрыв строки выполнен успешно.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.COMPLETE</codeph></entry>
	 	<entry>Либо вновь созданная строка идеально выровнялась со следующими строками, валидность которых сменилась с POSSIBLY_INVALID на VALID, либо строка не была создана, так как весь текст в блоке уже разбит на строки.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.INSUFFICIENT_WIDTH</codeph></entry>
	 	<entry>Строка не создана, так как не обнаружен текст, подходящий для заданной ширины.</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLineCreationResult"><linktext>TextLineCreationResult</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineCreationResult"><apiName>TextLineCreationResult</apiName><shortdesc>
Класс TextLineCreationResult является перечислением констант, используемых вместе с TextBlock.textLineCreationResult.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс TextLineCreationResult является перечислением констант, используемых вместе с <codeph>TextBlock.textLineCreationResult</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextBlock/textLineCreationResult"><linktext>TextBlock.textLineCreationResult</linktext></link></related-links><apiValue id="flash.text.engine:TextLineCreationResult:COMPLETE"><apiName>COMPLETE</apiName><shortdesc> 
	Указывает, что строка не создана, так как весь текст в блоке уже был разбит.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что строка не создана, так как весь текст в блоке уже был разбит.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:EMERGENCY"><apiName>EMERGENCY</apiName><shortdesc> 
	Указывает, что строка создана с вынужденным разрывом, так как в заданной ширине не было доступной возможности разрыва.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>emergency</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что строка создана с вынужденным разрывом, так как в заданной ширине не было доступной возможности разрыва.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:INSUFFICIENT_WIDTH"><apiName>INSUFFICIENT_WIDTH</apiName><shortdesc> 
	Указывает, что строка не создана, так как текст не поместился в заданную ширину и в вызове createTextLine() не было определено свойство fitSomething.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insufficientWidth</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что строка не создана, так как текст не поместился в заданную ширину и в вызове <codeph>createTextLine()</codeph> не было определено свойство <codeph>fitSomething</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:SUCCESS"><apiName>SUCCESS</apiName><shortdesc> 
	Указывает, что разрыв строки выполнен успешно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>success</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что разрыв строки выполнен успешно.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LigatureLevel"><apiName>LigatureLevel</apiName><shortdesc>
Класс LigatureLevel является перечислением констант, с помощью которых задается свойство ligatureLevel класса ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс LigatureLevel является перечислением констант, с помощью которых задается свойство <codeph>ligatureLevel</codeph> класса ElementFormat. Лигатура возникает, когда две или более литеры объединяются в один глиф. Лигатуры обычно заменяют последовательные символы с общими компонентами, такие как пары букв fi, fl или ae. Они используются как с латинскими, так и с нелатинскими наборами символов.
<p><b>Примечание.</b>При работе со шрифтами арабского или сирийского языка для <codeph>ligatureLevel</codeph> должно устанавливаться значение MINIMUM или выше.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/ligatureLevel"><linktext>flash.text.engine.ElementFormat.ligatureLevel</linktext></link></related-links><apiValue id="flash.text.engine:LigatureLevel:COMMON"><apiName>COMMON</apiName><shortdesc> 
	Задает обычные лигатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>common</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает обычные лигатуры.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:EXOTIC"><apiName>EXOTIC</apiName><shortdesc> 
	Задает экзотические лигатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exotic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает экзотические лигатуры.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:MINIMUM"><apiName>MINIMUM</apiName><shortdesc> 
	Задает минимальные лигатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>minimum</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает минимальные лигатуры.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:NONE"><apiName>NONE</apiName><shortdesc> 
	Задает отсутствие лигатур.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает отсутствие лигатур.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:UNCOMMON"><apiName>UNCOMMON</apiName><shortdesc> 
	Задает необычные лигатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncommon</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает необычные лигатуры.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextRotation"><apiName>TextRotation</apiName><shortdesc>
Класс TextRotation является перечислением констант, используемых со следующими свойствами: ElementFormat.textRotation, ContentElement.textRotation, TextBlock.lineRotation и TextLine.getAtomTextRotation().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс TextRotation является перечислением констант, используемых со следующими свойствами: <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph>, <codeph>TextBlock.lineRotation</codeph> и <codeph>TextLine.getAtomTextRotation()</codeph>. 

<p>Конечный поворот глифа представляет собой сумму <codeph>TextBlock.lineRotation</codeph>, <codeph>ElementFormat.textRotation</codeph> и <codeph>ContentElement.textRotation</codeph></p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>TextLine.getAtomTextRotation()</linktext></link></related-links><apiValue id="flash.text.engine:TextRotation:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Задает поворот на 90 градусов против часовой стрелки только для полноширинных и широких глифов, в соответствии со свойствами Юникод для глифа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает поворот на 90 градусов против часовой стрелки только для полноширинных и широких глифов, в соответствии со свойствами Юникод для глифа. Обычно это значение используется с восточно-азиатскими текстами, чтобы поворачивать только глифы, требующие поворота. Этот поворот применяется только к вертикальному тексту, чтобы возвращать полноширинным и широким символам вертикальную ориентацию, не затрагивая остальных символов.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_0"><apiName>ROTATE_0</apiName><shortdesc> 
	Задает отсутствие поворота.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate0</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает отсутствие поворота.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_180"><apiName>ROTATE_180</apiName><shortdesc> 
	Задает поворот на 180 градусов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate180</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает поворот на 180 градусов.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_270"><apiName>ROTATE_270</apiName><shortdesc> 
	Задает поворот на 270 градусов по часовой стрелке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate270</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает поворот на 270 градусов по часовой стрелке.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_90"><apiName>ROTATE_90</apiName><shortdesc> 
	Задает поворот на 90 градусов по часовой стрелке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate90</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает поворот на 90 градусов по часовой стрелке.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabAlignment"><apiName>TabAlignment</apiName><shortdesc>
Класс TabAlignment является перечислением констант, с помощью которых задается свойство tabAlignment класса TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс TabAlignment является перечислением констант, с помощью которых задается свойство <codeph>tabAlignment</codeph> класса <codeph>TabStop</codeph>. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TabStop/tabAlignment"><linktext>TabStop.tabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStop"><linktext>TextBlock.tabStop</linktext></link></related-links><apiValue id="flash.text.engine:TabAlignment:CENTER"><apiName>CENTER</apiName><shortdesc> 
	Помещает центр текста с табуляцией в позиции табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Помещает центр текста с табуляцией в позиции табуляции.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> 
	Помещает метку выравнивания текста с табуляцией в позиции табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Помещает метку выравнивания текста с табуляцией в позиции табуляции.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:END"><apiName>END</apiName><shortdesc> 
	Помещает конец текста с табуляцией в позиции табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Помещает конец текста с табуляцией в позиции табуляции.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:START"><apiName>START</apiName><shortdesc> 
	Помещает начало текста с табуляцией в позицию табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Помещает начало текста с табуляцией в позицию табуляции.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
 Класс GraphicElement представляет графические элементы в объекте TextBlock или GroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс GraphicElement представляет графические элементы в объекте TextBlock или GroupElement. Назначьте объект GraphicElement свойству <codeph>content</codeph> объекта TextBlock, чтобы отобразить графику или изображение с помощью метода <codeph>TextBlock.createTextLine()</codeph>. Назначьте его объекту GroupElement, чтобы объединить с другими графическими или текстовыми элементами.
 
 </apiDesc><example conref="examples\GraphicElementExample.as"> В следующем примере создает текстовый блок с графическим элементом (красная рамка) и отображается с добавлением второго блока под ним с заголовком.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GraphicElementExample extends Sprite {
        
        public function GraphicElementExample():void {
            
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 14;
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0,0, 200, 200);
            redBox.graphics.endFill();   
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = graphicElement;
            var textLine1:TextLine = textBlock.createTextLine(null,redBox.width);
            addChild(textLine1);
            textLine1.x = 15
            textLine1.y = 215
            var str:String = "Your picture here ...";
            var textElement:TextElement = new TextElement(str, format);
            textBlock = new TextBlock();
            textBlock.content = textElement;
            var textLine2 = textBlock.createTextLine(null, 300);
            addChild(textLine2);
            textLine2.x = textLine1.x;
            textLine2.y += textLine1.y + format.fontSize;        
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:GraphicElement:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
	 Создает новый экземпляр GraphicElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>graphic</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>DisplayObject для наполнения GraphicElement. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>Ширина области, зарезервированной для элемента (в пикселах). Значение по умолчанию равно 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>Высота области, зарезервированной для элемента (в пикселах). Значение по умолчанию равно 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Формат элемента. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Объект <codeph>EventDispatcher</codeph>, получающий копии каждого события, вызванного для текстовых строк, созданных на основе данного элемента содержимого. По умолчанию используется <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>При вращении элемент был использован в качестве единого целого. Используйте константы <codeph>flash.text.engine.TextRotation</codeph> для этого свойства. Значение по умолчанию равно <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Создает новый экземпляр GraphicElement.
	 
	 <p>Регистрационная точка графического элемента совпадает с левым верхним углом области, заданным параметрами <codeph>elementHeight</codeph>, <codeph>elementWidth</codeph> и <codeph>elementFormat.baselineShift</codeph>. Графический элемент не масштабируется для соответствия размеру области. Объект GraphicElement обладает свойствами <codeph>eventMirror</codeph>, <codeph>elementWidth</codeph> и <codeph>elementHeight</codeph> и не является графическим элементом, не определяет размер и положение результирующей зеркальной области. Если используется загрузчик, графический элемент может не загружаться во время создания текстовой строки и зеркальных областей.</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:GraphicElement:elementHeight:get"><apiName>elementHeight</apiName><shortdesc>
	 Высота в пикселях, резервируемая для графического элемента в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Высота в пикселях, резервируемая для графического элемента в строке. За масштабирование графического элемента отвечает вызывающий элемент.
	 
	 <p>Значением по умолчанию является 15.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:elementWidth:get"><apiName>elementWidth</apiName><shortdesc>
	 Ширина в пикселях, резервируемая для графического элемента в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Ширина в пикселях, резервируемая для графического элемента в строке. За масштабирование графического элемента отвечает вызывающий элемент.
	 
	 <p>Значением по умолчанию является 15.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc>
	 Объект DisplayObject, который должен использоваться в качестве графического элемента для GraphicElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:DisplayObject</apiValueClassifier></apiValueDef><apiDesc>
	 Объект DisplayObject, который должен использоваться в качестве графического элемента для GraphicElement.
	 
	 <p>По умолчанию используется <codeph>null</codeph>.</p>
	 
	 <p>Когда GraphicElement становится частью текстовой строки, графический элемент добавляется в качестве ее нижестоящего элемента. Когда задается графический элемент, из строки удаляется старый графический элемент и добавляется новый.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontWeight"><apiName>FontWeight</apiName><shortdesc>
Класс FontWeight является перечислением констант, используемых вместе с FontDescription.fontWeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс FontWeight является перечислением констант, используемых вместе с <codeph>FontDescription.fontWeight</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontWeight"><linktext>flash.text.engine.FontDescription.fontWeight</linktext></link></related-links><apiValue id="flash.text.engine:FontWeight:BOLD"><apiName>BOLD</apiName><shortdesc> 
	Используется для указания полужирной толщины шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Используется для указания полужирной толщины шрифта.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontWeight:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Используется для указания обычной толщины шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Используется для указания обычной толщины шрифта.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBaseline"><apiName>TextBaseline</apiName><shortdesc>
Класс TextBaseline является перечислением констант, используемых для определения свойств dominantBaseline и alignmentBaseline класса ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс TextBaseline является перечислением констант, используемых для определения свойств <codeph>dominantBaseline</codeph> и <codeph>alignmentBaseline</codeph> класса ElementFormat. <codeph/> Рассмотрим следующую ситуацию.
<p><adobeimage alt="Выравнивание текста по базовой линии" href="../../../images/textBaselines.gif"/></p>
<p>Строка состоит из четырех объектов <codeph>TextElement</codeph>, содержащих текст a, b, cccccccc и X соответственно. Элемент, содержащий Х, определяет базовые линии строки, так как является самым большим из всех элементов. Латинская базовая линия элемента Х выравнивается по латинской базовой линии строки. Идеографическая верхняя точка элемента а выравнивается по идеографической верхней линии строки. Идеографическая нижняя точка элемента b выравнивается по идеографической нижней линии строки. Идеографическая центральная точка элемента cccccccc выравнивается по идеографической центральной линии строки.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links><apiValue id="flash.text.engine:TextBaseline:ASCENT"><apiName>ASCENT</apiName><shortdesc> 
	Задает надстрочную базовую линию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает надстрочную базовую линию. Для текстовых элементов это значение определяется шрифтом и размером кегля. Для графического элемента текстовый процессор использует геометрический верх.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:DESCENT"><apiName>DESCENT</apiName><shortdesc> 
	Задает подстрочную базовую линию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>descent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает подстрочную базовую линию. Для текстовых элементов это значение определяется шрифтом и размером кегля. Для графического элемента текстовый элемент использует геометрический низ элемента.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_BOTTOM"><apiName>IDEOGRAPHIC_BOTTOM</apiName><shortdesc> 
	Задает идеографическую нижнюю базовую линию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicBottom</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает идеографическую нижнюю базовую линию. Для текстовых элементов это значение определяется шрифтом и размером кегля. Для графического элемента текстовый процессор использует геометрический низ.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_CENTER"><apiName>IDEOGRAPHIC_CENTER</apiName><shortdesc> 
	Задает идеографическую центральную базовую линию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает идеографическую центральную базовую линию. Для текстовых элементов это значение определяется шрифтом и размером кегля. Для графического элемента текстовый процессор использует геометрический центр.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_TOP"><apiName>IDEOGRAPHIC_TOP</apiName><shortdesc> 
	Задает идеографическую верхнюю базовую линию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает идеографическую верхнюю базовую линию. Для текстовых элементов это значение определяется шрифтом и размером кегля. Для графического элемента текстовый процессор использует геометрический верх.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:ROMAN"><apiName>ROMAN</apiName><shortdesc> 
	Задает латинскую базовую линию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>roman</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Задает латинскую базовую линию. Для текстовых элементов это значение определяется шрифтом и размером кегля. Для графического элемента текстовый процессор использует геометрический низ.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:USE_DOMINANT_BASELINE"><apiName>USE_DOMINANT_BASELINE</apiName><shortdesc> 
	Указывает, что alignmentBaseline имеет то же значение, что и dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>useDominantBaseline</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что alignmentBaseline имеет то же значение, что и dominantBaseline. Используйте это значение только для определения <codeph>ElementFormat.alignmentBaseline</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:BreakOpportunity"><apiName>BreakOpportunity</apiName><shortdesc>
Класс BreakOpportunity является перечислением констант, с помощью которых задается свойство breakOpportunity класса ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс BreakOpportunity является перечислением констант, с помощью которых задается свойство <codeph>breakOpportunity</codeph> класса ElementFormat. Это свойство определяет, какие символы могут использоваться для разрыва, когда обтекающий текст разбивается на несколько строк.


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/breakOpportunity"><linktext>ElementFormat.breakOpportunity</linktext></link></related-links><apiValue id="flash.text.engine:BreakOpportunity:ALL"><apiName>ALL</apiName><shortdesc> 
	Рассматривает все символы объекта ContentElement в качестве возможности обязательного разрыва строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Рассматривает все символы объекта ContentElement в качестве возможности обязательного разрыва строки. Этот вариант можно использовать для создания максимально коротких строк, которые можно использовать для создания текста в строке или подобных эффектов.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:ANY"><apiName>ANY</apiName><shortdesc> 
	Рассматривает любой символ в объекте ContentElement как возможность разрыва строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Рассматривает любой символ в объекте ContentElement как возможность разрыва строки. Это значение обычно используется, когда латинский текст встраивается с восточно-азиатский текст и желательны разрывы строк в середине слов.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Определяет возможности разрыва строк на основе свойств символов Юникод.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Определяет возможности разрыва строк на основе свойств символов Юникод. Этот параметр реализует свойства разрыва строк Юникод, определенные в приложении №14 Стандарта Юникод. 
	</apiDesc></apiValueDetail><related-links><link href="http://unicode.org/reports/tr14/tr14-12.html"><linktext>Статья по свойствам разрыва строк Юникод.</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:BreakOpportunity:NONE"><apiName>NONE</apiName><shortdesc> 
	Не рассматривает ни один из символов объекта ContentElement в качестве возможности разрыва строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Не рассматривает ни один из символов объекта ContentElement в качестве возможности разрыва строки.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitWidth"><apiName>DigitWidth</apiName><shortdesc>
Класс DigitWidth является перечислением констант, с помощью которых задается свойство digitWidth класса ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс DigitWidth является перечислением констант, с помощью которых задается свойство <codeph>digitWidth</codeph> класса ElementFormat. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitWidth"><linktext>flash.text.engine.ElementFormat.digitWidth</linktext></link></related-links><apiValue id="flash.text.engine:DigitWidth:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Служит для задания ширины цифр по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Служит для задания ширины цифр по умолчанию. Результаты зависят от шрифта; символы используют настройки, определенные дизайнером шрифтов без применения каких-либо функций.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:PROPORTIONAL"><apiName>PROPORTIONAL</apiName><shortdesc> 
	Служит для задания пропорциональной ширины цифр.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proportional</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Служит для задания пропорциональной ширины цифр.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:TABULAR"><apiName>TABULAR</apiName><shortdesc> 
	Служит для задания табличной ширины цифр.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Служит для задания табличной ширины цифр.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:Kerning"><apiName>Kerning</apiName><shortdesc>
Класс Kerning является перечислением констант, используемых вместе с ElementFormat.kerning.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс Kerning является перечислением констант, используемых вместе с <codeph>ElementFormat.kerning</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/kerning"><linktext>flash.text.engine.ElementFormat.kerning</linktext></link></related-links><apiValue id="flash.text.engine:Kerning:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Указывает, что кернинг включается только для соответствующих символов в восточно-азиатской типографике.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что кернинг включается только для соответствующих символов в восточно-азиатской типографике. Кернинг применяется между двумя символами, если ни один из них не принадлежит к кандзи, хирагана или катакана.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:OFF"><apiName>OFF</apiName><shortdesc> 
	Указывает, что кернинг выключен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что кернинг выключен.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:ON"><apiName>ON</apiName><shortdesc> 
	Указывает, что кернинг включен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Указывает, что кернинг включен.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:CFFHinting"><apiName>CFFHinting</apiName><shortdesc>
Класс CFFHinting определяет значения для хинтинга cff в классе FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс CFFHinting определяет значения для хинтинга cff в классе FontDescription.

<p>Хинтинг регулирует отображение контура шрифта, чтобы он ровнялся по пиксельной сетке. На экранах небольшого размера хинтинг создает для читателей четкий и удобочитаемый текст.
</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:CFFHinting:HORIZONTAL_STEM"><apiName>HORIZONTAL_STEM</apiName><shortdesc>
	Привязывает жирные горизонтальные основы к пиксельной сетке для улучшения удобочитаемости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontalStem</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Привязывает жирные горизонтальные основы к пиксельной сетке для улучшения удобочитаемости. С помощью этой константы задается свойство <codeph>cffHinting</codeph> класса FontDescription. Используйте синтаксис <codeph>CFFHinting.HORIZONTAL_STEM</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:CFFHinting:NONE"><apiName>NONE</apiName><shortdesc> 
	Хинтинг не применяется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Хинтинг не применяется. Горизонтальные основы глифов не привязываются к пиксельной сетке. С помощью этой константы задается свойство <codeph>cffHinting</codeph> класса FontDescription. Этот параметр рекомендуется для анимации и для шрифтов большого размера. Используйте синтаксис <codeph>CFFHinting.NONE</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineMirrorRegion"><apiName>TextLineMirrorRegion</apiName><shortdesc>
 Класс TextLineMirrorRegion представляет фрагмент текстовой строки, события которой зеркально отображаются в другом отправителе событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс TextLineMirrorRegion представляет фрагмент текстовой строки, события которой зеркально отображаются в другом отправителе событий.
 
 <p>После завершения обычной отправки события для текстовой строки, если строка является допустимой и распространение события не остановлено, выполняется повторная отправка событий в зеркальные области строки.</p>
 
 <p>Зеркалирование событий мыши является особым случаем. Поскольку зеркальные области в действительности не являются экранными объекты, для них имитируются события <codeph>mouseOver</codeph> и <codeph>mouseOut</codeph>. События <codeph>rollOver</codeph> и <codeph>rollOut</codeph> не имитируются. Все естественным образом возникающие события <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph> и <codeph>rollOut</codeph> (в отношении текстовой строки или нижестоящего элемента текстовой строки) игнорируются – их зеркалирование не выполняется.</p>
 
 <p>Нельзя создать объект TextLineMirrorRegion непосредственно из кода ActionScript. При вызове функции <codeph>new TextLineMirrorRegion()</codeph>, выдается исключение. Объект TextLineMirrorRegion можно создать при назначении зеркала события для объекта ContentElement.</p>
 
 <p>Класс TextLineMirrorRegion является конечным, его нельзя разбить на подклассы.</p>
 
 </apiDesc><example conref="examples\TextLineMirrorRegionExample.as"> В этом примере показан блок текста с зеркальными областями, которые становятся красными при щелчке мыши.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ContentElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLineMirrorRegion;
    import flash.events.MouseEvent;
    import flash.events.EventDispatcher;
    import flash.ui.Mouse;

    public class TextLineMirrorRegionExample extends Sprite {
        
        var myEvent:EventDispatcher = new EventDispatcher();
        var fontDescription:FontDescription = new FontDescription();
        var textBlock:TextBlock = new TextBlock();

        public function TextLineMirrorRegionExample():void {
            
            fontDescription.fontWeight = "bold";
            var blackFormat:ElementFormat = new ElementFormat();
            blackFormat.fontSize = 18;
            blackFormat.color = 0x000000;
            blackFormat.fontDescription = fontDescription;
            
            var textElement1 = new TextElement("Click on different parts of me to find the ", blackFormat);
            var textElement2 = new TextElement("mirror regions",blackFormat);
            var textElement3 = new TextElement(". If I am a mirror region, I'll ",blackFormat);
            var textElement4 = new TextElement("turn red",blackFormat);
            var textElement5 = new TextElement(".",blackFormat);
            
            myEvent.addEventListener("click", clickHandler);
            myEvent.addEventListener("mouseOut", mouseOutHandler);
            myEvent.addEventListener("mouseOver", mouseOverHandler);
            
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>;
            groupVector.push(textElement1, textElement2, textElement3, textElement4, textElement5);
            var groupElement:GroupElement = new GroupElement(groupVector);
            
            textElement2.eventMirror=myEvent;
            textElement4.eventMirror=myEvent;
            
            textBlock.content = groupElement;
            createLines(textBlock);
        }
    
        private function clickHandler(event:MouseEvent):void
        {
            var redFormat:ElementFormat = new ElementFormat();
            redFormat.color = 0xCC0000;
            redFormat.fontSize = 18;
            redFormat.fontDescription = fontDescription;
            var line:TextLine = event.target as TextLine;
            var region:TextLineMirrorRegion = line.getMirrorRegion(myEvent);
            region.element.elementFormat = redFormat;
            createLines(textBlock);
        }
        
        private function mouseOverHandler(event:MouseEvent):void
        {
            Mouse.cursor = "button";
        }
        
        private function mouseOutHandler(event:MouseEvent):void
        {
            Mouse.cursor = "arrow";
        }
            
        private function createLines(textBlock:TextBlock):void 
        {
            var purgeLine:TextLine = textBlock.firstLine;
                
            while (purgeLine)
            {
                removeChild (purgeLine);
                purgeLine = purgeLine.nextLine;
            }
            var lineWidth:Number = 150;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
                
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/mirrorRegions"><linktext>TextLine.mirrorRegions</linktext></link></related-links><apiValue id="flash.text.engine:TextLineMirrorRegion:bounds:get"><apiName>bounds</apiName><shortdesc>
	 Границы зеркальной области относительно строки текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 Границы зеркальной области относительно строки текста.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:element:get"><apiName>element</apiName><shortdesc>
	 Объект ContentElement, на основе которого создается зеркальная область.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>Объект TextLine, к которому принадлежит этот элемент, является недействительным.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Объект <codeph>ContentElement</codeph>, на основе которого создается зеркальная область.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:mirror:get"><apiName>mirror</apiName><shortdesc>
	 Объект EventDispatcher, который зеркально отображает события, затрагивающие зеркальную область.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 Объект <codeph>EventDispatcher</codeph>, который зеркально отображает события, затрагивающие зеркальную область. Он включает события мыши, которые происходят в зеркальной области, а также все остальные события, нацеленные на текстовую строку.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:nextRegion:get"><apiName>nextRegion</apiName><shortdesc>
	 Следующий объект TextLineMirrorRegion в группе, производной от текстового элемента, или null, если текущая область является последней зеркальной областью в наборе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 Следующий объект TextLineMirrorRegion в группе, производной от текстового элемента, или <codeph>null</codeph>, если текущая область является последней зеркальной областью в наборе. Может быть на той же или на другой строке текста.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:previousRegion:get"><apiName>previousRegion</apiName><shortdesc>
	 Предыдущий объект TextLineMirrorRegion в группе, производной от текстового элемента, или null, если текущая область является первой зеркальной областью в наборе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 Предыдущий объект TextLineMirrorRegion в группе, производной от текстового элемента, или <codeph>null</codeph>, если текущая область является первой зеркальной областью в наборе. Может быть на той же или на другой строке текста.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:textLine:get"><apiName>textLine</apiName><shortdesc>
	 Объект TextLine, содержащий эту зеркальную область.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Объект TextLine, содержащий эту зеркальную область.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LineJustification"><apiName>LineJustification</apiName><shortdesc>
Класс LineJustification является перечислением значений констант, с помощью которых задается свойство lineJustfication класса TextJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Класс LineJustification является перечислением значений констант, с помощью которых задается свойство <codeph>lineJustfication</codeph> класса TextJustifier. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/lineJustification"><linktext>EastAsianJustifier.lineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier/lineJustification"><linktext>SpaceJustifier.lineJustification</linktext></link></related-links><apiValue id="flash.text.engine:LineJustification:ALL_BUT_LAST"><apiName>ALL_BUT_LAST</apiName><shortdesc> 
	Предписывает текстовому процессору сделать полную выключку всех строк, кроме последней.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allButLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Предписывает текстовому процессору сделать полную выключку всех строк, кроме последней.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:ALL_INCLUDING_LAST"><apiName>ALL_INCLUDING_LAST</apiName><shortdesc> 
	Предписывает текстовому процессору сделать полную выключку всех строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allIncludingLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Предписывает текстовому процессору сделать полную выключку всех строк.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:UNJUSTIFIED"><apiName>UNJUSTIFIED</apiName><shortdesc> 
	Предписывает текстовому процессору создавать строки без выравнивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unjustified</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Предписывает текстовому процессору создавать строки без выравнивания.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
 Класс SpaceJustifier представляет свойства, управляющие параметрами выравнивания по ширине для строк текстового блока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 Класс SpaceJustifier представляет свойства, управляющие параметрами выравнивания по ширине для строк текстового блока. 
 
 <p> Используйте конструктор <codeph>new SpaceJustifier()</codeph>, чтобы создать объект SpaceJustifier, прежде чем определять его свойства. Если определить свойства объекта SpaceJustifier после его применения к TextBlock, объект TextBlock не становится недействительным.</p>
 
 </apiDesc><example conref="examples\SpaceJustifierExample.as"> В следующем примере показано назначение интервалов между буквами и выравнивание текстового блока по ширине, кроме последней строки.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.SpaceJustifier;
    import flash.text.engine.LineJustification;
    
    public class SpaceJustifierExample extends Sprite {
        
        public function SpaceJustifierExample():void {
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format);
            var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_BUT_LAST);
            spaceJustifier.letterSpacing = true;
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.textJustifier = spaceJustifier;
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:SpaceJustifier:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
     Создает объект SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Локаль <codeph>locale</codeph> имеет значение <codeph>null</codeph> или слишком коротка, чтобы быть действительной.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Заданная локаль <codeph>lineJustification</codeph> не является членом <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>Локаль, определяющая правила выравнивания. Значение по умолчанию равно <codeph>en</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unjustified</apiData><apiDesc>Тип выравнивания по ширине строк в абзаце. Используйте константы <codeph>LineJustification</codeph> для этого свойства. Значение по умолчанию равно <codeph>LineJustification.UNJUSTIFIED</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>letterSpacing</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Указывает, учитывать ли межбуквенные интервалы при выравнивании по ширине. Значение по умолчанию <codeph>false</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Создает объект SpaceJustifier. Класс LineJustification содержит константы для задания типов выравнивания строк по ширине, которые можно применить.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:SpaceJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Создает клонированную копию объекта SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>This class is currently stored as a live reference, but there is no way to track when its 
	 properties change.  This means that when changes are made, text blocks are not invalidated, which in 
	 the current implementation can lead to player crashes.  Even from the API perspective its wrong, as 
	 the affected text lines should be marked INVALID when format changes are made, but they�re not. The 
	 solution is to use a copy-on-set model.  When the object is passed in, the player copies it, so later
	 changes to the object that was passed in have no effect. The setter makes an internal copy of the 
	 array; the getter returns a copy of the internal copy. Operations like 
	 myBlock.textJustifier.spaceJustifier.letterSpacing = true will have no effect. Users who subclass 
	 this class in the future will need to use the clone() method to implement this technique of 
	 'locking' the format once it has been set.  
	 
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Копия объекта <codeph>SpaceJustifier</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Создает клонированную копию объекта SpaceJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:SpaceJustifier:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     Указывает, учитывать ли межбуквенные интервалы при выравнивании по ширине.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Указывает, учитывать ли межбуквенные интервалы при выравнивании по ширине.
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>