<?xml version="1.0"?>
<apiPackage id="flash.accessibility"><apiName>flash.accessibility</apiName><apiDetail/><apiClassifier id="flash.accessibility:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 该类可实现组件与屏幕读取器之间的通信。 屏幕阅读器用于将屏幕内容转换为合成语音或盲文，为视力有缺陷的用户提供方便。
 
 <p/>
 
 <p><i/></p>
 
 <p><xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx"/></p>
 
 <p/>
 
 <p><i/></p>
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
	 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 
	 
	 </apiDesc></apiConstructorDetail><related-links><link href=""><linktext/></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction"><apiName>accDoDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p/>
	 
	 <p><codeph/><codeph/><codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation"><apiName>accLocation</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph/><codeph/><codeph/>
	 
	 
	 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph/><codeph/>
	 
	 <p><codeph/></p>
	 
	 <p><codeph/><codeph/></p>	
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect"><apiName>accSelect</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selFlag</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>  
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 
	 <p><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/><codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p></li>
	 </ul>
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/></p>
	 <p><codeph/><i/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray"><apiName>getChildIDArray</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 <p/>
	 
	 <p><i/></p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction"><apiName>get_accDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc> 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p/>
	 
	 <p><codeph/><codeph/><codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus"><apiName>get_accFocus</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName"><apiName>get_accName</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><codeph/><codeph/></p>
	 
	 <p><codeph/></p>
	 
	 <p><codeph/></p>
	 
	 <p><codeph/><codeph/></p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><b/><codeph/><codeph/><codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><b/><codeph/><codeph/><codeph/></p>
     	 </li>
     	 <li><p><b/><codeph/><codeph/><codeph/><codeph/><codeph/></p>
     	 </li>
	 </ul>
     	 <p><codeph/><codeph/> </p>
     	 
     	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="flash.accessibility.xml#AccessibilityProperties"><linktext>flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name"><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole"><apiName>get_accRole</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	  
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2143"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> 
	  
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 	 
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accRole(childID:uint):uint
	 {
	 	if (childID == 0)
	 		return role;
	 		
	 	return ROLE_SYSTEM_LISTITEM;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#roles"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection"><apiName>get_accSelection</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState"><apiName>get_accState</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2144"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph/> 
	 
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><xref href="../../accessibilityImplementationConstants.html"/><codeph/></p>
	 
	 <p/>
	 
	 <p/>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#states"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue"><apiName>get_accValue</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	  
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/></p>
	 
	 </apiDesc><example><codeph/>
	 
	 <codeblock rev="3.0">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno"><apiName>errno</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph/><codeph/>
	 
	 </apiDesc></apiValueDetail><related-links><link href="../../accessibilityImplementationConstants.html"><linktext/></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub"><apiName>stub</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	  
	 
	 <p><codeph/></p> 
	 
	 </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.accessibility:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
 利用 AccessibilityProperties 类可控制 Flash 对象辅助功能（如屏幕阅读器）演示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 利用 AccessibilityProperties 类可控制 Flash 对象辅助功能（如屏幕阅读器）演示。
 
 <p>您可以将 AccessibilityProperties 对象附加到任何显示对象，但是 Flash Player 只会读取以下某些类型的对象的 AccessibilityProperties 对象：所有 SWF 文件（以 <codeph>DisplayObject.root</codeph> 形式表示）、容器对象（<codeph>DisplayObjectContainer</codeph> 和子类）、按钮（<codeph>SimpleButton</codeph> 和子类）以及文本（<codeph>TextField</codeph> 和子类）。</p>
 
 <p>这些对象的 <codeph>name</codeph> 属性是要指定的最重要的属性，因为辅助功能向用户提供对象名称以作为基本的导航方法。不要将 <codeph>AccessibilityProperties.name</codeph> 与 <codeph>DisplayObject.name</codeph> 混淆；这二者有区别且不相关。<codeph>AccessibilityProperties.name</codeph> 属性是通过辅助功能用语音读出的名称，而 <codeph>DisplayObject.name</codeph> 本质上是仅向 ActionScript 代码显示的变量名称。</p>
 
 <p product="flash">创作过程中，<codeph>AccessibilityProperties</codeph> 对象的属性将覆盖“辅助功能”面板中的相应设置。</p>
 
 <p>要确定 Flash Player 是否正在支持辅助功能的环境中运行，请使用 <codeph>Capabilities.hasAccessibility</codeph> 属性。如果修改 AccessibilityProperties 对象，则需要调用 <codeph>Accessibility.updateProperties()</codeph> 方法以使更改生效。</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as"> 下例使用 <codeph>AccessibilityExample</codeph>、<codeph>CustomAccessibleButton</codeph>、<codeph>CustomSimpleButton</codeph> 和 <codeph>ButtonDisplayState</codeph> 类创建与辅助功能兼容且可用于大多数屏幕阅读器的菜单。<codeph>AccessibilityProperties</codeph> 类的主要功能如下：
 
 <ol TYPE="1">
    <li> 调用 <codeph>configureAssets</codeph>，它创建自定义按钮并设置其标签和说明。这些是屏幕阅读器传达给最终用户的值。</li>        
    <li>调用 <codeph>setTimeOut()</codeph>，以确保在更新属性之前，Flash Player 有足够的时间来检测屏幕阅读器。</li>
    </ol>
 
 <p><b>注意：</b>在检查 <codeph>Accessibility.active</codeph> 之前应先调用 <codeph>setTimeout()</codeph>，以给 Flash Player 提供与屏幕阅读器（如果有）连接所需的 2 秒钟时间。如果未提供足够长的延迟时间，则即使在有屏幕阅读器的情况下，<codeph>setTimeout</codeph> 调用也可能会返回 <codeph>false</codeph>。</p>
 
 <p>只有在对 <codeph>Accessibility.active</codeph> 的调用返回 <codeph>true</codeph> 时（只有在 Flash Player 当前连接到活动的屏幕阅读器时才会发生这种情况），以下示例才会处理 <codeph>Accessibility.updateProperties()</codeph> 方法。如果在没有活动的屏幕阅读器的情况下调用 <codeph>updateProperties</codeph>，则会引发 <codeph>IllegalOperationError</codeph> 异常。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex"><linktext>flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
	 创建一个新的 AccessibilityProperties 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 创建一个新的 AccessibilityProperties 对象。
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description"><apiName>description</apiName><shortdesc>
	 在呈现辅助功能时为该显示对象提供一个说明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 在呈现辅助功能时为该显示对象提供一个说明。如果要显示有关对象的大量信息，最佳的方法就是选择一个简洁的名称并将大部分内容放在 <codeph>description</codeph> 属性中。适用于整个 SWF 文件、容器、按钮和文本。默认值为空字符串。
     <p product="flash">对应于“辅助功能”面板中的“描述”字段。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple"><apiName>forceSimple</apiName><shortdesc>
	 如果为 true，则会导致 Flash Player 从辅助演示中排除该显示对象内的子对象。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 如果为 <codeph>true</codeph>，则会导致 Flash Player 从辅助演示中排除该显示对象内的子对象。默认值为 <codeph>false</codeph>。适用于所有 SWF 文件和容器。
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name"><apiName>name</apiName><shortdesc>
	 在呈现辅助功能时为该显示对象提供一个名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 在呈现辅助功能时为该显示对象提供一个名称。适用于整个 SWF 文件、容器、按钮和文本。不要将其与不相关的 <codeph>DisplayObject.name</codeph> 混淆。默认值为空字符串。
     <p product="flash">对应于“辅助功能”面板中的“名称”字段。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling"><apiName>noAutoLabeling</apiName><shortdesc>
	 如果为 true，则禁用 Flash Player 的默认自动标签系统。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 如果为 <codeph>true</codeph>，则禁用 Flash Player 的默认自动标记系统。自动标签导致按钮内的文本对象被视为按钮名称，文本字段附近的文本对象被视为文本字段名称。默认值为 <codeph>false</codeph>。仅适用于所有 SWF 文件。
     <p>将忽略 <codeph>noAutoLabeling</codeph> 属性值，除非在某个辅助功能第一次检查 SWF 文件之前指定它。如果打算将 <codeph>noAutoLabeling</codeph> 设置为 <codeph>true</codeph>，应尽早在代码中执行此操作。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut"><apiName>shortcut</apiName><shortdesc>
	 指出与该显示对象关联的快捷键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 指出与该显示对象关联的快捷键。仅为与快捷键关联的 UI 控件提供此字符串。适用于容器、按钮和文本。默认值为空字符串。
	 
	 <p><b>注意</b>：分配此属性并不会自动将指定的按键组合分配给该对象；您必须自己执行该操作，例如，通过侦听 <codeph>KeyboardEvent</codeph>。</p>
	 
	 <p>该字符串的语法使用组合键的长名称，并使用加号 (+) 字符来表示按键组合。有效的字符串示例如“Ctrl+F”、“Ctrl+Shift+Z”等等。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent"><apiName>silent</apiName><shortdesc>
	 如果为 true，则在呈现辅助功能时排除该显示对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 如果为 <codeph>true</codeph>，则从辅助功能演示中排除该显示对象。默认值为 <codeph>false</codeph>。适用于整个 SWF 文件、容器、按钮和文本。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.accessibility:Accessibility"><apiName>Accessibility</apiName><shortdesc>
 Accessibility 类管理与屏幕阅读器之间的通信。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Accessibility 类管理与屏幕阅读器之间的通信。屏幕读取器是一种辅助性技术，可以为视力有缺陷的用户提供屏幕内容的音频版本。Accessibility 类的方法是静态方法，也就是说，您不必创建该类的实例即可使用其方法。
 
 <p>要获取和设置特定对象（例如按钮、影片剪辑或文本字段）的可访问属性，请使用 <codeph>DisplayObject.accessibilityProperties</codeph> 属性。要确定播放器是否正在支持辅助功能的环境中运行，请使用 <codeph>Capabilities.hasAccessibility</codeph> 属性。 </p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as"> 下例使用 <codeph>AccessibilityExample</codeph>、<codeph>CustomAccessibleButton</codeph>、<codeph>CustomSimpleButton</codeph> 和 <codeph>ButtonDisplayState</codeph> 范例类创建与辅助功能兼容且可用于大多数屏幕阅读器的菜单。该示例执行下列任务：
 <ol>
    <li>它跟踪 <codeph>Accessibility.active</codeph> 属性，以确定屏幕阅读器当前是否处于活动状态，以及播放器是否正在与它通信。</li>
    <li>如果 <codeph>active</codeph> 属性返回 <codeph>true</codeph>，该示例将调用 <codeph>updateProperties()</codeph> 方法来应用对本示例中的按钮进行的辅助功能更改。</li>
    <li>该示例调用 <codeph>flash.utils.setTimeout()</codeph> 方法，指定 <codeph>updateAccessibility()</codeph> 结束方法应在 2 秒钟之后调用。</li>
 </ol>
 
 <p><b>注意：</b>在检查 <codeph>Accessibility.active</codeph> 之前应先调用 <codeph>setTimeout()</codeph>，以给 Flash Player 提供与屏幕阅读器（如果有）连接所需的 2 秒钟时间。如果未提供足够长的延迟时间，则即使在有屏幕阅读器的情况下，<codeph>setTimeout</codeph> 调用也可能会返回 <codeph>false</codeph>。
 </p>
 <p>只有在对 <codeph>Accessibility.active</codeph> 的调用返回 <codeph>true</codeph> 时（只有在 Flash Player 当前连接到活动的屏幕阅读器时才会发生这种情况），以下示例才会处理 <codeph>Accessibility.updateProperties()</codeph> 方法。如果在没有活动的屏幕阅读器的情况下调用 <codeph>updateProperties</codeph>，则会引发 <codeph>IllegalOperationError</codeph> 异常。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:sendEvent"><apiName>sendEvent</apiName><shortdesc>
	 
	 </shortdesc><prolog><asCustoms><nonHTML>A Boolean value indicating whether the event is one of the standard event types
	 that can be generated from an HTML form. When set to true, this parameter helps prevent
	 some problems that may occur with screen readers that interpret Flash content as part of
	 the HTML page. The default value is false.
	 </nonHTML></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiDesc>
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 </apiDesc></apiParam><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>
	 </apiDesc></apiParam><apiParam><apiItemName>nonHTML</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
	 
	 <codeph/><codeph/>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation"><linktext/></link><link href="" invalidHref="mx.accessibility.AccImpl.xml"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:Accessibility:updateProperties"><apiName>updateProperties</apiName><shortdesc>
	通知 Flash Player 应用使用 DisplayObject.accessibilityProperties 属性所做的任何辅助功能更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>在此版本的 Flash Player 中不支持辅助功能。如果 <codeph>flash.system.Capabilities.hasAccessibility</codeph> 属性为 <codeph>false</codeph>，则不要调用 <codeph>Accessibility.updateProperties()</codeph> 方法。
	
	
	</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	通知 Flash Player 应用使用 <codeph>DisplayObject.accessibilityProperties</codeph> 属性所做的任何辅助功能更改。需要调用此方法以使更改生效。 
	
	<p>如果您修改多个对象的辅助功能属性，则只需调用 <codeph>Accessibility.updateProperties()</codeph> 方法一次；多次调用可能导致性能降低以及屏幕阅读器输出不正确。</p>
	
	<p/>
	<pre>
	if (my_displayObj.accProps == undefined ) {
	  my_displayObj.accProps = new Object();
	}
	my_displayObj.accProps.name = "Photo of Mount Rushmore";
	Accessibility.updateProperties();
	</pre>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get"><apiName>active</apiName><shortdesc>
	指示某个屏幕阅读器当前是否处于活动状态，以及播放器是否正在与它通信。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示某个屏幕阅读器当前是否处于活动状态，以及播放器是否正在与它通信。
	
	<p><b/><sup/><codeph/>这是由于 Flash 和辅助功能客户端之间的异步通信机制造成的。您可以通过确保在加载您的文档后延迟 1 秒到 2 秒再调用此方法，来解决这一限制问题。</p>
	
	要确定播放器是否正在支持屏幕读取器的环境中运行，请使用 <codeph>Capabilities.hasAccessibility</codeph> 属性。 
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>