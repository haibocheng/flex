<?xml version="1.0"?>
<apiPackage id="flash.data"><apiName>flash.data</apiName><apiDetail/><apiClassifier id="flash.data:SQLViewSchema"><apiName>SQLViewSchema</apiName><shortdesc>
 SQLViewSchema 实例提供了一些信息，以描述数据库中的特定视图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLTableSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLViewSchema 实例提供了一些信息，以描述数据库中的特定视图。它包含视图的名称（<codeph>name</codeph> 属性）、用于创建该视图的 SQL 语句（<codeph>sql</codeph> 属性）和有关视图的列的信息（<codeph>columns</codeph> 属性）。
 
 <p>要获取数据库的视图架构信息，请使用 <codeph>SQLConnection.loadSchema()</codeph> 方法加载架构信息，确保对 <codeph>type</codeph> 参数的值使用 <codeph>null</codeph> 或 <codeph>SQLViewSchema</codeph>。在生成的 SQLSchemaResult 实例中，<codeph>views</codeph> 属性包含表示数据库中各个视图的 SQLViewSchema 实例的数组。</p>
 
 <p>通常，开发人员代码不直接构造 SQLViewSchema 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema"><linktext>flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLViewSchema:SQLViewSchema"><apiName>SQLViewSchema</apiName><shortdesc>
     创建 SQLViewSchema 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>关联数据库的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>视图的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于创建该视图的 SQL 语句。
     
     </apiDesc></apiParam><apiParam><apiItemName>columns</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>SQLColumnSchema 实例的数组，用于描述此视图的列。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLViewSchema 实例。通常，开发人员代码不直接调用 SQLViewSchema 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.data:SQLColumnSchema"><apiName>SQLColumnSchema</apiName><shortdesc>
 SQLColumnSchema 类提供一些信息，描述了数据库表中的特定列的特性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLColumnSchema 类提供一些信息，描述了数据库表中的特定列的特性。
 
 <p>要获取数据库表中一个或多个表的列架构信息，请使用 <codeph>SQLConnection.loadSchema()</codeph> 方法加载架构信息，确保对 <codeph>includeColumnSchema</codeph> 参数的值使用 <codeph>true</codeph>。在生成的 SQLSchemaResult 实例中，每个表和视图定义都将包括一个 <codeph>columns</codeph> 属性，此属性是表示表或视图中各个列的 SQLColumnSchema 实例的数组。</p>
 
 <p>通常，开发人员代码不直接构造 SQLColumnSchema 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema"><linktext>flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLViewSchema"><linktext>flash.data.SQLViewSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLColumnSchema:SQLColumnSchema"><apiName>SQLColumnSchema</apiName><shortdesc>
     构造 SQLColumnSchema 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>列的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>primaryKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>指示此列是否是关联表的主键的一部分。
     
     </apiDesc></apiParam><apiParam><apiItemName>allowNull</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>指示此列是否能包含 <codeph>NULL</codeph> 值。
     
     </apiDesc></apiParam><apiParam><apiItemName>autoIncrement</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>指示此列是否为自增列。
     
     </apiDesc></apiParam><apiParam><apiItemName>dataType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>列的声明类型。
     
     </apiDesc></apiParam><apiParam><apiItemName>defaultCollationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>为此列定义的排序顺序。此值对应于 SQLCollationType 类中的常数之一：
     <ul>
       <li><codeph>SQLCollationType.BINARY</codeph> 指示该列使用 <codeph>BINARY</codeph> 排序顺序。</li>
       <li><codeph>SQLCollationType.NO_CASE</codeph> 指示该列使用 <codeph>NOCASE</codeph> 排序顺序，意味着以不区分大小写的方式对文本进行比较。</li>
     </ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     构造 SQLColumnSchema 实例。通常，开发人员代码不直接调用 SQLColumnSchema 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLCollationType"><linktext>flash.data.SQLCollationType</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLColumnSchema:allowNull:get"><apiName>allowNull</apiName><shortdesc>
     指示在此列中是否允许使用 NULL 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示在此列中是否允许使用 <codeph>NULL</codeph> 值。用 <codeph>NOT NULL</codeph> 约束声明的列的 <codeph>allowNull</codeph> 属性具有 <codeph>false</codeph> 值。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:autoIncrement:get"><apiName>autoIncrement</apiName><shortdesc>
     指示此列是否为自增列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示此列是否为自增列。自增列是一种特殊类型的 <codeph>PRIMARY KEY</codeph> 列，在向表中插入新行时，会自动生成其值作为整数序列中的下一个值。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:dataType:get"><apiName>dataType</apiName><shortdesc>
     以字符串形式获取列的数据类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     以字符串形式获取列的数据类型。该值是在用于定义表的 <codeph>CREATE TABLE</codeph> 语句中指定的文本数据类型名称，如果未指定数据类型，则为 <codeph>null</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:defaultCollationType:get"><apiName>defaultCollationType</apiName><shortdesc>
     指示为此列定义的默认排序顺序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示为此列定义的默认排序顺序。此属性的值对应于 SQLCollationType 类中的常数之一：
     <ul>
       <li><codeph>SQLCollationType.BINARY</codeph> 指示该列使用 <codeph>BINARY</codeph> 排序顺序。</li>
       <li><codeph>SQLCollationType.NO_CASE</codeph> 指示该列使用 <codeph>NOCASE</codeph> 整理顺序，意味着以不区分大小写的方式对文本进行比较。</li>
     </ul>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLCollationType"><linktext>flash.data.SQLCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnSchema:name:get"><apiName>name</apiName><shortdesc>
     获取列的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     获取列的名称。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:primaryKey:get"><apiName>primaryKey</apiName><shortdesc>
     指示此列是否为其关联表的主键列（或复合键中的主键列之一）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示此列是否为其关联表的主键列（或复合键中的主键列之一）。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLColumnNameStyle"><apiName>SQLColumnNameStyle</apiName><shortdesc>
 该类包含一些常量，它们表示 SQLConnection.columnNameStyle 属性的可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 该类包含一些常量，它们表示 <codeph>SQLConnection.columnNameStyle</codeph> 属性的可能值。这些值指示不同的选项，它们控制如何设置由于执行 SQL <codeph>SELECT</codeph> 语句而返回的对象中列名称（属性名称）的格式。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links><apiValue id="flash.data:SQLColumnNameStyle:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
     指示从 SELECT 语句返回的列名称使用默认格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示从 <codeph>SELECT</codeph> 语句返回的列名称使用默认格式。在默认格式中，当 <codeph>SELECT</codeph> 语句中包括多个表时，列名称的格式为 <codeph>[table-name]_[column-name]</codeph>；当 <codeph>SELECT</codeph> 语句包括单个表时，列名称的格式为 <codeph>[column-name]</codeph>。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:LONG"><apiName>LONG</apiName><shortdesc>
     指示从 SELECT 语句返回的列名称使用长列名称格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>long</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示从 <codeph>SELECT</codeph> 语句返回的列名称使用长列名称格式。在此格式中，列名称使用 <codeph>[table-name]_[column-name]</codeph> 格式，而不管 <codeph>SELECT</codeph> 语句中包括多少个表。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:SHORT"><apiName>SHORT</apiName><shortdesc>
     指示从 SELECT 语句返回的列名称使用短列名称格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>short</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示从 <codeph>SELECT</codeph> 语句返回的列名称使用短列名称格式。在此格式中，列名称使用 <codeph>[column-name]</codeph> 格式，而不管 <codeph>SELECT</codeph> 语句中包括多少个表。
	 
	 <p>如果结果集包含多个同名的列，则只向结果对象中添加一个具有该名称的属性。分配给该属性的值是从结果行中具有该名称的最后一列中提取的。以下面的 <codeph>SELECT</codeph> 语句为例：</p>
	 
	 <pre>
	 SELECT customers.customerId, addresses.customerId
	 FROM customers INNER JOIN addresses
	    ON customers.customerId = addresses.customerId
	 </pre>
	 
	 <p>在对使用短列名称格式的 SQLConnection 实例执行此语句时，每个结果对象都具有一个名为 <codeph>customerId</codeph> 的属性，该属性包含 <codeph>addresses</codeph> 表的 <codeph>customerId</codeph> 列中的值。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLSchema"><apiName>SQLSchema</apiName><shortdesc>
 SQLSchema 类是一个基类，用于保存数据库对象的架构信息，如表、视图和索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLSchema 类是一个基类，用于保存数据库对象的架构信息，如表、视图和索引。
 
 <p>要获取数据库的架构信息，请使用 <codeph>SQLConnection.loadSchema()</codeph> 方法加载架构信息。生成的 SQLSchemaResult 实例包含表示数据库中各个对象的实例的数组。</p>
 
 <p>通常，开发人员代码不直接构造 SQLSchema 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchema:SQLSchema"><apiName>SQLSchema</apiName><shortdesc>
     创建 SQLSchema 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>关联数据库的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>数据库对象的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于构造该数据库对象的 SQL。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLSchema 实例。通常，开发人员代码不直接调用 SQLSchema 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLSchema:database:get"><apiName>database</apiName><shortdesc>
     此架构对象所属的数据库的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     此架构对象所属的数据库的名称。与 SQLConnection 实例相关联的主数据库（通过调用 SQLConnection 实例的 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 方法打开的数据库文件）的名称为“main”。对于使用 <codeph>SQLConnection.attach()</codeph> 方法附加到该连接的其它数据库，该值是在 <codeph>attach()</codeph> 方法调用中指定的名称。
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchema:name:get"><apiName>name</apiName><shortdesc>
     此架构对象的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     此架构对象的名称。数据库中的每个对象均具有一个唯一的名称。此名称是在创建该对象的 SQL 语句中定义的（如用于表的 <codeph>CREATE TABLE</codeph> 语句）。
	 
	 <p>例如，如果数据库的索引是使用以下 SQL 语句创建的，则该索引架构的 <codeph>name</codeph> 属性值为<codeph>"customer_index"</codeph>：</p>
	 
	 <codeblock>CREATE INDEX customer_index ON customers (id)</codeblock>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLSchema:sql:get"><apiName>sql</apiName><shortdesc>
     返回用于创建此架构对象的 SQL 语句的所有文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     返回用于创建此架构对象的 SQL 语句的所有文本。数据库中的每个对象都是使用 SQL 语句创建的。
	 
	 <p>例如，如果数据库索引是使用以下 SQL 创建的：</p>
	 <codeblock>CREATE INDEX customer_index ON customers (id)</codeblock>
	 <p>则该索引架构的 <codeph>sql</codeph> 属性将是该语句的所有文本。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLCollationType"><apiName>SQLCollationType</apiName><shortdesc>
 此类包含一些常数，它们表示 SQLColumnSchema 构造函数的 defaultCollationType 参数以及 SQLColumnSchema.defaultCollationType 属性的可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 此类包含一些常数，它们表示 SQLColumnSchema 构造函数的 <codeph>defaultCollationType</codeph> 参数以及 <codeph>SQLColumnSchema.defaultCollationType</codeph> 属性的可能值。
 
 <p>这些值表示可为数据库表中的列指定的不同排序顺序。<i>整理顺序</i>是一种对数据进行排序和比较的方式，例如数据库是否区分大小写字符。</p>
 
 <p>有关定义和使用整理顺序的详细信息，请参阅附录“<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>”中的“<xref href="../../localDatabaseSQLSupport.html#collate">整理</xref>”部分。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLColumnSchema/defaultCollationType"><linktext>flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links><apiValue id="flash.data:SQLCollationType:BINARY"><apiName>BINARY</apiName><shortdesc>
     指示将列定义为使用 BINARY 排序顺序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>binary</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示将列定义为使用 <codeph>BINARY</codeph> 排序顺序。<codeph>SQLCollationType.BINARY</codeph> 排序使用字节值比较两个值，而不管字符的文本编码如何。
	 
	 <p>如果将二进制整理与 <codeph>TEXT</codeph> 存储类的值一起使用，则在对列值进行排序和比较时，数据库将区分大小写字符。</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnSchema/defaultCollationType"><linktext>flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLCollationType:NO_CASE"><apiName>NO_CASE</apiName><shortdesc>
     指示将列定义为使用 NOCASE 排序顺序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noCase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示将列定义为使用 <codeph>NOCASE</codeph> 排序顺序。在对两个值进行排序和比较时，<codeph>SQLCollationType.NO_CASE</codeph> 整理忽略大小写差异。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnSchema/defaultCollationType"><linktext>flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLTransactionLockType"><apiName>SQLTransactionLockType</apiName><shortdesc>
 该类包含一些常数，它们表示 SQLConnection.begin() 方法的 option 参数的可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 该类包含一些常数，它们表示 <codeph>SQLConnection.begin()</codeph> 方法的 <codeph>option</codeph> 参数的可能值。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links><apiValue id="flash.data:SQLTransactionLockType:DEFERRED"><apiName>DEFERRED</apiName><shortdesc>
     指定延迟锁定事务选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deferred</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指定延迟锁定事务选项。除非首先访问数据库，否则，延迟锁定事务不会对数据库获取锁定。使用延迟事务时，在第一次读取或写入操作之前不获取锁定。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:EXCLUSIVE"><apiName>EXCLUSIVE</apiName><shortdesc>
     指定独占锁定事务选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exclusive</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指定独占锁定事务选项。独占锁定事务对数据库立即获取锁定。通过不同 SQLConnection（在同一个 AIR 应用程序中或其它应用程序中）对同一个数据库执行操作的其它 SQLStatement 对象无法对该数据库读取或写入数据。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:IMMEDIATE"><apiName>IMMEDIATE</apiName><shortdesc>
     指定立即锁定事务选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>immediate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指定立即锁定事务选项。立即锁定事务对数据库立即获取锁定。通过不同 SQLConnection（在同一个 AIR 应用程序中或其它应用程序中）对同一个数据库执行操作的 SQLStatement 对象可以从该数据库中读取数据，但不能向其中写入数据。但是，对于从该数据库中读取数据的其它连接，数据库中数据的初始状态与调用事务内 SQLConnection 实例的 <codeph>begin()</codeph> 方法之前的数据库的状态相同。在立即锁定事务内进行的任何未提交的数据更改对其它连接不可用。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLSchemaResult"><apiName>SQLSchemaResult</apiName><shortdesc>
 SQLSchemaResult 实例包含调用 SQLConnection.loadSchema() 方法而生成的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLSchemaResult 实例包含调用 <codeph>SQLConnection.loadSchema()</codeph> 方法而生成的信息。根据调用 <codeph>SQLConnection.loadSchema()</codeph> 时使用的参数值，它包含四个保存所请求架构数据的 Array 属性。
 
 <p>要检索 <codeph>SQLConnection.loadSchema()</codeph> 调用所使用的 SQLSchemaResult 实例，请调用 SQLConnection 实例的 <codeph>getSchemaResult()</codeph> 方法。通常，开发人员代码不直接创建 SQLSchemaResult 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>flash.data.SQLConnection.getSchemaResult()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchemaResult:SQLSchemaResult"><apiName>SQLSchemaResult</apiName><shortdesc>
     创建 SQLSchemaResult 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>tables</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 请求中所指定的 SQLTableSchema 实例的数组。
     
     </apiDesc></apiParam><apiParam><apiItemName>views</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 请求中所指定的 SQLViewSchema 实例的数组。
     
     </apiDesc></apiParam><apiParam><apiItemName>indices</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 请求中所指定的 SQLIndexSchema 实例的数组。
     
     </apiDesc></apiParam><apiParam><apiItemName>triggers</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc><codeph>loadSchema()</codeph> 请求中所指定的 SQLTriggerSchema 实例的数组。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLSchemaResult 实例。通常，开发人员代码不直接调用 SQLSchemaResult 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLSchemaResult:indices:get"><apiName>indices</apiName><shortdesc>
     对 SQLConnection.loadSchema() 的调用中所请求的 SQLIndexSchema 实例的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     对 <codeph>SQLConnection.loadSchema()</codeph> 的调用中所请求的 SQLIndexSchema 实例的数组。如果指定的数据库不包含任何索引，或者 <codeph>loadSchema()</codeph> 调用指定结果中不包括索引，则 <codeph>indices</codeph> 属性是一个空数组（<codeph>length</codeph> 属性为 0 的数组）。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLIndexSchema"><linktext>flash.data.SQLIndexSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:tables:get"><apiName>tables</apiName><shortdesc>
     对 SQLConnection.loadSchema() 的调用中所请求的 SQLTableSchema 实例的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     对 <codeph>SQLConnection.loadSchema()</codeph> 的调用中所请求的 SQLTableSchema 实例的数组。如果指定的数据库不包含任何表，或者 <codeph>loadSchema()</codeph> 调用指定结果中不包括表，则 <codeph>tables</codeph> 属性是一个空数组（<codeph>length</codeph> 属性为 0 的数组）。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema"><linktext>flash.data.SQLTableSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:triggers:get"><apiName>triggers</apiName><shortdesc>
     对 SQLConnection.loadSchema() 的调用中所请求的 SQLTriggerSchema 实例的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     对 <codeph>SQLConnection.loadSchema()</codeph> 的调用中所请求的 SQLTriggerSchema 实例的数组。如果指定的数据库不包含任何触发器，或者 <codeph>loadSchema()</codeph> 调用指定结果中不包括触发器，则 <codeph>triggers</codeph> 属性是一个空数组（<codeph>length</codeph> 属性为 0 的数组）。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTriggerSchema"><linktext>flash.data.SQLTriggerSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:views:get"><apiName>views</apiName><shortdesc>
     对 SQLConnection.loadSchema() 的调用中所请求的 SQLViewSchema 实例的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     对 <codeph>SQLConnection.loadSchema()</codeph> 的调用中所请求的 SQLViewSchema 实例的数组。如果指定的数据库不包含任何视图，或者如果 <codeph>loadSchema()</codeph> 调用指示结果中不应包括视图，则 <codeph>views</codeph> 属性为空数组（<codeph>length</codeph> 属性为 0 的数组）。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLViewSchema"><linktext>flash.data.SQLViewSchema</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLConnection"><apiName>SQLConnection</apiName><shortdesc>
 SQLConnection 实例用于管理本地 SQL 数据库文件（本地数据库）的创建和连接过程。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLConnection 实例用于管理本地 SQL 数据库文件（本地数据库）的创建和连接过程。
 
 <p>SQLConnection 类的功能分为以下几个类别：</p>
 
 <ul>
   <li><p>通过调用 <codeph>open()</codeph> 方法或 <codeph>openAsync()</codeph> 方法可以创建或打开本地 SQL 数据库文件。如果数据库文件不存在，则这些方法也可以在打开连接的同时创建数据库文件。建立了到数据库的连接后，可以通过创建 SQLStatement 实例并将 SQLConnection 实例分配给 SQLStatement 的 <codeph>sqlConnection</codeph> 属性来创建并对数据库执行 SQL 语句。</p></li>
 
   <li><p>SQLConnection 类还提供 SQL 语句的状态，包括使用 <codeph>begin()</codeph>、<codeph>commit()</codeph> 和 <codeph>rollback()</codeph> 方法在一个事务中执行多个语句的机制。</p></li>
 
   <li><p>通过 SQLConnection 类，可以访问所连接的数据库的数据库架构信息。数据库的架构说明数据库的表、列、索引和触发器的定义。有关详细信息，请参阅 <codeph>loadSchema()</codeph> 方法。</p></li>
 
   <li><p>通过 SQLConnection 类，可以使用 AES-CCM 对数据库加密。这样为数据提供了身份验证和保密性。为了对数据库加密，创建数据库时必须指定一个 16 字节的密钥（使用 ByteArray 指定）。以后可以使用 <codeph>SQLConnection.reencrypt()</codeph> 方法更改此密钥。加密会降低数据库的读写性能。加密应用于磁盘上存储的数据，但不应用于内存中的临时数据缓存。对于内存中的数据库<i>不</i> 支持加密。</p></li>
 
   <li><p>可以使用 SQLConnection 实例来接收数据库级别的事件通知并控制数据库各个方面的配置，其中包括缓存页大小、过程取消和语句执行选项。</p></li>
 </ul>
 
 <p><codeph>SQLConnection</codeph> 实例可在异步和同步这两种完全不同的执行模式之一中运行。要使用同步执行模式，请使用 <codeph>open()</codeph> 方法连接到 SQLConnection 实例的主数据库。要使用异步执行模式，请使用 <codeph>openAsync()</codeph> 方法连接该实例的主数据库。</p>
 
 <p>在使用异步执行模式时，可以使用事件侦听器或 Responder 实例来确定操作何时完成或失败。由于操作是在后台而不是在主应用程序线程中运行，因此即使数据库操作正在执行，应用程序也可以继续运行并响应用户交互。</p>
 
 <p>在异步执行模式中，可以通过调用相应的方法来开始特定操作，并可以通过对相应的事件注册侦听器来检测操作的完成（或失败）。每个操作都有一个相关联的事件，操作成功完成时将分派该事件；例如，当一个 <codeph>openAsync()</codeph> 方法调用成功完成时（数据库连接打开时），将会分派 <codeph>open</codeph> 事件。当任何操作失败时，将分派 <codeph>error</codeph> 事件。SQLErrorEvent 对象的 <codeph>error</codeph> 属性中的 SQLError 实例包含有关特定错误的信息，包括尝试的操作和操作失败的原因。</p>
 
 <p>在使用同步执行模式时，不必注册事件侦听器即可以确定操作何时完成或失败。要识别错误，请将引发错误的语句括在 <codeph>try..catch</codeph> 块中。由于同步操作是在主执行线程中执行的，因此执行数据库操作时，所有应用程序功能（包括刷新屏幕和允许鼠标和键盘互操作）都暂停。对于长时间运行的操作，这会导致应用程序中出现明显的暂停。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.events.xml#SQLEvent"><linktext>flash.events.SQLEvent</linktext></link><link href="flash.events.xml#SQLErrorEvent"><linktext>flash.events.SQLErrorEvent</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_en"><linktext>快速入门：异步处理本地 SQL 数据库 (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_flash_en"><linktext>快速入门：异步处理本地 SQL 数据库 (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_html_en"><linktext>快速入门：异步处理 SQL 数据库 (HTML)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_en"><linktext>快速入门：同步处理本地 SQL 数据库 (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_flash_en"><linktext>快速入门：同步处理本地 SQL 数据库 (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_html_en"><linktext>快速入门：同步处理本地 SQL 数据库 (HTML)</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.UPDATE_update"><apiName>update</apiName><shortdesc>
 在任何连接的数据库的任何表中的数据由于 SQL UPDATE 命令而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLUpdateEvent.UPDATE</apiEventType><adobeApiEventClassifier>flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在任何连接的数据库的任何表中的数据由于 SQL <codeph>UPDATE</codeph> 命令而发生更改时分派。数据更改可能是通过 SQLStatement 实例执行 <codeph>UPDATE</codeph> 语句的直接结果，也可能是在响应语句执行时触发器触发所导致的间接结果。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SCHEMA_schema"><apiName>schema</apiName><shortdesc>
 在 loadSchema() 方法调用操作成功完成并且架构结果准备就绪时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.SCHEMA</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>loadSchema()</codeph> 方法调用操作成功完成并且架构结果准备就绪时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_rollback"><apiName>rollback</apiName><shortdesc>
 在 rollback() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>rollback()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.REENCRYPT_reencrypt"><apiName>reencrypt</apiName><shortdesc>
 调用 reencrypt() 方法的操作成功完成时将分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 调用 <codeph>reencrypt()</codeph> 方法的操作成功完成时将分派此事件。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.OPEN_open"><apiName>open</apiName><shortdesc>
 在 openAsync() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.OPEN</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>openAsync()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.INSERT_insert"><apiName>insert</apiName><shortdesc>
 在任何连接的数据库的任何表中的数据由于 SQL INSERT 命令而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLUpdateEvent.INSERT</apiEventType><adobeApiEventClassifier>flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在任何连接的数据库的任何表中的数据由于 SQL <codeph>INSERT</codeph> 命令而发生更改时分派。数据更改可能是通过 SQLStatement 实例执行 <codeph>INSERT</codeph> 语句的直接结果，也可能是在响应语句执行时触发器触发所导致的间接结果。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
 任何 SQLConnection 对象的异步操作导致错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 任何 SQLConnection 对象的异步操作导致错误时分派。作为事件对象分派的 SQLErrorEvent 实例具有一个 <codeph>error</codeph> 属性，该属性包含有关尝试的操作和失败原因的信息。
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DETACH_detach"><apiName>detach</apiName><shortdesc>
 在 detach() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.DETACH</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>detach()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.DELETE_delete"><apiName>delete</apiName><shortdesc>
 在任何连接的数据库的任何表中的数据由于 SQL DELETE 命令而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLUpdateEvent.DELETE</apiEventType><adobeApiEventClassifier>flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在任何连接的数据库的任何表中的数据由于 SQL <codeph>DELETE</codeph> 命令而发生更改时分派。数据更改可能是通过 SQLStatement 实例执行 <codeph>DELETE</codeph> 语句的直接结果，也可能是在响应语句执行时触发器触发所导致的间接结果。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DEANALYZE_deanalyze"><apiName>deanalyze</apiName><shortdesc>
 在 deanalyze() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>deanalyze()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMMIT_commit"><apiName>commit</apiName><shortdesc>
 在 commit() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.COMMIT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>commit()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
 在 close() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.CLOSE</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>close()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMPACT_compact"><apiName>compact</apiName><shortdesc>
 在 compact() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.COMPACT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>compact()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CANCEL_cancel"><apiName>cancel</apiName><shortdesc>
 在 cancel() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.CANCEL</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>cancel()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.BEGIN_begin"><apiName>begin</apiName><shortdesc>
 在 begin() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.BEGIN</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>begin()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ATTACH_attach"><apiName>attach</apiName><shortdesc>
 在 attach() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.ATTACH</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>attach()</codeph> 方法调用操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ANALYZE_analyze"><apiName>analyze</apiName><shortdesc>
 在 analyze() 操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.ANALYZE</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在 <codeph>analyze()</codeph> 操作成功完成时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>analyze()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLConnection:SQLConnection"><apiName>SQLConnection</apiName><shortdesc>
     创建 SQLConnection 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>如果从主应用程序沙箱外的任意沙箱中调用构造函数。 
      
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
     创建 SQLConnection 实例。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLConnection:addEventListener"><apiName>addEventListener</apiName><shortdesc>
     
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果<ph platform="actionscript">，如下面的示例所示：</ph> <ph platform="javascript">。</ph>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>函数可以有任何名称。</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">此参数适用于 SWF 内容所使用的 ActionScript 3.0 显示列表体系结构中的显示对象。</ph><ph platform="actionscript">确定侦听器是运行于捕获阶段还是目标阶段和冒泡阶段。如果将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。如果 <codeph>useCapture</codeph> 为 <codeph>false</codeph>，则侦听器只在目标或冒泡阶段处理事件。要在所有三个阶段都侦听事件，请调用 <codeph>addEventListener</codeph> 两次：一次将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，一次将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0.0</apiData><apiDesc>事件侦听器的优先级。优先级由一个带符号的 32 位整数指定。数字越大，优先级越高。优先级为 <i>n</i> 的所有侦听器会在优先级为 <i>n</i> -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定对侦听器的引用是强引用，还是弱引用。强引用（默认值）可防止您的侦听器被当作垃圾回收。弱引用则没有此作用。 <p>类级别成员函数不属于垃圾回收的对象，因此可以对类级别成员函数将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph> 而不会使它们受垃圾回收的影响。如果对作为嵌套内部函数的侦听器将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph>，则该函数将作为垃圾回收并且不再是永久函数。如果创建对该内部函数的引用（将该函数保存到另一个变量中），则该函数将不作为垃圾回收并仍将保持永久。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
     
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。<ph platform="actionscript">可以为特定类型的事件、阶段和优先级在显示列表中的所有节点上注册事件侦听器。</ph>
	
	<p platform="javascript">AIR 运行时中的 JavaScript 代码使用此方法注册 AIR API 定义的事件的事件侦听器。对于其它 JavaScript 事件（如 DOM <codeph>body</codeph> 对象的 <codeph>onload</codeph> 事件），您可以像对浏览器中运行的内容一样使用标准事件处理技术。</p>
	
	<p>成功注册一个事件侦听器后，无法通过额外调用 <codeph>addEventListener()</codeph> 来更改其优先级。要更改侦听器的优先级，必须首先调用 <codeph>removeListener()</codeph>。然后，可以使用新的优先级再次注册该侦听器。 </p>
	
	<p>请记住，注册该侦听器后，如果继续调用具有不同 <codeph>type</codeph> 或 <codeph>useCapture</codeph> 值的 <codeph>addEventListener()</codeph>，则会创建单独的侦听器注册。<ph platform="actionscript">例如，如果首先注册 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph> 的侦听器，则该侦听器只在捕获阶段进行侦听。如果使用同一个侦听器对象再次调用 <codeph>addEventListener()</codeph>，并将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>，那么便会拥有两个单独的侦听器：一个在捕获阶段进行侦听，另一个在目标和冒泡阶段进行侦听。</ph>
	</p>
	
	<p platform="actionscript">不能只为目标阶段或冒泡阶段注册事件侦听器。这些阶段在注册期间是成对出现的，因为冒泡阶段只适用于目标节点的始祖。</p>
	
	<p>如果不再需要某个事件侦听器，可调用 <codeph>removeEventListener()</codeph> 删除它，否则会产生内存问题。事件侦听器不会自动从内存中删除，因为只要调度对象存在，垃圾回收器就不会删除侦听器（除非 <codeph>useWeakReference</codeph> 参数设置为 <codeph>true</codeph>）。</p>
		
	<p>复制 EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。</p>
	
	
	<p platform="actionscript">如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。</p>
	
	<p platform="actionscript">如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:analyze"><apiName>analyze</apiName><shortdesc>
     收集有关数据库索引的统计信息，并将其存储在数据库中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用此方法时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>resourceName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>要分析其索引的数据库或表的名称。如果指定的资源是一个名称在所有附加的数据库中唯一的表，则只需指定表名称。不过，指定表名称时可以使用 <codeph>[database-name].[table-name]</codeph> 形式以避免表名称不唯一时造成混淆。如果 <codeph>resourceName</codeph> 参数为 <codeph>null</codeph>（默认值），则分析所有附加的数据库中的所有索引。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>analyze</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     收集有关数据库索引的统计信息，并将其存储在数据库中。查询优化程序（数据库引擎的一部分，用于确定执行每个语句的最有效方式）随后可以使用这些统计信息。在执行特定查询时，统计信息有助于查询优化程序针对要使用的索引做出更佳选择。
	 
	 <p>如果数据库定义了索引，但尚未调用 <codeph>analyze()</codeph> 方法，则运行时仍将使用这些索引执行语句。不过，在没有由 <codeph>analyze()</codeph> 方法生成的附加统计信息的情况下，运行时不能为特定查询选择最有效的索引。</p>
	 
	 <p>当表的数据发生更改时（由于执行 <codeph>INSERT</codeph>、<codeph>UPDATE</codeph> 或 <codeph>DELETE</codeph> 语句），与该表相关联的索引也会更改。由 <codeph>analyze()</codeph> 生成的统计信息不会自动更新。因此，进行大量数据更改后，再次调用 <codeph>analyze()</codeph> 方法可能大有裨益。但是，再次调用 <codeph>analyze()</codeph> 所获得的益处将取决于多个因素，包括对表定义的索引数、表中已更改的行数和总行数之间的关系、表的索引数据有多大变化以及更改后的数据和更改前的数据之间的差异程度。</p>
     
     <p><codeph>resourceName</codeph> 参数指示是应该对所有附加的数据库的索引、特定数据库的索引，还是特定表的索引执行操作。</p>
     
     <p>每次调用此方法时，均会清除以前创建的任何统计数据并为 <codeph>resourceName</codeph> 参数中指定的数据库或表（如果 <codeph>resourceName</codeph> 为 <codeph>null</codeph>，则为所有连接的数据库中的所有表）重新创建统计数据。数据库连接处于打开状态时，可以随时调用此方法。<codeph>analyze()</codeph> 操作和其统计数据不包括在事务中；不过，当数据库具有当前事务时（<codeph>inTransaction</codeph> 属性为 <codeph>true</codeph>），最好不要调用 <codeph>analyze()</codeph>。这是因为 <codeph>analyze()</codeph> 调用不会考虑已在事务中执行但尚未提交的任何数据、表架构或索引更改，并且事务一旦提交，<codeph>analyze()</codeph> 数据将会过期。</p>
     
     <p>要删除用 <codeph>analyze()</codeph> 方法创建的统计数据，请使用 <codeph>deanalyze()</codeph> 方法。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>deanalyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:analyze_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:analyze_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:attach"><apiName>attach</apiName><shortdesc>
     将另一个数据库添加到 SQLConnection 实例中，并将新数据库命名为指定的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>name</codeph> 参数为空字符串 (<codeph>""</codeph>) 或 <codeph>null</codeph> 时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>为 <codeph>reference</codeph> 参数指定的值不是 flash.filesystem.File 实例时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>encryptionKey</codeph> 参数不是 <codeph>null</codeph>，且其 <codeph>length</codeph> 不是 16 个字节时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> 参数为 <codeph>null</codeph>，且 <codeph>encryptionKey</codeph> 参数不是 <codeph>null</codeph> 时
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）时；或某个事务当前处于打开状态（<codeph>inTransaction</codeph> 属性为 <codeph>true</codeph>）时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于识别新附加的数据库的名称。在使用 <codeph>[database-name].[table-name]</codeph> 格式时，此名称可在 SQL 语句中用于显式指示某个表属于指定的数据库。“main”和“temp”是保留名称，不得使用。
     
     </apiDesc></apiParam><apiParam><apiItemName>reference</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>对要附加的数据库文件的引用（flash.filesystem.File 实例）。如果该引用所引用的文件不存在，则将根据为用于连接主数据库的 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 调用中的 <codeph>openMode</codeph> 参数指定的值，创建一个新数据库文件或引发错误。
	 
     <p>如果该参数的值为 <codeph>null</codeph>，则将在内存中创建并附加一个数据库。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>attach</codeph> 或 <codeph>error</codeph> 事件。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>encryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>数据库文件的加密密钥。如果调用 <codeph>attach()</codeph> 来创建数据库，则对该数据库进行加密，并使用指定密钥作为数据库的加密密钥。如果通过该调用附加现有的加密数据库，则该值必须与数据库的加密密钥相匹配，否则会出错。如果所附加的数据库未加密（即为了创建未加密的数据库），则该值必须为 <codeph>null</codeph>（默认值）。
	 
	 <p>有效的加密密钥长度为 16 个字节。无法对内存中的数据库加密，因此 <codeph>reference</codeph> 参数的值为 <codeph>null</codeph> 时此参数必须为 <codeph>null</codeph>。</p>
	 
	 <p>附加加密数据库时，如果所提供的加密密钥与数据库的加密密钥不匹配，则会出现异常。在同步执行模式中将引发 SQLError 异常。在异步执行模式中将分派 SQLErrorEvent，并且该事件对象的 <codeph>error</codeph> 属性包含一个 SQLError 实例。在任何一种情况下，SQLError 对象的 <codeph>errorID</codeph> 属性都为 3138（“所打开的文件不是数据库文件”）。</p>
	 
	 <p>从 AIR 1.5 开始提供 <codeph>encryptionKey</codeph> 参数。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     将另一个数据库添加到 SQLConnection 实例中，并将新数据库命名为指定的名称。附加数据库允许在对此 SQLConnection 实例执行的 SQL 语句中使用该数据库。
     
     <p>如果已经使用指定的名称附加了数据库，则调用 <codeph>attach()</codeph> 将生成一个 <codeph>error</codeph> 事件。不过，同一个数据库可以使用唯一的名称附加多次。单个 SQLConnection 实例只能附加 10 个数据库。</p>
     
     <p>在使用可对主数据库（使用 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 连接的数据库）执行的 <codeph>attach()</codeph> 连接的数据库上可以执行任何 SQL 语句。SQL 语句可以访问附加到该语句的关联 SQLConnection 实例的任何数据库中的表，包括在单个语句中访问多个数据库中的表。运行时在解析语句中的表名称时，它将按照数据库的附加顺序搜索 SQLConnection 实例的数据库，从使用 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 方法连接的数据库开始搜索。在语句中使用该数据库名称（在 <codeph>attach()</codeph> 方法的 <codeph>name</codeph> 参数中指定）可以显式限定表名称。</p>
     
     <p>要删除使用 <codeph>attach()</codeph> 方法附加的数据库，请使用 <codeph>detach()</codeph> 方法。在关闭 SQLConnection 实例（通过调用 <codeph>close()</codeph> 方法）时，会断开所有附加的数据库。</p>
     
     <p>附加的数据库将使用与主数据库相同的执行模式（同步或异步），具体取决于主数据库是使用 <codeph>open()</codeph> 方法还是 <codeph>openAsync()</codeph> 方法进行连接的。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/detach()"><linktext>detach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:attach_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:attach_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:begin"><apiName>begin</apiName><shortdesc>
     开始一个事务，其中将对针对连接的一个或多个数据库执行的所有 SQL 语句进行分组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用此方法时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果指定的选项不是 <codeph>SQLTransactionLockType</codeph> 常数之一。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>option</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>指示将由事务使用的锁定策略。此值可以是 SQLTransactionLockType 类中定义的常数之一：
     <ul>
        <li><codeph>SQLTransactionLockType.DEFERRED</codeph> 指示在首次读取或写入操作之前不获取锁定。</li>
        <li><codeph>SQLTransactionLockType.EXCLUSIVE</codeph> 指示尽快获取锁定，且其它 SQLConnection 实例无法读取或写入该数据库。</li>
        <li><codeph>SQLTransactionLockType.IMMEDIATE</codeph> 指示尽快获取锁定，其它 SQLConnection 实例可以读取但不能写入该数据库。</li>
     </ul>
	 <p>默认值 (<codeph>null</codeph>) 等效于 <codeph>SQLTransactionLockType.DEFERRED</codeph>。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>begin</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     开始一个事务，其中将对针对连接的一个或多个数据库执行的所有 SQL 语句进行分组。
     
     <p>默认情况下，每个 SQL 语句都是在其自己的事务内执行的，语句的执行成功或失败时，事务将结束。使用 <codeph>begin()</codeph> 方法创建事务将导致创建新的手动事务。从此时开始，针对 SQLConnection 实例执行的所有 SQL 语句都在该事务内发生，并可以分组提交（永久保存）或回滚（撤消）这些语句所执行的任何动作或修改。</p>
     
     <p>不允许使用嵌套的事务（忽略对 <codeph>begin()</codeph> 的嵌套调用）。要结束事务，请调用 <codeph>commit()</codeph> 或 <codeph>rollback()</codeph> 方法，具体取决于是永久保存还是放弃由事务语句所做的更改。</p>
	 
	 <p>如果当前有事务打开时数据库连接关闭，则 AIR 会自动将该事务回滚。（注意：对于 AIR 1.1 和早期版本，连接关闭时将自动提交一个打开事务。）</p>
     
     <p>一个事务不限于在单个数据库中执行语句；事务可以包括对附加的不同数据库执行的语句。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link><link href="flash.data.xml#SQLTransactionLockType"><linktext>flash.data.SQLTransactionLockType</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:begin_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:begin_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:cancel"><apiName>cancel</apiName><shortdesc>
     终止当前对连接到 SQLConnection 实例的数据库执行的所有 SQL 语句。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用此方法时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>cancel</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     终止当前对连接到 SQLConnection 实例的数据库执行的所有 SQL 语句。此方法可用于停止长时间运行或失控的查询。
     
     <p>如果在调用 <codeph>cancel()</codeph> 方法时有些语句正在执行，则此方法会终止这些语句的操作，并回滚任何未完成的更新或事务。如果当前没有执行任何语句，则调用此方法会回滚已打开的事务，除此之外不执行任何操作。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:cancel_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
	 
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:cancel_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:close"><apiName>close</apiName><shortdesc>
     断开当前数据库连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>close</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     断开当前数据库连接。还会断开所有附加的数据库。
     
     <p>如果在调用 <codeph>close()</codeph> 时有打开的事务，则会提交该事务。在将 SQLConnection 实例当作垃圾回收时，运行时会自动调用 <codeph>close()</codeph>，这包括在 SQLConnection 仍然连接到数据库时 AIR 应用程序已关闭的情况。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:close_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:close_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:commit"><apiName>commit</apiName><shortdesc>
     提交一个现有事务，从而导致将该事务的语句执行的任何动作永久应用于数据库。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用该方法时；或如果当前未打开任何事务（<codeph>inTransaction</codeph> 属性为 <codeph>false</codeph>）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>commit</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     提交一个现有事务，从而导致将该事务的语句执行的任何动作永久应用于数据库。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:commit_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:commit_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作完成并出错时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作完成并出错时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:compact"><apiName>compact</apiName><shortdesc>
     回收数据库中所有未使用的空间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用该方法；或如果某一事务当前正在执行（<codeph>inTransaction</codeph> 属性为 <codeph>true</codeph>）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>compact</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     回收数据库中所有未使用的空间。从数据库中删除某一对象（表、索引或触发器）时，该对象会留下空白空间。这会使数据库文件比实际需要的文件更大，但可以加速 <codeph>INSERT</codeph> 操作。随着时间的推移，<codeph>INSERT</codeph> 和 <codeph>DELETE</codeph> 操作会使数据库文件结构出现碎块，从而降低数据库内容的磁盘访问速度。此方法可压缩数据库文件、消除空白页、调整表数据使其连续并清理数据库文件结构。
     
     <p>不能对附加的数据库文件执行 <codeph>compact()</codeph> 操作，只能对由 SQLConnection 实例打开的主（原始）数据库文件执行此操作。如果有活动的事务，则此操作将失败，此操作对内存中的数据库没有影响。</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:compact_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:compact_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:deanalyze"><apiName>deanalyze</apiName><shortdesc>
     删除通过调用 analyze() 方法创建的所有统计信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用此方法时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将调用 <codeph>deanalyze</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     删除通过调用 <codeph>analyze()</codeph> 方法创建的所有统计信息。
	 
	 <p>由于由 <codeph>analyze()</codeph> 方法生成的统计信息占用数据库的空间，因此调用 <codeph>deanalyze()</codeph> 可以收回该空间，如在删除多个索引或表之后。</p>
     
     <p>此操作不包括在活动事务中。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>analyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:deanalyze_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:deanalyze_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:detach"><apiName>detach</apiName><shortdesc>
     断开另一个以前使用 attach() 方法连接到 SQLConnection 实例的数据库。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>name</codeph> 参数为 <codeph>null</codeph> 或包含空字符串 (<codeph>""</codeph>)。
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用此方法；或如果该 SQLConnection 实例具有一个打开的事务（<codeph>inTransaction</codeph> 属性为 <codeph>true</codeph>）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>要断开的数据库的给定名称.
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>detach</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     断开另一个以前使用 <codeph>attach()</codeph> 方法连接到 SQLConnection 实例的数据库。可以使用不同名称多次附加同一个数据库文件，在断开一个文件的连接时，其它连接保持不变。如果数据库具有打开的事务（如果 <codeph>inTransaction</codeph> 属性为 <codeph>true</codeph>），则无法断开该数据库。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:detach_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:detach_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:getSchemaResult"><apiName>getSchemaResult</apiName><shortdesc>
     提供对 loadSchema() 方法调用结果的访问。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flash.data:SQLSchemaResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     提供对 <codeph>loadSchema()</codeph> 方法调用结果的访问。<codeph>getSchemaResult()</codeph> 方法的行为与先进先出结果队列相同。每次 <codeph>loadSchema()</codeph> 方法调用完成时（每次在异步执行模式中分派 <codeph>schema</codeph> 事件时），都会向队列中添加一个新 SQLSchemaResult 对象。每次调用 <codeph>getSchemaResult()</codeph> 方法时，即会返回最早的结果（最先添加到队列中的结果）并从队列中删除该结果。当队列中不再有对象时，<codeph>getSchemaResult()</codeph> 将返回 <codeph>null</codeph>。
     
     <p>当数据库连接关闭时，此方法返回 <codeph>null</codeph>。</p>
     
	 </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/schema"><linktext>schema</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLConnection:loadSchema"><apiName>loadSchema</apiName><shortdesc>
     从连接的数据库或任何附加的数据库中加载架构信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用此方法时。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>当指定的 <codeph>type</codeph> 参数值不是允许的类型之一时。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>在使用同步执行模式时，如果为 name 或 database 参数提供的值无效。
	 
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>Class</apiOperationClassifier><apiData>null</apiData><apiDesc>指示要加载的架构的类型。<codeph>null</codeph> 值（默认值）指示应该加载所有架构信息。为此参数指定非 <codeph>null</codeph> 值可缩小生成的架构范围，删除结果中可能不需要的信息，并使操作更有效。该值必须是以下类之一的类名称：
	 <ul>
	     <li>SQLIndexSchema</li>
	     <li>SQLTableSchema</li>
	     <li>SQLTriggerSchema</li>
	     <li>SQLViewSchema</li>
	 </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>指示加载哪个资源的架构。此值的使用方式取决于指定的 <codeph>type</codeph> 参数。通常，此值是数据库对象的名称，如表名称、索引或视图名称，等等。如果指定了值，则结果中只包括具有指定名称的数据库对象的架构信息。
	 
	 <p>如果指定的值无效，则分派 <codeph>error</codeph> 事件（或在同步执行模式中引发错误）。<codeph>type</codeph> 参数值必须对应于命名对象的类型，以便使该值有效，如方法描述中所述。</p>
	 
	 <p>如果 <codeph>name</codeph> 参数为 <codeph>null</codeph>，则包括指定类型的所有架构。如果指定的值无效，则分派 <codeph>error</codeph> 事件。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>main</apiData><apiDesc>加载其架构的数据库的名称。如果指定的值无效，则分派 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam><apiParam><apiItemName>includeColumnSchema</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>指示结果是否包括表和视图的列的架构信息。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>schema</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     从连接的数据库或任何附加的数据库中加载架构信息。该架构指示数据库的表、列、索引和触发器的结构。
	 
     <p>要访问已加载的架构，请使用 <codeph>SQLConnection.getSchemaResult()</codeph> 方法。</p>
	 
     <p>在异步执行模式中，如果操作成功，则分派 <codeph>schema</codeph> 事件；如果操作失败，则分派 <codeph>error</codeph> 事件。</p>
	 
	 <p><codeph>type</codeph> 和 <codeph>name</codeph> 参数值的组合确定由 <codeph>loadSchema()</codeph> 方法生成的架构数据的类型和随后生成的 SQLSchemaResult 实例的属性值。下表列出了有效的 <codeph>type</codeph> 和 <codeph>name</codeph> 对以及由此生成的架构数据：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="3"><thead><row><entry><codeph>type</codeph> 参数</entry><entry><codeph>name</codeph> 参数</entry><entry>检索以下对象的架构数据： </entry></row></thead><tbody><row>
	     <entry><codeph>null</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>数据库中的所有对象（所有表、视图、触发器和索引）</entry>
	   </row><row>
	     <entry><codeph>SQLIndexSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>数据库中的所有索引</entry>
	   </row><row>
	     <entry><codeph>SQLIndexSchema</codeph></entry>
	     <entry>有效的表名称</entry>
	     <entry>对指定表定义的所有索引</entry>
	   </row><row>
	     <entry><codeph>SQLIndexSchema</codeph></entry>
	     <entry>有效的索引名称</entry>
	     <entry>指定的索引</entry>
	   </row><row>
	     <entry><codeph>SQLTableSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>数据库中的所有表</entry>
	   </row><row>
	     <entry><codeph>SQLTableSchema</codeph></entry>
	     <entry>有效的表名称</entry>
	     <entry>指定的表</entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>数据库中的所有触发器</entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry>有效的表名称</entry>
	     <entry>与指定表相关联的所有触发器</entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry>有效的视图名称</entry>
	     <entry>与指定视图相关联的所有触发器 </entry>
	   </row><row>
	     <entry><codeph>SQLTriggerSchema</codeph></entry>
	     <entry>有效的触发器名称</entry>
	     <entry>指定的触发器 </entry>
	   </row><row>
	     <entry><codeph>SQLViewSchema</codeph></entry>
	     <entry><codeph>null</codeph></entry>
	     <entry>数据库中的所有视图</entry>
	   </row><row>
	     <entry><codeph>SQLViewSchema</codeph></entry>
	     <entry>有效的视图名称</entry>
	     <entry>指定的视图 </entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>如果 <codeph>type</codeph> 和 <codeph>name</codeph> 参数的组合不对应于指定的组合之一，则在异步执行模式中将分派 <codeph>error</codeph> 事件或在同步执行模式中引发异常。例如，如果 <codeph>type</codeph> 参数为 <codeph>SQLViewSchema</codeph> 且 <codeph>name</codeph> 参数为表的名称（而不是视图的名称），则将引发一个错误，指示数据库不包含具有指定名称且属于指定类型的对象。</p>
	 
	 <p>如果数据库为空（不包含任何表、视图、触发器或索引），则调用 <codeph>loadSchema()</codeph> 方法将导致错误。</p>
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>getSchemaResult()</linktext></link><link href="flash.data.xml#SQLConnection/schema"><linktext>schema</linktext></link><link href="flash.data.xml#SQLIndexSchema"><linktext>flash.data.SQLIndexSchema</linktext></link><link href="flash.data.xml#SQLTableSchema"><linktext>flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLTriggerSchema"><linktext>flash.data.SQLTriggerSchema</linktext></link><link href="flash.data.xml#SQLViewSchema"><linktext>flash.data.SQLViewSchema</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:loadSchema_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:loadSchema_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作完成并出错时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作完成并出错时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:open"><apiName>open</apiName><shortdesc>
     打开在文件系统指定位置处的数据库文件的同步连接，或者在该位置创建并打开新的数据库文件，或者创建并打开内存数据库。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>当 SQLConnection 实例已经具有一个到数据库的打开连接时（<codeph>connected</codeph> 属性为 <codeph>true</codeph>）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果操作失败。操作失败后，连接不会保持打开。
     
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiException><apiDesc>为 <codeph>reference</codeph> 参数指定的值不是 flash.filesystem.File 实例时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>encryptionKey</codeph> 参数不是 <codeph>null</codeph>，且其 <codeph>length</codeph> 不是 16 个字节时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> 参数为 <codeph>null</codeph>，且 <codeph>encryptionKey</codeph> 参数不是 <codeph>null</codeph> 时
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果指定了无效的 <codeph>pageSize</codeph> 参数。这包括在模式为 <codeph>SQLMode.READ</codeph> 时传递页的大小。
	 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>reference</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>打开的数据库文件的位置。此值必须为 flash.filesystem.File 实例。如果该参数的值为 <codeph>null</codeph>，则将在内存中创建并打开一个数据库。
     
     </apiDesc></apiParam><apiParam><apiItemName>openMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>create</apiData><apiDesc>指示数据库的打开方式。此值可以是 SQLMode 类中定义的任何常数。默认值为 <codeph>SQLMode.CREATE</codeph>，指示如果在指定位置未找到数据库文件，则创建一个数据库文件。如果 <codeph>openMode</codeph> 为 <codeph>SQLMode.READ</codeph> 且指定文件不存在，则分派 error 事件。当 <codeph>reference</codeph> 参数为 <codeph>null</codeph> 时，将忽略此参数。
     
     </apiDesc></apiParam><apiParam><apiItemName>autoCompact</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否自动回收数据库中未使用的空间。仅当创建新数据库文件或打开其中尚未创建表的数据库文件时，此参数才有效。默认情况下，由删除的数据所占用的空间保留在数据库文件中，需要时可重用。将此参数设置为 <codeph>true</codeph> 会导致数据库自动回收未使用的空间。这会对性能产生负面影响，因为每次向数据库中写入数据时都需要进行更多处理，并且随着时间的推移，还会导致数据库数据产生碎片。要强制数据库随时回收数据库文件中未使用的空间并整理数据库文件的碎片，请使用 <codeph>compact()</codeph> 方法。
	 
	 <p>当 <codeph>openMode</codeph> 参数为 <codeph>SQLMode.READ</codeph> 时，将忽略此参数。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>1024</apiData><apiDesc>指示数据库的页大小（以字节表示）。仅当创建新数据库文件或打开其中尚未创建表的数据库文件时，此参数才有效。该值必须是 2 的幂数，大于等于 512 且小于等于 32768。默认值为 1024 字节。此值只能在创建表之前设置。创建表之后，试图更改此值会导致错误。 
     
	 </apiDesc></apiParam><apiParam><apiItemName>encryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>数据库文件的加密密钥。如果调用 <codeph>open()</codeph> 来创建数据库，则对该数据库进行加密，并使用指定密钥作为数据库的加密密钥。如果通过该调用打开加密数据库，则该值必须与数据库的加密密钥相匹配，否则会出错。如果所打开的数据库未加密（即为了创建未加密的数据库），则该值必须为 <codeph>null</codeph>（默认值），否则会出错。
	 
	 <p>有效的加密密钥长度为 16 个字节。无法对内存中的数据库加密，因此 <codeph>reference</codeph> 参数的值为 <codeph>null</codeph> 时此参数必须为 <codeph>null</codeph>。</p>
	 
	 <p>打开加密数据库时，如果所提供的加密密钥与数据库的加密密钥不匹配，将会引发 SQLError 异常。在这种情况下，SQLError 对象的 <codeph>errorID</codeph> 属性为 3138（“所打开的文件不是数据库文件”）。</p>
	 
	 <p>从 AIR 1.5 开始提供 <codeph>encryptionKey</codeph> 参数。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     打开在文件系统指定位置处的数据库文件的同步连接，或者在该位置创建并打开新的数据库文件，或者创建并打开内存数据库。在使用此方法打开数据库时，用于创建和打开该数据库的操作，以及使用此 SQLConnection 实例执行的所有其它操作（包括语句执行和通过与此 SQLConnection 实例相关联的 SQLStatement 实例执行的其它操作）都是<i>同步</i> 执行的。要异步执行这些操作，请改用 <codeph>openAsync()</codeph> 方法打开数据库连接。
	 
	 <p>连接数据库后，请使用 <xref href="SQLStatement.html">SQLStatement</xref> 实例执行 SQL 命令。数据库级操作是使用 SQLConnection 实例执行的，如开始或结束事务、加载架构信息以及其他操作等。</p>
     
     <p>系统会自动为使用 <codeph>open()</codeph> 方法连接的数据库分配数据库名称“main”；使用 <codeph>[database-name].[table-name]</codeph> 格式时，该名称可在 SQL 语句中用于显式限定表名称。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link><link href="flash.data.xml#SQLMode"><linktext>flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:open_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:openAsync"><apiName>openAsync</apiName><shortdesc>
     打开在文件系统指定位置处的数据库文件的异步连接，或者在该位置创建并打开新的数据库文件，或者创建并打开内存数据库。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>当 SQLConnection 实例已经具有一个到数据库的打开连接时（<codeph>connected</codeph> 属性为 <codeph>true</codeph>）。
     
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>为 <codeph>reference</codeph> 参数指定的值不是 flash.filesystem.File 实例时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>encryptionKey</codeph> 参数不是 <codeph>null</codeph>，且其 <codeph>length</codeph> 不是 16 个字节时
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc><codeph>reference</codeph> 参数为 <codeph>null</codeph>，且 <codeph>encryptionKey</codeph> 参数不是 <codeph>null</codeph> 时
     
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果指定了无效的 <codeph>pageSize</codeph> 参数。这包括在模式为 <codeph>SQLMode.READ</codeph> 时传递页的大小。
	 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>reference</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>打开的数据库文件的位置。此值必须为 flash.filesystem.File 实例。如果该参数的值为 <codeph>null</codeph>，则将在内存中创建并打开一个数据库。
     
     </apiDesc></apiParam><apiParam><apiItemName>openMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>create</apiData><apiDesc>指示数据库的打开方式。此值可以是 SQLMode 类中定义的任何常数。默认值为 <codeph>SQLMode.CREATE</codeph>，指示如果在指定位置未找到数据库文件，则创建一个数据库文件。如果 <codeph>openMode</codeph> 为 <codeph>SQLMode.READ</codeph> 且指定文件不存在，则分派 error 事件。当 <codeph>reference</codeph> 参数为 <codeph>null</codeph> 时，将忽略此参数。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>open</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam><apiParam><apiItemName>autoCompact</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否自动回收数据库中未使用的空间。仅当创建新数据库文件或打开其中尚未创建表的数据库文件时，此参数才有效。默认情况下，由删除的数据所占用的空间保留在数据库文件中，需要时可重用。将此参数设置为 <codeph>true</codeph> 会导致数据库自动回收未使用的空间。这会对性能产生负面影响，因为每次向数据库中写入数据时都需要进行更多处理，并且随着时间的推移，还会导致数据库数据产生碎片。要强制数据库随时回收数据库文件中未使用的空间并整理数据库文件的碎片，请使用 <codeph>compact()</codeph> 方法。
	 
	 <p>当 <codeph>openMode</codeph> 参数为 <codeph>SQLMode.READ</codeph> 时，将忽略此参数。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>1024</apiData><apiDesc>指示数据库的页大小（以字节表示）。仅当创建新数据库文件或打开其中尚未创建表的数据库文件时，此参数才有效。该值必须是 2 的幂数，大于等于 512 且小于等于 32768。默认值为 1024 字节。此值只能在创建表之前设置。创建表之后，试图更改此值会导致错误。 
     
	 </apiDesc></apiParam><apiParam><apiItemName>encryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>数据库文件的加密密钥。如果调用 <codeph>openAsync()</codeph> 来创建数据库，则对该数据库进行加密，并使用指定密钥作为数据库的加密密钥。如果通过该调用打开加密数据库，则该值必须与数据库的加密密钥相匹配，否则会出错。如果所打开的数据库未加密，则该值必须为 <codeph>null</codeph>（默认值），否则会出错。
	 
	 <p>有效的加密密钥长度为 16 个字节。无法对内存中的数据库加密，因此 <codeph>reference</codeph> 参数的值为 <codeph>null</codeph> 时此参数必须为 <codeph>null</codeph>。</p>
	 
	 <p>打开加密数据库时，如果所提供的加密密钥与数据库的加密密钥不匹配，将分派 SQLErrorEvent。该事件对象的 <codeph>error</codeph> 属性包含一个 SQLError 实例。该 SQLError 对象的 <codeph>errorID</codeph> 属性为 3138（“所打开的文件不是数据库文件”）。</p>
	 
	 <p>从 AIR 1.5 开始提供 <codeph>encryptionKey</codeph> 参数。</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     打开在文件系统指定位置处的数据库文件的异步连接，或者在该位置创建并打开新的数据库文件，或者创建并打开内存数据库。在使用此方法打开数据库时，用于创建和打开该数据库的操作，以及使用此 SQLConnection 实例执行的所有其它操作（包括语句执行和通过与此 SQLConnection 实例相关联的 SQLStatement 实例执行的其它操作）都是<i>异步</i> 执行的。要同步执行这些操作，请改用 <codeph>open()</codeph> 方法打开数据库连接。
     
	 <p>连接数据库后，请使用 <xref href="SQLStatement.html">SQLStatement</xref> 实例执行 SQL 命令。数据库级操作是使用 SQLConnection 实例执行的，如开始或结束事务、加载架构信息以及其他操作等。</p>
     
     <p>系统会自动为使用 <codeph>openAsync()</codeph> 方法连接的数据库分配数据库名称“main”；使用 <codeph>[database-name].[table-name]</codeph> 格式时，该名称可在 SQL 语句中用于显式限定表名称。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link><link href="flash.data.xml#SQLMode"><linktext>flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:openAsync_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:openAsync_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作失败时分派。操作失败后，连接不会保持打开。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:reencrypt"><apiName>reencrypt</apiName><shortdesc>
	 更改加密数据库的加密密钥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>newEncryptionKey</codeph> 值是 <codeph>null</codeph>，或其 <codeph>length</codeph> 不是 16 个字节时。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>未打开连接时，或有打开的事务时。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newEncryptionKey</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>包含数据库的新加密密钥的 ByteArray。有效的加密密钥长度为 16 个字节。
	 
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>reencrypt</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 更改加密数据库的加密密钥。此方法仅影响主数据库（使用 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 方法连接的数据库）的加密密钥。对创建时即加密的数据库只能调用 <codeph>reencrypt()</codeph>。将数据库创建为加密数据库后，就无法将其解密。同样，以后也无法对创建时未加密的数据库进行加密。
	 
	 <p>重新加密操作在其自身的事务中运行。如果重新加密的过程被中断，则数据库会将事务回滚，且不更改加密密钥。</p> 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()"><linktext>attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:reencrypt_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:reencrypt_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作失败时分派。
     
	 </apiDesc></adobeApiEventDetail><shortdesc>在操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
     
	从 EventDispatcher 对象中删除侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>要删除的侦听器对象。
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">此参数适用于 SWF 内容所使用的 ActionScript 3.0 显示列表体系结构中的显示对象。</ph><ph platform="actionscript">指出是为捕获阶段还是目标阶段和冒泡阶段注册了侦听器。如果为捕获阶段以及目标和冒泡阶段注册了侦听器，则需要对 <codeph>removeEventListener()</codeph> 进行两次调用才能将这两个侦听器删除，一次调用将 <codeph>useCapture()</codeph> 设置为 <codeph>true</codeph>，另一次调用将 <codeph>useCapture()</codeph> 设置为 <codeph>false</codeph>。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
     
	从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:rollback"><apiName>rollback</apiName><shortdesc>
     回滚使用 begin() 方法创建的现有事务，这意味着放弃事务中的任何 SQL 语句所做的所有更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下调用该方法时；或如果当前未打开任何事务（<codeph>inTransaction</codeph> 属性为 <codeph>false</codeph>）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
     </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>rollback</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     回滚使用 <codeph>begin()</codeph> 方法创建的现有事务，这意味着放弃事务中的任何 SQL 语句所做的所有更改。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollback_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在操作成功完成时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在操作成功完成时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollback_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLConnection:autoCompact:get"><apiName>autoCompact</apiName><shortdesc>
     指示在最初创建当前数据库时是否启用自动压缩（为创建该数据库的 open() 或 openAsync() 调用中的 autoCompact 参数指定的值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示在最初创建当前数据库时是否启用自动压缩（为创建该数据库的 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 调用中的 <codeph>autoCompact</codeph> 参数指定的值）。如果此属性为 <codeph>true</codeph>，则每次写入操作后从数据库文件中自动删除未使用的空间，使数据库文件保持更小。如果该属性为 <codeph>false</codeph>，则由删除的数据先前占用的空间保留在数据库文件中，需要时可重用。即使 <codeph>autoCompact</codeph><codeph/> 为 false，也可以通过调用 <codeph>compact()</codeph> 方法强制数据库回收未使用的空间。
     
     <p>如果 <codeph>connected</codeph> 属性为 <codeph>false</codeph>，则此属性设置为 <codeph>false</codeph>。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:cacheSize:get"><apiName>cacheSize</apiName><shortdesc>
     提供对此连接的缓存大小的访问，缓存大小表示在内存中一次容纳的最大数据库磁盘页数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下尝试设置此属性时；或如果某一事务当前处于打开状态（<codeph>inTransaction</codeph> 属性为 <codeph>true</codeph>）。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     提供对此连接的缓存大小的访问，缓存大小表示在内存中一次容纳的最大数据库磁盘页数。每个页面使用约 1.5 KB 内存（具体取决于为用于创建数据库的 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 方法调用的 <codeph>pageSize</codeph> 参数指定的值）。默认缓存大小为 2000。如果某一应用程序正在执行更改数据库许多行的 <codeph>UPDATE</codeph> 或 <codeph>DELETE</codeph> 操作，则提高缓存大小可提高速度，但会以提高内存使用量为代价。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:columnNameStyle:get"><apiName>columnNameStyle</apiName><shortdesc>
     指示在 SELECT 语句结果中报告列名称的方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>在 SQLConnection 实例未连接到数据库（<codeph>connected</codeph> 属性为 <codeph>false</codeph>）的情况下尝试设置此属性时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     指示在 <codeph>SELECT</codeph> 语句结果中报告列名称的方式。
     
     <p>SQLColumnNameStyle 类中定义的常数表示此属性的可能值：</p>
     
     <ul>
         <li><codeph>SQLColumnNameStyle.LONG</codeph> 指示以 <codeph>[table-name]_[column-name]</codeph> 格式返回列名称。</li>
         <li><codeph>SQLColumnNameStyle.SHORT</codeph> 指定以 <codeph>[column-name]</codeph> 格式指定列名称。如果有多个同名的列，则只向结果对象中添加一个具有该名称的属性。</li>
         <li><codeph>SQLColumnNameStyle.DEFAULT</codeph> 是默认值。使用此值时，结果列名称根据具有类似列名称的 <codeph>SELECT</codeph> 语句中的表数来设置格式。如果 <codeph>SELECT</codeph> 语句只包括一个表，则使用短名称格式 <codeph>[column-name]</codeph>；如果 <codeph>SELECT</codeph> 语句包括连接在一起的多个表，则在由于两个列名称相同而发生命名冲突时，将对名称相同的列使用长名称格式 <codeph>[table-name]_[column-name]</codeph>。</li>
     </ul>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnNameStyle"><linktext>flash.data.SQLColumnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:connected:get"><apiName>connected</apiName><shortdesc>
     指示 SQLConnection 实例是否具有到数据库文件的打开连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示 SQLConnection 实例是否具有到数据库文件的打开连接。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()"><linktext>close()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:inTransaction:get"><apiName>inTransaction</apiName><shortdesc>
	 指示事务中当前是否涉及此连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 指示事务中当前是否涉及此连接。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()"><linktext>commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()"><linktext>rollback()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:lastInsertRowID:get"><apiName>lastInsertRowID</apiName><shortdesc>
     上次生成的行标识符（由 SQL INSERT 语句创建）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     上次生成的行标识符（由 SQL <codeph>INSERT</codeph> 语句创建）。行标识符用于唯一标识数据库表中的行。该值通常由数据库生成。
	 
     <p>如果未连接数据库或未执行 <codeph>INSERT</codeph> 语句，则该值为 0。</p>
	 
	 <p>用于单个 SQL <codeph>INSERT</codeph> 语句执行的行标识符可以通过由 SQLStatement 对象的 <codeph>getResult()</codeph> 方法返回的 SQLResult 对象的 <codeph>lastInsertRowID</codeph> 属性获得（在 SQLStatement 分派其 <codeph>result</codeph> 事件后调用时）。</p>
	 
	 <p>有关主键和生成的行标识符的详细信息，请参阅附录“<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>”中的“<xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref>”和“<xref href="../../localDatabaseSQLSupport.html#expressions">表达式</xref>”部分。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID"><linktext>flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:pageSize:get"><apiName>pageSize</apiName><shortdesc>
     指示在最初创建当前数据库时指定的数据库页大小，以字节为单位（为创建该数据库的 open() 或 openAsync() 调用中的 pageSize 参数指定的值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     指示在最初创建当前数据库时指定的数据库页大小，以字节为单位（为创建该数据库的 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 调用中的 <codeph>pageSize</codeph> 参数指定的值）。
     
     <p>如果 <codeph>connected</codeph> 属性为 <codeph>false</codeph>，则此属性的值为 0。</p>
     
	 <p>只有在数据库中创建第一个表后，才可以更改数据库的页大小（使用 <codeph>open()</codeph> 或 <codeph>openAsync()</codeph> 方法）。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:totalChanges:get"><apiName>totalChanges</apiName><shortdesc>
     包含在打开数据库连接后所做的数据更改的总数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     包含在打开数据库连接后所做的数据更改的总数。除了跟踪由 <codeph>INSERT</codeph>、<codeph>DELETE</codeph> 和 <codeph>UPDATE</codeph> 语句所做的更改外，此值还包括由触发器导致的更改。
	 
	 <p>数据库连接关闭时，此值重置为 0。如果 SQLConnection 实例未连接到数据库文件，则此值为 0。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLResult/rowsAffected"><linktext>flash.data.SQLResult.rowsAffected</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLTriggerSchema"><apiName>SQLTriggerSchema</apiName><shortdesc>
 SQLTriggerSchema 实例提供了一些信息，以描述数据库中的特定触发器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLTriggerSchema 实例提供了一些信息，以描述数据库中的特定触发器。它包含触发器的名称（<codeph>name</codeph> 属性）、关联表的名称（<codeph>table</codeph> 属性）和用于创建该触发器的 SQL 语句（<codeph>sql</codeph> 属性）。
 
 <p>要获取数据库的触发器架构信息，请使用 <codeph>SQLConnection.loadSchema()</codeph> 方法加载架构信息，确保对 <codeph>type</codeph> 参数的值使用 <codeph>null</codeph> 或 <codeph>SQLTriggerSchema</codeph>。在生成的 SQLSchemaResult 实例中，<codeph>triggers</codeph> 属性包含表示数据库中各个触发器的 SQLTriggerSchema 实例的数组。</p>
 
 <p>通常，开发人员代码不直接构造 SQLTriggerSchema 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLTriggerSchema:SQLTriggerSchema"><apiName>SQLTriggerSchema</apiName><shortdesc>
     创建 SQLTriggerSchema 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>关联数据库的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>触发器的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于创建该触发器的 SQL。
     
     </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>触发器的关联表的名称。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLTriggerSchema 实例。通常，开发人员代码不直接调用 SQLTriggerSchema 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLTriggerSchema:table:get"><apiName>table</apiName><shortdesc>
     在其中定义此触发器的表的名称，或视图的名称（如果触发器是在视图上定义的）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     在其中定义此触发器的表的名称，或视图的名称（如果触发器是在视图上定义的）。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLStatement"><apiName>SQLStatement</apiName><shortdesc>
 SQLStatement 实例用于针对通过 SQLConnection 实例打开的本地 SQL 数据库执行 SQL 语句。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLStatement 实例用于针对通过 SQLConnection 实例打开的本地 SQL 数据库执行 SQL 语句。
 
 <p>SQLStatement 实例通过将 SQLConnection 实例设置为 SQLStatement 实例的 <codeph>sqlConnection</codeph> 属性的值来链接到 SQLConnection 实例。<codeph>text</codeph> 属性用要执行的 SQL 语句的实际文本进行填充。如有必要，可以使用 <codeph>parameters</codeph> 属性指定 SQL 语句参数的值，并通过调用 <codeph>execute()</codeph> 方法执行该语句。</p>
 
 <p>有关本地 SQL 数据库中支持的 SQL 术语的完整说明，请参阅附录<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>。</p>
 
 <p>在异步执行模式中，<codeph>execute()</codeph> 和 <codeph>next()</codeph> 方法在后台执行，并且当操作完成或失败时，运行时会对注册的事件侦听器或指定的 Responder 实例分派事件。在同步模式中，这些方法在主应用程序线程上执行，这意味着数据库操作完成之前不执行其它代码。另外，在同步模式中，如果方法失败，运行时将引发异常而不分派错误事件。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
 在执行操作期间发生错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 在执行操作期间发生错误时分派。
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLEvent.RESULT_result"><apiName>result</apiName><shortdesc>
 execute() 或 next() 方法调用操作成功完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SQLEvent.RESULT</apiEventType><adobeApiEventClassifier>flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph>execute()</codeph> 或 <codeph>next()</codeph> 方法调用操作成功完成时分派。一旦分派 <codeph>result</codeph> 事件后，即可以调用 <codeph>getResult()</codeph> 方法以检索语句结果。
 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>getResult()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLStatement:SQLStatement"><apiName>SQLStatement</apiName><shortdesc>
     创建 SQLStatement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>如果从主应用程序沙箱外的任意沙箱中调用构造函数。 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc>
     创建 SQLStatement 实例。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLStatement:cancel"><apiName>cancel</apiName><shortdesc>
     取消执行此语句。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     取消执行此语句。与 <codeph>SQLConnection.cancel()</codeph> 一样，此方法用于停止长时间运行的查询或取消尚未完成的查询。但是，与 <codeph>SQLConnection.cancel()</codeph> 不同，此方法只取消单个语句。如果当前未执行该语句，则调用此方法不起作用。
	 
	 <p>不会分派事件以直接响应 <codeph>cancel()</codeph> 操作的完成。但是，一旦 <codeph>cancel()</codeph> 操作完成并且取消语句执行后，SQLStatement 实例即会分派 <codeph>error</codeph> 事件，指示语句执行（<codeph>execute()</codeph> 或 <codeph>next()</codeph> 调用）没有完成。或者，如果为 <codeph>execute()</codeph> 或 <codeph>next()</codeph> 调用的 <codeph>responder</codeph> 参数指定了值，则会调用指定的错误处理函数方法。不管是哪种情况，传递给侦听器的 SQLError 实例将具有值为 3118（操作已终止）的 <codeph>errorID</codeph> 属性。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLStatement:clearParameters"><apiName>clearParameters</apiName><shortdesc>
     清除所有当前参数设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     清除所有当前参数设置。
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/parameters"><linktext>parameters</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:execute"><apiName>execute</apiName><shortdesc>
     针对连接到 sqlConnection 属性中的 SQLConnection 对象的数据库执行 text 属性中的 SQL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>text</codeph> 属性为 <codeph>null</codeph> 或包含空字符串（<codeph>""</codeph>）；如果未设置 <codeph>sqlConnection</codeph> 属性；如果未连接分配给 <codeph>sqlConnection</codeph> 属性的 SQLConnection 实例；或者该语句当前正在执行。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prefetch</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>当该语句的 <codeph>text</codeph> 属性为 <codeph>SELECT</codeph> 语句时，此值指示该语句一次返回的行数。默认值为 -1，指示一次返回所有结果行。此参数与 <codeph>next()</codeph> 方法结合使用，可将大结果集拆分为较小的数据集。这样，通过更快地返回初始结果和划分结果处理操作，可以改善用户对应用程序性能的感受。
     
     <p>当 SQL 语句为 <codeph>SELECT</codeph> 查询并指定了大于零的 <codeph>prefetch</codeph> 参数时，该语句将被视为正在执行，直到返回整个结果集或者调用了 <codeph>SQLStatement.cancel()</codeph> 或 <codeph>SQLConnection.cancel()</codeph> 方法。请注意，由于在执行时结果集中的行数是未知的，因此，数据库光标必须移动到结果集的最后一行以后，才会认为该语句完成。如果在 <codeph>execute()</codeph> 调用中指定了 <codeph>prefetch</codeph> 参数，则只有当所请求的行数至少比结果集中的总行数多一行（通过大于结果集中行数的 <codeph>prefetch</codeph> 值或通过对 <codeph>next()</codeph> 方法的后续调用）后，生成的 SQLResult 实例的 <codeph>complete</codeph> 属性才会为 <codeph>true</codeph>。</p>
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。在异步执行模式中，如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>result</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     针对连接到 <codeph>sqlConnection</codeph> 属性中的 SQLConnection 对象的数据库执行 <codeph>text</codeph> 属性中的 SQL。
     
	 <p>在异步执行模式中，如果 <codeph>responder</codeph> 参数不为 <codeph>null</codeph>，则指定的 Responder 对象指示为处理操作结果而调用的方法。当 <codeph>responder</codeph> 参数为 <codeph>null</codeph> 时，如果操作成功，则分派 <codeph>result</codeph> 事件；如果操作失败，则分派 <codeph>error</codeph> 事件。</p>
	 
	 <p>若要访问执行语句的结果，例如 <codeph>SELECT</codeph> 语句的结果行或 <codeph>INSERT</codeph> 语句的数据库生成的主键，则调用 <codeph>getResult()</codeph> 方法。在同步模式中执行此语句后，以及在异步模式中分派 <codeph>result</codeph> 事件后，会立即显示结果。</p>
     
     <p>每个语句必须在准备好（编译）后才能执行。首次调用 SQLStatement 实例的 <codeph>execute()</codeph> 方法时，运行时将准备好该语句。语句准备好后，除非 <codeph>text</codeph> 属性发生更改，否则不需要重新准备该语句。设置一个或多个参数值不需要重新准备该语句。</p>
	 
     </apiDesc><example conref="examples\SQLStatement.execute.1.as"> 下面的示例演示如何使用事件侦听器执行 SQLStatement，以确定语句的执行何时完成或失败。
<codeblock>
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example><example conref="examples\SQLStatement.execute.2.as"> 下面的示例演示如何执行 SQLStatement，该示例使用 Responder 对象来指示语句执行完成或失败时所调用的函数。
<codeblock>
var conn:SQLConnection;
var dbStatement:SQLStatement;
var employeeResponder:Responder;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    employeeResponder = new Responder(resultHandler, errorHandler);
    dbStatement.execute(-1, employeeResponder);
}

function resultHandler(result:SQLResult):void
{
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(error:SQLError):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>getResult()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:execute_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>语句成功执行时或指定了 <codeph>prefetch</codeph> 参数值且 <codeph>SELECT</codeph> 语句返回一行或多行数据时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>语句成功执行时或指定了 prefetch 参数值且 SELECT 语句返回一行或多行数据时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:execute_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLStatement:getResult"><apiName>getResult</apiName><shortdesc>
     提供对包含语句执行结果的 SQLResult 对象的访问，其中包括 SELECT 语句的任何结果行以及有关执行的所有语句的语句执行情况的其它信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 SQLResult 对象，其中包含对 <codeph>execute()</codeph> 或 <codeph>next()</codeph> 方法调用的结果。
     
     </apiDesc><apiOperationClassifier>flash.data:SQLResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     提供对包含语句执行结果的 SQLResult 对象的访问，其中包括 <codeph>SELECT</codeph> 语句的任何结果行以及有关执行的所有语句的语句执行情况的其它信息。在异步执行模式中，在分派 <codeph>result</codeph> 事件之前结果信息不可用。
     
     <p>执行 <codeph>SELECT</codeph> 语句时，如果所调用的 <codeph>execute()</codeph> 方法的默认 <codeph>prefetch</codeph> 参数为 -1，则返回的 SQLResult 对象包含整个查询结果集。</p>
     
     <p>如果为 <codeph>execute()</codeph> 或 <codeph>next()</codeph> 方法调用指定了 <codeph>prefetch</codeph> 参数，则 <codeph>getResult()</codeph> 方法的行为与先进先出结果队列相同。每次分派 <codeph>result</codeph> 事件时，即会向队列中添加一个新的 SQLResult 对象。每次调用 <codeph>getResult()</codeph> 方法时，即会返回最早的 SQLResult 对象（最先添加到队列中的对象）并从队列中删除该对象。当队列中不再有 SQLResult 对象时，<codeph>getResult()</codeph> 将返回 <codeph>null</codeph>。</p>
	 
	 <p>请注意，除非通过调用 <codeph>getResult()</codeph> 来删除 SQLResult 对象，否则这些对象会保留在队列中。例如，如果调用多次 <codeph>execute()</codeph> 方法而没有调用 <codeph>getResult()</codeph>，则与每个 <codeph>execute()</codeph> 调用相关联的 SQLResult 对象将保留在队列中。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>next()</linktext></link><link href="flash.data.xml#SQLStatement/result"><linktext>result</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:next"><apiName>next</apiName><shortdesc>
     检索 SELECT 语句的结果集的下一部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>在该语句不是当前正在执行的语句时调用该方法的情况下（<codeph>executing</codeph> 属性为 <codeph>false</codeph>）。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException><apiDesc>如果该操作在同步执行模式中失败。
     
	 </apiDesc><apiItemName>SQLError</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prefetch</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>当该语句的 <codeph>text</codeph> 属性为 <codeph>SELECT</codeph> 语句时，此值指示该语句一次返回的行数。默认值为 -1，指示一次返回所有结果行。这样，通过更快地返回初始结果和划分结果处理操作，可以改善用户对应用程序性能的感受。
     
     </apiDesc></apiParam><apiParam><apiItemName>responder</apiItemName><apiOperationClassifier>flash.net:Responder</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，指定操作成功或失败时要调用的方法。如果 <codeph>responder</codeph> 参数为 <codeph>null</codeph>，则执行完成时将分派 <codeph>result</codeph> 或 <codeph>error</codeph> 事件。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     检索 <codeph>SELECT</codeph> 语句的结果集的下一部分。如果结果集中不再有行，则分派 <codeph>result</codeph> 事件，但不再向 <codeph>getResult()</codeph> 队列中添加 SQLResult 对象。
     
     <p>在异步执行模式中，如果 <codeph>responder</codeph> 参数不为 <codeph>null</codeph>，则指定的 Responder 对象指示为处理操作结果而调用的方法。当 <codeph>responder</codeph> 参数为 <codeph>null</codeph> 时，如果操作成功，则分派 <codeph>result</codeph> 事件；如果操作失败，则分派 <codeph>error</codeph> 事件。</p>
     
     <p>只能在该语句仍在执行时才能调用此方法。当语句为 <codeph>SELECT</codeph> 查询并指定了大于零的 <codeph>prefetch</codeph> 参数时，该语句将被视为正在执行，直到返回整个结果集或者调用了 <codeph>SQLStatement.cancel()</codeph> 或 <codeph>SQLConnection.cancel()</codeph> 方法。</p>
     
     </apiDesc><example conref="examples\SQLStatement.next.1.as"> 下面的示例演示如何执行 SQLStatement，显式指示第一次返回结果时仅返回结果集的前 10 行。代码检查 SQLResult 的 <codeph>complete</codeph> 属性，如果尚未检索所有行，则调用 <codeph>next()</codeph> 方法。
<codeblock>
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute(10);
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
        if (!result.complete)
        {
            dbStatement.next(10);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:next_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>语句成功执行时或指定了<codeph> prefetch </codeph>参数值且<codeph> next()</codeph> 调用返回一行或多行数据时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>语句成功执行时或指定了 prefetch 参数值且 next() 调用返回一行或多行数据时分派。</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:next_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>在异步执行模式中操作失败时分派。
     
     </apiDesc></adobeApiEventDetail><shortdesc>在异步执行模式中操作失败时分派。</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLStatement:executing:get"><apiName>executing</apiName><shortdesc>
     指示当前是否正在执行语句。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示当前是否正在执行语句。
     
     <p>如果已调用 <codeph>execute()</codeph> 且尚未返回数据库中的所有结果，则此属性为 true。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>execute()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:itemClass:get"><apiName>itemClass</apiName><shortdesc>
     指示一个类（数据类型），用于由于执行语句而返回的每个行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Class</apiValueClassifier></apiValueDef><apiDesc>
     指示一个类（数据类型），用于由于执行语句而返回的每个行。
     
     <p platform="javascript">此属性仅用于基于 SWF 的 AIR 应用程序中。不能在 JavaScript 中使用此属性。（通过 ActionScript，可以定义自定义类，而这些自定义类可以配合此属性使用。）</p>
     
     <p platform="actionscript">默认情况下，由 <codeph>SELECT</codeph> 语句返回的每个行都创建为 Object 实例，以结果集的列名作为该对象的属性名，每列的值作为其相关属性的值。</p>
     
     <p platform="actionscript">通过指定 <codeph>itemClass</codeph> 属性的类，由此 SQLStatement 实例执行的 <codeph>SELECT</codeph> 语句返回的每个行都创建为指定的类的实例。<codeph>itemClass</codeph> 实例的每个属性均赋予与该属性同名的列中的值。</p>
     
     <p platform="actionscript">分配给此属性的任何类必须具有不需要任何参数的构造函数。另外，对于由 <codeph>SELECT</codeph> 语句返回的每个列，该类必须具有一个单一的属性。如果 <codeph>SELECT</codeph> 列表中的列在 <codeph>itemClass</codeph> 类中没有相匹配的属性名称，系统会将其视为错误。</p>
     
     </apiDesc><example conref="examples\SQLStatement.itemClass.1.as"> 下面的代码演示如何使用 <codeph>itemClass</codeph> 属性让运行时从 SQL <codeph>SELECT</codeph> 语句结果创建自定义类的实例。
<codeblock>
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.data.xml#SQLResult/data"><linktext>flash.data.SQLResult.data</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:parameters:get"><apiName>parameters</apiName><shortdesc>
     用作一个关联数组，将在其中添加 SQL 语句的 text 属性中指定的参数的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
     用作一个关联数组，将在其中添加 SQL 语句的 <codeph>text</codeph> 属性中指定的参数的值。数组键是参数的名称。如果在语句文本中指定了未命名的参数，则其键是该参数的索引。
     
     <p>在 SQL 语句的文本内，参数由以下字符之一批示：“?”、“:”或“@”。</p>
     
     <p>“:”和“@”标记指示命名的参数；标记后面的字符指定参数的名称。</p>
     
     <p>例如，在下面的 SQL 语句中，使用“:”字符指定了一个名为 <codeph>firstName</codeph> 的参数：</p>
     
     <pre>SELECT FROM employees WHERE firstName = :firstName</pre>
     
     <p>“?”标记指示索引（编号）参数；系统根据参数在语句文本中的顺序自动为每个参数赋予一个索引。参数的索引值从零开始。也就是说，第一个参数的索引为 0。</p>
     
     <p>参数用于允许对构造 SQL 语句时未知的值进行类型替代。使用参数是保证将值的存储类传递到数据库的唯一方式。不使用参数时，所有值都将根据相关联列的类型关系从其文本表示形式转换为存储类。有关存储类和列关系的详细信息，请参阅附录“<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>”中的“<xref href="../../localDatabaseSQLSupport.html#dataTypes">数据类型支持</xref>”部分。</p>
     
     <p>参数也可用作一种安全措施，防止恶意技术攻击（称为 SQL 注入攻击）。在 SQL 注入攻击中，用户在用户可访问的位置（例如数据输入字段）输入 SQL 代码。如果应用程序代码通过将用户输入直接连接到 SQL 文本来构造 SQL 语句，则将对数据库执行用户输入的 SQL 代码。下面的列表显示将用户输入连接到 SQL 文本的示例。<b>不要使用此技术</b>：</p>
     
     <codeblock platform="actionscript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     </codeblock>
     
     <codeblock platform="javascript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement = new air.SQLStatement();
     statement.text = sql;
     </codeblock>
     
     <p>使用语句参数而不将用户输入的值连接到语句的文本可防止 SQL 注入攻击，因为系统将参数值显式视为替代值，而不是作为字面语句文本的一部分。下面是对前面列表的建议替代方法：</p>
     
     <codeblock platform="actionscript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     <codeblock platform="javascript">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement = new air.SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     <p>执行语句之前必须设置所有参数值。在调用 <codeph>execute()</codeph> 方法时，将会绑定 <codeph>parameters</codeph> 数组中指定的参数值（即与语句文本合并）。一旦调用 <codeph>execute()</codeph> 后，对值进行的任何后续更改都不会应用于正在执行的语句。不过，后续的 <codeph>execute()</codeph> 调用将使用更改的值。如果语句文本包括的参数没有 <codeph>parameters</codeph> 属性中指定的值，则结果会出错。</p>
     
     <p>要清除 <codeph>parameters</codeph> 属性中的所有参数值，请使用 <codeph>clearParameters()</codeph> 方法。</p>
     
	 </apiDesc><example conref="examples\SQLStatement.parameters.1.as"> 下面的示例显示命名参数 <codeph>:firstName</codeph> 在 SQL 语句中的用法。
<codeblock>
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = :firstName";
employees.parameters[":firstName"] = "Sam";
employees.execute();
</codeblock></example><example conref="examples\SQLStatement.parameters.2.as"> 下面的示例显示未命名参数在 SQL 语句中的用法。
<codeblock>
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = ?";
employees.parameters[0] = "Sam";
employees.execute();
</codeblock></example></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/text"><linktext>text</linktext></link><link href="flash.data.xml#SQLStatement/clearParameters()"><linktext>clearParameters()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:sqlConnection:get"><apiName>sqlConnection</apiName><shortdesc>
     管理到执行语句的数据库的连接的 SQLConnection 对象。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.data:SQLConnection</apiValueClassifier><apiException><apiDesc>当该语句正在执行的同时尝试更改此属性的值时。
	 
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     管理到执行语句的数据库的连接的 SQLConnection 对象。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLStatement:text:get"><apiName>text</apiName><shortdesc>
     语句的实际 SQL 文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>当该语句正在执行的同时尝试更改 <codeph>text</codeph> 属性时。
     
     </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     语句的实际 SQL 文本。
	 
     <p>该文本可以是任何受支持的 SQL。有关本地 SQL 数据库中支持的 SQL 术语的完整说明，请参阅附录“<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>”。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLMode"><apiName>SQLMode</apiName><shortdesc>
 该类包含一些常量，它们表示 SQLConnection.open() 和 SQLConnection.openAsync() 方法的 openMode 参数的可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 该类包含一些常数，它们表示 <codeph>SQLConnection.open()</codeph> 和 <codeph>SQLConnection.openAsync()</codeph> 方法的 <codeph>openMode</codeph> 参数的可能值。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links><apiValue id="flash.data:SQLMode:CREATE"><apiName>CREATE</apiName><shortdesc>
	 指示打开连接以进行更新；如果指定的文件不存在，则创建数据库文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>create</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 指示打开连接以进行更新；如果指定的文件不存在，则创建数据库文件。在此模式中，允许对数据库进行读取和写入。如果数据库不存在，则在操作完成之前创建一个数据库。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:READ"><apiName>READ</apiName><shortdesc>
	 指示在只读模式下打开连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>read</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 指示在只读模式下打开连接。在此模式中，不允许对数据库进行写入。如果数据库不存在，则打开操作将失败。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 指示打开连接以进行更新，但如果指定的文件不存在，则不创建新数据库文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 指示打开连接以进行更新，但如果指定的文件不存在，则不创建新数据库文件。在此模式中，允许对数据库进行读取和写入。如果数据库不存在，则打开操作将失败。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:EncryptedLocalStore"><apiName>EncryptedLocalStore</apiName><shortdesc>
	EncryptedLocalStore 类提供了一些方法，用于在 AIR 应用程序的加密本地数据存储中设置和获取对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	EncryptedLocalStore 类提供了一些方法，用于在 AIR 应用程序的加密本地数据存储中设置和获取对象。永久加密的本地存储可用于安装在用户计算机上的每个 AIR 应用程序。这允许您以加密格式保存和检索存储在用户本地硬盘驱动器上的数据，其它应用程序或用户无法解密这些数据。独立的加密本地存储用于每个 AIR 应用程序，每个 AIR 应用程序对每个用户使用独立的加密本地存储。 
	
	<p>您可能想使用加密的本地存储来存储必须安全的信息，如用于 Web 服务的登录凭据。</p>
	
	<p>在 AIR Debug Launcher (ADL) 中测试应用程序时，该应用程序使用的加密本地存储不同于已安装的 AIR 应用程序所使用的加密本地存储。</p>
	
	<p>AIR 使用 Windows <sup>®</sup> 上的 DPAPI、Mac <sup>®</sup> OS <sup>®</sup> 上的 KeyChain 以及 Linux <sup>®</sup> 上的 KeyRing 或 KWallet 将加密的本地存储区与每个应用程序和用户相关联。加密的本地存储使用 AES-CBC 128 位加密。</p>
	
	<p>加密的本地存储中的信息仅可用于应用程序安全沙箱中的 AIR 应用程序内容。 </p>
	
	<p>加密的本地存储中的项目用字符串进行标识。所有项目都存储为字节数组数据。</p>
	
	<p>若存储的数据超过 10 MB，加密本地存储将进行得更慢。</p>
	
	<p>当卸载 AIR 应用程序时，卸载程序不会删除存储在加密本地存储中的数据。</p>
	
	<p>加密的本地存储数据存放在用户的应用程序数据目录的子目录中，该子目录的路径为 Adobe/AIR/ELS/ 后面跟随应用程序 ID。</p>
	
	</apiDesc><example conref="examples\EncryptedLocalStore.1.as"> 下面的代码将一个字符串存储在加密的本地存储中，检索该字符串，然后删除该字符串：
<codeblock>
var str:String = "Bob";
var bytes:ByteArray = new ByteArray();
bytes.writeUTFBytes(str);
EncryptedLocalStore.setItem("firstName", bytes);

var storedValue:ByteArray = EncryptedLocalStore.getItem("firstName");
trace(storedValue.readUTFBytes(storedValue.length)); // "Bob"

EncryptedLocalStore.removeItem("firstName");
</codeblock></example></apiClassifierDetail><apiOperation id="flash.data:EncryptedLocalStore:getItem"><apiName>getItem</apiName><shortdesc>
		返回加密本地存储中具有给定名称的项目的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>name</codeph> 值为 <codeph>null</codeph> 或空字符串。
		
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>ByteArray 数据。如果没有用于所提供的 <codeph>name</codeph> 的数据，则该方法返回 <codeph>null</codeph>。
		
		</apiDesc><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>加密的本地存储中的项目的名称。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		返回加密本地存储中具有给定名称的项目的数据。如果不存在具有指定名称的项目，则此方法返回 <codeph>null</codeph>。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:removeItem"><apiName>removeItem</apiName><shortdesc>
		从加密本地存储中删除具有给定名称的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>name</codeph> 值为 <codeph>null</codeph> 或空字符串。
		
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>加密的本地存储中的项目的名称。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		从加密本地存储中删除具有给定名称的项目。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:reset"><apiName>reset</apiName><shortdesc>
		清除整个加密本地存储，从而删除所有数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		清除整个加密本地存储，从而删除所有数据。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:setItem"><apiName>setItem</apiName><shortdesc>
		将具有给定名称的项目设置为所提供的 ByteArray data。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>name</codeph> 值为 <codeph>null</codeph> 或空字符串。
		
		<p>默认情况下，AIR 应用程序无法读取其它应用程序的加密本地存储。<codeph>stronglyBound</codeph> 设置提供额外绑定（到应用程序位中的数据），以阻止攻击者应用程序试图通过尝试劫持应用程序发行者 ID 来读取应用程序的加密本地存储。</p> 
		
		</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>加密的本地存储中的项目的名称。
		
		</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>数据。
		
		</apiDesc></apiParam><apiParam><apiItemName>stronglyBound</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>如果设置为 <codeph>true</codeph>，则存储的项目除了强绑定到应用程序的发布者 ID 外，还会强绑定到 AIR 应用程序的数字签名和位（应用程序目录的内容）。如果执行调用的 AIR 应用程序的位与执行存储的应用程序的位不匹配，则针对此项目对 <codeph>getItem()</codeph> 的后续调用会导致运行时异常。如果您更新应用程序，它将无法读取以前写入到加密本地存储中的强绑定数据。 
		
		<p>如果将 <codeph>stronglyBound</codeph> 参数设置为 <codeph>false</codeph>（默认值），则仅需发布者 ID 保持相同，应用程序即可读取数据。应用程序的位可以更改（需由发布者对这些位进行签名），但不需要与存储数据的应用程序中的位完全相同。</p>
		
		</apiDesc></apiParam></apiOperationDef><apiDesc>
		将具有给定名称的项目设置为所提供的 ByteArray <codeph>data</codeph>。
		
		</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.data:SQLIndexSchema"><apiName>SQLIndexSchema</apiName><shortdesc>
 SQLIndexSchema 实例提供了一些信息，以描述数据库中的特定索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLIndexSchema 实例提供了一些信息，以描述数据库中的特定索引。可用的信息包括关联表的名称（<codeph>table</codeph> 属性）、用于创建该索引的 SQL 语句（<codeph>sql</codeph> 属性）和该索引的名称（<codeph>name</codeph> 属性）。
 
 <p>要获取数据库的索引架构信息，请使用 <codeph>SQLConnection.loadSchema()</codeph> 方法加载架构信息，确保对 <codeph>type</codeph> 参数的值使用 <codeph>null</codeph> 或 <codeph>SQLIndexSchema</codeph>。在生成的 SQLSchemaResult 实例中，<codeph>indices</codeph> 属性包含表示数据库中各个索引的 SQLIndexSchema 实例的数组。</p>
 
 <p>通常，开发人员代码不直接构造 SQLIndexSchema 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLIndexSchema:SQLIndexSchema"><apiName>SQLIndexSchema</apiName><shortdesc>
     创建 SQLIndexSchema 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>关联数据库的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>索引的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于创建此索引的 SQL 语句。
     
     </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>将此索引附加到的表的名称。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLIndexSchema 实例。通常，开发人员代码不直接调用 SQLIndexSchema 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/indices"><linktext>flash.data.SQLSchemaResult.indices</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLIndexSchema:table:get"><apiName>table</apiName><shortdesc>
     将此索引附加到的表的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     将此索引附加到的表的名称。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.data:SQLTableSchema"><apiName>SQLTableSchema</apiName><shortdesc>
 SQLTableSchema 实例提供了一些信息，以描述数据库中的特定表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLTableSchema 实例提供了一些信息，以描述数据库中的特定表。它包含表的名称（<codeph>name</codeph> 属性）、用于创建该表的 SQL 语句（<codeph>sql</codeph> 属性）和有关表列的信息（<codeph>columns</codeph> 属性）。
 
 <p>要获取数据库的表架构信息，请使用 <codeph>SQLConnection.loadSchema()</codeph> 方法加载架构信息，确保对 <codeph>type</codeph> 参数的值使用 <codeph>null</codeph> 或 <codeph>SQLTableSchema</codeph>。在生成的 SQLSchemaResult 实例中，<codeph>tables</codeph> 属性包含表示数据库中各个表的 SQLTableSchema 实例的数组。</p>
 
 <p>通常，开发人员代码不直接构造 SQLTableSchema 实例。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema"><linktext>flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLTableSchema:SQLTableSchema"><apiName>SQLTableSchema</apiName><shortdesc>
     创建 SQLTableSchema 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>database</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>关联数据库的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>表的名称。
     
     </apiDesc></apiParam><apiParam><apiItemName>sql</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于创建该表的 SQL 语句。
     
     </apiDesc></apiParam><apiParam><apiItemName>columns</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>SQLColumnSchema 实例的数组，用于描述此表的列。
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLTableSchema 实例。通常，开发人员代码不直接调用 SQLTableSchema 构造函数。要获取数据库的架构信息，请调用 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.data.xml#SQLConnection/getSchemaResult()"><linktext>flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/tables"><linktext>flash.data.SQLSchemaResult.tables</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLTableSchema:columns:get"><apiName>columns</apiName><shortdesc>
     SQLColumnSchema 实例的数组，这些实例包含此表中各个列的架构信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     SQLColumnSchema 实例的数组，这些实例包含此表中各个列的架构信息。如果 <codeph>SQlConnection.loadSchema()</codeph> 调用指示结果中不包括列信息，则 <codeph>columns</codeph> 属性为空数组（<codeph>length</codeph> 属性为 0 的数组）。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLColumnSchema"><linktext>flash.data.SQLColumnSchema</linktext></link><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.data:SQLResult"><apiName>SQLResult</apiName><shortdesc>
 SQLResult 类提供对为响应 SQL 语句（SQLStatement 实例）执行而返回的数据的访问。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLResult 类提供对为响应 SQL 语句（SQLStatement 实例）执行而返回的数据的访问。
 
 <p>SQL 语句的 SQLResult 实例是通过调用 <codeph>SQLStatement.getResult()</codeph> 方法或作为传递给对 <codeph>SQLStatement.execute()</codeph> 或 <codeph>SQLStatement.next()</codeph> 的调用中指定的 Responder 实例的结果处理函数的参数进行访问的。通常，开发人员代码不直接构造 SQLResult 实例。</p>
 
 <p>使用 SQLResult 对象可访问从 <codeph>SELECT</codeph> 语句中返回的数据行（使用 <codeph>data</codeph> 属性）；获取 <codeph>INSERT</codeph> 语句的行标识符信息（使用 <codeph>lastInsertRowID</codeph> 属性）；确定受 <codeph>INSERT</codeph>、<codeph>UPDATE</codeph> 或 <codeph>DELETE</codeph> 语句影响的行数（使用 <codeph>rowsAffected</codeph> 属性）或确定是否有尚未检索的其它 <codeph>SELECT</codeph> 结果行（使用 <codeph>complete</codeph> 属性）。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link></related-links><apiConstructor id="flash.data:SQLResult:SQLResult"><apiName>SQLResult</apiName><shortdesc>
     创建 SQLResult 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>从语句的执行返回的行的数组。如果语句不返回任何行，则此值应为 null。
     
     </apiDesc></apiParam><apiParam><apiItemName>rowsAffected</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>指示所执行的语句影响的行数。
     
     </apiDesc></apiParam><apiParam><apiItemName>complete</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>指示是否有可以获取的其它行或是否已返回所有数据。
     
     </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>如果语句为 SQL <codeph>INSERT</codeph> 操作，则它将是该行的新的唯一标识符。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建 SQLResult 实例。通常，开发人员代码不直接调用 SQLResult 构造函数。要检索与特定 SQLStatement 实例相关联的 SQLResult 实例，请调用该实例的 <codeph>getResult()</codeph> 方法。如果为 <codeph>execute()</codeph> 或 <codeph>next()</codeph> 方法调用指定了 Responder 实例，则还会以参数形式向结果处理函数传递 SQLResult 实例。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLResult:complete:get"><apiName>complete</apiName><shortdesc>
     指示是否已返回语句执行中的所有结果数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指示是否已返回语句执行中的所有结果数据。
     
     <p>如果某一语句返回一行或多行，则此属性指示是否已返回所有行。在使用一个 <codeph>prefetch</codeph> 参数值调用 SQLStatement 对象的 <codeph>execute()</codeph> 方法时，SQLResult 对象的 <codeph>data</codeph> 属性中只返回指定行数的生成数据。对 <codeph>SQLStatement.next()</codeph> 的后续调用将导致其它数据变为可用。此属性用于确定已返回最终结果的时间。</p>
     
     <p>请注意，由于在执行时行数是未知的，因此，数据库光标必须移出最后一行以后，才会认为语句执行完成。如果使用一个 <codeph>prefetch</codeph> 参数调用 <codeph>SQLStatement.execute()</codeph> 方法，则只有当请求的行数至少比结果集中的行数多一行时，生成的 SQLResult 实例的 <codeph>complete</codeph> 属性才会为 <codeph>true</codeph>。</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:data:get"><apiName>data</apiName><shortdesc>
     由于执行语句而返回的数据（尤其是在执行 SQL SELECT 语句时）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     由于执行语句而返回的数据（尤其是在执行 SQL <codeph>SELECT</codeph> 语句时）。
     
     <p>当语句返回一行或多行时，此属性是包含表示结果数据行的对象的数组。数组中的每个对象都包含与结果数据集的列名称相对应的属性名称。</p>
	 
	 <p>例如，假设执行下面的 SQL <codeph>SELECT</codeph> 语句：</p>
	 
	 <codeblock>
	 SELECT lastName, firstName
	 FROM employees
	 </codeblock>
	 
	 <p>假设 <codeph>employees</codeph> 表包含 10 行，则 <codeph>SQLResult.data</codeph> 属性是一个包含 10 个元素的数组。每个元素都是包含 <codeph>lastName</codeph> 和 <codeph>firstName</codeph> 这两个属性的对象。</p>
	 
	 <p>如果您使用的 <codeph>SELECT</codeph> 语句包含复杂的结果列（如聚合函数），这种情形更复杂。例如，假设您将执行下列 SQL：</p>
	 
	 <codeblock>
	 SELECT departmentId, SUM(salary)
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p>在此语句的结果中，<codeph>data</codeph> 数组中的每个对象都包含两个属性，分别为 <codeph>departmentId</codeph> 和 <codeph>SUM(salary)</codeph>。但是，“SUM(salary)”不是有效的标识符。如果您使用的是计算列（如聚合函数或其他函数），请在 SQL 语句中指定计算列的别名。此别名在结果数据对象中用作属性名称。例如，可以考虑使用下面的内容来代替前面的语句：</p>
	 
	 <codeblock>
	 SELECT departmentId, SUM(salary) AS salarySubtotal
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p>在此语句的 <codeph>data</codeph> 数组中，结果对象包含两个分别名为 <codeph>departmentId</codeph> 和 <codeph>salarySubtotal</codeph> 的属性。</p>
	 
	 <p><codeph>data</codeph> 属性始终是数组，而不管结果集中有多少行和多少列。例如，下面的 <codeph>SELECT</codeph> 语句会产生一行和一列，实质上是一个值：</p>
	 
	 <codeblock>
	 SELECT COUNT(~~) AS numEmployees
	 FROM employees
	 </codeblock>
	 
	 <p>在执行查询后，<codeph>data</codeph> 属性会包含一个具有一个元素的 Array 对象。该元素是一个包含单个属性（即 <codeph>numEmployees</codeph>）的对象。</p>
	 
	 <p>如果结果数据中有重复的列名称，例如，如果 <codeph>SELECT</codeph> 语句在两个不同的表中包含了两个不同的 <codeph>id</codeph> 列，则根据 <codeph>SQLConnection.columnNameStyle</codeph> 属性的值会为属性名称指定重复的名称。默认情况下，各列的名称用作属性名称，但如果结果集中有多个列使用同一名称，则对具有相同名称的列使用长名称格式 <codeph>[table-name]_[column-name]</codeph>。此行为可通过设置 <codeph>SQLConnection.columnNameStyle</codeph> 属性进行更改。</p>
	 
	 <p>默认情况下，<codeph>data</codeph> 数组中的对象是 Object 实例。但是，通过将 <codeph>SQLStatement.itemClass</codeph> 属性的值设置为某个类，则 <codeph>data</codeph> 数组元素将作为该类的实例进行创建。对于结果数据集中的每列，<codeph> itemClass </codeph> 类必须包含一个名称与列名称完全匹配的属性。</p> 
	 
	 <p>如果语句不返回任何数据，则此属性为 <codeph>null</codeph>。如果此语句不是 <codeph>SELECT</codeph> 语句，或如果此语句是返回 0 行的 <codeph>SELECT</codeph> 语句，就是这种情况。</p>
     
	 </apiDesc><example conref="examples\SQLStatement.itemClass.1.as"> 下面的代码演示如何使用 <codeph>itemClass</codeph> 属性让运行时从 SQL <codeph>SELECT</codeph> 语句结果创建自定义类的实例。
<codeblock>
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/columnNameStyle"><linktext>SQLConnection.columnNameStyle</linktext></link><link href="flash.data.xml#SQLStatement/itemClass"><linktext>SQLStatement.itemClass</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:lastInsertRowID:get"><apiName>lastInsertRowID</apiName><shortdesc>
     上次生成的行标识符（由 SQL INSERT 语句生成）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     上次生成的行标识符（由 SQL <codeph>INSERT</codeph> 语句生成）。
	 
     <p>如果执行的语句不是 <codeph>INSERT</codeph> 语句，则该值为 0。</p>
	 
	 <p>行标识符用于唯一标识数据库表中的行。该值通常由数据库生成。</p>
	 
	 <p>有关主键和生成的行标识符的详细信息，请参阅附录“<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>”中的“<xref href="../../localDatabaseSQLSupport.html#createTable">创建表</xref>”和“<xref href="../../localDatabaseSQLSupport.html#expressions">表达式</xref>”部分。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID"><linktext>flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:rowsAffected:get"><apiName>rowsAffected</apiName><shortdesc>
     指示受此操作影响的行数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     指示受此操作影响的行数。只有直接由 <codeph>INSERT</codeph>、<codeph>UPDATE</codeph> 或 <codeph>DELETE</codeph> 语句指定的更改才计算在内。
     
     <p>由触发器导致的辅助更改不计算在内。使用 <codeph>SQLConnection.totalChanges</codeph> 属性可得到总更改数（包括触发器引发的更改）。</p>
	 
	 <p>请注意，当相关的 SQL 操作为不带 <codeph>WHERE</codeph> 子句的 <codeph>DELETE</codeph> 语句时（即该语句删除表中的所有行），<codeph>rowsAffected</codeph> 属性始终为 0，而不管删除了多少行。如果您需要知道删除的行数，则可以包括 <codeph>WHERE</codeph> 子句 <codeph>WHERE 1 = 1</codeph>，在这种情况下，将删除所有行，并且 <codeph>rowsAffected</codeph> 属性会精确反映已删除的行数。不过，根据删除的行数不同，执行此操作可能会对语句的性能产生负面影响。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/totalChanges"><linktext>flash.data.SQLConnection.totalChanges</linktext></link></related-links></apiValue></apiClassifier></apiPackage>