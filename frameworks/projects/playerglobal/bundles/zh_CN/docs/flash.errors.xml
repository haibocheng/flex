<?xml version="1.0"?>
<apiPackage id="flash.errors"><apiName>flash.errors</apiName><apiDetail/><apiClassifier id="flash.errors:ScriptTimeoutError"><apiName>ScriptTimeoutError</apiName><shortdesc>
	达到脚本超时间隔时，将引发 ScriptTimeoutError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	达到脚本超时间隔时，将引发 ScriptTimeoutError 异常。脚本超时间隔为 15 秒。<ph outputclass="flexonly">可以在 <codeph>mx:Application</codeph> 标签中添加以下两个 XML 属性：<codeph>scriptTimeLimit</codeph>（脚本超时之前的秒数）和 <codeph>scriptRecursionLimit</codeph>（允许的递归调用深度）。</ph> 
	
	<p>引发两个 ScriptTimeoutError 异常。您可以清楚地捕获和退出第一个异常。如果没有异常处理函数，未捕获的异常将终止执行。引发了第二个异常，但是无法由用户代码捕获，该异常转到未捕获的异常的处理函数。该异常是不可捕获的异常，用于防止 Flash<sup>®</sup> Player 无限期地挂起。</p>
	
 	</apiDesc><example conref="examples\ScriptTimeoutErrorExample.as"> 下面的示例使用范例 ScriptTimeoutErrorExample 类显示脚本超时时生成的错误。这是由以下步骤完成的：
 <ol>
     <li>声明一个 <codeph>keepLooking</codeph> 布尔值属性。</li>
     <li>构造函数调用捕获 ScriptTimeoutError 对象的错误处理代码段中的 <codeph>lockMachine()</codeph> 方法。  </li>
     <li><codeph>lockMachine()</codeph> 方法包含一个无穷的 <codeph>while</codeph> 循环。</li>
     <li>不久，将引发 ScriptTimeoutError。该构造函数捕获它，通过 <codeph>trace</codeph> 语句输出错误消息，并将 <codeph>keepLooking</codeph> 布尔值重置为 <codeph>false</codeph>，这样将会终止 <codeph>lockMachine()</codeph> 中的 <codeph>while</codeph> 循环。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.ScriptTimeoutError;

    public class ScriptTimeoutErrorExample extends Sprite {        
        private var keepLooping:Boolean = true;

        public function ScriptTimeoutErrorExample() {
            try {
                lockMachine();
            } 
            catch(e:ScriptTimeoutError) {
                trace(e);    // ScriptTimeoutError: Error #1502: A script has executed for longer than 15 seconds
                keepLooping = false;
            }
        }
        
        private function lockMachine():void {
            while(keepLooping){        
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:ScriptTimeoutError:flash.errors:ScriptTimeoutError"><apiName>ScriptTimeoutError</apiName><shortdesc>
		创建新的 ScriptTimeoutError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		创建新的 ScriptTimeoutError 对象。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:SQLError"><apiName>SQLError</apiName><shortdesc>
 SQLError 实例提供有关失败操作的详细信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 SQLError 实例提供有关失败操作的详细信息。
 
 <p>在异步执行模式下，当 SQL 数据库操作发生错误时，SQLConnection 或 SQLStatement 实例将分派 SQLErrorEvent 对象。有关该错误的信息可以从 SQLErrorEvent 对象的 <codeph>error</codeph> 属性以 SQLError 实例的形式进行访问。</p>
 
 <p>在同步执行模式中，当 SQL 数据库操作发生错误时，SQLConnection 或 SQLStatement 实例会引发 SQLError 异常，该异常可通过将引发错误的代码放在 <codeph>try..catch</codeph> 块中来进行处理。</p>
 
 <p>此类提供包含错误详细信息的属性（指定所发生错误的特定类型）、包含错误详细信息的文本消息和导致发生错误的操作。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#SQLErrorEvent"><linktext>flash.events.SQLErrorEvent</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><apiConstructor id="flash.errors:SQLError:SQLError"><apiName>SQLError</apiName><shortdesc>
     创建一个可以引发或通过 SQLErrorEvent 实例的 error 属性使用的 SQLError 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指示导致失败的特定操作。此值是在 SQLErrorOperation 类中定义的常量之一。
     
     </apiDesc></apiParam><apiParam><apiItemName>details</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>当前错误的详细信息。
     
     </apiDesc></apiParam><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>所发生错误的说明。
     
     </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>与特定错误消息关联的引用编号。
     
     </apiDesc></apiParam><apiParam><apiItemName>detailID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>-1</apiData><apiDesc>与详细错误消息关联的引用编号。
     
     </apiDesc></apiParam><apiParam><apiItemName>detailArgs</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>一组有序的替换值数组，可用于按地区构造详细错误消息。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建一个可以引发或通过 SQLErrorEvent 实例的 <codeph>error</codeph> 属性使用的 SQLError 实例。
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.errors.xml#SQLErrorOperation"><linktext>flash.errors.SQLErrorOperation</linktext></link></related-links></apiConstructor><apiOperation id="flash.errors:SQLError:toString"><apiName>toString</apiName><shortdesc>
     
	
	默认情况下，返回字符串“Error”；如果已定义，则返回 Error.message 属性中包含的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>错误消息。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     
	
	默认情况下，返回字符串 <codeph>"Error"</codeph>；如果已定义，则返回 <codeph>Error.message</codeph> 属性中包含的值。
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.errors:SQLError:detailArguments:get"><apiName>detailArguments</apiName><shortdesc>
      一组字符串值数组，可用于按地区构造详细错误消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
      一组字符串值数组，可用于按地区构造详细错误消息。
      
      <p>此属性包含替换为 <codeph>details</codeph> 属性错误消息的一个或多个值，以指示与错误关联的特定数据库对象（表名称、列名称，等等）。例如，假定应用程序中发生具有以下 <codeph>details</codeph> 属性错误消息的错误：</p>
	  
	  <codeblock>there is already another table or index with this name: 'my_table'</codeblock>
	  
	  <p>在这种情况下，SQLError 实例的 <codeph>detailArguments</codeph> 属性将包含值为 <codeph>"my_table"</codeph> 的单个元素。</p>
	  
	  <p>使用 <codeph>detailID</codeph> 属性，应用程序可以标识特定 <codeph>details</codeph> 错误消息。应用程序可以为最终用户提供用其所在地区的语言表示的替换文本。可在错误消息字符串的合适位置替换 <codeph>detailArguments</codeph> 数组的参数值。对于要直接向特定地区的最终用户显示此错误的 <codeph>details</codeph> 属性错误消息的应用程序，这非常有用。</p>
      
      <p>有关 <codeph>detailID</codeph> 值及其相应的英语错误详细消息和参数的列表，请参阅附录“<xref href="../../localDatabaseSQLErrorDetails.html">SQL 错误详细消息、id 和参数</xref>。”</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.errors:SQLError:detailID:get"><apiName>detailID</apiName><shortdesc>
      与特定详细消息关联的引用编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
      与特定详细消息关联的引用编号。此值用于支持按地区翻译 <codeph>details</codeph> 属性错误消息。
      
      <p>此属性为每个 <codeph>details</codeph> 消息提供唯一标识符。（具有特定 <codeph>errorID</codeph> 的任何类型错误都有多个具有唯一 <codeph>detailID</codeph> 值的错误。）此标识符和 <codeph>detailArguments</codeph> 数组中的一个或多个值一起使用，应用程序可以提供特定于地区的详细错误消息。对于要直接向特定地区的最终用户显示此错误的 <codeph>details</codeph> 属性错误消息的应用程序，这非常有用。</p>
      
      <p>有关 <codeph>detailID</codeph> 值及其相应的英语错误详细消息和参数的列表，请参阅附录“<xref href="../../localDatabaseSQLErrorDetails.html">SQL 错误详细消息、id 和参数</xref>。”</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="flash.errors:SQLError:details:get"><apiName>details</apiName><shortdesc>
     当前错误的详细信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     当前错误的详细信息。提供有关所发生错误的更多特定信息。
     
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.errors:SQLError:operation:get"><apiName>operation</apiName><shortdesc>
     指示在发生错误时尝试执行的操作的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示在发生错误时尝试执行的操作的值。此值是在 SQLErrorOperation 类中定义的常量之一。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.errors.xml#SQLErrorOperation"><linktext>flash.errors.SQLErrorOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.errors:SQLErrorOperation"><apiName>SQLErrorOperation</apiName><shortdesc>
 该类包含一些常量，它们表示 SQLError.operation 属性的可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 该类包含一些常量，它们表示 <codeph>SQLError.operation</codeph> 属性的可能值。这些值指示导致发生错误的尝试性操作。
 
 <p>每个值表示 SQLConnection 类或 SQLStatement 类的一项操作。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError/operation"><linktext>flash.errors.SQLError.operation</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><apiValue id="flash.errors:SQLErrorOperation:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     指示调用了 SQLConnection.analyze() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.analyze()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     指示调用了 SQLConnection.attach() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.attach()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     指示调用了 SQLConnection.begin() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.begin()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     指示调用了 SQLConnection.close() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.close()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     指示调用了 SQLConnection.commit() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.commit()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     指示调用了 SQLConnection.compact() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.compact()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     指示调用了 SQLConnection.deanalyze() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.deanalyze()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:DETACH"><apiName>DETACH</apiName><shortdesc>
     指示调用了 SQLConnection.detach() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.detach()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:EXECUTE"><apiName>EXECUTE</apiName><shortdesc>
     指示调用了 SQLStatement.execute() 方法或 SQLStatement.next() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>execute</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLStatement.execute()</codeph> 方法或 <codeph>SQLStatement.next()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:OPEN"><apiName>OPEN</apiName><shortdesc>
     指示调用了 SQLConnection.open() 方法或 SQLConnection.openAsync() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.open()</codeph> 方法或 <codeph>SQLConnection.openAsync()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     指示调用了 SQLConnection.reencrypt() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.reencrypt()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     指示调用了 SQLConnection.rollback() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.rollback()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.errors:SQLErrorOperation:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     指示调用了 SQLConnection.loadSchema() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指示调用了 <codeph>SQLConnection.loadSchema()</codeph> 方法。
     
     </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.errors:MemoryError"><apiName>MemoryError</apiName><shortdesc>
	内存分配请求失败时，将引发 MemoryError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	内存分配请求失败时，将引发 MemoryError 异常。 
	
	<p>在桌面计算机上，很少出现内存分配失败的情况，除非分配请求非常大。例如，32 位 Windows 程序只可以访问 2GB 的地址空间，因此无法满足百亿字节的请求。</p>
	
	<p>默认情况下，Flash Player 不会对 ActionScript 程序可以分配的内存量强加限制。</p>
	
 	</apiDesc><example conref="examples\MemoryErrorExample.as"> 以下示例显示了生成 MemoryError 的一个方法。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.MemoryError;
    import flash.utils.setInterval;
       
    public class MemoryErrorExample extends Sprite {
        private var crashingStr:String;
        private var intervalId:Number;
           
        public function MemoryErrorExample() {
            crashingStr = "abcdefghijklmnopqrstuvwxyz";
            intervalId = setInterval(exhaustMemory, 50);
        }
           
        public function exhaustMemory():void {            
            try {
                crashingStr += crashingStr;
            }
            catch(e:MemoryError) {
                trace(e);
            }
        }
    }
}  
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:MemoryError:flash.errors:MemoryError"><apiName>MemoryError</apiName><shortdesc> 
		创建新的 MemoryError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> 
		创建新的 MemoryError 对象。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:StackOverflowError"><apiName>StackOverflowError</apiName><shortdesc>
	可用于脚本的堆栈用尽时，ActionScript 将引发 StackOverflowError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	可用于脚本的堆栈用尽时，ActionScript 将引发 StackOverflowError 异常。ActionScript 使用堆栈存储有关在脚本中进行的每个方法调用的信息，例如方法使用的局部变量。可用堆栈空间量因系统而异。
	
	<p>StackOverflowError 异常可能表示已出现无限递归，在这种情况下，需要将终止 case 语句添加到该函数中。它可能还表示递归算法具有合适的终止条件，但还是用尽了堆栈。在这种情况下，请尝试改用迭代方式表示算法。</p>
	
 	</apiDesc><example conref="examples\StackOverflowErrorExample.as"> 下例使用范例 StackOverflowErrorExample 类显示堆栈溢出时生成的错误。这是使用以下步骤完成的：
 <ol>
     <li>构造函数调用捕获 StackOverflowError 对象的错误处理代码段中的 <codeph>lockMachine()</codeph> 方法。  </li>
     <li><codeph>lockMachine()</codeph> 方法调用自身，直到堆栈溢出为止。</li>
     <li>引发 StackOverflowError 后，构造函数捕获该错误，然后通过 <codeph>trace</codeph> 语句输出错误消息。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.StackOverflowError;

    public class StackOverflowErrorExample extends Sprite {        
        public function StackOverflowErrorExample() {
            try {
                lockMachine();
            } 
            catch(e:StackOverflowError) {
                trace(e);    // StackOverflowError: Error #1023: Stack overflow.
            }
        }
        
        private function lockMachine():void {
            lockMachine();
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:StackOverflowError:flash.errors:StackOverflowError"><apiName>StackOverflowError</apiName><shortdesc>
		创建新的 StackOverflowError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		创建新的 StackOverflowError 对象。
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:DRMManagerError"><apiName>DRMManagerError</apiName><shortdesc>
 DRMManager 分派 DRMManagerError 事件以报告错误。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
 DRMManager 分派 DRMManagerError 事件以报告错误。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><apiConstructor id="flash.errors:DRMManagerError:DRMManagerError"><apiName>DRMManagerError</apiName><shortdesc>
	 创建 DRMManagerError 类的新实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>错误描述
	 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>常规错误编号
	 </apiDesc></apiParam><apiParam><apiItemName>subErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>特定错误编号
	 
 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 创建 DRMManagerError 类的新实例。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.errors:DRMManagerError:toString"><apiName>toString</apiName><shortdesc>
	 
	
	默认情况下，返回字符串“Error”；如果已定义，则返回 Error.message 属性中包含的值。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>错误消息。
	
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 
	
	默认情况下，返回字符串 <codeph>"Error"</codeph>；如果已定义，则返回 <codeph>Error.message</codeph> 属性中包含的值。
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.errors:DRMManagerError:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
	 特定错误编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 特定错误编号。
	 
 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.errors:IOError"><apiName>IOError</apiName><shortdesc>
	某些类型的输入或输出失败时，将引发 IOError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	某些类型的输入或输出失败时，将引发 IOError 异常。例如，如果在尚未连接的或已断开连接的套接字上尝试读/写操作，将引发 IOError 异常。
	
	
 	</apiDesc><example conref="examples\IOErrorExample.as"> 下例在尝试关闭从未加载过的 Sound 流时，引发了 IOError 异常。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.IOError;
    import flash.media.Sound;
      
    public class IOErrorExample extends Sprite
    {
        public function IOErrorExample()
        {
            var music:Sound = new Sound();
            try {
                  music.close();
                  trace("Stream closed.");
            } catch (error:IOError) {
                  trace("The stream could not be closed, or the stream was not open.");
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:IOError:flash.errors:IOError"><apiName>IOError</apiName><shortdesc> 
		创建新的 IOError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
		
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> 
		创建新的 IOError 对象。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:IllegalOperationError"><apiName>IllegalOperationError</apiName><shortdesc>
	当方法未实现或者实现中未涉及当前用法时，将引发 IllegalOperationError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	当方法未实现或者实现中未涉及当前用法时，将引发 IllegalOperationError 异常。
	
	<p>非法操作错误异常的示例包括：</p>
	<ul>
	    <li>基类（如 DisplayObjectContainer）提供的功能比舞台可支持的功能（例如蒙版）多</li>
	    <li>在没有辅助功能支持的情况下编译 Flash Player 时，调用了某些辅助功能方法</li>
	    <li>mms.cfg 设置禁止 FileReference 操作</li>
	    <li>当浏览对话框已打开时，ActionScript 尝试运行 <codeph>FileReference.browse()</codeph> 调用</li>
	    <li>ActionScript 尝试对 FileReference 对象使用不受支持的协议（例如 FTP）</li>
	    <li product="flash">从运行时播放器中调用仅用于创作的功能。</li>
	    <li product="flash">尝试设置已放置在时间轴上的对象的名称。</li>
	</ul>
	
 	</apiDesc><example conref="examples\IllegalOperationErrorExample.as"> 下例说明如何使用 <codeph>IllegalOperationError</codeph> 处理函数。
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;

    public class IllegalOperationErrorExample extends Sprite {
        public function IllegalOperationErrorExample() {
            var child:Sprite = new Sprite();
            try {
                addChild(child);
            }
            catch(e:IllegalOperationError) {
                trace(e);
            }
        }

        public override function addChild(child:DisplayObject):DisplayObject {
            throw new IllegalOperationError("addChild cannot be performed on the IllegalOperationErrorExample class");
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="flash.errors:IllegalOperationError:flash.errors:IllegalOperationError"><apiName>IllegalOperationError</apiName><shortdesc>
		创建新的 IllegalOperationError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		创建新的 IllegalOperationError 对象。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:EOFError"><apiName>EOFError</apiName><shortdesc>
	如果尝试读取的内容超出可用数据的末尾，则会引发 EOFError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Error
	 
	 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>flash.errors:IOError</apiBaseClassifier></apiClassifierDef><apiDesc>
	如果尝试读取的内容超出可用数据的末尾，则会引发 EOFError 异常。例如，当调用 IDataInput 接口中的一个读取方法，而数据不足以满足读取请求时，将引发 EOFError。 
	
 	</apiDesc><example conref="examples\EOFErrorExample.as"> 下例使用 <codeph>EOFErrorExample</codeph> 类显示尝试读取的内容超出了可用数据的末尾时生成的错误。这是由以下步骤完成的：
 <ol>
     <li>构造函数创建一个 ByteArray 对象 <codeph>byteArr</codeph>，并使用 <codeph>writeBoolean()</codeph> 将 <codeph>false</codeph> 的布尔值写入字节流。  </li>
     <li><codeph>byteArr</codeph> 的位置被重置为 <codeph>0</codeph>（数据流的开始处）。</li>
     <li>使用 <codeph>readBoolean()</codeph> 从数据流中删除单个字节。数据流现在未包含任何数据。</li>
     <li>在设置为捕获 EOFError 对象的错误处理代码段中，将再次调用 <codeph>readBoolean()</codeph>，捕获 EOFError 并将它传递到 <codeph>trace()</codeph> 语句，这样便会输出与 EOFError 对象关联的错误消息。 </li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.errors.EOFError;
    import flash.utils.ByteArray;

    public class EOFErrorExample extends Sprite {        
        public function EOFErrorExample() {
            var byteArr:ByteArray = new ByteArray();

            byteArr.writeBoolean(false);
            trace(byteArr.length);        // 1
            
            byteArr.position = 0;
            try {
                trace(byteArr.readBoolean());    // false
            }
            catch(e:EOFError) {
                trace(e);
            }
            try {
                trace(byteArr.readBoolean());
            } 
            catch(e:EOFError) {
                trace(e);        // EOFError: Error #2030: End of file was encountered.
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#ByteArray"><linktext>flash.utils.ByteArray</linktext></link><link href="flash.utils.xml#IDataInput"><linktext>flash.utils.IDataInput</linktext></link><link href="flash.net.xml#Socket"><linktext>flash.net.Socket</linktext></link><link href="flash.net.xml#URLStream"><linktext>flash.net.URLStream</linktext></link></related-links><apiConstructor id="flash.errors:EOFError:flash.errors:EOFError"><apiName>EOFError</apiName><shortdesc>
		创建新的 EOFError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		创建新的 EOFError 对象。
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flash.errors:InvalidSWFError"><apiName>InvalidSWFError</apiName><shortdesc>
  Flash Player 遇到损坏的 SWF 文件时，将引发此异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flash Player 遇到损坏的 SWF 文件时，将引发此异常。 
  </apiDesc></apiClassifierDetail><apiConstructor id="flash.errors:InvalidSWFError:InvalidSWFError"><apiName>InvalidSWFError</apiName><shortdesc>
        创建新的 InvalidSWFError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>
         
         </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>与此错误对象相关联的字符串。
        
        </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc>
        创建新的 InvalidSWFError 对象。
        
        </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>