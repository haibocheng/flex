<?xml version="1.0"?>
<apiPackage id="flash.events"><apiName>flash.events</apiName><apiDetail/><apiClassifier id="flash.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
 在响应用户通过键盘输入的内容时将分派的 KeyboardEvent 对象 ID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Keyboard 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 在响应用户通过键盘输入的内容时将分派的 KeyboardEvent 对象 ID。有两种类型的键盘事件：<codeph>KeyboardEvent.KEY_DOWN</codeph> 和 <codeph>KeyboardEvent.KEY_UP</codeph>
 
 <p>由于按键与特定字符之间的映射因设备和操作系统而异，因此请使用 TextEvent 事件类型来处理字符输入。</p>
 
 <p>要以全局方式侦听按键事件，请在舞台上侦听捕获阶段、目标阶段或冒泡阶段。</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as"> 以下示例使用 <codeph>KeyboardEventExample</codeph> 类来说明键盘事件及其侦听器函数。该示例执行下列任务：
 <ol>
  <li>它创建一个新的 Sprite 实例，名称为 <codeph>child</codeph>。</li>
     <li>它声明了以后在设置正方形的背景颜色和大小时使用的属性。</li>
     <li>使用 Sprite 的方法，它通过调用 <codeph>addChild()</codeph> 方法绘制一个浅蓝色正方形，其显示在舞台上的默认坐标 (0,0) 处。</li>
     <li>它添加了一个鼠标事件两个键盘类型事件侦听器：
     <ul>
      <li><codeph>click</codeph>/<codeph>clickHandler</codeph>，在单击正方形将焦点设置在 <codeph>child</codeph> sprite 上以使它可以侦听键盘事件时进行分派。</li>
         <li><codeph>keyDown</codeph>/<codeph>keyDownHandler</codeph>，按下任何键时将分派这两个侦听器。订阅者方法使用 <codeph>trace()</codeph> 语句输出有关事件的信息。</li>
         <li><codeph>keyUp</codeph> / <codeph>keyUpHandler</codeph>，在释放某个键时进行分派。</li>
     </ul></li>
 </ol>
 
 <p>在测试此示例时，需要首先单击此正方形才能让键盘事件正常工作。</p>
 <p product="flash">此外，如果使用 Flash 中的“测试影片”命令，创作界面可能会响应特定的键，而不会响应附加该 child sprite 的事件侦听器。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation"><linktext>KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown"><apiName>keyDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp"><apiName>keyUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关键盘事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：<codeph>KeyboardEvent.KEY_DOWN</codeph> 和 <codeph>KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam><apiItemName>charCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>按下或释放的键的字符代码值。返回的字符代码值为英文键盘值。例如，如果您按 Shift+3，则 <codeph>Keyboard.charCode()</codeph> 属性在日文键盘上将返回 #，与其在英文键盘上的行为相同。
	</apiDesc></apiParam><apiParam><apiItemName>keyCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>按下或释放的键的键控代码值。
	</apiDesc></apiParam><apiParam><apiItemName>keyLocationValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>按键在键盘上的位置。
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>在 Windows 中，指示是否已激活 Ctrl 键。在 Mac 中，指示是否已激活 Ctrl 键或 Command 键。
	</apiDesc></apiParam><apiParam><apiItemName>altKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Alt 功能键（仅限 Windows）。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Shift 功能键。
	</apiDesc></apiParam><apiParam><apiItemName>controlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示在 Mac 中是否已激活 Control 键，以及在 Windows 和 Linux 中是否已激活 Control 或 Ctrl 键。
	</apiDesc></apiParam><apiParam><apiItemName>commandKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Command 键（仅限 Mac）。
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>KeyboardEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关键盘事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode"><linktext>Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 KeyboardEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 KeyboardEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 KeyboardEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 KeyboardEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 KeyboardEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 KeyboardEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[KeyboardEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... shiftKey=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	指示如果已修改显示列表，则应该在此事件处理完成后呈现显示结果
	
	</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	指示如果已修改显示列表，则应该在此事件处理完成后呈现显示结果
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN"><apiName>KEY_DOWN</apiName><shortdesc>
	KeyboardEvent.KEY_DOWN 常量定义 keyDown 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>KeyboardEvent.KEY_DOWN</codeph> 常量定义 <codeph>keyDown</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry>在 AIR 中为 <codeph>true</codeph>，在 Flash Player 中为 <codeph>false</codeph>；在 AIR 中，取消此事件会禁止将字符输入到文本字段中。</entry></row><row><entry><codeph>charCode</codeph></entry><entry>按下或释放的键的字符代码值。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry>在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Control 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>按下或释放的键的键控代码值。</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>按键在键盘上的位置。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有焦点的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP"><apiName>KEY_UP</apiName><shortdesc>
	KeyboardEvent.KEY_UP 常量定义 keyDown 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>KeyboardEvent.KEY_UP</codeph> 常量定义 <codeph>keyDown</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>charCode</codeph></entry><entry>包含按下或释放的键的字符代码值。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry>在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Control 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>按下或释放的键的键控代码值。</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>按键在键盘上的位置。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有焦点的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
	在 Windows 中，指示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)；在 Mac OS 中，指示 Option 键是否处于活动状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	在 Windows 中，指示 Alt 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)；在 Mac OS 中，指示 Option 键是否处于活动状态。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
	包含按下或释放的键的字符代码值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	包含按下或释放的键的字符代码值。字符代码值为英文键盘值。例如，如果您按 Shift+3，则 <codeph>charCode</codeph> 在日文键盘上将为 #，就像在英文键盘上一样。
	<p><b>注意：</b>当输入法编辑器 (IME) 正在运行时，<codeph>charCode</codeph> 不会报告精确的字符代码。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	指示 Command 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示 Command 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)。仅 Mac OS 支持。在 Mac OS 中，<codeph>commandKey</codeph> 属性具有与 <codeph>ctrlKey</codeph> 属性相同的值。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	指示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示 Ctrl 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)。在 Windows 和 Linux 中，Ctrl 键处于活动状态时这也为 true。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	在 Windows 和 Linux 中，指示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)；在 Mac OS 中，指示 Ctrl 键或 Command 键是否处于活动状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	在 Windows 和 Linux 中，指示 Ctrl 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)；在 Mac OS 中，指示 Ctrl 键或 Command 键是否处于活动状态。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	按下或释放的键的键控代码值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	按下或释放的键的键控代码值。
	<p><b>注意：</b>当输入法编辑器 (IME) 正在运行时，<codeph>keyCode</codeph> 不会报告精确的键控代码。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
	指示键在键盘上的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	指示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 <codeph>KeyLocation.LEFT</codeph>，右 Shift 键的值为 <codeph>KeyLocation.RIGHT</codeph>。另一个示例是区分标准键盘 (<codeph>KeyLocation.STANDARD</codeph>) 与数字键盘 (<codeph>KeyLocation.NUM_PAD</codeph>) 上按下的数字键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	指示 Shift 功能键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示 Shift 功能键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
 在窗口显示状态发生更改时，NativeWindow 对象将分派 NativeWindowDisplayStateEvent 类的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>更改窗口显示状态的 NativeWindow 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 在窗口显示状态发生更改时，NativeWindow 对象将分派 NativeWindowDisplayStateEvent 类的事件。有两种类型的事件：
 <ul>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange"><apiName>displayStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging"><apiName>displayStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
    使用与窗口显示状态事件有关的特定信息创建 Event 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：
    <ul>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
    </apiDesc></apiParam><apiParam><apiItemName>beforeDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>更改之前的 <codeph>displayState</codeph>。
    </apiDesc></apiParam><apiParam><apiItemName>afterDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>更改之后的 <codeph>displayState</codeph>。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    使用与窗口显示状态事件有关的特定信息创建 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone"><apiName>clone</apiName><shortdesc>
    创建 NativeWindowDisplayStateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 NativeWindowDisplayStateEvent 对象。
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    创建 NativeWindowDisplayStateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString"><apiName>toString</apiName><shortdesc>
    返回一个字符串，其中包含 NativeWindowDisplayStateEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 NativeWindowDisplayStateEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    返回一个字符串，其中包含 NativeWindowDisplayStateEvent 对象的所有属性。该字符串具有以下格式：
    <p><codeph>[NativeWindowDisplayStateEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> beforeDisplayState=<i>value</i> afterDisplayState=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE"><apiName>DISPLAY_STATE_CHANGE</apiName><shortdesc>
    定义 displayStateChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>displayStateChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。此事件具有以下属性：
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>窗口的旧显示状态。</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>窗口的新显示状态。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚更改状态的 NativeWindow 实例。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING"><apiName>DISPLAY_STATE_CHANGING</apiName><shortdesc>
    定义 displayStateChanging 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChanging</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>displayStateChanging</codeph> 事件对象的 <codeph>type</codeph> 属性值。此事件具有以下属性：
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>未处理的更改之前的窗口显示状态。</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>未处理的更改之后的窗口显示状态。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚更改状态的 NativeWindow 实例。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消该事件会阻止更改。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get"><apiName>afterDisplayState</apiName><shortdesc>
     更改之后 NativeWindow 的显示状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     更改之后 NativeWindow 的显示状态。  
     
     <p>如果事件为 <codeph>displayStateChanging</codeph>，则表示显示状态尚未更改；在未取消该事件时，<codeph>afterDisplayState</codeph> 指示新的显示状态。如果事件为 <codeph>displayStateChanged</codeph>，则 <codeph>afterDisplayState</codeph> 指示当前的值。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get"><apiName>beforeDisplayState</apiName><shortdesc>
     更改之前 NativeWindow 的显示状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     更改之前 NativeWindow 的显示状态。  
     
     <p>如果事件为 <codeph>displayStateChanging</codeph>，则表示显示状态尚未更改；<codeph>beforeDisplayState</codeph> 反映窗口的当前显示状态。如果事件为 <codeph>displayStateChanged</codeph>，则 <codeph>beforeDisplayState</codeph> 指示以前的值。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
只要舞台进入和离开全屏显示模式，Stage 对象就分派 FullScreenEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>FullScreenEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
只要舞台进入或离开全屏显示模式，Stage 对象就分派 FullScreenEvent 对象。只有一种类型的 <codeph>fullScreen</codeph> 事件：<codeph>FullScreenEvent.FULL_SCREEN</codeph>。

</apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier>flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关 fullScreen 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 <codeph>fullScreen</codeph> 事件：<codeph>FullScreenEvent.FULL_SCREEN</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam><apiItemName>fullScreen</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示设备已激活 (<codeph>true</codeph>) 还是被取消激活 (<codeph>false</codeph>)。事件侦听器可以通过 <codeph>activating</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>FullScreenEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关 <codeph>fullScreen</codeph> 事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
    </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN"><linktext>FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 FullScreenEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 FullScreenEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 FullScreenEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 FullScreenEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 FullScreenEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 FullScreenEvent 对象的所有属性。使用以下格式：
	<p><codeph>[FullScreenEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> activating=<i>value</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN"><apiName>FULL_SCREEN</apiName><shortdesc>
	FullScreenEvent.FULL_SCREEN 常量定义 fullScreen 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>FullScreenEvent.FULL_SCREEN</codeph> 常量定义 <codeph>fullScreen</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>fullScreen</codeph></entry><entry>如果显示状态为全屏，则为 <codeph>true</codeph>；如果正常显示，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage 对象。</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get"><apiName>fullScreen</apiName><shortdesc>
	指示 Stage 对象是处于全屏模式 (true) 还是没有处于该模式 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示 Stage 对象是处于全屏模式 (<codeph>true</codeph>) 还是没有处于该模式 (<codeph>false</codeph>)。
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
 每当 Timer 对象达到由 Timer.delay 属性指定的间隔时，Timer 对象即会分派 TimerEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Timer 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 每当 Timer 对象达到由 <codeph>Timer.delay</codeph> 属性指定的间隔时，Timer 对象即会分派 TimerEvent 对象。
 
 </apiDesc><example conref="examples\TimerEventExample.as"> 以下示例使用 TimerExample 类来说明如何能将侦听器方法 <codeph>timerHandler()</codeph> 实例化并设置为侦听要分派的新 TimerEvent（在调用 Timer 的 <codeph>start()</codeph> 方法时发生）。  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#Timer"><linktext>flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer"><apiName>timer</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关 timer 事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>TimerEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关 <codeph>timer</codeph> 事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 TimerEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 TimerEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 TimerEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 TimerEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 TimerEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 TimerEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[TimerEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>]</codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	如果已修改显示列表，则将指示 Flash Player 或 AIR 运行时在此事件处理完成后呈现结果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	如果已修改显示列表，则将指示<ph platform="actionscript"> Flash Player 或</ph> AIR 运行时在此事件处理完成后呈现结果。
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as"> 下面是 <codeph>TimerEvent.updateAfterEvent()</codeph> 方法的示例。   
<codeblock>
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER"><apiName>TIMER</apiName><shortdesc>
    定义 timer 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timer</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>timer</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已达到其间隔的 Timer 对象。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE"><apiName>TIMER_COMPLETE</apiName><shortdesc>
    定义 timerComplete 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timerComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>timerComplete</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已完成其请求的 Timer 对象。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
如果发生错误并导致发送或加载操作失败，将分派 IOErrorEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>IOErrorEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
如果发生错误并导致发送或加载操作失败，将分派 IOErrorEvent 对象。

<p>您可以通过使用 Flash Player 的调试版或 AIR Debug Launcher (ADL) 来检查没有任何侦听器的 error 事件。显示由 IOErrorEvent 构造函数的 <codeph>text</codeph> 参数定义的字符串。只有一种类型的输入/输出错误事件：<codeph>IOErrorEvent.IO_ERROR</codeph>。 </p>

</apiDesc><example conref="examples\IOErrorEventExample.as"> 以下示例使用 <codeph>IOErrorEventExample</codeph> 类说明在试图加载不存在的文件时如何分派错误事件对象。该示例执行下列任务：
 <ol>
    <li>类构造函数创建 URLLoader 对象的新实例并将其分配给变量 <codeph>loader</codeph>。</li>
    <li>URLLoader 实例对 <codeph>ioError</codeph> 类型的事件侦听器进行实例化，该侦听器具有关联的订阅者方法 <codeph>ioErrorHandler()</codeph>，这样可以使用 <codeph>trace()</codeph> 只输出有关该事件的信息。</li>
    <li>接下来，构造函数创建 URLRequest 对象的新实例 <codeph>request</codeph>，传递 <codeph>MissingFile.xml</codeph>，这样便可知道缺少的文件的名称和位置。</li>
    <li>然后，<codeph>request</codeph> 变量被传递给 <codeph>loader.load()</codeph>，它将尝试加载缺少的文件。由于缺少文件，事件处理函数将分派 <codeph>ioError</codeph> 事件。</li>
 </ol>
 
 <p> <b>注意：</b>
 <ul>
     <li>您需要将“本地回放安全性”设置为“只访问本地文件”来编译 SWF 文件。</li>
     <li>确保在与 SWF 文件相同的级别没有名为“MissingFile.xml”的文件。 </li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关 ioError 事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的输入/输出错误事件：<codeph>IOErrorEvent.IO_ERROR</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>要显示为错误消息的文本。事件侦听器可以通过 <codeph>text</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>与特定错误关联的引用编号（仅在 Adobe AIR 中支持）。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>IOErrorEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关 <codeph>ioError</codeph> 事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 IOErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 IOErrorEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 IOErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 IOErrorEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 IOErrorEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 IOErrorEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[IOErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc>
	定义 ioError 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>ioError</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>errorID</codeph></entry><entry>与特定错误关联的引用编号（仅限 AIR）。</entry></row><row><entry><codeph>target</codeph></entry><entry>发生输入/输出错误的网络对象。</entry></row><row><entry><codeph>text</codeph></entry><entry>要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
NetConnection、NetStream 或 SharedObject 对象报告其状态时，将分派 NetStatusEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>NetStatusEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
NetConnection、NetStream 或 SharedObject 对象报告其状态时，将分派 NetStatusEvent 对象。只有一种类型的状态事件：<codeph>NetStatusEvent.NET_STATUS</codeph>。

</apiDesc><example conref="examples\NetStatusEventExample.as"> 以下示例将 Video 对象与 NetConnection 和 NetStream 类一同使用，以加载和播放 FLV 文件。
 <p>在此示例中，<codeph>netStatusHandler</codeph> 方法作为 NetStatusEvent 事件 <codeph>NetConnection.netStatus</codeph> 的侦听器进行注册。当确定了 <codeph>NetConnection.connect()</codeph> 尝试的状态（成功或失败）时，<codeph>netStatus</codeph> 事件触发此方法。如果连接 NetConnection 对象的尝试取得成功（也就是说，如果 NetStatusEvent 对象的 <codeph>info</codeph> 属性由 <codeph>netStatus</codeph> 事件分派，并有一个表示成功的 <codeph>code</codeph> 属性），则代码创建 Video 和 NetStream 对象并调用 <codeph>Video.attachNetStream()</codeph> 和 <codeph>NetStream.play()</codeph> 方法。</p>
 
 <p><b>注意：</b>为了运行此示例，需要一个名称和位置与传递给 <codeph>videoURL</codeph> 的变量相匹配的 FLV 文件；在本例中，使用 SWF 文件所在目录下的一个名为 Video.flv 的 FLV 文件。</p>
<codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject"><linktext>flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus"><apiName>netStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关 netStatus 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的状态事件：<codeph>NetStatusEvent.NET_STATUS</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象，包含描述其状态的属性。事件侦听器可以通过 <codeph>info</codeph> 属性访问此对象。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>NetStatusEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关 <codeph>netStatus</codeph> 事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 NetStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 NetStatusEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 NetStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 NetStatusEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 NetStatusEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 NetStatusEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[NetStatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> info=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS"><apiName>NET_STATUS</apiName><shortdesc>
    定义 netStatus 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>netStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>netStatus</codeph> 事件对象的 <codeph>type</codeph> 属性值。
  	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>info</codeph></entry><entry>一个对象，具有描述对象的状态或错误条件的属性。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告其状态的 NetConnection 或 NetStream 对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get"><apiName>info</apiName><shortdesc>
	 一个对象，具有描述对象的状态或错误条件的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 一个对象，具有描述对象的状态或错误条件的属性。
	 
	 <p>该信息对象可能具有 <codeph>code</codeph> 属性（它包含表示特定事件的字符串），或者具有 <codeph>level</codeph> 属性（它包含 <codeph>"status"</codeph> 或 <codeph>"error"</codeph> 字符串）。 </p>
	 
	 <p>该信息对象还可能具有其它属性。由于一些实现和服务器可能发送不同的对象，<codeph>code</codeph> 和 <codeph>level</codeph> 属性可能不起作用。 </p>
	 
	 <p>P2P 连接使用指示消息所属 <codeph>NetStream</codeph> 的信息对象中的 <codeph>stream</codeph> 参数，将消息发送给 <codeph>NetConnection</codeph>。<ph product="flex">例如，如果试图访问 <codeph>code</codeph> 或 <codeph>level</codeph> 属性，Flex Data Services 将发送引起强制错误的 Message 对象。</ph></p> 
	 
	 <p>下表说明了 <codeph>code</codeph> 和 <codeph>level</codeph> 属性可能的字符串值。</p>
 <adobetable class="innertable">
  
 
 

  
   
  
  
    
  
  
  
  
  
  
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<tgroup cols="3"><thead><row><entry>代码属性</entry><entry>级别属性</entry><entry>意义</entry></row></thead><tbody><row>
     <entry><codeph>"NetStream.Buffer.Empty"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>数据的接收速度不足以填充缓冲区。数据流将在缓冲区重新填充前中断，此时将发送 <codeph>NetStream.Buffer.Full</codeph> 消息，并且该流将重新开始播放。</entry>
 </row><row>
     <entry><codeph>"NetStream.Buffer.Full"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>缓冲区已满并且流将开始播放。</entry>
</row><row>
    <entry><codeph>"NetStream.Buffer.Flush"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>数据已完成流式处理，剩余的缓冲区将被清空。</entry>
  </row><row>
    <entry><codeph>"NetStream.Failed"</codeph> </entry>
    <entry>"error"</entry>
    <entry>仅限 Flash Media Server。发生了错误，在其它事件代码中没有列出此错误的原因。
    </entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>已经成功发布。</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.BadName"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>试图发布已经被他人发布的流。</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Idle"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>流发布者空闲而没有在传输数据。</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpublish.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>已成功执行取消发布操作。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>播放已开始。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>播放已结束。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>出于此表中列出的原因之外的某一原因（例如订阅者没有读取权限），播放发生了错误。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.StreamNotFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>无法找到传递给 <codeph>play()</codeph> 方法的 FLV。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Reset"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>由播放列表重置导致。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.PublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>到流的初始发布被发送到所有的订阅者。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.UnpublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>从流取消的发布被发送到所有的订阅者。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.InsufficientBW"</codeph> </entry>
    <entry>"warning"</entry>
    <entry>仅限 Flash Media Server。客户端没有足够的带宽，无法以正常速度播放数据。 </entry>
  </row><row>
    <entry><codeph>“NetStream.Play.FileStructureInvalid”</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>应用程序检测到无效的文件结构并且将不会尝试播放这种类型的文件。用于 AIR 和 Flash Player 9.0.115.0 及更高版本。</entry>
  </row><row>
    <entry><codeph>“NetStream.Play.NoSupportedTrackFound”</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>应用程序未检测到任何支持的音轨（视频、音频或数据）并且将不会尝试播放该文件。用于 AIR 和 Flash Player 9.0.115.0 及更高版本。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>仅限 Flash Media Server。由位速率流切换而导致的到其它位置的流过渡。此代码指示用于启动流切换的 <codeph>NetStream.play2()</codeph> 调用的成功状态事件。如果切换失败，则服务器将改为发送 <codeph>NetStream.Play.Failed</codeph> 事件。用于 Flash Player 10 及更高版本。</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>仅限 Flash Media Server 3.5 和更高版本。服务器收到因位速率流切换而需要过渡到其它流的命令。此代码指示用于启动流切换的 <codeph>NetStream.play2()</codeph> 调用的成功状态事件。如果切换失败，则服务器将改为发送 <codeph>NetStream.Play.Failed</codeph> 事件。当发生流切换时，将分派带有代码“NetStream.Play.TransitionComplete”的 <codeph>onPlayStatus</codeph> 事件。用于 Flash Player 10 及更高版本。</entry>
  </row><row>
    <entry><codeph>"NetStream.Pause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>流已暂停。</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>流已恢复。</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>录制已开始。</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.NoAccess"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>试图录制仍处于播放状态的流或客户端没有访问权限的流。</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>录制已停止。</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>尝试录制流失败。</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>搜索失败，如果流处于不可搜索状态，则会发生搜索失败。</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.InvalidTime"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>对于使用渐进式下载方式下载的视频，用户已尝试跳过到目前为止已下载的视频数据的结尾或在整个文件已下载后跳过视频的结尾进行搜寻或播放。<codeph>message.details</codeph> 属性包含一个时间代码，该代码指出用户可以搜寻的最后一个有效位置。</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>搜寻操作完成。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.BadVersion"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>以不能识别的格式编码的数据包。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry><codeph>NetConnection.call</codeph> 方法无法调用服务器端的方法或命令。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Prohibited"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Action Message Format (AMF) 操作因安全原因而被阻止。AMF URL 与文件（其中包含调用 <codeph>NetConnection.call()</codeph> 方法的代码）不在同一个域中，或者 AMF 服务器没有信任文件（其中包含调用 <codeph>NetConnection.call()</codeph> 方法的代码）所在域的策略文件。 
	</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>成功关闭连接。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>连接尝试失败。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>连接尝试成功。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>连接尝试没有访问应用程序的权限。</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>成功关闭 P2P 连接。<codeph>info.stream</codeph> 属性指示已关闭的流。</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>P2P 连接尝试失败。<codeph>info.stream</codeph> 属性指示已失败的流。</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>P2P 连接尝试成功。<codeph>info.stream</codeph> 属性指示已成功的流。</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>P2P 连接尝试没有访问另一个对等方的权限。<codeph>info.stream</codeph> 属性指示被拒绝的流。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.AppShutdown"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>正在关闭指定的应用程序。</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.InvalidApp"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>连接时指定的应用程序名无效。</entry>
  </row><row>
    <entry><codeph>"SharedObject.Flush.Success"</codeph></entry>
  	<entry><codeph>"status"</codeph></entry>
  	<entry>“待定”状态已解析并且 <codeph>SharedObject.flush()</codeph> 调用成功。</entry>
  </row><row> 
    <entry><codeph>"SharedObject.Flush.Failed"</codeph></entry>
 	<entry><codeph>"error"</codeph></entry>
  	<entry>“待定”状态已解析，但 <codeph>SharedObject.flush()</codeph> 失败。</entry>
  </row><row>
    <entry><codeph>"SharedObject.BadPersistence"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>使用永久性标志对共享对象进行了请求，但请求无法被批准，因为已经使用其它标记创建了该对象。</entry> 
  </row><row>
    <entry><codeph>"SharedObject.UriMismatch"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>试图连接到拥有与共享对象不同的 URI (URL) 的 NetConnection 对象。</entry> 
</row></tbody></tgroup></adobetable>
	<p>如果您不断地看到有关缓冲区的错误，则请尝试使用 <codeph>NetStream.bufferTime</codeph> 属性更改缓冲区。</p>

	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection 类</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream 类</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
 每次发生鼠标事件时，都会将 MouseEvent 对象分派到事件流中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Mouse 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 每次发生鼠标事件时，都会将 MouseEvent 对象分派到事件流中。鼠标事件通常由使用指针的用户输入设备（如鼠标或轨迹球）生成。 
 
 <p>当包含嵌套节点时，鼠标事件指向在显示列表中可见的最深的可能嵌套节点。此节点称为<i>目标节点</i>。要让目标节点的始祖接收鼠标事件的通知，请使用始祖节点上其 <codeph>type</codeph> 参数设置为您要检测的特定鼠标事件的 <codeph>EventDispatcher.addEventListener()</codeph>。</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as"> 以下示例使用 <codeph>MouseEventExample</codeph> 和 <codeph>ChildSprite</codeph> 类来说明如何使用简单图像分派鼠标事件。本示例将执行以下任务：
 <ol>
    <li>本示例声明了有关大小（100 x 100 像素）和背景颜色（橙色）的属性，以便在稍后绘制正方形时使用。</li>
     <li>构造函数创建新的 ChildSprite 对象 <codeph>child</codeph>。其构造函数首先通过调用其 <codeph>draw()</codeph> 方法在坐标 (0,0) 处绘制一个 100 x 100 像素的橙色正方形，然后添加七个事件侦听器/订阅者。
     <ul>
         <li><codeph>click</codeph> / <codeph>clickHandler()</codeph>：当用户用鼠标左键在正方形上单击时分派。</li>
         <li><codeph>doubleClick</codeph> / <codeph>doubleClickHandler()</codeph>：当用户在正方形上双击鼠标左键时分派。</li>
         <li><codeph>mouseDown</codeph> / <codeph>mouseDownHandler()</codeph>：当单击 ChildSprite 对象（橙色正方形）时，会在屏幕上输出 <codeph>trace()</codeph> 消息，然后调用 <codeph>ChildSprite.draw()</codeph>，这样就会在 <codeph>mouseOverHandler()</codeph> 中绘制一个代替浅蓝色正方形的深黄色正方形。<codeph>mouseDownHandler()</codeph> 方法还添加一个 <codeph>mouseMove</codeph> 事件侦听器和 <codeph>mouseMoveHandler()</codeph> 订阅者（如下所述），以处理鼠标的移动。然后调用 <codeph>startDrag()</codeph> 方法，此方法允许拖动 Sprite 对象。</li>
         <li><codeph>mouseOut</codeph> / <codeph>mouseOutHandler()</codeph>：每次指针离开正方形区域时分派。调用 <codeph>draw()</codeph> 方法以将正方形恢复为其正常大小和颜色。</li>
         <li><codeph>mouseOver</codeph>/<codeph>mouseOverHandler()</codeph>：当鼠标指针位于正方形上方时分派。此方法可以重绘正方形，以使正方形更大并且其背景颜色为深黄色。</li>
         <li><codeph>mouseUp</codeph> / <codeph>mouseUpHandler()</codeph>：当用户释放鼠标按键时，将删除 <codeph>mouseMove</codeph> 事件侦听器并调用 <codeph>stopDrag</codeph>，这样就会冻结当前位置的正方形。</li> 
      <li><codeph>mouseMove</codeph>/<codeph>mouseMoveHandler()</codeph>：作为 <codeph>mouseDownHandler()</codeph> 函数的一部分进行调用，在用户按住鼠标左键并拖动正方形时分派。</li>
         <li><codeph>mouseWheel</codeph> / <codeph>mouseWheelHandler()</codeph>：当用户在正方形上方滚动鼠标滚轮时分派。</li>
 </ul></li>
    <li>然后 ChildSprite 实例 <codeph>child</codeph> 通过 <codeph>addChild()</codeph>（立即绘制橙色正方形）添加到显示列表中。</li>
 </ol> 
 
 <p><b>注意：</b></p>
 <ul>
     <li><codeph>MouseEventExample</codeph> 类应为文档根。</li>
    <li>前面列出的某些事件方法声明了局部变量 <codeph>sprite</codeph>，它用于 <codeph>event.target</codeph> 到类型 Sprite 的强制转换。</li>
 </ul>
<codeblock>
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu"><apiName>contextMenu</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick"><apiName>doubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick"><apiName>middleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown"><apiName>middleMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp"><apiName>middleMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> 下面的示例是一个简单的绘图程序。用户可以在主 Sprite 对象上或在较小的矩形 Sprite 对象上进行绘制。 
   
 <p>在构造函数中, 创建了一个矩形 <codeph>innerRect</codeph> Sprite 对象并将线条样式设置为绿色。用于在 <codeph>MouseEvent_MOUSE_MOVEExample</codeph> Sprite 容器上进行绘制的线条样式设置为红色。为应用程序的主 Sprite 对象和 <codeph>innerRect</codeph> Sprite 对象添加侦听 <codeph>MouseEvent.MOUSE_UP</codeph> 和 <codeph>MouseEvent.MOUSE_DOWN</codeph> 事件的独立事件侦听器。在这两种情况下，鼠标按下事件侦听器方法将当前绘画位置移动到鼠标指针的位置并为 <codeph>MouseEvent.MOUSE_MOVE</codeph> 事件添加一个侦听器。移动鼠标指针时，调用的事件侦听器方法将跟随指针并使用 <codeph>graphics.LineTo()</codeph> 方法绘制一条直线。（<b>注意：</b><codeph>innerRect</codeph> Sprite 对象将会遮住矩形后面绘制的主 Sprite 对象的红色直线。）在发生 <codeph>MouseEvent.MOUSE_UP</codeph> 事件时，将删除 <codeph>MOUSE_MOVE</codeph> 事件的侦听器并停止绘画。</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut"><apiName>mouseOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver"><apiName>mouseOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel"><apiName>mouseWheel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown"><apiName>RightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut"><apiName>rollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver"><apiName>rollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
     创建一个 Event 对象，其中包含有关鼠标事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：<codeph>MouseEvent.CLICK</codeph>、<codeph>MouseEvent.DOUBLE_CLICK</codeph>、<codeph>MouseEvent.MOUSE_DOWN</codeph>、<codeph>MouseEvent.MOUSE_MOVE</codeph>、<codeph>MouseEvent.MOUSE_OUT</codeph>、<codeph>MouseEvent.MOUSE_OVER</codeph>、<codeph>MouseEvent.MOUSE_UP</codeph>、<codeph>MouseEvent.MIDDLE_CLICK</codeph>、<codeph>MouseEvent.MIDDLE_MOUSE_DOWN</codeph>、<codeph>MouseEvent.MIDDLE_MOUSE_UP</codeph>、<codeph>MouseEvent.RIGHT_CLICK</codeph>、<codeph>MouseEvent.RIGHT_MOUSE_DOWN</codeph>、<codeph>MouseEvent.RIGHT_MOUSE_UP</codeph>、<codeph>MouseEvent.MOUSE_WHEEL</codeph>、<codeph>MouseEvent.ROLL_OUT</codeph> 和 <codeph>MouseEvent.ROLL_OVER</codeph>。 
	 
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
	 </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>事件发生点相对于所属 Sprite 的水平坐标。
	 </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>事件发生点相对于所属 Sprite 的垂直坐标。
	 </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>受事件影响的补充 InteractiveObject 实例。例如，发生 <codeph>mouseOut</codeph> 事件时，<codeph>relatedObject</codeph> 表示指针设备当前所指向的显示列表对象。
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>在 Windows 或 Linux 中，指示是否已激活 Ctrl 键。在 Mac 中，指示是否已激活 Ctrl 键或 Command 键。
     </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Alt 键（仅限 Windows 或 Linux）。
	 </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Shift 键。
	 </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否按下了鼠标主按键。
	 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>指示用户将鼠标滚轮每滚动一个单位应滚动多少行。正 delta 值指示向上滚动；负值指示向下滚动。通常所设的值为 1 到 3；值越大，滚动得越快。此参数仅用于 <codeph>MouseEvent.mouseWheel</codeph> 事件。
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>（仅 AIR）指示 Command 键是否已激活（仅限 Mac）。此参数仅用于 <codeph>MouseEvent.click</codeph>、<codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleClick</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightClick</codeph>、<codeph>MouseEvent.rightMouseDown</codeph>、<codeph>MouseEvent.rightMouseUp</codeph> 和 <codeph>MouseEvent.doubleClick</codeph> 事件。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>（仅 AIR）指示 Control 或 Ctrl 键是否已激活。此参数仅用于 <codeph>MouseEvent.click</codeph>、<codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleClick</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightClick</codeph>、<codeph>MouseEvent.rightMouseDown</codeph>、<codeph>MouseEvent.rightMouseUp</codeph> 和 <codeph>MouseEvent.doubleClick</codeph> 事件。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam><apiItemName>clickCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>（仅 AIR）指示鼠标事件是否为多击序列的一部分。对于除 <codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightMouseDown</codeph> 和 <codeph>MouseEvent.rightMouseUp</codeph> 以外的所有鼠标事件，此参数将为零。使用 <codeph>clickCount</codeph> 参数可以侦听单击、双击或任何多击序列。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>MouseEvent 对象的构造函数。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     创建一个 Event 对象，其中包含有关鼠标事件的信息。将 Event 对象作为参数传递给事件侦听器。
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 MouseEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新的 MouseEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 MouseEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 MouseEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 MouseEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 MouseEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[MouseEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... delta=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	如果已修改显示列表，则将指示 Flash Player 或 Adobe AIR 在此事件处理完成后呈现结果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	如果已修改显示列表，则将指示 Flash Player 或 Adobe AIR 在此事件处理完成后呈现结果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	定义 click 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>click</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU"><apiName>CONTEXT_MENU</apiName><shortdesc>
	MouseEvent.CONTEXT_MENU 常量定义 contextMenu 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contextMenu</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>MouseEvent.CONTEXT_MENU</codeph> 常量定义 <codeph>contextMenu</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标右键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK"><apiName>DOUBLE_CLICK</apiName><shortdesc>
	定义 doubleClick 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>doubleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>doubleClick</codeph> 事件对象的 <codeph>type</codeph> 属性值。对象的 <codeph>doubleClickEnabled</codeph> 属性必须为 <codeph>true</codeph> 以生成 <codeph>doubleClick</codeph> 事件。
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK"><apiName>MIDDLE_CLICK</apiName><shortdesc>
	定义 middleClick 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>middleClick</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN"><apiName>MIDDLE_MOUSE_DOWN</apiName><shortdesc>
	定义 middleMouseDown 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>middleMouseDown</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标中键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP"><apiName>MIDDLE_MOUSE_UP</apiName><shortdesc>
	定义 middleMouseUp 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>middleMouseUp</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标中键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	定义 mouseDown 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseDown</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>有关如何使用此常量的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 常量的示例。 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
	定义 mouseMove 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseMove</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> 下面的示例是一个简单的绘图程序。用户可以在主 Sprite 对象上或在较小的矩形 Sprite 对象上进行绘制。 
   
 <p>在构造函数中, 创建了一个矩形 <codeph>innerRect</codeph> Sprite 对象并将线条样式设置为绿色。用于在 <codeph>MouseEvent_MOUSE_MOVEExample</codeph> Sprite 容器上进行绘制的线条样式设置为红色。为应用程序的主 Sprite 对象和 <codeph>innerRect</codeph> Sprite 对象添加侦听 <codeph>MouseEvent.MOUSE_UP</codeph> 和 <codeph>MouseEvent.MOUSE_DOWN</codeph> 事件的独立事件侦听器。在这两种情况下，鼠标按下事件侦听器方法将当前绘画位置移动到鼠标指针的位置并为 <codeph>MouseEvent.MOUSE_MOVE</codeph> 事件添加一个侦听器。移动鼠标指针时，调用的事件侦听器方法将跟随指针并使用 <codeph>graphics.LineTo()</codeph> 方法绘制一条直线。（<b>注意：</b><codeph>innerRect</codeph> Sprite 对象将会遮住矩形后面绘制的主 Sprite 对象的红色直线。）在发生 <codeph>MouseEvent.MOUSE_UP</codeph> 事件时，将删除 <codeph>MOUSE_MOVE</codeph> 事件的侦听器并停止绘画。</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT"><apiName>MOUSE_OUT</apiName><shortdesc>
	定义 mouseOut 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseOut</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>指针设备现在指向的显示列表对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER"><apiName>MOUSE_OVER</apiName><shortdesc>
	定义 mouseOver 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseOver</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>指针设备指向的显示列表对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	定义 mouseUp 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseUp</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>有关如何使用此常量的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 常量的示例。 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL"><apiName>MOUSE_WHEEL</apiName><shortdesc>
	定义 mouseWheel 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseWheel</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>delta</codeph></entry><entry>鼠标滚轮上的每个刻度表示的行数。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	定义 rightClick 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>rightClick</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	定义 rightMouseDown 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>rightMouseDown</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	定义 rightMouseUp 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>rightMouseUp</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标右键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>鼠标单击次数，指示该事件是否为多击序列的一部分。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
	定义 rollOut 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>rollOut</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>指针设备现在指向的显示列表对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
	定义 rollOver 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>rollOver</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry>如果 Alt 键处于活动状态，则为 <codeph>true</codeph>（Windows 或 Linux）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>指针设备指向的显示列表对象。</entry></row><row><entry><codeph>localX</codeph></entry><entry>事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row><entry><codeph>localY</codeph></entry><entry>事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>stageX</codeph></entry><entry>事件发生点在全局舞台坐标中的水平坐标。</entry></row><row><entry><codeph>stageY</codeph></entry><entry>事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
    指示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    指示 Alt 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)。仅 Windows 和 Linux 操作系统支持。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get"><apiName>buttonDown</apiName><shortdesc>
	指示鼠标主按键是已按下 (true) 还是未按下 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示鼠标主按键是已按下 (<codeph>true</codeph>) 还是未按下 (<codeph>false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get"><apiName>clickCount</apiName><shortdesc>
	指示鼠标按下事件是否为多击序列的一部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	指示鼠标按下事件是否为多击序列的一部分。对于除 <codeph>MouseEvent.mouseDown</codeph>、<codeph>MouseEvent.mouseUp</codeph>、<codeph>MouseEvent.middleMouseDown</codeph>、<codeph>MouseEvent.middleMouseUp</codeph>、<codeph>MouseEvent.rightMouseDown</codeph> 和 <codeph>MouseEvent.rightMouseUp</codeph> 以外的所有鼠标事件，此参数将为零。使用 <codeph>clickCount</codeph> 参数可以侦听单击、双击或任何多击序列。例如，初始 <codeph>MouseEvent.mouseDown</codeph> 和 <codeph>MouseEvent.mouseUp</codeph> 的 <codeph>clickCount</codeph> 为 1，双击序列中的第二个 <codeph>MouseEvent.mouseDown</codeph> 和 <codeph>MouseEvent.mouseUp</codeph> 的 <codeph>clickCount</codeph> 为 2。如果充分地移动鼠标或多击序列由于某种原因中断，则下一个 <codeph>MouseEvent.mouseDown</codeph> 的 clickCount 将为 1。doubleClick 事件将会继续正常触发。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	指示是否已激活 Command 键（仅限 Mac）。commandKey 属性的值将与 Mac 中 ctrlKey 属性的值相同。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示是否已激活 Command 键（仅限 Mac）。 
	
	<p><codeph>commandKey</codeph> 属性的值将与 Mac 中 <codeph>ctrlKey</codeph> 属性的值相同。在 Windows 或 Linux 中始终为 false。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	指示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	在 Windows 或 Linux 中，指示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	在 Windows 或 Linux 中，指示 Ctrl 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)。在 Macintosh 中，指示是否已激活 Control 键或 Command 键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get"><apiName>delta</apiName><shortdesc>
	指示用户将鼠标滚轮每滚动一个单位应滚动多少行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	指示用户将鼠标滚轮每滚动一个单位应滚动多少行。正 delta 值指示向上滚动；负值指示向下滚动。通常所设的值为 1 到 3；值越大，滚动得越快。此设置取决于设备和操作系统，并且通常可由用户配置。此属性仅应用于 <codeph>MouseEvent.mouseWheel</codeph> 事件。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 如果为 true，则 relatedObject 属性是出于与安全沙箱相关的原因而设置为 null 的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 如果为 <codeph>true</codeph>，则 <codeph>relatedObject</codeph> 属性是出于与安全沙箱相关的原因而设置为 <codeph>null</codeph> 的。如果 <codeph>relatedObject</codeph> 的标称值是对其它沙箱中的 DisplayObject 的引用，则 <codeph>relatedObject</codeph> 将设置为 <codeph>null</codeph>，除非具有双向跨越此沙箱边界的权限。通过以下方式确立权限：从 SWF 文件调用 <codeph>Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，然后在加载图像时设置 <codeph>LoaderContext.checkPolicyFile</codeph> 属性。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/relatedObject"><linktext>MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get"><apiName>localX</apiName><shortdesc>
	事件发生点相对于所属 Sprite 的水平坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	事件发生点相对于所属 Sprite 的水平坐标。
	
	</apiDesc><example>有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 常量的示例。
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get"><apiName>localY</apiName><shortdesc>
	事件发生点相对于所属 Sprite 的垂直坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	事件发生点相对于所属 Sprite 的垂直坐标。
	
	</apiDesc><example>有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 常量的示例。
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	对与事件相关的显示列表对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	对与事件相关的显示列表对象的引用。例如，发生 <codeph>mouseOut</codeph> 事件时，<codeph>relatedObject</codeph> 表示指针设备当前所指向的显示列表对象。此属性应用于 <codeph>mouseOut</codeph>、<codeph>mouseOver</codeph>、<codeph>rollOut</codeph> 和 <codeph>rollOver</codeph> 事件。
	<p>在以下两种情况下，此属性的值可以为 <codeph>null</codeph>：不存在任何相关对象；存在相关对象，但该对象位于您无法访问的安全沙箱中。使用 <codeph>isRelatedObjectInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible"><linktext>MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	指示 Shift 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示 Shift 键是处于活动状态 (<codeph>true</codeph>) 还是非活动状态 (<codeph>false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get"><apiName>stageX</apiName><shortdesc>
	事件发生点在全局舞台坐标中的水平坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	事件发生点在全局舞台坐标中的水平坐标。当设置 <codeph>localX</codeph> 属性时会计算此属性。
	
	</apiDesc><example>有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 常量的示例。 
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get"><apiName>stageY</apiName><shortdesc>
	事件发生点在全局舞台坐标中的垂直坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	事件发生点在全局舞台坐标中的垂直坐标。当设置 <codeph>localY</codeph> 属性时会计算此属性。
	
	</apiDesc><example>有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> 常量的示例。
	</example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
	
	在使用数字权限管理 (DRM) 加密保护的内容成功开始播放时（在验证凭证以及在用户经过身份验证并获得查看内容的授权时），NetStream 对象将分派 DRMStatusEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>启用 DRM 的对象的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	
	在使用数字权限管理 (DRM) 加密保护的内容成功开始播放时（在验证凭证以及在用户经过身份验证并获得查看内容的授权时），NetStream 对象将分派 DRMStatusEvent 对象。DRMStatusEvent 对象包含与凭证有关的信息，如是否可以脱机使用该内容或凭证何时过期而无法再查询该内容。应用程序可以使用此数据来通知用户其策略和权限状态。
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS"><linktext>DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
 	    创建一个 Event 对象，其中包含有关 DRM 状态事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent, constructor
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 DRMAuthenticate 事件：<codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>。
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam><apiItemName>inPolicies</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>包含自定义 DRM 属性的自定义对象。  		
		</apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Event 的上下文。  		
		</apiDesc></apiParam><apiParam><apiItemName>inAvailableOffline</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否可以脱机查看内容。
		</apiDesc></apiParam><apiParam><apiItemName>inAnonymous</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示匿名用户是否可以访问该内容。
		</apiDesc></apiParam><apiParam><apiItemName>inVoucherEndDate</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>内容凭证到期的日期，表示为纪元值。
		</apiDesc></apiParam><apiParam><apiItemName>inOfflineLeasePeriod</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>用户可以脱机查看内容的剩余天数。
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inVoucher</apiItemName><apiOperationClassifier>flash.net.drm:DRMVoucher</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inLocal</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
 	    创建一个 Event 对象，其中包含有关 DRM 状态事件的特定信息。将 Event 对象作为参数传递给事件侦听器。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone"><apiName>clone</apiName><shortdesc>
		创建 DRMStatusEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 DRMStatusEvent 对象。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		创建 DRMStatusEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString"><apiName>toString</apiName><shortdesc>
		返回一个字符串，其中包含 DRMStatusEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 DRMStatusEvent 对象的所有属性。
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		返回一个字符串，其中包含 DRMStatusEvent 对象的所有属性。 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS"><apiName>DRM_STATUS</apiName><shortdesc>
		DRMStatusEvent.DRM_STATUS 常量定义 drmStatus 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMStatusEvent.DRM_STATUS</codeph> 常量定义 <codeph>drmStatus</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
		
		
		<p>此事件具有以下属性：</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>detail</codeph></entry><entry>说明状态事件上下文的字符串。</entry></row><row><entry><codeph>isAnonymous</codeph></entry><entry>指示使用 DRM 加密保护的内容是否可用而不需要用户提供身份验证凭据。</entry></row><row><entry><codeph>isAvailableOffline</codeph></entry><entry>指示使用 DRM 加密保护的内容是否可脱机使用。</entry></row><row><entry><codeph>offlineLeasePeriod</codeph></entry><entry>可以脱机查看内容的剩余天数。</entry></row><row><entry><codeph>policies</codeph></entry><entry>DRM 状态事件的自定义对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream 对象。</entry></row><row><entry><codeph>voucherEndDate</codeph></entry><entry>凭证的绝对到期日期，此后，用户将无法再查看该内容</entry></row><row><entry><codeph>contentData</codeph></entry><entry>内容的 DRMContentData</entry></row><row><entry><codeph>voucher</codeph></entry><entry>内容的 DRMVoucher 对象。</entry></row><row><entry><codeph>isLocal</codeph></entry><entry>指示内容是否存储在本地文件系统上</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get"><apiName>detail</apiName><shortdesc>
		说明状态事件上下文的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		说明状态事件上下文的字符串。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get"><apiName>isAnonymous</apiName><shortdesc>
		指示使用数字权限管理 (DRM) 加密保护的内容是否可用而不需要用户提供身份验证凭据，如果是，则值为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		指示使用数字权限管理 (DRM) 加密保护的内容是否可用而不需要用户提供身份验证凭据，如果是，则值为 <codeph>true</codeph>。否则，值为 <codeph>false</codeph>，用户必须提供与内容提供程序已知并所需的用户名和密码相匹配的用户名和密码。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get"><apiName>isAvailableOffline</apiName><shortdesc>
		指示使用数字权限管理 (DRM) 加密保护的内容是否可脱机使用，如果是，则值为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		指示使用数字权限管理 (DRM) 加密保护的内容是否可脱机使用，如果是，则值为 <codeph>true</codeph>。否则，值为 <codeph>false</codeph>。
		<p>
		为了使数字保护的内容可脱机使用，必须将其凭证缓存到用户的本地计算机中。（应用程序决定内容的本地存储位置，以使内容可脱机使用。）
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get"><apiName>offlineLeasePeriod</apiName><shortdesc>
		可以脱机查看内容的剩余天数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		可以脱机查看内容的剩余天数。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get"><apiName>policies</apiName><shortdesc>
		DRM 状态事件的自定义对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		DRM 状态事件的自定义对象。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get"><apiName>voucherEndDate</apiName><shortdesc>
		凭证的绝对到期日期，此后，用户将无法再查看该内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
		凭证的绝对到期日期，此后，用户将无法再查看该内容。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 DRMContentData 对象包含获取凭证所需的信息，在查看受 DRM 保护的内容时需要该凭证。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 DRMContentData 对象包含获取凭证所需的信息，在查看受 DRM 保护的内容时需要该凭证。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:set"><apiName>isLocal</apiName><shortdesc>
		 指示凭证是否缓存到本地凭证存储区中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 指示凭证是否缓存到本地凭证存储区中。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:set"><apiName>voucher</apiName><shortdesc>
		 内容的 DRMVoucher 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc>
		 内容的 DRMVoucher 对象。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	在从本机异步代码中引发异常时（例如，可能从 LocalConnection、NetConnection、SharedObject 或 NetStream 引发），对象将分派 AsyncErrorEvent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>AsyncErrorEvent 事件的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	在从本机异步代码中引发异常时（例如，可能从 LocalConnection、NetConnection、<ph platform="actionscript">SharedObject</ph> 或 NetStream 引发），对象将分派 AsyncErrorEvent。只有一种类型的异步错误事件：<codeph>AsyncErrorEvent.ASYNC_ERROR</codeph>。
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR"><linktext>ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	创建 AsyncErrorEvent 对象，其中包含有关 asyncError 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 error 事件：<codeph>ErrorEvent.ERROR</codeph>。
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。<ph platform="javascript">此属性适用于 SWF 内容中使用 ActionScript 3.0 显示体系结构的显示对象。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>要显示为错误消息的文本。事件侦听器可以通过 <codeph>text</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier><apiData>null</apiData><apiDesc>发生的异常。如果 error 为非空值，则该事件的 <codeph>errorId</codeph> 属性将根据该错误的 <codeph>errorId</codeph> 属性设置。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>AsyncErrorEvent 对象的构造函数。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建 AsyncErrorEvent 对象，其中包含有关 asyncError 事件的信息。将 AsyncErrorEvent 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 AsyncErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 AsyncErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 AsyncErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 AsyncErrorEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 AsyncErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 AsyncErrorEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[AsyncErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... error=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR"><apiName>ASYNC_ERROR</apiName><shortdesc>
	AsyncErrorEvent.ASYNC_ERROR 常量定义 asyncError 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>asyncError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> 常数定义 <codeph>asyncError</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph><ph platform="javascript"> 此属性适用于 ActionScript 3.0 显示对象（在 SWF 文件中）。</ph></entry> </row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。<ph platform="javascript">此属性适用于 SWF 内容中使用 ActionScript 3.0 显示体系结构的显示对象。</ph></entry> </row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。<ph platform="javascript">此属性适用于 SWF 内容中使用 ActionScript 3.0 显示体系结构的显示对象。</ph></entry> </row><row><entry><codeph>target</codeph></entry> <entry>分派事件的对象。</entry> </row><row><entry><codeph>error</codeph></entry><entry>触发此事件的错误。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error"><apiName>error</apiName><shortdesc>
	引发的异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Error</apiValueClassifier></apiValueDef><apiDesc>
	引发的异常。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
 对象将在设备（如摄像头或麦克风）或对象（如 LocalConnection 对象）报告其状态时分派 StatusEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>StatusEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 对象将在设备（如摄像头或麦克风）或对象（如 LocalConnection 对象）报告其状态时分派 StatusEvent 对象。只有一种类型的状态事件：<codeph>StatusEvent.STATUS</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link><link href="air.net.xml#ServiceMonitor"><linktext>air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
	 创建一个 Event 对象，其中包含有关状态事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的状态事件：<codeph>StatusEvent.STATUS</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>对象状态的描述。事件侦听器可以通过 <codeph>code</codeph> 属性访问此信息。
	 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>消息类别，例如 <codeph>"status"</codeph>、<codeph>"warning"</codeph> 或 <codeph>"error"</codeph>。事件侦听器可以通过 <codeph>level</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>StatusEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 创建一个 Event 对象，其中包含有关状态事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#StatusEvent/STATUS"><linktext>STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone"><apiName>clone</apiName><shortdesc>
	 创建 StatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 StatusEvent 对象。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 创建 StatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString"><apiName>toString</apiName><shortdesc>
	 返回一个字符串，其中包含 StatusEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 StatusEvent 对象的所有属性。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 返回一个字符串，其中包含 StatusEvent 对象的所有属性。字符串的格式如下：
	 <p><codeph>[StatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> code=<i>value</i> level=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS"><apiName>STATUS</apiName><shortdesc>
     定义 status 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>status</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     定义 <codeph>status</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	 <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>code</codeph></entry><entry>对象状态的描述。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>level</codeph></entry><entry>消息类别，例如 <codeph>"status"</codeph>、<codeph>"warning"</codeph> 或 <codeph>"error"</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告其状态的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get"><apiName>code</apiName><shortdesc>
	 对象状态的描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 对象状态的描述。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get"><apiName>level</apiName><shortdesc>
 	 消息类别，例如，“status”、“warning”或“error”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 	 消息类别，例如 <codeph>"status"</codeph>、<codeph>"warning"</codeph> 或 <codeph>"error"</codeph>。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
	 调用 DRMManager 对象的 authenticate() 方法失败时，DRMManager 将分派 DRMAuthenticationErrorEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 调用 DRMManager 对象的 <codeph>authenticate()</codeph> 方法失败时，DRMManager 将分派 DRMAuthenticationErrorEvent 对象。
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
		 创建 DRMAuthenticationErrorEvent 对象的新实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件类型字符串
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>事件是否沿显示列表向上冒泡
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>是否可以取消事件
		 </apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>错误描述
		 </apiDesc></apiParam><apiParam><apiItemName>inErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>常规错误类型的 ID
		 </apiDesc></apiParam><apiParam><apiItemName>inSubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>指示其类型中特定错误的 ID
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>所登录服务器的 URL
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>所登录服务器上经过身份验证的域
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建 DRMAuthenticationErrorEvent 对象的新实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR"><apiName>AUTHENTICATION_ERROR</apiName><shortdesc>
		 添加和删除事件侦听器时 type 参数中对于身份验证错误事件使用的字符串常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>AuthenticationError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 添加和删除事件侦听器时 type 参数中对于身份验证错误事件使用的字符串常量。
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:set"><apiName>subErrorID</apiName><shortdesc>
		 更详细的错误代码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 更详细的错误代码。
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:IEventDispatcher"><apiName>IEventDispatcher</apiName><shortdesc>
IEventDispatcher 接口定义用于添加或删除事件侦听器的方法，检查是否已注册特定类型的事件侦听器，并分派事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
IEventDispatcher 接口定义用于添加或删除事件侦听器的方法，检查是否已注册特定类型的事件侦听器，并分派事件。

<p>事件目标是 Flash <sup>®</sup> Player 和 Adobe AIR 事件模型的重要组成部分。事件目标是事件如何通过显示列表层次结构这一问题的焦点。当发生鼠标单击或按键等事件时，会将事件对象分派到从显示列表根开始的事件流中。事件对象进行到事件目标的往返行程，在概念上，此往返行程被划分为三个阶段：捕获阶段包括从根到事件目标节点之前的最后一个节点的行程，目标阶段仅包括事件目标节点，冒泡阶段包括到显示列表的根的回程上遇到的任何后续节点。</p>

<p>通常，使用户定义的类能够分派事件的最简单方法是扩展 EventDispatcher。如果无法扩展（即，如果该类已经扩展了另一个类），则可以实现 IEventDispatcher 接口，创建 EventDispatcher 成员，并编写一些简单的挂钩，将调用连接到聚合的 EventDispatcher 中。</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as"> 以下示例使用 IEventDispatcherExample 和 DecoratedDispatcher 示例类来说明如何实现和使用 IEventDispatcher 类。本示例通过以与 EventDispatcher 相同的方式实现 DecoratedDispatcher 的每个方法来完成此任务。在 IEventDispatcherExample 的构造函数内，构造 DecoratedDispatcher 类的新实例（名为 <codeph>decorDispatcher</codeph>），并使用 <codeph>decorDispatcher</codeph> 变量和自定义事件 <codeph>doSomething</codeph> 来调用 <codeph>addEventListener()</codeph>，然后由 <codeph>didSomething()</codeph> 进行处理，它可以使用 <codeph>trace()</codeph> 输出一行文本。
<codeblock> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace(">> didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>处理事件的侦听器函数。此函数必须接受事件对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示：
	<p><codeph>function(evt:Event):void</codeph></p>
	函数可以有任何名称。
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定侦听器是运行于捕获阶段还是运行于目标和冒泡阶段。如果将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。如果 <codeph>useCapture</codeph> 为 <codeph>false</codeph>，则侦听器只在目标或冒泡阶段处理事件。要在所有三个阶段都侦听事件，请调用两次 <codeph>addEventListener()</codeph>，一次将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，第二次再将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>事件侦听器的优先级。优先级由一个 32 位整数指定。数字越大，优先级越高。优先级为 <i>n</i> 的所有侦听器会在优先级为 <i>n-1</i> 的侦听器之前处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。 
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定对侦听器的引用是强引用，还是弱引用。强引用（默认值）可防止您的侦听器被当作垃圾回收。弱引用则没有此作用。 <p>类级别成员函数不属于垃圾回收的对象，因此可以对类级别成员函数将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph> 而不会使它们受垃圾回收的影响。如果对作为嵌套内部函数的侦听器将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph>，则该函数将被作为垃圾回收并且不再是永久函数。如果创建对该内部函数的引用（将该函数保存到另一个变量中），则该函数将不作为垃圾回收并仍将保持永久。</p>
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。
	<p>成功注册一个事件侦听器后，无法通过额外调用 <codeph>addEventListener()</codeph> 来更改其优先级。要更改侦听器的优先级，必须先调用 <codeph>removeEventListener()</codeph>。然后，可以使用新的优先级再次注册该侦听器。</p>
	<p>注册该侦听器后，如果继续调用具有不同 <codeph>type</codeph> 或 <codeph>useCapture</codeph> 值的 <codeph>addEventListener()</codeph>，则会创建单独的侦听器注册。例如，如果首先注册 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph> 的侦听器，则该侦听器只在捕获阶段进行侦听。如果您使用同一个侦听器对象再次调用 <codeph>addEventListener()</codeph>，但 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>，则您将有两个单独的侦听器：一个在捕获阶段侦听，另一个在目标阶段和冒泡阶段侦听。</p>
	<p>不能只为目标阶段或冒泡阶段注册事件侦听器。这些阶段在注册期间是成对出现的，因为冒泡阶段只适用于目标节点的始祖。</p>
	<p>如果不再需要某个事件侦听器，可调用 <codeph>EventDispatcher.removeEventListener()</codeph> 删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。</p>
	<p>复制 EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。</p>
	<p>如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。</p>
	<p>如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	将事件分派到事件流中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>除非对事件调用 <codeph>preventDefault()</codeph>（在这种情况下，它返回 <codeph>false</codeph>），否则值为 <codeph>true</codeph>。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>分派到事件流中的事件对象。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	将事件分派到事件流中。事件目标是对其调用 <codeph>dispatchEvent()</codeph> 的 EventDispatcher 对象。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果指定类型的侦听器已注册，则值为 <codeph>true</codeph>；否则，值为 <codeph>false</codeph>。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 <codeph>IEventDispatcher.willTrigger()</codeph>。
	<p><codeph>hasEventListener()</codeph> 与 <codeph>willTrigger()</codeph> 的区别是：<codeph>hasEventListener()</codeph> 只检查它所属的对象，而 <codeph>willTrigger()</codeph> 检查整个事件流以查找由 <codeph>type</codeph> 参数指定的事件。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#IEventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	从 EventDispatcher 对象中删除侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>要删除的侦听器对象。
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指出是为捕获阶段还是为目标和冒泡阶段注册了侦听器。如果为捕获阶段以及目标和冒泡阶段注册了侦听器，则需要对 <codeph>removeEventListener()</codeph> 进行两次调用才能将这两个侦听器删除：一次调用将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，另一次调用将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>。 
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果将会触发指定类型的侦听器，则值为 <codeph>true</codeph>；否则，值为 <codeph>false</codeph>。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件分派给此 EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 <codeph>true</codeph>。
	<p><codeph>hasEventListener()</codeph> 与 <codeph>willTrigger()</codeph> 的区别是：<codeph>hasEventListener()</codeph> 只检查它所属的对象，而 <codeph>willTrigger()</codeph> 检查整个事件流以查找由 <codeph>type</codeph> 参数指定的事件。</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
	每当引发 JavaScript 异常并且未使用 catch 语句进行处理时，HTMLLoader 对象即会分派 HTMLUncaughtScriptExceptionEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	每当引发 JavaScript 异常并且未使用 <codeph>catch</codeph> 语句进行处理时，HTMLLoader 对象即会分派 HTMLUncaughtScriptExceptionEvent 对象。
	
	</apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
		创建一个 HTMLUncaughtScriptExceptionEvent 对象以作为参数传递给事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>exceptionValue</apiItemName><apiType value=""/><apiDesc>当 JavaScript 进程引发未捕获的异常时，<codeph>exceptionValue</codeph> 将是导致未捕获异常的 throw 语句中的表达式计算结果。<codeph>exceptionValue</codeph> 属性可以是基元值、对 JavaScript 对象的引用或对 ActionScript 对象的引用。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		创建一个 HTMLUncaughtScriptExceptionEvent 对象以作为参数传递给事件侦听器。
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone"><apiName>clone</apiName><shortdesc>
		 
		创建 HTMLUncaughtScriptExceptionEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>HTMLUncaughtScriptExceptionEvent 对象的副本。
		
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		创建 HTMLUncaughtScriptExceptionEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION"><apiName>UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc>
		HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION 常量定义 uncaughtScriptException 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncaughtScriptException</apiData><apiType value=""/></apiValueDef><apiDesc>
		<codeph>HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> 常量定义 <codeph>uncaughtScriptException</codeph> 事件对象的 <codeph>type</codeph> 属性值。
		
		 
		 <p>此事件具有以下属性：</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>exceptionValue</codeph></entry><entry>计算产生未捕获的异常的 <codeph>throw</codeph> 语句中的表达式的结果。</entry></row><row><entry><codeph>stackTrace</codeph></entry><entry>表示在执行产生未捕获的异常的 <codeph>throw</codeph> 语句时的堆栈跟踪的对象数组。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue"><apiName>exceptionValue</apiName><shortdesc>
	计算产生未捕获的异常的 throw 语句中的表达式的结果。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	计算产生未捕获的异常的 throw 语句中的表达式的结果。<codeph>exceptionValue</codeph> 属性可以是基元值、对 JavaScript 对象的引用或对 ActionScript 对象的引用。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get"><apiName>stackTrace</apiName><shortdesc>
	表示在执行产生未捕获的异常的 throw 语句时的堆栈跟踪的对象数组。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	表示在执行产生未捕获的异常的 throw 语句时的堆栈跟踪的对象数组。数组中的每个对象都具有三个属性：
	
	<ul>
	
		<li><codeph>sourceURL</codeph>（字符串）：调用堆栈帧脚本的 URL。</li>
	
		<li><codeph>line</codeph>（数字）：调用堆栈帧的 <codeph>sourceURL</codeph> 资源中的行号。</li>
	
		<li><codeph>functionName</codeph>（字符串）：调用堆栈帧的函数的名称。</li>
	
	</ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
 如果在异步执行模式下执行数据库操作时发生错误，SQLConnection 实例或 SQLStatement 实例将分派 SQLErrorEvent 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 如果在异步执行模式下执行数据库操作时发生错误，SQLConnection 实例或 SQLStatement 实例将分派 SQLErrorEvent 实例。作为事件对象传递给侦听器的 SQLErrorEvent 实例提供对有关错误原因和尝试的操作的信息的访问。
 
 <p>可在 SQLErrorEvent 实例的 <codeph>error</codeph> 属性中的 SQLError 上找到失败的特定详细信息。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
     创建一个 SQLErrorEvent 对象以作为参数传递给事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型，可在 <codeph>type</codeph> 属性中访问。SQLErrorEvent 定义一种事件类型 <codeph>error</codeph> 事件，由 <codeph>SQLErrorEvent.ERROR</codeph> 常量表示。
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph>false</codeph>。
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。默认值为 <codeph>false</codeph>。
     
     </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier><apiData>null</apiData><apiDesc>包含错误详细信息的 SQLError 对象。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>用于创建新的 SQLErrorEvent 对象。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     创建一个 SQLErrorEvent 对象以作为参数传递给事件侦听器。
     
     </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.errors.SQLError;.xml"><linktext>flash.errors.SQLError;</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR"><linktext>ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	 创建 SQLErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 SQLErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 创建 SQLErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	 返回一个字符串，其中包含 SQLErrorEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 SQLErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 返回一个字符串，其中包含 SQLErrorEvent 对象的所有属性。字符串的格式如下：
	 
	 <p><codeph>[SQLErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> error=<i>value</i>]</codeph></p>
	 
	 <p>错误值使用以下格式：<codeph>SQLError : <i>message value</i> code=<i>value</i> operation=<i>value</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
     SQLErrorEvent.ERROR 常量定义在 SQLConnection 方法调用或 SQLStatement 实例出错完成时分派的 error 事件的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLErrorEvent.ERROR</codeph> 常量定义在 SQLConnection 方法调用或 SQLStatement 实例出错完成时分派的 error 事件的 <codeph>type</codeph> 属性值。<codeph>error</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>error</codeph></entry><entry>一个 SQLError 对象，其中包含有关出现的错误的类型和导致该错误的操作的信息。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告错误的 SQLConnection 或 SQLStatement 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get"><apiName>error</apiName><shortdesc>
     包含有关错误原因的详细信息的 SQLError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc>
     包含有关错误原因的详细信息的 SQLError 对象。
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
如果发生错误导致网络操作失败，对象将分派 ErrorEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ErrorEvent 事件的事件对象。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
如果发生错误导致网络操作失败，对象将分派 ErrorEvent 对象。只有一种类型的 <codeph>error</codeph> 事件：<codeph>ErrorEvent.ERROR</codeph>。

<p>ErrorEvent 类还用作 AsyncErrorEvent、IOErrorEvent、SecurityErrorEvent 和 SQLErrorEvent 类的基类。</p>

<p>您可以通过使用<ph platform="actionscript"> Flash Player 的调试版或</ph> AIR Debug Launcher (ADL) 应用程序来检查没有任何侦听器的 <codeph>error</codeph> 事件。<ph platform="actionscript">Flash Player 的调试版或 </ph>AIR Debug Launcher (ADL) 应用程序将这些事件显示为字符串（由 ErrorEvent 构造函数的 <codeph>text</codeph> 参数定义）。</p>

</apiDesc><example conref="examples\ErrorEventExample.as"> 以下示例演示捕获多种类型的错误事件的单个错误处理函数 (<codeph>errorHandler()</codeph>) 的使用。如果有 <codeph>ioError</codeph> 事件，处理函数将试图从网络加载，然后引发 <codeph>securityError</codeph>。
 
 <p><b>注意：</b>如果将名为 MissingFile.xml 的文件与您的 SWF 文件放在同一目录中，则本示例将无法正常工作。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关错误事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 error 事件：<codeph>ErrorEvent.ERROR</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>要显示为错误消息的文本。事件侦听器可以通过 <codeph>text</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>与特定错误关联的引用编号（仅在 Adobe AIR 中支持）。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ErrorEvent 对象的构造函数。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关错误事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 ErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 ErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 ErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 ErrorEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 ErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 ErrorEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[ErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
	定义 error 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>error</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>发生网络操作失败的对象。</entry></row><row><entry><codeph>text</codeph></entry><entry>要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get"><apiName>errorID</apiName><shortdesc>
	包含与特定错误相关联的引用数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	包含与特定错误相关联的引用数字。对于自定义的 ErrorEvent 对象，此数字是构造函数中提供的 <codeph>id</codeph> 参数的值。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
 当加载操作已开始或套接字已接收到数据时，将分派 ProgressEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ProgressEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 当加载操作已开始或套接字已接收到数据时，将分派 ProgressEvent 对象。这些事件通常在将 SWF 文件、图像或数据加载到应用程序中时生成。有两种类型的进程事件：<codeph>ProgressEvent.PROGRESS</codeph> 和 <codeph>ProgressEvent.SOCKET_DATA</codeph>。
 
 </apiDesc><example conref="examples\ProgressEventExample.as"> 以下示例使用 <codeph>ProgressEventExample</codeph> 类来说明如何在下载文件时使用各种事件侦听器。该示例执行下列任务：
 <ol>
  <li>创建 <codeph>downloadURL</codeph> 和 <codeph>fileName</codeph> 属性，这些属性指示下载文件的位置和名称。</li>
  <li>在 <codeph>ProgressEventExample</codeph> 构造函数中，创建名为 <codeph>file</codeph> 的新 FileReference 对象，再将其传递给 <codeph>configureListeners()</codeph> 方法。</li>
  <li>然后将 <codeph>downloadURL</codeph> 和 <codeph>fileName</codeph> 属性传递给 <codeph>file.download()</codeph>，它提示要下载文件的位置。</li>
  <li><codeph>configureListeners()</codeph> 方法添加七个事件侦听器及其关联的订阅者方法：
  <ol outputclass="A">
      <li><codeph>cancel</codeph> / <codeph>cancelHandler()</codeph> 在取消文件下载时分派。</li> 
      <li><codeph>complete</codeph> / <codeph>complereHandler()</codeph> 在完成文件下载进程时分派。</li> 
      <li><codeph>ioError</codeph> / <codeph>ioErrorHandler()</codeph> 在下载文件不可用或不可访问时分派。</li> 
      <li><codeph>open</codeph> / <codeph>openHandler()</codeph> 在已开始下载操作时分派。</li> 
      <li><codeph>progress</codeph> / <codeph>progressHandler()</codeph> 在下载进程开始时分派并在进程结束时再次分派。</li> 
      <li><codeph>securityError</codeph> / <codeph>securityErrorHandler</codeph> 在本地回放安全性设置与下载文件的数据访问类型（本地与网络）不匹配时分派；请参阅下面的备注。</li> 
      <li><codeph>select</codeph> / <codeph>selectHandler()</codeph> 在选择下载对象时分派。</li> 
  </ol>
  </li>
 </ol>
 <p> <b>注意：</b>
 <ul>
  <li>您需要通过将“本地回放安全性”设置为“只访问网络文件”来编译 SWF 文件。</li>
  <li>本示例需要一个名为 SomeFile.pdf 的文件。</li> 
  <li>尽管本示例使用了可用于 FileReference 对象的所有事件，但是在大多数情况下，只需要使用其中的一部分事件。</li>
 </ul>
 </p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.filesystem.xml"><linktext>FileStream 类</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>LoaderInfo 类</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket 类</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData"><apiName>socketData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关进度事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：<codeph>ProgressEvent.PROGRESS</codeph> 和 <codeph>ProgressEvent.SOCKET_DATA</codeph>。
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。 
	</apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>在侦听器处理事件时加载的项数或字节数。
	</apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>如果加载过程成功，将加载的总项数或总字节数。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText><codeph>ProgressEvent</codeph> 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关进度事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 ProgressEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 ProgressEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 ProgressEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 ProgressEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 <codeph>ProgressEvent</codeph> 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 ProgressEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[ProgressEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> bytesLoaded=<i>value</i> bytesTotal=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
	定义 progress 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>progress</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>在侦听器处理事件时加载的项数或字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>如果加载进程成功，最终将加载的项目或字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告进度的对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA"><apiName>SOCKET_DATA</apiName><shortdesc>
	定义 socketData 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>socketData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>socketData</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	     
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在处理此事件的对象。</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>在侦听器处理事件时加载的项数或字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>0；<codeph>socketData</codeph> 事件对象不使用此属性。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告进度的 Socket 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	在侦听器处理事件时加载的项数或字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	在侦听器处理事件时加载的项数或字节数。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	如果加载过程成功，将加载的总项数或总字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	如果加载过程成功，将加载的总项数或总字节数。如果将进度事件分派/附加到某个 Socket 对象，则 bytesTotal 将始终为 0，除非在构造函数的 bytesTotal 参数中指定一个值。未设置来回发送的实际字节数，该字节数将由应用程序开发人员决定。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
	 在从 ShaderJob 启动的着色器操作完成后将分派 ShaderEvent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 在从 ShaderJob 启动的着色器操作完成后将分派 ShaderEvent。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#ShaderJob"><linktext>flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
		 创建一个 ShaderEvent 对象以传递给事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型，在 <codeph>type</codeph> 属性中可用。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph>false</codeph>。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。默认值为 <codeph>false</codeph>。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bitmap</apiItemName><apiOperationClassifier>flash.display:BitmapData</apiOperationClassifier><apiData>null</apiData><apiDesc>包含已完成操作的结果的 BitmapData 对象（如果目标不是 BitmapData 对象，则为 <codeph>null</codeph>）。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>array</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>包含已完成操作的结果的 ByteArray 对象（如果目标不是 ByteArray 对象，则为 <codeph>null</codeph>）。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vector</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>包含已完成操作的结果的 Vector.&lt;Number> 实例（如果目标不是 Vector.&lt;Number> 实例，则为 <codeph>null</codeph>）。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建一个 ShaderEvent 对象以传递给事件侦听器。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone"><apiName>clone</apiName><shortdesc>
		 创建 ShaderEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新的 ShaderEvent 对象。
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 创建 ShaderEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString"><apiName>toString</apiName><shortdesc>
		 返回一个字符串，其中包含 ShaderEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 ShaderEvent 对象的所有属性。
		 
		 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 返回一个字符串，其中包含 ShaderEvent 对象的所有属性。字符串的格式如下：
		 
		 <p><codeph>[ShaderEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> bitmapData=<i>value</i> byteArray=<i>value</i> vector=<i>value</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
		 定义 complete 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 定义 <codeph>complete</codeph> 事件对象的 <codeph>type</codeph> 属性值。
		 
		 <p>此事件具有以下属性：</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		      
		  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bitmapData</codeph></entry><entry>包含已完成操作的结果的 BitmapData 对象（如果目标不是 BitmapData 对象，则为 <codeph>null</codeph>）。</entry></row><row><entry><codeph>byteArray</codeph></entry><entry>包含已完成操作的结果的 ByteArray 对象（如果目标不是 ByteArray 对象，则为 <codeph>null</codeph>）。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告完成的 ShaderJob 对象。</entry></row><row><entry><codeph>vector</codeph></entry><entry>包含已完成操作的结果的 Vector.&lt;Number> 实例（如果目标不是 Vector.&lt;Number> 实例，则为 <codeph>null</codeph>）。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get"><apiName>bitmapData</apiName><shortdesc>
		 传递给 ShaderJob.start() 方法的 BitmapData 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc>
		 传递给 <codeph>ShaderJob.start()</codeph> 方法的 BitmapData 对象。如果将 ByteArray 或 Vector.&lt;Number> 传递给 <codeph>start()</codeph> 方法，则此属性为 <codeph>null</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get"><apiName>byteArray</apiName><shortdesc>
		 
		 传递给 ShaderJob.start() 方法的 ByteArray 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 
		 传递给 <codeph>ShaderJob.start()</codeph> 方法的 ByteArray 对象。如果将 BitmapData 或 Vector.&lt;Number> 对象传递给 <codeph>start()</codeph> 方法，则此属性为 <codeph>null</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get"><apiName>vector</apiName><shortdesc>
		 
         Vector.传递给 ShaderJob.start() 方法的 &amp;lt;Number&amp;gt; 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
		 
         Vector.&lt;Number> 对象，该对象已传递给 <codeph>ShaderJob.start()</codeph> 方法。如果 BitmapData 或 ByteArray 对象已传递给 <codeph>start()</codeph> 方法，则此属性为 <codeph>null</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
 拖放操作中涉及的交互式对象将分派本机拖动事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 拖放操作中涉及的交互式对象将分派本机拖动事件。
 
 <p>启动对象分派：</p> 
 <ul>
    <li><codeph>nativeDragStart</codeph> -- 当拖动操作开始时。</li>
    <li><codeph>nativeDragUpdate</codeph> -- 当拖动操作正在进行时。</li>
    <li><codeph>nativeDragComplete</codeph> -- 当用户释放拖动的项目（无论是否接受放置）时。</li>
 </ul>
 
 <p>启动对象是在启动拖动操作的 <codeph>NativeDragManager.doDrag()</codeph> 调用中传递给 NativeDragManager 对象的交互式对象。</p>
 
 <p>潜在的目标交互式对象分派：</p>
 <ul>
    <li><codeph>nativeDragEnter</codeph> -- 当拖动动作移入对象边界内时。</li>
    <li><codeph>nativeDragOver</codeph> -- 当拖动动作停留在对象边界内时。</li>
    <li><codeph>nativeDragExit</codeph> -- 当拖动动作离开对象边界时。</li>
    <li><codeph>nativeDragDrop</codeph> -- 当用户在对象上释放拖动的项目并且该对象使用先前对 <codeph>NativeDragManager.acceptDragDrop()</codeph> 的调用接受了放置时。</li>
 </ul>
 
 <p>通常，<codeph>nativeDragEnter</codeph> 或 <codeph>nativeDragOver</codeph> 事件的处理函数计算正被拖动的数据以及允许的拖动动作，以确定交互式对象是否可以接受放置。要指定交互式对象为合格的目标，事件处理函数必须调用 <codeph>NativeDragManager.acceptDrop()</codeph> 函数，传入对该对象的引用。如果用户在指定的对象上释放鼠标按键，则该对象成为放置目标并且分派 <codeph>nativeDragDrop</codeph> 事件。</p>
 
 <p>任何 InteractiveObject 类型的对象都可以是拖动启动器或放置目标。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#NativeDragManager"><linktext>flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject"><linktext>flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete"><apiName>nativeDragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop"><apiName>nativeDragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter"><apiName>nativeDragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit"><apiName>nativeDragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver"><apiName>nativeDragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart"><apiName>nativeDragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate"><apiName>nativeDragUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
    使用与本机拖放事件有关的特定信息创建 Event 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：<codeph>NativeDragEvent.NATIVE_DRAG_START</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_ENTER</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_OVER</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_EXIT</codeph>、<codeph>NativeDragEvent.NATIVE_DRAG_DROP</codeph> 和 <codeph>NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>。
	
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>指示是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>事件发生点相对于所属 Sprite 的水平坐标。
	</apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>事件发生点相对于所属 Sprite 的垂直坐标。
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>相关的交互式显示对象。 
    </apiDesc></apiParam><apiParam><apiItemName>clipboard</apiItemName><apiOperationClassifier>flash.desktop:Clipboard</apiOperationClassifier><apiData>null</apiData><apiDesc>包含要传输的数据的 Clipboard 对象。
    </apiDesc></apiParam><apiParam><apiItemName>allowedActions</apiItemName><apiOperationClassifier>flash.desktop:NativeDragOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>定义允许的动作（移动、复制和链接）的 NativeDragOptions 对象。
    </apiDesc></apiParam><apiParam><apiItemName>dropAction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>当前动作。
    
 	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Ctrl 键。
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Alt 键。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Shift 键。
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否激活 Command 键。
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    使用与本机拖放事件有关的特定信息创建 Event 对象。
    
	<p>将 Event 对象作为参数传递给事件侦听器。分派本机拖动事件不会触发相关联的行为。</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone"><apiName>clone</apiName><shortdesc>
	创建此 NativeDragEvent 对象的副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 NativeDragEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建此 NativeDragEvent 对象的副本。
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString"><apiName>toString</apiName><shortdesc>
	 将此 NativeDragEvent 对象的属性格式设置为字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>以字符串形式表示的此 NativeDragEvent 的属性。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 将此 NativeDragEvent 对象的属性格式设置为字符串。
	 
	 <p>字符串的格式如下：</p>
	 <p><codeph>[NativeDragEvent type=value bubbles=value cancelable=value ... commandKey=value]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE"><apiName>NATIVE_DRAG_COMPLETE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE 定义 nativeDragComplete 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE 定义 <codeph>nativeDragComplete</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP"><apiName>NATIVE_DRAG_DROP</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_DROP 定义 nativeDragDrop 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragDrop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_DROP 定义 <codeph>nativeDragDrop</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消此事件会取消拖动操作。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。即使在分派此事件的对象与启动器不在同一安全域中时也可以读取剪贴板。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER"><apiName>NATIVE_DRAG_ENTER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_ENTER 定义 nativeDragEnter 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragEnter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_ENTER 定义 <codeph>nativeDragEnter</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。只有当分派此事件的对象与启动器位于同一安全域中时才能读取剪贴板。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT"><apiName>NATIVE_DRAG_EXIT</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_EXIT 定义 nativeDragExit 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragExit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_EXIT 定义 <codeph>nativeDragExit</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。只有当分派此事件的对象与启动器位于同一安全域中时才能读取剪贴板。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER"><apiName>NATIVE_DRAG_OVER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_OVER 定义 nativeDragOver 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_OVER 定义 <codeph>nativeDragOver</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消此事件会取消拖动操作。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。只有当分派此事件的对象与启动器位于同一安全域中时才能读取剪贴板。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START"><apiName>NATIVE_DRAG_START</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_START 定义 nativeDragStart 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragStart</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_START 定义 <codeph>nativeDragStart</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消此事件会取消拖动操作。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE"><apiName>NATIVE_DRAG_UPDATE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE 定义 nativeDragUpdate 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragUpdate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE 定义 <codeph>nativeDragUpdate</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>包含拖动数据的 Clipboard 对象。</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>由放置目标选择的动作（或在未设置任何动作时为 <codeph>none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions"><apiName>allowedActions</apiName><shortdesc>
	指定启动此拖动操作的显示对象允许执行的操作的 NativeDragOption 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc>
	指定启动此拖动操作的显示对象允许执行的操作的 NativeDragOption 对象。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard"><apiName>clipboard</apiName><shortdesc>
	 包含此拖动操作中的数据的 Clipboard 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc>
	 包含此拖动操作中的数据的 Clipboard 对象。
	 
	 <p>如果分派此事件的对象与启动对象不在同一安全域中，则只能在 <codeph>nativeDragDrop</codeph> 事件的处理函数中读取剪贴板。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction"><apiName>dropAction</apiName><shortdesc>
	当前动作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	当前动作。在 <codeph>nativeDragComplete</codeph> 事件中，<codeph>dropAction</codeph> 属性报告最终动作。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
	 调用 DRMManager 对象的 authenticate() 方法成功时，DRMManager 将分派 DRMAuthenticationCompleteEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 调用 DRMManager 对象的 <codeph>authenticate()</codeph> 方法成功时，DRMManager 将分派 DRMAuthenticationCompleteEvent 对象。
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
		 创建 DRMAuthenticationCompleteEvent 对象的新实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件类型字符串
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>事件是否沿显示列表向上冒泡
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>是否可以取消事件
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>所登录服务器的 URL
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>所登录服务器上经过身份验证的域
		 </apiDesc></apiParam><apiParam><apiItemName>inToken</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>身份验证标记
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建 DRMAuthenticationCompleteEvent 对象的新实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone"><apiName>clone</apiName><shortdesc> 
	 复制 Event 子类的实例。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个新的 Event 对象，它与原始对象相同。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
	 复制 Event 子类的实例。
	 
     <p>返回一个新的 Event 对象，它是 Event 对象的原始实例的副本。通常您不需要调用 <codeph>clone()</codeph>；当您重新分派事件，即调用 <codeph>dispatchEvent(event)</codeph>（从正在处理 <codeph>event</codeph> 的处理函数）时，EventDispatcher 类会自动调用它。</p>
	 
	 <p>新的 Event 对象包括原始对象的所有属性。</p> 
	 
	 <p platform="actionscript">当您创建自己的自定义 Event 类时，必须覆盖继承的 <codeph>Event.clone()</codeph> 方法，以复制自定义类的属性。如果您未设置在事件子类中添加的所有属性，则当侦听器处理重新分派的事件时，这些属性将不会有正确的值。</p>
	 
	 <p platform="actionscript">在本示例中，<codeph>PingEvent</codeph> 是 <codeph>Event</codeph> 的子类，因此它可以实现其自己的 <codeph>clone()</codeph> 版本。</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE"><apiName>AUTHENTICATION_COMPLETE</apiName><shortdesc>
		 添加和删除事件侦听器时 type 参数中对于身份验证完成事件使用的字符串常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>authenticationComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 添加和删除事件侦听器时 type 参数中对于身份验证完成事件使用的字符串常量。
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:set"><apiName>domain</apiName><shortdesc>
		 媒体权限服务器的内容域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 媒体权限服务器的内容域。（并非网络或 Internet 域名。）
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:set"><apiName>serverURL</apiName><shortdesc>
		 媒体权限服务器的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 媒体权限服务器的 URL。
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:set"><apiName>token</apiName><shortdesc>
		 身份验证标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 身份验证标记。
		 
		 <p>自动向 DRMManager 会话缓存添加身份验证。可以保存标记，并在将来的会话中使用该标记验证用户的身份。通过 DRMManager 的 <codeph>setAuthenticationToken()</codeph> 方法重用标记。标记到期和其它属性由生成该标记的服务器确定。</p>
		   
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()"><linktext>flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
 当用户使用输入法编辑器 (IME) 输入文本时，将分派 IMEEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>IMEEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 当用户使用输入法编辑器 (IME) 输入文本时，将分派 IMEEvent 对象。IME 一般用于输入象形文字语言（例如，中文、日语和朝鲜语）的文本而不是字母。只有一种 IME 事件：<codeph>IMEEvent.IME_COMPOSITION</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
	 创建一个 Event 对象，其中包含有关 IME 事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种 IME 事件：<codeph>IMEEvent.IME_COMPOSITION</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>来自 IME 的读取字符串。这是用户在选择任何候选项之前键入的初始字符串。最终合成字符串提供给 <codeph>TextEvent.TEXT_INPUT</codeph> 事件中获得键盘焦点的对象。事件侦听器可以通过 <codeph>text</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>IMEEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 创建一个 Event 对象，其中包含有关 IME 事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone"><apiName>clone</apiName><shortdesc>
	 创建 IMEEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 IMEEvent 对象。 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 创建 IMEEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString"><apiName>toString</apiName><shortdesc>
	 返回一个字符串，其中包含 IMEEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 IMEEvent 对象的所有属性。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 返回一个字符串，其中包含 IMEEvent 对象的所有属性。字符串的格式如下：
	 <p><codeph>[IMEEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION"><apiName>IME_COMPOSITION</apiName><shortdesc>
	 定义 imeComposition 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeComposition</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 定义 <codeph>imeComposition</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	 <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>IME 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DataEvent"><apiName>DataEvent</apiName><shortdesc>
原始数据加载完成时，对象将分派 DataEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>DataEvent 事件的事件对象。

</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
原始数据加载完成时，对象将分派 DataEvent 对象。存在两种数据事件类型： 
<ul><li><codeph>DataEvent.DATA</codeph>：针对发送或接收的数据进行分派。</li>
<li><codeph>DataEvent.UPLOAD_COMPLETE_DATA</codeph>：当数据已发送且服务器响应后进行分派。</li></ul>

</apiDesc><example conref="examples\DataEventExample.as"> 以下示例创建一个 XMLSocket 并将其连接到在 <codeph>yourDomain</codeph> 的端口 8080 上运行的套接字服务器。事件侦听器附加到侦听 <codeph>data</codeph> 事件（每次收到原始数据时，将分派这些事件）的 XMLSocket 对象。
 
 <p> <b>注意：</b> 
 <ul>
    <li>为了在本示例中生成 <codeph>securityError</codeph> 事件，需要在编译 SWF 文件时将“本地回放安全性”设置为“只访问网络”。</li>
    <li>您需要一台使用端口 8080 在 [<codeph>yourDomain</codeph>] 上运行的服务器。</li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent"><apiName>DataEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关数据事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的数据事件：<codeph>DataEvent.DATA</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>加载到 Flash Player 或 Adobe AIR 中的原始数据。事件侦听器可以通过 <codeph>data</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>DataEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关数据事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA"><linktext>DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 DataEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 DataEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 DataEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 DataEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 DataEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 DataEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[DataEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> data=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA"><apiName>DATA</apiName><shortdesc>
	定义 data 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>data</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>data</codeph> 事件对象的 <codeph>type</codeph> 属性值。  
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>data</codeph></entry><entry>加载到 Flash Player 或 Adobe AIR 中的原始数据。</entry></row><row><entry><codeph>target</codeph></entry><entry>接收数据的 XMLSocket 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA"><apiName>UPLOAD_COMPLETE_DATA</apiName><shortdesc>
	定义 uploadCompleteData 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uploadCompleteData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>uploadCompleteData</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>data</codeph></entry><entry>成功上载文件后从服务器返回的原始数据。</entry></row><row><entry><codeph>target</codeph></entry><entry>成功上载后接收数据的 FileReference 对象。</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get"><apiName>data</apiName><shortdesc>
	加载到 Flash Player 或 Adobe AIR 中的原始数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	加载到 Flash Player 或 Adobe AIR 中的原始数据。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
当出现安全错误时，对象将分派 SecurityErrorEvent 对象来报告此错误。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>SecurityErrorEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
当出现安全错误时，对象将分派 SecurityErrorEvent 对象来报告此错误。通过该类所报告的安全错误一般是由异步操作（例如加载数据）产生的，这种情况下安全侵犯可能不会被立即列出。事件侦听器可以访问对象的 <codeph>text</codeph> 属性，以确定尝试过哪些操作以及涉及哪些 URL。如果没有事件侦听器，<ph platform="actionscript">Flash Player 的调试版或 </ph>AIR Debug Launcher (ADL) 应用程序将自动显示包含 <codeph>text</codeph> 属性内容的错误消息。只有一种类型的安全错误事件：<codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>。

<p>安全错误事件是针对任何目标对象进行分派的最终事件。这意味着对于遇到安全错误的目标对象，不能分派任何其它事件（包括一般错误事件）。</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as"> 以下示例使用 <codeph>SecurityErrorEventExample</codeph> 类来说明如何实例化侦听器方法 <codeph>securityErrorHandler()</codeph> 并将其设置为侦听将要分派的 <codeph>securityError</codeph> 事件。当 <codeph>URLRequest</codeph> 位置与调用 SWF 不完全属于同一个域，而且请求的域没有获得通过跨域策略文件进行跨域访问的授权时，会发生此事件。
 <p>要创建 <codeph>SecurityErrorEvent</codeph>，请将 <codeph>http://www.[yourdomain].com</codeph> 替换为一个未获得跨域访问授权的路径。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>Security 类</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError"><apiName>securityError</apiName><prolog><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关安全错误事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 error 事件：<codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>要显示为错误消息的文本。事件侦听器可以通过 <codeph>text</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>要与特定错误关联的引用数字。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>SecurityErrorEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关安全错误事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 SecurityErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 securityErrorEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 SecurityErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 SecurityErrorEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 SecurityErrorEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 SecurityErrorEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[securityErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc>
	SecurityErrorEvent.SECURITY_ERROR 常量定义 securityError 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> 常量定义 <codeph>securityError</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告安全错误的网络对象。</entry></row><row><entry><codeph>text</codeph></entry><entry>要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
 用户在文本字段中输入文本或在启用 HTML 的文本字段中单击超链接时，对象将分派 TextEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>TextEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 用户在文本字段中输入文本或在启用 HTML 的文本字段中单击超链接时，对象将分派 TextEvent 对象。有两种类型的文本事件：<codeph>TextEvent.LINK</codeph> 和 <codeph>TextEvent.TEXT_INPUT</codeph>。
 
 </apiDesc><example conref="examples\TextEventExample.as"> 以下示例使用 TextEventExample 类创建文本字段，并侦听这些字段上的各个文本事件。该示例执行下列任务：
 <ol>
     <li>本示例声明了以后要使用的两个 URL 的常量。</li>
    <li>本示例声明了以后要使用的类型为 TextField 的两个变量。</li>
     <li>类构造函数调用以下两个方法：
     <ul>
       <li><codeph>init()</codeph> 初始化 TextField 对象并将事件侦听器添加到这些对象中。</li>
       <li><codeph>draw()</codeph> 将 TextField 添加到显示列表中并赋予要显示的文本。</li>
  </ul></li>
     <li>侦听器 <codeph>linkHandler()</codeph> 和 <codeph>textInputHandler()</codeph> 根据其事件类型响应事件。如果 Web 浏览器尚未打开，则 <codeph>linkHandler()</codeph> 方法将打开 Web 浏览器，并导航到单击的 URL。每次在关联的文本字段中按下某个键时，<codeph>textInputHandler()</codeph> 方法仅显示信息。</li>
 </ol>
 
 <p><b>注意：</b>本示例中显示的域是虚构的，<codeph>[yourDomain]</codeph> 应该替换为一个真实存在的域。</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br />";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'>";
            link += "&lt;u>";
            link += "&lt;b>";
            link += "&lt;a href='event:" + url + "'>" + text + "&lt;/a>";
            link += "&lt;/b>";
            link += "&lt;/u>";
            link += "&lt;/font>";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace(">> ============================");
            trace(">> e.text: " + e.text);
            trace(">> textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link"><apiName>link</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as"> 在此示例中，用户单击 HTML 文本中的超链接时将触发 text 事件。用户基于系统的操作系统而转到指定的网站，或基于用户选择的半径绘制一个圆，具体取决于该链接。 
   
 <p>创建一个文本字段，并使用 <codeph>htmlText</codeph> 属性将其内容设置为 HTML 格式的字符串。这些链接带有下划线，以便让用户更容易地识别它们。（只有在鼠标指针位于链接上方后，Adobe Flash Player 才会更改鼠标指针。）为了确保用户的单击操作将调用 ActionScript 方法，链接的 URL 应以字符串<codeph>“event:”</codeph>开头并且为 <codeph>TextEvent.LINK</codeph> 事件添加了侦听器。</p> 
 
 <p>在用户单击链接后触发的 <codeph>linkHandler()</codeph> 方法用于管理文本字段的所有 link 事件。第一个 if 语句检查事件的 <codeph>text</codeph> 属性，它保存 URL 中<codeph>“event:”</codeph>字符串后面的其余部分。如果用户单击了操作系统的链接，则会使用用户的当前操作系统名称（从系统的 <codeph>Capabilities.os</codeph> 属性中获取）使用户转到指定的网站。否则，使用所选的半径大小（通过事件的 <codeph>text</codeph> 属性传递）在文本字段下面绘制一个圆。每次用户单击半径链接时，将会清除以前绘制的圆，并使用所选的半径大小绘制一个新的红色圆。</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput"><apiName>textInput</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as"> 下面的示例指导用户生成一个特殊的组合密钥（类似于密码）。此组合密钥具有 7 个字母数字字符，其中第 2 个和第 5 个字符是数字。
 
 <p>共创建了三个文本字段，分别用于保存预备说明、用户输入以及警告（错误）消息。添加了一个事件侦听器，以便通过触发 <codeph>textInputHandler()</codeph> 方法来响应用户的文本输入。（每次用户输入文本时，都会分派 <codeph>TextEvent.TEXT_INPUT</codeph> 事件。） </p>
 <p><b>注意：</b>如果用户输入字符，并且不是作为任何键盘输入（如 backspace）的响应，则会分派 text 事件。要捕获所有键盘事件，请使用 <codeph>KeyboardEvent</codeph> 事件的侦听器。）</p>
 
 <p><codeph>textInputHandler()</codeph> 方法用于控制和管理用户输入。<codeph>preventDefault()</codeph> 方法用于禁止 Adobe Flash Player 立即在输入文本字段中显示文本。应用程序负责更新该字段。如果撤消用户对已输入的字符（<codeph>result</codeph> 字符串）执行的删除或修改操作，当用户输入新字符时，则会将输入文本字段的内容重新分配给 <codeph>result</codeph> 字符串。另外，为了获得一致的用户体验，<codeph>setSelection()</codeph> 方法会将插入点（尖号）放在文本字段中上次选择的字符后面。</p>
 
 <p><codeph>textInputHandler()</codeph> 方法中的第一个 if 语句检查组合密钥的第 2 个和第 5 个字符位置的输入内容（必须为数字）。如果用户输入正确无误，则会调用 <codeph>updateCombination()</codeph> 方法，并将用户输入附加到 (<codeph>result</codeph>) 组合密钥字符串中。<codeph>updateCombination()</codeph> 方法还将插入点移到所选字符的后面。在输入 7 个字符后，<codeph>textInputHandler()</codeph> 方法中的最后一个 if 语句将 <codeph>inputTextField</codeph> 文本字段类型由 <codeph>INPUT</codeph> 更改为 <codeph>DYNAMIC</codeph>，这意味着用户无法再输入或更改任何字符。</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 创建一个 Event 对象，其中包含有关文本事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。可能的值包括：<codeph>TextEvent.LINK</codeph> 和 <codeph>TextEvent.TEXT_INPUT</codeph>。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>用户输入的一个或多个文本字符。事件侦听器可以通过 <codeph>text</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>TextEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 创建一个 Event 对象，其中包含有关文本事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone"><apiName>clone</apiName><shortdesc>
	 创建 TextEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 TextEvent 对象。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 创建 TextEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString"><apiName>toString</apiName><shortdesc>
	 返回一个字符串，其中包含 TextEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 TextEvent 对象的所有属性。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 返回一个字符串，其中包含 TextEvent 对象的所有属性。字符串的格式如下：
	 <p><codeph>[TextEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK"><apiName>LINK</apiName><shortdesc>
     定义 link 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     定义 <codeph>link</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	 
	 <p>此事件具有以下属性：</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>包含已单击的超链接的文本字段。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row><entry><codeph>text</codeph></entry><entry>URL 中“event:”之后的其余部分</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as"> 在此示例中，用户单击 HTML 文本中的超链接时将触发 text 事件。用户基于系统的操作系统而转到指定的网站，或基于用户选择的半径绘制一个圆，具体取决于该链接。 
   
 <p>创建一个文本字段，并使用 <codeph>htmlText</codeph> 属性将其内容设置为 HTML 格式的字符串。这些链接带有下划线，以便让用户更容易地识别它们。（只有在鼠标指针位于链接上方后，Adobe Flash Player 才会更改鼠标指针。）为了确保用户的单击操作将调用 ActionScript 方法，链接的 URL 应以字符串<codeph>“event:”</codeph>开头并且为 <codeph>TextEvent.LINK</codeph> 事件添加了侦听器。</p> 
 
 <p>在用户单击链接后触发的 <codeph>linkHandler()</codeph> 方法用于管理文本字段的所有 link 事件。第一个 if 语句检查事件的 <codeph>text</codeph> 属性，它保存 URL 中<codeph>“event:”</codeph>字符串后面的其余部分。如果用户单击了操作系统的链接，则会使用用户的当前操作系统名称（从系统的 <codeph>Capabilities.os</codeph> 属性中获取）使用户转到指定的网站。否则，使用所选的半径大小（通过事件的 <codeph>text</codeph> 属性传递）在文本字段下面绘制一个圆。每次用户单击半径链接时，将会清除以前绘制的圆，并使用所选的半径大小绘制一个新的红色圆。</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT"><apiName>TEXT_INPUT</apiName><shortdesc>
     定义 textInput 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     定义 <codeph>textInput</codeph> 事件对象的 <codeph>type</codeph> 属性值。
     <p><b>注意：</b>对于 Delete 或 Backspace 键不会分派此事件。</p>     
	 <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；调用 <codeph>preventDefault()</codeph> 方法以取消默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>在其中输入字符的文本字段。target 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row><entry><codeph>text</codeph></entry><entry>用户输入的字符或字符序列。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as"> 下面的示例指导用户生成一个特殊的组合密钥（类似于密码）。此组合密钥具有 7 个字母数字字符，其中第 2 个和第 5 个字符是数字。
 
 <p>共创建了三个文本字段，分别用于保存预备说明、用户输入以及警告（错误）消息。添加了一个事件侦听器，以便通过触发 <codeph>textInputHandler()</codeph> 方法来响应用户的文本输入。（每次用户输入文本时，都会分派 <codeph>TextEvent.TEXT_INPUT</codeph> 事件。） </p>
 <p><b>注意：</b>如果用户输入字符，并且不是作为任何键盘输入（如 backspace）的响应，则会分派 text 事件。要捕获所有键盘事件，请使用 <codeph>KeyboardEvent</codeph> 事件的侦听器。）</p>
 
 <p><codeph>textInputHandler()</codeph> 方法用于控制和管理用户输入。<codeph>preventDefault()</codeph> 方法用于禁止 Adobe Flash Player 立即在输入文本字段中显示文本。应用程序负责更新该字段。如果撤消用户对已输入的字符（<codeph>result</codeph> 字符串）执行的删除或修改操作，当用户输入新字符时，则会将输入文本字段的内容重新分配给 <codeph>result</codeph> 字符串。另外，为了获得一致的用户体验，<codeph>setSelection()</codeph> 方法会将插入点（尖号）放在文本字段中上次选择的字符后面。</p>
 
 <p><codeph>textInputHandler()</codeph> 方法中的第一个 if 语句检查组合密钥的第 2 个和第 5 个字符位置的输入内容（必须为数字）。如果用户输入正确无误，则会调用 <codeph>updateCombination()</codeph> 方法，并将用户输入附加到 (<codeph>result</codeph>) 组合密钥字符串中。<codeph>updateCombination()</codeph> 方法还将插入点移到所选字符的后面。在输入 7 个字符后，<codeph>textInputHandler()</codeph> 方法中的最后一个 if 语句将 <codeph>inputTextField</codeph> 文本字段类型由 <codeph>INPUT</codeph> 更改为 <codeph>DYNAMIC</codeph>，这意味着用户无法再输入或更改任何字符。</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get"><apiName>text</apiName><shortdesc>
	 在 textInput 事件中，由用户输入的字符或字符序列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 在 <codeph>textInput</codeph> 事件中，由用户输入的字符或字符序列。For a <codeph>link</codeph> 事件，<codeph>&lt;a></codeph> 标签的 <codeph>href</codeph> 属性的 <codeph>event</codeph> 属性的文本。
	 
	 </apiDesc><example>以下代码说明当用户单击超文本链接时将分派 <codeph>link</codeph> 事件：
	 
	<codeblock>
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'>Click Me.&lt;/a>";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:Event"><apiName>Event</apiName><shortdesc>
 Event 类作为创建 Event 对象的基类，当发生事件时，Event 对象将作为参数传递给事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event 对象的基类。
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Event 类作为创建 Event 对象的基类，当发生事件时，Event 对象将作为参数传递给事件侦听器。
 
 <p>Event 类的属性包含有关事件的基本信息，例如事件的类型或者是否可以取消事件的默认行为。对于许多事件（如由 Event 类常量表示的事件），此基本信息就足够了。但其它事件可能需要更详细的信息。<ph platform="actionscript">例如，与鼠标单击关联的事件需要包括有关单击事件的位置以及在单击事件期间是否按下了任何键的其它信息。您可以通过扩展 Event 类（MouseEvent 类执行的操作）将此类其它信息传递给事件侦听器。ActionScript 3.0</ph><ph platform="javascript">Adobe<sup>®</sup> AIR™</ph> API 为需要其它信息的常见事件定义多个 Event 子类。与每个 Event 子类关联的事件将在每个类的文档中加以介绍。</p>
 
 <p>Event 类的方法可以在事件侦听器函数中使用以影响事件对象的行为。某些事件有关联的默认行为。<ph platform="actionscript">例如，<codeph>doubleClick</codeph> 事件有关联的默认行为，此行为突出显示事件发生时鼠标指针下的词。</ph> <ph platform="javascript">例如，由 NativeWindow 对象分派的 <codeph>closing</codeph> 事件具有关联的默认行为，即关闭窗口。</ph>通过调用 <codeph>preventDefault()</codeph> 方法，您的事件侦听器可以取消此行为。<ph platform="actionscript">也可以通过调用 <codeph>stopPropagation()</codeph> 或 <codeph>stopImmediatePropagation()</codeph> 方法，将当前事件侦听器作为处理事件的最后一个事件侦听器。</ph></p>
 
 <p platform="javascript"><b>注意：</b>此类中的某些常量用于定义由 SWF 内容中使用的 ActionScript 3.0 显示列表分派的事件的 <codeph>type</codeph> 属性。但是，此类中的某些常量用于定义另一些事件的 <codeph>type</codeph> 属性，这些事件与 ActionScript 3.0 显示列表<i>无关</i> 并且在 AIR 运行时中运行的 JavaScript 代码中非常有用。</p>
 
 </apiDesc><example conref="examples\EventExample.as"> 以下示例使用 <codeph>EventExample</codeph> 类和 <codeph>Square</codeph> 自定义类来说明如何管理事件冒泡。
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace(">> stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace(">> --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace(">> 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace(">> 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace(">> --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace(">> 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as"> 以下示例创建 <codeph>ADDED</codeph> 和 <codeph>ADDED_TO_STAGE</codeph> 事件以及 <codeph>REMOVED</codeph> 和 <codeph>REMOVED_FROM_STAGE</codeph> 事件之间区别的演示。单击 Sprite 将从舞台将其删除，同时还删除其中嵌套的所有内容。例如，单击最大的 Sprite 将导致一个 <codeph>REMOVED</codeph> 事件和三个 <codeph>REMOVED_FROM_STAGE</codeph> 事件触发。
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate"><apiName>activate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added"><apiName>added</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage"><apiName>addedToStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel"><apiName>cancel</apiName><prolog><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing"><apiName>closing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COPY</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut"><apiName>cut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CUT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate"><apiName>deactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying"><apiName>displaying</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame"><apiName>enterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting"><apiName>exiting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame"><apiName>exitFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed"><apiName>frameConstructed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3"><apiName>id3</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ID3</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init"><apiName>init</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:INIT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave"><apiName>mouseLeave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange"><apiName>networkChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste"><apiName>paste</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed"><apiName>removed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage"><apiName>removedFromStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render"><apiName>render</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll"><apiName>selectAll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange"><apiName>tabChildrenChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange"><apiName>tabEnabledChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange"><apiName>tabIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event"><apiName>Event</apiName><shortdesc>
     创建一个作为参数传递给事件侦听器的 Event 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型，可以作为 <codeph>Event.type</codeph> 访问。
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph>false</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。默认值为 <codeph>false</codeph>。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>用于创建新的 Event 对象。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     创建一个作为参数传递给事件侦听器的 Event 对象。
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone"><apiName>clone</apiName><shortdesc>
	 复制 Event 子类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个新的 Event 对象，它与原始对象相同。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 复制 Event 子类的实例。
	 
     <p>返回一个新的 Event 对象，它是 Event 对象的原始实例的副本。通常您不需要调用 <codeph>clone()</codeph>；当您重新分派事件，即调用 <codeph>dispatchEvent(event)</codeph>（从正在处理 <codeph>event</codeph> 的处理函数）时，EventDispatcher 类会自动调用它。</p>
	 
	 <p>新的 Event 对象包括原始对象的所有属性。</p> 
	 
	 <p platform="actionscript">当您创建自己的自定义 Event 类时，必须覆盖继承的 <codeph>Event.clone()</codeph> 方法，以复制自定义类的属性。如果您未设置在事件子类中添加的所有属性，则当侦听器处理重新分派的事件时，这些属性将不会有正确的值。</p>
	 
	 <p platform="actionscript">在本示例中，<codeph>PingEvent</codeph> 是 <codeph>Event</codeph> 的子类，因此它可以实现其自己的 <codeph>clone()</codeph> 版本。</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString"><apiName>formatToString</apiName><shortdesc>
	 用于在自定义 ActionScript 3.0 Event 类中实现 toString() 方法的实用程序函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>自定义 Event 类的名称和 <codeph>...arguments</codeph> 参数的字符串值。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>className</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>自定义 Event 类的名称。<ph platform="actionscript">在上面的示例中，<codeph>className</codeph> 参数为 <codeph>PingEvent</codeph>。</ph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>Event 类的属性<ph platform="actionscript">和在自定义 Event 类中添加的属性。在上面的示例中，<codeph>...arguments</codeph> 参数包括 <codeph>type</codeph>、<codeph>bubbles</codeph>、<codeph>cancelable</codeph>、<codeph>eventPhase</codeph> 和 <codeph>URL</codeph></ph>。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 用于在自定义 ActionScript 3.0 Event 类中实现 <codeph>toString()</codeph> 方法的实用程序函数。<ph platform="actionscript">建议覆盖 <codeph>toString()</codeph> 方法，但不是必须覆盖。</ph>
	 
	 <pre platform="actionscript">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 <p platform="javascript">此方法用于创建将在 SWF 内容中使用的 ActionScript 3.0 类。</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented"><apiName>isDefaultPrevented</apiName><shortdesc>
	检查是否已对事件调用 preventDefault() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果已调用 <codeph>preventDefault()</codeph>，将返回 <codeph>true</codeph>；否则将返回 <codeph>false</codeph>。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	检查是否已对事件调用 <codeph>preventDefault()</codeph> 方法。如果已调用 <codeph>preventDefault()</codeph> 方法，则返回 <codeph>true</codeph>；否则返回 <codeph>false</codeph>。
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
	如果可以取消事件的默认行为，则取消该行为。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	如果可以取消事件的默认行为，则取消该行为。
	
	<p>许多事件都有默认执行的关联行为。<ph platform="actionscript">例如，如果用户在文本字段中键入一个字符，则默认行为就是在文本字段中显示该字符。由于可以取消 <codeph>TextEvent.TEXT_INPUT</codeph> 事件的默认行为，因此您可以使用 <codeph>preventDefault()</codeph> 方法来防止显示该字符。</ph> <ph platform="javascript">例如，在用户单击窗口的关闭框时，默认行为是窗口关闭。由于可以取消 <codeph>closing</codeph> 事件的默认行为，因此您可以使用 <codeph>preventDefault()</codeph> 方法来防止关闭该窗口。</ph>
	</p>
	
    <p platform="actionscript">不可取消行为的一个示例是与 <codeph>Event.REMOVED</codeph> 事件关联的默认行为，只要 Flash Player 从显示列表中删除显示对象，就会生成该事件。由于无法取消默认行为（删除元素），因此 <codeph>preventDefault()</codeph> 方法对此默认行为无效。 </p>
	
	<p>您可以使用 <codeph>Event.cancelable</codeph> 属性来检查是否可以防止与特定事件关联的默认行为。如果 <codeph>Event.cancelable</codeph> 的值为 <codeph>true</codeph>，则可以使用 <codeph>preventDefault()</codeph> 来取消事件；否则，<codeph>preventDefault()</codeph> 无效。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/isDefaultPrevented()"><linktext>flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable"><linktext>Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation"><apiName>stopImmediatePropagation</apiName><shortdesc>
	防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。<ph platform="actionscript">此方法会立即生效，并且会影响当前节点中的事件侦听器。相比之下，在当前节点中的所有事件侦听器都完成处理之前，<codeph>stopPropagation()</codeph> 方法不会生效。</ph>
	
	<p platform="actionscript"><b>注意：</b>此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 <codeph>preventDefault()</codeph>。</p>
	
	<p platform="javascript">该事件流是为 SWF 内容中的显示对象定义的，它使用 ActionScript 3.0 显示对象模型。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopPropagation()"><linktext>flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation"><apiName>stopPropagation</apiName><shortdesc>
	防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。<ph platform="actionscript">此方法不会影响当前节点 (<codeph>currentTarget</codeph>) 中的任何事件侦听器。相比之下，<codeph>stopImmediatePropagation()</codeph> 方法可以防止对当前节点中和后续节点中的事件侦听器进行处理。对此方法的其它调用没有任何效果。可以在事件流的任何阶段中调用此方法。</ph>
	
	<p platform="actionscript"><b>注意：</b>此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 <codeph>preventDefault()</codeph>。</p>
	
	<p platform="javascript">该事件流是为 SWF 内容中的显示对象定义的，它使用 ActionScript 3.0 显示对象模型。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopImmediatePropagation()"><linktext>flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 Event 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个字符串，其中包含 Event 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 Event 对象的所有属性。字符串的格式如下：
	<p><codeph>[Event type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE"><apiName>ACTIVATE</apiName><shortdesc>
	ACTIVATE 常量定义 activate 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ACTIVATE</codeph> 常量定义 <codeph>activate</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p><b>注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>activate</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED"><apiName>ADDED</apiName><shortdesc>
	Event.ADDED 常量定义 added 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>added</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ADDED</codeph> 常量定义 <codeph>added</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p platform="javascript"><codeph>added</codeph> 事件适用于 ActionScript 3.0 显示列表并且与 JavaScript 代码无关。</p>
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>要添加到显示列表中的 DisplayObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE"><apiName>ADDED_TO_STAGE</apiName><shortdesc>
	Event.ADDED_TO_STAGE 常量定义 addedToStage 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addedToStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ADDED_TO_STAGE</codeph> 常量定义 <codeph>addedToStage</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p platform="javascript"><codeph>addedToStage</codeph> 事件适用于 ActionScript 3.0 显示列表并且与 JavaScript 代码无关。</p>
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>DisplayObject 实例将添加到舞台的显示列表中，可直接添加它，也可以添加包含 DisplayObject 实例的子树。如果 DisplayObject 实例将被直接添加，会在此事件之前发生 <codeph>added</codeph> 事件。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL"><apiName>CANCEL</apiName><shortdesc>
	Event.CANCEL 常量定义 cancel 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CANCEL</codeph> 常量定义 <codeph>cancel</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>对已取消其操作的对象的引用。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	Event.CHANGE 常量定义 change 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CHANGE</codeph> 常量定义 <codeph>change</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已修改其值的对象。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR"><apiName>CLEAR</apiName><shortdesc>
	Event.CLEAR 常量定义 clear 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clear</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CLEAR</codeph> 常量定义 <codeph>clear</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>clear</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>注意：</b>TextField 对象<i>不会</i>分派 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。但是，用于扩展 InteractiveObject 类的其它类可以分派这些事件，这些类中包括使用 Flash 文本引擎 (FTE) 构建的组件。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	Event.CLOSE 常量定义 close 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CLOSE</codeph> 常量定义 <codeph>close</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已关闭其连接的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING"><apiName>CLOSING</apiName><shortdesc>
	Event.CLOSING 常量定义 closing 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>closing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CLOSING</codeph> 常量定义 <codeph>closing</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消此事件对象将停止关闭操作。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>要关闭其连接的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	Event.COMPLETE 常量定义 complete 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.COMPLETE</codeph> 常量定义 <codeph>complete</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已完成加载的网络对象。 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT"><apiName>CONNECT</apiName><shortdesc>
	Event.CONNECT 常量定义 connect 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.CONNECT</codeph> 常量定义 <codeph>connect</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已建立网络连接的 Socket 或 XMLSocket 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY"><apiName>COPY</apiName><shortdesc>
	定义 copy 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>copy</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>copy</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>注意：</b>TextField 对象<i>不会</i>分派 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。但是，用于扩展 InteractiveObject 类的其它类可以分派这些事件，这些类中包括使用 Flash 文本引擎 (FTE) 构建的组件。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT"><apiName>CUT</apiName><shortdesc>
	定义 cut 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>cut</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>cut</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>注意：</b>TextField 对象<i>不会</i>分派 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。但是，用于扩展 InteractiveObject 类的其它类可以分派这些事件，这些类中包括使用 Flash 文本引擎 (FTE) 构建的组件。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE"><apiName>DEACTIVATE</apiName><shortdesc>
	Event.DEACTIVATE 常量定义 deactivate 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.DEACTIVATE</codeph> 常量定义 <codeph>deactivate</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p><b>注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>deactivate</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING"><apiName>DISPLAYING</apiName><shortdesc>
	 Event.DISPLAYING 常量定义 displaying 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displaying</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>Event.DISPLAYING</codeph> 常量定义 <codeph>displaying</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	 <p><b>注意：</b>无论目标是否出现在显示列表中，此事件都不会通过“捕获阶段”，而是被直接分派给此目标。</p>
	 <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>将要显示的 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
	Event.ENTER_FRAME 常量定义 enterFrame 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ENTER_FRAME</codeph> 常量定义 <codeph>enterFrame</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p><b>注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>enterFrame</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING"><apiName>EXITING</apiName><shortdesc>
	Event.EXITING 常量定义 exiting 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exiting</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.EXITING</codeph> 常量定义 <codeph>exiting</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消此事件对象将停止退出操作。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>NativeApplication 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME"><apiName>EXIT_FRAME</apiName><shortdesc>
	Event.EXIT_FRAME 常量定义 exitFrame 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.EXIT_FRAME</codeph> 常量定义 <codeph>exitFrame</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p><b>注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>enterFrame</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED"><apiName>FRAME_CONSTRUCTED</apiName><shortdesc>
	Event.FRAME_CONSTRUCTED 常量定义 frameConstructed 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>frameConstructed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.FRAME_CONSTRUCTED</codeph> 常量定义 <codeph>frameConstructed</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p><b>注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>frameConstructed</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN"><apiName>FULLSCREEN</apiName><shortdesc>
	Event.FULL_SCREEN 常量定义 fullScreen 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.FULL_SCREEN</codeph> 常量定义 <codeph>fullScreen</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE"><apiName>HTML_BOUNDS_CHANGE</apiName><shortdesc>
	Event.HTML_BOUNDS_CHANGE 常量定义 htmlBoundsChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlBoundsChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.HTML_BOUNDS_CHANGE</codeph> 常量定义 <codeph>htmlBoundsChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE"><apiName>HTML_DOM_INITIALIZE</apiName><shortdesc>
	Event.HTML_DOM_INITIALIZE 常量定义 htmlDOMInitialize 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlDOMInitialize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.HTML_DOM_INITIALIZE</codeph> 常量定义 <codeph>htmlDOMInitialize</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER"><apiName>HTML_RENDER</apiName><shortdesc>
	Event.HTML_RENDER 常量定义 htmlRender 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlRender</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.HTML_RENDER</codeph> 常量定义 <codeph>htmlRender</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3"><apiName>ID3</apiName><shortdesc>
	Event.ID3 常量定义 id3 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id3</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.ID3</codeph> 常量定义 <codeph>id3</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>加载 MP3 的 Sound 对象，ID3 数据现在可用于此对象。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT"><apiName>INIT</apiName><shortdesc>
	Event.INIT 常量定义 init 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>init</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.INIT</codeph> 常量定义 <codeph>init</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>与所加载的 SWF 文件相关联的 LoaderInfo 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE"><apiName>LOCATION_CHANGE</apiName><shortdesc>
	Event.LOCATION_CHANGE 常量定义 locationChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>locationChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.LOCATION_CHANGE</codeph> 常量定义 <codeph>locationChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>HTMLLoader 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE"><apiName>MOUSE_LEAVE</apiName><shortdesc>
	Event.MOUSE_LEAVE 常量定义 mouseLeave 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseLeave</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.MOUSE_LEAVE</codeph> 常量定义 <codeph>mouseLeave</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage 对象。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE"><apiName>NETWORK_CHANGE</apiName><shortdesc>
	Event.NETWORK_CHANGE 常量定义 networkChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>networkChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.NETWORK_CHANGE</codeph> 常量定义 <codeph>networkChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN"><apiName>OPEN</apiName><shortdesc>
	Event.OPEN 常量用于定义 open 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.OPEN</codeph> 常量用于定义 <codeph>open</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已打开连接的网络对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE"><apiName>PASTE</apiName><shortdesc>
	Event.PASTE 常量定义 paste 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paste</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.PASTE</codeph> 常量定义 <codeph>paste</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>paste</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>注意：</b>TextField 对象<i>不会</i>分派 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。但是，用于扩展 InteractiveObject 类的其它类可以分派这些事件，这些类中包括使用 Flash 文本引擎 (FTE) 构建的组件。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED"><apiName>REMOVED</apiName><shortdesc>
	Event.REMOVED 常量定义 removed 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.REMOVED</codeph> 常量定义 <codeph>removed</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p platform="javascript"><codeph>removed</codeph> 事件适用于 ActionScript 3.0 显示列表并且与 JavaScript 代码无关。</p>
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>要从显示列表中删除的 DisplayObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE"><apiName>REMOVED_FROM_STAGE</apiName><shortdesc>
	Event.REMOVED_FROM_STAGE 常量定义 removedFromStage 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removedFromStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.REMOVED_FROM_STAGE</codeph> 常量定义 <codeph>removedFromStage</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p platform="javascript"><codeph>removedFromStage</codeph> 事件适用于 ActionScript 3.0 显示列表并且与 JavaScript 代码无关。</p>
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>DisplayObject 实例将从舞台的显示列表中删除，可直接删除它，也可以删除包含 DisplayObject 实例的子树。如果 DisplayObject 实例将被直接删除，会在此事件之前发生 <codeph>removed</codeph> 事件。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER"><apiName>RENDER</apiName><shortdesc>
	Event.RENDER 常量定义 render 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.RENDER</codeph> 常量定义 <codeph>render</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p><b>注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；不能取消默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>render</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	Event.RESIZE 常量定义 resize 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.RESIZE</codeph> 常量定义 <codeph>resize</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>Stage 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	Event.SCROLL 常量定义 scroll 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SCROLL</codeph> 常量定义 <codeph>scroll</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已滚动的 TextField 对象。<codeph>target</codeph> 属性不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT"><apiName>SELECT</apiName><shortdesc>
	Event.SELECT 常量定义 select 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SELECT</codeph> 常量定义 <codeph>select</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry> 对象，已在其中选定了一个项目。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc>
	Event.SELECT_ALL 常量定义 selectAll 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SELECT_ALL</codeph> 常量定义 <codeph>selectAll</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>具有为 <codeph>selectAll</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p><b>注意：</b>TextField 对象<i>不会</i>分派 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph>clear</codeph>、<codeph>copy</codeph>、<codeph>cut</codeph>、<codeph>paste</codeph> 或 <codeph>selectAll</codeph> 事件。但是，用于扩展 InteractiveObject 类的其它类可以分派这些事件，这些类中包括使用 Flash 文本引擎 (FTE) 构建的组件。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE"><apiName>SOUND_COMPLETE</apiName><shortdesc>
	Event.SOUND_COMPLETE 常量定义 soundComplete 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>soundComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.SOUND_COMPLETE</codeph> 常量定义 <codeph>soundComplete</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>其中声音已播放完毕的 SoundChannel 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE"><apiName>TAB_CHILDREN_CHANGE</apiName><shortdesc>
	Event.TAB_CHILDREN_CHANGE 常量定义 tabChildrenChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabChildrenChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.TAB_CHILDREN_CHANGE</codeph> 常量定义 <codeph>tabChildrenChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>其 tabChildren 标志已更改的对象。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE"><apiName>TAB_ENABLED_CHANGE</apiName><shortdesc>
	Event.TAB_ENABLED_CHANGE 常量定义 tabEnabledChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabEnabledChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.TAB_ENABLED_CHANGE</codeph> 常量定义 <codeph>tabEnabledChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p platform="javascript"><codeph>tabEnabledChange</codeph> 事件适用于 ActionScript 3.0 显示列表并且与 JavaScript 代码无关。</p>
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>其 tabEnabled 标志已更改的 InteractiveObject。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE"><apiName>TAB_INDEX_CHANGE</apiName><shortdesc>
	Event.TAB_INDEX_CHANGE 常量定义 tabIndexChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabIndexChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.TAB_INDEX_CHANGE</codeph> 常量定义 <codeph>tabIndexChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p platform="javascript"><codeph>tabIndexChange</codeph> 事件适用于 ActionScript 3.0 显示列表并且与 JavaScript 代码无关。</p>
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>其 tabIndex 已更改的对象。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
	Event.UNLOAD 常量定义 unload 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.UNLOAD</codeph> 常量定义 <codeph>unload</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>LoaderInfo 对象与将被卸载或替换的 SWF 文件相关联。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE"><apiName>USER_IDLE</apiName><shortdesc>
	Event.USER_IDLE 常量定义 userIdle 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userIdle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.USER_IDLE</codeph> 常量定义 <codeph>userIdle</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT"><apiName>USER_PRESENT</apiName><shortdesc>
	Event.USER_PRESENT 常量定义 userPresent 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userPresent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>Event.USER_PRESENT</codeph> 常量定义 <codeph>userPresent</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>target</codeph></entry><entry>NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
	指示事件是否为冒泡事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示事件是否为冒泡事件。如果事件可以冒泡，则此值为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
	
	<p platform="javascript">事件冒泡是为 SWF 内容中的显示对象定义的，它使用 ActionScript 3.0 显示对象模型。<codeph>bubbles</codeph> 属性仅在 ActionScript 3.0 代码中有效。</p>
	
	<p platform="actionscript">发生事件时，该事件在事件流的三个阶段中移动：捕获阶段，该阶段从显示列表层次结构的顶部流动到目标节点之前的节点；目标阶段，该阶段只包括目标节点；冒泡阶段，该阶段从目标节点的后续节点沿显示列表层次结构向上往回流动。</p>
	
	<p platform="actionscript">某些事件（例如 <codeph>activate</codeph> 和 <codeph>unload</codeph> 事件）没有冒泡阶段。对于没有冒泡阶段的事件，<codeph>bubbles</codeph> 属性的值为 <codeph>false</codeph>。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
	指示是否可以阻止与事件相关联的行为。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示是否可以阻止与事件相关联的行为。如果可以取消该行为，则此值为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
	当前正在使用某个事件侦听器处理 Event 对象的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	当前正在使用某个事件侦听器处理 Event 对象的对象。例如，如果用户单击“确定”按钮，则当前目标可以是包含该按钮的节点，也可以是它的已为该事件注册了事件侦听器的始祖之一。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
	事件流中的当前阶段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	事件流中的当前阶段。此属性可以包含以下数值：
	<ul>
	    <li>  捕获阶段 (<codeph>EventPhase.CAPTURING_PHASE</codeph>)。</li>
	    <li>  目标阶段 (<codeph>EventPhase.AT_TARGET</codeph>)。</li>
	    <li>  冒泡阶段 (<codeph>EventPhase.BUBBLING_PHASE</codeph>)。</li></ul>
	
	<p platform="javascript">该事件流是为 SWF 内容中的显示对象定义的，它使用 ActionScript 3.0 显示对象模型。<codeph>eventPhase</codeph> 属性仅在 ActionScript 3.0 代码中有效。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get"><apiName>target</apiName><shortdesc>
	事件目标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	事件目标。此属性包含目标节点。例如，如果用户单击“确定”按钮，则目标节点就是包含该按钮的显示列表节点。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get"><apiName>type</apiName><shortdesc>
	事件的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	事件的类型。类型区分大小写。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc> 
  当播放器请求新的音频数据时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
  当播放器请求新的音频数据时分派。 
 
  <p>在需要管理动态生成的音频时使用此事件。在此环境中，Sound 对象实际上并不包含声音数据。相反，该对象将用作声音数据的套接字，声音数据通过使用您分配给此事件的函数流入该对象。 </p>
 
  <p>在您的函数中使用 <codeph>ByteArray.writeFloat()</codeph> 方法来写入到包含要播放的已采样数据的 ByteArray 对象 (<codeph>event.data</codeph>)。</p>
 
  <p>当您调用 <codeph>Sound.play()</codeph> 时，播放器将开始调用事件处理函数并请求包含声音样本的数据块。播放声音时播放器将继续发送事件，直至您停止提供数据或调用 <codeph>SoundChannel.stop()</codeph>。</p>
 
  <p>事件的滞后时间在不同的平台上会有所变化，并且在将来版本的 Flash Player 中也将改变。请不要依赖某个特定的滞后时间，而应计算出相应的滞后时间。要在 ActionScript 中计算滞后时间，请使用公式：<codeph>((SampleDataEvent.position/44.1) - SoundChannelObject.position)</codeph>。</p>
 
  <p>在 <codeph>SampleDataEvent</codeph> 对象中提供 2048 到 8192 个样本。为了获得最佳性能，请尽可能多地提供样本。提供的样本越少，在播放过程中就越有可能出现单击和弹出事件。此行为在不同的平台上会有所不同，并且会在各种情况下发生。例如，当调整浏览器的大小时。在仅提供 2048 个样本时，您可能会编写可在一个平台上运行的代码，但在不同的平台上运行时，同样的代码可能无法正常工作。要尽可能缩短滞后时间，请考虑允许用户选择数据量。</p>
 
  <p>如果提供的样本数少于 2048 个，则 Flash Player 将播放其余的样本，然后停止声音，就像到达了声音文件的末尾，并生成 SoundComplete 事件。</p>
 
  <p>也可以使用 <codeph>Sound.extract()</codeph> 方法来提取 Sound 对象中的数据，然后便可将数据写入到动态流以进行播放。  </p>
 
  <p>将此事件与 Sound 对象一起使用时，启用的其它 Sound 方法仅包括 <codeph>Sound.extract()</codeph> 和 <codeph>Sound.play()</codeph>。调用任何其它方法或属性将导致“调用无效”异常。仍启用 SoundChannel 对象的所有方法和属性。</p>
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as"> 下面的示例播放简单的正弦波。
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc>
		创建事件对象以包含有关音频数据事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。此值为 <codeph>Event.SAMPLE_DATA</codeph>。
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。 
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。 
		</apiDesc></apiParam><apiParam><apiItemName>theposition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>数据在音频流中的位置。
		</apiDesc></apiParam><apiParam><apiItemName>thedata</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>数据的字节数组。
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		创建事件对象以包含有关音频数据事件的信息。将 Event 对象作为参数传递给事件侦听器。 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone"><apiName>clone</apiName><shortdesc>
		创建 SampleDataEvent 对象的副本，并设置每个属性的值以匹配原始对象的属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个新的 SampleDataEvent 对象，其属性值与原始对象的属性值匹配。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		创建 SampleDataEvent 对象的副本，并设置每个属性的值以匹配原始对象的属性值。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString"><apiName>toString</apiName><shortdesc>
		返回一个字符串，其中包含 SampleDataEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>包含 <codeph>SampleDataEvent</codeph> 对象的所有属性的字符串。
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		返回一个字符串，其中包含 SampleDataEvent 对象的所有属性。字符串的格式如下：
		<p><codeph>[SampleDataEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> theposition=<i>value</i> thedata=<i>value</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA"><apiName>SAMPLE_DATA</apiName><shortdesc>
		定义 SampleDataEvent 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sampleData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		定义 <codeph>SampleDataEvent</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
		<p>此事件具有以下属性：</p>
		<adobetable class="innertable">
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>position</codeph></entry><entry>从中提供音频数据的点。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get"><apiName>data</apiName><shortdesc>
		音频流中的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		音频流中的数据。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get"><apiName>position</apiName><shortdesc>
		数据在音频流中的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		数据在音频流中的位置。
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 在调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将分派 invoke 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 在调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将分派 <codeph>invoke</codeph> 事件。 
	 
	 <p>在启动应用程序时，NativeApplication 对象始终分派 <codeph>invoke</codeph> 事件，但也可以在其它时间分派此事件。例如，当用户激活与正在运行的应用程序关联的文件时，此应用程序将会分派另一个 InvokeEvent。</p>
	 
	 <p>只能启动特定应用程序的单个实例。随后尝试启动该应用程序将导致由正在运行的实例的 NativeApplication 对象分派一个新的 <codeph>invoke</codeph> 事件。应用程序负责处理此事件并采取适当的动作，例如打开一个新应用程序窗口以显示文件中的数据。</p>
	  
	 <p>InvokeEvent 由 NativeApplication 对象 (<codeph>NativeApplication.nativeApplication</codeph>) 分派。要接收 <codeph>invoke</codeph> 事件，请调用 NativeApplication 对象的 <codeph>addEventListener()</codeph> 方法。当某个事件侦听器针对 <codeph>invoke</codeph> 事件进行注册时，它还会接收到在注册前发生的所有 <codeph>invoke</codeph> 事件。这些先前的事件会在对 <codeph>addEventListener()</codeph> 的调用返回后（但并不一定在注册后可能分派的新 <codeph>invoke</codeph> 事件之前）进行分派。因此，不应依赖于分派顺序。</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#BrowserInvokeEvent"><linktext>flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier>flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 InvokeEvent 类的构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型，可以作为 <codeph>Event.type</codeph> 访问。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>对于 InvokeEvent 对象设置为 <codeph>false</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>对于 InvokeEvent 对象设置为 <codeph>false</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>dir</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiData>null</apiData><apiDesc>解析 <codeph>arguments</codeph> 数组中的任何相对路径时应使用的目录。
	 </apiDesc></apiParam><apiParam><apiItemName>argv</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>要传递给应用程序的参数（字符串）数组。
	 </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>standard</apiData><apiDesc>事件的原因，<codeph>InvokeEventReason.LOGIN</codeph> 或 <codeph>InvokeEventReason.STANDARD</codeph>。（从 AIR 1.5.1 版开始提供此参数。） 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 InvokeEvent 类的构造函数。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 创建此事件的新副本。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>事件的副本。
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 创建此事件的新副本。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE"><apiName>INVOKE</apiName><shortdesc>
	 InvokeEvent.INVOKE 常量定义 InvokeEvent 对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>InvokeEvent.INVOKE</codeph> 常量定义 InvokeEvent 对象的 <codeph>type</codeph> 属性值。
	 
     <p>InvokeEvent 对象具有以下属性：</p>
 	 <adobetable class="innertable">
        
	     
	    
	    
	     
	    
	     
	        
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>在此调用过程中传递的字符串参数的数组。</entry></row><row><entry><codeph>currentDirectory</codeph></entry><entry>File 对象，表示解析 arguments 数组中的任何相对路径时应使用的目录。</entry></row><row><entry><codeph>reason</codeph></entry><entry>指示 invoke 事件分派原因的代码，原因可能是应用程序在系统登录时自动启动 (<codeph>InvokeEventReason.LOGIN</codeph>)，或是其它原因 (<codeph>InvokeEventReason.STANDARD</codeph>)。从 AIR 1.5.1 版开始提供。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理此 InvokeEvent 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>始终是 NativeApplication 对象。 
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 在此调用过程中传递的字符串参数的数组。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 在此调用过程中传递的字符串参数的数组。如果是命令行调用，则该数组将包含命令行参数（<i>除</i> 进程名称之外）。
		 
		 <p><i>注意：</i>当在 Mac<sup>®</sup> OS X 上选择并打开多个文件时，AIR 将分派单个 <codeph>invoke</codeph> 事件，该事件在 <codeph>arguments</codeph> 数组中包含所有所选文件的名称。但是，在 Windows <sup>®</sup> 和 Linux 中，AIR 将为 <codeph>arguments</codeph> 数组中只包含该文件名的每个所选文件分派一个单独的 <codeph>invoke</codeph> 事件。
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get"><apiName>currentDirectory</apiName><shortdesc>
		 解析参数数组中的任何相对路径时应使用的目录。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
		 解析 <codeph>arguments</codeph> 数组中的任何相对路径时应使用的目录。 
		 
		 <p>如果从命令行启动应用程序，则通常将此属性设置为启动应用程序的命令行解释程序的当前工作目录。如果从 GUI 解释程序启动应用程序，则此属性通常为文件系统根目录。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get"><apiName>reason</apiName><shortdesc>
		 导致此 InvokeEvent 的原因。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 导致此 InvokeEvent 的原因。此属性指示，应用程序是由用户手动启动，还是在系统登录时自动启动。可能的值枚举为 <codeph>InvokeEventReason</codeph> 类中的常量：
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>InvokeEventReason 常量</entry><entry>意义</entry></row></thead><tbody><row>
		 	<entry><codeph>LOGIN</codeph></entry>
		 	<entry>登录时自动启动。</entry>
		 
		 </row><row>
		 	<entry><codeph>STANDARD</codeph></entry>
		 	<entry>由于其它原因而启动。</entry>
		 
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
在网络请求返回 HTTP 状态代码时，应用程序将分派 HTTPStatusEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
在网络请求返回 HTTP 状态代码时，应用程序将分派 HTTPStatusEvent 对象。 

<p>在错误或完成事件之前，将始终发送 HTTPStatusEvent 对象。HTTPStatusEvent 对象不一定指示错误条件；它仅反映网络堆栈提供的 HTTP 状态代码（如果有的话）。<ph platform="actionscript">一些 Flash Player 环境可能无法检测到 HTTP 状态代码；在这些情况下，将总是报告状态代码 0。</ph> </p>

<p><ph platform="actionscript">在 Flash Player 中，只有一种类型的 HTTPStatus 事件：<codeph>httpStatus</codeph>。</ph>在 AIR 运行时中，FileReference、URLLoader 或 URLStream 可以注册侦听 <codeph>httpResponseStatus</codeph>，该事件包括 <codeph>responseURL</codeph> 和 <codeph>responseHeaders</codeph> 属性。这些属性在 <codeph>httpStatus</codeph> 事件中不进行定义。</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as"> 以下示例尝试从根 Web 目录 http://www.[yourDomain].com 加载一个不存在的文件，这会分派状态为 404 的 <codeph>httpStatusHandler</codeph> 事件，表示找不到文件。<codeph>httpStatusHandler</codeph> 事件由 <codeph>httpStatusHandler()</codeph> 进行处理，并仅输出两行事件信息。
 
 <p> <b>注意：</b> 
 <ol>
    <li>您需要通过将“本地回放安全性”设置为“只访问网络”来编译 SWF 文件，以在此例中生成 <codeph>securityError</codeph> 事件。</li>
    <li>您需要一台在 http://www.[yourDomain].com 上运行并侦听端口 80 的服务器，否则您将收到状态代码为 0 的 <codeph>httpStatusHandler</codeph> 事件，而不是状态代码为 404 的事件。</li>
    <li>在 http://www.[yourDomain].com 的根 Web 目录下不能有名为 MissingFile.html 的文件，否则您将收不到正确的 <codeph>httpStatusHandler</codeph> 事件。</li>
 </ol>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关 HTTP 状态事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 HTTPStatus 事件：<codeph>HTTPStatusEvent.HTTP_STATUS</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>数字状态。事件侦听器可以通过 <codeph>status</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>HTTPStatusEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关 HTTP 状态事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS"><linktext>HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 HTTPStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 HTTPStatusEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 HTTPStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 HTTPStatusEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 HTTPStatusEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 HTTPStatusEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[HTTPStatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> status=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS"><apiName>HTTP_RESPONSE_STATUS</apiName><shortdesc>
	与 httpStatus 事件不同，httpResponseStatus 事件在所有响应数据之前传送。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpResponseStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	与 <codeph>httpStatus</codeph> 事件不同，<codeph>httpResponseStatus</codeph> 事件在传送任何响应数据之前传送。此外，<codeph>httpResponseStatus</codeph> 事件还包括 <codeph>responseHeaders</codeph> 和 <codeph>responseURL</codeph> 属性的值（对于 <codeph>httpStatus</codeph>，这些属性未定义）。请注意，在发送任何 <codeph>complete</codeph> 或 <codeph>error</codeph> 事件之前还将发送 <codeph>httpResponseStatus</codeph>（如果有）。 
	
	<p><codeph>HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph> 常量定义 <codeph>httpResponseStatus</codeph> 事件对象的 <codeph>type</codeph> 属性值。 </p>
	
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>responseURL</codeph></entry><entry>从中返回响应的 URL。</entry></row><row><entry><codeph>responseHeaders</codeph></entry><entry>响应以 URLRequestHeader 对象的数组形式返回的响应标头。</entry></row><row><entry><codeph>status</codeph></entry><entry>由服务器返回的 HTTP 状态代码。</entry></row><row><entry><codeph>target</codeph></entry><entry>接收 HTTP 状态代码的网络对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS"><apiName>HTTP_STATUS</apiName><shortdesc>
	HTTPStatusEvent.HTTP_STATUS 常量定义 httpStatus 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>HTTPStatusEvent.HTTP_STATUS</codeph> 常量定义 <codeph>httpStatus</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>status</codeph></entry><entry>由服务器返回的 HTTP 状态代码。</entry></row><row><entry><codeph>target</codeph></entry><entry>接收 HTTP 状态代码的网络对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get"><apiName>responseHeaders</apiName><shortdesc>
	 响应以 URLRequestHeader 对象的数组形式返回的响应标头。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 响应以 URLRequestHeader 对象的数组形式返回的响应标头。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get"><apiName>responseURL</apiName><shortdesc>
	 从中返回响应的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 从中返回响应的 URL。对于重定向，这将与请求 URL 不同。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get"><apiName>status</apiName><shortdesc>
	由服务器返回的 HTTP 状态代码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	由服务器返回的 HTTP 状态代码。例如，值为 404 表示服务器尚未找到所请求 URI 的匹配项。在 HTTP 规范（地址：<xref href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">ftp://ftp.isi.edu/in-notes/rfc2616.txt</xref>）的 10.4 和 10.5 节中，可以找到 HTTP 状态代码。
	
	<p>如果<ph platform="actionscript"> Flash Player 或</ph> AIR 无法从服务器获取状态代码或无法与服务器进行通信，则会将默认值 0 传递到您的代码。<ph platform="actionscript">在任何播放器中都可生成值 0（例如，如果请求的 URL 格式不正确），并且当 Flash Player 插件在以下不将 HTTP 状态代码传递到播放器的浏览器中运行时，值 0 始终由 Flash Player 插件生成：Netscape、Mozilla、Safari、Opera 和用于 Macintosh 的 Internet Explorer。</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
	 在 File 对象的 getDirectoryListingAsync() 方法调用成功枚举一组文件和目录时，或在用户调用 browseForOpenMultiple() 方法后选择文件时，File 对象将分派 FileListEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>在成功调用 getDirectoryListingAsync() 或 browseForOpenMultiple() 方法后，File 对象将分派 FileListEvent 对象。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 在 File 对象的 <codeph>getDirectoryListingAsync()</codeph> 方法调用成功枚举一组文件和目录时，或在用户调用 <codeph>browseForOpenMultiple()</codeph> 方法后选择文件时，File 对象将分派 FileListEvent 对象。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
		FileListEvent 对象的构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定该事件对象是否冒泡（对于 FileListEvent 对象为 <codeph>false</codeph>）。
		
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象（对于 FileListEvent 对象为 <codeph>false</codeph>）。
		
		</apiDesc></apiParam><apiParam><apiItemName>files</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>File 对象的数组。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		FileListEvent 对象的构造函数。 
		
		<p> 运行时使用此类创建 FileListEvent 对象。您不能在代码中直接使用此构造函数。</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING"><apiName>DIRECTORY_LISTING</apiName><shortdesc>
		 FileListEvent.DIRECTORY_LISTING 常量定义 directoryListing 事件的事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoryListing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>FileListEvent.DIRECTORY_LISTING</codeph> 常量定义 <codeph>directoryListing</codeph> 事件的事件对象的 <codeph>type</codeph> 属性值。
		 
		 <p>此事件具有以下属性：</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>files</codeph></entry><entry>表示找到的文件和目录的 File 对象的数组。</entry></row><row><entry><codeph>target</codeph></entry><entry>FileListEvent 对象。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE"><apiName>SELECT_MULTIPLE</apiName><shortdesc>
		 FileListEvent.SELECT_MULTIPLE 常量定义 selectMultiple 事件的事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectMultiple</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>FileListEvent.SELECT_MULTIPLE</codeph> 常量定义 <codeph>selectMultiple</codeph> 事件的事件对象的 <codeph>type</codeph> 属性值。
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>files</codeph></entry><entry>表示所选文件的 File 对象的数组。</entry></row><row><entry><codeph>target</codeph></entry><entry>FileListEvent 对象。</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files"><apiName>files</apiName><shortdesc>
		 表示已找到或已选择的文件或目录的 File 对象的数组。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 表示已找到或已选择的文件或目录的 File 对象的数组。 
		 
		 <p>对于 <codeph>File.getDirectoryListingAsync()</codeph> 方法，这是由调用该方法的 File 对象表示的在根目录级别找到的文件和目录的列表。对于 <codeph>File.browseForOpenMultiple()</codeph> 方法，这是由用户选择的文件的列表。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
 在窗口的大小或位置发生更改时，NativeWindow 对象将分派 NativeWindowBoundsEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>更改窗口大小和/或位置的 NativeWindow 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 在窗口的大小或位置发生更改时，NativeWindow 对象将分派 NativeWindowBoundsEvent 对象。有四种类型的事件：
 <ul>
     <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING"><linktext>flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE"><linktext>flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING"><linktext>flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE"><linktext>flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving"><apiName>moving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing"><apiName>resizing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
    使用与窗口范围事件有关的特定信息创建 Event 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：
    <ul>
        <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 指示 Event 对象是否参与事件流的冒泡阶段。
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否可以取消 Event 对象。
    </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>指示最近的更改或未处理的更改之前的范围。
    </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>指示最近的更改或未处理的更改之后的范围。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    使用与窗口范围事件有关的特定信息创建 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone"><apiName>clone</apiName><shortdesc>
    创建 NativeWindowBoundsEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 NativeWindowBoundsEvent 对象。
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    创建 NativeWindowBoundsEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString"><apiName>toString</apiName><shortdesc>
    返回一个字符串，其中包含 NativeWindowBoundsEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 NativeWindowBoundsEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    返回一个字符串，其中包含 NativeWindowBoundsEvent 对象的所有属性。该字符串具有以下格式：
    <p><codeph>[NativeWindowBoundsEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> previousDisplayState=<i>value</i> currentDisplayState=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
    定义 move 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>move</codeph> 事件对象的 <codeph>type</codeph> 属性值。此事件具有以下属性：
    <adobetable class="innertable">
        
         
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>窗口的新范围。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>窗口的旧范围。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚更改状态的 NativeWindow 对象。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING"><apiName>MOVING</apiName><shortdesc>
    定义 moving 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moving</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>moving</codeph> 事件对象的 <codeph>type</codeph> 属性值。此事件具有以下属性：
    <adobetable class="innertable">
        
         
         
        
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>未处理的更改之后的窗口范围。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>未处理的更改之前的窗口范围。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消该事件会阻止窗口移动。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚更改状态的 NativeWindow 对象。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
    定义 resize 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>resize</codeph> 事件对象的 <codeph>type</codeph> 属性值。此事件具有以下属性：
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>窗口的新范围。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>窗口的旧范围。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚更改状态的 NativeWindow 对象。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
    定义 resizing 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>resizing</codeph> 事件对象的 <codeph>type</codeph> 属性值。此事件具有以下属性：
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>未处理的更改之后的窗口范围。</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>未处理的更改之前的窗口范围。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚更改状态的 NativeWindow 对象。 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；取消该事件会阻止窗口移动。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get"><apiName>afterBounds</apiName><shortdesc>
     更改之后的窗口范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     更改之后的窗口范围。
       
     <p>如果事件为 <codeph>moving</codeph> 或 <codeph>resizing</codeph>，则表示范围尚未更改；在未取消该事件时，<codeph>afterBounds</codeph> 指示新范围。如果事件为 <codeph>move</codeph> 或 <codeph>resize</codeph>，则 <codeph>afterBounds</codeph> 指示新范围。
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get"><apiName>beforeBounds</apiName><shortdesc>
     更改之前的窗口范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     更改之前的窗口范围。  
     
     <p>如果事件为 <codeph>moving</codeph> 或 <codeph>resizing</codeph>，则表示范围尚未更改；<codeph>beforeBounds</codeph> 反映当前范围。如果事件为 <codeph>move</codeph> 或 <codeph>resize</codeph>，则 <codeph>beforeBounds</codeph> 指示原始值。
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
SystemTrayIcon 对象分派 ScreenMouseEvent 类型的事件以响应鼠标交互。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ScreenMouseEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
SystemTrayIcon 对象分派 ScreenMouseEvent 类型的事件以响应鼠标交互。

<p>ScreenMouseEvent 对象扩展 MouseEvent 类以提供两个附加属性：<codeph>screenX</codeph> 和 <codeph>screenY</codeph>，它们报告相对于主桌面屏幕而不是相对于应用程序窗口或舞台的鼠标坐标。</p>
 
</apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#SystemTrayIcon"><linktext>flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown"><apiName>rightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
	创建一个 ScreenMouseEvent 对象，其中包含屏幕坐标中的鼠标位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>屏幕坐标中单击的 X 位置。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>屏幕坐标中单击的 Y 位置。
	</apiDesc></apiParam><apiParam><apiItemName>screenX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>设置为 <codeph>false</codeph>，因为屏幕鼠标事件从不会冒泡。 
	</apiDesc></apiParam><apiParam><apiItemName>screenY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>设置为 <codeph>false</codeph>，因为没有要取消的默认行为。
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>在 Windows 或 Linux 中，指示在发生此事件时是否已按下 Ctrl 键。在 Mac 中，指示是否已按下 Ctrl 键或 Command 键。
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>设置为 <codeph>true</codeph> 指示发生此事件时按下了 Alt 键。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>设置为 <codeph>true</codeph> 指示发生此事件时按下了 Shift 键。
	</apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>设置为 <codeph>true</codeph> 指示发生此事件时按下了一个鼠标按键。
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已按下 Command 键（仅限 Mac）。
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已按下 Ctrl 或 Control 键。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ScreenMouseEvent 对象的构造函数。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 ScreenMouseEvent 对象，其中包含屏幕坐标中的鼠标位置。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 ScreenMouseEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 ScreenMouseEvent 对象。
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 ScreenMouseEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 ScreenMouseEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 ScreenMouseEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 ScreenMouseEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[ScreenMouseEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> status=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	ScreenMouseEvent.CLICK 常量定义 click 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.CLICK</codeph> 常量定义 <codeph>click</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下相关属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>事件发生点在屏幕坐标中的水平坐标。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>事件发生点在屏幕坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	ScreenMouseEvent.MOUSE_DOWN 常量定义 mouseDown 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.MOUSE_DOWN</codeph> 常量定义 <codeph>mouseDown</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下相关属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>事件发生点在屏幕坐标中的水平坐标。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>事件发生点在屏幕坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	ScreenMouseEvent.MOUSE_UP 常量定义 mouseUp 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.MOUSE_UP</codeph> 常量定义 <codeph>mouseUp</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下相关属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>事件发生点在屏幕坐标中的水平坐标。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>事件发生点在屏幕坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	ScreenMouseEvent.RIGHT_CLICK 常量定义 rightClick 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.RIGHT_CLICK</codeph> 常量定义 <codeph>rightClick</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下相关属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>事件发生点在屏幕坐标中的水平坐标。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>事件发生点在屏幕坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	ScreenMouseEvent.RIGHT_MOUSE_DOWN 常量定义 rightMouseDown 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph> 常量定义 <codeph>rightMouseDown</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下相关属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>事件发生点在屏幕坐标中的水平坐标。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>事件发生点在屏幕坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	ScreenMouseEvent.RIGHT_MOUSE_UP 常量定义 rightMouseUp 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ScreenMouseEvent.RIGHT_MOUSE_UP</codeph> 常量定义 <codeph>rightMouseUp</codeph> 事件对象的 <codeph>type</codeph> 属性的值。 
	
	<p>此事件具有以下相关属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry>如果按下鼠标主按键，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry>在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph>true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>commandKey</codeph></entry><entry>在 Mac 中，如果 Command 键处于活动状态，则为 <codeph>true</codeph>；如果处于非活动状态，则为 <codeph>false</codeph>。在 Windows 中始终为 <codeph>false</codeph>。</entry></row><row><entry><codeph>controlKey</codeph></entry><entry>如果 Ctrl 或 Control 键处于活动状态，则为 <codeph>true</codeph>，如果处于非活动状态，则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>screenX</codeph></entry><entry>事件发生点在屏幕坐标中的水平坐标。</entry></row><row><entry><codeph>screenY</codeph></entry><entry>事件发生点在屏幕坐标中的垂直坐标。</entry></row><row><entry><codeph>target</codeph></entry><entry>指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
	屏幕坐标中单击的 X 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	屏幕坐标中单击的 X 位置。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
	屏幕坐标中单击的 Y 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	屏幕坐标中单击的 Y 位置。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
    当尝试播放使用数字权限管理 (DRM) 加密的内容（需要用户凭据以进行身份验证）时，NetStream 对象将分派 DRMAuthenticateEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>启用 DRM 的对象的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
    当尝试播放使用数字权限管理 (DRM) 加密的内容（需要用户凭据以进行身份验证）时，NetStream 对象将分派 DRMAuthenticateEvent 对象。 
	<p>
	DRMAuthenticateEvent 处理函数负责收集所需的凭据（如用户名、密码和类型）并将值传递给 <codeph>NetStream.setDRMAuthenticationCredentials()</codeph> 方法以进行身份验证。每个 AIR 应用程序都必须提供用于获取用户凭据的机制。例如，应用程序可以为用户提供一个简单的用户界面以输入用户名和密码值，以及类型值（可选）。  
	</p> 
	<p>
	如果用户身份验证失败，则应用程序将重新尝试身份验证并为 NetStream 对象分派一个新的 DRMAuthenticateEvent 事件。
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>flash.net.NetStream.setDRMAuthenticationCredentials()</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE"><linktext>DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
 	    创建一个 Event 对象，其中包含有关 DRM 验证事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 DRMAuthenticate 事件：<codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>。
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam><apiItemName>header</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>服务器提供的加密内容文件标头。
  		</apiDesc></apiParam><apiParam><apiItemName>userPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc> 服务器提供的用户名凭据提示。
		</apiDesc></apiParam><apiParam><apiItemName>passPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>服务器提供的密码凭据提示。
		</apiDesc></apiParam><apiParam><apiItemName>urlPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>服务器提供的要显示的 URL 提示。
		</apiDesc></apiParam><apiParam><apiItemName>authenticationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>指示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。
		</apiDesc></apiParam><apiParam><apiItemName>netstream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiData>null</apiData><apiDesc>启动此事件的 NetStream 对象。
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	    创建一个 Event 对象，其中包含有关 DRM 验证事件的特定信息。将 Event 对象作为参数传递给事件侦听器。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone"><apiName>clone</apiName><shortdesc>
		创建 DRMAuthenticateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 DRMAuthenticateEvent 对象。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		创建 DRMAuthenticateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString"><apiName>toString</apiName><shortdesc>
		返回一个字符串，其中包含 DRMAuthenticateEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 DRMAuthenticateEvent 对象的所有属性。
		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		返回一个字符串，其中包含 DRMAuthenticateEvent 对象的所有属性。字符串的格式如下： 
     	<p><codeph>[DRMAuthenticateEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> header=<i>value</i> usernamePrompt=<i>value</i> passwordPrompt=<i>value</i> urlPrompt=<i>value</i>] authenticationType=<i>value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM"><apiName>AUTHENTICATION_TYPE_DRM</apiName><shortdesc>
		DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM 常量定义 DRMAuthenticateEvent 对象的 authenticationType 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drm</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph> 常量定义 DRMAuthenticateEvent 对象的 <codeph>authenticationType</codeph> 属性的值。 
		
		<p>此事件具有以下属性：</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>指示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>header</codeph></entry><entry>服务器提供的加密内容文件标头。</entry></row><row><entry><codeph>netstream</codeph></entry><entry>启动此事件的 NetStream 对象。</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>服务器提供的密码凭据提示。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream 对象。</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>服务器提供的要显示的 URL 提示。</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>服务器提供的用户名凭据提示。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY"><apiName>AUTHENTICATION_TYPE_PROXY</apiName><shortdesc>
		DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY 常量定义 DRMAuthenticateEvent 对象的 authenticationType 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proxy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph> 常量定义 DRMAuthenticateEvent 对象的 <codeph>authenticationType</codeph> 属性的值。 
		
		<p>此事件具有以下属性：</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>指示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>header</codeph></entry><entry>服务器提供的加密内容文件标头。</entry></row><row><entry><codeph>netstream</codeph></entry><entry>启动此事件的 NetStream 对象。</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>服务器提供的密码凭据提示。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream 对象。</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>服务器提供的要显示的 URL 提示。</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>服务器提供的用户名凭据提示。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE"><apiName>DRM_AUTHENTICATE</apiName><shortdesc>
		DRMAuthenticateEvent.DRM_AUTHENTICATE 常量定义 DRMAuthenticateEvent 对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmAuthenticate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> 常量定义 DRMAuthenticateEvent 对象的 <codeph>type</codeph> 属性的值。 
		
		<p>此事件具有以下属性：</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>指示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> 指示没有要取消的默认行为。</entry></row><row><entry><codeph>header</codeph></entry><entry>服务器提供的加密内容文件标头。</entry></row><row><entry><codeph>netstream</codeph></entry><entry>启动此事件的 NetStream 对象。</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>服务器提供的密码凭据提示。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream 对象。</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>服务器提供的要显示的 URL 提示。</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>服务器提供的用户名凭据提示。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get"><apiName>authenticationType</apiName><shortdesc>
		指示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的验证，还是用于针对代理服务器的验证。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		指示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的验证，还是用于针对代理服务器的验证。例如，<codeph>“proxy”</codeph>选项允许应用程序针对代理服务器进行身份验证（如果企业要求用户通过此步骤后才能访问 Internet）。除非使用匿名身份验证，否则在代理身份验证之后，用户仍需要针对 FMRMS 进行身份验证才能获取凭证并播放内容。您可以再次与<codeph>“drm”</codeph>选项一起使用 <codeph>setDRMAuthenticationcredentials()</codeph> 以针对 FMRMS 进行身份验证。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get"><apiName>header</apiName><shortdesc>
		服务器提供的加密内容文件标头。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		服务器提供的加密内容文件标头。它包含有关加密内容的上下文的信息。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get"><apiName>netstream</apiName><shortdesc>
		启动此事件的 NetStream 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc>
		启动此事件的 NetStream 对象。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get"><apiName>passwordPrompt</apiName><shortdesc>
		服务器提供的密码凭据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		服务器提供的密码凭据提示。该字符串可以包括所需密码的类型说明。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get"><apiName>urlPrompt</apiName><shortdesc>
		服务器提供的 URL 字符串提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		服务器提供的 URL 字符串提示。该字符串可以提供要将用户名和密码发送到的位置。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get"><apiName>usernamePrompt</apiName><shortdesc>
		服务器提供的用户名凭据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		服务器提供的用户名凭据提示。该字符串可以包括所需用户名的类型说明。例如，内容提供程序可能需要电子邮件地址作为用户名。
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
 当用户打开上下文菜单或与上下文菜单交互时，InteractiveObject 对象将分派 ContextMenuEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ContextMenuEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 当用户打开上下文菜单或与上下文菜单交互时，InteractiveObject 对象将分派 ContextMenuEvent 对象。有两种类型的 ContextMenuEvent 对象：
 <ul>
   <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
   <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as"> 以下示例使用 <codeph>ContextMenuEventExample</codeph> 类从舞台中删除默认的上下文菜单项，并添加能够更改舞台上正方形颜色的新菜单项。该示例执行下列任务：
 
 <ol>
     <li>声明 <codeph>myContextMenu</codeph> 属性，然后将其分配给新的 ContextMenu 对象并声明 <codeph>redRectangle</codeph> 属性（属于 Sprite 类型）。</li>
     <li>调用 <codeph>removeDefaultItems()</codeph> 方法。此方法删除除“打印”之外的所有内置上下文菜单项。</li>
 
     <li>调用 <codeph>addCustomMenuItems()</codeph> 方法。此方法将 <codeph>Reverse Colors</codeph> 菜单项放入 <codeph>defaultItems</codeph> 数组中（使用 Array 的 <codeph>push()</codeph> 方法）。将 <codeph>menuItemSelect</codeph> 事件侦听器添加到 ContextMenuItem 对象中，关联的方法名为 <codeph>menuItemSelectHandler()</codeph>。当用户从上下文菜单中选择“反转颜色”时，此方法将输出一些 <codeph>trace()</codeph> 语句。此外，红色正方形将变为黑色，黑色文本将变为红色。</li>
 
     <li>回到构造函数中，添加一个 <codeph>menuSelect</codeph> 事件侦听器以及关联的方法 <codeph>menuSelectHandler()</codeph>，每次选择上下文菜单中的一项时，只输出三条 <codeph>trace()</codeph> 语句。</li>
 
 <li>构造函数调用 <codeph>addChildren()</codeph>，绘制一个红色正方形并将其添加到显示列表中（将立即显示该正方形）。</li>
 
     <li>最后，将 <codeph>myContextMenu</codeph> 分配给 <codeph>redRectangle</codeph> 属性的上下文菜单，以便仅当鼠标指针位于正方形上方时才显示自定义上下文菜单。</li>
 </ol>
<codeblock>
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.ui.xml#ContextMenu"><linktext>ContextMenu 类</linktext></link><link href="flash.ui.xml#ContextMenuItem"><linktext>ContextMenuItem 类</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect"><apiName>menuItemSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect"><apiName>menuSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关菜单事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：
	<ul>
	    <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
	    <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
	</ul>
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam><apiItemName>mouseTarget</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>用户右键单击以显示上下文菜单的显示列表对象。此对象可以是 <codeph>contextMenuOwner</codeph> 或显示列表中它的后代之一。
	</apiDesc></apiParam><apiParam><apiItemName>contextMenuOwner</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>菜单附加到的显示列表对象。此对象可以是 <codeph>mouseTarget</codeph> 或显示列表中它的始祖之一。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ContextMenuEvent 对象的构造函数。
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关菜单事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT"><linktext>ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 ContextMenuEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 ContextMenuEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 ContextMenuEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 ContextMenuEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 ContextMenuEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 ContextMenuEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[ContextMenuEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... contextMenuOwner=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT"><apiName>MENU_ITEM_SELECT</apiName><shortdesc>
	定义 menuItemSelect 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuItemSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>menuItemSelect</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
		<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>菜单附加到的显示列表对象。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>用户右键单击以显示上下文菜单的显示列表对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>已选定的 ContextMenuItem 对象。target 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT"><apiName>MENU_SELECT</apiName><shortdesc>
	定义 menuSelect 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>menuSelect</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>菜单附加到的显示列表对象。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>用户右键单击以显示上下文菜单的显示列表对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>将要显示的 ContextMenu 对象。target 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get"><apiName>contextMenuOwner</apiName><shortdesc>
	菜单附加到的显示列表对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	菜单附加到的显示列表对象。此对象可以是鼠标目标 (<codeph>mouseTarget</codeph>) 或显示列表中它的始祖之一。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get"><apiName>isMouseTargetInaccessible</apiName><shortdesc>
	 指示 mouseTarget 属性是否因某些安全原因设置为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 指示 <codeph>mouseTarget</codeph> 属性是否因某些安全原因设置为 <codeph>null</codeph>。如果 <codeph>menuTarget</codeph> 的标称值是对其它安全沙箱中 <codeph>DisplayObject</codeph> 的引用，则 <codeph>menuTarget</codeph> 将设置为 <codeph>null</codeph>，除非同时具有跨此沙箱边界的双向权限。权限通过以下方式建立：从 SWF 文件调用 <codeph>Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，并在加载图像时设置 <codeph>LoaderContext.checkPolicyFile</codeph> 标志。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/mouseTarget"><linktext>ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get"><apiName>mouseTarget</apiName><shortdesc>
	用户右键单击以显示上下文菜单的显示列表对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	用户右键单击以显示上下文菜单的显示列表对象。此对象可以是菜单附加到的显示列表对象 (<codeph>contextMenuOwner</codeph>) 或显示列表中它的后代之一。
	<p>在以下两种情况下，此属性的值可以为 <codeph>null</codeph>：不存在任何鼠标目标（例如，当您在后台将鼠标置于某个对象上方时）；存在鼠标目标，但它位于您无法访问的安全沙箱中。使用 <codeph>isMouseTargetInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible"><linktext>ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
 当 SQLConnection 或 SQLStatement 实例执行的某个操作成功完成时，Adobe AIR 将分派 SQLEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 当 SQLConnection 或 SQLStatement 实例执行的某个操作成功完成时，Adobe AIR 将分派 SQLEvent 对象。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
     创建一个 SQLEvent 对象以作为参数传递给事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型，在 <codeph>type</codeph> 属性中可用。
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph>false</codeph>。
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。默认值为 <codeph>false</codeph>。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>用于创建新的 SQLEvent 对象。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     创建一个 SQLEvent 对象以作为参数传递给事件侦听器。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone"><apiName>clone</apiName><shortdesc>
	 创建 SQLEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 SQLEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 创建 SQLEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     SQLEvent.ANALYZE 常量定义 analyze 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.ANALYZE</codeph> 常量定义 <codeph>analyze</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.analyze()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>analyze</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     SQLEvent.ATTACH 常量定义 attach 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.ATTACH</codeph> 常量定义 <codeph>attach</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.attach()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>attach</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     SQLEvent.BEGIN 常量定义 begin 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.BEGIN</codeph> 常量定义 <codeph>begin</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.begin()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>begin</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL"><apiName>CANCEL</apiName><shortdesc>
     SQLEvent.CANCEL 常量定义 cancel 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.CANCEL</codeph> 常量定义 <codeph>cancel</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.cancel()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>cancel</codeph> 事件具有以下属性：
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 或 SQLStatement 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     SQLEvent.CLOSE 常量定义 close 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.CLOSE</codeph> 常量定义 <codeph>close</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.close()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>close</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     SQLEvent.COMMIT 常量定义 commit 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.COMMIT</codeph> 常量定义 <codeph>commit</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.commit()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>commit</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     SQLEvent.COMPACT 常量定义 compact 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.COMPACT</codeph> 常量定义 <codeph>compact</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.compact()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>compact</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     SQLEvent.DEANALYZE 常量定义 deanalyze 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.DEANALYZE</codeph> 常量定义 <codeph>deanalyze</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.deanalyze()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>deanalyze</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH"><apiName>DETACH</apiName><shortdesc>
     SQLEvent.DETACH 常量定义 detach 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.DETACH</codeph> 常量定义 <codeph>detach</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.detach()</codeph> 方法调用成功完成时分派这种类型的事件。
     
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
     SQLEvent.OPEN 常量定义 open 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.OPEN</codeph> 常量定义 <codeph>open</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.open()</codeph> 或 <codeph>SQLConnection.openAsync()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>open</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     SQLEvent.REENCRYPT 常量定义 reencrypt 事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.REENCRYPT</codeph> 常量定义 <codeph>reencrypt</codeph> 事件对象的 <codeph>type</codeph> 属性的值。<codeph>SQLConnection.reencrypt()</codeph> 方法调用成功完成时分派此类型的事件。<codeph>reencrypt</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT"><apiName>RESULT</apiName><shortdesc>
     SQLEvent.RESULT 常量定义 result 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>result</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.RESULT</codeph> 常量定义 <codeph>result</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLStatement.execute()</codeph> 方法或 <codeph>SQLStatement.next()</codeph> 方法成功完成时分派。分派 <codeph>SQLEvent.RESULT</codeph> 事件之后，即可调用 <codeph>SQLStatement.getResult()</codeph> 方法来访问结果数据。<codeph>result</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLStatement 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     SQLEvent.ROLLBACK 常量定义 rollback 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.ROLLBACK</codeph> 常量定义 <codeph>rollback</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.rollback()</codeph> 方法调用成功完成时分派这种类型的事件。<codeph>rollback</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     SQLEvent.SCHEMA 常量定义 schema 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLEvent.SCHEMA</codeph> 常量定义 <codeph>schema</codeph> 事件对象的 <codeph>type</codeph> 属性值。在 <codeph>SQLConnection.loadSchema()</codeph> 方法成功完成时分派。分派 <codeph>SQLEvent.SCHEMA</codeph> 事件之后，即可调用 <codeph>SQLConnection.getSchemaResult()</codeph> 方法来获取架构信息。<codeph>schema</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
 与 SQLConnection 实例关联的任何表发生数据更改时，SQLConnection 对象将分派 SQLUpdateEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 与 SQLConnection 实例关联的任何表发生数据更改时，SQLConnection 对象将分派 SQLUpdateEvent 对象。执行 SQL <codeph>INSERT</codeph>、<codeph>UPDATE</codeph> 或 <codeph>DELETE</codeph> 语句（直接或由于触发与语句执行有关的触发器）可以导致数据更改。
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as"> 以下示例展示 SQLUpdateEvent 实例在响应 <codeph>update</codeph> 事件中的用法。
<codeblock>

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete"><apiName>delete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert"><apiName>insert</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update"><apiName>update</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
     创建新的 SQLUpdateEvent 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型，可通过 <codeph>type</codeph> 属性获取。
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph>false</codeph>。
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。默认值为 <codeph>false</codeph>。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>指示数据已更改的表的名称。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>插入、删除或更新的行的唯一行标识符。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>用于创建新的 SQLUpdateEvent 对象。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     创建新的 SQLUpdateEvent 实例。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone"><apiName>clone</apiName><shortdesc>
     创建 SQLUpdateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 SQLUpdateEvent 对象。
     
     </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     创建 SQLUpdateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE"><apiName>DELETE</apiName><shortdesc>
     SQLUpdateEvent.DELETE 常量定义 SQLConnection delete 事件的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLUpdateEvent.DELETE</codeph> 常量定义 SQLConnection <codeph>delete</codeph> 事件的 <codeph>type</codeph> 属性值。<codeph>delete</codeph> 事件具有以下属性：
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>rowID</codeph></entry><entry>插入、删除或更新的行的唯一行标识符。</entry></row><row><entry><codeph>target</codeph></entry><entry>对其执行操作的 SQLConnection 对象。</entry></row><row><entry><codeph>table</codeph></entry><entry>发生更改的表的名称。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT"><apiName>INSERT</apiName><shortdesc>
     SQLUpdateEvent.INSERT 常量定义 SQLConnection insert 事件的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insert</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     <codeph>SQLUpdateEvent.INSERT</codeph> 常量定义 <codeph>insert</codeph> 事件的 <codeph>type</codeph> 属性值。<codeph>insert</codeph> 事件具有以下属性：
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>rowID</codeph></entry><entry>插入、删除或更新的行的唯一行标识符。</entry></row><row><entry><codeph>target</codeph></entry><entry>对其执行操作的 SQLConnection 对象。</entry></row><row><entry><codeph>table</codeph></entry><entry>发生更改的表的名称。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 SQLUpdateEvent.UPDATE 常量定义 SQLConnection update 事件的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>SQLUpdateEvent.UPDATE</codeph> 常量定义 SQLConnection <codeph>update</codeph> 事件的 <codeph>type</codeph> 属性值。
	 
	 <p><codeph>update</codeph> 事件具有以下属性：</p>
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>rowID</codeph></entry><entry>插入、删除或更新的行的唯一行标识符。</entry></row><row><entry><codeph>target</codeph></entry><entry>对其执行操作的 SQLConnection 对象。</entry></row><row><entry><codeph>table</codeph></entry><entry>发生更改的表的名称。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get"><apiName>rowID</apiName><shortdesc>
     插入、删除或更新的行的唯一行标识符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     插入、删除或更新的行的唯一行标识符。
	 
	 <p>行标识符用于唯一标识数据库表中的行。该值通常由数据库生成。</p>
	 
	 <p>用于单个 SQL <codeph>INSERT</codeph> 语句执行的行标识符可以通过由 SQLStatement 对象的 <codeph>getResult()</codeph> 方法返回的 SQLResult 对象的 <codeph>lastInsertRowID</codeph> 属性获得（在 SQLStatement 分派其 <codeph>result</codeph> 事件后调用时）。</p>
	 
	 <p>有关主键和生成的行标识符的详细信息，请参阅附录“<xref href="../../localDatabaseSQLSupport.html">本地数据库中的 SQL 支持</xref>”中的“<xref href="../../localDatabaseSQLSupport.html#createTable">创建表</xref>”和“<xref href="../../localDatabaseSQLSupport.html#expressions">表达式</xref>”部分。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get"><apiName>table</apiName><shortdesc>
     其数据更改导致分派事件的表的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     其数据更改导致分派事件的表的名称。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
	在 NetStream 对象尝试播放数字权限管理 (DRM) 加密的文件并遇到与 DRM 相关的错误时，AIR 将分派 DRMErrorEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>启用 DRM 的对象的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	在 NetStream 对象尝试播放数字权限管理 (DRM) 加密的文件并遇到与 DRM 相关的错误时，AIR 将分派 DRMErrorEvent 对象。例如，当内容提供程序不支持执行查看的应用程序，或可能由于用户未购买内容而导致用户授权失败时，分派 DRMErrorEvent 对象。
	<p>
	对于无效的用户凭据，DRMAuthenticateEvent 对象将重复分派该对象来处理错误，直到用户输入有效的凭据，或者 AIR 应用程序拒绝进一步的尝试。应用程序应该侦听任何其它 DRM 错误事件，以便检测、标识和处理与 DRM 相关的错误。
	</p>
	<p>
	此类提供一些属性，其中包含引发异常的对象、错误代码以及包含错误相关信息的子错误代码和文本消息（如果适用）。
	</p> 
	
	<adobetable class="innertable">
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
 	  
 	  
 	  
 	  
 	  
	<tgroup cols="4"><thead><row><entry>错误代码</entry><entry>子错误代码</entry><entry>错误详细信息</entry><entry>说明</entry></row></thead><tbody><row>
	    <entry><codeph>3300</codeph></entry>
	    <entry><codeph><i>Adobe Policy Server 错误代码</i></codeph></entry>
	    <entry>无</entry>
	    <entry>应用程序检测到与内容关联的凭证无效。</entry>
	  </row><row>
	    <entry><codeph>3301</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>用户身份验证失败。</entry>
	  </row><row>
	    <entry><codeph>3302</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>Flash Media Rights Management Server (FMRMS) 不支持安全套接字层 (SSL)。</entry>
	  </row><row>
	    <entry><codeph>3303</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>内容已过期，不能用于查看。</entry>
	  </row><row>
	    <entry><codeph>3304</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>用户授权失败。即使用户经过身份验证，也可能发生这种情况，例如，如果用户尚未购买查看内容所需的权限。</entry>
	  </row><row>
	    <entry><codeph>3305</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>服务器 URL</i></codeph></entry>
	    <entry>无法连接到服务器。</entry>
	  </row><row>
	    <entry><codeph>3306</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>需要更新客户端；Flash Media Rights Management Server 需要新的数字权限管理客户端引擎。</entry>
	  </row><row>
	    <entry><codeph>3307</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>通用内部数字权限管理失败。</entry>
	  </row><row>
	    <entry><codeph>3308</codeph></entry>
	    <entry><codeph><i>详细解密错误代码</i></codeph></entry>
	    <entry>无</entry>
	    <entry>不正确的许可证密钥。</entry>
	  </row><row>
	    <entry><codeph>3309</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>视频内容已损坏。</entry>
	  </row><row>
	    <entry><codeph>3310</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>publisherID</i>:<i>applicationID</i></codeph></entry>
	    <entry>执行查看的应用程序的 ID 与内容发布者支持的有效 ID 不匹配。内容提供程序不支持该应用程序。</entry>
	  </row><row>
	    <entry><codeph>3311</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph>Min=x:max=y</codeph></entry>
	    <entry>应用程序版本与凭证中指定的版本不匹配。</entry>
	  </row><row>
	    <entry><codeph>3312</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>与加密内容关联的凭证验证失败，指示内容可能已损坏。</entry>
	  </row><row>
	    <entry><codeph>3313</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>无法将与加密内容关联的凭证保存到 Microsafe。</entry>
	  </row><row>
	    <entry><codeph>3314</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>FLV 标头完整性验证失败，指示内容可能已损坏。</entry>
	  </row><row>
	    <entry><codeph>3315</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>无</entry>
	    <entry>不允许远程回放 DRM 保护的内容。</entry>
	  </row><row>
 	    <entry><codeph>3316</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>无</entry>
 	    <entry>缺少 AdobeCP 模块。</entry>
 	  </row><row>
 	    <entry><codeph>3317</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>无</entry>
 	    <entry>加载 AdobeCP 模块失败。</entry>
 	  </row><row>
 	    <entry><codeph>3318</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>无</entry>
 	    <entry>找到的 AdobeCP 版本不兼容。</entry>
 	  </row><row>
 	    <entry><codeph>3319</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>无</entry>
 	    <entry>缺少 AdobeCP API 入口点。</entry>
 	  </row><row>
 	    <entry><codeph>3320</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>无</entry>
 	    <entry>AdobeCP 模块未经过身份验证。 </entry>
 	  </row></tbody></tgroup></adobetable>
 	
 	</apiDesc><example conref="examples\DRMErrorEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR"><linktext>DRMErrorEvent.DRM_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError"><apiName>drmError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
 	    创建一个 Event 对象，其中包含有关 DRM 错误事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 DRMAuthenticate 事件：<codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>。
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam><apiItemName>inErrorDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>错误的特定语法详细信息（如果适用）。
  		</apiDesc></apiParam><apiParam><apiItemName>inErrorCode</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>主要错误代码。
		</apiDesc></apiParam><apiParam><apiItemName>insubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>次要错误 ID。
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
 	    创建一个 Event 对象，其中包含有关 DRM 错误事件的特定信息。将 Event 对象作为参数传递给事件侦听器。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone"><apiName>clone</apiName><shortdesc>
		创建 DRMErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 DRMErrorEvent 对象。
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		创建 DRMErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString"><apiName>toString</apiName><shortdesc>
		返回一个字符串，其中包含 DRMErrorEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 DRMErrorEvent 对象的所有属性。
  		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		返回一个字符串，其中包含 DRMErrorEvent 对象的所有属性。字符串的格式如下： 
     	<p><codeph>[DRMErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> errroID=<i>value</i> subErrorID=<i>value</i> text=<i>value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR"><apiName>DRM_ERROR</apiName><shortdesc>
		DRMErrorEvent.DRM_ERROR 常量定义 drmError 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		<codeph>DRMErrorEvent.DRM_ERROR</codeph> 常量定义 <codeph>drmError</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
		
		<p>此事件具有以下属性：</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>errorID</codeph></entry><entry>分配给问题的数字错误代码。</entry></row><row><entry><codeph>subErrorID</codeph></entry><entry>指示有关基本问题的更多详细信息的错误代码。</entry></row><row><entry><codeph>target</codeph></entry><entry>NetStream 对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
		指示有关基本问题的更多详细信息的错误 ID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		指示有关基本问题的更多详细信息的错误 ID。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 媒体文件的 DRMContentData。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 媒体文件的 DRMContentData。
		 
		 <p>可以使用由 <codeph>contentData</codeph> 属性引用的对象从 DRMManager 凭证缓冲检索相关的 DRM 凭证。凭证属性描述可供用户使用的许可证，还可以解释为何无法查看受 DRM 保护的内容。</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
EventDispatcher 类是可分派事件的所有运行时类的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
EventDispatcher 类是可分派事件的所有<ph platform="javascript">运行时</ph>类的基类。<ph platform="actionscript">EventDispatcher 类实现 IEventDispatcher 接口，并且是 DisplayObject 类的基类。EventDispatcher 类允许显示列表上的任何对象都是一个事件目标，同样允许使用 IEventDispatcher 接口的方法。</ph>

<p platform="actionscript">事件目标是 Flash <sup>®</sup> Player 和 Adobe AIR 事件模型的重要组成部分。<sup/><sup/>事件目标是事件如何通过显示列表层次结构这一问题的焦点。当发生鼠标单击或按键等事件时，Flash Player 或 AIR 应用程序会将事件对象分派到从显示列表根开始的事件流中。然后该事件对象在显示列表中前进，直到到达事件目标，然后从这一点开始其在显示列表中的回程。在概念上，到事件目标的此往返行程被划分为三个阶段：捕获阶段包括从根到事件目标节点之前的最后一个节点的行程，目标阶段仅包括事件目标节点，冒泡阶段包括回程上遇到的任何后续节点到显示列表的根。</p>

<p platform="actionscript">通常，使用户定义的类能够分派事件的最简单方法是扩展 EventDispatcher。如果无法扩展（即，如果该类已经扩展了另一个类），则可以实现 IEventDispatcher 接口，创建 EventDispatcher 成员，并编写一些简单的挂钩，将调用连接到聚合的 EventDispatcher 中。</p>

<p platform="javascript">可以通过调用分派该事件的对象的 <codeph>addEventListener()</codeph> 方法来注册函数以处理运行时事件。</p>

</apiDesc><example conref="examples\EventDispatcherExample.as"> 以下示例使用 <codeph>EventDispatcherExample</codeph> 和 <codeph>CustomDispatcher</codeph> 类（<codeph>EventDispatcher</codeph> 的子类）来说明如何创建和分派自定义事件。该示例执行下列任务：
 <ol>
     <li><codeph>EventDispatcherExample</codeph> 的构造函数创建一个局部变量 <codeph>dispatcher</codeph>，并将其赋给新的 CustomDispatcher 实例。</li>
     <li>在 <codeph>CustomDispatcher</codeph> 内，设置一个字符串以便事件具有名称 <codeph>action</codeph>，并且声明 <codeph>doAction()</codeph> 方法。当调用此方法时，此方法将创建 <codeph>action</codeph> 事件并使用 <codeph>EventDispatcher.dispatchEvent()</codeph> 分派该事件。</li>
     <li>然后使用 <codeph>dispatcher</codeph> 属性添加 <codeph>action</codeph> 事件侦听器和关联的订阅者方法 <codeph>actionHandler()</codeph>，这样在分派事件时可以只输出有关该事件的信息。</li>
     <li>调用 <codeph>doAction()</codeph> 方法，从而分派 <codeph>action</codeph> 事件。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate"><apiName>deactivate</apiName><shortdesc>
 [广播事件] Flash Player 或 AIR 应用程序失去操作系统焦点并变为非活动状态时将分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [广播事件] <ph platform="actionscript">Flash Player 或</ph> AIR 应用程序失去操作系统焦点并变为非活动状态时将分派此事件。此事件为广播事件，这意味着将由所有具有注册了此事件的侦听器的 EventDispatcher 对象分派此事件。<ph platform="actionscript">有关广播事件的详细信息，请参阅 DisplayObject 类。</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate"><apiName>activate</apiName><shortdesc>
 [广播事件] Flash Player 或 AIR 应用程序获得操作系统焦点并变为活动状态时将分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [广播事件] <ph platform="actionscript">Flash Player 或</ph> AIR 应用程序获得操作系统焦点并变为活动状态时将分派此事件。此事件为广播事件，这意味着将由所有具有注册了此事件的侦听器的 EventDispatcher 对象分派此事件。<ph platform="actionscript">有关广播事件的详细信息，请参阅 DisplayObject 类。</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	聚合 EventDispatcher 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.events:IEventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>分派到 EventDispatcher 对象的事件的目标对象。<ph platform="actionscript">当 EventDispatcher 实例由实现 IEventDispatcher 的类聚合时，使用此参数；此参数是必需的，以便包含对象可以是事件的目标。请勿在类扩展了 EventDispatcher 的简单情况下使用此参数。</ph> <ph platform="javascript">目标对象仅在 SWF 内容的显示对象中有效，它们使用 ActionScript 3.0 显示列表体系结构。</ph>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	聚合 EventDispatcher 类的实例。
	
    <p>EventDispatcher 类通常<ph platform="javascript">在 SWF 内容使用的 ActionScript 3.0 代码中</ph>用作基类，这意味着<ph platform="actionscript">大多数</ph> <ph platform="javascript">JavaScript </ph>开发人员都无需使用此构造函数。<ph platform="actionscript">但是，实现 IEventDispatcher 接口的高级开发人员则需要使用此构造函数。如果您无法扩展 EventDispatcher 类并且必须实现 IEventDispatcher 接口，请使用此构造函数来聚合 EventDispatcher 类的实例。</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>listener</codeph> 不是一个函数。
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果<ph platform="actionscript">，如下面的示例所示：</ph> <ph platform="javascript">。</ph>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>函数可以有任何名称。</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">此参数适用于 SWF 内容所使用的 ActionScript 3.0 显示列表体系结构中的显示对象。</ph><ph platform="actionscript">确定侦听器是运行于捕获阶段还是目标阶段和冒泡阶段。如果将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。如果 <codeph>useCapture</codeph> 为 <codeph>false</codeph>，则侦听器只在目标或冒泡阶段处理事件。要在所有三个阶段都侦听事件，请调用 <codeph>addEventListener</codeph> 两次：一次将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，一次将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>。</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>事件侦听器的优先级。优先级由一个带符号的 32 位整数指定。数字越大，优先级越高。优先级为 <i>n</i> 的所有侦听器会在优先级为 <i>n</i> -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定对侦听器的引用是强引用，还是弱引用。强引用（默认值）可防止您的侦听器被当作垃圾回收。弱引用则没有此作用。 <p>类级别成员函数不属于垃圾回收的对象，因此可以对类级别成员函数将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph> 而不会使它们受垃圾回收的影响。如果对作为嵌套内部函数的侦听器将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph>，则该函数将作为垃圾回收并且不再是永久函数。如果创建对该内部函数的引用（将该函数保存到另一个变量中），则该函数将不作为垃圾回收并仍将保持永久。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。<ph platform="actionscript">可以为特定类型的事件、阶段和优先级在显示列表中的所有节点上注册事件侦听器。</ph>
	
	<p platform="javascript">AIR 运行时中的 JavaScript 代码使用此方法注册 AIR API 定义的事件的事件侦听器。对于其它 JavaScript 事件（如 DOM <codeph>body</codeph> 对象的 <codeph>onload</codeph> 事件），您可以像对浏览器中运行的内容一样使用标准事件处理技术。</p>
	
	<p>成功注册一个事件侦听器后，无法通过额外调用 <codeph>addEventListener()</codeph> 来更改其优先级。要更改侦听器的优先级，必须首先调用 <codeph>removeListener()</codeph>。然后，可以使用新的优先级再次注册该侦听器。 </p>
	
	<p>请记住，注册该侦听器后，如果继续调用具有不同 <codeph>type</codeph> 或 <codeph>useCapture</codeph> 值的 <codeph>addEventListener()</codeph>，则会创建单独的侦听器注册。<ph platform="actionscript">例如，如果首先注册 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph> 的侦听器，则该侦听器只在捕获阶段进行侦听。如果使用同一个侦听器对象再次调用 <codeph>addEventListener()</codeph>，并将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>，那么便会拥有两个单独的侦听器：一个在捕获阶段进行侦听，另一个在目标和冒泡阶段进行侦听。</ph>
	</p>
	
	<p platform="actionscript">不能只为目标阶段或冒泡阶段注册事件侦听器。这些阶段在注册期间是成对出现的，因为冒泡阶段只适用于目标节点的始祖。</p>
	
	<p>如果不再需要某个事件侦听器，可调用 <codeph>removeEventListener()</codeph> 删除它，否则会产生内存问题。事件侦听器不会自动从内存中删除，因为只要调度对象存在，垃圾回收器就不会删除侦听器（除非 <codeph>useWeakReference</codeph> 参数设置为 <codeph>true</codeph>）。</p>
		
	<p>复制 EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。</p>
	
	
	<p platform="actionscript">如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。</p>
	
	<p platform="actionscript">如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	将事件分派到事件流中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>已达到事件分派递归限制。
	</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>如果成功分派了事件，则值为 <codeph>true</codeph>。值 <codeph>false</codeph> 表示失败或对事件调用了 <codeph>preventDefault()</codeph>。
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>分派到事件流中的 Event 对象。如果正在重新分派事件，则会自动创建此事件的一个克隆。  在分派了事件后，其 <codeph>target</codeph> 属性将无法更改，因此您必须创建此事件的一个新副本以能够重新分派。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	将事件分派到事件流中。事件目标是对其调用 <codeph>dispatchEvent()</codeph> 方法的 EventDispatcher 对象。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果指定类型的侦听器已注册，则值为 <codeph>true</codeph>；否则，值为 <codeph>false</codeph>。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实触发了事件侦听器，请使用 <codeph>willTrigger()</codeph>。
	
	<p><codeph>hasEventListener()</codeph> 与 <codeph>willTrigger()</codeph> 的区别是：<codeph>hasEventListener()</codeph> 只检查它所属的对象，而 <codeph>willTrigger()</codeph> 检查整个事件流以查找由 <codeph>type</codeph> 参数指定的事件。<ph platform="javascript">事件流适用于 SWF 内容中使用的 ActionScript 3.0 显示列表。</ph>
	</p>
	
	<p>当从 LoaderInfo 对象调用 <codeph>hasEventListener()</codeph> 时，只考虑调用方可以访问的侦听器。</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#EventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	从 EventDispatcher 对象中删除侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>要删除的侦听器对象。
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">此参数适用于 SWF 内容所使用的 ActionScript 3.0 显示列表体系结构中的显示对象。</ph><ph platform="actionscript">指出是为捕获阶段还是目标阶段和冒泡阶段注册了侦听器。如果为捕获阶段以及目标和冒泡阶段注册了侦听器，则需要对 <codeph>removeEventListener()</codeph> 进行两次调用才能将这两个侦听器删除，一次调用将 <codeph>useCapture()</codeph> 设置为 <codeph>true</codeph>，另一次调用将 <codeph>useCapture()</codeph> 设置为 <codeph>false</codeph>。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果将会触发指定类型的侦听器，则值为 <codeph>true</codeph>；否则，值为 <codeph>false</codeph>。
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件分派给此 EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 <codeph>true</codeph>。
	
	<p><codeph>hasEventListener()</codeph> 与 <codeph>willTrigger()</codeph> 方法的区别是：<codeph>hasEventListener()</codeph> 只检查它所属的对象，而 <codeph>willTrigger()</codeph> 方法检查整个事件流以查找由 <codeph>type</codeph> 参数指定的事件。<ph platform="javascript">事件流适用于 SWF 内容中使用的 ActionScript 3.0 显示列表。</ph></p>
	
	<p>当从 LoaderInfo 对象调用 <codeph>willTrigger()</codeph> 时，只考虑调用方可以访问的侦听器。</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:EventPhase"><apiName>EventPhase</apiName><shortdesc>
 EventPhase 类可为 Event 类的 eventPhase 属性提供值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 EventPhase 类可为 Event 类的 <codeph>eventPhase</codeph> 属性提供值。
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#Event"><linktext>Event 类</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>EventDispatcher 类</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
	目标阶段，是事件流的第二个阶段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	目标阶段，是事件流的第二个阶段。
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
	冒泡阶段，是事件流的第三个阶段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	冒泡阶段，是事件流的第三个阶段。
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
	捕获阶段，是事件流的第一个阶段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	捕获阶段，是事件流的第一个阶段。
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
 用户将焦点从显示列表中的一个对象更改到另一个对象时，对象将分派 FocusEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Focus 事件的事件对象。
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 用户将焦点从显示列表中的一个对象更改到另一个对象时，对象将分派 FocusEvent 对象。有四种类型的焦点事件：
 <ul>
     <li><codeph>FocusEvent.FOCUS_IN</codeph></li>
     <li><codeph>FocusEvent.FOCUS_OUT</codeph></li>
     <li><codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph></li>
     <li><codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as"> 以下示例使用 <codeph>FocusEventExample</codeph> 和 <codeph>CustomSprite</codeph> 类来说明如何将焦点与在舞台上绘制的项目结合使用，以捕获事件和输出信息。本示例将执行以下任务：
 <ol>
     <li>它声明属性 <codeph>child</codeph>（属于 Sprite 类型）和 <codeph>childCount</codeph>（属于 uint 类型）。</li>
    <li>一个 <codeph>for</codeph> 循环在 (0,0) 处创建五个浅蓝色正方形。该循环从将 <codeph>child</codeph> 分配给新的 CustomSprite 实例开始。每次创建 CustomSprite 对象时，会执行以下操作：
     <ul>
             <li>类型为 uint 的 <codeph>size</codeph> 属性设置为 50 像素，<codeph>bgColor</codeph> 设置为浅蓝色。 </li>
             <li>Sprite 类的 <codeph>buttonMode</codeph> 和 <codeph>useHandCursor</codeph> 属性在构造函数中设置为 <codeph>true</codeph>。</li>
             <li>实例化类型为 <codeph>click</codeph> 的事件侦听器以及关联的订阅者 <codeph>clickHandler()</codeph>。订阅者方法创建类型为 Sprite 的局部变量 <codeph>target</codeph> 并为其赋值以确定单击了其中的哪一个框。然后将舞台的焦点分配给 <codeph>target</codeph>。</li>
             <li>调用 <codeph>draw()</codeph> 方法，它可以通过调用 Graphics 类的 <codeph>beginFill()</codeph>、<codeph>drawRect()</codeph> 和 <codeph>endFill()</codeph> 方法以及实例属性来创建一个 50 x 50 像素的正方形。</li>
      </ul></li>
         <li>在 for 循环中，调用 <codeph>configureListeners()</codeph> 方法，它将实例化三个事件侦听器/订阅者：
         <ul>
             <li><codeph>focusIn</codeph> / <codeph>focusInHandler()</codeph> 在单击显示列表对象（框）的 <codeph>click</codeph> 事件后进行分派。</li>
             <li><codeph>focusOut</codeph> / <codeph>focusOutHandler()</codeph> 在单击另一个框或者焦点离开舞台（例如，通过在 Flash Player 外单击）时进行分派。</li>
             <li><codeph>keyFocusChange</codeph> / <codeph>keyFocusChangeHandler()</codeph> 在使用 Tab 键或者向左键或向右键选择显示列表对象时进行分派。<codeph>keyFocusChangeHandler()</codeph> 方法可以捕获向左键和向右键，而调用 <codeph>preventDefault()</codeph> 方法可以禁用这两个键。</li>
             
      </ul></li>
     <li>在 <codeph>for</codeph> 循环中，每个正方形都通过 <codeph>addChild()</codeph> 添加到显示列表中并显示（所有正方形都在同一个区域中）。</li>
     <li>然后构造函数调用 <codeph>refreshLayout()</codeph>，以便沿显示屏顶部 (y = 0) 每隔 5 个像素显示一个正方形来分布橙色的正方形。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn"><apiName>focusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut"><apiName>focusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange"><apiName>keyFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange"><apiName>mouseFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
    创建一个 Event 对象，其中包含有关焦点事件的特定信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。可能的值包括：<codeph>FocusEvent.FOCUS_IN</codeph>、<codeph>FocusEvent.FOCUS_OUT</codeph>、<codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> 和 <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph>。
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>指示受焦点更改影响的补充 InteractiveObject 实例。例如，发生 <codeph>focusIn</codeph> 事件时，<codeph>relatedObject</codeph> 表示已失去焦点的 InteractiveObject。
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示是否已激活 Shift 功能键。
	</apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>指示按下以触发 <codeph>keyFocusChange</codeph> 事件的键的代码。
	</apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>none</apiData><apiDesc>指示激活目标交互式对象的方向。对于除 <codeph>focusIn</codeph> 事件以外的所有事件，设置为 <codeph>FocusDirection.NONE</codeph>（默认值）。
    
	</apiDesc></apiParam><apiTipTexts><apiTipText>FocusEvent 对象的构造函数。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    创建一个 Event 对象，其中包含有关焦点事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
    
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 FocusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 FocusEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 FocusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 FocusEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 FocusEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 FocusEvent 对象的所有属性。字符串的格式如下：
	<p><codeph>[FocusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> relatedObject=<i>value</i> shiftKey=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN"><apiName>FOCUS_IN</apiName><shortdesc>
	定义 focusIn 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusIn</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>focusIn</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0；仅应用于 <codeph>keyFocusChange</codeph> 事件。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>；仅应用于 <codeph>keyFocusChange</codeph> 事件。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚获得焦点的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row><row><entry><codeph>direction</codeph></entry><entry>焦点的分配方向。此属性报告舞台的 <codeph>assignFocus()</codeph> 方法的 <codeph>direction</codeph> 参数。如果通过其它方式更改焦点，则该值将始终为 <codeph>FocusDirection.NONE</codeph>。仅适用于 <codeph>focusIn</codeph> 事件。对于所有其它焦点事件，该值将为 <codeph>FocusDirection.NONE</codeph>。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT"><apiName>FOCUS_OUT</apiName><shortdesc>
	定义 focusOut 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>focusOut</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0；仅应用于 <codeph>keyFocusChange</codeph> 事件。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>；仅应用于 <codeph>keyFocusChange</codeph> 事件。</entry></row><row><entry><codeph>target</codeph></entry><entry>刚刚失去焦点的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE"><apiName>KEY_FOCUS_CHANGE</apiName><shortdesc>
	定义 keyFocusChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>keyFocusChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；调用 <codeph>preventDefault()</codeph> 方法以取消默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>被按下以触发 <codeph>keyFocusChange</codeph> 事件的键的键控代码值。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry>如果 Shift 功能键处于激活状态，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>当前具有焦点的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE"><apiName>MOUSE_FOCUS_CHANGE</apiName><shortdesc>
	定义 mouseFocusChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	定义 <codeph>mouseFocusChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>；调用 <codeph>preventDefault()</codeph> 方法以取消默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0；仅应用于 <codeph>keyFocusChange</codeph> 事件。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>；仅应用于 <codeph>keyFocusChange</codeph> 事件。</entry></row><row><entry><codeph>target</codeph></entry><entry>当前具有焦点的 InteractiveObject 实例。<codeph>target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph>currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get"><apiName>direction</apiName><shortdesc>
	指定 focusIn 事件的焦点方向。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	指定 <codeph>focusIn</codeph> 事件的焦点方向。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()"><linktext>flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 如果为 true，则 relatedObject 属性是出于与安全沙箱相关的原因而设置为 null 的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 如果为 <codeph>true</codeph>，则 <codeph>relatedObject</codeph> 属性是出于与安全沙箱相关的原因而设置为 <codeph>null</codeph> 的。如果 <codeph>relatedObject</codeph> 的标称值是对其它沙箱中的 DisplayObject 的引用，则 <codeph>relatedObject</codeph> 将设置为 <codeph>null</codeph>，除非具有双向跨越此沙箱边界的权限。通过以下方式确立权限：从 SWF 文件调用 <codeph>Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，然后在加载图像时设置 <codeph>LoaderContext.checkPolicyFile</codeph> 属性。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/relatedObject"><linktext>FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	被按下以触发 keyFocusChange 事件的键的键控代码值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	被按下以触发 <codeph>keyFocusChange</codeph> 事件的键的键控代码值。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	对补充 InteractiveObject 实例的引用，焦点变化会对此实例造成影响。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	对补充 InteractiveObject 实例的引用，焦点变化会对此实例造成影响。例如，发生 <codeph>focusOut</codeph> 事件时，<codeph>relatedObject</codeph> 表示已获得焦点的 InteractiveObject 实例。
	<p>在以下两种情况下，此属性的值可以为 <codeph>null</codeph>：不存在任何相关对象；存在相关对象，但该对象位于您无法访问的安全沙箱中。使用 <codeph>isRelatedObjectInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible"><linktext>FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	指出是否激活了 Shift 功能键，若激活则值为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指出是否激活了 Shift 功能键，若激活则值为 <codeph>true</codeph>。否则，值为 <codeph>false</codeph>。仅当 FocusEvent 的类型为 <codeph>keyFocusChange</codeph> 时，才使用此属性。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 当由于浏览器中的 SWF 文件而使用浏览器调用功能调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将分派 browserInvoke 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 当由于浏览器中的 SWF 文件而使用浏览器调用功能调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将分派 <codeph>browserInvoke</codeph> 事件。当用户在浏览器中实例化无缝安装功能并且浏览器中的 SWF 文件将数组传递给 air.swf 文件的 <codeph>launchApplication()</codeph> 方法的 <codeph>arguments</codeph> 参数时，NativeApplication 对象还将分派 <codeph>browserInvoke</codeph> 事件。（有关详细信息，请参阅 AIR 开发人员指南中的“Distributing, installing and running AIR applications”（分发、安装和运行 AIR 应用程序）。）
	 
	 <p>只有当应用程序在应用程序描述符文件中指定如下内容时才允许浏览器调用：</p>
	 
	 <codeblock>&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 <p>如果应用程序没有运行，则在从浏览器中启动时，NativeApplication 对象将分派 InvokeEvent 事件和 <codeph>browserInvoke</codeph> 事件。否则，如果应用程序<i>已经在</i>运行，则在从浏览器启动时，NativeApplication 对象将仅分派 <codeph>browserInvoke</codeph> 事件。 </p>
	 
	 <p> 如果由于从浏览器无缝安装（用户选择在安装时启动）而启动应用程序，则只有在传递参数（通过浏览器中的 SWF 文件将数组传递给 air.swf 文件的 <codeph>installApplication()</codeph> 方法的 <codeph>arguments</codeph> 参数）时，NativeApplication 对象才分派 BrowserInvoke 事件。有关详细信息，请参阅 AIR 开发人员指南中的“Distributing, installing, and running AIR applications”（分发、安装和运行 AIR 应用程序）。</p>
	 
	 <p>和 <codeph>invokeEvent</codeph> 事件一样，<codeph>browserInvokeEvent</codeph> 事件由 NativeApplication 对象 (<codeph>NativeApplication.nativeApplication</codeph>) 分派。要接收 <codeph>browserInvoke</codeph> 事件，请调用 NativeApplication 对象的 <codeph>addEventListener()</codeph> 方法。当某个事件侦听器针对 <codeph>browserInvoke</codeph> 事件进行注册时，它还将接收在注册前发生的所有 <codeph>browserInvoke</codeph> 事件。在对 <codeph>addEventListener()</codeph> 的调用返回后分派这些事件，但并不一定在注册后可能接收到的其它 <codeph>browserInvoke</codeph> 事件之前。这样，您可以处理在初始化代码执行之前（如从浏览器首次调用应用程序时）已发生的 <codeph>browserInvoke</codeph> 事件。请记住，如果在执行后期（在应用程序初始化之后）添加一个事件侦听器，它仍然会接收到自应用程序启动时起发生的所有 <codeph>browserInvoke</codeph> 事件。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#InvokeEvent"><linktext>flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier>flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 BrowserInvokeEvent 类的构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型，可以作为 <codeph>Event.type</codeph> 访问。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>对于 BrowserInvokeEvent 对象设置为 <codeph>false</codeph>。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>对于 BrowserInvokeEvent 对象设置为 <codeph>false</codeph>。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>要传递给应用程序的参数（字符串）数组。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>sandboxType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>浏览器中的内容的沙箱类型。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>浏览器中的内容的安全域。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isHTTPS</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>浏览器中的内容是否使用 HTTPS URL 架构。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isUserEvent</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>浏览器调用是否是用户事件的结果。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 BrowserInvokeEvent 类的构造函数。通常，开发人员不直接调用 <codeph>BrowserInvokeEvent()</codeph> 构造函数。只有 运行时才应创建 BrowserInvokeEvent 对象。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 创建此事件的新副本。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>事件的副本。
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 创建此事件的新副本。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE"><apiName>BROWSER_INVOKE</apiName><shortdesc>
		 BrowserInvokeEvent.BROWSER_INVOKE 常量定义 BrowserInvokeEvent 对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserInvoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 <codeph>BrowserInvokeEvent.BROWSER_INVOKE</codeph> 常量定义 BrowserInvokeEvent 对象的 <codeph>type</codeph> 属性值。
		 
		 <p>BrowserInvokeEvent 对象具有以下属性：</p>
		 <adobetable class="innertable">
		    
		     
		    
		    
		    
		    
		     
		    
		     
		        
		  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>在此调用过程中传递的字符串参数的数组。</entry></row><row><entry><codeph>sandBoxType</codeph></entry><entry>一个字符串，表示浏览器中的内容的沙箱类型（<codeph>Security.APPLICATION</codeph>、<codeph>Security.LOCAL_TRUSTED</codeph>、<codeph>Security.LOCAL_WITH_FILE</codeph>、<codeph>Security.LOCAL_LOCAL_WITH_NETWORK</codeph> 或 <codeph>Security.REMOTE</codeph>）。</entry></row><row><entry><codeph>securityDomain</codeph></entry><entry>一个字符串，表示浏览器中的内容的安全域（如<codeph>“www.example.com”</codeph>）。</entry></row><row><entry><codeph>isHTTPS</codeph></entry><entry>浏览器内容是否使用 HTTPS URL 架构，如果是，则为 <codeph>true</codeph>，否则为 <codeph>false</codeph></entry></row><row><entry><codeph>isUserEvent</codeph></entry><entry>浏览器调用是否因用户事件而导致（在 AIR 1.0 中始终为 <codeph>true</codeph>）。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>否。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>指示当前正在使用事件侦听器处理此 InvokeEvent 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>始终是 NativeApplication 对象。 
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 要传递给应用程序的参数（字符串）数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 要传递给应用程序的参数（字符串）数组。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get"><apiName>isHTTPS</apiName><shortdesc>
		 浏览器中的内容是否使用 HTTPS URL 架构，如果是，则为 true，否则为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 浏览器中的内容是否使用 HTTPS URL 架构，如果是，则为 <codeph>true</codeph>，否则为 <codeph>false</codeph>。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get"><apiName>isUserEvent</apiName><shortdesc>
		 浏览器调用是否生成用户事件（如鼠标单击）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 浏览器调用是否生成用户事件（如鼠标单击）。在 AIR 1.0 中，它始终设置为 <codeph>true</codeph>；AIR 需要用户事件以启动对浏览器调用功能的调用。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
		 浏览器中的内容的沙箱类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 浏览器中的内容的沙箱类型。它可以设置为以下值之一：
		 
		 <ul>
		 
		 	<li><codeph>Security.APPLICATION</codeph> — 内容位于应用程序安全沙箱中。</li>
		 
		 	<li><codeph>Security.LOCAL_TRUSTED</codeph> -- 内容位于受信任的本地安全沙箱中。</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_FILE</codeph> — 内容位于只能与本地文件系统内容交互的安全沙箱中。</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_NETWORK</codeph> — 内容位于只能与远程内容交互的安全沙箱中。</li>
		 
		 	<li><codeph>Security.REMOTE</codeph> — 内容位于远程（网络）域中</li>
		 
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get"><apiName>securityDomain</apiName><shortdesc>
		 浏览器中的内容的安全域，如“www.adobe.com”或“www.example.org”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 浏览器中的内容的安全域，如<codeph>“www.adobe.com”</codeph>或<codeph>“www.example.org”</codeph>。仅对于远程安全沙箱中的内容（来自网络域的内容）设置此属性，而不对位于本地或应用程序安全沙箱中的内容设置此属性。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
 在执行未处理的异步文件写入操作时，FileStream 对象将分派 OutputProgressEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>输出进度事件（用于异步文件写入操作）的事件对象。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 在执行未处理的异步文件写入操作时，FileStream 对象将分派 OutputProgressEvent 对象。只有一种类型的输出进度事件：<codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
    创建一个 Event 对象，其中包含有关输出进度事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。只有一种类型的 error 事件：<codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>。
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。 
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。 
    </apiDesc></apiParam><apiParam><apiItemName>bytesPending</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>尚未写入的字节数。
    </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>已写入的总字节数或未处理的总字节数。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>OutputProgressEvent 对象的构造函数。
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    创建一个 Event 对象，其中包含有关输出进度事件的信息。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone"><apiName>clone</apiName><shortdesc>
    创建 OutputProgressEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 OutputProgressEvent 对象。
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    创建 OutputProgressEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString"><apiName>toString</apiName><shortdesc>
    返回一个字符串，其中包含 OutputProgressEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 OutputProgressEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    返回一个字符串，其中包含 OutputProgressEvent 对象的所有属性。字符串的格式如下：
    
    <p><codeph>[OutputProgressEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> bytesPending=<i>value</i> bytesTotal=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS"><apiName>OUTPUT_PROGRESS</apiName><shortdesc>
    定义 outputProgress 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outputProgress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    定义 <codeph>outputProgress</codeph> 事件对象的 <codeph>type</codeph> 属性值。
    
    <p>此事件具有以下属性：</p>
    
    <adobetable class="innertable">
        
        
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesPending</codeph></entry><entry>在侦听器处理该事件时要写入的剩余字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>写入进程成功时最终将写入的总字节数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>报告进度的 FileStream 对象。 </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get"><apiName>bytesPending</apiName><shortdesc>
    在侦听器处理事件时尚未写入的字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    在侦听器处理事件时尚未写入的字节数。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
    到目前为止已写入的总字节数加上要写入的未处理字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    到目前为止已写入的总字节数加上要写入的未处理字节数。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
 在服务器更新了远程共享对象后，表示远程共享对象的 SharedObject 对象将分派 SyncEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>SyncEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 在服务器更新了远程共享对象后，表示远程共享对象的 SharedObject 对象将分派 SyncEvent 对象。只有一种类型的 <codeph>sync</codeph> 事件：<codeph>SyncEvent.SYNC</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject"><linktext>SharedObject 类</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync"><apiName>sync</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier>flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
	 创建一个 Event 对象，其中包含有关 sync 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 sync 事件：<codeph>SyncEvent.SYNC</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	 </apiDesc></apiParam><apiParam><apiItemName>changeList</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>一个对象数组，用于描述与远程 SharedObject 的同步。事件侦听器可以通过 <codeph>changeList</codeph> 属性访问此对象。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>SyncEvent 对象的构造函数。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 创建一个 Event 对象，其中包含有关 <codeph>sync</codeph> 事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SyncEvent/changeList"><linktext>changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone"><apiName>clone</apiName><shortdesc>
	 创建 SyncEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 SyncEvent 对象。
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 创建 SyncEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString"><apiName>toString</apiName><shortdesc>
	 返回一个字符串，其中包含 SyncEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 SyncEvent 对象的所有属性。
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 返回一个字符串，其中包含 SyncEvent 对象的所有属性。字符串的格式如下：
	 <p><codeph>[SyncEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> list=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC"><apiName>SYNC</apiName><shortdesc>
     定义 sync 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sync</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     定义 <codeph>sync</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	 <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>changeList</codeph></entry><entry>一个数组，具有描述其状态的属性。</entry></row><row><entry><codeph>target</codeph></entry><entry>已由服务器更新的 SharedObject 实例。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get"><apiName>changeList</apiName><shortdesc>
     对象数组；每个对象都包含一些属性，描述远程共享对象的已更改成员。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
      对象数组；每个对象都包含一些属性，描述远程共享对象的已更改成员。每个对象的属性都为 <codeph>code</codeph>、<codeph>name</codeph> 和 <codeph>oldValue</codeph>。 
     <p>当您最初连接到一个远程共享对象（对本地永久共享和/或在服务器上）时，该对象的所有属性都设置为空字符串。</p><p>否则，Flash 将 <codeph>code</codeph> 设置为 <codeph>"clear"</codeph>、<codeph>"success"</codeph>、<codeph>"reject"</codeph>、<codeph>"change"</codeph> 或 <codeph>"delete"</codeph>。 </p>
     <ul><li>值为 <codeph>"clear"</codeph> 表示您已成功连接到不是永久位于服务器或客户端上的远程共享对象，或者该对象的所有属性已删除，例如，客户端和服务器上该对象的副本已不再同步，Flash Player 重新同步客户端对象和服务器对象。在后一种情况下，将分派 <codeph>SyncEvent.SYNC</codeph>，并且“code”值将设置为 <codeph>"change"</codeph>。 </li>
     <li>值为 <codeph>"success"</codeph> 表示客户端更改了共享对象。 </li>
     <li>值为 <codeph>"reject"</codeph> 表示客户端尝试更改对象失败，而另一个客户端更改了对象。 </li>
     <li>值为 <codeph>"change"</codeph> 表示另一个客户端更改了对象，或者服务器重新同步了对象。 </li>
     <li>值为 <codeph>"delete"</codeph> 表示属性已删除。 </li></ul>
     <p><codeph>name</codeph> 属性包含已更改的属性的名称。</p>
     <p><codeph>oldValue</codeph> 属性包含已更改属性的先前的值。除非代码的值为 <codeph>"reject"</codeph> 或 <codeph>"change"</codeph>，否则此参数为 <codeph>null</codeph>。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection 类</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream 类</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
每次摄像头或麦克风报告其变为活动或非活动状态时，Camera 或 Microphone 对象即会分派 ActivityEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>ActivityEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
每次摄像头或麦克风报告其变为活动或非活动状态时，Camera 或 Microphone 对象即会分派 ActivityEvent 对象。只有一种类型的活动事件：<codeph>ActivityEvent.ACTIVITY</codeph>。

</apiDesc><example conref="examples\ActivityEventExample.as"> 以下示例通过将名为 <codeph>activityHandler()</codeph> 的事件侦听器方法附加到麦克风并且在麦克风每次产生 <codeph>activity</codeph> 事件时生成文本信息，演示了 ActivityEvent 类的用法。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity"><apiName>activity</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
	创建一个 Event 对象，其中包含有关活动事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> 事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的活动事件：<codeph>ActivityEvent.ACTIVITY</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam><apiItemName>activating</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指示设备已激活 (<codeph>true</codeph>) 还是被取消激活 (<codeph>false</codeph>)。事件侦听器可以通过 <codeph>activating</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>ActivityEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	创建一个 Event 对象，其中包含有关活动事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone"><apiName>clone</apiName><shortdesc>
	创建 ActivityEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>其属性值与原始属性值匹配的新 ActivityEvent 对象。
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	创建 ActivityEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString"><apiName>toString</apiName><shortdesc>
	返回一个字符串，其中包含 ActivityEvent 对象的所有属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个字符串，其中包含 ActivityEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	返回一个字符串，其中包含 ActivityEvent 对象的所有属性。使用以下格式：
	<p><codeph>[ActivityEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> activating=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY"><apiName>ACTIVITY</apiName><shortdesc>
	ActivityEvent.ACTIVITY 常量定义 activity 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	<codeph>ActivityEvent.ACTIVITY</codeph> 常数定义 <codeph>activity</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
	<p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>activating</codeph></entry><entry>如果设备已激活则为 <codeph>true</codeph>，如果被取消激活则为 <codeph>false</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>开始或结束会话的对象，如 Camera 或 Microphone 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get"><apiName>activating</apiName><shortdesc>
	指示设备是已激活 (true) 还是被取消激活 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	指示设备已激活 (<codeph>true</codeph>) 还是被取消激活 (<codeph>false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>