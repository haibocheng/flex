<?xml version="1.0"?>
<apiPackage id="flash.external"><apiName>flash.external</apiName><apiDetail/><apiClassifier id="flash.external:ExternalInterface"><apiName>ExternalInterface</apiName><shortdesc>
 ExternalInterface 类是外部 API，这是一个在 ActionScript 和 Flash Player 容器（例如，包含 JavaScript 的 HTML 页）之间实现直接通信的应用程序编程接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Verify table is still correct and paragraph below the table still applies.
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>实现 ActionScript 与容器之间的通信。
 
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ExternalInterface 类是外部 API，这是一个在 ActionScript 和 Flash Player 容器之间实现直接通信的应用程序编程接口，例如，包含 JavaScript 的 HTML 页。Adobe 建议使用 ExternalInterface 实现 JavaScript 与 ActionScript 之间的所有通信。
 
 <p>在 Flash Player 中，可以使用 HTML 页中的 JavaScript 来调用 ActionScript 函数。ActionScript 函数可以返回一个值，JavaScript 会立即接收它作为该调用的返回值。</p>
 
 <p>此功能替代 <codeph>fscommand()</codeph> 方法。</p>
 
 <p>在以下浏览器和操作系统的组合中可以使用 ExternalInterface 类：</p>
 <adobetable class="innertable">
 
 
 
 
 
 
 <tgroup cols="3"><thead><row><entry>浏览器</entry><entry>操作系统</entry><entry>操作系统</entry></row></thead><tbody><row>
   <entry>Internet Explorer 5.0 及更高版本</entry>
   <entry>Windows</entry>
   <entry> </entry>
 </row><row>
   <entry>Netscape 8.0 及更高版本</entry>
   <entry>Windows</entry>
   <entry> MacOS </entry>
 </row><row>
   <entry>Mozilla 1.7.5 及更高版本</entry>
   <entry>Windows</entry>
   <entry> MacOS </entry>
 </row><row>
   <entry>Firefox 1.0 及更高版本</entry>
   <entry>Windows</entry>
   <entry> MacOS </entry>
 </row><row>
   <entry>Safari 1.3 及更高版本</entry>
   <entry> </entry>
   <entry> MacOS </entry>
 </row></tbody></tgroup></adobetable>
 
 <p>适用于 Linux 的 Flash Player 9.0.31.0 及更高版本在以下浏览器中支持 ExternalInterface 类：</p>
  <adobetable class="innertable">
    
    
    
    
  <tgroup cols="1"><thead><row><entry>浏览器</entry></row></thead><tbody><row>
      <entry>Mozilla 1.7.x 及更高版本</entry>
    </row><row>
      <entry>Firefox 1.5.0.7 及更高版本</entry>
    </row><row>
      <entry>SeaMonkey 1.0.5 及更高版本 </entry>
    </row></tbody></tgroup></adobetable>
 <p>ExternalInterface 类要求用户的 Web 浏览器支持 ActiveX<sup>®</sup> 或由某些浏览器公开的 NPRuntime API 以实现插件脚本处理。即使上面未列出浏览器和操作系统组合，如果它们支持 NPRuntime API，则它们也应该支持 ExternalInterface 类。请访问 <xref href="http://www.mozilla.org/projects/plugins/npruntime.html" scope="external">http://www.mozilla.org/projects/plugins/npruntime.html</xref>。</p>
 <p><b>注意：</b>在将 SWF 文件嵌入到 HTML 页中时，请确保设置 <codeph>id</codeph> 属性，并且 <codeph>object</codeph> 和 <codeph>embed</codeph> 标签的 <codeph>id</codeph> 和 <codeph>name</codeph> 属性不包含以下字符：</p>
 <pre>
 . - + ~~ / \
 </pre>
 <p><b>注意：</b>Flash Player 9.0.115.0 版和更高版本允许<codeph/>在 <codeph>id</codeph> 和 <codeph>name</codeph> 属性中使用 .（句点）字符。</p>
 
 <p>在浏览器中运行的 Flash Player 10 和更高版本中，以编程方式使用此类打开弹出窗口可能不会成功。不同的浏览器（和浏览器配置）可能会随时阻止弹出窗口；不能保证可以显示任何弹出窗口。不过，为了尽可能成功，请仅在作为用户操作的直接结果执行的代码中使用此类打开弹出窗口（例如，在鼠标单击或按键事件的事件处理函数中）。</p>
 
 <p>利用 ActionScript，可以在 HTML 页上执行以下操作：
 <ul> 
   <li>调用任何 JavaScript 函数。</li>
   <li>传递任意数量、具有任意名称的参数。</li>
   <li>传递各种数据类型（Boolean、Number、String 等等）。</li>
   <li>接收来自 JavaScript 函数的返回值。</li>
 </ul>
 </p>
 
 <p>通过在 HTML 页上使用 JavaScript，可以：
 <ul>
   <li>调用 ActionScript 函数。</li>
   <li>使用标准的函数调用表示法传递参数。</li>
   <li>将值返回给 JavaScript 函数。</li>
 </ul>
 </p>
 
 <p>Flash Player 当前不支持嵌入到 HTML 表单中的 SWF 文件。</p>
 
 <p><i>注意：</i>在 Adobe AIR 中，ExternalInterface 类可用于在 HTMLLoader 控件中加载的 HTML 页的 JavaScript 与嵌入在该 HTML 页的 SWF 内容中的 ActionScript 之间实现通信。</p>
 
 </apiDesc><example conref="examples\ExternalInterfaceExample.as"> 以下示例演示了在 Flash Player 与 HTML 容器之间发送数据的过程。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.external.ExternalInterface;
    import flash.text.TextField;
    import flash.utils.Timer;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;

    public class ExternalInterfaceExample extends Sprite {
        private var input:TextField;
        private var output:TextField;
        private var sendBtn:Sprite;

        public function ExternalInterfaceExample() {
            input = new TextField();
            input.type = TextFieldType.INPUT;
            input.background = true;
            input.border = true;
            input.width = 350;
            input.height = 18;
            addChild(input);

            sendBtn = new Sprite();
            sendBtn.mouseEnabled = true;
            sendBtn.x = input.width + 10;
            sendBtn.graphics.beginFill(0xCCCCCC);
            sendBtn.graphics.drawRoundRect(0, 0, 80, 18, 10, 10);
            sendBtn.graphics.endFill();
            sendBtn.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(sendBtn);

            output = new TextField();
            output.y = 25;
            output.width = 450;
            output.height = 325;
            output.multiline = true;
            output.wordWrap = true;
            output.border = true;
            output.text = "Initializing...\n";
            addChild(output);

            if (ExternalInterface.available) {
                try {
                    output.appendText("Adding callback...\n");
                    ExternalInterface.addCallback("sendToActionScript", receivedFromJavaScript);
                    if (checkJavaScriptReady()) {
                        output.appendText("JavaScript is ready.\n");
                    } else {
                        output.appendText("JavaScript is not ready, creating timer.\n");
                        var readyTimer:Timer = new Timer(100, 0);
                        readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
                        readyTimer.start();
                    }
                } catch (error:SecurityError) {
                    output.appendText("A SecurityError occurred: " + error.message + "\n");
                } catch (error:Error) {
                    output.appendText("An Error occurred: " + error.message + "\n");
                }
            } else {
                output.appendText("External interface is not available for this container.");
            }
        }
        private function receivedFromJavaScript(value:String):void {
            output.appendText("JavaScript says: " + value + "\n");
        }
        private function checkJavaScriptReady():Boolean {
            var isReady:Boolean = ExternalInterface.call("isReady");
            return isReady;
        }
        private function timerHandler(event:TimerEvent):void {
            output.appendText("Checking JavaScript status...\n");
            var isReady:Boolean = checkJavaScriptReady();
            if (isReady) {
                output.appendText("JavaScript is ready.\n");
                Timer(event.target).stop();
            }
        }
        private function clickHandler(event:MouseEvent):void {
            if (ExternalInterface.available) {
                ExternalInterface.call("sendToJavaScript", input.text);
            }
        }
    }
}


</codeblock> 为了测试前面的 ActionScript 代码，请使用以下 HTML 模板嵌入生成的 SWF 文件：
 <codeblock rev="2.0">
 &lt;!-- saved from url=(0014)about:internet -->
 &lt;html lang="en">
 &lt;head>
 &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 &lt;title>ExternalInterfaceExample&lt;/title>
 &lt;script language="JavaScript">
     var jsReady = false;
     function isReady() {
         return jsReady;
     }
     function pageInit() {
         jsReady = true;
         document.forms["form1"].output.value += "\n" + "JavaScript is ready.\n";
     }
     function thisMovie(movieName) {
         if (navigator.appName.indexOf("Microsoft") != -1) {
             return window[movieName];
         } else {
             return document[movieName];
         }
     }
     function sendToActionScript(value) {
         thisMovie("ExternalInterfaceExample").sendToActionScript(value);
     }
     function sendToJavaScript(value) {
         document.forms["form1"].output.value += "ActionScript says: " + value + "\n";
     }
 &lt;/script>
 &lt;/head>
 &lt;body onload="pageInit();">
 
     &lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
             id="ExternalInterfaceExample" width="500" height="375"
             codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab">
         &lt;param name="movie" value="ExternalInterfaceExample.swf" />
         &lt;param name="quality" value="high" />
         &lt;param name="bgcolor" value="#869ca7" />
         &lt;param name="allowScriptAccess" value="sameDomain" />
         &lt;embed src="ExternalInterfaceExample.swf" quality="high" bgcolor="#869ca7"
             width="500" height="375" name="ExternalInterfaceExample" align="middle"
             play="true" loop="false" quality="high" allowScriptAccess="sameDomain"
             type="application/x-shockwave-flash"
             pluginspage="http://www.macromedia.com/go/getflashplayer">
         &lt;/embed>
     &lt;/object>
 
     &lt;form name="form1" onsubmit="return false;">
         &lt;input type="text" name="input" value="" />
         &lt;input type="button" value="Send" onclick="sendToActionScript(this.form.input.value);" />&lt;br />
         &lt;textarea cols="60" rows="20" name="output" readonly="true">Initializing...&lt;/textarea>
     &lt;/form>
 
 &lt;/body>
 &lt;/html>
 </codeblock>
</example></apiClassifierDetail><related-links><link href="flash.system.xml#/fscommand()"><linktext>flash.system.fscommand()</linktext></link></related-links><apiOperation id="flash.external:ExternalInterface:addCallback"><apiName>addCallback</apiName><shortdesc>
     将 ActionScript 方法注册为可从容器调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>此容器不支持传入调用。仅在适用于 Windows 的 Internet Explorer 和使用 NPRuntime API 的浏览器（如 Mozilla 1.7.5 及更高版本或 Firefox 1.0 及更高版本）中支持传入调用。
     
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>您无权访问的沙箱中的 ActionScript 已经添加了具有指定名称的回调；您不能覆盖该回调。要解决此问题，请改写原来调用 <codeph>addCallback()</codeph> 方法的 ActionScript，以使其还调用 <codeph>Security.allowDomain()</codeph> 方法。
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>包含环境属于调用代码无权访问的安全沙箱。要解决此问题，请按照下列步骤操作：
     
     <ol>
     
      <li>在包含 SWF 文件的 HTML 页中，在该文件的 <codeph>object</codeph> 标签中设置以下参数：
     
      <p><codeph>&lt;param name="allowScriptAccess" value="always" /></codeph></p>
     
      </li>
     
      <li>在 SWF 文件中，添加以下 ActionScript：
     
      <p><codeph>flash.system.Security.allowDomain(<i>sourceDomain</i>)</codeph></p>
     
      </li>
     
     </ol>
     
      
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>functionName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>容器可用于调用函数的名称。
     </apiDesc></apiParam><apiParam><apiItemName>closure</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>要调用的 closure 函数。这可能是一个独立的函数，或者可能是引用对象实例方法的 closure 方法。通过传递 closure 方法，可以将回调定向到特定对象实例的方法。
                    <p><b>注意：</b>对闭包值为 <codeph>null</codeph> 的现有回调函数重复 <codeph>addCallback()</codeph> 将删除回调。</p>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     将 ActionScript 方法注册为可从容器调用。成功调用 <codeph>addCallBack()</codeph> 后，容器中的 JavaScript 或 ActiveX 代码可以调用在 Flash Player 中注册的函数。
     
     <p><b>注意：</b>对于在浏览器中运行的<i>本地</i>内容，仅当 SWF 文件以及包含它的网页位于受信任的本地安全沙箱中时，对 <codeph>ExternalInterface.addCallback()</codeph> 方法的调用才有效。有关详细信息，请参阅 Flash Player 开发人员中心主题：<xref href="http://www.adobe.com/go/devnet_security_en" scope="external">安全性</xref>。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.external:ExternalInterface:call"><apiName>call</apiName><shortdesc> 
     调用由 Flash Player 容器公开的函数，不传递参数或传递多个参数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Should probably provide a link for the 4th paragraph above for info on Netscape.
     
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>此容器不支持传出调用。仅在适用于 Windows 的 Internet Explorer 和使用 NPRuntime API 的浏览器（如 Mozilla 1.7.5 及更高版本或 Firefox 1.0 及更高版本）中支持传出调用。
     
     </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>包含环境属于调用代码无权访问的安全沙箱。要解决此问题，请按照下列步骤操作：
     
     <ol>
     
      <li>在包含 SWF 文件的 HTML 页中，在该文件的 <codeph>object</codeph> 标签中设置以下参数：
     
      <p><codeph>&lt;param name="allowScriptAccess" value="always" /></codeph></p>
     
      </li>
     
      <li>在 SWF 文件中，添加以下 ActionScript：
     
      <p><codeph>flash.system.Security.allowDomain(<i>sourceDomain</i>)</codeph></p>
     
      </li>
     
     </ol>
      
      </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiDesc>从容器接收的响应。如果调用失败，则会返回 <codeph>null</codeph> 并引发错误；例如，如果容器中没有此类函数、接口不可用、发生递归（使用 Netscape 或 Opera 浏览器）或出现安全问题。
     
     </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>functionName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>要在容器中调用的函数的字母数字名称。若使用非字母数字函数名称，则将导致出现运行时错误（错误 2155）。可以使用 <codeph>try..catch</codeph> 块处理此错误。
     </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>传递到容器中的函数的参数。您可以指定零个或多个参数，参数之间用逗号分隔。它们可以是任何 ActionScript 数据类型。如果调用的是 JavaScript 函数，则会自动将 ActionScript 类型转换为 JavaScript 类型；如果调用的是某个其它 ActiveX 容器，则会在请求消息中对参数进行编码。
      
     </apiDesc></apiParam><apiTipTexts><apiTipText>调用容器中的一个函数。
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc> 
     调用由 Flash Player 容器公开的函数，不传递参数或传递多个参数。如果该函数不可用，调用将返回 <codeph>null</codeph>；否则，它返回由该函数提供的值。<i>不</i>允许在 Opera 或 Netscape 浏览器中使用递归；在这些浏览器上，递归调用将生成 <codeph>null</codeph> 响应。（Internet Explorer 和 Firefox 浏览器上支持递归。）
     
     <p>如果该容器是 HTML 页，则此方法在 <codeph>script</codeph> 元素中调用 JavaScript 函数。</p>
     
     <p>如果该容器是某个其它 ActiveX 容器，此方法将使用指定的名称分派 FlashCall ActiveX 事件，并且该容器将处理该事件。</p>
     
     <p>如果该容器承载 Netscape 插件，您可以写入对新 NPRuntime 接口的自定义支持或嵌入 HTML 控件以及在 HTML 控件内嵌入 Flash Player。如果嵌入 HTML 控件，则可以通过本机容器应用程序的 JavaScript 接口与 Flash Player 进行通信。</p>
     
     <p><b>注意：</b>对于在浏览器中运行的<i>本地</i>内容，仅当 SWF 文件以及包含它的网页（如果有）位于受信任的本地安全沙箱中时，才允许调用 <codeph>ExternalInterface.call()</codeph> 方法。此外，还可以在包含 SWF 内容的 HTML 页中设置 <codeph>object</codeph> 和 <codeph>embed</codeph> 标签的 <codeph>allowNetworking</codeph> 参数，以防止 SWF 文件使用此方法。有关详细信息，请参阅 Flash Player 开发人员中心主题：<xref href="http://www.adobe.com/go/devnet_security_en" scope="external">安全性</xref>。</p>
     
     <p>在 Flash Player 10 和 Flash Player 9 Update 5 中，如果启用了弹出窗口阻止程序，则某些 Web 浏览器限制使用此方法。在这种情况下，只有在响应用户事件（例如，在鼠标单击或按键事件的事件处理函数中）时才能成功调用此方法。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.external:ExternalInterface:marshallExceptions"><apiName>marshallExceptions</apiName><shortdesc>
     指示外部接口是否应该尝试将 ActionScript 异常传递到当前浏览器并将 JavaScript 异常传递到 Flash Player。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>在 AS 和 JS 之间传递异常。     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     指示外部接口是否应该尝试将 ActionScript 异常传递到当前浏览器并将 JavaScript 异常传递到 Flash Player。必须显式将此属性设置为 <codeph>true</codeph>，以便在 ActionScript 中捕获 JavaScript 异常以及在 JavaScript 中捕获 ActionScript 异常。
     
     </apiDesc><example conref="examples\ExternalInterface.marshallExceptions.1.as"> 下面的示例创建一个 ActionScript 函数，并使用 <codeph>addCallback()</codeph> 方法向包含它的浏览器进行注册。新函数会引发异常，以便在浏览器中运行的 JavaScript 代码可以捕获该异常。此示例还包含 <codeph>try..catch</codeph> 语句，以便捕获在调用 <codeph>throwit()</codeph> 函数时浏览器引发的任何异常。
<codeblock>

package
{
    import flash.external.*
    import flash.net.*;
    import flash.display.*;
    import flash.system.System;
    public class ext_test extends Sprite {
    function ext_test():void {
        ExternalInterface.marshallExceptions = true;
        ExternalInterface.addCallback("g", g);

        try {
        ExternalInterface.call("throwit");
        } catch(e:Error) {
        trace(e)
        }
    }
    function g() { throw new Error("exception from actionscript!!!!") }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.external.xml#ExternalInterface/addCallBack()"><linktext>addCallBack()</linktext></link><link href="../../statements.html#try..catch..finally"><linktext>try..catch..finally 语句</linktext></link></related-links></apiValue><apiValue id="flash.external:ExternalInterface:available:get"><apiName>available</apiName><shortdesc>
     指示此播放器是否位于提供外部接口的容器中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>指示此 Flash Player 是否位于提供外部接口的容器中。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     指示此播放器是否位于提供外部接口的容器中。如果外部接口可用，则此属性为 <codeph>true</codeph>；否则，为 <codeph>false</codeph>。
     
     <p><b>注意：</b>将外部 API 与 HTML 一起使用时，应始终在尝试调用任何 JavaScript 方法之前检查 HTML 是否已完成加载。</p>
     
     </apiDesc><example>下面的示例使用 <codeph>available</codeph> 属性来确定播放器是否位于提供外部接口的容器中。
     <codeblock rev="3.0">
     package {
       import flash.text.TextField;
       import flash.display.MovieClip;
       import flash.external.ExternalInterface;
     
       public class extint_test extends MovieClip {
         public function extint_test() {
           var isAvailable:Boolean = ExternalInterface.available;
           var availTxt:TextField = new TextField();
           availTxt.text = isAvailable.toString();
           addChild(availTxt);
         }
       }
     }
     </codeblock>
     
      
      </example></apiValueDetail></apiValue><apiValue id="flash.external:ExternalInterface:objectID:get"><apiName>objectID</apiName><shortdesc>
     在 Internet Explorer 中返回 object 标签的 id 属性，或者在 Netscape 中返回 embed 标签的 name 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     在 Internet Explorer 中返回 <codeph>object</codeph> 标签的 <codeph>id</codeph> 属性，或者在 Netscape 中返回 <codeph>embed</codeph> 标签的 <codeph>name</codeph> 属性。
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>