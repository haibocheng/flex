<?xml version="1.0"?>
<apiPackage id="flash.text.engine"><apiName>flash.text.engine</apiName><apiDetail/><apiClassifier id="flash.text.engine:TextLine"><apiName>TextLine</apiName><shortdesc>
 TextLine 类用于在显示列表上显示文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObjectContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextLine 类用于在显示列表上显示文本。
 
 <p>无法从 ActionScript 代码直接创建 TextLine 对象。如果调用 <codeph>new TextLine()</codeph>，则会引发异常。要创建 TextLine 对象，请调用 TextBlock 的 <codeph>createTextLine()</codeph> 方法。</p>
 
 <p>TextLine 封装呈现其内容所必需的最少的信息。您可以通过一些方法检索对交互有用的其它信息，这些方法描述了行原子的属性。术语“原子”是指图形元素和字符（包括字符合并组），是组成文本行的不可分割的实体。务必请注意，在调用这些方法之前，播放器不会创建或存储这些方法所需要的数据。为了避免增加内存开销，除非必要，否则请不要创建原子数据。如果不再需要原子数据，可以调用 <codeph>flushAtomData()</codeph> 方法对其进行垃圾回收。</p>
 
 <p>以下方法和属性将会生成原子数据（如果数据不存在）：</p>
 <ul>
 <li><codeph>atomCount</codeph></li>
 <li><codeph>getAtomBidiLevel()</codeph></li>
 <li><codeph>getAtomBounds()</codeph></li>
 <li><codeph>getAtomCenter()</codeph></li>
 <li><codeph>getAtomIndexAtCharIndex()</codeph></li>
 <li><codeph>getAtomIndexAtPoint()</codeph></li>
 <li><codeph>getAtomGraphic()</codeph></li>
 <li><codeph>getAtomTextBlockBeginIndex()</codeph></li>
 <li><codeph>getAtomTextBlockEndIndex()</codeph></li>
 <li><codeph>getAtomTextRotation()</codeph></li>
 <li><codeph>getAtomWordBoundaryOnLeft()</codeph></li>
 </ul>
 
 
 <p>在针对文本行的正常事件分派完成后，如果该文本行有效，则将事件镜像到分配给该文本行的内容元素对象的 <codeph>eventMirror</codeph> 属性中指定的事件分派程序。这些对象记录在 <codeph>TextLine.mirrorRegions</codeph> 属性中。如果事件传播失败或被中止，或者如果文本行无效，则不会镜像事件。</p>
 
 <p>镜像鼠标事件是一个特例。由于镜像区域并不实际显示对象，因此将为这些区域模拟 <codeph>mouseOver</codeph> 和 <codeph>mouseOut</codeph> 事件。并不模拟 <codeph>rollOver</codeph> 和 <codeph>rollOut</codeph> 事件。忽略所有自然发生的 <codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph> 和 <codeph>rollOut</codeph> 事件（无论这些事件将文本行作为目标还是将文本行的子项作为目标），而不会对其进行镜像。</p>
 
 <p>文本行对象的原点是基线的开始位置。如果在罗马字基线上没有设置包含拉丁文本的行的垂直位置（<codeph>y</codeph> 属性），则只有文本的下行字符将显示在向其中添加文本行的 Sprite 的顶部之下。请参阅下图：</p>
 
 <p><adobeimage alt="文本基线" href="../../../images/TextLine.gif"/></p>
 
 <p>TextLine 类具有多个始祖类（DisplayObjectContainer、InteractiveObject、DisplayObject 和 EventDispatcher），并从这些始祖类继承属性和方法。以下继承的属性不适用于 TextLine 对象： </p>
 
 <ul>
 <li><codeph>contextMenu</codeph></li>
 <li><codeph>focusRect</codeph></li>
 <li><codeph>tabChildren</codeph></li>
 <li><codeph>tabEnabled</codeph></li>
 <li><codeph>tabIndex</codeph></li>
 <li><codeph>transform</codeph></li>
 </ul>
 
 <p>如果您尝试设置这些属性，则文本引擎将引发错误：IllegalOperationError。您可以读取这些属性，但是它们将始终包含默认值。</p>
 
 </apiDesc><example conref="examples\TextLineExample.as"> 该示例通过使用 <codeph>getAtomBounds()</codeph> 为每个原子加边框，显示了各文本行并遍历了文本块中的原子。
    <ol>
        <li>将 NumericStepper 组件添加到库中。</li>
         <li>将该代码作为 TextLineExample.as 另存到 FLA 文件所在的同一目录中。</li>
        <li>将 FLA 的“属性”窗口中的“类”设置为“TextLineExample”。</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.FontPosture;
    import flash.text.engine.FontWeight;
    import fl.controls.NumericStepper;
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public class TextLineExample extends Sprite {
        
        private var atomStepper:NumericStepper = new NumericStepper();
        private var atomDataContainer:Sprite;
        private var fontDescriptionItalic:FontDescription = new FontDescription("Arial", FontWeight.NORMAL, FontPosture.ITALIC);
        private var fontDescriptionNormal:FontDescription = new FontDescription("Arial", FontWeight.NORMAL , FontPosture.NORMAL);
        private var textBlock:TextBlock = new TextBlock();
        private var textLine:TextLine;
        
        public function TextLineExample():void {
            
            var myText:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. From the text block, " +
            "the createTextLine() method created these lines, 300 pixels wide, "  +
            "for display." ;
            
            atomStepper.minimum = 0;
            atomStepper.value = 0;
            atomStepper.width = 50;
            addChild(atomStepper);
            atomStepper.x = 20;
            atomStepper.y = 120;
            atomStepper.addEventListener(Event.CHANGE, nsChange);
            
            var directions:String = "Click up / down arrows to frame atoms in text block above.";
            
            var formatItalic:ElementFormat = new ElementFormat(fontDescriptionItalic);
            formatItalic.fontSize = 12;
            var textElement1:TextElement = new TextElement(directions, formatItalic);
            textBlock.content = textElement1;
            createLines(textBlock, 15, 160, 400, this);
            
            var formatNormal:ElementFormat = new ElementFormat(fontDescriptionNormal);
            formatNormal.fontSize = 16;
            var textElement2:TextElement = new TextElement(myText, formatNormal);
            textBlock.content = textElement2;
            createLines(textBlock, 15.0, 20.0, 300, this);
            textLine = textBlock.firstLine;
            atomStepper.maximum = textLine.atomCount - 1;
            showAtom(textLine, 0);
        }
            
        private function nsChange(event:Event):void
        {
            removeAtom(textLine);
            if (atomStepper.value == textLine.atomCount - 1)
            {
                if(textLine != textBlock.lastLine)
                {
                    textLine = textLine.nextLine;
                    atomStepper.maximum = textLine.atomCount - 1;
                    atomStepper.value = 0;
                }
            }
            showAtom(textLine, atomStepper.value);
        }
            
        private function createLines(textBlock, startX, startY, width, container)
        {
            var textLine:TextLine = textBlock.createTextLine (null, width);
            while (textLine)
            {
                textLine.x = startX;
                textLine.y = startY;
                startY += textLine.height + 2;
                container.addChild(textLine);
                textLine = textBlock.createTextLine (textLine, width);
            }
        }
            
        private function showAtom(textLine, i):void
        {
            var box:Sprite = new Sprite();
            var mcGraphics = box.graphics;
            var bounds:Rectangle = textLine.getAtomBounds(i);
            mcGraphics.lineStyle(1, 0xFF0000, 1.0);
            mcGraphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
            textLine.userData = textLine.addChild(box);
            displayAtomData(textLine,i);
        }
            
        private function displayAtomData(textLine, i)
        {
            if(atomDataContainer != null)
                removeChild(atomDataContainer);
            atomDataContainer=new Sprite();
            var format = new ElementFormat(fontDescriptionNormal);
            format.color = 0x00000FF;
            var n:int = 0;
            var nxtY:Number = 0;
            var atomInfo:String = "value of getAtomBidiLevel() is: " + textLine.getAtomBidiLevel(i)+"\n"
            +"value of getAtomCenter() is: " + textLine.getAtomCenter(i)+"\n"
            +"value of getAtomIndexAtCharIndex() is: " + textLine.getAtomIndexAtCharIndex(i)+"\n"
            +"value of getAtomTextBlockBeginIndex() is: " + textLine.getAtomTextBlockBeginIndex(i)+"\n"
            +"value of getAtomTextBlockEndIndex() is: " + textLine.getAtomTextBlockEndIndex(i)+"\n"
            +"value of getAtomTextRotation() is: " + textLine.getAtomTextRotation(i)+"\n";
            var atomtextBlock:TextBlock = new TextBlock();
            var textElement3:TextElement = new TextElement(atomInfo, format);
            atomtextBlock.content = textElement3;
            createLines(atomtextBlock,20,200,500, atomDataContainer)
            addChild(atomDataContainer);
        }
            
        private function removeAtom(textLine):void
        {
            textLine.removeChild(textLine.userData);
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links><apiOperation id="flash.text.engine:TextLine:dump"><apiName>dump</apiName><shortdesc>
	 将 TextLine 的基础内容转储为 XML 字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 将 TextLine 的基础内容转储为 XML 字符串。这在自动测试过程中很有用，并包括文本、格式和呈现信息。它仅在调试版 Flash Player 中可用。
	 
	 <p>有关输出的说明，请参阅 TextBlock.dump() 方法。</p>
	 
	 <p><b>注意：</b>将来可能更改此方法中输出的内容和格式。Adobe 不保证此方法的向后兼容性。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/dump()"><linktext>TextBlock.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:flushAtomData"><apiName>flushAtomData</apiName><shortdesc>
	 释放行的原子数据以便进行垃圾回收。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 释放行的原子数据以便进行垃圾回收。术语“原子”<i/>是指组成文本行的不可分割的实体。当您访问 <codeph>atomCount</codeph> 属性或调用用于检索有关原子的信息的方法之一时，文本引擎将生成原子数据。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>atomCount</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBidiLevel()"><linktext>getAtomBidiLevel()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBounds()"><linktext>getAtomBounds()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomCenter()"><linktext>getAtomCenter()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomGraphic()"><linktext>getAtomGraphic()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtCharIndex()"><linktext>getAtomIndexAtCharIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtPoint()"><linktext>getAtomIndexAtPoint()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockBeginIndex()"><linktext>getAtomTextBlockBeginIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockEndIndex()"><linktext>getAtomTextBlockEndIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>getAtomTextRotation()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomWordBoundaryOnLeft()"><linktext>getAtomWordBoundaryOnLeft()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBidiLevel"><apiName>getAtomBidiLevel</apiName><shortdesc>
	 获取指定索引处原子的双向级别。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处的原子的双向级别。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处原子的双向级别。由 <codeph>TextBlock.bidiLevel</codeph> 和构成行的字符的 Unicode 双向属性共同确定。
	 
	 <p>例如，如果您使用一些希伯来语文字来作为文本块的开头，并将 <codeph>TextBlock.bidiLevel</codeph> 设置为 1，则将确立从右到左的默认文本顺序。如果您在文本中引用了一段英文（从左到右），则这些英文的 <codeph>AtomBidiLevel</codeph> 为 2。如果英文文字中包含少量阿拉伯文字（从右到左），则这些阿拉伯文字的 <codeph>AtomBidiLevel</codeph> 将为 3。如果阿拉伯文字中存在一个数字（从左到右），则该数字的 <codeph>AtomBidiLevel</codeph> 设置为 4。无论原子在哪一行中结束，希伯来语原子为 <codeph>AtomBidiLevel</codeph> 1，英语原子为 <codeph>AtomBidiLevel</codeph> 2，阿拉伯语原子为 <codeph>AtomBidiLevel</codeph> 3，数字原子为 <codeph>AtomBidiLevel</codeph> 4。</p>
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>TextBlock.bidiLevel</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBounds"><apiName>getAtomBounds</apiName><shortdesc>
	 获取指定索引处与文本行相关的原子的范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处原子的范围。
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处与文本行相关的原子的范围。指定的原子的范围由其在行中的水平位置 (<codeph>x</codeph>)、垂直位置 (<codeph>y</codeph>)、宽度 (<codeph>w</codeph>) 和高度 (<codeph>h</codeph>) 构成。所有值均以像素为单位。 
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomCenter"><apiName>getAtomCenter</apiName><shortdesc>
	 获取指定索引处沿基线测量的原子中心。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处原子的中心。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处沿基线测量的原子中心。
	 
	 <p>如果原子数据尚不存在，则播放器可调用此方法创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomGraphic"><apiName>getAtomGraphic</apiName><shortdesc>
	 获取指定索引处原子的图形；如果该原子是一个字符，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处原子的图形。
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处原子的图形；如果该原子是一个字符，则为 <codeph>null</codeph>。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtCharIndex"><apiName>getAtomIndexAtCharIndex</apiName><shortdesc>
	 返回包含由 charIndex 参数指定的字符的原子的索引；如果该字符不构成行中的任何原子，则返回 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>包含 <codeph>charIndex</codeph> 处字符的原子的索引。如果该字符不构成行中的任何原子，则返回 -1。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的字符索引值（例如，第一个字符的索引值是 0，第二个字符的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返回包含由 <codeph>charIndex</codeph> 参数指定的字符的原子的索引；如果该字符不构成行中的任何原子，则返回 -1。<codeph>charIndex</codeph> 相对于包含该行的文本块的全部内容。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtPoint"><apiName>getAtomIndexAtPoint</apiName><shortdesc>
	 返回由 x 和 y 参数指定的点处的原子的索引；如果该点处没有原子，则返回 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>点下方原子的索引。如果点不在任何原子上方，则返回 -1。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>stageX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>要测试的点的全局 <i>x</i> 坐标。
	 </apiDesc></apiParam><apiParam><apiItemName>stageY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>要测试的点的全局 <i>y</i> 坐标。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返回由 <codeph>x</codeph> 和 <codeph>y</codeph> 参数指定的点处的原子的索引；如果该点处没有原子，则返回 -1。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 <p>此方法采用全局坐标，以便您可以轻松地将其与 <codeph>MouseEvent.stageX</codeph> 和 <codeph>MouseEvent.stageY</codeph> 属性一起使用。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockBeginIndex"><apiName>getAtomTextBlockBeginIndex</apiName><shortdesc>
	 获取指定索引处原子的文本块开始索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处原子的文本块开始索引。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处原子的文本块开始索引。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockEndIndex"><apiName>getAtomTextBlockEndIndex</apiName><shortdesc>
	 获取指定索引处原子的文本块结束索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处原子的文本块结束索引。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处原子的文本块结束索引。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextRotation"><apiName>getAtomTextRotation</apiName><shortdesc>
	 获取指定索引处原子的旋转。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>atomIndex</codeph> 处原子的旋转。
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取指定索引处原子的旋转。对此属性使用 TextRotation 常量。原子的旋转是元素和行的累积旋转。其主要用途是在与 TextLine 进行交互时设置尖号（光标）的方向。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomWordBoundaryOnLeft"><apiName>getAtomWordBoundaryOnLeft</apiName><shortdesc>
	 指示文字边界是否在指定索引处原子的左侧出现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的原子索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>一个布尔值，指示文字边界是否在 <codeph>atomIndex</codeph> 处原子的左侧出现。
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的原子索引值（例如，第一个原子的索引值是 0，第二个原子的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指示文字边界是否在指定索引处原子的左侧出现。文字边界由构成行的字符的 Unicode 属性决定。
	 
	 <p>如果原子数据尚不存在，则调用此方法可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getBaselinePosition"><apiName>getBaselinePosition</apiName><shortdesc>
	 获取与 TextBlock.baselineZero 相关的指定基线的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果指定的 <codeph>baseline</codeph> 不是 <codeph>TextBaseline</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>与 <codeph>TextBlock.baselineZero</codeph> 相关的指定基线的位置。
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>要检索其位置的基线。使用 <codeph>TextBaseline</codeph> 值。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 获取与 <codeph>TextBlock.baselineZero</codeph> 相关的指定基线的位置。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getMirrorRegion"><apiName>getMirrorRegion</apiName><shortdesc>
	 返回行上其 mirror 属性与 mirror 参数指定的属性相匹配的第一个 TextLineMirrorRegion；如果没有匹配项，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>行上其 <codeph>mirror</codeph> 属性与指定值相匹配的第一个 <codeph>TextLineMirrorRegion</codeph>；如果没有匹配项，则为 <codeph>null</codeph>。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLineMirrorRegion</apiOperationClassifier></apiReturn><apiParam><apiItemName>mirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiDesc>要搜索的 <codeph>EventDispatcher</codeph> 镜像对象。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返回行上其 <codeph>mirror</codeph> 属性与 <codeph>mirror</codeph> 参数指定的属性相匹配的第一个 <codeph>TextLineMirrorRegion</codeph>；如果没有匹配项，则为 <codeph>null</codeph>。
	 <p>即使是一个 <codeph>TextElement</codeph> 也可以在一个或多个文本行上生成多个 <codeph>TextLineMirrorRegion</codeph> 对象，具体取决于双向级别和换行设置。<codeph>nextRegion</codeph> 和 <codeph>previousRegion</codeph> 属性链接从一个文本元素生成的所有镜像区域。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextLine:MAX_LINE_WIDTH"><apiName>MAX_LINE_WIDTH</apiName><shortdesc> 
	文本行的最大请求宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000000</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	文本行的最大请求宽度（以像素为单位）。如果您没有指定值，则 <codeph>TextBlock.createTextLine()</codeph> 方法使用此常量作为 <codeph>width</codeph> 参数的默认值。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:userData"><apiName>userData</apiName><shortdesc>
	 为作者提供了一种将任意数据与文本行相关联的途径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 为作者提供了一种将任意数据与文本行相关联的途径。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:ascent:get"><apiName>ascent</apiName><shortdesc>
	 指定从基线到行中最高字符顶部的像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 指定从基线到行中最高字符顶部的像素数。对于仅包含图形元素的 TextLine，将 <codeph>ascent</codeph> 设置为 0。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:atomCount:get"><apiName>atomCount</apiName><shortdesc>
	 行中的原子数，即不可分割的元素数，其中包括空格和图形元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>行的 <codeph>validity</codeph> 为 <codeph>TextLineValidity.STATIC</codeph>。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 行中的原子数，即不可分割的元素数，其中包括空格和图形元素。
	 
	 <p>如果原子数据尚不存在，则获取此属性可使播放器创建原子数据。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:descent:get"><apiName>descent</apiName><shortdesc>
	 指定从基线到行中最低字符底部的像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 指定从基线到行中最低字符底部的像素数。对于仅包含图形元素的 TextLine，将 <codeph>descent</codeph> 设置为 0。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:hasGraphicElement:get"><apiName>hasGraphicElement</apiName><shortdesc>
	 指示文本行是否包含任何图形元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 指示文本行是否包含任何图形元素。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:mirrorRegions:get"><apiName>mirrorRegions</apiName><shortdesc>
	 包含与行相关联的 TextLineMirrorRegion 对象的矢量；如果没有这样的对象，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flash.text.engine:TextLineMirrorRegion"/></apiValueDef><apiDesc>
	 包含与行相关联的 <codeph>TextLineMirrorRegion</codeph> 对象的矢量；如果没有这样的对象，则为 <codeph>null</codeph>。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:nextLine:get"><apiName>nextLine</apiName><shortdesc>
	 TextBlock 中的下一个 TextLine；如果当前行是块中的最后一行或行的 validity 为 TextLineValidity.STATIC，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 中的下一个 TextLine；如果当前行是块中的最后一行或行的 validity 为 <codeph>TextLineValidity.STATIC</codeph>，则为 <codeph>null</codeph>。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/previousLine"><linktext>previousLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:previousLine:get"><apiName>previousLine</apiName><shortdesc>
	 TextBlock 中的上一个 TextLine；如果行是块中的第一行或行的 validity 为 TextLineValidity.STATIC，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 中的上一个 TextLine；如果行是块中的第一行或行的 validity 为 <codeph>TextLineValidity.STATIC</codeph>，则为 <codeph>null</codeph>。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/nextLine"><linktext>nextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:rawTextLength:get"><apiName>rawTextLength</apiName><shortdesc>
	 文本块中构成行的原始文本的长度，包括表示图形元素的 U+FDEF 字符以及构成该行的一部分但不会显示的任何尾随空格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 文本块中构成行的原始文本的长度，包括表示图形元素的 U+FDEF 字符以及构成该行的一部分但不会显示的任何尾随空格。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement/rawText"><linktext>TextElement.rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:specifiedWidth:get"><apiName>specifiedWidth</apiName><shortdesc>
	 使用 TextBlock.createTextLine() 方法创建行时为该方法指定的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 使用 <codeph>TextBlock.createTextLine()</codeph> 方法创建行时为该方法指定的宽度。在确定所做更改是否需要重新换行时将使用该值。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link><link href="flash.text.engine.xml#TextLine/unjustifiedTextWidth"><linktext>unjustifiedTextWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 包含此文本行的 TextBlock；如果该行的 validity 为 TextLineValidity.STATIC，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 包含此文本行的 TextBlock；如果该行的 validity 为 <codeph>TextLineValidity.STATIC</codeph>，则为 null。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 文本块原始文本中行的第一个字符的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 文本块原始文本中行的第一个字符的索引。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 文本行的逻辑高度，即 ascent + descent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 文本行的逻辑高度，即 <codeph>ascent</codeph> + <codeph>descent</codeph>。要获取油墨高度，请获取继承的 <codeph>height</codeph> 属性。
	 
	 <p>此值是基于限制行的基线间的距离计算的，无论基线是表意顶部/底部基线还是上缘/下缘基线，具体取决于 TextBlock.baselineZero 是否为 ideo。计算这些基线时不考虑图形元素。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/height"><linktext>flash.display.DisplayObject.height</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 文本行的逻辑宽度，即文本引擎用于布置行的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 文本行的逻辑宽度，即文本引擎用于布置行的宽度。访问继承的 <codeph>width</codeph> 属性以获取所有绘制的像素的边框的实际宽度。
	 
	 </apiDesc><example conref="examples\TextLine_textWidthExample.as"> 本示例将一个文本行用标准形式和斜体形式各显示一次，并在每种情况下跟踪 <codeph>specifiedWidth</codeph>、<codeph>textWidth</codeph> 和 <codeph>width</codeph> 属性的值。跟踪输出结果为： 
 <ul>
         <li>specifiedWidth is: 500</li>
      <li>textWidth is: 268.9921875</li>
      <li>width is: 269</li>
      <li>specifiedWidth is: 500</li>
      <li>textWidth is: 267.52734375</li>
      <li>width is: 267.55</li>
 </ul>
<codeblock>
 
package {
import flash.display.Sprite;
import flash.text.engine.TextBlock;
import flash.text.engine.TextElement;
import flash.text.engine.TextLine;
import flash.text.engine.FontDescription;
import flash.text.engine.ElementFormat;
import flash.text.engine.FontPosture;

    public class TextLine_textWidthExample extends Sprite {
        
        public function TextLine_textWidthExample() {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
            var yPos:Number = 20;
            var fontDescription:FontDescription = new FontDescription();
            var textBlock:TextBlock = new TextBlock();
            fontDescription.fontPosture = FontPosture.NORMAL;
            var format:ElementFormat = new ElementFormat(fontDescription, 12);
            var textElement:TextElement = new TextElement(str, format);
            textBlock.content = textElement;
            createLine(textBlock, yPos);
            var fontDescriptionItalic = fontDescription.clone();
            fontDescriptionItalic.fontPosture = FontPosture.ITALIC;
            var formatItalic = new ElementFormat(fontDescriptionItalic, 12);
            textElement = new TextElement(str, formatItalic);
            textBlock.content = textElement;
            createLine(textBlock, yPos + 20);
        }

        private function createLine(textBlock:TextBlock, yPos:Number):void {
            var textLine:TextLine = textBlock.createTextLine (null, 500);
            trace("specifiedWidth is: " + textLine.specifiedWidth);
            trace("textWidth is: " + textLine.textWidth);
            trace("width is: " + textLine.width);
            addChild(textLine);
            textLine.x = 15;
            textLine.y = yPos;     
        }
    }
}

</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/specifiedWidth"><linktext>specifiedWidth</linktext></link><link href="flash.display.xml#DisplayObject/width"><linktext>flash.display.DisplayObject.width</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc>
	 行未对齐时的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 行未对齐时的宽度。对于未对齐的文本，此值与 <codeph>textWidth</codeph> 相同。对于对齐的文本，此值为未对齐时具有的长度，并且 <codeph>textWidth</codeph> 表示实际的行宽度。例如，当将以下字符串对齐并按照 500 的宽度提交给 <codeph>TextBlock.createTextLine()</codeph> 时，该字符串的实际宽度为 500，而未对齐的宽度为 268.9921875。
	 
	 </apiDesc><example>当将以下示例中的字符串对齐时并按照 500 的宽度提交给 TextBlock.createTextLine() 时，该字符串的实际宽度将为 500，而其未对齐的宽度为 268.9921875。
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import flash.text.engine.TextBlock;
	 import flash.text.engine.TextElement;
	 import flash.text.engine.TextLine;
	 import flash.text.engine.FontDescription;
	 import flash.text.engine.ElementFormat;
	 import flash.text.engine.SpaceJustifier;
	 import flash.text.engine.LineJustification;

	 var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
	 var fontDescription:FontDescription = new FontDescription();
	 var textBlock:TextBlock = new TextBlock();
	 var format:ElementFormat = new ElementFormat(fontDescription, 12);
	 var textElement:TextElement = new TextElement(str, format);
	 textBlock.content = textElement;
	 var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_INCLUDING_LAST);
	 textBlock.textJustifier = spaceJustifier;
	 var textLine:TextLine = textBlock.createTextLine(null, 500);
	 textLine.y = 20;

	 addChild(textLine);
	 trace("textWidth value is: " + textLine.textWidth);		// 500.00244140625
	 trace("unjustifiedTextWidth is: " + textLine.unjustifiedTextWidth); // 268.9921875
	 </codeblock>
	 
	 </example></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextLine/specifiedTextWidth"><linktext>specifiedTextWidth</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:validity:get"><apiName>validity</apiName><shortdesc>
	 指定文本行的当前有效性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果当前值为 <codeph>TextLineValidity.STATIC</codeph>。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果当前值为 <codeph>TextLineValidity.INVALID</codeph> 并且新值为 <codeph>TextValidity.STATIC</codeph> 之外的任何值。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果当前值为 <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> 并且新值为 <codeph>TextLineValidity.VALID</codeph>。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果新值为 <codeph>TextLineValidity.POSSIBLY_INVALID</codeph>。
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定文本行的当前有效性。此属性的系统值包括在 <codeph>TextLineValidity</codeph> 类的成员中。用于设置此属性的规则如下：
	 
	 <p>如果将 validity 设置为非 <codeph>TextLineValidity</codeph> 成员的任何字符串，则会将行视为 USER_INVALID。USER_INVALID 是一个抽象概念，在此处用于表示任何这样的值。</p>
	 
	 <p>在修改 TextBlock 的内容时，播放器代码会将受影响的文本行、前一行和所有后续行标记为 INVALID。如果所做更改允许前一行吸收最初位于第一个受影响行上的部分内容，则必须将前一行标记为 INVALID。</p>
	 
	 <p>新断开的行始终为 VALID。播放器可能会将后面的行从 VALID 更改为 POSSIBLY_INVALID 或 INVALID。如果换行符相匹配，则播放器代码可能会将 POSSIBLY_INVALID 行更改为 VALID，否则，将 POSSIBLY_INVALID 行更改为 INVALID。</p>
	 
	 <p>用户代码可以将 VALID 行标记为 INVALID 或 USER_INVALID，并可以将 USER_INVALID 行标记为 VALID。用户代码不能将行标记为 POSSIBLY_INVALID。</p>
	 
	 <p>用户代码可以将任何行标记为 STATIC。这样做会使 <codeph>block</codeph> 成员变为 <codeph>null</codeph>。用户代码还会清除行的原子数据并防止重新创建这些数据。如果 STATIC 文本行中的任何图形元素是从文本块（原始派生 STATIC 文本行的文本块）中换行的新文本行的一部分，则将删除这些元素并为其重定父级。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabStop"><apiName>TabStop</apiName><shortdesc>
 TabStop 类表示文本块中 Tab 停靠位的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TabStop 类表示文本块中 Tab 停靠位的属性。您可以将 Tab 停靠位作为 TabStop 对象的矢量分配给 <codeph>TextBlock.tabStops</codeph> 属性。
 
 <p>将 TabStop 对象应用于 TextBlock 后设置该对象的属性不会使 TextBlock 无效。</p>
 
 </apiDesc><example conref="examples\TabStopExample.as"> 本示例阐释了四种 Tab 停靠位对齐设置的效果：START、CENTER、DECIMAL 和 END。
<codeblock>
package {
    
    import flash.text.engine.*;
    import flash.display.Sprite;
    
    public class TabStopExample extends Sprite {
        
        public function TabStopExample():void {
            var container:Sprite = new Sprite(); 
            
            var english:ElementFormat = new ElementFormat(); 
            english.fontDescription = new FontDescription("Arial"); 
            english.fontSize = 16;
            english.locale = "en"; 
            
            var tabStops:Vector.&lt;TabStop> = new Vector.&lt;TabStop>();    
            tabStops.push(
                new TabStop(TabAlignment.START, 20),
                new TabStop(TabAlignment.CENTER, 120),
                new TabStop(TabAlignment.DECIMAL, 220, "."),
                new TabStop(TabAlignment.END, 320)
            ); 
    
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(
                "\tstart\tcenter\tdeci.mal\tend\n" +        
                "\tl\tl\t3.4\tl\n" +
                "\tlm\tlm\t234.56\tlm\n" +
                "\tlmn\tlmn\t12345678.34567\tlmn\n"
                , english); 
            textBlock.tabStops = tabStops;
            var y:Number = 60;
            var previousTextLine:TextLine = null; 
            var textLine:TextLine;
            var i:int;
            var tabOrigin:Number = 100;
            for (i = 0; i &lt; 4; i++) {
                textLine = textBlock.createTextLine(previousTextLine, 1000, 0); 
                textLine.x = 20;
                textLine.y = y; 
                
                container.addChild(textLine);     
                
                y += 25; 
                previousTextLine = textLine; 
            }
            addChild(container);        
        }
    }
}

</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>TextBlock.tabStops</linktext></link><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links><apiConstructor id="flash.text.engine:TabStop:TabStop"><apiName>TabStop</apiName><shortdesc>
	 创建新的 TabStop。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>alignment</codeph> 不是 <codeph>TabAlignment</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>alignment</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>start</apiData><apiDesc>此 Tab 停靠位的 Tab 对齐类型。此属性的有效值包括在 <codeph>TabAlignment</codeph> 类的成员中。默认值为 <codeph>TabAlignment.START</codeph>。
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Tab 停靠位的位置，以像素为单位。默认值为 <codeph>0.0</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>decimalAlignmentToken</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>在 <codeph>alignment</codeph> 为 <codeph>TabAlignment.DECIMAL</codeph> 的情况下要使用的对齐标记，默认值为 <codeph>""</codeph>。
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 创建新的 TabStop。
     </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:TabStop:alignment:get"><apiName>alignment</apiName><shortdesc>
	 指定此 Tab 停靠位的 Tab 对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>TabAlignment</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定此 Tab 停靠位的 Tab 对齐方式。使用 TabAlignment 类中的常量来设置此属性。
	 
	 <p>默认值为 <codeph>TabAlignment.START</codeph>。</p>
	 
	 <p>如果行的原点与共享相同 Tab 停靠位的其它行不对齐，则使用 <codeph>TextBlock.createTextLine()</codeph> 的 <codeph>lineOffset</codeph> 参数调整 Tab 停靠位。</p>
	 
	 <p>使用 TabAlignment 类中的以下常量设置此属性的值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TabAlignment.START</codeph></entry>
	 	<entry><codeph>position</codeph> 属性指定带制表符的文本的开头<i/>距离文本行开头的像素数。</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.CENTER</codeph></entry>
	 	<entry><codeph>position</codeph> 属性指定带制表符的文本的中心<i/>距离文本行开头的像素数。</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.END</codeph></entry>
	 	<entry><codeph>position</codeph> 属性指定带制表符的文本的末尾<i/>距离文本行开头的像素数。</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.DECIMAL</codeph></entry>
	 	<entry><codeph>position</codeph> 属性指定对齐标记距离文本行开头的像素数。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
	 指定在将对齐属性设置为 TabAlignment.DECIMAL 时要使用的对齐标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 指定在将 <codeph>alignment</codeph> 属性设置为 <codeph>TabAlignment.DECIMAL</codeph> 时要使用的对齐标记。该值是存在于文本行中的一个字符串。
	 
	 <p>默认值为 <codeph>""</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment/DECIMAL"><linktext>TabAlignment.DECIMAL</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:position:get"><apiName>position</apiName><shortdesc>
	 Tab 停靠位相对于文本行开头的位置，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>如果设置为小于 0.0 的值。
   	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Tab 停靠位相对于文本行开头的位置，以像素为单位。
	 
	 <p>默认值为 0.0。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontLookup"><apiName>FontLookup</apiName><shortdesc>
FontLookup 类是与 FontDescription.fontLookup 一起使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontLookup 类是与 <codeph>FontDescription.fontLookup</codeph> 一起使用的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links><apiValue id="flash.text.engine:FontLookup:DEVICE"><apiName>DEVICE</apiName><shortdesc> 
	用于指示设备字体查找。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示设备字体查找。Flash Player 使用运行 SWF 文件的系统上安装的字体。
	
	<p>使用设备字体可减小影片大小，因为字体数据不包括在文件中。</p>
	
	<p>使用设备字体呈现的文本在不同系统和平台上的显示不会始终相同，因为 Flash Player 使用系统上安装的字体。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontLookup:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc> 
	用于指示嵌入的 CFF 字体查找。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示嵌入的 CFF 字体查找。Flash Player 使用嵌入到已发布的 SWF 文件中的字体轮廓。
	
	<p>使用嵌入字体的文本字段始终以所选的字体显示，而不管播放系统上是否安装了该字体。</p>
	
	<p>嵌入字体的一个缺点是它们增大了 SWF 文件的大小。</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TypographicCase"><apiName>TypographicCase</apiName><shortdesc>
TypographicCase 类是用于设置 ElementFormat 类的 typographicCase 属性的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TypographicCase 类是用于设置 ElementFormat 类的 <codeph>typographicCase</codeph> 属性的常量值的枚举。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/typographicCase"><linktext>ElementFormat.typographicCase</linktext></link></related-links><apiValue id="flash.text.engine:TypographicCase:CAPS"><apiName>CAPS</apiName><shortdesc> 
	指定在输出时调整大写字符的间距。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定在输出时调整大写字符的间距。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:CAPS_AND_SMALL_CAPS"><apiName>CAPS_AND_SMALL_CAPS</apiName><shortdesc> 
	指定所有小写字符在输出时都使用小型大写字母字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsAndSmallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定所有小写字符在输出时都使用小型大写字母字型。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	指定默认的印刷大小写。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定默认的印刷大小写。结果视字体而定；字符使用字体设计器指定的设置，不应用任何功能。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 
	指定所有字符在输出时都使用小写字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定所有字符在输出时都使用小写字型。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:SMALL_CAPS"><apiName>SMALL_CAPS</apiName><shortdesc> 
	指定大写字符在输出时使用小型大写字母字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>smallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定大写字符在输出时使用小型大写字母字型。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:TITLE"><apiName>TITLE</apiName><shortdesc> 
	指定大写字符在输出时使用标题字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>title</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定大写字符在输出时使用标题字型。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 
	指定所有字符在输出时都使用大写字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定所有字符在输出时都使用大写字型。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitCase"><apiName>DigitCase</apiName><shortdesc>
DigitCase 类是在设置 ElementFormat 类的 digitCase 属性时使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
DigitCase 类是在设置 ElementFormat 类的 <codeph>digitCase</codeph> 属性时使用的常量值的枚举。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitCase"><linktext>flash.text.engine.ElementFormat.digitCase</linktext></link></related-links><apiValue id="flash.text.engine:DigitCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	用于指定默认的数字大小写。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定默认的数字大小写。结果视字体而定；字符使用字体设计器指定的设置，不应用任何功能。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:LINING"><apiName>LINING</apiName><shortdesc> 
	用于指定全高数字大小写。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lining</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定全高数字大小写。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:OLD_STYLE"><apiName>OLD_STYLE</apiName><shortdesc> 
	用于指定旧样式数字大小写。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>oldStyle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定旧样式数字大小写。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextElement"><apiName>TextElement</apiName><shortdesc>
 TextElement 类表示已设置格式的文本的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextElement 类表示已设置格式的文本的字符串。将 TextElement 对象分配给 TextBlock 对象的 <codeph>content</codeph> 属性以创建文本块。将其作为一个单元分配给 GroupElement 对象以与其它文本和图形元素结合使用。使用 ElementFormat 类设置文本的格式。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:TextElement:TextElement"><apiName>TextElement</apiName><shortdesc>
	 创建新的 TextElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>元素的文本。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>元素中文本的元素格式。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>EventDispatcher</codeph> 对象，该对象将接收分派到基于此内容元素的文本行的每个事件的副本。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>作为一个单元应用于元素的旋转。对此属性使用 <codeph>flash.text.engine.TextRotation</codeph> 常量。默认值为 <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 创建新的 TextElement 实例。 
	 
	 </apiDesc><example conref="examples\TextElementExample.as"> 以下示例将通过文本字符串创建 TextElement 对象、使用 12 号字体和红色 (0xCC0000) 来设置该对象的格式，并将其分配给 TextBlock 的 <codeph>content</codeph> 属性。它调用 createLines() 函数将文本块分成多行（每行为 150 像素）。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    
    public class TextElementExample extends Sprite {
        
        public function TextElementExample():void {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:TextElement:replaceText"><apiName>replaceText</apiName><shortdesc>
	 将 beginIndex 和 endIndex 参数指定的字符范围替换为 newText 参数的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>beginIndex</codeph> 或 <codeph>endIndex</codeph> 超出范围。
     	 
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>替换范围开始位置的从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>替换范围结束位置后面从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>要用来替换指定范围字符的文本。
	  
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 将 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 参数指定的字符范围替换为 <codeph>newText</codeph> 参数的内容。<codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 值是指 <codeph>text</codeph> 的当前内容。
	 <p>要删除文本，请为 <codeph>newText</codeph> 传递 <codeph>null</codeph>。</p>
	 <p>要插入文本，请为 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 传递相同的值。新文本将插入到指定索引之前。</p>
	 <p>要追加文本，请为 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 传递 <codeph>text.length</codeph>。</p>
	 <p>要设置所有文本，请为 <codeph>beginIndex</codeph> 传递 0，为 <codeph>endIndex</codeph> 传递 <codeph>text.length</codeph>。</p>
	 
	 </apiDesc><example conref="examples\TextElement_replaceTextExample.as"> 为了执行下列操作，此示例将多次调用 <codeph>replaceText()</codeph>：
     <ul>
         <li> 在文本开头插入字符串</li>
         <li> 向文本末尾追加字符串</li>
         <li> 在文本中间插入字符串</li>
        <li> 将文本全部替换为新文本</li>
    </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    
    
    public class TextElement_replaceTextExample extends Sprite {
        public function TextElement_replaceTextExample():void {
            
            var str:String = "0123456";
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 14;
            var textElement:TextElement = new TextElement(str, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textElement.replaceText(0, 0, "abc");  
            createLine(textBlock, 20);           //"abc0123456"
            textElement.replaceText(10, 10, "abc");   
            createLine(textBlock, 40);            // "abc0123456abc"
            textElement.replaceText(5, 8, "abc");
            createLine(textBlock, 60);         // "abc01abc56abc"
            textElement.replaceText(0, 13, "abc");
            createLine(textBlock, 80);            // "abc"
            textElement.replaceText(0, 3, "That's all she wrote!");
            createLine(textBlock, 100);        // "That's all she wrote" */
        }
            
        private function createLine(textBlock:TextBlock, y:Number):void {
            var textLine:TextLine = textBlock.createTextLine(null, 150);
            textLine.x = 10;
            textLine.y = y;
            addChild(textLine);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextElement:text:set"><apiName>text</apiName><shortdesc>
	 接收作为元素内容的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 接收作为元素内容的文本。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineValidity"><apiName>TextLineValidity</apiName><shortdesc>
TextLineValidity 类是用于设置 TextLine 类的 validity 属性的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextLineValidity 类是用于设置 TextLine 类的 <codeph>validity</codeph> 属性的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link></related-links><apiValue id="flash.text.engine:TextLineValidity:INVALID"><apiName>INVALID</apiName><shortdesc> 
	指定行无效。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定行无效。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:POSSIBLY_INVALID"><apiName>POSSIBLY_INVALID</apiName><shortdesc> 
	指定文本行可能无效。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>possiblyInvalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定文本行可能无效。在对内容未发生变化的以前换行的文本块重新换行期间，Flash Player 使用此有效性。您无法设置此值。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:STATIC"><apiName>STATIC</apiName><shortdesc> 
	指定行为静态行，已切断行与文本块之间的连接，并且已放弃呈现所不需要的原子数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>static</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定行为静态行，已切断行与文本块之间的连接，并且已放弃呈现所不需要的原子数据。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:VALID"><apiName>VALID</apiName><shortdesc> 
	指定文本行有效。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定文本行有效。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontPosture"><apiName>FontPosture</apiName><shortdesc>
FontPosture 类是与 FontDescription.fontPosture 一起使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontPosture 类是与 <codeph>FontDescription.fontPosture</codeph> 一起使用的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontPosture"><linktext>flash.text.engine.FontDescription.fontPosture</linktext></link></related-links><apiValue id="flash.text.engine:FontPosture:ITALIC"><apiName>ITALIC</apiName><shortdesc> 
	用于指示斜体字体形态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示斜体字体形态。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontPosture:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	用于指示标准字体形态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示标准字体形态。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:JustificationStyle"><apiName>JustificationStyle</apiName><shortdesc>
JustificationStyle 类是用于设置 EastAsianJustifier 类的 justificationStyle 属性的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
JustificationStyle 类是用于设置 EastAsianJustifier 类的 <codeph>justificationStyle</codeph> 属性的常量值的枚举。这些常量指定用于处理避头尾字符的选项，这些字符是不能出现在行的开头和结尾的日文字符。

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/justificationStyle"><linktext>EastAsianJustifier.justificationStyle</linktext></link></related-links><apiValue id="flash.text.engine:JustificationStyle:PRIORITIZE_LEAST_ADJUSTMENT"><apiName>PRIORITIZE_LEAST_ADJUSTMENT</apiName><shortdesc> 
	通过扩展行或压缩行中最能接近所需宽度的那种对齐方式进行对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>prioritizeLeastAdjustment</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	通过扩展行或压缩行中最能接近所需宽度的那种对齐方式进行对齐。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_IN_KINSOKU"><apiName>PUSH_IN_KINSOKU</apiName><shortdesc> 
	通过在行尾压缩避头尾字符或扩展行（如果没有避头尾字符或空间不足）进行对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushInKinsoku</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	通过在行尾压缩避头尾字符或扩展行（如果没有避头尾字符或空间不足）进行对齐。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_OUT_ONLY"><apiName>PUSH_OUT_ONLY</apiName><shortdesc> 
	通过扩展行进行对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushOutOnly</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	通过扩展行进行对齐。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
 EastAsianJustifier 类具有控制文本行（其内容主要为东亚文字）的对齐选项的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 EastAsianJustifier 类具有控制文本行（其内容主要为东亚文字）的对齐选项的属性。 
 
 <p> 使用构造函数 <codeph>new EastAsianJustifier()</codeph> 创建 EastAsianJustifier 对象后才能设置其属性。将 EastAsianJustifier 对象应用于 TextBlock 后设置该对象的属性不会使 TextBlock 无效。</p>
 
 </apiDesc><example conref="examples\EastAsianJustifierExample.as"> 本示例通过使用 EastAsianJustifier 属性对齐文本，从而以垂直方式显示一个日文文本块。
<codeblock>
 
package {
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.EastAsianJustifier;
    import flash.text.engine.LineJustification;
    import flash.text.engine.TextRotation;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.display.Stage;
    import flash.display.Sprite;
    import flash.system.Capabilities;
    
    public class EastAsianJustifierExample extends Sprite {
        
        public function EastAsianJustifierExample():void {
            
            var Japanese_txt:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);
            
            var textBlock:TextBlock = new TextBlock();
            var font:FontDescription = new FontDescription();
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0xCC0000;
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_INCLUDING_LAST);
            textBlock.lineRotation = TextRotation.ROTATE_90;
            var linePosition:Number = this.stage.stageWidth - 75;
            if (Capabilities.os.search("Mac OS") > -1) 
                // set fontName: Kozuka Mincho Pro R
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R";                     
            else 
                font.fontName = "Kozuka Mincho Pro R";
            textBlock.content = new TextElement(Japanese_txt, format);
            var previousLine:TextLine = null;
                
            while (true) 
            {
                var textLine:TextLine = textBlock.createTextLine(previousLine, 320);
                if (textLine == null) 
                    break;
                textLine.y = 20;
                textLine.x = linePosition;
                linePosition -= 25;
                addChild(textLine);                
                previousLine = textLine;
            }
        }
    }
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:EastAsianJustifier:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
     创建一个 EastAsianJustifier 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>locale</codeph> 为 <codeph>null</codeph> 或太短，不能表示有效的区域设置。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>lineJustification</codeph> 不是 <codeph>LineJustification</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>justifictionStyle</codeph> 不是 <codeph>JustificationStyle</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>ja</apiData><apiDesc>用于确定对齐规则的区域设置。默认值为 <codeph>"ja"</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>allButLast</apiData><apiDesc>段落的行对齐类型。将 <codeph>LineJustification</codeph> 常量用于此属性。默认值为 <codeph>LineJustification.ALL_BUT_LAST</codeph>。
     </apiDesc></apiParam><apiParam><apiItemName>justificationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>pushInKinsoku</apiData><apiDesc>使用东亚对齐符的文本块中文本的对齐样式。将 <codeph>JustificationStyle</codeph> 常量用于此属性。默认值为 <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>。
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建一个 EastAsianJustifier 对象。
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:EastAsianJustifier:clone"><apiName>clone</apiName><shortdesc>
	 构造 EastAsianJustifier 的克隆副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>In the Flash Player 10 release, this method is for internal use. In future releases,
	 users will be able to subclass this class and will then need to use this method. This class is 
	 currently stored as a live reference, but there is no way to track when its properties change.  
	 This means that when changes are made, text blocks are not invalidated, which in the current 
	 implementation can lead to player crashes.  Even from the API perspective its wrong, as the affected 
	 text lines should be marked INVALID when format changes are made, but they�re not. The solution is 
	 to use a copy-on-set model.  When the object is passed in, the player copies it, so later changes to 
	 the object that was passed in have no effect. The setter makes an internal copy of the array; the 
	 getter returns a copy of the internal copy. Operations like 
         myBlock.textJustifier.justificationStyle = JustificationStyle.PUSH_IN_KINSOKU will have no effect. 
         Users who subclass this class in the future will need to use the clone() method to 
	 implement this technique of 'locking' the format once it has been set.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>EastAsianJustifier</codeph> 对象的副本。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 构造 EastAsianJustifier 的克隆副本。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:EastAsianJustifier:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
     指定文本块中文本的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指定文本块中文本的对齐方式。
     
     <p>默认值为 <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>。</p>
     
	 <p>使用 JustificationStyle 类中的一个常量设置此属性的值。下表列出了可能的值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph></entry>
	 	<entry>指定推进对齐。</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PUSH_OUT_ONLY</codeph></entry>
	 	<entry>指定推出对齐。</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT</codeph></entry>
	 	<entry>指定优先采用需最少量调整的对齐方式。</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:RenderingMode"><apiName>RenderingMode</apiName><shortdesc>
RenderingMode 类为 flash.text.engine.FontDescription 类中的呈现模式提供值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
RenderingMode 类为 flash.text.engine.FontDescription 类中的呈现模式提供值。
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:RenderingMode:CFF"><apiName>CFF</apiName><shortdesc>
	将呈现模式设置为 CFF。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cff</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	将呈现模式设置为 CFF。CFF 呈现提高了文本在显示器中的可读性。建议具有许多小文本的应用程序使用此设置。此常量用于 FontDescription 类中的 <codeph>renderingMode</codeph> 属性。使用语法 <codeph>RenderingMode.CFF</codeph>。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:RenderingMode:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	将呈现模式设置为 Flash Player 7 和早期版本中使用的呈现模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	将呈现模式设置为 Flash Player 7 和早期版本中使用的呈现模式。建议对动画文本使用此设置。此常量用于 FontDescription 类中的 <codeph>renderingMode</codeph> 属性。使用语法 <codeph>RenderingMode.NORMAL</codeph>。
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 ElementFormat 类表示可应用于 ContentElement 的格式设置信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ElementFormat 类表示可应用于 <codeph>ContentElement</codeph> 的格式设置信息。使用 ElementFormat 类可以为 ContentElement 的各个子类创建特定的文本格式。ElementFormat 类的属性适用于设备字体和嵌入字体。 
 
 <p>将 ElementFormat 对象应用于 TextBlock 中的 ContentElement 不会使 TextBlock 失效。将 ElementFormat 应用于 ContentElement 后，其 <codeph>locked</codeph> 属性将设置为 <codeph>true</codeph>。无法更改已锁定 ElementFormat 对象的属性。相反，可以使用 <codeph>clone()</codeph> 方法创建此对象的没有锁定的副本，可以对此副本进行修改并将其分配给 ContentElement。</p>
 
 </apiDesc><example conref="examples\ElementFormatExample.as"> <p>此示例创建了两个 <codeph>ElementFormat</codeph> 对象并设置了它们的一些属性。然后，该示例将新的 ElementFormat 分配给 <codeph>TextElement</codeph> 对象，该对象已经被指定为 <codeph>TextBlock</codeph> 的内容。请注意，更改 <codeph>TextElement</codeph> 的 <codeph>ElementFormat</codeph> 不会影响父 TextBlock 以前创建的 TextLine。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormatExample extends Sprite {
        
        public function ElementFormatExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            ef1.alpha = 100;
            ef1.kerning = flash.text.engine.Kerning.ON;
            ef1.trackingRight = 2;
            ef1.typographicCase = flash.text.engine.TypographicCase.UPPERCASE;
            ef1.alignmentBaseline = flash.text.engine.TextBaseline.DESCENT;
            ef1.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
            
            var ef2:ElementFormat = new ElementFormat(fd);
            ef2.fontSize = 30;
            ef2.color = 0xFF0000;
            ef2.alpha = 0.3;
            ef2.kerning = flash.text.engine.Kerning.OFF;
            ef2.typographicCase = flash.text.engine.TypographicCase.LOWERCASE;
            ef2.digitCase = flash.text.engine.DigitCase.OLD_STYLE;
            ef2.textRotation = flash.text.engine.TextRotation.ROTATE_180;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            line1.x = 15;
            line1.y = 30;

            tb.content.elementFormat = ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            line2.x = 15;
            line2.y = 60;
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/elementFormat"><linktext>flash.text.engine.ContentElement.elementFormat</linktext></link></related-links><apiConstructor id="flash.text.engine:ElementFormat:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 	 创建 ElementFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>fontSize</codeph> 小于 0。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>textRotation</codeph> 不是 <codeph>flash.text.engine.TextRotation</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>dominantBaseline</codeph> 不是 <codeph>flash.text.engine.TextBaseline</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>alignmentBaseline</codeph> 不是 <codeph>flash.text.engine.TextBaseline</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>kerning</codeph> 不是 <codeph>flash.text.engine.Kerning</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>breakOpportunity</codeph> 不是 <codeph>flash.text.engine.BreakOpportunity</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>digitCase</codeph> 不是 <codeph>flash.text.engine.DigitCase</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>digitWidth</codeph> 不是 <codeph>flash.text.engine.DigitWidth</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>ligatureLevel</codeph> 不是 <codeph>flash.text.engine.LigatureLevel</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>typographicCase</codeph> 不是 <codeph>flash.text.engine.TypographicCase</codeph> 的成员。
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>标识要与此元素格式一起使用的字体的 FontDescription 对象。默认值为 <codeph>null</codeph>。如果未提供字体说明，则构造默认字体说明。
	 </apiDesc></apiParam><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>文本的大小，以像素为单位。
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0x000000</apiData><apiDesc>文本的颜色。一个包含三个 8 位 RGB 分量的数字；例如，0xFF0000 为红色，0x00FF00 为绿色。
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>基于元素格式应用于所有行原子的 <codeph>alpha</codeph> 属性。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>应用于各个字型的旋转。对此属性使用 <codeph>flash.text.engine.TextRotation</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>dominantBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>文本中的字型紧贴到的基线。对此属性使用 <codeph>flash.text.engine.TextBaseline</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>alignmentBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>useDominantBaseline</apiData><apiDesc>字型所在行上的基线，主要基线将贴紧到此基线。对此属性使用 <codeph>flash.text.engine.TextBaseline</codeph> 常量。
     </apiDesc></apiParam><apiParam><apiItemName>baselineShift</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>文本的基线偏移，以像素为单位。
	 </apiDesc></apiParam><apiParam><apiItemName>kerning</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>on</apiData><apiDesc>用于此文本的字距调整。使用 <codeph>flash.text.engine.Kerning</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>trackingRight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>应用到每个字型右侧的间距或手动字距调整（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>trackingLeft</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>应用到每个字型左侧的间距或手动字距调整（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>文本的区域设置。
     </apiDesc></apiParam><apiParam><apiItemName>breakOpportunity</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>就用于此文本的换行。对此属性使用 <codeph>flash.text.engine.BreakOpportunity</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>digitCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>用于此文本的数字大小写。对此属性使用 <codeph>flash.text.engine.DigitCase</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>digitWidth</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>用于此文本的数字宽度。对此属性使用 <codeph>flash.text.engine.DigitWidth</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>ligatureLevel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>common</apiData><apiDesc>用于此文本的连字级别。对此属性使用 <codeph>flash.text.engine.LigatureLevel</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>typographicCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>用于此文本的印刷大小写。对此属性使用 <codeph>flash.text.engine.TypographicCase</codeph> 常量。
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 创建 ElementFormat 对象。
	 
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:ElementFormat:clone"><apiName>clone</apiName><shortdesc>
	 构造 ElementFormat 的没有锁定的克隆副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>ElementFormat</codeph> 对象的没有锁定的副本。
	 </apiDesc><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 构造 ElementFormat 的没有锁定的克隆副本。
	 
     </apiDesc><example conref="examples\ElementFormat_cloneExample.as"> <p>此示例创建了一个 <codeph>ElementFormat</codeph> 对象并设置了 <codeph>FontSize</codeph>。使用 <codeph>ElementFormat</codeph> 创建新的 <codeph>TextElement</codeph>（因此锁定它），并将 <codeph>TextElement</codeph> 用作 <codeph>TextBlock</codeph> 的内容。从 <codeph>TextBlock</codeph> 创建的文本行。</p>
 <p>要修改 <codeph>ElementFormat</codeph> 对象，请首先检查其 <codeph>locked</codeph> 属性。如果为 true，则使用 <codeph>clone()</codeph> 方法创建 <codeph>ElementFormat</codeph> 的没有锁定的副本，更改其属性，然后将此新的 <codeph>ElementFormat</codeph> 重新链接到 <codeph>TextBlock</codeph>。重新断开这些行后，新行将具有新的字体设置。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormat_cloneExample extends Sprite {
        private var ef1:ElementFormat;
        private var ef2:ElementFormat;
        
        public function ElementFormat_cloneExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize=20;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            ef2 = (ef1.locked) ? ef1.clone() : ef1;    
            ef2.fontSize = 32;

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:ElementFormat:getFontMetrics"><apiName>getFontMetrics</apiName><shortdesc>
	 返回一个 FontMetrics 对象，该对象的属性说明由 fontDescription 和 fontSize 指定的字体的全角字框、删除线位置、删除线粗细、下划线位置和下划线粗线。
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>说明由 <codeph>fontDescription</codeph> 指定的字体的属性的 <codeph>FontMetrics</codeph> 对象。
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <p>返回一个 <codeph>FontMetrics</codeph> 对象，该对象的属性说明由 <codeph>fontDescription</codeph> 和 <codeph>fontSize</codeph> 指定的字体的全角字框、删除线位置、删除线粗细、下划线位置和下划线粗线。</p>
	 
	 </apiDesc><example conref="examples\FontMetricsExample.as"> 此示例创建了一个具有指定的 <codeph>FontDescription</codeph> 的 <codeph>ElementFormat</codeph> 对象并使用 <codeph>getFontMetrics</codeph> 方法显示所选字体的度量。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontMetricsExample extends Sprite {
        
        public function FontMetricsExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            var fm1:FontMetrics = ef1.getFontMetrics();
            trace(fm1.emBox);
            trace(fm1.strikethroughOffset);
            trace(fm1.strikethroughThickness);
            trace(fm1.subscriptScale);
            trace(fm1.subscriptOffset);
            trace(fm1.superscriptScale);
            trace(fm1.superscriptOffset);
            trace(fm1.underlineOffset);
            trace(fm1.underlineThickness);
            
            
        }
    }    
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link><link href="flash.text.engine.xml#FontMetrics"><linktext>flash.text.engine.FontMetrics</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:ElementFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
	 指定 dominantBaseline 紧贴到哪条包含该元素的行的基线，从而确定该元素在该行中的垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.TextBaseline</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定 <codeph>dominantBaseline</codeph> 紧贴到哪条包含该元素的行的基线，从而确定该元素在该行中的垂直位置。对此属性使用 <codeph>flash.text.engine.TextBaseline</codeph> 常量。
	 
	 <p>行中的最大元素将确定基线，除非设置 <codeph>TextBlock.baselineFontDescription</codeph> 和 <codeph>TextBlock.baselineFontSize</codeph> 设置来覆盖此逻辑。</p>
	 
	 <p>默认值为 <codeph>flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的罗马字基线对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的上缘基线对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的下缘基线对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的表意顶部基线对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的表意中心基线对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的表意底部基线对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.USE_DOMINANT_BASELINE</codeph></entry>
	 	<entry><codeph>dominantBaseline</codeph> 与该行的同一基线对齐。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>设置图形元素的 <codeph>dominantBaseline</codeph> 所对齐的行的对齐基线。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>设置文本元素的 <codeph>dominantBaseline</codeph> 所对齐的行的对齐基线。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>flash.text.engine.ElementFormat.dominantBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:alpha:get"><apiName>alpha</apiName><shortdesc>
	 为作者提供了一种自动将基于元素格式的所有行原子的 alpha 属性设置为指定的 Number 的途径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 为作者提供了一种自动将基于元素格式的所有行原子的 <codeph>alpha</codeph> 属性设置为指定的 Number 的途径。
	 
	 <p>指示指定对象的 Alpha 透明度值。有效值为 0（完全透明）到 1（完全不透明）。默认值为 1。Alpha 设置为 0 的显示对象是活动的，即使它们不可见。</p>
	 
	 <p>默认值为 <codeph>1.0</codeph>。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>对图形元素应用指定的 Alpha。与在图形的 <codeph>DisplayObject</codeph> 本身或在 <codeph>TextLine</codeph> 上设置的任何 Alpha 进行乘法合并。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>对文本元素应用指定的 Alpha。与在 <codeph>TextLine</codeph> 上设置的任何 Alpha 进行乘法合并。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
	 指示元素的基线偏移，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指示元素的基线偏移，以像素为单位。
	 <p>元素将按照这个量偏离 <codeph>dominantBaseline</codeph>。此偏移量将加到元素成员的 y 位置中，因此在非旋转的文本中，正基线偏移会向下移动元素，负基线偏移会向上移动元素。</p>
	 
	 <p>默认值为 <codeph>0.0</codeph>，表示不偏移。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>将图形偏离基线。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>将文本偏离基线。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
	 应用于此文本的换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.BreakOpportunity</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 应用于此文本的换行。此属性确定在将换行文本分为多行时可用于断行的字符。对此属性使用 <codeph>flash.text.engine.BreakOpportunity</codeph> 常量。
	 
	 <p>默认值为 <codeph>flash.text.engine.BreakOpportunity.AUTO</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>BreakOpportunity.AUTO</codeph></entry>
	 	<entry>换行基于标准的 Unicode 字符属性，如在文字间以及在连字符处换行。</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ANY</codeph></entry>
	 	<entry><codeph>ContentElement</codeph> 对象中的任何字符均可换行。此值通常用于亚洲文字中嵌入罗马文字并需要在文字的中间换行的场合。</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.NONE</codeph></entry>
	 	<entry>范围内的任何字符均不可进行换行。</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ALL</codeph></entry>
	 	<entry>范围内的所有字符均可进行换行。可用于创建路径文本这样的效果。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>确定组中相邻文本元素间的换行。如果组的 elementFormat 为 <codeph>null</codeph>，则使用相邻元素中第一个元素的格式。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定文本元素中字符间的换行。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#BreakOpportunity"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:color:get"><apiName>color</apiName><shortdesc>
	 指示文本的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指示文本的颜色。一个包含三个 8 位 RGB 分量的整数；例如，0xFF0000 为红色，0x00FF00 为绿色。 
	 
	 <p>默认值为 <codeph>0x000000</codeph>，这意味着 Flash Player 使用黑色。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>设置文本的颜色。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
	 用于此文本的数字大小写。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.DigitCase</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的数字大小写。数字大小写会影响数字字符组的样式和位置。对此属性使用 <codeph>flash.text.engine.DigitCase</codeph> 常量。
	 
	 <p>默认值为 <codeph>flash.text.engine.DigitCase.DEFAULT</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitCase.DEFAULT</codeph></entry>
	 	<entry>对文本应用默认数字大小写。</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.LINING</codeph></entry>
	 	<entry>对文本应用全高数字大小写。</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.OLD_STYLE</codeph></entry>
	 	<entry>对文本应用旧样式数字大小写。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定用于元素中的文本的数字大小写。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitCase"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
	 用于此文本的数字宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.DigitWidth</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的数字宽度。对此属性使用 <codeph>flash.text.engine.DigitWidth</codeph> 常量。
	 
	 <p>默认值为 <codeph>flash.text.engine.DigitWidth.DEFAULT</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitWidth.DEFAULT</codeph></entry>
	 	<entry>对文本应用默认数字宽度。</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.PROPORTIONAL</codeph></entry>
	 	<entry>对文本应用变宽数字宽度。</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.TABULAR</codeph></entry>
	 	<entry>对文本应用定宽数字宽度。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定用于元素中的文本的数字宽度。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitWidth"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
	 指定该元素的哪条基线紧贴到 alignmentBaseline 以确定元素在该行上的垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.TextBaseline</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定该元素的哪条基线紧贴到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。对此属性使用 <codeph>flash.text.engine.TextBaseline</codeph> 常量。
	 
	 <p>元素的内容将确定基线。对于 <codeph>TextElement</codeph>，字体和磅值将确定基线。对于 <codeph>GraphicElement</codeph>，元素的高度将确定基线。</p>
	 
	 <p>默认值为 <codeph>flash.text.engine.TextBaseline.ROMAN</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>元素的罗马字基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>元素的上缘基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>元素的下缘基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>元素的表意顶部基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>元素的表意中心基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>元素的表意底部基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>确定图形元素的哪些基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定文本元素的哪些基线将与 <codeph>alignmentBaseline</codeph> 对齐。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>flash.text.engine.ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontDescription:get"><apiName>fontDescription</apiName><shortdesc>
	 一个对象，其中封装说明字体所必需的属性.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 一个对象，其中封装说明字体所必需的属性.
	 
	 <p>默认值为默认构造的 FontDescription 对象。</p>
     
	 <p>如果设置了 fontDescription 属性，提供的 FontDescription 对象已锁定，则 <codeph>locked</codeph> 属性将设置为 <codeph>true</codeph>。无法修改已锁定 FontDescription。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定用于元素中的文本的字体。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
	 文本的大小，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>如果设置为小于零的值。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 文本的大小，以像素为单位。 
	 
	 <p>默认值为 <codeph>12.0</codeph>。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定元素中的文本的大小（以像素为单位）。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 用于此文本的字距调整。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的字距调整。对此属性使用 <codeph>flash.text.engine.Kerning</codeph> 常量。字距调整可调整特定字符对之间的像素以改善可读性。具有字距微调表的所有字体都支持字距调整。
	 
	 <p>默认值为 <codeph>flash.text.engine.Kerning.ON</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>Kerning.ON</codeph></entry>
	 	<entry>启用字距调整。</entry>
	   </row><row>
	 	<entry><codeph>Kerning.OFF</codeph></entry>
	 	<entry>禁用字距调整。</entry>
	   </row><row>
	 	<entry><codeph>Kerning.AUTO</codeph></entry>
	 	<entry>仅对适合采用中文版式的字符启用字距调整。如果两个字符都不是日文汉字、平假名或片假名，则在这两个字符之间应用字距调整。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>确定是否在组中的相邻文本元素间应用字距调整。如果组的 elementFormat 为 <codeph>null</codeph>，则使用相邻元素中第一个元素的格式。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定是否在文本元素中的字符间应用字距调整。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
	 用于此文本的连字级别。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.LigatureLevel</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的连字级别。由两个或两个以上的字母结合在一起形成单个字型时就是连字。连字通常用于替换一些共享公共部分的连续字符，例如字母对“fi”、“fl”或“ae”。在拉丁语字符集和非拉丁语字符集中均可使用连字。对此属性使用 <codeph>flash.text.engine.LigatureLevel</codeph> 常量。
	 
	 <p>默认值为 <codeph>flash.text.engine.LigatureLevel.COMMON</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>LigatureLevel.NONE</codeph></entry>
	 	<entry>不创建任何连字。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.MINIMUM</codeph></entry>
	 	<entry>创建最少的连字。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.COMMON</codeph></entry>
	 	<entry>创建常见连字。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.UNCOMMON</codeph></entry>
	 	<entry>创建不常见连字。</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.EXOTIC</codeph></entry>
	 	<entry>创建外来语连字。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>确定组中相邻文本元素间的连字级别。如果组的 elementFormat 为 <codeph>null</codeph>，则使用相邻元素中第一个元素的格式。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定文本元素中字符间的连字级别。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LigatureLevel"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:locale:get"><apiName>locale</apiName><shortdesc>
	 文本的区域设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。
	 
     <p>默认值为 <codeph>"en"</codeph>。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定元素中文本的转换和形状。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:locked:get"><apiName>locked</apiName><shortdesc>
	 指示 ElementFormat 是否已锁定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指示 ElementFormat 是否已锁定。如果为 <codeph>true</codeph>，将无法修改 ElementFormat。调用 <codeph>ElementFormat.clone()</codeph> 获取 ElementFormat 对象的没有锁定的副本。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 设置应用于各个字型的旋转。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.TextRotation</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 设置应用于各个字型的旋转。对此属性使用 <codeph>flash.text.engine.TextRotation</codeph> 常量。
	 
	 <p>默认值为 <codeph>flash.text.engine.TextRotation.AUTO</codeph>。</p>
	 
	 <p>任何字型的最终旋转均为 <codeph>ElementFormat.textRotation</codeph>、<codeph>ContentElement.textRotation</codeph> 与 <codeph>TextBlock.lineRotation</codeph> 之和。</p>
	 
	 <p>应用 <codeph>ElementFormat.textRotation</codeph> 的一种典型情况是亚洲文字，亚洲文字的字符必须进行旋转才能在垂直布局中正确显示，此时，需要将 <codeph>flash.text.engine.TextRotation.AUTO</codeph> 值与 <codeph>TextBlock.lineRotation = flash.text.engine.ROTATE_90</codeph> 结合使用。</p>
	 
	 <p>对不包含垂直布局信息的字体设置此属性可能会产生不良结果。包含 vmtx 或 VORG 表的字体（例如日文字体“MS Mincho”）将可以正常工作，因为这些表提供了布局引擎执行正确布局所需的数据。而未包含必要信息的字体（例如 Verdana）则不能正常工作。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>不旋转字型。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>将字型顺时针旋转 90 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>将字型旋转 180 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>将字型顺时针旋转 270 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 <entry>指定仅将全角和宽字型沿逆时针方向旋转 90 度，这是由字型的 Unicode 属性确定的。此值通常与亚洲文字一起使用，以便仅旋转那些需要旋转的字型。此旋转仅应用在垂直文本中，以将全角字符和宽字符返回到垂直方向，而不会影响其它的字符。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定文本元素中字型的旋转。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>flash.text.engine.TextRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>flash.text.engine.ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>flash.text.engine.TextBlock.lineRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
	 应用到每个字型左侧的间距或手动字距调整（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 应用到每个字型左侧的间距或手动字距调整（以像素为单位）。如果启用 <codeph>kerning</codeph>，则会将 <codeph>trackingLeft</codeph> 值与字体字距微调表中的值相加。如果禁用 <codeph>kerning</codeph>，则使用 <codeph>trackingLeft</codeph> 值作为手动字距调整值。同时支持正值和负值。
	 
	 <p>通常，在 <codeph>trackingRight</codeph> 与 <codeph>trackingLeft</codeph> 之间拆分所需的间距值。否则，在混合方向文本中，一个双向边界处间距加倍，而另一个双向边界处不存在间距。</p>
	 
	 <p>默认值为 <codeph>0.0</codeph>。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>确定应用到图形左侧的间距。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定应用到文本元素中字符左侧的间距。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>示例：</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingLeft = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingLeft = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
	 应用到每个字型右侧的间距或手动字距调整（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 应用到每个字型右侧的间距或手动字距调整（以像素为单位）。如果启用 <codeph>kerning</codeph>，则会将 <codeph>trackingRight</codeph> 值与字体字距微调表中的值相加。如果禁用 <codeph>kerning</codeph>，则使用 <codeph>trackingRight</codeph> 值作为手动字距调整值。同时支持正值和负值。
	 
	 <p>通常，在 <codeph>trackingRight</codeph> 与 <codeph>trackingLeft</codeph> 之间拆分所需的间距值。否则，在混合方向文本中，一个双向边界处间距加倍，而另一个双向边界处不存在间距。</p>
	 
	 
	 <p>默认值为 <codeph>0.0</codeph>。</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>确定应用到图形右侧的间距。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定应用到文本元素中字符右侧的间距。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>示例：</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingRight = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingRight = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
	 用于此文本的印刷大小写。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.TypographicCase</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 ElementFormat 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的印刷大小写。对此属性使用 <codeph>flash.text.engine.TypographicCase</codeph> 常量。
	 
	 <p>默认值为 <codeph>flash.text.engine.TypographicCase.DEFAULT</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TypographicCase.DEFAULT</codeph></entry>
	 	<entry>对文本应用默认印刷大小写。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.TITLE</codeph></entry>
	 	<entry>指定大写字符在输出时使用标题字型。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS</codeph></entry>
	 	<entry>指定在输出时调整大写字符的间距。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.SMALL_CAPS</codeph></entry>
	 	<entry>指定大写字符在输出时使用小型大写字母字型。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.UPPERCASE</codeph></entry>
	 	<entry>指定所有字符在输出时都使用大写字型。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.LOWERCASE</codeph></entry>
	 	<entry>指定所有字符在输出时都使用小写字型。</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS_AND_SMALL_CAPS</codeph></entry>
	 	<entry>指定所有小写字符在输出时都使用小型大写字母字型。</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>子类</entry><entry>设置属性的效果</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>没有任何效果。</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>确定用于元素中的文本的印刷大小写。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TypographicCase"><linktext>flash.text.engine.TypographicCase</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
 FontMetrics 类包含有关字体的量度和偏移信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 FontMetrics 类包含有关字体的量度和偏移信息。<codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> 方法返回此类的对象。
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links><apiConstructor id="flash.text.engine:FontMetrics:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
	 创建一个 FontMetrics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>emBox</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>字体的全角字框（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>删除线的偏移量（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>删除线的粗细（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>underlineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下划线的偏移量（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>underlineThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下划线的粗细（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>下标的偏移量（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>要应用于下标磅值的缩放比例。
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>上标的偏移量（以像素为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>要应用于上标磅值的缩放比例。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 创建一个 FontMetrics 对象。FontMetrics 对象包含有关元素格式中字体度量的信息。<codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> 方法返回此类的对象。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:FontMetrics:emBox"><apiName>emBox</apiName><shortdesc>
	 emBox 值表示字体的设计间隔，该值用于相对于罗马字基线放置中文、韩语或日语字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 emBox 值表示字体的设计间隔，该值用于相对于罗马字基线放置中文、韩语或日语字型。通常为方形，大小为字体的磅值。emBox 的原点（坐标 0,0）设置为左边缘和矩形的罗马字基线。例如，对于 10 磅字体，emBox 可以是值为 [0,-8.8, 10, 1.2] 的 rect [L,T,R,B]。
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughOffset"><apiName>strikethroughOffset</apiName><shortdesc>
	 strikethroughOffset 值是距离删除线的罗马字基线的建议垂直偏移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 strikethroughOffset 值是距离删除线的罗马字基线的建议垂直偏移。
	 
	 <p>请注意，为了找出删除线的位置，应根据行的旋转将此值与行位置相加，或从行位置中减去此值。在具有 <codeph>TextRotation.ROTATE_0</codeph> 的行中，<codeph>strikethrough.y = line.y + strikethroughOffset</codeph>。在具有 <codeph>TextRotation.ROTATE_90</codeph> 的行中，<codeph>strikethrough.x = line.x - strikethroughOffset</codeph>。</p>
	 
	 <p>在应用装饰（例如删除线）时，建议的方法是在要接收装饰的 <codeph>ContentElement</codeph> 上指定 <codeph>eventMirror</codeph>。为了响应 <codeph>flash.events.Event.ADDED</codeph> 事件，可以将 <codeph>TextLineMirrorRegion</codeph> 的 <codeph>bounds</codeph> 与 <codeph>strikethroughOffset</codeph> 配合使用以放置删除线。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughThickness"><apiName>strikethroughThickness</apiName><shortdesc>
	 strikethroughThickness 值是建议的删除线粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 strikethroughThickness 值是建议的删除线粗细。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptOffset"><apiName>subscriptOffset</apiName><shortdesc>
	 subscriptOffset 值是距离下标的罗马字基线的建议垂直偏移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 subscriptOffset 值是距离下标的罗马字基线的建议垂直偏移。
	 
	 <p>将 subscriptOffset 值与 <codeph>ElementFormat.baselineShift</codeph> 一起使用以设置下标的位置。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptScale"><apiName>subscriptScale</apiName><shortdesc>
	 subscriptScale 值是要应用于下标磅值的建议缩放系数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 subscriptScale 值是要应用于下标磅值的建议缩放系数。缩放系数 1.0 表示不进行缩放。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptOffset"><apiName>superscriptOffset</apiName><shortdesc>
	 superscriptOffset 值是距离上标的罗马字基线的建议垂直偏移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 superscriptOffset 值是距离上标的罗马字基线的建议垂直偏移。
	 
	 <p>将 superscriptOffset 值与 <codeph>ElementFormat.baselineShift</codeph> 一起使用以设置上标的位置。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptScale"><apiName>superscriptScale</apiName><shortdesc>
	 superscriptScale 值是要应用于上标磅值的建议缩放系数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 superscriptScale 值是要应用于上标磅值的建议缩放系数。缩放系数 1.0 表示不进行缩放。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineOffset"><apiName>underlineOffset</apiName><shortdesc>
	 underlineOffset 值是距离下划线的罗马字基线的建议垂直偏移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 underlineOffset 值是距离下划线的罗马字基线的建议垂直偏移。
	 
	 <p>请注意，为了找出下划线的位置，应该根据行的旋转将此值与行位置相加，或从行位置中减去此值。在具有 <codeph>TextRotation.ROTATE_0</codeph> 的行中，<codeph>underline.y = line.y + underlineOffset</codeph>。在具有 <codeph>TextRotation.ROTATE_90</codeph> 的行中，<codeph>underline.x = line.x - underlineOffset</codeph>。</p>
	 
	 <p>在应用装饰（如下划线）时，建议的方法是在要接收装饰的 <codeph>ContentElement</codeph> 上指定 <codeph>eventMirror</codeph>。为了响应 <codeph>flash.events.Event.ADDED</codeph> 事件，可以将 <codeph>TextLineMirrorRegion</codeph> 的 <codeph>bounds</codeph> 与 <codeph>underlineOffset</codeph> 配合使用以放置下划线。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineThickness"><apiName>underlineThickness</apiName><shortdesc>
	 underlineThickness 值是建议的下划线粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 underlineThickness 值是建议的下划线粗细。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics 类概述</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 FontDescription 类表示说明字体所必需的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 FontDescription 类表示说明字体所必需的属性。FontDescription 类的属性适用于设备字体和嵌入字体。 
 
 <p>FontDescription 对象应用于 ElementFormat，后者又应用于 TextBlock 中的 ContentElement。将 FontDescription 应用于 ElementFormat 后，其 <codeph>locked</codeph> 属性将设置为 <codeph>true</codeph>。无法更改已锁定 FontDescription 对象的属性。相反，可以使用 <codeph>clone()</codeph> 方法创建此对象的没有锁定的副本，可以对此副本进行修改并将其分配给 ElementFormat。</p>
 
 <p><b>注意：</b>FTE 不支持 Type 1 字体和位图字体，如 Type 3、ATC、sfnt-wrapped CID 或 Naked CID。</p>
 
 </apiDesc><example conref="examples\FontDescriptionExample.as"> <p>此示例将创建一个 <codeph>FontDescription</codeph> 对象、将设备字体分配给该对象、设置各种字体属性并将新对象分配给 <codeph>ElementFormat</codeph> 对象。附加字体格式设置是在 <codeph>ElementFormat</codeph> 中完成的。使用 <codeph>ElementFormat</codeph> 创建新的 <codeph>TextElement</codeph>，并将 <codeph>TextElement</codeph> 用作 <codeph>TextBlock</codeph> 的内容。从 <codeph>TextBlock</codeph> 创建的文本行。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescriptionExample extends Sprite {
        
        public function FontDescriptionExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/fontDescription"><linktext>flash.text.engine.ElementFormat.fontDescription</linktext></link></related-links><apiConstructor id="flash.text.engine:FontDescription:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 	 创建一个 FontDescription 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>fontWeight</codeph> 不是 <codeph>flash.text.engine.FontWeight</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>fontPosture</codeph> 不是 <codeph>flash.text.engine.FontPosture</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>fontLookup</codeph> 不是 <codeph>flash.text.engine.FontLookup</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>renderingMode</codeph> 不是 <codeph>flash.text.engine.RenderingMode</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>cffHinting</codeph> 不是 <codeph>flash.text.engine.CFFHinting</codeph> 的成员。
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>_serif</apiData><apiDesc>要使用的字体的名称或用逗号分隔的字体名称列表。
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>指定字体粗细。
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>指定字体形态。
	 </apiDesc></apiParam><apiParam><apiItemName>fontLookup</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>device</apiData><apiDesc>指定如何查找字体。
	 </apiDesc></apiParam><apiParam><apiItemName>renderingMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>cff</apiData><apiDesc>用于此文本的呈现模式。对此属性使用 <codeph>flash.text.engine.RenderingMode</codeph> 常量。
	 </apiDesc></apiParam><apiParam><apiItemName>cffHinting</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>horizontalStem</apiData><apiDesc>用于此文本的 CFF 提示的类型。对此属性使用 <codeph>flash.text.engine.CFFHinting</codeph> 常量。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 创建一个 FontDescription 对象。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:FontDescription:clone"><apiName>clone</apiName><shortdesc>
	 构造 FontDescription 的没有锁定的克隆副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>FontDescription</codeph> 对象的没有锁定的副本。
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 构造 FontDescription 的没有锁定的克隆副本。
	 
     </apiDesc><example conref="examples\FontDescription_cloneExample.as"> <p>此示例将创建一个 <codeph>FontDescription</codeph> 对象、将设备字体分配给该对象、设置各种字体属性并将新对象（因此锁定它）分配给 <codeph>ElementFormat</codeph> 对象。使用 <codeph>ElementFormat</codeph> 创建新的 <codeph>TextElement</codeph>，并将 <codeph>TextElement</codeph> 用作 <codeph>TextBlock</codeph> 的内容。从 <codeph>TextBlock</codeph> 创建的文本行。</p>
 <p>要修改 <codeph>FontDescription</codeph> 对象，请首先检查其 <codeph>locked</codeph> 属性。如果为 true，则使用 <codeph>clone()</codeph> 方法创建 <codeph>FontDescription</codeph> 的没有锁定的副本，更改其属性，并将其分配给一个新的 ElementFormat 对象。然后将此新的 <codeph>ElementFormat</codeph> 重新链接到 <codeph>TextBlock</codeph>。重新断开这些行后，新行将具有新的字体设置。</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescription_cloneExample extends Sprite {
        private var fd:FontDescription;
        private var fd2:FontDescription;
        
        public function FontDescription_cloneExample():void {
            fd = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            fd2 = (fd.locked) ? fd.clone() : fd;    
            fd2.fontWeight = flash.text.engine.FontWeight.NORMAL;
            var ef2:ElementFormat = new ElementFormat(fd2);

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:FontDescription:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 如果使用指定的 fontName、fontWeight 和 fontPosture（其中的 Font.fontType 为 flash.text.FontType.EMBEDDED_CFF）的嵌入字体可用，则将返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>指定的 <codeph>fontWeight</codeph> 不是 <codeph>flash.text.engine.FontWeight</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>fontPosture</codeph> 不是 <codeph>flash.text.engine.FontPosture</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>如果兼容的嵌入字体可用，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>要检查的嵌入字体的名称。
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定字体粗细。使用 <codeph>flash.text.engine.FontWeight</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>指定字体形态。使用 <codeph>flash.text.engine.FontPosture</codeph>。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 如果使用指定的 <codeph>fontName</codeph>、<codeph>fontWeight</codeph> 和 <codeph>fontPosture</codeph>（其中 <codeph>Font.fontType</codeph> 为 <codeph>flash.text.FontType.EMBEDDED_CFF</codeph>）的嵌入字体可用，则将返回 true。启动 Flash Player 10 后，两种嵌入字体可显示在 SWF 文件中。标准的嵌入字体只能由 TextField 使用。CFF 嵌入字体只能由 flash.text.engine 类使用。两种类型由 <codeph>enumerateFonts()</codeph> 函数返回的 <codeph>Font</codeph> 类的 <codeph>fontType</codeph> 属性加以区分。
	 
	 <p>flash.text.engine 类不能使用 <codeph>EMBEDDED</codeph> 类型的字体。如果 <codeph>fontLookup</codeph> 设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 并且在运行时唯一可用的具有指定名称、粗细和形态的字体类型为 <codeph>EMBEDDED</codeph>，则 Flash Player 将基于每个字型改为使用设备字体来呈现文本，就像没有可用的具有特定名称和样式的嵌入字体一样。</p>
	 
	 <p>如果具有相同名称、粗细和形态的 <codeph>EMBEDDED</codeph> 和 <codeph>EMBEDDED_CFF</codeph> 字体均可用，则将选择 <codeph>EMBEDDED_CFF</codeph> 字体并使用 <codeph>EMBEDDED_CFF</codeph> 字体呈现文本。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:FontDescription:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
	 用于此文本的 CFF 提示的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.CFFHinting</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的 CFF 提示的类型。对此属性使用 <codeph>flash.text.engine.CFFHinting</codeph> 常量。仅在文本的 <codeph>flash.text.engine.RenderingMode</codeph> 属性设置为 <codeph>flash.text.engine.RenderingMode.CFF</codeph> 时才应用此属性。
	 
	 <p>使用的 CFF 提示的类型确定 Flash Player 是否强制让粗水平线适合子像素网格。</p>
	 
	 <p>仅适用于嵌入字体。</p>
	 
	 <p>默认值为 <codeph>flash.text.engine.CFFHinting.HORIZONTAL_STEM</codeph>。</p>
	 
	 <p>对于 <codeph>flash.text.engine.CFFHinting</codeph> 属性，您可以使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	     <entry><codeph>CFFHinting.NONE</codeph></entry>
	     <entry>不指定任何 CFF 提示。对子像素网格不强制在字型中使用水平线。此设置适合动画或大号字。</entry>
	   </row><row>
	     <entry><codeph>CFFHinting.HORIZONTAL_STEM</codeph></entry>
	     <entry>指定 CFF 提示。粗水平线适合于 LCD 显示器上的子像素网格。要使用此设置，<codeph>RenderingMode</codeph> 属性必须设置为 <codeph>RenderingMode.CFF</codeph>。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#CFFHinting"><linktext>flash.text.engine.CFFHinting</linktext></link><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontDescription:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
	 指定应该如何查找字体。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定应该如何查找字体。
	 
	 <p>默认值为 <codeph>flash.text.engine.FontLookup.DEVICE</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>FontLookup.DEVICE</codeph></entry>
	 	<entry>Flash Player 将在本地系统中查找具有指定 <codeph>name</codeph> 的设备字体，并使用该字体呈现文本。</entry>
	   </row><row>
	  <entry><codeph>FontLookup.EMBEDDED_CFF</codeph></entry>
	 	<entry>Flash Player 将查找具有指定 <codeph>name</codeph> 的嵌入 CFF 字体，并使用该字体呈现文本。仅考虑类型为 <codeph>flash.text.Font.fontType.EMBEDDED_CFF</codeph> 的字体。如果指定的 CFF 字体没有嵌入在 SWF 文件中，则 Flash Player 将尝试对每种字型使用设备替代字体。此方法没有首先选择设备字体的效率高。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontName:get"><apiName>fontName</apiName><shortdesc>
	 要使用的字体的名称或用逗号分隔的字体名称列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 要使用的字体的名称或用逗号分隔的字体名称列表。Flash Player 使用列表中的第一个可用字体呈现该元素。例如，"Arial, Helvetica, _sans" 使播放器搜索 "Arial"；如果没有找到 Arial，则搜索 "Helvetica"；如果两者都没找到，则搜索 _sans。
	 
	 <p>Flash 支持三种通用设备字体名称：_sans（类似于 Helvetica 和 Arial 字体）、_serif（类似于 Times Roman 字体）和 _typewriter（类似于 Courier 字体）。这些字体将映射到特定的设备字体，具体取决于平台。</p>
	 
	 <p>默认值为 <codeph>"_serif"</codeph>。</p>
	 
	 <p>Flash Player 将为选定字体中没有的字型提供后备字体。无论正在使用的字体是嵌入字体还是设备字体，只要字体中没有要呈现的字型，Flash Player 便会尝试使用或许包含该字型的另一种设备字体来呈现该字型。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontPosture:get"><apiName>fontPosture</apiName><shortdesc>
	 指定字体形态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.FontPosture</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定字体形态。
	 
	 <p>仅适用于设备字体。</p>
	 
	 <p>默认值为 <codeph>flash.text.engine.FontPosture.NORMAL</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>FontPosture.NORMAL</codeph></entry>
	 	<entry>标准字体形态。</entry>
	   </row><row>
	  <entry><codeph>FontPosture.ITALIC</codeph></entry>
	 	<entry>斜体字体形态。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
	 指定字体粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.FontWeight</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定字体粗细。
	 
	 <p>仅适用于设备字体。</p>
	 
	 <p>默认值为 <codeph>flash.text.engine.FontWeight.NORMAL</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>FontWeight.NORMAL</codeph></entry>
	 	<entry>标准字体的粗细。</entry>
	   </row><row>
	  <entry><codeph>FontWeight.BOLD</codeph></entry>
	 	<entry>粗体字体的粗细。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:locked:get"><apiName>locked</apiName><shortdesc>
	 指示 FontDescription 是否已经锁定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指示 FontDescription 是否已经锁定。如果为 <codeph>true</codeph>，将无法修改 FontDescription。调用 <codeph>FontDescription.clone()</codeph> 以获取 FontDescription 对象的没有锁定的副本。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
	 用于此文本的呈现模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>flash.text.engine.RenderingMode</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在锁定 FontDescription 对象（<codeph>locked</codeph> 为 <codeph>true</codeph>）之后进行设置。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于此文本的呈现模式。对此属性使用 <codeph>flash.text.engine.RenderingMode</codeph> 常量。 
	 
	 <p>仅适用于嵌入字体。</p>
	 
	 <p>默认值为 <codeph>flash.text.engine.RenderingMode.CFF</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>RenderingMode.NORMAL</codeph></entry>
	 	<entry>应用与 Flash Player 7 和早期版本使用的呈现类型匹配的常规文本呈现。</entry>
	   </row><row>
	   	<entry><codeph>RenderingMode.CFF</codeph></entry>
	 	<entry>应用 CFF 呈现，这将增加文本的可读性。（此功能在 Flash Player 10 中可用。）利用 CFF 呈现，可通过小尺寸获得高品质的字体呈现。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
 TextJustifier 类是可应用于 TextBlock 的对齐符类型的抽象基类，特别是 EastAsianJustifier 和 SpaceJustifier 类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextJustifier 类是可应用于 TextBlock 的对齐符类型的抽象基类，特别是 EastAsianJustifier 和 SpaceJustifier 类。
 
 <p>无法直接实例化 TextJustifier 类。调用 <codeph>new TextJustifier()</codeph> 会引发 <codeph>ArgumentError</codeph> 异常。将 EastAsianJustifier 或 SpaceJustifier 对象应用于 TextBlock 后设置该对象的属性不会使 TextBlock 无效。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:TextJustifier:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
	 调用 new TextJustifier() 构造函数会引发 ArgumentError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>locale</codeph> 为 <codeph>null</codeph> 或太短，不能表示有效的区域设置。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>lineJustification</codeph> 不是 <codeph>LineJustification</codeph> 的成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于确定对齐规则的区域设置。
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>段落的行对齐类型。将 <codeph>LineJustification</codeph> 常量用于此属性。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 调用 <codeph>new TextJustifier()</codeph> 构造函数会引发 <codeph>ArgumentError</codeph> 异常。但是，<i>可以</i>调用 TextJustifier 的以下子类的构造函数：
	 
	 <ul>
	 
	 	<li><codeph>new SpaceJustifier()</codeph></li>
	 	<li><codeph>new EastAsianJustifier()</codeph></li>
	 
	 </ul>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextJustifier:clone"><apiName>clone</apiName><shortdesc>
	 构造 TextJustifier 的克隆副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>TextJustifier</codeph> 对象的副本。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 构造 TextJustifier 的克隆副本。
	 
	 <p>TextJustifier 的子类必须覆盖此方法。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextJustifier:getJustifierForLocale"><apiName>getJustifierForLocale</apiName><shortdesc>
	 构造对应于指定的区域设置的默认 TextJustifier 子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>指定的 <codeph>locale</codeph> 为 <codeph>null</codeph> 或太短，不能表示有效的区域设置。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>对 <codeph>TextJustifier</codeph> 对象的引用。
     
     </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>用于确定所构造的对齐符的区域设置。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 构造对应于指定的区域设置的默认 TextJustifier 子类。
	 
	 <p>如果区域设置为“中文”、“韩文”或“日语”，则该方法将构造默认的 EastAsianJustifier 对象。否则，文本引擎将构造一个默认的 SpaceJustifier 对象。</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextJustifier:lineJustification:get"><apiName>lineJustification</apiName><shortdesc>
     指定文本块中文本的行对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     指定文本块中文本的行对齐方式。 
     
     <p>使用 <codeph>LineJustification</codeph> 定义的以下常量作为此属性的有效值：</p>
     
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>LineJustification.UNJUSTIFIED</codeph></entry>
	 	<entry>生成不对齐的行。</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_BUT_LAST</codeph></entry>
	 	<entry>生成的行除最后一行之外其它所有行均对齐。</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_INCLUDING_LAST</codeph></entry>
	 	<entry>生成的所有行均对齐。</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextJustifier:locale:get"><apiName>locale</apiName><shortdesc>
     指定用于确定文本块中文本的对齐规则的区域设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>指定的 <codeph>locale</codeph> 为 <codeph>null</codeph> 或太短，不能表示有效的区域设置。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     指定用于确定文本块中文本的对齐规则的区域设置。使用标准区域设置标识符。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GroupElement"><apiName>GroupElement</apiName><shortdesc>
 GroupElement 对象将 TextElement、GraphicElement 或其它 GroupElement 对象组成一个集合，您可以将这些对象作为一个整体分配给 TextBlock 对象的 content 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 GroupElement 对象将 TextElement、GraphicElement 或其它 GroupElement 对象组成一个集合，您可以将这些对象作为一个整体分配给 TextBlock 对象的 <codeph>content</codeph> 属性。GroupElement 对象也可以只共享另一个 GroupElement 对象内的公共格式。 
 
 <p>当 GroupElement 包含另一个 GroupElement 时，内部的 GroupElement 将保留自己的格式设置（ElementFormat 设置）。它不会继承外部 GroupElement 的格式设置。</p>
 
 <p>在 GroupElement 上，大多数格式属性均毫无影响。出于此原因，为具有空 <codeph>elementFormat</codeph> 参数的 GroupElement 对象创建文本行是合理的。一些格式属性（例如 <codeph>kerning</codeph> 和 <codeph>ligature</codeph>）会对组成员之间出现交集处的格式设置产生影响。如果组具有 null 格式，则上一元素的格式将确定组成员之间出现交集处的格式设置。</p>
  
 </apiDesc><example conref="examples\GroupElementExample.as"> 此示例创建了一个红色的框作为 GraphicElement 对象，并将该对象与两个 TextElement 对象结合在一起创建了一个 GroupElement 对象。它将 GroupElement 对象分配给从中创建三条行的 TextBlock 的 <codeph>content</codeph> 属性。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.ContentElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GroupElementExample extends Sprite {
        
        public function GroupElementExample():void {
            
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0, 0, 20, 20);
            redBox.graphics.endFill(); 
            
            var format:ElementFormat = new ElementFormat();
            var fontDescription:FontDescription = new FontDescription("Arial");
            format.fontSize = 16;
            format.fontDescription = fontDescription;
            
            var str1:String = "This red box is a GraphicElement ";
            var str2:String = " in the middle of two TextElements, " +
            " which together make " +
            "up a GroupElement in a TextBlock that is broken into three lines.";
            
            var textElement1:TextElement = new TextElement(str1,format);
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textElement2:TextElement = new TextElement(str2, format);
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>();
            groupVector.push(textElement1, graphicElement, textElement2);
            var groupElement = new GroupElement(groupVector);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = groupElement;
            createTextLines(textBlock);
        }
        
        private function createTextLines(textBlock:TextBlock):void 
        {
        
            var yPos = 20;
            var line_length:Number = 450;
            var textLine:TextLine = textBlock.createTextLine (null, line_length);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.height+8;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, line_length);
            }
        }
    }    
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links><apiConstructor id="flash.text.engine:GroupElement:GroupElement"><apiName>GroupElement</apiName><shortdesc>
	 创建新的 GroupElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>element</codeph> 包含 <codeph>null</codeph> 元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>element</codeph> 包含不是 <codeph>ContentElement</codeph> 的已知子类的元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>element</codeph> 包含已作为 <codeph>TextBlock</codeph> 的 <codeph>content</codeph> 指定的元素。 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>element</codeph> 包含已经是组成员或在 <codeph>elements</codeph> 中出现多次的元素。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>elements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiData>null</apiData><apiDesc>要包含在 GroupElement 中的 ContentElement 对象的矢量。该矢量可以为空。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>组的元素格式。默认值为 <codeph>null</codeph>。此格式将应用于组中元素之间的交集，这些元素不继承该格式。
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>EventDispatcher</codeph> 对象，该对象将接收分派到基于此内容元素创建的文本行的每个事件的副本。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>作为一个单元应用于元素的旋转。将 <codeph>TextRotation</codeph> 常量用于此属性。默认值为 <codeph>TextRotation.ROTATE_0</codeph>。 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 创建新的 GroupElement 实例。
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:GroupElement:getElementAt"><apiName>getElementAt</apiName><shortdesc>
	 从组中检索一个元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>index</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要检索的元素的索引。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 从组中检索一个元素。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementAtCharIndex"><apiName>getElementAtCharIndex</apiName><shortdesc>
	 返回包含由 charIndex 参数指定的字符的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>charIndex</codeph> 不在 <codeph>0 - rawText.length</codeph> 范围内。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>包含 <codeph>charIndex</codeph> 处的字符的元素。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>字符（您想要查找其元素）的从零开始的索引值。值 0 对应于组中的第一个字符，不对应于 TextBlock 中的第一个字符。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返回包含由 <codeph>charIndex</codeph> 参数指定的字符的元素。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
	 返回由 element 参数指定的元素的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>由 <codeph>element</codeph> 指定的元素的索引；如果元素不在组中，则为 -1。
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiDesc>想要检索其索引的组中的元素。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返回由 <codeph>element</codeph> 参数指定的元素的索引。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:groupElements"><apiName>groupElements</apiName><shortdesc>
	 将 beginIndex 和 endIndex 参数指定的元素范围替换为包含这些元素的一个新的 GroupElement。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>beginIndex</codeph> 或 <codeph>endIndex</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>新组。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:GroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要分组的范围的开始位置的从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要分组的范围的结束位置后面的从零开始的索引值。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 将 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 参数指定的元素范围替换为包含这些元素的一个新的 <codeph>GroupElement</codeph>。正如所设计的一样，将替换从 beginIndex 到 endIndex-1 的元素。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:mergeTextElements"><apiName>mergeTextElements</apiName><shortdesc>
	 将 beginIndex 和 endIndex 参数指定的元素范围中的文本合并到 beginIndex 指定的元素中，但不影响该元素的格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>beginIndex</codeph> 或 <codeph>endIndex</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>如果指定范围内的任何元素不是 TextElement。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>范围内的第一个文本元素，现在包含该范围内的所有文本。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要合并的范围的开始位置的从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要合并的范围的结束位置后面的从零开始的索引值。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 将 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 参数指定的元素范围中的文本合并到 <codeph>beginIndex</codeph> 指定的元素中，但不影响该元素的格式。正如所设计的一样，将合并从 beginIndex 到 endIndex-1 的元素中的文本。在合并了从 beginIndex+1 到 endIndex-1 的元素中的文本之后，这些元素将从组中删除并处于孤立状态，且具有 <codeph>null</codeph> <codeph>group</codeph> 属性。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:replaceElements"><apiName>replaceElements</apiName><shortdesc>
	 将 beginIndex 和 endIndex 参数指定的元素范围替换为 newElements 参数的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>beginIndex</codeph> 或 <codeph>endIndex</codeph> 超出范围。
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>newElements</codeph> 包含 <codeph>null</codeph> 元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>newElements</codeph> 包含 <codeph>this</codeph>。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>newElements</codeph> 包含不是 <codeph>ContentElement</codeph> 的已知子类的元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>newElements</codeph> 包含已作为 <codeph>TextBlock</codeph> 的 <codeph>content</codeph> 指定的元素。 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>newElements</codeph> 包含已经是组成员或在 <codeph>elements</codeph> 中出现多次的元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果操作将在 <codeph>GroupElement</codeph> 内生成嵌套旋转。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>包含被替换元素的矢量。
	  
     </apiDesc><apiType value="Vector$flash.text.engine:ContentElement"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>替换范围开始位置的从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>替换范围结束位置后面从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>newElements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiDesc>要用来替换指定范围元素的元素。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 将 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 参数指定的元素范围替换为 <codeph>newElements</codeph> 参数的内容。正如所设计的一样，将替换从 beginIndex 到 endIndex-1 的元素。
	 <p>要删除元素，请为 <codeph>newElements</codeph> 传递 <codeph>null</codeph>。</p>
	 <p>要插入一个元素，请为 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 传递相同的值。新元素将插入到指定索引之前。</p>
	 <p>要追加一个元素，请为 <codeph>beginIndex</codeph> 和 <codeph>endIndex</codeph> 传递 <codeph>elementCount</codeph>。</p>
	 <p>操作完成后，被替换的元素处于孤立状态，并且具有 <codeph>null</codeph> <codeph>group</codeph> 属性。</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:setElements"><apiName>setElements</apiName><shortdesc>
	 将组中的元素设置为该矢量的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>value</codeph> 包含 <codeph>null</codeph> 元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>value</codeph> 包含 <codeph>this</codeph>。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>value</codeph> 包含非 <codeph>ContentElement</codeph> 的已知子类的元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>value</codeph> 包含被指定为 <codeph>TextBlock</codeph> 的 <codeph>content</codeph> 的元素。 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>value</codeph> 包含已经是组成员或在 <codeph>value</codeph> 中出现多次的元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果操作将在 <codeph>GroupElement</codeph> 内生成嵌套旋转。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/></apiParam></apiOperationDef><apiDesc>
	 将组中的元素设置为该矢量的内容。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:splitTextElement"><apiName>splitTextElement</apiName><shortdesc>
	 将组中 TextElement 的一部分拆分为新的 TextElement，并将新 TextElement 插入到组中指定 TextElement 的后面。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>elementIndex</codeph> 或 <codeph>charIndex</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>如果 <codeph>elementIndex</codeph> 处的元素不是 TextElement。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>包含原始文本元素后面部分的新文本元素。
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>组中该元素位置的从零开始的索引值。
	 </apiDesc></apiParam><apiParam><apiItemName>splitIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>TextElement 中要进行拆分的位置处的字符的从零开始的索引值。指定字符为新 TextElement 中的第一个字符。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 将组中 TextElement 的一部分拆分为新的 TextElement，并将新 TextElement 插入到组中指定 TextElement 的后面。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:ungroupElements"><apiName>ungroupElements</apiName><shortdesc>
	 对 groupIndex 在外部 GroupElement 对象中指定的嵌套 GroupElement 中的元素取消分组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>groupIndex</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>如果 <codeph>groupIndex</codeph> 处的元素不是 GroupElement。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>groupIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>要拆分的组的位置的从零开始的索引值。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 对 <codeph>groupIndex</codeph> 在外部 GroupElement 对象中指定的嵌套 GroupElement 中的元素取消分组。操作完成后，取消分组的元素将替代嵌套的 GroupElement，后者将处于孤立状态，具有值为 <codeph>null</codeph> 的 <codeph>group</codeph> 属性。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:GroupElement:elementCount:get"><apiName>elementCount</apiName><shortdesc>
	 组中的元素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 组中的元素数。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ContentElement"><apiName>ContentElement</apiName><shortdesc>
 ContentElement 类用作可在 GroupElement 中显示的元素类型（即 GraphicElement、另一个 GroupElement 或 TextElement）的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 ContentElement 类用作可在 GroupElement 中显示的元素类型（即 GraphicElement、另一个 GroupElement 或 TextElement）的基类。
 
 <p>ContentElement 是一种抽象基类；因此，不能直接实例化 ContentElement。调用 <codeph>new ContentElement()</codeph> 会引发 <codeph>ArgumentError</codeph> 异常。 </p>
 
 <p>您只能将 ContentElement 元素分配给一个 <codeph>GroupElement</codeph> 或一个文本块的 <codeph>content</codeph> 属性。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock/content"><linktext>TextBlock.content</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links><apiConstructor id="flash.text.engine:ContentElement:ContentElement"><apiName>ContentElement</apiName><shortdesc>
	调用 new ContentElement() 构造函数会引发 ArgumentError 异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>元素中文本的元素格式。默认值为 <codeph>null</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>EventDispatcher</codeph> 对象，该对象将接收分派到基于此内容元素创建的有效文本行的每个事件的副本。默认值为 <codeph>null</codeph>。
	</apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>作为一个单元应用于元素的旋转。将 <codeph>TextRotation</codeph> 常量用于此属性。默认值为 <codeph>TextRotation.ROTATE_0</codeph>。
   	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	调用 <codeph>new ContentElement()</codeph> 构造函数会引发 <codeph>ArgumentError</codeph> 异常。但是，<i>可以</i> 调用 ContentElement 的以下子类的构造函数：
	
	<ul>
	
		<li><codeph>new GraphicElement()</codeph></li>
		<li><codeph>new GroupElement()</codeph></li>
		<li><codeph>new TextElement()</codeph></li>
	
	</ul>
	
 	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.engine:ContentElement:GRAPHIC_ELEMENT"><apiName>GRAPHIC_ELEMENT</apiName><shortdesc> 
	指示文本中存在图形元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFDEF</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	指示文本中存在图形元素。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/rawText"><linktext>rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:userData"><apiName>userData</apiName><shortdesc>
	 为作者提供了一种将任意数据与元素相关联的途径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 为作者提供了一种将任意数据与元素相关联的途径。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:elementFormat:get"><apiName>elementFormat</apiName><shortdesc>
	 用于元素的 ElementFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ElementFormat</apiValueClassifier></apiValueDef><apiDesc>
	 用于元素的 ElementFormat 对象。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 <p>如果设置了 elementFormat 属性，提供的 ElementFormat 对象已锁定，则其 <codeph>locked</codeph> 属性将设置为 <codeph>true</codeph>。无法修改已锁定的 ElementFormat。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:eventMirror:get"><apiName>eventMirror</apiName><shortdesc>
	 EventDispatcher 对象，该对象将接收分派到基于此内容元素的有效文本行的每个事件的副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 <codeph>EventDispatcher</codeph> 对象，该对象将接收分派到基于此内容元素的有效文本行的每个事件的副本。指定的对象可用于设置文本链接或其它交互式文本片段的侦听器，原因是在运行时确定从特定内容元素生成行的哪个部分可能会很难。还可以使用侦听器来应用装饰（如下划线），因为在布置完文本之前，无法确定这些装饰的度量。默认值为 <codeph>null</codeph>，这意味着不分派任何镜像的事件。
	 
	 <p>事件镜像在文本行中将自己声明为 <codeph>TextLineMirrorRegion</codeph> 类的实例。取决于双向处理和断行，可能会生成一个或多个镜像区域。</p>
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextElement/eventMirror"><linktext>TextElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:groupElement:get"><apiName>groupElement</apiName><shortdesc>
	 包含此元素的 GroupElement 对象；如果此元素不在一个组中，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:GroupElement</apiValueClassifier></apiValueDef><apiDesc>
	 包含此元素的 GroupElement 对象；如果此元素不在一个组中，则为 <codeph>null</codeph>。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:rawText:get"><apiName>rawText</apiName><shortdesc>
	 元素中的文本的副本，包括 U+FDEF 字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 元素中的文本的副本，包括 U+FDEF 字符。U+FDEF 字符为表示 String 中的图形元素的任意字符。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:text:get"><apiName>text</apiName><shortdesc>
	 元素中的文本的副本，不包括表示 String 中的图形元素的 U+FDEF 字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 元素中的文本的副本，不包括表示 String 中的图形元素的 U+FDEF 字符。
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextElement/text"><linktext>TextElement.text</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 此元素所属的 TextBlock。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 此元素所属的 TextBlock。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 文本块中此元素的第一个字符的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 文本块中此元素的第一个字符的索引。此值不进行缓存；每当调用此方法时便会计算此值。
	 
	 <p>默认值为 -1。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 应用于元素的旋转（旋转时将元素作为一个单元）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>TextRotation</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果设置为 <codeph>TextRotation.AUTO</codeph>。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果操作将在 <codeph>GroupElement</codeph> 内生成嵌套旋转。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 应用于元素的旋转（旋转时将元素作为一个单元）。将 <codeph>TextRotation</codeph> 常量用于此属性。
	 
	 <p>默认值为 <codeph>TextRotation.ROTATE_0</codeph>。</p>
	 
	 <p>任何字型的最终旋转均为 ElementFormat.textRotation、ContentElement.textRotation 与 TextBlock.lineRotation 之和。</p>
	 
	 <p><codeph>ContentElement.textRotation</codeph> 用于创建一小串文本，其旋转不同于包含行。例如，日语文本中的 TCY 串。TCY 代表 Tate-Chu-Yoko，是指某些垂直显示的日文文本中的少量水平显示的文本（通常是数字）。要创建包含 TCY 的日文垂直文本段落，请执行以下操作：</p>
	 <ol>
	 <li>设置 <codeph>TextBlock.lineRotation=TextRotation.ROTATE_90</codeph></li>
	 <li>将 <codeph>TextBlock.content</codeph> 设置为由三个 <codeph>TextElement</codeph> 对象构成的 <codeph>GroupElement</codeph>。这些元素中的第一个元素应为 TCY 串之前的日语文本，第二个元素应为 TCY 串的拉丁语文本，第三个元素应为 TCY 串之后的日语文本。</li>
	 <li>将 TCY <codeph>TextElement</codeph> 的 <codeph>textRotation</codeph> 属性设置为 <codeph>TextRotation.ROTATE_270</codeph>。TCY 文本元素将作为一个单元进行旋转。它首先开始执行从行中继承的 90 度旋转。再加上 270 度将使其旋转到水平位置。</li>
	 </ol>
	 
	 <p>无法嵌套旋转的内容元素。在内容元素的任何层次结构中，不管结构多复杂，都只能设置一个内容元素的 <codeph>textRotation</codeph> 属性。如果检测到嵌套的旋转，则以下方法和属性 setter 将引发参数错误：</p>
	 <ol>
	 <li><codeph>ContentElement.textRotation</codeph></li>
	 <li><codeph>GroupElement.setElements</codeph></li>
	 <li><codeph>GroupElement.replaceElements</codeph></li>
	 </ol>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>不旋转元素。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>将元素顺时针旋转 90 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>将元素旋转 180 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>将元素顺时针旋转 270 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>不支持。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 TextBlock 类是用于创建 TextLine 对象的工厂，可以通过将其放在显示列表中来进行呈现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextBlock 类是用于创建 TextLine 对象的工厂，可以通过将其放在显示列表中来进行呈现。
 
 <p>TextBlock 类用于包含单个段落，因为 Unicode 双向算法和换行算法一次操作一个段落。对于包含多个文本段落的应用程序，请使用标记语言或文本分析将文本拆分为多个段落，并为每个段落创建一个 TextBlock。</p>
 
 <p>TextBlock 对象在 <codeph>content</codeph> 属性中存储其内容，该属性是 ContentElement 类的一个实例。因为无法创建 ContentElement 类的实例，所以请将 <codeph>content</codeph> 设置为该类的以下其中一个子类的实例：TextElement、GraphicElement 或 GroupElement。请将 TextElement 用于纯文本内容、将 GraphicElement 用于图像或图形内容、将 GroupElement 用于包含 TextElement、GraphicElement 和其它 GroupElement 对象的组合的内容。有关管理带格式的文本串、嵌入的子串和图形元素的详细信息，请参阅 ContentElement 类及其子类。</p>
 
 <p>在创建 TextBlock 实例并设置 <codeph>content</codeph> 属性后，可以调用 <codeph>createTextLine()</codeph> 方法以创建作为 <codeph>TextLine</codeph> 类的实例的文本行。 </p>
 
 </apiDesc><example conref="examples\TextBlockExample.as"> 本示例显示三个日文和英文文本的 TextBlock 段落。将日文文本从 Unicode 字符代码转换为字符串。当您单击该按钮时，本示例将文本从水平旋转为垂直或从垂直旋转为水平。
 <ol>
     <li>将 Button 添加到库中。</li>
  <li>将此代码作为 TextBlockExample.as 保存到 FLA 文件所在的同一目录中。</li>
  <li>将 FLA 的“属性”面板中的“类”设置为“TextBlockExample”。</li>
 </ol>

<codeblock>
package { 
    import fl.controls.Button;
     import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextRotation;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.LineJustification;
    import flash.text.engine.FontDescription;
    import flash.text.engine.EastAsianJustifier; 
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.display.Stage;
    import flash.events.MouseEvent;
    import flash.system.Capabilities;
    
    public class TextBlockExample extends Sprite {
        
        var vertical:Boolean;    
        var container:Sprite;
        var textBlocks:Vector.&lt;TextBlock>;
        var loader:Loader = new Loader();
        var directionButton:Button = new Button();
        
        public function TextBlockExample():void {
            addChild(directionButton);
            directionButton.width = 30;
            directionButton.move(50, 350);
            directionButton.addEventListener(MouseEvent.CLICK, clickHandler);
            createContent();
            createLines();
        }

        private function createEmptyBlock():TextBlock {
        
            var textBlock:TextBlock = new TextBlock();
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_BUT_LAST);
            textBlock.lineRotation = vertical? TextRotation.ROTATE_90: TextRotation.ROTATE_0;
            return textBlock;    
        }
        
        private function paragraph1(format:ElementFormat):TextBlock {
        
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;
        }

        private function paragraph2(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x30AF, 0x30ED, 0x30B9, 0x30D7, 0x30E9, 0x30C3, 0x30C8, 0x30D5, 
                0x30A9, 0x30FC, 0x30E0, 0x4E0A, 0x3067, 0x518D, 0x751F, 0x53EF, 
                0x80FD, 0x306A
            ) + 
            "Flash Video" +
            String.fromCharCode(
                0x3092, 0x914D, 0x4FE1, 0x3001, 0x653F, 0x5E9C, 0x6700, 0x65B0, 
                0x60C5, 0x5831, 0x3092, 0x3088, 0x308A, 0x591A, 0x304F, 0x306E, 
                0x56FD, 0x6C11, 0x306B, 0x9AD8, 0x54C1, 0x8CEA, 0x306A, 0x753B, 
                0x50CF, 0x3067, 0x7C21, 0x5358, 0x304B, 0x3064, 0x30EA, 0x30A2, 
                0x30EB, 0x30BF, 0x30A4, 0x30E0, 0x306B, 0x63D0, 0x4F9B, 0x3059, 
                0x308B, 0x3053, 0x3068, 0x304C, 0x53EF, 0x80FD, 0x306B, 0x306A, 
                0x308A, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;    
        }

        private function paragraph3(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(0x3010) +
            "2007" +
            String.fromCharCode(0x5E74) + "2" + String.fromCharCode(0x6708) +
            "21" +
            String.fromCharCode(0x65E5, 0x3011),
            format);
            return textBlock;    
        }

        private function createContent():void {
            
            var font:FontDescription = new FontDescription();
            if (Capabilities.os.search("Mac OS") > -1) 
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R"; // "Kozuka Mincho Pro R"                    koFont.fontName = "Adobe " + String.fromCharCode(0xBA85, 0xC870) + " Std M"; // "Adobe Myungjo Std M"
            else 
                font.fontName = "Kozuka Mincho Pro R";        
            var format:ElementFormat = new ElementFormat();
            format.fontDescription = font;
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0x000000;
            if (!vertical) 
                format.textRotation = TextRotation.ROTATE_0; 
            textBlocks = new Vector.&lt;TextBlock>();
            textBlocks.push(
                paragraph1(format),
                paragraph2(format),
                paragraph3(format)//,
            );
        }

        private function createLines():void {    
        
            if (container != null) {
                removeChild(container);
            }            
            container = new Sprite();
            container.y = 45;
            container.x = 40;
            addChild(container);
            var linePosition:Number = vertical? this.stage.stageWidth - 120: 12;
        
            for (var i:uint = 0; i &lt; textBlocks.length; i++) {
                var textBlock:TextBlock = textBlocks[i];
                var previousLine:TextLine = null;
        
                while (true) {
                    var textLine:TextLine = textBlock.createTextLine(
                        previousLine, 
                        300);
                    if (textLine == null) 
                        break;
                    if (vertical) 
                    {
                        textLine.x = linePosition;
                        linePosition -= 24;
                        directionButton.label = " -- ";
                    }
                    else 
                    {
                        textLine.y = linePosition+50;
                        linePosition += 24;
                        directionButton.label = " | ";
                    }
                    container.addChild(textLine);                
                    previousLine = textLine;
                }
                if (vertical) 
                    linePosition -= 16;
                else 
                    linePosition += 16; 
            }
        }

        private function clickHandler(event:MouseEvent):void {
            
            vertical = !vertical;
            createContent();
            createLines();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links><apiConstructor id="flash.text.engine:TextBlock:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 	 创建一个 TextBlock 对象
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>content</codeph> 不是 <codeph>ContentElement</codeph> 的已知子类。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>content</codeph> 已经是组成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>lineRotation</codeph> 不是 <codeph>TextRotation</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>baselineZero</codeph> 不是 <codeph>TextBaseline</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>bidiLevel</codeph> 小于 0。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>tabStops</codeph> 包含 <codeph>null</codeph> 元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>tabStops</codeph> 不是按位置增加顺序排序的。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>baselineFontSize</codeph> 小于 0。
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiData>null</apiData><apiDesc>文本块的内容。
	 </apiDesc></apiParam><apiParam><apiItemName>tabStops</apiItemName><apiType value="Vector$flash.text.engine:TabStop"/><apiData>null</apiData><apiDesc>文本块中文本的 Tab 停靠位。
     </apiDesc></apiParam><apiParam><apiItemName>textJustifier</apiItemName><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier><apiData>null</apiData><apiDesc>为此块创建行的过程中要使用的 TextJustifier 对象。如果未提供对齐符，则将基于英语区域设置构造默认对齐符。
     </apiDesc></apiParam><apiParam><apiItemName>lineRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>作为一个单元应用于从文本块生成的文本行的旋转。
	 </apiDesc></apiParam><apiParam><apiItemName>baselineZero</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>指定哪条基线对于块中的所有行均为 y=0。
     </apiDesc></apiParam><apiParam><apiItemName>bidiLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>文本在文本块中的默认双向嵌入级别。
	 </apiDesc></apiParam><apiParam><apiItemName>applyNonLinearFontScaling</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>指定想要以降低 WYSIWYG 输出保真度为代价来增强屏幕外观。
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>指定用以推导块中所有行的行基线的字体说明。
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>指定用于 baselineFontDescription 的大小。如果 <codeph>baselineFontDescription</codeph> 为 <codeph>null</codeph>，则忽略此参数。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 创建一个 TextBlock 对象
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TextBlock/applyNonLinearFontScaling"><linktext>applyNonLinearFontScaling</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>baselineZero</linktext></link><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>bidiLevel</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>lineRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>tabStops</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextBlock:createTextLine"><apiName>createTextLine</apiName><shortdesc>
	 指示文本块从其内容中创建一行文本，从 previousLine 参数指定的点处开始并在 width 参数指定的点处换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果由 <codeph>previousLine</codeph> 指定的 TextLine 无效。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果 <codeph>width</codeph> 小于零；除非 <codeph>fitSomething</codeph> 为 true。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果 <codeph>width</codeph> 大于 <codeph>TextLine.MAX_LINE_WIDTH</codeph>。
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果文本块内容中的一个或多个元素具有 <codeph>null ElementFormat</codeph>。
     	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>一个文本行，如果文本块为空或指定的宽度小于下一个元素的宽度，则为 <codeph>null</codeph>。要区分这些情况，请检查文本块的 <codeph>textLineCreationResult</codeph> 属性。
     	 
     	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>previousLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiData>null</apiData><apiDesc>指定在其后开始断开的上一个断行。在对第一行换行时可以是 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000000</apiData><apiDesc>以像素为单位指定所需的行宽度。实际宽度可能更小。
	 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>一个可选参数，以像素为单位指定行的起点和 Tab 停靠位起点之间的距离。当行未对齐但其 Tab 停靠位需要对齐时可以使用此参数。此参数的默认值为 <codeph>0.0</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>一个可选参数，指示 Flash Player 至少使一个字符适合文本行，不管指定的宽度如何（即使宽度为零或负值，在这种情况下，将导致引发异常）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 指示文本块从其内容中创建一行文本，从 <codeph>previousLine</codeph> 参数指定的点处开始并在 <codeph>width</codeph> 参数指定的点处换行。文本行是 TextLine 对象，您可以将该对象添加到显示列表中。
	 
	 <p>对文本块中已经断行的范围进行断行会更改断行区域内外的行的有效性。行的状态可能会从 VALID 更改为 INVALID 或 POSSIBLY_INVALID。如果新断开的行与状态为 POSSIBLY_INVALID 的以前断开的行完全对齐，则以前断开的行和所有以下 POSSIBLY_INVALID 行将改回 VALID 状态。已经设置为非 <codeph>TextLineValidity</codeph> 成员的值的各行的 validity 不会更改为 VALID，但可以更改为 INVALID。在对文本块进行任何更改后请检查 <codeph>firstInvalidLine</codeph> 属性，以查看要开始或继续重新换行的位置。</p>
	 
	 <p>通过在文本中包括 Unicode 零宽度间隔 (ZWSP) 字符可以创建人工文字换行。这对泰语这样需要字典才能正确换行的语言很有用。Flash Player 不包括这样的字典。</p>
	 
	 </apiDesc><example conref="examples\TextBlock_createTextLineExample.as"> 本示例调用 <codeph>createTextLine()</codeph> 方法在文本块中创建文本行。该示例通过执行以下任务完成此操作：
  <ul>
     <li>从 String 创建一个 TextElement 并为其指定字体大小 20</li> 
     <li>创建一个 TextBlock 并为其分配 TextElement</li>
     <li>调用 <codeph>createTextLine()</codeph> 以从文本块创建 300 像素宽的行</li>
    <li>将每行放在舞台上 (<codeph>addChild()</codeph>) 并设置其位置（<codeph>x</codeph> 和 <codeph>y</codeph>）</li>
  </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_createTextLineExample extends Sprite {
        
        public function TextBlock_createTextLineExample():void {
            
            var str:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. The createTextLine() method " +
            "then created these lines, 300 pixels wide, for display." ;
            
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 16;
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock); 
        }
        
        private function createLines(textBlock:TextBlock):void 
        {            
            var lineWidth:Number = 300;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:dump"><apiName>dump</apiName><shortdesc>
	 将 TextBlock 的基础内容转储为 XML 字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 将 TextBlock 的基础内容转储为 XML 字符串。这在自动测试过程中很有用，并包括文本、格式和呈现信息。它仅在调试版 Flash Player 中可用。
	 
	 <p><b>注意：</b>输出的内容和格式将来可能会发生更改。Adobe 不保证此方法的向后兼容性。</p>
	 
	 <p>下表对输出进行说明：</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>标签</entry><entry>属性</entry><entry>说明</entry></row></thead><tbody><row><entry><codeph>&lt;block></codeph></entry><entry> </entry><entry>TextBlock</entry></row><row><entry><codeph>&lt;line</codeph></entry><entry> </entry><entry>TextLine</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>开始使用内联的 run 元素</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>限制内联的 run 元素</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>line 的结束标记</entry></row><row><entry><codeph>&lt;run</codeph></entry><entry> </entry><entry>行元素</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>开始使用内联的 run 元素</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>限制内联的 run 元素</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>run 的结束标记</entry></row><row><entry><codeph>&lt;inter</codeph></entry><entry> </entry><entry>inter 元素</entry></row><row><entry> </entry><entry><codeph>cursor=</codeph></entry><entry>字符光标（原始文本的索引）</entry></row><row><entry> </entry><entry><codeph>tcb=</codeph></entry><entry>印刷簇边界</entry></row><row><entry> </entry><entry><codeph>wb=</codeph></entry><entry>文字边界</entry></row><row><entry> </entry><entry><codeph>lbo=</codeph></entry><entry>换行</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>实际换行符</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>inter 的结束标记</entry></row><row><entry><codeph>&lt;char</codeph></entry><entry> </entry><entry>字符元素</entry></row><row><entry> </entry><entry><codeph>usv=</codeph></entry><entry>Unicode 标量值</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>char 的结束标记</entry></row><row><entry><codeph>&lt;glyph</codeph></entry><entry> </entry><entry>计算的字型元素或成形的字型元素</entry></row><row><entry> </entry><entry><codeph>font=</codeph></entry><entry>字体名称</entry></row><row><entry> </entry><entry><codeph>gid=</codeph></entry><entry>字型索引</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>attached=</codeph></entry><entry>两个元素是否相连</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>内部印刷簇边界偏移</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>双向级别</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>间距类</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>glyph 的结束标记</entry></row><row><entry><codeph>&lt;fo</codeph></entry><entry> </entry><entry>graphic 元素</entry></row><row><entry> </entry><entry><codeph>id=</codeph></entry><entry>元素 ID</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>左边界</entry></row><row><entry> </entry><entry><codeph>rb=</codeph></entry><entry>右边界</entry></row><row><entry> </entry><entry><codeph>tb=</codeph></entry><entry>上边界</entry></row><row><entry> </entry><entry><codeph>bb=</codeph></entry><entry>下边界</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>内部印刷簇边界偏移</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>双向级别</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>间距类</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>fo 的结束标记</entry></row><row><entry><codeph>&lt;embeddedRun</codeph></entry><entry> </entry><entry>embedded run</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>embeddedRun 的结束标记</entry></row><row><entry><codeph>&lt;run></codeph></entry><entry> </entry><entry>run</entry></row><row><entry><codeph>&lt;/run></codeph></entry><entry> </entry><entry>run 的结束标记</entry></row><row><entry><codeph>&lt;/embeddedRun></codeph></entry><entry> </entry><entry>embeddedRun 的结束标记</entry></row><row><entry><codeph>&lt;carets</codeph></entry><entry> </entry><entry>行的尖号</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>开始使用内联的 run 元素</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>限制内联的 run 元素</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>carets 的结束标记</entry></row><row><entry><codeph>&lt;cursor></codeph></entry><entry> </entry><entry>cursor</entry></row><row><entry> </entry><entry><codeph>x=</codeph></entry><entry>左边的 x 位置</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>cursor 的结束标记</entry></row><row><entry><codeph>&lt;cluster</codeph></entry><entry> </entry><entry>cluster</entry></row><row><entry> </entry><entry><codeph>c=</codeph></entry><entry>中心位置</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>开始使用 tc 偏移</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>限制 tc 偏移</entry></row><row><entry> </entry><entry><codeph>bidi</codeph></entry><entry>双向级别</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>cluster 的结束标记</entry></row><row><entry><codeph>&lt;/carets></codeph></entry><entry> </entry><entry>carets 的结束标记</entry></row><row><entry><codeph>&lt;/line></codeph></entry><entry> </entry><entry>line 的结束标记</entry></row><row><entry><codeph>&lt;/block></codeph></entry><entry> </entry><entry>block 的结束标记</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/dump()"><linktext>TextLine.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc>
	 从指定字符索引处查找下一个原子边界的索引，不包括指定索引处的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>index</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>索引字符所属的 TextLine 无效。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>从指定字符索引处开始的下一个原子边界的索引。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>指定要从其开始搜索下一个原子边界的字符的索引。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 从指定字符索引处查找下一个原子边界的索引，不包括指定索引处的字符。原子边界之间的字符在 <codeph>TextLine</codeph> 中结合成一个原子，如“e”和组合重音符。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc>
	 从指定字符索引处开始查找下一个文字边界的索引，不包括指定索引处的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>index</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>索引字符所属的 TextLine 无效。
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>从指定字符索引处开始的下一个文字边界的索引。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>指定要从其开始搜索下一个文字边界的字符的索引。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 从指定字符索引处查找下一个文字边界的索引，不包括指定索引处的字符。文字边界的确定依据是字符的 Unicode 属性。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc>
	 查找指定字符索引之前的上一个原子边界的索引，不包括指定索引处的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>index</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>索引字符所属的 TextLine 无效。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定字符索引之前的上一个原子边界的索引。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>指定要从其开始搜索上一个原子边界的字符的索引。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 查找指定字符索引之前的上一个原子边界的索引，不包括指定索引处的字符。原子边界之间的字符在 <codeph>TextLine</codeph> 中结合成一个原子，如“e”和组合重音符。
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc>
	 查找指定字符索引之前的上一个文字边界的索引，不包括指定索引处的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>index</codeph> 超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>索引字符所属的 TextLine 无效。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定字符索引之前的上一个文字边界的索引。
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>指定要从其开始搜索上一个文字边界的字符的索引。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 查找指定字符索引之前的上一个文字边界的索引，不包括指定索引处的字符。文字边界的确定依据是字符的 Unicode 属性。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:getTextLineAtCharIndex"><apiName>getTextLineAtCharIndex</apiName><shortdesc>
	 返回包含由 charIndex 参数指定的字符的 TextLine。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的字符索引超出范围。
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>包含 <codeph>charIndex</codeph> 处的字符的 TextLine.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>从零开始的字符索引值（例如，第一个字符的索引值是 0，第二个字符的索引值是 1，依此类推）。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 返回包含由 <codeph>charIndex</codeph> 参数指定的字符的 TextLine。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:releaseLines"><apiName>releaseLines</apiName><shortdesc>
	 从 TextBlock 保留的行列表中删除一系列文本行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>firstLine</codeph> 或 <codeph>lastLine</codeph> 所指定的 TextLine 不在文本块所保留的文本行列表中。
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>firstLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>指定要释放的第一行。
	 </apiDesc></apiParam><apiParam><apiItemName>lastLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>指定要释放的最后一行。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 从 TextBlock 保留的行列表中删除一系列文本行。在没有其它引用的情况下允许将行作为垃圾回收。
	 
	 <p>将已删除行的 <codeph>textBlock</codeph>、<codeph>nextLine</codeph> 和 <codeph>previousLine</codeph> 成员设置为 <codeph>null</codeph>。将已删除行以及 TextBlock 中已删除行后面的所有行的<codeph>有效性</codeph>设置为 <codeph>TextLineValidity.INVALID</codeph>。</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextBlock:userData"><apiName>userData</apiName><shortdesc>
	 为作者提供了一种将任意数据与文本块相关联的途径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 为作者提供了一种将任意数据与文本块相关联的途径。数据可以是与内容相关的信息，例如修订日期或作者的姓名，或者也可以是处理过程中使用的缓存数据。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:applyNonLinearFontScaling:get"><apiName>applyNonLinearFontScaling</apiName><shortdesc>
	 指定想要以降低所见即所得 (WYSIWYG) 输出保真度为代价来增强屏幕外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 指定想要以降低所见即所得 (WYSIWYG) 输出保真度为代价来增强屏幕外观。对于支持非线性缩放的平台和字体，将此属性设置为 <codeph>true</codeph> 将允许以降低一定程度的 WYSIWYG 输出保真度为代价来使用这些度量，特别是对于小磅值字体。
	 
	 <p>默认值为 <codeph>true</codeph>。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontDescription:get"><apiName>baselineFontDescription</apiName><shortdesc>
	 用于确定从块中创建的所有行的基线的字体，这与行内容无关。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier></apiValueDef><apiDesc>
	 用于确定从块中创建的所有行的基线的字体，这与行内容无关。基线取决于字体和字体大小。
	 
	 <p>默认值为 <codeph>null</codeph>。如果基线字体为 <codeph>null</codeph>，则将忽略基线字体大小，并且任何给定行的基线将基于行中最大文本的字体和大小。如果指定 <codeph>baselineFontDescription</codeph> 和 <codeph>baselineFontSize</codeph>，它们将决定文本块中所有行的基线，而与行内容无关。这种组合在中文版式中最常用。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontSize:get"><apiName>baselineFontSize</apiName><shortdesc>
	 用于计算从块中创建的行的基线的字体大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>指定的 <codeph>baselineFontSize</codeph> 小于 0。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 用于计算从块中创建的行的基线的字体大小。基线取决于字体和字体大小。
	 
	 <p>默认值为 <codeph>12</codeph>。如果基线字体为 <codeph>null</codeph>，则将忽略基线字体大小，并且任何给定行的基线将基于行中最大文本的字体和大小。</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineZero:get"><apiName>baselineZero</apiName><shortdesc>
	 指定对于从此块中创建的行位置为 y=0 的基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>TextBaseline</codeph> 的成员。
     
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定对于从此块中创建的行位置为 y=0 的基线。此属性的有效值包括在 <codeph>TextBaseline</codeph> 类的成员中。
	 
	 <p>默认值为 <codeph>TextBaseline.ROMAN</codeph>。</p>
	 
	 <p>要设置此属性的值，请使用下列字符串值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>行的罗马字基线位于 y=0 处。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>行的上缘基线位于 y=0 处。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>行的下缘基线位于 y=0 处。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>行的表意顶部基线位于 y=0 处。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>行的表意中心基线位于 y=0 处。</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>行的表意底部基线位于 y=0 处。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:bidiLevel:get"><apiName>bidiLevel</apiName><shortdesc>
	 指定文本在文本块中的默认双向嵌入级别。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>如果设置为小于 0 的值。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定文本在文本块中的默认双向嵌入级别。偶数值表示从左向右，奇数值表示从右向左。您可以增加 <codeph>bidiLevel</codeph>，以指示特定文本从左向右以及从右向左嵌入的级别数。
	 
	 <p>默认值为 0。</p>
	 
	 <p>如果修改 <codeph>bidiLevel</codeph>，则会将所有以前断开的行的有效性更改为 TextLineValidity.INVALID。更改 <codeph>bidiLevel</codeph> 后，<codeph>firstInvalidLine</codeph> 属性将等同于 <codeph>firstLine</codeph> 属性，并且您必须重新断开 TextBlock 中的所有行。</p>
	 
     </apiDesc><example conref="examples\TextBlock_bidiLevelExample.as"> 此示例首先将 <codeph>bidiLevel</codeph> 设置为偶数来呈现文本字符串（逻辑顺序：a、b、c、alef、bet、gimel），然后设置为基数来呈现该字符串。<codeph/>
<codeblock>

package {
    
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_bidiLevelExample extends Sprite {
        
        public function TextBlock_bidiLevelExample():void {             
            var fontSize:Number = 36;

            var format:ElementFormat = new ElementFormat();        
            format.fontDescription = new FontDescription("Adobe Hebrew");
            format.fontSize = fontSize;
            var y:Number = 0;
            var leading:Number = fontSize * 0.2;
            var text:String = "abc" + String.fromCharCode(0x05D0, 0x05D1, 0x05D2);

            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(text, format);
                        
            // bidiLevel even
            textBlock.bidiLevel = 0;
            var textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;
            textLine.y = y;
            y += textLine.descent;
            addChild(textLine);      
            
            // bidiLevel odd
            textBlock.content = new TextElement(text, format);
            textBlock.bidiLevel = 1;
            textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;          
            textLine.y = y;
            addChild(textLine);   
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:content:get"><apiName>content</apiName><shortdesc>
	 容纳文本块的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>ContentElement</codeph> 的已知子类。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>value</codeph> 已经是组成员。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 容纳文本块的内容。因为 ContentElement 是一个基类，所以请为 <codeph>content</codeph> 分配一个以下 ContentElement 子类的实例：TextElement、GraphicElement 或 GroupElement。TextElement 对象包含一个 String，GraphicElement 对象包含一个 DisplayObject，GroupElement 包含一个 Vector 对象，该对象包含一个或多个 TextElement、GraphicElement 或其它 GroupElement 对象。请将 TextElement 用于一段同源文本，将 GraphicElement 用于图形，将 GroupElement 用于文本和图形元素或这些元素的多个实例的组合以及其它 GroupElement 对象。
	 
	 <p>默认值为 <codeph>null</codeph>.</p>
	 
	 <p>如果修改 <codeph>content</codeph> 属性，则会将所有以前创建的行的 validity 更改为 <codeph>TextLineValidity.INVALID</codeph>。更改 <codeph>content</codeph> 后，<codeph>firstInvalidLine</codeph> 属性将等同于 <codeph>firstLine</codeph> 属性，并且您必须重新断开 TextBlock 中的所有行。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstInvalidLine:get"><apiName>firstInvalidLine</apiName><shortdesc>
	 标识文本块内 TextLine.validity 不是 TextLineValidity.VALID 的第一行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 标识文本块内 <codeph>TextLine.validity</codeph> 不是 <codeph>TextLineValidity.VALID</codeph> 的第一行。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstLine:get"><apiName>firstLine</apiName><shortdesc>
	 TextBlock 中的第一个 TextLine，如果有。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 中的第一个 TextLine，如果有。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lastLine:get"><apiName>lastLine</apiName><shortdesc>
	 TextBlock 中的最后一个 TextLine，如果有。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 TextBlock 中的最后一个 TextLine，如果有。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lineRotation:get"><apiName>lineRotation</apiName><shortdesc>
	 作为一个单元旋转文本块中的文本行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>TextRotation</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果设置为 <codeph>TextRotation.AUTO</codeph>。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 作为一个单元旋转文本块中的文本行。在设置 <codeph>lineRotation</codeph> <i>之后</i>调用 <codeph>createTextLine()</codeph> 方法，以使设置生效。默认值为 <codeph>TextRotation.ROTATE_0</codeph>。
	 
	 <p>任何字型的最终旋转都取决于 <codeph>ElementFormat.textRotation</codeph>、<codeph>ContentElement.textRotation</codeph> 和 <codeph>TextBlock.lineRotation</codeph> 的值。</p>
	 
	 <p><codeph>TextBlock.lineRotation</codeph> 通常用于亚洲文字。要创建日文垂直文本段落，请执行以下操作：</p>
     <ol>
     <li>将 <codeph>TextBlock.lineRotation</codeph> 属性设置为 <codeph>TextRotation.ROTATE_90</codeph>。</li>
     <li>将内容的 <codeph>ElementFormat.textRotation</codeph> 属性保留为默认值 <codeph>TextRotation.AUTO</codeph>。</li>
     </ol>
	 
	 <p>使用在 <codeph>TextRotation</codeph> 类中定义的以下常量设置此属性的值：</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>不旋转行。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>将行顺时针旋转 90 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>将行旋转 180 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>将行顺时针旋转 270 度。</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>不支持。</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextBlock_lineRotationExample.as"> 此示例向 TextBlock 添加日文文本并将 <codeph>lineRotation</codeph> 属性设置为 TextRotation.ROTATE_90 以便垂直显示行。 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextRotation;
    import flash.text.engine.ElementFormat;
    
    public class TextBlock_lineRotationExample extends Sprite {
        
        public function TextBlock_lineRotationExample():void {
            var Japanese:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);

            var fontDescription:FontDescription = new FontDescription("MS Mincho");
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 15;
            format.fontDescription = fontDescription;
                        
            var textElement:TextElement = new TextElement(Japanese, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.lineRotation = TextRotation.ROTATE_90;

            var linePosition:Number = this.stage.stageWidth - 120;
            var previousLine:TextLine = null;
        
            while (true) {
                var textLine:TextLine = textBlock.createTextLine(
                    previousLine, 
                    300);
                if (textLine == null) 
                    break;
                textLine.y = 30;    
                textLine.x = linePosition;
                linePosition -= 24;
                addChild(textLine);                
                previousLine = textLine;
            }        
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 指定文本块中文本的 Tab 停靠位，用 TabStop 对象的矢量形式表示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$flash.text.engine:TabStop"/><apiException><apiDesc>指定的 <codeph>tabStops</codeph> 包含 <codeph>null</codeph> 元素。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>tabStops</codeph> 不是按位置增加顺序排序的。
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定文本块中文本的 Tab 停靠位，用 <codeph>TabStop</codeph> 对象的矢量形式表示。
	 
	 <p>默认值为 <codeph>null</codeph>，意味着不启用 Tab 停靠位。如果没有设置 Tab 停靠位，则制表符 (\t) 将导致生成新的行。</p>
	 
	 <p>如果设置了 <codeph>tabStops</codeph> 属性，TextBlock 将制作此 Vector 的副本供内部使用。修改原始 Vector 或其内容不会影响 TextBlock。如果对 <codeph>tabStops</codeph> 属性进行查询，将返回此内部 Vector 的副本。同样，修改此返回的矢量或其内容不会影响 TextBlock。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textJustifier:get"><apiName>textJustifier</apiName><shortdesc>
	 指定在创建行的过程中要使用的 TextJustifier。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:TextJustifier</apiValueClassifier><apiException><apiDesc>如果设置的值不是 <codeph>TextJustifier</codeph> 的已知子类。
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 指定在创建行的过程中要使用的 TextJustifier。
	 
	 <p>默认值为默认构造的 TextJustifier 对象。</p>
	 
	 <p>如果设置了 <codeph>textJustifier</codeph> 属性，TextBlock 将制作此对象的副本供内部使用。修改原始对象不会影响 TextBlock。如果对 <codeph>textJustifier</codeph> 属性进行查询，将返回此内部对象的副本。同样，修改此返回的对象不会影响 TextBlock。</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textLineCreationResult:get"><apiName>textLineCreationResult</apiName><shortdesc>
	 指示 createTextLine() 操作的结果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 指示 <codeph>createTextLine()</codeph> 操作的结果。更改该块的内容将使先前断开的行无效，并会将此属性重置为 <codeph>null</codeph>。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 <p>此属性的值包括在 <codeph>TextLineCreationResult</codeph> 中</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>字符串值</entry><entry>说明</entry></row></thead><tbody><row>
	 	<entry><codeph>TextLineCreationResult.SUCCESS</codeph></entry>
	 	<entry>行已成功断开。</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.COMPLETE</codeph></entry>
	 	<entry>创建的新行已经与从 POSSIBLY_INVALID 转换到 VALID 的后续行完全对齐，或者是由于块中的所有文本已经断行而未创建任何行。</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.INSUFFICIENT_WIDTH</codeph></entry>
	 	<entry>由于文本无法适合指定的宽度，因此未创建任何行。</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLineCreationResult"><linktext>TextLineCreationResult</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineCreationResult"><apiName>TextLineCreationResult</apiName><shortdesc>
TextLineCreationResult 类是与 TextBlock.textLineCreationResult 一起使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextLineCreationResult 类是与 <codeph>TextBlock.textLineCreationResult</codeph> 一起使用的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextBlock/textLineCreationResult"><linktext>TextBlock.textLineCreationResult</linktext></link></related-links><apiValue id="flash.text.engine:TextLineCreationResult:COMPLETE"><apiName>COMPLETE</apiName><shortdesc> 
	指示没有创建任何行，因为块中的所有文本已经断开。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示没有创建任何行，因为块中的所有文本已经断开。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:EMERGENCY"><apiName>EMERGENCY</apiName><shortdesc> 
	指示由于指定宽度中不可换行而通过备用换行符来创建行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>emergency</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示由于指定宽度中不可换行而通过备用换行符来创建行。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:INSUFFICIENT_WIDTH"><apiName>INSUFFICIENT_WIDTH</apiName><shortdesc> 
	指示没有创建任何行，因为没有任何文本可以适合指定的宽度，并且在对 createTextLine() 的调用中未指定 fitSomething。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insufficientWidth</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示没有创建任何行，因为没有任何文本可以适合指定的宽度，并且在对 <codeph>createTextLine()</codeph> 的调用中未指定 <codeph>fitSomething</codeph>。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:SUCCESS"><apiName>SUCCESS</apiName><shortdesc> 
	指示行已成功断开。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>success</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示行已成功断开。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LigatureLevel"><apiName>LigatureLevel</apiName><shortdesc>
LigatureLevel 类是在设置 ElementFormat 类的 ligatureLevel 属性时使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
LigatureLevel 类是在设置 ElementFormat 类的 <codeph>ligatureLevel</codeph> 属性时使用的常量值的枚举。由两个或两个以上的字母结合在一起形成单个字型时就是连字。连字通常用于替换一些共享公共部分的连续字符，例如字母对“fi”、“fl”或“ae”。在拉丁语字符集和非拉丁语字符集中均可使用连字。
<p><b>注意：</b>使用阿拉伯语或叙利亚语字体时，必须将 <codeph>ligatureLevel</codeph> 设置为 MINIMUM 或更高。</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/ligatureLevel"><linktext>flash.text.engine.ElementFormat.ligatureLevel</linktext></link></related-links><apiValue id="flash.text.engine:LigatureLevel:COMMON"><apiName>COMMON</apiName><shortdesc> 
	用于指定常见连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>common</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定常见连字。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:EXOTIC"><apiName>EXOTIC</apiName><shortdesc> 
	用于指定外来语连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exotic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定外来语连字。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:MINIMUM"><apiName>MINIMUM</apiName><shortdesc> 
	用于指定使用最少的连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>minimum</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定使用最少的连字。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:NONE"><apiName>NONE</apiName><shortdesc> 
	用于指定不使用连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定不使用连字。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:UNCOMMON"><apiName>UNCOMMON</apiName><shortdesc> 
	用于指定不常见的连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncommon</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定不常见的连字。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextRotation"><apiName>TextRotation</apiName><shortdesc>
TextRotation 类是与以下属性一起使用的常量值的枚举：ElementFormat.textRotation、ContentElement.textRotation、TextBlock.lineRotation 和 TextLine.getAtomTextRotation()。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextRotation 类是与以下属性一起使用的常量值的枚举：<codeph>ElementFormat.textRotation</codeph>、<codeph>ContentElement.textRotation</codeph>、<codeph>TextBlock.lineRotation</codeph> 和 <codeph>TextLine.getAtomTextRotation()</codeph>。 

<p>任何字型的最终旋转都是 <codeph>TextBlock.lineRotation</codeph>、<codeph>ElementFormat.textRotation</codeph> 与 <codeph>ContentElement.textRotation</codeph> 之和</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>TextLine.getAtomTextRotation()</linktext></link></related-links><apiValue id="flash.text.engine:TextRotation:AUTO"><apiName>AUTO</apiName><shortdesc> 
	指定仅将全角和宽字型沿逆时针方向旋转 90 度，这是由字型的 Unicode 属性确定的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定仅将全角和宽字型沿逆时针方向旋转 90 度，这是由字型的 Unicode 属性确定的。此值通常与亚洲文字一起使用，以便仅旋转那些需要旋转的字型。此旋转仅应用在垂直文本中，以将全角字符和宽字符返回到垂直方向，而不会影响其它的字符。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_0"><apiName>ROTATE_0</apiName><shortdesc> 
	指定不进行旋转。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate0</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定不进行旋转。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_180"><apiName>ROTATE_180</apiName><shortdesc> 
	指定 180 度旋转。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate180</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定 180 度旋转。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_270"><apiName>ROTATE_270</apiName><shortdesc> 
	指定 270 度顺时针旋转。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate270</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定 270 度顺时针旋转。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_90"><apiName>ROTATE_90</apiName><shortdesc> 
	指定 90 度顺时针旋转。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate90</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定 90 度顺时针旋转。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabAlignment"><apiName>TabAlignment</apiName><shortdesc>
TabAlignment 类是可用于设置 TabStop 类的 tabAlignment 属性的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TabAlignment 类是可用于设置 <codeph>TabStop</codeph> 类的 <codeph>tabAlignment</codeph> 属性的常量值的枚举。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TabStop/tabAlignment"><linktext>TabStop.tabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStop"><linktext>TextBlock.tabStop</linktext></link></related-links><apiValue id="flash.text.engine:TabAlignment:CENTER"><apiName>CENTER</apiName><shortdesc> 
	将带制表符的文本的中心位置设置为 Tab 停靠位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	将带制表符的文本的中心位置设置为 Tab 停靠位。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> 
	将带制表符的文本的对齐标记设置为 Tab 停靠位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	将带制表符的文本的对齐标记设置为 Tab 停靠位。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:END"><apiName>END</apiName><shortdesc> 
	将带制表符的文本的结束位置设置为 Tab 停靠位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	将带制表符的文本的结束位置设置为 Tab 停靠位。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:START"><apiName>START</apiName><shortdesc> 
	将带制表符的文本的开始位置设置为 Tab 停靠位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	将带制表符的文本的开始位置设置为 Tab 停靠位。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
 GraphicElement 类表示 TextBlock 或 GroupElement 对象中的图形元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 GraphicElement 类表示 TextBlock 或 GroupElement 对象中的图形元素。将 GraphicElement 对象分配给 TextBlock 对象的 <codeph>content</codeph> 属性，以使用 <codeph>TextBlock.createTextLine()</codeph> 显示图形或图像。将其分配给 GroupElement 对象以将其与其它图形和文本元素相结合。
 
 </apiDesc><example conref="examples\GraphicElementExample.as"> 以下示例将创建一个包含 GraphicElement（红色的框）的 TextBlock 并显示该 TextBlock，同时在该 TextBlock 下面添加包含字幕的另一个 TextBlock。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GraphicElementExample extends Sprite {
        
        public function GraphicElementExample():void {
            
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 14;
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0,0, 200, 200);
            redBox.graphics.endFill();   
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = graphicElement;
            var textLine1:TextLine = textBlock.createTextLine(null,redBox.width);
            addChild(textLine1);
            textLine1.x = 15
            textLine1.y = 215
            var str:String = "Your picture here ...";
            var textElement:TextElement = new TextElement(str, format);
            textBlock = new TextBlock();
            textBlock.content = textElement;
            var textLine2 = textBlock.createTextLine(null, 300);
            addChild(textLine2);
            textLine2.x = textLine1.x;
            textLine2.y += textLine1.y + format.fontSize;        
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:GraphicElement:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
	 创建新的 GraphicElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>graphic</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>要填充 GraphicElement 的 DisplayObject。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>elementWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>为元素保留的区域的宽度，以像素为单位。默认值为 15。
	 </apiDesc></apiParam><apiParam><apiItemName>elementHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>为元素保留的区域的高度，以像素为单位。默认值为 15。
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>元素的元素格式。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc><codeph>EventDispatcher</codeph> 对象，该对象将接收分派到基于此内容元素创建的文本行的每个事件的副本。默认值为 <codeph>null</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>作为一个单元应用于元素的旋转。对此属性使用 <codeph>flash.text.engine.TextRotation</codeph> 常量。默认值为 <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>。
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 创建新的 GraphicElement 实例。
	 
	 <p>图形的注册点与 <codeph>elementHeight</codeph>、<codeph>elementWidth</codeph> 和 <codeph>elementFormat.baselineShift</codeph> 所定义的区域的左上角对齐。将不会为了与区域大小相匹配而缩放图形。如果 GraphicElement 具有 <codeph>eventMirror</codeph>、<codeph>elementWidth</codeph> 和 <codeph>elementHeight</codeph> 属性，但是没有图形，则可以确定生成的镜像区域的大小和位置。如果使用加载程序，则可能不会在创建文本行和镜像区域时加载图形。</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:GraphicElement:elementHeight:get"><apiName>elementHeight</apiName><shortdesc>
	 要为行中的图形保留的高度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 要为行中的图形保留的高度，以像素为单位。调用方负责缩放图形。
	 
	 <p>默认值为 15.0。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:elementWidth:get"><apiName>elementWidth</apiName><shortdesc>
	 要为行中的图形保留的宽度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 要为行中的图形保留的宽度，以像素为单位。调用方负责缩放图形。
	 
	 <p>默认值为 15.0。</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc>
	 要用作 GraphicElement 的图形的 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:DisplayObject</apiValueClassifier></apiValueDef><apiDesc>
	 要用作 GraphicElement 的图形的 DisplayObject。
	 
	 <p>默认值为 <codeph>null</codeph>。</p>
	 
	 <p>当 GraphicElement 成为文本行的一部分时，会将该图形添加为行的子项。如果设置图形，则将从行中删除旧图形并添加新图形。</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontWeight"><apiName>FontWeight</apiName><shortdesc>
FontWeight 类是与 FontDescription.fontWeight 一起使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
FontWeight 类是与 <codeph>FontDescription.fontWeight</codeph> 一起使用的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontWeight"><linktext>flash.text.engine.FontDescription.fontWeight</linktext></link></related-links><apiValue id="flash.text.engine:FontWeight:BOLD"><apiName>BOLD</apiName><shortdesc> 
	用于指示粗体字体粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示粗体字体粗细。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontWeight:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	用于指示标准字体粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示标准字体粗细。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBaseline"><apiName>TextBaseline</apiName><shortdesc>
TextBaseline 类是在设置 ElementFormat 类的 dominantBaseline 和 alignmentBaseline 属性时要使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
TextBaseline 类是在设置 ElementFormat 类的 <codeph>dominantBaseline</codeph> 和 <codeph>alignmentBaseline</codeph> 属性时要使用的常量值的枚举。<codeph/>考虑下面的情况：
<p><adobeimage alt="文本基线对齐" href="../../../images/textBaselines.gif"/></p>
<p>行由四个 <codeph>TextElement</codeph> 对象组成，其中分别包含“a”、“b”、“cccccccc”和“X”。包含“X”的元素将确定行的基线，因为该元素是行中的最大元素。“X”元素的罗马字基线与行的罗马字基线对齐。“a”元素的表意顶部与行的表意顶部对齐。“b”元素的表意底部与行的表意底部对齐。“cccccccc”元素的表意中心与行的表意中心对齐。</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links><apiValue id="flash.text.engine:TextBaseline:ASCENT"><apiName>ASCENT</apiName><shortdesc> 
	指定上缘基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定上缘基线。对于文本元素，文本的字体和磅值将确定此值。对于图形元素，文本引擎将使用元素的几何形状顶部。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:DESCENT"><apiName>DESCENT</apiName><shortdesc> 
	指定下缘基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>descent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定下缘基线。对于文本元素，文本的字体和磅值将确定此值。对于图形元素，文本元素将使用元素的几何形状底部。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_BOTTOM"><apiName>IDEOGRAPHIC_BOTTOM</apiName><shortdesc> 
	指定表意底部基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicBottom</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定表意底部基线。对于文本元素，文本的字体和磅值将确定此值。对于图形元素，文本引擎将使用元素的几何形状底部。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_CENTER"><apiName>IDEOGRAPHIC_CENTER</apiName><shortdesc> 
	指定表意中心基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定表意中心基线。对于文本元素，文本的字体和磅值将确定此值。对于图形元素，文本引擎将使用元素的几何形状中心。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_TOP"><apiName>IDEOGRAPHIC_TOP</apiName><shortdesc> 
	指定表意顶部基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定表意顶部基线。对于文本元素，文本的字体和磅值将确定此值。对于图形元素，文本引擎将使用元素的几何形状顶部。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:ROMAN"><apiName>ROMAN</apiName><shortdesc> 
	指定罗马字基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>roman</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定罗马字基线。对于文本元素，文本的字体和磅值将确定此值。对于图形元素，文本引擎将使用元素的几何形状底部。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:USE_DOMINANT_BASELINE"><apiName>USE_DOMINANT_BASELINE</apiName><shortdesc> 
	指定 alignmentBaseline 与 dominantBaseline 相同。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>useDominantBaseline</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指定 alignmentBaseline 与 dominantBaseline 相同。使用此值只能设置 <codeph>ElementFormat.alignmentBaseline</codeph>。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:BreakOpportunity"><apiName>BreakOpportunity</apiName><shortdesc>
BreakOpportunity 类是可用于设置 ElementFormat 类的 breakOpportunity 属性的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
BreakOpportunity 类是可用于设置 ElementFormat 类的 <codeph>breakOpportunity</codeph> 属性的常量值的枚举。此属性确定在将换行文本分为多行时可用于断行的字符。


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/breakOpportunity"><linktext>ElementFormat.breakOpportunity</linktext></link></related-links><apiValue id="flash.text.engine:BreakOpportunity:ALL"><apiName>ALL</apiName><shortdesc> 
	ContentElement 对象中的所有字符均强制换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ContentElement 对象中的所有字符均强制换行。可以使用此选项生成可能最短的行，这些行可用于在行上创建文本或类似效果。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:ANY"><apiName>ANY</apiName><shortdesc> 
	ContentElement 对象中的任何字符均可换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ContentElement 对象中的任何字符均可换行。此值通常用于亚洲文字中嵌入罗马文字并需要在文字的中间换行的场合。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:AUTO"><apiName>AUTO</apiName><shortdesc> 
	基于 Unicode 字符属性进行换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	基于 Unicode 字符属性进行换行。此设置将实现 Unicode Standard Annex #14 所定义的 Unicode 换行属性。 
	</apiDesc></apiValueDetail><related-links><link href="http://unicode.org/reports/tr14/tr14-12.html"><linktext>关于 Unicode 换行属性的文章。</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:BreakOpportunity:NONE"><apiName>NONE</apiName><shortdesc> 
	ContentElement 对象中的任何字符均不可换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	ContentElement 对象中的任何字符均不可换行。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitWidth"><apiName>DigitWidth</apiName><shortdesc>
DigitWidth 类是在设置 ElementFormat 类的 digitWidth 属性时使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
DigitWidth 类是在设置 ElementFormat 类的 <codeph>digitWidth</codeph> 属性时使用的常量值的枚举。 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitWidth"><linktext>flash.text.engine.ElementFormat.digitWidth</linktext></link></related-links><apiValue id="flash.text.engine:DigitWidth:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	用于指定默认数字宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定默认数字宽度。结果视字体而定；字符使用字体设计器指定的设置，不应用任何功能。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:PROPORTIONAL"><apiName>PROPORTIONAL</apiName><shortdesc> 
	用于指定变宽数字宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proportional</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定变宽数字宽度。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:TABULAR"><apiName>TABULAR</apiName><shortdesc> 
	用于指定定宽数字宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指定定宽数字宽度。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:Kerning"><apiName>Kerning</apiName><shortdesc>
Kerning 类是与 ElementFormat.kerning 一起使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Kerning 类是与 <codeph>ElementFormat.kerning</codeph> 一起使用的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/kerning"><linktext>flash.text.engine.ElementFormat.kerning</linktext></link></related-links><apiValue id="flash.text.engine:Kerning:AUTO"><apiName>AUTO</apiName><shortdesc> 
	用于指示仅对适合采用中文版式的字符启用字距调整。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示仅对适合采用中文版式的字符启用字距调整。如果两个字符都不是日文汉字、平假名或片假名，则在这两个字符之间应用字距调整。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:OFF"><apiName>OFF</apiName><shortdesc> 
	用于指示禁用字距调整。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示禁用字距调整。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:ON"><apiName>ON</apiName><shortdesc> 
	用于指示启用字距调整。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	用于指示启用字距调整。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:CFFHinting"><apiName>CFFHinting</apiName><shortdesc>
CFFHinting 类为 FontDescription 类中的 CFF 提示定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
CFFHinting 类为 FontDescription 类中的 CFF 提示定义值。

<p>提示会调整轮廓字体的显示，以便该字体与像素网格对齐。对于小的屏幕尺寸，提示将生成让人易于阅读的清晰文本。
</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:CFFHinting:HORIZONTAL_STEM"><apiName>HORIZONTAL_STEM</apiName><shortdesc>
	使粗水平线适合像素网格以提高可读性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontalStem</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	使粗水平线适合像素网格以提高可读性。此常量用于设置 FontDescription 类的 <codeph>cffHinting</codeph> 属性。使用语法 <codeph>CFFHinting.HORIZONTAL_STEM</codeph>。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:CFFHinting:NONE"><apiName>NONE</apiName><shortdesc> 
	未应用任何提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	未应用任何提示。对像素网格不强制在字型中使用水平线。此常量用于设置 FontDescription 类的 <codeph>cffHinting</codeph> 属性。建议用于动画或大号字的设置。使用语法 <codeph>CFFHinting.NONE</codeph>。
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineMirrorRegion"><apiName>TextLineMirrorRegion</apiName><shortdesc>
 TextLineMirrorRegion 类表示其中的事件镜像到另一个事件分派程序的文本行部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 TextLineMirrorRegion 类表示其中的事件镜像到另一个事件分派程序的文本行部分。
 
 <p>在针对文本行的正常事件分派完成后，如果该文本行有效且事件传播已停止，则将事件重新分派到该文本行的镜像区域。</p>
 
 <p>镜像鼠标事件是一个特例。由于镜像区域并不实际显示对象，因此将为这些区域模拟 <codeph>mouseOver</codeph> 和 <codeph>mouseOut</codeph> 事件。并不模拟 <codeph>rollOver</codeph> 和 <codeph>rollOut</codeph> 事件。忽略所有自然发生的 <codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph> 和 <codeph>rollOut</codeph> 事件（无论这些事件将文本行作为目标还是将文本行的子项作为目标），不会镜像它们。</p>
 
 <p>无法从 ActionScript 代码直接创建 TextLineMirrorRegion 对象。如果调用 <codeph>new TextLineMirrorRegion()</codeph>，则会引发异常。当您向 ContentElement 对象分配事件镜像时将创建 TextLineMirrorRegion。</p>
 
 <p>TextLineMirrorRegion 类是最终类；无法从其派生子类。</p>
 
 </apiDesc><example conref="examples\TextLineMirrorRegionExample.as"> 本示例显示一个带有镜像区域的文本块，当您单击这些镜像区域时，它们会变成红色。
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ContentElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLineMirrorRegion;
    import flash.events.MouseEvent;
    import flash.events.EventDispatcher;
    import flash.ui.Mouse;

    public class TextLineMirrorRegionExample extends Sprite {
        
        var myEvent:EventDispatcher = new EventDispatcher();
        var fontDescription:FontDescription = new FontDescription();
        var textBlock:TextBlock = new TextBlock();

        public function TextLineMirrorRegionExample():void {
            
            fontDescription.fontWeight = "bold";
            var blackFormat:ElementFormat = new ElementFormat();
            blackFormat.fontSize = 18;
            blackFormat.color = 0x000000;
            blackFormat.fontDescription = fontDescription;
            
            var textElement1 = new TextElement("Click on different parts of me to find the ", blackFormat);
            var textElement2 = new TextElement("mirror regions",blackFormat);
            var textElement3 = new TextElement(". If I am a mirror region, I'll ",blackFormat);
            var textElement4 = new TextElement("turn red",blackFormat);
            var textElement5 = new TextElement(".",blackFormat);
            
            myEvent.addEventListener("click", clickHandler);
            myEvent.addEventListener("mouseOut", mouseOutHandler);
            myEvent.addEventListener("mouseOver", mouseOverHandler);
            
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>;
            groupVector.push(textElement1, textElement2, textElement3, textElement4, textElement5);
            var groupElement:GroupElement = new GroupElement(groupVector);
            
            textElement2.eventMirror=myEvent;
            textElement4.eventMirror=myEvent;
            
            textBlock.content = groupElement;
            createLines(textBlock);
        }
    
        private function clickHandler(event:MouseEvent):void
        {
            var redFormat:ElementFormat = new ElementFormat();
            redFormat.color = 0xCC0000;
            redFormat.fontSize = 18;
            redFormat.fontDescription = fontDescription;
            var line:TextLine = event.target as TextLine;
            var region:TextLineMirrorRegion = line.getMirrorRegion(myEvent);
            region.element.elementFormat = redFormat;
            createLines(textBlock);
        }
        
        private function mouseOverHandler(event:MouseEvent):void
        {
            Mouse.cursor = "button";
        }
        
        private function mouseOutHandler(event:MouseEvent):void
        {
            Mouse.cursor = "arrow";
        }
            
        private function createLines(textBlock:TextBlock):void 
        {
            var purgeLine:TextLine = textBlock.firstLine;
                
            while (purgeLine)
            {
                removeChild (purgeLine);
                purgeLine = purgeLine.nextLine;
            }
            var lineWidth:Number = 150;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
                
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/mirrorRegions"><linktext>TextLine.mirrorRegions</linktext></link></related-links><apiValue id="flash.text.engine:TextLineMirrorRegion:bounds:get"><apiName>bounds</apiName><shortdesc>
	 相对文本行的镜像区域范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 相对文本行的镜像区域范围。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:element:get"><apiName>element</apiName><shortdesc>
	 从中派生该镜像区域的 ContentElement 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>此元素所属的 TextLine 无效。
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 从中派生该镜像区域的 <codeph>ContentElement</codeph> 对象。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:mirror:get"><apiName>mirror</apiName><shortdesc>
	 向其镜像影响镜像区域的事件的 EventDispatcher 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 向其镜像影响镜像区域的事件的 <codeph>EventDispatcher</codeph> 对象。这包括专门在镜像区域中发生的鼠标事件和将文本行作为目标的所有其它事件。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:nextRegion:get"><apiName>nextRegion</apiName><shortdesc>
	 集合中从文本元素派生的下一个 TextLineMirrorRegion，如果当前区域是集合中的最后一个镜像区域，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 集合中从文本元素派生的下一个 TextLineMirrorRegion，如果当前区域是集合中的最后一个镜像区域，则为 <codeph>null</codeph>。可以在同一行上，也可以在其它文本行上。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:previousRegion:get"><apiName>previousRegion</apiName><shortdesc>
	 集合中从文本元素派生的上一个 TextLineMirrorRegion，如果当前区域是集合中的第一个镜像区域，则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 集合中从文本元素派生的上一个 TextLineMirrorRegion，如果当前区域是集合中的第一个镜像区域，则为 <codeph>null</codeph>。可以在同一行上，也可以在其它文本行上。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:textLine:get"><apiName>textLine</apiName><shortdesc>
	 包含此镜像区域的 TextLine。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 包含此镜像区域的 TextLine。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LineJustification"><apiName>LineJustification</apiName><shortdesc>
LineJustification 类是在设置 TextJustifier 子类的 lineJustfication 属性时使用的常量值的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
LineJustification 类是在设置 TextJustifier 子类的 <codeph>lineJustfication</codeph> 属性时使用的常量值的枚举。 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/lineJustification"><linktext>EastAsianJustifier.lineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier/lineJustification"><linktext>SpaceJustifier.lineJustification</linktext></link></related-links><apiValue id="flash.text.engine:LineJustification:ALL_BUT_LAST"><apiName>ALL_BUT_LAST</apiName><shortdesc> 
	指示文本引擎将最后一行以外的所有行对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allButLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示文本引擎将最后一行以外的所有行对齐。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:ALL_INCLUDING_LAST"><apiName>ALL_INCLUDING_LAST</apiName><shortdesc> 
	指示文本引擎对齐所有行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allIncludingLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示文本引擎对齐所有行。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:UNJUSTIFIED"><apiName>UNJUSTIFIED</apiName><shortdesc> 
	指示文本引擎生成不对齐的行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unjustified</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	指示文本引擎生成不对齐的行。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
 SpaceJustifier 类表示控制文本块中文本行的对齐选项的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 SpaceJustifier 类表示控制文本块中文本行的对齐选项的属性。 
 
 <p> 使用构造函数 <codeph>new SpaceJustifier()</codeph> 创建 SpaceJustifier 对象后才能设置其属性。将 SpaceJustifier 对象应用于 TextBlock 后设置该对象的属性不会使 TextBlock 无效。</p>
 
 </apiDesc><example conref="examples\SpaceJustifierExample.as"> 以下示例将使用字母间距，并将文本块中最后一行以外的所有行对齐。
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.SpaceJustifier;
    import flash.text.engine.LineJustification;
    
    public class SpaceJustifierExample extends Sprite {
        
        public function SpaceJustifierExample():void {
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format);
            var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_BUT_LAST);
            spaceJustifier.letterSpacing = true;
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.textJustifier = spaceJustifier;
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:SpaceJustifier:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
     创建一个 SpaceJustifier 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>locale</codeph> 为 <codeph>null</codeph> 或太短，不能表示有效的区域设置。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>指定的 <codeph>lineJustification</codeph> 不是 <codeph>LineJustification</codeph> 的成员。
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>用于确定对齐规则的区域设置。默认值为 <codeph>"en"</codeph>。
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unjustified</apiData><apiDesc>段落的行对齐类型。将 <codeph>LineJustification</codeph> 常量用于此属性。默认值为 <codeph>LineJustification.UNJUSTIFIED</codeph>。
     </apiDesc></apiParam><apiParam><apiItemName>letterSpacing</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>指定对齐过程中是否使用字母间距。默认值为 <codeph>false</codeph>。
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建一个 SpaceJustifier 对象。LineJustification 类包含用于指定可应用的行对齐类型的常量。
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:SpaceJustifier:clone"><apiName>clone</apiName><shortdesc>
	 构造 SpaceJustifier 的克隆副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>This class is currently stored as a live reference, but there is no way to track when its 
	 properties change.  This means that when changes are made, text blocks are not invalidated, which in 
	 the current implementation can lead to player crashes.  Even from the API perspective its wrong, as 
	 the affected text lines should be marked INVALID when format changes are made, but they�re not. The 
	 solution is to use a copy-on-set model.  When the object is passed in, the player copies it, so later
	 changes to the object that was passed in have no effect. The setter makes an internal copy of the 
	 array; the getter returns a copy of the internal copy. Operations like 
	 myBlock.textJustifier.spaceJustifier.letterSpacing = true will have no effect. Users who subclass 
	 this class in the future will need to use the clone() method to implement this technique of 
	 'locking' the format once it has been set.  
	 
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>SpaceJustifier</codeph> 对象的副本。
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 构造 SpaceJustifier 的克隆副本。
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:SpaceJustifier:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     指定对齐过程中是否使用字母间距。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     指定对齐过程中是否使用字母间距。
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>