<?xml version="1.0"?>
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  Die Range-Klasse nimmt einen Wert und einen zulässigen Bereich für diesen Wert auf, der durch die minimum- und maximum-Eigenschaften definiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Range-Klasse nimmt einen Wert und einen zulässigen Bereich für diesen Wert auf, der durch die <codeph>minimum</codeph>- und <codeph>maximum</codeph>-Eigenschaften definiert wird. Die <codeph>value</codeph>-Eigenschaft muss immer zwischen der aktuellen <codeph>minimum</codeph>- und <codeph>maximum</codeph>-Eigenschaft liegen und die <codeph>minimum</codeph>- und die <codeph>maximum</codeph>-Eigenschaft müssen immer einen korrekten numerischen Wert aufweisen, sodass <codeph>(minimum &lt;= Wert &lt;= maximum)</codeph> auf <codeph>true</codeph> eingestellt ist. Wenn der Wert der <codeph>snapInterval</codeph>-Eigenschaft nicht 0 ist, muss die <codeph>value</codeph>-Eigenschaft ebenfalls ein Vielfaches von <codeph>snapInterval</codeph> sein.
 
  <p>Die Range-Klasse ist eine Basisklasse für verschiedene Steuerelemente, für die Bereichsfunktionalität erforderlich ist, einschließlich TrackBase und Spinner.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Erhöht oder senkt „value“ um stepSize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn der Wert „true“ ist, wird <codeph>stepSize</codeph> zu <codeph>value</codeph> addiert, sonst wird dies subtrahiert. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erhöht oder senkt <codeph>value</codeph><codeph> um stepSize</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Der gültige Wert, der am nächsten zur Eingabe ist.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Der Eingabewert.
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>Der Wert von snapInterval oder ein Ganzzahlvielfaches von snapInterval.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph/><codeph/><codeph/>
     
      <p>Wenn <codeph>interval</codeph> gleich 0 ist, wird der Wert auf die Mindest- und Höchstwerte gekürzt.</p>
     
      <p><codeph/><codeph/><codeph/> <codeph/></p>
     
      <p>Wenn beispielsweise <codeph>minimum</codeph> gleich 1, <codeph>maximum</codeph> gleich 6 und <codeph>snapInterval</codeph> gleich 3 ist, sind die gültigen Werte für den Bereich 1, 2, 5 und 6. Ebenso gilt: Wenn <codeph>minimum</codeph> gleich 2, <codeph>maximum</codeph> gleich 9 und <codeph>snapInterval</codeph> gleich 1,5 ist, sind die gültigen Werte für den Bereich 2, 3.5, 5, 6.5, 8 und 9.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Definiert den zugrunde liegenden Speicher für die value-Eigenschaft und löst ein valueCommit-Ereignis aus, wenn die Eigenschaft sich ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>value</codeph>-Eigenschaft.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Definiert den zugrunde liegenden Speicher für die <codeph>value</codeph>-Eigenschaft und löst ein <codeph>valueCommit</codeph>-Ereignis aus, wenn die Eigenschaft sich ändert.  
     
      <p>Alle Aktualisierungen der <codeph>value</codeph>-Eigenschaft führen zu einem Aufruf dieser Methode.</p>
     
      <p>Diese Methode geht davon aus, dass der Aufrufer bereits die <codeph>nearestValidValue()</codeph> -Methode zum Beschränken des value-Parameters verwendet hat.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      Der gültige Höchstwert („value“).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      Der gültige Höchstwert (<codeph>value</codeph>).
     
      <p>Änderungen an der value-Eigenschaft sind von <codeph>commitProperties()</codeph> beschränkt auf kleiner oder gleich dem Höchstwert bei der nearestValidValue()-Methode.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      Der gültige Mindestwert („value“).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der gültige Mindestwert (<codeph>value</codeph>).
     
      <p>Änderungen an der value-Eigenschaft sind von <codeph>commitProperties()</codeph> beschränkt auf größer oder gleich dem Mindestwert bei der nearestValidValue()-Methode. </p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      
      
      <p>Wenn der Wert dieser Eigenschaft null ist, müssen die gültigen Werte zwischen dem Mindest- und Höchstwert (einschließlich) liegen.</p>
     
      <p> </p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      Um wie viel sich die value-Eigenschaft ändert, wenn die changeValueByStep()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Um wie viel sich die <codeph>value</codeph>-Eigenschaft ändert, wenn die <codeph>changeValueByStep()</codeph>-Methode aufgerufen wird. Es muss sich um ein Mehrfaches von <codeph>snapInterval</codeph>, handeln, es sei denn <codeph>snapInterval</codeph> ist 0. Wenn <codeph>stepSize</codeph> kein Mehrfaches ist, wird es auf das nächste Mehrfache gerundet, das größer oder gleich <codeph>snapInterval</codeph> ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      Der gültige Wert für diesen Bereich.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der gültige Wert für diesen Bereich.
      
      <p>Änderungen an der value-Eigenschaft sind von <codeph>commitProperties()</codeph> beschränkt auf größer oder gleich der <codeph>minimum</codeph>-Eigenschaft, kleiner oder gleich der <codeph>maximum</codeph>-Eigenschaft und ein Vielfaches von <codeph>snapInterval</codeph> bei der <codeph>nearestValidValue()</codeph>-Methode.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  Basisklasse für skinfähige Containerkomponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Disabled-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Normal-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Basisklasse für skinfähige Containerkomponenten.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der den Namen des auf die Skin anzuwendenden Status angibt.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist. Eine Schaltflächenkomponente kann beispielsweise den String „Up“, „Down“, „Over“ oder „Disabled“ zurückgeben, um den Status anzugeben.
     
      <p>Eine Unterklasse der SkinnableComponent-Klasse muss diese Methode überschreiben, um einen Wert zurückzugeben.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist. Wenn Steuerelementen im Container der Fokus zugewiesen ist, entspricht das Drücken der Eingabetaste dem Klicken auf das Button-Steuerelement.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext/></link><link href="spark.components.xml#DataGroup/overlay"><linktext/></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  Die ToggleButtonBase-Komponente entspricht der Basisklasse für die Spark-Button-Komponenten, die die selected-Eigenschaft unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Disabled-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Down-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Over-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Up-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ToggleButtonBase-Komponente entspricht der Basisklasse für die Spark-Button-Komponenten, die die <codeph>selected</codeph>-Eigenschaft unterstützen. „ToggleButton“, „CheckBox“ und „RadioButton“ sind Unterklassen der ToggleButtonBase-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.ToggleButton.xml"><linktext>mx.components.ToggleButton</linktext></link><link href="" invalidHref="mx.components.CheckBox.xml"><linktext>mx.components.CheckBox</linktext></link><link href="" invalidHref="mx.components.RadioButton.xml"><linktext>mx.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich die selected-Eigenschaft für das ToggleButtonBase-Steuerelement ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>selected</codeph>-Eigenschaft für das ToggleButtonBase-Steuerelement ändert. Dieses Ereignis wird nur ausgelöst, wenn der Benutzer mithilfe der Maus mit dem Steuerelement interagiert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      „true“, wenn für die Schaltfläche der Down-Status aktiviert ist, und „false“, wenn der Up-Status aktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>true</codeph>, wenn für die Schaltfläche der Down-Status aktiviert ist, und <codeph>false</codeph>, wenn der Up-Status aktiviert ist.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  Die ItemRenderer-Klasse ist die Basisklasse für Spark-Elementrenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ItemRenderer-Klasse ist die Basisklasse für Spark-Elementrenderer.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      Gibt den Namen des Status zurück, der auf den Renderer anzuwenden ist</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein String, der den Namen des auf den Renderer anzuwendenden Status angibt. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Namen des Status zurück, der auf die Renderer anzuwenden ist Beispielsweise würde ein sehr einfacher Listenelementrenderer den String „normal“, „hovered“ oder „selected“ zurückgeben, um den Status des Renderers anzugeben. 
     
      <p>Eine Unterklasse von ItemRenderer muss diese Methode überschreiben, um einen Wert zurückzugeben, wenn das gewünschte Verhalten vom Standardverhalten abweicht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Optionale Elementrenderer-Beschriftungskomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      Optionale Elementrenderer-Beschriftungskomponente. Mit dieser Komponente wird der Wert der <codeph>baselinePosition</codeph>-Eigenschaft in der Hostkomponente des Elementrenderers bestimmt. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
     
      <p><codeph/><codeph/><codeph/><codeph/><codeph/></p>
     
      <p><codeph/> </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      <codeph/>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     </apiDefaultValue></apiValueDef><apiDesc>
      
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      Der String, der im Elementrenderer anzuzeigen ist.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Der String, der im Elementrenderer anzuzeigen ist. 
           <p>Die Hostkomponente des Elementrenderers kann mithilfe der <codeph>itemToLabel()</codeph>-Methode das Datenelement in einen String konvertieren, der vom Elementrenderer angezeigt wird. </p>
     
      <p>Für Steuerelemente wie „List“ und „ButtonBar“ können Sie mithilfe der Eigenschaften <codeph>labelField</codeph> und <codeph>labelFunction</codeph> das Feld des Datenelements angeben, das den String enthält. Andernfalls verwendet die Hostkomponente die <codeph>toString()</codeph>-Methode, um das Datenelement in einen String zu konvertieren. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      Enthält „true“, wenn der Elementrenderer sich selbst als ausgewählt anzeigen kann.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn der Elementrenderer sich selbst als ausgewählt anzeigen kann.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Enthält „true“, wenn der Elementrenderer im Fokus dargestellt werden kann.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn der Elementrenderer im Fokus dargestellt werden kann. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBar"><apiName>ScrollBar</apiName><shortdesc>
  Mithilfe der ScrollBar-Klasse können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese nicht in den Anzeigebereich passen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Boolean">
<description>
 Dieser Stil bestimmt, ob die Bildlaufleiste beim Paging und beim Durchlaufen nahtlos animiert wird. Bei „false“ wird bei page- und step-Vorgängen direkt an die paged-/stepped-Position gesprungen. Bei „true“ werden die Bildlaufleiste und der Inhalt, der durchlaufen wird, bis zu dieser Position animiert.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Number">
<description>
  Zeit in Millisekunden zwischen den page-Ereignissen, wenn der Benutzer mit der Maustaste auf die Leiste klickt und die Maustaste gedrückt hält.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Number">
<description>
  Anzahl der Millisekunden nach dem ersten Seitenereignis bis zu den nächsten Seitenereignissen.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Boolean">
<description>
  Bei „true“ (Standardeinstellung) wird die Sichtbarkeit der Schiebeleiste zurückgesetzt, wenn die Größe aktualisiert wird. Durch Überschreibungen von <codeph>sizeThumb()</codeph> in <codeph>HScrollBar</codeph> und <codeph>VScrollBar</codeph> wird der Schieberegler sichtbar, wenn er kleiner ist als die Leiste, es sei denn dieser Stil hat den Wert „false“. Setzt diesen Stil auf „false“, um die Sichtbarkeit des Schiebereglers direkt zu steuern.  
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Boolean">
<description>
  Bei „true“ weist das Bildlauffeld entlang der Achse der Bildlaufleiste die bevorzugte Größe auf.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10">
<description>
  Der inaktive Status. Dies ist der Status, wenn kein Inhalt für den Bildlauf vorhanden ist. Das bedeutet: <codeph>maximum</codeph> &lt;= <codeph>minimum</codeph>.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein optionales Skinteil, das eine Schaltfläche definiert, die bei Betätigung die Bildlaufleiste nach oben verschiebt. Dies entspricht dem Verringern der <codeph>value</codeph>-Eigenschaft.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein optionales Skinteil, das eine Schaltfläche definiert, die bei Betätigung die Bildlaufleiste nach unten verschiebt. Dies entspricht dem Erhöhen der <codeph>value</codeph>-Eigenschaft.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ScrollBar
    <strong>Properties</strong>
    pageSize="20"
    snapInterval=""
    viewport="null"
 
    <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor=""
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe der ScrollBar-Klasse können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese nicht in den Anzeigebereich passen. Die ScrollBar-Klasse zeigt ein Bildlaufleistenpaar und einen Viewport an. Ein Viewport entspricht einer UI-Komponente (z. B. „Group“), die IViewport implementiert.
  
  <p>Dieses Steuerelement erweitert die TrackBase-Klasse und entspricht der Basisklasse für die Steuerelemente „HScrollBar“ und „VScrollBar“.</p> 
 
  <p>Eine Bildlaufleiste besteht aus einer Leiste, einem Bildlauffeld variabler Größe und zwei optionalen Pfeilschaltflächen. Die ScrollBar-Klasse verwendet vier Parameter, um den Anzeigestatus zu berechnen:</p>
 
  <ul>
    <li><codeph>minimum</codeph>: Der minimale Wert innerhalb des Bereichs.</li>
    <li><codeph>maximum</codeph>: Der maximale Wert innerhalb des Bereichs.</li>
    <li><codeph>value</codeph>: Aktuelle Position, die zwischen dem minimalen und dem maximalen Wert des Bereichs liegen muss.</li>
    <li>Anzeigengröße: Stellt die Anzahl der Elemente im Bereich dar, die gleichzeitig angezeigt werden können. Die Anzahl der Elemente muss entweder gleich oder kleiner sein als der Bereich und der Bereich ist der Satz an Werten, die zwischen dem minimalen und dem maximalen Wert liegen.</li>
  </ul>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBar:ScrollBar"><apiName>ScrollBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBar:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     Animiert den Vorgang der Bewegung zu newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>Der endgültige Wert, bis zu dem die Bewegung erfolgt.
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>Um wie viel eine horizontale oder vertikale Verschiebung erforderlich ist. Dieser Wert wird verwendet, um mit dem <codeph>repeatInterval</codeph>-Stil die gesamte für das Verschieben bis zum neuen Wert benötigte Zeit zu berechnen. <codeph>pageSize</codeph> wird normalerweise von der Bildlaufleiste dynamisch auf den erforderlichen Wert festgelegt, damit Inhalte an einer logischen Inhaltsgrenze angezeigt werden können.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Animiert den Vorgang zum Verschieben auf <codeph>newValue</codeph>. Der <codeph>pageSize</codeph>-Parameter wird verwendet, um die zum Abrufen des Werts erforderliche Zeit zu berechnen. Die Zeit zum Animieren eines Pagingvorgangs entspricht ungefähr der der nicht animierten Version. Beide Vorgänge enden üblicherweise an der gleichen Position und zur gleichen Zeit.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     Animiert den Vorgang für den Durchlauf zu newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>Der endgültige Wert, bis zu dem der Durchlauf erfolgt.
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>Der Umfang des Durchlaufs. Dieser Wert wird verwendet, um mit dem <codeph>repeatInterval</codeph>-Stil die Gesamtzeit für den Durchlauf zum neuen Wert zu berechnen. <codeph>stepSize</codeph> wird normalerweise von der Bildlaufleiste dynamisch auf den erforderlichen Wert festgelegt, damit Inhalte an einer logischen Inhaltsgrenze angezeigt werden können.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Animiert den Vorgang für den Durchlauf zum <codeph>newValue</codeph>. Der <codeph>stepSize</codeph>-Parameter wird verwendet, um die zum Abrufen des Werts erforderliche Zeit zu berechnen. Die Zeit zum Animieren eines Durchlaufvorgangs entspricht ungefähr der der nicht animierten Version. Beide Vorgänge enden üblicherweise an der gleichen Position und zur gleichen Zeit.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      Verarbeitet ein Klicken auf die Schaltfläche zum Inkrementieren oder Dekrementieren auf der Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      Verarbeitet ein Klicken auf die Schaltfläche zum Inkrementieren oder Dekrementieren auf der Bildlaufleiste. Dies sollte zu einem Durchlaufvorgang führen, der wiederholt wird, wenn die Maustaste gedrückt gehalten wird. Die Verzögerung bis zur Wiederholung des Vorgangs und die Verzögerung zwischen wiederholten Ereignissen werden durch die Stile <codeph>repeatDelay</codeph> und <codeph>repeatInterval</codeph> der zugrunde liegenden Button-Objekte bestimmt.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      Verarbeitet ein Loslassen der Schaltfläche zum Inkrementieren oder Dekrementieren der Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      Verarbeitet ein Loslassen der Schaltfläche zum Inkrementieren oder Dekrementieren der Bildlaufleiste. Dies beendet den Durchlaufvorgang, der durch das ursprüngliche Button-Down-Ereignis auf die Schaltfläche gestartet wurde.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Addiert bzw. subtrahiert „pageSize“ zu bzw. von „value“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ob die paging-Aktion die <codeph>value</codeph>-Eigenschaft erhöht (<codeph>true</codeph>) bzw. verringert (<codeph>false</codeph>). 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Addiert bzw. subtrahiert <codeph>pageSize</codeph> zu bzw. von <codeph>value</codeph>. Bei einer Addition ist der neue Wert (<codeph>value</codeph>) das nächste Mehrfache von <codeph>pageSize</codeph>, das größer ist als der aktuelle Wert (<codeph>value</codeph>). Bei einer Subtraktion ist der neue Wert (<codeph>value</codeph>) das nächste Mehrfache von <codeph>pageSize</codeph>, das kleiner ist als der aktuelle Wert. Der minimale Wert von <codeph>value</codeph> lautet <codeph>pageSize</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBar:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      Die Änderung im Wert der value-Eigenschaft, wenn Sie die changeValueByPage()-Methode aufrufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Änderung im Wert der <codeph>value</codeph>-Eigenschaft, wenn Sie die <codeph>changeValueByPage()</codeph>-Methode aufrufen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBar:viewport:get"><apiName>viewport</apiName><shortdesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird. Wenn ein Viewport angegeben ist, werden durch Änderungen an der zugehörigen tatsächlichen Größe, Inhaltsgröße und Bildlaufposition die entsprechenden ScrollBar-Methoden ausgeführt:
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>Die VScrollBar- und HScrollBar-Klassen überschreiben diese Methoden, damit die zugehörigen <codeph>pageSize</codeph>-, <codeph>maximum</codeph>- und <codeph>value</codeph>-Eigenschaften synchron zum Viewport sind. In ähnlicher Weise werden die zugehörigen <codeph>changeValueByPage()</codeph>- und <codeph>changeValueByStep()</codeph>-Methoden überschrieben, um die <codeph>scrollPositionDelta</codeph>-Methoden des Viewports zum Berechnen der Offsets für Auslagerung und Durchlauf zu berechnen.</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBar:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      
      
      <p>Wenn der Wert dieser Eigenschaft null ist, müssen die gültigen Werte zwischen dem Mindest- und Höchstwert (einschließlich) liegen.</p>
     
      <p> </p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  Die GroupBase-Klasse definiert die Basisklasse für Komponenten, die visuelle Elemente anzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe eines beliebigen Symbols einer Komponente. Beispiele sind etwa das Häkchen eines Kontrollkästchens oder der Pfeil auf der Schaltfläche einer Bildlaufleiste..
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  
   
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe des Fokusrings, wenn eine Komponente im Fokus ist.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Alphawert bei deaktiviertem Container.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe der Füllung eines Elementrenderers..
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="baseColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Hauptfarbe für eine Komponente. 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="Array">
<description>
  Die Farben, die für die Hintergründe der Elemente in der Liste zu verwenden sind. Der Wert ist ein Array von zwei oder mehr Farben. Die Hintergründe der Listenelemente wechseln sich unter den Farben im Array ab. 
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
     
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die GroupBase-Klasse definiert die Basisklasse für Komponenten, die visuelle Elemente anzeigen. Eine Gruppenkomponente steuert nicht das Layout der visuellen Elemente, die sie enthält. Stattdessen wird das Layout durch eine separate Layoutkomponente verarbeitet.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Nimmt folgende Werte an: 
      <ul>
      <li> 
      <codeph>END</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect rechtsbündig am Inhaltsbereich ausrichtet.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect linksbündig am Inhaltsbereich ausrichtet.
      </li>
     
      <li> 
      <codeph>LEFT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element linksbündig ausrichtet, das sich entweder über die linke Kante des scrollRect erstreckt oder sich links davon befindet.
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element rechtsbündig ausrichtet, das sich entweder über die linke Kante des scrollRect erstreckt oder sich links davon befindet.
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element linksbündig ausrichtet, das sich entweder über die rechte Kante des scrollRect erstreckt oder sich rechts davon befindet.
      </li>
     
      <li> 
      <codeph>RIGHT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element rechtsbündig ausrichtet, das sich entweder über die rechte Kante des scrollRect erstreckt oder sich rechts davon befindet.
      </li>
           </ul>
     
      Die Implementierung ruft <codeph>getElementBoundsLeftOfScrollRect()</codeph> und <codeph>getElementBoundsRightOfScrollRect()</codeph> auf, um die Grenzen der Elemente zu bestimmen. Layoutklassen überschreiben diese Methoden normalerweise anstelle von getHorizontalScrollPositionDelta(). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Nimmt folgende Werte an: 
      <ul>
      <li> 
      <codeph>DOWN</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element unten bündig ausrichtet, das sich entweder über die Unterkante des scrollRect erstreckt oder sich unterhalb davon befindet.
      </li>
     
      <li> 
      <codeph>END</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect unten bündig am Inhaltsbereich ausrichtet.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect oben bündig am Inhaltsbereich ausrichtet.
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element oben bündig ausrichtet, das sich entweder über die Unterkante des scrollRect erstreckt oder sich unterhalb davon befindet.
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element unten bündig ausrichtet, das sich entweder über die Oberkante des scrollRect erstreckt oder sich oberhalb davon befindet.
      </li>
     
      <li> 
      <codeph>UP</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element oben bündig ausrichtet, das sich entweder über die Oberkante des scrollRect erstreckt oder sich oberhalb davon befindet.
      </li>
           </ul>
     
      Die Implementierung ruft <codeph>getElementBoundsAboveScrollRect()</codeph> und <codeph>getElementBoundsBelowScrollRect()</codeph> auf, um die Grenzen der Elemente zu bestimmen. Layoutklassen überschreiben diese Methoden normalerweise anstelle von getVerticalScrollPositionDelta(). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      Layouts, die das useVirtualLayout-Flag berücksichtigen, verwenden diese Methode zur updateDisplayList()-Zeit, um Layoutelemente abzurufen, die sich „in der Ansicht“ befinden. Das heißt:</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die validierten Elemente mit der angegebenen Indexposition.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des abzurufenden Elements.
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Wenn angegeben: die anfängliche Breite des neu erstellten oder recycelten Elements
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Wenn angegeben: die anfängliche Höhe des neu erstellten oder recycelten Elements
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Layouts, die das <codeph>useVirtualLayout</codeph>-Flag berücksichtigen, rufen zur updateDisplayList()-Zeit mithilfe dieser Methode Layoutelemente ab, die sich „in der Ansicht“ befinden, d. h. sich mit der scrollRect der Gruppe überlappen.
     
      <p>Wenn das zurückzugebende Element nicht bereits ein sichtbares untergeordnetes Element war, d. h., wenn es erstellt oder recycelt wurde, und entweder eltWidth oder eltHeight angegeben wird, wird die anfängliche Größe des Elements vor der Überprüfung mit setLayoutBoundsSize() festgelegt. Dies ist für Komponenten wie Text wichtig, die nach Anpassung des Layouts an die Breite oder Höhe der Gruppe neu umbrochen werden.</p>
      
      <p>Das zurückgegebene Layoutelement ist validiert.</p>
     
      <p>Mit dieser Methode werden Layoutelemente bei Bedarf erstellt oder „recycelt“ und validiert. </p>
     
      <p>Diese Methode kann nicht direkt aufgerufen werden, sondern wird von Layouts aufgerufen, die die Virtualisierung unterstützen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      Definiert die Eigenschaften „contentWidth“ und „contentHeight“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>contentWidth</codeph>-Eigenschaft.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>contentHeight</codeph>-Eigenschaft.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Definiert die Eigenschaften <codeph>contentWidth</codeph> und <codeph>contentHeight</codeph>. Diese Methode wurde für Entwickler von Layoutklassen konzipiert, die sie über die <codeph>updateDisplayList()</codeph>-Methoden aufrufen sollten.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      Bei „true“ werden Maße und Layout erstellt, wenn die Position oder Größe eines untergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, werden Messung und Layout durchgeführt, wenn die Position oder die Größe eines untergeordneten Elements geändert wird. Bei <codeph>false</codeph> werden Maße und Layout nur einmal erstellt, wenn untergeordnete Elemente zum Container hinzugefügt bzw. daraus entfernt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      Das Layoutobjekt für diesen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Layoutobjekt für diesen Container. Dieses Objekt ist verantwortlich für die Maße und das Layout der visuellen Elemente im Container.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.LayoutBase.xml"><linktext>LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
         
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext/></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
         
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      Definiert die Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Definiert die Maske. Die Maske wird zur Anzeigeliste hinzugefügt. Die Maske darf sich nicht bereits in einer Anzeigeliste oder im Elementearray befinden.  
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      Der Maskentyp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>Der Maskentyp. <codeph/><codeph/><codeph/></p> 
     
      <p>Schnittmasken</p>
     
      <p>Beim Maskieren im Schnittmodus wird die Schnittmaske auf 1 Bit reduziert. Das bedeutet, dass die Maske die Deckkraft eines Pixels des Quellinhalts nicht beeinflusst. Entweder bleibt der Wert unverändert, wenn das entsprechende Pixel der Maske einen Alphawert ungleich null hat, oder es wird voll transparent, wenn der Wert des Maskenpixels einen Alphawert von null hat.</p>
     
      <p>Alphamasken</p>
     
      <p>Im Alphamodus wird die Deckkraft eines jeden Pixels des Quellinhalts mit der Deckkraft des entsprechenden Bereichs der Maske multipliziert. D. h., ein Pixel des Quellinhalts mit einer Deckkraft von 1, das mit einem Bereich mit der Deckkraft 5 maskiert ist, hat im Ergebnis eine Deckkraft von 5. Ein Quellpixel mit einer Deckkraft von 0,8, das mit einem Bereich mit der Deckkraft 0,5 maskiert ist, hat im Ergebnis eine Deckkraft von 0,4.</p>
     
      <p/>
     
      <p/>
     
      <p> </p>
     
      <p> </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      Wenn das mouseOpaque-Flag auf „true“ eingestellt ist, stellt es sicher, dass die gesamten Grenzen der Gruppe für alle Mausereignisse wie Klicks und Rollover undurchsichtig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn das mouseOpaque-Flag auf „true“ eingestellt ist, stellt es sicher, dass die gesamten Grenzen der Gruppe für alle Mausereignisse wie Klicks und Rollover undurchsichtig sind.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
        
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      Der ResizeMode für diesen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der ResizeMode für diesen Container. Wenn für den Modus zum Ändern der Größe <codeph>ResizeMode.NOSCALE</codeph> festgelegt ist, erfolgt die Größenänderung durch das Erstellen des Layouts der untergeordneten Elemente mit der neuen Breite und Höhe. Wenn der Modus zum Ändern der Größe auf <codeph>ResizeMode.SCALE</codeph> eingestellt ist, behalten alle untergeordneten Elemente ihre nicht skalierte Breite und Höhe bei und alle untergeordneten Elemente werden skaliert, um die Größe zu ändern.
     
     <p>Der Standardwert ist <codeph>ResizeMode.NOSCALE</codeph>, entsprechend „noScale“.</p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  Die SkinnableComponent-Klasse definiert die Basisklasse für skinfähige Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><Exclude kind="style" name="errorColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Der Name der Skinklasse, die für diese Komponente zu verwenden ist. Die Skin muss eine Klasse sein, die UIComponent erweitert. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Der Name der Skinklasse, die für diese Komponente verwendet werden soll, wenn ein Überprüfungsfehler auftritt. 
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="baseColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:baseColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SkinnableComponent-Klasse definiert die Basisklasse für skinfähige Komponenten. Die Skins, die von einer SkinnableComponent-Klasse verwendet werden, sind normalerweise untergeordnete Klassen der Skin-Klasse.
 
  <p>Verknüpfen Sie eine Skinklasse mit einer Komponentenklasse, indem Sie die <codeph>skinClass</codeph>-Stileigenschaft der Komponentenklasse einstellen. Sie können die <codeph>skinClass</codeph>-Eigenschaft in CSS einstellen, wie im folgenden Beispiel gezeigt:</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>Im folgenden Beispiel wird die <codeph>skinClass</codeph>-Eigenschaft in MXML eingestellt:</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      Erstellt die Skin für die Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt die Skin für die Komponente. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn die <codeph>createChildren()</codeph>- oder die <codeph>UIComponent.commitProperties()</codeph>-Methode aufgerufen wird. Eine Unterklasse der SkinnableComponent-Klasse überschreibt diese Methode normalerweise nicht.
     
      <p>Diese Methode instanziiert die Skin für die Komponente, fügt die Skin als untergeordnete Komponente der Komponente hinzu und löst alle Teilezuordnungen für die Skin auf</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      Löscht Verweise auf Skinteile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Löscht Verweise auf Skinteile. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn die <codeph>detachSkin()</codeph>-Methode aufgerufen wird.
     
      <p>Unterklassen der SkinnableComponent-Klasse überschreiben diese Methode normalerweise nicht.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      Erstellt eine Instanz eines dynamischen Skinteils.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Instanz des Teils oder null, wenn das Teil nicht erstellt werden kann.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt eine Instanz eines dynamischen Skinteils. Dynamische Skinteile sollten immer von dieser Methode instanziiert werden, statt direkt durch Aufrufen der <codeph>newInstance()</codeph>-Methode in dieser Factory. Diese Methode erstellt das Teil, fügt es jedoch nicht zur Anzeigeliste hinzu. Die Komponente muss die <codeph>Group.addElement()</codeph>-Methode oder die entsprechende Methode aufrufen, um das Skinteil zur Anzeigeliste hinzuzufügen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      Vernichtet und entfernt die Skin für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Vernichtet und entfernt die Skin für diese Komponente. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn eine Skin zur Laufzeit geändert wird. Diese Methode entfernt die Skin und löst alle Teilezuordnungen auf.
     
      <p>Unterklassen der SkinnableComponent-Klasse überschreiben diese Methode normalerweise nicht.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      Suchen Sie die Skinteile in der Skinklasse und weisen Sie sie den Eigenschaften der Komponente zu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Suchen Sie die Skinteile in der Skinklasse und weisen Sie sie den Eigenschaften der Komponente zu. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn die <codeph>attachSkin()</codeph>-Methode aufgerufen wird. Eine Unterklasse der SkinnableComponent-Klasse überschreibt diese Methode normalerweise nicht.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein String, der den Namen des auf die Skin anzuwendenden Status angibt.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist. Eine Schaltflächenkomponente kann beispielsweise den String „Up“, „Down“, „Over“ oder „Disabled“ zurückgeben, um den Status anzugeben.
     
      <p>Eine Unterklasse der SkinnableComponent-Klasse muss diese Methode überschreiben, um einen Wert zurückzugeben.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      Gibt eine bestimmte Instanz eines dynamischen Teils zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Instanz des Teils oder null, wenn das Teil nicht existiert.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des dynamischen Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des dynamischen Teils.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt eine bestimmte Instanz eines dynamischen Teils zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      Markiert die Komponente so, dass der neue Status der Skin während einer späteren Bildschirmaktualisierung eingestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Markiert die Komponente so, dass der neue Status der Skin während einer späteren Bildschirmaktualisierung eingestellt wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      Gibt die Anzahl der Instanzen eines dynamischen Teils zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Anzahl der Instanzen des dynamischen Teils.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des dynamischen Teils.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Anzahl der Instanzen eines dynamischen Teils zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      Wird aufgerufen, wenn ein Skinteil hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Das Teil.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Skinteil hinzugefügt wird. Sie können diese Methode nicht direkt aufrufen. Für statische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>attachSkin()</codeph>-Methode aufgerufen wird. Für dynamische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>createDynamicPartInstance()</codeph>-Methode aufgerufen wird. 
     
      <p>Überschreiben Sie diese Funktion, um dem Teil ein bestimmtes Verhalten zuzuweisen. Wenn Sie das Verhalten in Bezug auf ein Skinteil überschreiben möchten, das von einer Basisklasse vererbt wurde, stellen Sie sicher, dass Sie nicht die <codeph>super.partAdded()</codeph>-Methode aufrufen. Andernfalls sollten Sie immer die <codeph>super.partAdded()</codeph>-Methode aufrufen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      Wird aufgerufen, wenn eine Instanz eines Skinteils entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Das Teil.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn eine Instanz eines Skinteils entfernt wird. Sie können diese Methode nicht direkt aufrufen. Für statische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>detachSkin()</codeph>-Methode aufgerufen wird. Für dynamische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>removeDynamicPartInstance()</codeph>-Methode aufgerufen wird. 
     
      <p>Überschreiben Sie diese Funktion, um das Verhalten vom Teil zu entfernen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      Entfernen Sie eine Instanz eines dynamischen Teils.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Das Teil.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernen Sie eine Instanz eines dynamischen Teils. Sie müssen diese Methode aufrufen, bevor ein dynamisches Teil gelöscht wird. Mit dieser Methode wird das Teil jedoch nicht aus der Anzeigeliste entfernt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Der Status, der beim Zuordnen von CSS-Pseudoselektoren zu verwenden ist.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Status, der beim Zuordnen von CSS-Pseudoselektoren zu verwenden ist. Diese Überschreibung gibt den aktuellen Skinstatus und nicht den Komponentenstatus zurück.
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      Die Instanz der Skinklasse für diese Komponenteninstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      Die Instanz der Skinklasse für diese Komponenteninstanz. Dies ist eine schreibgeschützte Eigenschaft, die automatisch eingestellt wird, wenn Flex die <codeph>attachSkin()</codeph>-Methode aufruft.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe des Hintergrunds des gesamten Begrenzungsrechtecks dieser Komponente. Ist der Stil <codeph>undefined</codeph>, wird kein Hintergrund gezeichnet. Andernfalls wird diese RGB-Farbe mit einer durch den <codeph>backgroundAlpha</codeph>-Stil bestimmten Alphaebene gezeichnet.
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  Die Alphaebene der Farbe, die durch den <codeph>backgroundColor</codeph>-Stil festgelegt wird. Die zulässigen Werte liegen zwischen 0,0 und 1,0.
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  <p><codeph/><codeph/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  Eine schreibgeschützte Eigenschaft, die angibt, ob der Text gekürzt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Eine schreibgeschützte Eigenschaft, die angibt, ob der Text gekürzt wurde.
	 
	  <p>Beim Kürzen von Text wird überlanger Text durch Kürzungszeichen ersetzt, wie z. B. „...“. Das verwendete Kürzungszeichen ist regionsabhängig. Es wird mit der „truncationIndicator“-Ressource in der „core“-Ressourcengruppe angegeben.</p>
	 
      <p>Wenn <codeph>maxDisplayedLines</codeph> 0 ist, tritt keine Kürzung auf. Stattdessen wird der Text einfach gekürzt, wenn er nicht in die Grenzen der Komponente passt.</p>
     
      <p>Wenn <codeph>maxDisplayedLines</codeph> eine positive Ganzzahl ist, wird falls erforderlich der Text gekürzt, um die Anzahl der Zeilen auf diese Ganzzahl zu reduzieren.</p>
     
      <p>Wenn <codeph>maxDisplayedLines</codeph> -1 ist, wird der Text so gekürzt, dass so viele Zeilen angezeigt werden, wie vollständig in die Höhe der Komponente passen.</p>
     
      <p>Es wird nur dann eine Kürzung ausgeführt, wenn der <codeph>lineBreak</codeph>-Stil <codeph>„toFit“</codeph> ist. Der Wert dieser Eigenschaft wird ignoriert, wenn <codeph>lineBreak</codeph> <codeph>„explicit“</codeph> ist.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      Eine Ganzzahl, die bestimmt, ob und wo der Text gekürzt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Ganzzahl, die bestimmt, ob und wo der Text gekürzt wird.
	 
	  <p>Beim Kürzen von Text wird überlanger Text durch Kürzungszeichen ersetzt, wie z. B. "...". Das verwendete Kürzungszeichen ist regionsabhängig. Es wird mit der „truncationIndicator“-Ressource in der „core“-Ressourcengruppe angegeben.</p>
     
      <p>Wenn der Wert 0 ist, erfolgt keine Kürzung. Stattdessen wird der Text einfach gekürzt, wenn er nicht in die Grenzen der Komponente passt.</p>
     
      <p>Wenn der Wert eine positive Ganzzahl ist, wird falls erforderlich der Text gekürzt, um die Anzahl der Zeilen auf diese Ganzzahl zu reduzieren.</p>
     
      <p>Wenn der Wert -1 ist, wird der Text so gekürzt, dass so viele Zeilen angezeigt werden, wie vollständig in die Höhe der Komponente passen.</p>
     
      <p>Es wird nur dann eine Kürzung ausgeführt, wenn der <codeph>lineBreak</codeph>-Stil <codeph>"toFit"</codeph> ist. Der Wert dieser Eigenschaft wird ignoriert, wenn <codeph>lineBreak</codeph> <codeph>"explicit"</codeph> ist.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      Der von dieser Textkomponente angezeigte Text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der von dieser Textkomponente angezeigte Text.
	 
      <p>Die Formatierung dieses Texts wird von CSS-Stilen gesteuert. Die unterstützten Stile richten sich nach der Unterklasse.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  Die ButtonBase-Komponente entspricht der Basisklasse für alle Spark-Button-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Disabled-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Down-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Over-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Up-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Zeit in Millisekunden zwischen den <codeph>buttonDown event</codeph>-Ereignissen, wenn der Benutzer mit der Maustaste auf eine Schaltfläche klickt und die Maustaste gedrückt hält.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Zeit in Millisekunden, die nach dem ersten <codeph>buttonDown</codeph>-Ereignis gewartet werden soll, bevor <codeph>buttonDown</codeph>-Ereignisse bei jedem <codeph>repeatInterval</codeph> wiederholt werden.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Fokusrings für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Radius der Ecken dieser Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      Ein Skinteil, das die Beschriftung der Schaltfläche definiert. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    breakOpportunity="AUTO"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusColor=""
    fontFamily="Times New Roman"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ButtonBase-Komponente entspricht der Basisklasse für alle Spark-Button-Komponenten. „Button“ und „ToggleButtonBase“ sind Unterklassen der ButtonBase-Klasse. „ToggleButton“, „CheckBox“ und „RadioButton“ sind Unterklassen der ToggleButtonBase-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer auf das ButtonBase-Steuerelement klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer auf das ButtonBase-Steuerelement klickt. Ist die Eigenschaft <codeph>autoRepeat</codeph> auf <codeph>true</codeph> gesetzt, wird das Ereignis so lange ausgelöst, wie die Schaltfläche gedrückt bleibt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
        
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Überschreibung in Unterklassen, um das Klickereignis zu verarbeiten, statt eine separate Prozedur hinzuzufügen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      Überschreibung in Unterklassen, um das Klickereignis zu verarbeiten, statt eine separate Prozedur hinzuzufügen. Die clickHandler-Methode wird nicht abgerufen, wenn die Schaltfläche deaktiviert ist. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      Diese Methode verarbeitet die Mausereignisse, ruft ggf. die clickHandler-Methode auf und aktualisiert die hovered- und mouseCaptured-Eigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      Diese Methode verarbeitet die Mausereignisse, ruft ggf. die <codeph>clickHandler</codeph>-Methode auf und aktualisiert die <codeph>hovered</codeph>- und <codeph>mouseCaptured</codeph>-Eigenschaften.
      <p/>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      Gibt an, ob wiederholt buttonDown-Ereignisse ausgelöst werden, wenn der Benutzer die Maustaste gedrückt hält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob wiederholt <codeph>buttonDown</codeph>-Ereignisse ausgelöst werden, wenn der Benutzer die Maustaste gedrückt hält.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      Mit der content-Eigenschaft können Sie ein beliebiges Objekt übergeben, das in einer benutzerdefinierten Skin der Schaltfläche verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Mit der <codeph>content</codeph>-Eigenschaft können Sie ein beliebiges Objekt übergeben, das in einer benutzerdefinierten Skin der Schaltfläche verwendet wird. Wenn eine Skin das optionale Teil <codeph>labelDisplay</codeph> definiert, wird eine Stringdarstellung von <codeph>content</codeph> nach unten auf die <codeph>text</codeph>-Eigenschaft dieses Teils verschoben. Die Standardskin stellt auf diese Weise den <codeph>content</codeph> als Schaltflächenbeschriftung dar.  
     
      <p>Die <codeph>label</codeph>-Eigenschaft ist eine Fassade dieser Eigenschaft vom Typ <codeph>String</codeph>. Diese Eigenschaft ist bindbar. Sie teilt das contentChange-Ereignis mit der <codeph>label</codeph>-Eigenschaft.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>label</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Gibt an, ob sich der Mauszeiger über der Schaltfläche befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob sich der Mauszeiger über der Schaltfläche befindet. Wird verwendet, um den Skinstatus zu bestimmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      Gibt an, ob eine Tastaturtaste gedrückt wird, während die Schaltfläche im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob eine Tastaturtaste gedrückt wird, während die Schaltfläche im Fokus ist. Wird verwendet, um den Skinstatus zu bestimmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      Gibt an, ob eine Maustaste gedrückt wurde, während sich der Mauszeiger über der Schaltfläche befunden hat, als MouseEvent.MOUSE_DOWN zum ersten Mal ausgelöst wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob eine Maustaste gedrückt wurde, während sich der Mauszeiger über der Schaltfläche befunden hat, als MouseEvent.MOUSE_DOWN zum ersten Mal ausgelöst wurde. Wird verwendet, um den Skinstatus zu bestimmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      Bei „false“ zeigt die Schaltfläche ihre Down-Skin an, sobald der Benutzer sie drückt, aber wechselt zur Over-Skin, sobald der Benutzer den Mauszeiger von ihr herunterbewegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>false</codeph> zeigt die Schaltfläche ihre Down-Skin an, sobald der Benutzer sie drückt, aber sie wechselt zur Over-Skin, sobald der Benutzer die Maus von ihr herunterbewegt. Bei <codeph>true</codeph> zeigt die Schaltfläche ihre Down-Skin an, sobald der Benutzer sie drückt. Sie zeigt diese Skin jedoch auch weiterhin an, wenn der Benutzer die Maus von ihr herunterbewegt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      Text, der auf dem ButtonBase-Steuerelement angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      Text, der auf dem ButtonBase-Steuerelement angezeigt werden soll.
     
      <p>Wenn die Beschriftung breiter als das ButtonBase-Steuerelement ist, wird sie gekürzt und endet mit einer Ellipse (...). Die vollständige Beschriftung erscheint als QuickInfo, sobald der Benutzer den Mauszeiger über das Steuerelement bewegt. Wenn Sie mit der <codeph>tooltip</codeph>-Eigenschaft zusätzlich eine QuickInfo festgelegt haben, wird diese anstatt des Beschriftungstexts angezeigt.</p>
     
      <p>Dies ist die standardmäßige ButtonBase-Eigenschaft.</p>
     
      <p>Diese Eigenschaft ist eine Fassade der <codeph>content</codeph>-Eigenschaft vom Typ <codeph>String</codeph>. Diese Eigenschaft ist bindbar. Sie teilt das Auslösen des contentChange-Ereignisses mit der <codeph>content</codeph>-Eigenschaft.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.xml#label/content"><linktext>Inhalt</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
       <codeph/><codeph/><codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext/></link><link href="spark.components.xml#DataGroup/overlay"><linktext/></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Konstruktor. 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc>
          <codeph/> <codeph/>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
           
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
          
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
          <codeph/>
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
           
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  Die TrackBase-Klasse ist eine Basisklasse für Komponenten wie „Slider“ und „ScrollBar“ mit einer Leiste und einem oder mehreren Schiebereglern/Bildlauffeldern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  Dauer in Millisekunden für die Schieberegler-/Bildlauffeldanimation, wenn Sie auf die Leiste klicken, um den Schieberegler/das Bildlauffeld zu verschieben. Dieser Stil wird für Schiebereglerleisten und Bildlaufleisten verwendet. Bei Schiebereglerleisten führt jeder Klick auf die Leiste zu einer Animation mit diesem Stil, während der Schieberegler an die Klickposition verschoben wird. Bei Bildlaufleisten wird dieser Stil nur verwendet, wenn beim Klicken auf die Leiste die Umschalttaste gedrückt gehalten wird, wodurch das Bildlauffeld an die Klickposition verschoben wird. Wird die Umschalttaste beim Klicken nicht gedrückt gehalten, führt dies stattdessen zu Paging-Verhalten. Der <codeph>smoothScrolling</codeph>-Stil muss ebenfalls für die Bildlaufleiste eingestellt sein, damit das Verhalten animiert ist, wenn bei gedrückter Umschalttaste geklickt wird.
  
 <p>Die Animation erstreckt sich über die gesamte Länge der Leiste, für kürzere Strecken wird eine proportional kürzere Dauer verwendet.</p>
   </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Disabled-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Normal-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein Skinteil, das eine Schaltfläche definiert, die entlang der Leiste gezogen werden kann, um die <codeph>value</codeph>-Eigenschaft zu erhöhen bzw. zu verringern. Änderungen an der <codeph>value</codeph>-Eigenschaft aktualisieren automatisch die Position des Bildlauffelds/des Schiebereglers in Bezug auf die Leiste.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein Skinteil, das eine Schaltfläche definiert, die bei Betätigung die <codeph>value</codeph>-Eigenschaft auf einen Wert einstellt, der der aktuellen Position der Schaltfläche auf der Leiste entspricht.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
     <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TrackBase-Klasse ist eine Basisklasse für Komponenten wie „Slider“ und „ScrollBar“ mit einer Leiste und einem oder mehreren Schiebereglern/Bildlauffeldern. Sie deklariert zwei erforderliche Skinteile: <codeph>thumb</codeph> und <codeph>track</codeph>. Die TrackBase-Klasse stellt auch den Code zum Verschieben des Schiebereglers bzw. Bildlauffelds bereit, das von der Slider- und ScrollBar-Klasse gemeinsam verwendet wird.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Slider"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="spark.components.supportClasses.xml#ScrollBar"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.SliderEvent_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  Wird ausgelöst, wenn der Schieberegler bzw. das Bildlauffeld losgelassen wird, also wenn der Benutzer die Maustaste nach einem thumbPress-Ereignis loslässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.SliderEvent</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Schieberegler bzw. das Bildlauffeld losgelassen wird, d. h. wenn der Benutzer die Maustaste nach einem <codeph>thumbPress</codeph>-Ereignis loslässt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.SliderEvent_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  Wird ausgelöst, wenn auf den Schieberegler geklickt wird, d. h. wenn der Benutzer mit der Maustaste auf den Schieberegler klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.SliderEvent</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn auf den Schieberegler geklickt wird, d. h. wenn der Benutzer mit der Maustaste auf den Schieberegler klickt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  Wird ausgelöst, wenn auf den Schieberegler bzw. das Bildlauffeld geklickt und dieser/dieses dann mit der Maus verschoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn auf den Schieberegler bzw. das Bildlauffeld geklickt und dieser/dieses dann mit der Maus verschoben wird. Vor diesem Ereignis wird immer ein <codeph>thumbPress</codeph>-Ereignis ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Wird ausgelöst, bevor sich der Wert des Steuerelements durch Bedienvorgänge des Benutzers ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor sich der Wert des Steuerelements durch Bedienvorgänge des Benutzers ändert.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich der Wert des Steuerelements durch Bedienvorgänge des Benutzers ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der Wert des Steuerelements durch Bedienvorgänge des Benutzers ändert.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      Konvertiert eine der Spur entsprechende x-, y-Pixelposition in einen Wert zwischen Mindest- und Höchstwert (einschließlich beider Grenzwerte).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein Wert zwischen Mindest- und Höchstwert (einschließlich beider Grenzwerte).
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate der Position, die sich relativ zum Ursprung der Leiste befindet.
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate der Position, die sich relativ zum Ursprung der Leiste befindet.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Konvertiert eine der Spur entsprechende x-, y-Pixelposition in einen Wert zwischen Mindest- und Höchstwert (einschließlich beider Grenzwerte).  
     
      <p>TrackBase-Unterklassen müssen diese Methode überschreiben und Konvertierungen unter Berücksichtigung der eigenen Geometrie durchführen. Beispielsweise könnte eine vertikale Schiebereglerleiste folgendermaßen einen Wert berechnen:
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>Durch diese Methode wird standardmäßig <codeph>minimum</codeph> zurückgegeben.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:system_mouseWheelHandler"><apiName>system_mouseWheelHandler</apiName><shortdesc>
      Verarbeitet das mouseWheel-Ereignis, wenn die Komponente im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      Verarbeitet das <codeph>mouseWheel</codeph>-Ereignis, wenn die Komponente im Fokus ist. Der Schieberegler bzw. das Bildlauffeld wird um den mit <codeph>stepSize</codeph> multiplizierten Deltabetrag des Mausereignisses verschoben.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Definiert die Grenzen von Skinteilen (normalerweise des Schiebereglers/Bildlauffelds), deren Geometrie nicht vollständig vom Skinlayout festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Definiert die Grenzen von Skinteilen (normalerweise des Schiebereglers/Bildlauffelds), deren Geometrie nicht vollständig vom Skinlayout festgelegt ist.
     
      <p>Die meisten Unterklassen überschreiben diese Methode, um die Größe, Position und Sichtbarkeit des Schiebereglers bzw. des Bildlauffelds zu aktualisieren, basierend auf den <codeph>minimum</codeph>-, <codeph>maximum</codeph> und <codeph>value</codeph>-Eigenschaften. </p>
     
      <p>Standardmäßig hat diese Funktion keine Auswirkungen.</p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  Die Skinklasse definiert die Basisklasse für alle Skins, die von skinfähigen Komponenten verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Skinklasse definiert die Basisklasse für alle Skins, die von skinfähigen Komponenten verwendet werden. Die SkinnableComponent-Klasse definiert die Basisklasse für skinfähige Komponenten.
 
  <p>Sie schreiben Skinklassen normalerweise in MXML, wie im folgenden Beispiel gezeigt: </p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  Die DropDownController-Klasse verarbeitet die Interaktionen von Maus, Tastatur und Fokus für eine Ankerschaltfläche und die zugehörige Dropdownkomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DropDownController-Klasse verarbeitet die Interaktionen von Maus, Tastatur und Fokus für eine Ankerschaltfläche und die zugehörige Dropdownkomponente. Diese Klasse wird von den Dropdownkomponenten (wie DropDownList) verwendet, um das Öffnen und Schließen der Dropdownkomponente aufgrund von Benutzerinteraktionen zu verarbeiten.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Schließen Sie die Dropdownkomponente und lösen Sie ein DropDownEvent.CLOSE-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Wenn der Wert <codeph>true</codeph> entspricht, übernehmen Sie das ausgewählte Datenelement. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließen Sie die Dropdownkomponente und lösen Sie ein <codeph>DropDownEvent.CLOSE</codeph>-Ereignis aus.  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Öffnen Sie die Dropdownkomponente und lösen Sie ein DropdownEvent.OPEN-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Öffnen Sie die Dropdownkomponente und lösen Sie ein <codeph>DropdownEvent.OPEN</codeph>-Ereignis aus. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      Schließen Sie die Dropdownkomponente, wenn sie nicht mehr im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Das Ereignisobjekt für das <codeph>FOCUS_OUT</codeph>-Ereignis.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließen Sie die Dropdownkomponente, wenn sie nicht mehr im Fokus ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      Verarbeitet die Benutzerinteraktionen auf der Tastatur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn der <codeph>keyCode</codeph> erkannt und verarbeitet wurde.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Das Ereignisobjekt aus dem Tastaturereignis.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verarbeitet die Benutzerinteraktionen auf der Tastatur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
	  Eine Liste von Anzeigeobjekten, die als Teil des aktiven Bereichs der Dropdownliste betrachtet werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
	  Eine Liste von Anzeigeobjekten, die als Teil des aktiven Bereichs der Dropdownliste betrachtet werden sollen. Durch Mausklicks auf als eingeschlossen aufgelisteten Komponenten wird die Dropdownliste nicht automatisch geschlossen.
	         
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Enthält „true“, wenn die Dropdownkomponente geöffnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn die Dropdownkomponente geöffnet ist.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      Gibt die Verzögerung in Millisekunden vor dem Öffnen der Dropdownkomponente an, wenn Rollover über die Ankerschaltfläche erfolgte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Verzögerung in Millisekunden vor dem Öffnen der Dropdownkomponente an, wenn Rollover über die Ankerschaltfläche erfolgte. Bei der Einstellung <codeph>NaN</codeph> wird die Dropdownkomponente durch ein Klicken und nicht Rollover geöffnet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      Ein Verweis auf das openButton-Skinteil der Dropdownkomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf das <codeph>openButton</codeph>-Skinteil der Dropdownkomponente. 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
	  Ein Verweis auf den zur Mausverfolgung verwendeten SystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
	  Ein Verweis auf den zur Mausverfolgung verwendeten <codeph>SystemManager</codeph>. Wenn keiner angegeben wird, verwendet die Steuerung den mit dem openButton verknüpften systemManager.
	         
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  Beim ButtonBarHorizontalLayout-Layout handelt es sich um ein Layout, das speziell für Spark-ButtonBar-Skins konzipiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Beim ButtonBarHorizontalLayout-Layout handelt es sich um ein Layout, das speziell für Spark-ButtonBar-Skins konzipiert wurde. Das Layout ordnet die untergeordneten Elemente horizontal von links nach rechts an. Das Layout ändert auch die Größe der untergeordneten Elemente in der Form, dass alle ihre bevorzugte Größe aufweisen. Wenn genug Platz vorhanden ist, wird jedes untergeordnete Element auf die bevorzugte Größe geändert und überschüssiger Platz gleichmäßig auf die untergeordneten Elemente verteilt. Wenn nicht genug Platz vorhanden ist, alle untergeordneten Elemente auf die bevorzugte Größe zu ändern, wird den untergeordneten Elementen, die kleiner als die durchschnittliche Breite sind, die bevorzugte Größe zugewiesen und werden die anderen Elemente entsprechend verkleinert. Alle untergeordneten Elemente werden auf die Höhe des übergeordneten Elements gesetzt.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Der horizontale Raum zwischen Layoutelementen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der horizontale Raum zwischen Layoutelementen. Beachten Sie, dass die Lücke nur zwischen Layoutelementen angewendet wird. Wenn also nur ein Element vorhanden ist, wirkt sich die Lücke nicht auf das Layout aus.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Slider"><apiName>Slider</apiName><shortdesc>
  Mit der Slider-Klasse können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Boolean">
<description>
  Bei <codeph>true</codeph> wird der Wert des Schiebereglers übernommen, während er entlang der Leiste gezogen wird anstatt erst beim Loslassen.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Fokusrings für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      Ein Skinteil, das einen dataTip definiert, der eine formatierte Version des aktuellen Werts anzeigt. Der dataTip wird angezeigt, während der Schieberegler gezogen wird. Dies ist ein dynamisches Skinteil, das den Typ „IFactory“ aufweisen muss.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Slider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Slider
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    showDataTip="true"
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    breakOpportunity="AUTO"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusColor
    fontFamily="Times New Roman"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit der Slider-Klasse können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen. Der aktuelle Wert der Schiebereglerleiste wird von der relativen Position des Schiebereglers zwischen den Endpunkten der Schiebereglerleiste bestimmt, die dem Mindest- und Höchstwert der Schiebereglerleiste entsprechen. Die Slider-Klasse ist eine Basisklasse für HSlider und VSlider.
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Slider:Slider"><apiName>Slider</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Slider:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      Wird verwendet, um den ggf. angezeigten Datentipp zu platzieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>Die <codeph>dataTip</codeph>-Instanz für Update und Position.
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Die anfängliche Position des <codeph>dataTip</codeph> in der Skin.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird verwendet, um den ggf. angezeigten Datentipp zu platzieren. Unterklassen müssen diese Funktion implementieren. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Slider:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      Die Anzahl von Dezimalstellen für den Datentipptext. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl von Dezimalstellen für den Datentipptext. Der Wert 0 bedeutet, dass alle Werte auf eine ganze Zahl gerundet werden. Dieser Wert wird ignoriert, wenn <codeph>dataTipFormatFunction</codeph> definiert ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      Wenn auf „true“ gesetzt, wird ein Datentipp mit dem aktuellen Wert der Schiebereglerleiste angezeigt, während der Benutzer das Steuerelement verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn auf <codeph>true</codeph> gesetzt, wird ein Datentipp mit dem aktuellen Wert der Schiebereglerleiste angezeigt, während der Benutzer das Steuerelement verwendet. Darüber hinaus muss das <codeph>dataTipFactory</codeph>-Skinteil in der Skin definiert sein, damit ein Datentipp angezeigt wird. 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      Rückruffunktion, die den Datentipptext formatiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Rückruffunktion, die den Datentipptext formatiert. Die Funktion übernimmt eine einzige Zahl als Argument und gibt einen formatierten String zurück.
           <p>Die Funktion hat folgende Signatur:</p>
      <pre>
      funcName(value:Number):Object
      </pre>
           <p>Im folgenden Beispiel wird dem Datentipptext ein Dollarzeichen vorangestellt und der Text wird mit <codeph>dataTipPrecision</codeph> eines Slider-Steuerelements namens „slide“ formatiert: </p>
           <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:maximum:get"><apiName>maximum</apiName><shortdesc>
      Zahl, die den maximalen Wert angibt, der für „value“ möglich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die den maximalen Wert angibt, der für <codeph>value</codeph> möglich ist. Wenn die Werte für <codeph>minimum</codeph> und <codeph>value</codeph> größer sind als der Wert für <codeph>maximum</codeph>, werden sie auf den neuen Wert für <codeph>maximum</codeph> geändert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Der Wert, den die Schiebereglerleiste erhält, wenn die Maustaste losgelassen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Wert, den die Schiebereglerleiste erhält, wenn die Maustaste losgelassen wird. Außerdem behält diese Eigenschaft die während einer Animation des Schiebereglers festgelegten temporären Werte bei, wenn der <codeph>liveDragging</codeph>-Stil „true“ ist. Der wirkliche Wert wird erst festgelegt, wenn die Animation beendet ist.
     
      <p>Ist der <codeph>liveDragging</codeph>-Stil „false“, wird der Wert des Schiebereglers nur festgelegt, wenn die Maustaste losgelassen wird. Der Wert wird beim Ziehen des Schiebereglers nicht aktualisiert.</p>
     
      <p>Diese Eigenschaft wird beim Bewegen des Schiebereglers aktualisiert, selbst wenn <codeph>liveDragging</codeph> „false“ ist.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  Der Standard-Ziehproxy, der beim Ziehen aus einem Spark-Listen-basierten Steuerelement verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Standard-Ziehproxy, der beim Ziehen aus einem Spark-Listen-basierten Steuerelement verwendet wird.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
    
 
  <p><codeph/><codeph/> <codeph/> <codeph/></p> 
 
  <p><codeph/> <codeph/> </p>
 
  <p><codeph/> </p>
 
  <p><codeph/><codeph/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p> </p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  Die ListBase-Klasse ist die Basisklasse für alle Komponenten, die die Auswahl unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    dataProvider="null"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ListBase-Klasse ist die Basisklasse für alle Komponenten, die die Auswahl unterstützen. 
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Wird ausgelöst, nachdem sich der Fokus geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich der Fokus geändert hat.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, nachdem sich die Auswahl geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich die Auswahl geändert hat. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Auswahl ändern wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die Auswahl ändern wird. Das Aufrufen der <codeph>preventDefault()</codeph>-Methode im Ereignis verhindert, dass sich die Auswahl ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Passt die ausgewählte Indexposition so an, dass Elemente berücksichtigt werden, die zu dieser Komponente hinzugefügt bzw. daraus entfernt wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Die neue Indexposition.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph>, wenn ein Element der Komponente hinzugefügt wurde, und <codeph>false</codeph>, wenn ein Element entfernt wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die ausgewählte Indexposition so an, dass Elemente berücksichtigt werden, die zu dieser Komponente hinzugefügt bzw. daraus entfernt wurden. Durch diese Methode wird der ausgewählte Indexpositionswert angepasst und ein <codeph>change</codeph>-Ereignis ausgelöst. Es wird kein <codeph>changing</codeph>-Ereignis ausgelöst oder keine Aufhebung der Auswahl ermöglicht. Sie ruft auch nicht die <codeph>itemSelected()</codeph>-Methode auf, da dasselbe Element ausgewählt ist; es hat sich nur die Indexposition des Elements geändert.
     
      <p>Ein <codeph>change</codeph>-Ereignis wird im nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode ausgelöst.</p>
     
      <p>Das <codeph>changing</codeph>-Ereignis wird nicht gesendet, wenn <codeph>selectedIndex</codeph> angepasst wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      Wird aufgerufen, wenn ein Element zu dieser Komponente hinzugefügt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des hinzugefügten Elements. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Element zu dieser Komponente hinzugefügt wurde. Eigenschaften für Auswahl und Einfügezeichen werden entsprechend angepasst. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      Wird aufgerufen, wenn ein Element von dieser Komponente entfernt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des entfernten Elements. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Element von dieser Komponente entfernt wurde. Eigenschaften für Auswahl und Einfügezeichen werden entsprechend angepasst. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      Wird aufgerufen, wenn ein Element ausgewählt bzw. nicht ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Elementindexposition, die ausgewählt wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn ein Element ausgewählt ist, und <codeph>false</codeph>, wenn es nicht ausgewählt ist.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Element ausgewählt bzw. nicht ausgewählt ist. Unterklassen müssen diese Methode überschreiben, um die Auswahl anzuzeigen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      Wird aufgerufen, wenn sich ein Element im Einfügezeichenstatus bzw. nicht in diesem Status befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Elementindexposition, die in den Einfügezeichenstatus versetzt wurde. 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn sich das Element im Einfügezeichenstatus befindet, andernfalls <codeph>false</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn sich ein Element im Einfügezeichenstatus bzw. nicht in diesem Status befindet. Unterklassen müssen diese Methode überschreiben, um das Einfügezeichen anzuzeigen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Bei einem Datenelement wird der richtige von einem Renderer anzuzeigende Text angezeigt, wobei die labelField- und labelFunction-Eigenschaften berücksichtigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>String, der den anzuzeigenden Text für das Datenelement im Renderer darstellt. 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Ein Datenelement 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bei einem Datenelement wird der richtige von einem Renderer anzuzeigende Text angezeigt, wobei die <codeph>labelField</codeph>- und <codeph>labelFunction</codeph>-Eigenschaften berücksichtigt werden. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      Statistische Konstante, die dem Wert „Keine Auswahl“ entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Statistische Konstante, die dem Wert „Keine Auswahl“ entspricht.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      Beim Wert „true“ ist durch die Pfeiltasten ein Navigieren innerhalb der Komponentenumbrüche möglich, wenn eines der Enden erreicht ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Beim Wert <codeph>true</codeph> ist durch die Pfeiltasten ein Navigieren innerhalb der Komponentenumbrüche möglich, wenn eines der Enden erreicht ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Das Element, das derzeit im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Element, das derzeit im Fokus ist. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      Der Name des Felds im Datenproviderelement, das als Beschriftung angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenproviderelement, das als Beschriftung angezeigt werden soll. Die <codeph>labelFunction</codeph>-Eigenschaft überschreibt diese Eigenschaft.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Eine vom Benutzer definierte Funktion zur Bestimmung der Bezeichnungen einzelner Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seiner Bezeichnung ausgeführt werden soll. Die <codeph>labelFunction</codeph>-Eigenschaft überschreibt die <codeph>labelField</codeph>-Eigenschaft.
     
      <p>Sie können eine <codeph>labelFunction</codeph> verwenden, die die entsprechenden Felder findet und einen anzeigbaren String zurückgibt. Die <codeph>labelFunction</codeph> ist für die Verarbeitung von Formatierungen und lokalisierten Texten sinnvoll. </p>
     
      <p>Die „labelFunction“ übernimmt ein einzelnes Argument, nämlich das Element im Datenprovider, und gibt einen String zurück.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Wenn der Wert „true“ ist, muss ein Datenelement immer im Steuerelement ausgewählt sein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der Wert <codeph>true</codeph> ist, muss ein Datenelement immer im Steuerelement ausgewählt sein. Wenn der Wert <codeph>true</codeph> ist, ist die <codeph>selectedIndex</codeph>-Eigenschaft immer auf einen Wert zwischen 0 und (<codeph>dataProvider.length</codeph> - 1) gesetzt. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Die 0-basierte Indexposition des ausgewählten Elements oder -1, wenn kein Element ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die 0-basierte Indexposition des ausgewählten Elements oder -1, wenn kein Element ausgewählt ist. Durch Festlegen der <codeph>selectedIndex</codeph>-Eigenschaft wird die Auswahl des derzeit ausgewählten Elements aufgehoben und das Datenelement an der angegebenen Indexposition ausgewählt.
     
      <p>Der Wert liegt immer zwischen -1 und (<codeph>dataProvider.length</codeph> - 1). Wenn Elemente an einer niedrigeren Indexposition als <codeph>selectedIndex</codeph> aus der Komponente entfernt werden, wird die ausgewählte Indexposition entsprechend nach unten angepasst.</p>
     
      <p>Wenn das ausgewählte Element entfernt wird, wird die ausgewählte Indexposition auf Folgendes gesetzt:</p>
     
      <ul>
        <li>Wert -1, wenn <codeph>requireSelection</codeph> = <codeph>false</codeph> oder keine Elemente mehr übrig sind.</li>
        <li>Wert 0, wenn <codeph>requireSelection</codeph> = <codeph>true</codeph> und noch mindestens ein Element übrig ist.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Das Element, das aktuell ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Element, das aktuell ausgewählt ist. Durch Einstellen dieser Eigenschaft wird die Auswahl des aktuell ausgewählten Elements aufgehoben und ein neu angegebenes Element ausgewählt.
     
      <p>Das Einstellen von <codeph>selectedItem</codeph> für ein Element, das sich nicht in dieser Komponente befindet, führt zu keiner Auswahl sowie dazu, dass <codeph>selectedItem</codeph> auf <codeph>undefined</codeph> eingestellt wird.</p>
     
      <p>Wenn das ausgewählte Element entfernt wird, wird das ausgewählte Element auf Folgendes eingestellt:</p>
     
      <ul>
        <li>Wert <codeph>undefined</codeph>, wenn <codeph>requireSelection</codeph> = <codeph>false</codeph> oder keine Elemente mehr übrig sind.</li>
        <li>Das erste Element, wenn <codeph>requireSelection</codeph> = <codeph>true</codeph> und mindestens noch ein Element übrig ist.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      Definiert den Wert der useVirtualLayout-Eigenschaft des Layouts, das mit diesem Steuerelement verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert den Wert der <codeph>useVirtualLayout</codeph>-Eigenschaft des Layouts, das mit diesem Steuerelement verknüpft ist. Wenn das Layout anschließend ersetzt wird und der Wert dieser Eigenschaft <codeph>true</codeph> ist, wird die <codeph>useVirtualLayout</codeph>-Eigenschaft des neuen Layouts auf <codeph>true</codeph> gesetzt.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  Die Basisklasse für skinfähige Komponenten, wie etwa Spark TextInput und TextArea, die eine Instanz von RichEditableText in ihrer Skin enthalten, um die Anzeige von Rich Text, Bildlauf, Auswahl und Bearbeitung zu ermöglichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Fokusrings für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Rahmens dieser Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Farbe des Rahmens für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.components:RichEditableText">
<description>
      Der RichEditableText, der in allen Skins verfügbar sein kann, die dieser Komponente zugewiesen sind.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Basisklasse für skinfähige Komponenten, wie etwa Spark TextInput und TextArea, die eine Instanz von RichEditableText in ihrer Skin enthalten, um die Anzeige von Rich Text, Bildlauf, Auswahl und Bearbeitung zu ermöglichen.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, nachdem ein Bearbeitungsvorgang eines Benutzers abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem ein Bearbeitungsvorgang eines Benutzers abgeschlossen ist.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Wird ausgelöst, bevor ein Bearbeitungsvorgang eines Benutzers auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor ein Bearbeitungsvorgang eines Benutzers auftritt. Sie können den Vorgang ändern oder das Ereignis abbrechen, damit der Vorgang nicht verarbeitet wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Wird ausgelöst, nachdem sich die Eigenschaften „selectionAnchorPosition“ und/oder „selectionActivePosition“ geändert haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich die Eigenschaften <codeph>selectionAnchorPosition</codeph> und/oder <codeph>selectionActivePosition</codeph> geändert haben.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.components.RichEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der anzuhängende Text.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.components.RichEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der einzufügende Text.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#insertText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.RichEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.RichEditableText#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.components.RichEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Die Zeichenposition, die das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl erweitert wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Die Zeichenposition, die das Ende der Auswahl angibt. Wird verschoben, wenn die Auswahl erweitert wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#selectRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="spark.components.RichEditableText#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc conref="spark.components.RichEditableText#editable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#editable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.RichEditableText#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.RichEditableText#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="spark.components.RichEditableText#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="spark.components.RichEditableText#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.RichEditableText#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc conref="spark.components.RichEditableText#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc conref="spark.components.RichEditableText#selectionActivePosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectionActivePosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc conref="spark.components.RichEditableText#selectionAnchorPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectionAnchorPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc conref="spark.components.RichEditableText#selectionHighlighting">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectionHighlighting">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc conref="spark.components.RichEditableText#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#text">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>