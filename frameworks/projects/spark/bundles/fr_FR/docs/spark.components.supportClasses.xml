<?xml version="1.0"?>
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  La classe Range contient une valeur et une plage de valeurs autorisées pour cette valeur, définie par les propriétés minimum et maximum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Range contient une valeur et une plage de valeurs autorisées pour cette valeur, définie par les propriétés <codeph>minimum</codeph> et <codeph>maximum</codeph>. La propriété <codeph>value</codeph> doit toujours être comprise entre les valeurs actuellement définies pour <codeph>minimum</codeph> et <codeph>maximum</codeph>. En outre, les valeurs <codeph>minimum</codeph> et <codeph>maximum</codeph> doivent être dans le bon ordre, de sorte que <codeph>(minimum &lt;= value &lt;= maximum)</codeph> soit <codeph>true</codeph>. Si la valeur de la propriété <codeph>snapInterval</codeph> n’est pas 0, la propriété <codeph>value</codeph> est également limitée à un multiple de <codeph>snapInterval</codeph>. 
 
  <p>Range est une classe de base pour différents contrôles nécessitant une fonction de plage, notamment TrackBase et Spinner.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Augmente ou diminue la valeur via stepSize. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est true, ajoute <codeph>stepSize</codeph> à <codeph>value</codeph>, dans le cas contraire, la soustrait. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Augmente ou diminue <codeph>value</codeph> via <codeph>stepSize</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>La valeur valide la plus proche de l’entrée. 
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>La valeur de l’entrée. 
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>Valeur de snapInterval ou un entier multiple de snapInterval. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph/><codeph/><codeph/>
     
      <p>Si <codeph>interval</codeph> est égal à 0, la valeur est tronquée sur les limites minimales et maximales. </p>
     
      <p><codeph/><codeph/><codeph/> <codeph/></p>
     
      <p>Si, par exemple, <codeph>minimum</codeph> est égal à 1, <codeph>maximum</codeph> est égal à 6, et <codeph>snapInterval</codeph> est égal à 3, les valeurs possibles de cette plage sont 1, 2, 5, 6. De même, si <codeph>minimum</codeph> est égal à 2, <codeph>maximum</codeph> est égal à 9, et <codeph>snapInterval</codeph> est égal à 1,5, les valeurs possibles de cette plage sont 2, 3.5, 6.5, 5, 8, et 9. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Définit le magasin de sauvegarde pour la propriété value et distribue un événement valueCommit si la propriété est modifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de la propriété <codeph>value</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit le magasin de sauvegarde pour la propriété <codeph>value</codeph> et distribue un événement <codeph>valueCommit</codeph> si la propriété est modifiée.  
     
      <p>Toutes les mises à jour de la propriété <codeph>value</codeph> provoquent l’appel de cette méthode.</p>
     
      <p>Cette méthode suppose que l’appelant a déjà utilisé la valeur <codeph>nearestValidValue()</codeph> pour limiter le paramètre value.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      Valeur valide maximale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>Valeur</codeph> valide maximale.
     
      <p>Les modifications apportées à la propriété value sont limitées par la propriété <codeph>commitProperties()</codeph> pour être inférieures ou égales au maximum avec la méthode nearestValidValue(). </p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      Valeur valide minimale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>Valeur</codeph> valide minimale.
     
      <p>Les modifications apportées à la propriété value sont limitées par la propriété <codeph>commitProperties()</codeph> pour être supérieures ou égales au minimum avec la méthode nearestValidValue().</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      
      
      <p>Si la valeur de cette propriété est zéro, alors les valeurs possibles sont uniquement limitées entre les valeurs minimum et maximum incluses. </p>
     
      <p> </p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      Ampleur de la modification de la propriété value lorsque la méthode changeValueByStep() est appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ampleur de la modification de la propriété <codeph>value</codeph> lorsque la méthode <codeph>changeValueByStep()</codeph> est appelée. Il doit s’agir d’un multiple de <codeph>snapInterval</codeph>, sauf si la valeur <codeph>snapInterval</codeph> est nulle. Si <codeph>stepSize</codeph> n’est pas un multiple, il est arrondi au multiple le plus proche supérieur ou égal à <codeph>snapInterval</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      La valeur actuelle pour cette plage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      La valeur actuelle pour cette plage.
      
      <p>Les modifications apportées à la propriété value sont limitées par la propriété <codeph>commitProperties()</codeph> pour être supérieures ou égales au <codeph>minimum</codeph>, inférieures ou égales au <codeph>maximum</codeph> et un multiple de <codeph>snapInterval</codeph> avec la méthode <codeph>nearestValidValue()</codeph>. </p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  Classe de base des composants de conteneur dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Etat désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Etat normal.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe de base des composants de conteneur dont l’habillage peut être configuré.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      Renvoie le nom de l’état à appliquer à l’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer à l’habillage.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      Renvoie le nom de l’état à appliquer à l’habillage. Par exemple, un composant Button peut renvoyer la chaîne « up », « down », « over » ou « disabled » pour spécifier l’état.
     
      <p>Une sous-classe de SkinnableComponent doit remplacer cette méthode pour renvoyer une valeur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur. Lorsque les contrôles du conteneur ont le focus, l’activation de la touche Entrée revient à cliquer sur ce contrôle Button.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext/></link><link href="spark.components.xml#DataGroup/overlay"><linktext/></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  Le composant ToggleButtonBase est la classe de base des composants de bouton Spark qui prennent en charge la propriété selected.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat désactivé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat abaissé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat survolé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat relevé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant ToggleButtonBase est la classe de base des composants de bouton Spark qui prennent en charge la propriété <codeph>selected</codeph>. ToggleButton, CheckBox et RadioButton sont des sous-classes de ToggleButtonBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.ToggleButton.xml"><linktext>mx.components.ToggleButton</linktext></link><link href="" invalidHref="mx.components.CheckBox.xml"><linktext>mx.components.CheckBox</linktext></link><link href="" invalidHref="mx.components.RadioButton.xml"><linktext>mx.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la propriété selected du contrôle ToggleButtonBase change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>selected</codeph> du contrôle ToggleButtonBase change. Cet événement est distribué uniquement lorsque l’utilisateur actionne le contrôle à l’aide de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      true si le bouton est à l’état abaissé, false s’il est à l’état relevé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>true</codeph> si le bouton est à l’état abaissé, <codeph>false</codeph> s’il est à l’état relevé.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  La classe ItemRenderer est la classe de base des fonctionnalités de rendu d’élément Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ItemRenderer est la classe de base des fonctionnalités de rendu d’élément Spark.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      Renvoie le nom de l’état à appliquer au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer au rendu. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie le nom de l’état à appliquer au rendu. Par exemple, un rendu d’élément List renvoie la chaîne « normal », « hovered » ou « selected » pour spécifier l’état du rendu.  
     
      <p>Une sous-classe de ItemRenderer doit remplacer cette méthode pour renvoyer une valeur si le comportement souhaité est différent du comportement par défaut. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Composant facultatif d’étiquette de fonctionnalité de rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      Composant facultatif d’étiquette de fonctionnalité de rendu d’élément. Ce composant est utilisé pour déterminer la valeur de la propriété <codeph>baselinePosition</codeph> dans le composant hôte de la fonctionnalité de rendu d’élément. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
       
     
      <p><codeph/><codeph/><codeph/><codeph/><codeph/></p>
     
      <p><codeph/> </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      <codeph/>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     </apiDefaultValue></apiValueDef><apiDesc>
      
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      Chaîne à afficher dans la fonctionnalité de rendu d’élément.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Chaîne à afficher dans la fonctionnalité de rendu d’élément. 
           <p>Le composant hôte de la fonctionnalité de rendu d’élément peut utiliser la méthode <codeph>itemToLabel()</codeph> pour convertir l’élément de données en une chaîne devant être affichée par la fonctionnalité de rendu d’élément. </p>
     
      <p>Pour les contrôles tels que List et ButtonBar, vous pouvez utiliser les propriétés <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> pour spécifier le champ de l’élément de données contenant la chaîne. Dans tous les autres cas, le composant hôte utilise la méthode <codeph>toString()</codeph> pour convertir l’élément de données en chaîne. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      Contient true si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Contient true si le rendu d’élément peut s’afficher comme focus. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si le rendu d’élément peut s’afficher comme focus.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBar"><apiName>ScrollBar</apiName><shortdesc>
  La classe ScrollBar facilite le positionnement de la partie affichée des données lorsque le volume de données à afficher dans une zone est trop important.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Boolean">
<description>
 Cette propriété détermine si la barre de défilement doit faire l’objet d’une animation progressive lors de la pagination et de l’incrémentation ou de la décrémentation. Si la valeur est false, les opérations de pagination et d’incrémentation ou de décrémentation passent directement aux emplacements cible. Lorsque la valeur est true, la barre de défilement et le contenu déplacé font l’objet d’une animation jusqu’à l’emplacement cible.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes entre les événements de page si l’utilisateur clique sur le rail et maintient le bouton de la souris enfoncé.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes entre le premier événement de la page et les événements de page suivants.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Boolean">
<description>
  Si la valeur est true (valeur par défaut), la visibilité du curseur est réinitialisée à chaque fois que la taille est mise à jour. Le remplacement de la valeur <codeph>sizeThumb()</codeph> dans les paramètres <codeph>HScrollBar</codeph> et <codeph>VScrollBar</codeph> rend le curseur visible s’il est plus petit quele rail, à moins que le style soit false. Définissez ce style sur false pour contrôler la visibilité du curseur directement.   
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" type="Boolean">
<description>
  Si la valeur est true, la taille du curseur le long de l’axe de la barre de défilement correspond à sa taille préférée.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10">
<description>
  Etat inactif. Cet l’état indique qu’il n’existe pas de contenu à faire défiler, ce qui signifie que <codeph>maximum</codeph> &lt;= <codeph>minimum</codeph>. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Habillage facultatif définissant un bouton qui, lorsqu’il est actionné, déplace la barre de défilement vers le haut. Cette propriété équivaut à un pas de diminution pour la propriété <codeph>value</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBar" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Habillage facultatif définissant un bouton qui, lorsqu’il est actionné, déplace la barre de défilement vers le bas. Cette propriété équivaut à un pas d’augmentation pour la propriété <codeph>value</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ScrollBar
    <strong>Properties</strong>
    pageSize="20"
    snapInterval=""
    viewport="null"
 
    <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor=""
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ScrollBar facilite le positionnement de la partie affichée des données lorsque le volume de données à afficher dans une zone est trop important. La classe ScrollBar classe affiche une paire de barres de défilement et une fenêtre. Dans ce contexte, une fenêtre est un composant UIComponent qui implémente une interface IViewport, par exemple Group.
  
  <p>Ce contrôle étend la classe TrackBase. Il s’agit de la classe de base des contrôles HScrollBar et VScrollBar.</p> 
 
  <p>Une barre de défilement se compose d’un rail, d’un curseur de défilement de taille variable et de deux boutons fléchés facultatifs. Pour calculer l’état d’affichage, la classe ScrollBar utilise quatre paramètres :</p>
 
  <ul>
    <li><codeph>minimum</codeph> : valeur minimale de la plage.</li>
    <li><codeph>maximum</codeph> : valeur maximale de la plage.</li>
    <li><codeph>value</codeph> : position actuelle, comprise entre les valeurs minimale et maximale de la plage.</li>
    <li>Taille de la fenêtre : nombre d’éléments de la plage pouvant être affichés simultanément. Le nombre d’éléments doit être inférieur ou égal à la plage, celle-ci correspondant à la série de valeurs comprises entre la valeur minimale et la valeur maximale de la plage.</li>
  </ul>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBar:ScrollBar"><apiName>ScrollBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBar:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     Anime l’opération pour passer à la valeur newValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>La valeur finale en cours de pagination. 
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>La quantité de mouvement horizontal ou vertical demandée. Cette valeur sert à calculer, avec le style <codeph>repeatInterval</codeph>, la durée totale pour passer à la nouvelle valeur. <codeph>pageSize</codeph> est généralement définie dynamiquement par le changeur de couleur contenant pour la valeur requise pour afficher le contenu à une limite de contenu logique. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Anime l’opération pour passer à la valeur <codeph>newValue</codeph>. Le paramètre <codeph>pageSize</codeph> sert à calculer le temps nécessaire à accéder à cette valeur, de sorte que le temps nécessaire pour animer une opération de pagination soit à peu près identique à la version non animée ; les deux opérations doivent se terminer au même endroit au même moment. 
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     Anime l’opération pour modifier l’instruction vers la valeur newValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>La valeur finale en cours de modification d’instruction. 
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>La quantité de la modification d’instruction demandée. Cette valeur sert à calculer, avec le style <codeph>repeatInterval</codeph>, la durée totale pour modifier l’instruction vers la nouvelle valeur. <codeph>stepSize</codeph> est généralement définie dynamiquement par le changeur de couleur contenant pour la valeur requise pour afficher le contenu à une limite de contenu logique. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Anime l’opération pour modifier l’instruction vers la valeur <codeph>newValue</codeph>. Le paramètre <codeph>stepSize</codeph> sert à calculer le temps nécessaire à accéder à cette valeur, de sorte que le temps nécessaire pour animer une opération de pagination soit à peu près identique à la version non animée ; les deux opérations doivent se terminer au même endroit au même moment. 
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      Traite un clic sur le bouton d’incrémentation ou de décrémentation de la barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      Traite un clic sur le bouton d’incrémentation ou de décrémentation de la barre de défilement. Le clic provoque une incrémentation ou une décrémentation, qui est répétée si le bouton reste enfoncé. Le délai avant le début des répétitions et le délai entre les événements répétés sont déterminés par les styles <codeph>repeatDelay</codeph> et <codeph>repeatInterval</codeph> des objets Button sous-jacents.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      Gère le relâchement du bouton d’incrémentation ou de décrémentation de la barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      Gère le relâchement du bouton d’incrémentation ou de décrémentation de la barre de défilement. Cette opération met fin à l’opération d’incrémentation ou de décrémentation démarrée sur ce bouton par l’événement buttonDown.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Ajoute la valeur pageSize à value ou la soustrait de cette dernière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Détermine si l’action de pagination doit augmenter (<codeph>true</codeph>) ou diminuer (<codeph>false</codeph>) la valeur <codeph>value</codeph>. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute la valeur <codeph>pageSize</codeph> à <codeph>value</codeph> ou la soustrait de cette dernière. Dans le cas d’une addition, la nouvelle valeur <codeph>value</codeph> est le multiple de <codeph>pageSize</codeph> le plus proche supérieur à la valeur actuelle de <codeph>value</codeph>. Dans le cas d’une soustraction, la nouvelle valeur <codeph>value</codeph> est le multiple de <codeph>pageSize</codeph> le plus proche inférieur à la valeur actuelle. La valeur minimale de <codeph>value</codeph> est <codeph>pageSize</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBar:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      Le changement dans la valeur de la propriété value lorsque vous appelez la méthode changeValueByPage().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le changement dans la valeur de la propriété <codeph>value</codeph> lorsque vous appelez la méthode <codeph>changeValueByPage()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBar:viewport:get"><apiName>viewport</apiName><shortdesc>
      Fenêtre contrôlée par cette barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Fenêtre contrôlée par cette barre de défilement. Si une fenêtre est spécifiée, toute modification apportée à sa taille réelle, à la taille de son contenu et à la position de défilement provoque l’exécution des méthodes ScrollBar correspondantes :
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>Les classes VScrollBar et HScrollBar remplacent ces méthodes pour conserver leur propriétés <codeph>pageSize</codeph>, <codeph>maximum</codeph>, et <codeph>value</codeph> en synchronisation avec le port d’affichage. De même, elles remplacent leurs méthodes <codeph>changeValueByPage()</codeph> et <codeph>changeValueByStep()</codeph> pour utiliser les méthodes <codeph>scrollPositionDelta</codeph> su port d’affichage pour calculer les décalages de page et d’étape.</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBar:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      
      
      <p>Si la valeur de cette propriété est zéro, alors les valeurs possibles sont uniquement limitées entre les valeurs minimum et maximum incluses. </p>
     
      <p> </p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  La classe GroupBase définit la classe de base des composants affichant des éléments visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur du symbole d’un composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton de défilement.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  
   
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de sélection lorsque le composant a le focus.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha lorsque le conteneur est désactivé. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur du remplissage d’une fonctionnalité de rendu d’élément..
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="baseColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur principale d’un composant. 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="Array">
<description>
  Couleurs à utiliser pour les arrière-plans des éléments de la liste. La valeur est un tableau de deux couleurs ou plus. Les arrière-plans des éléments de liste prennent les couleurs du tableau par alternance. 
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
     
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe GroupBase définit la classe de base des composants affichant des éléments visuels. Un composant de groupe ne contrôle pas la présentation des éléments visuels qu’il contient. En revanche, la présentation est gérée par un composant de présentation séparé. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Prend les valeurs suivantes :  
      <ul>
      <li> 
      <codeph>END</codeph> Renvoie le delta de défilement provoquant la justification à droite du rectangle scrollRect sur la zone de contenu.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Renvoie le delta de défilement provoquant la justification à gauche du rectangle scrollRect sur la zone de contenu.
      </li>
     
      <li> 
      <codeph>LEFT</codeph> Renvoie le delta de défilement provoquant la justification à gauche du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à gauche du bord gauche du rectangle scrollRect.
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> Renvoie le delta de défilement provoquant la justification à droite du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à gauche du bord gauche du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> Renvoie le delta de défilement provoquant la justification à gauche du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à droite du bord droit du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>RIGHT</codeph> Renvoie le delta de défilement provoquant la justification à droite du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à droite du bord droit du rectangle scrollRect.
      </li>
           </ul>
     
      L’implémentation appelle les méthodes <codeph>getElementBoundsLeftOfScrollRect()</codeph> et <codeph>getElementBoundsRightOfScrollRect()</codeph> pour déterminer les limites des éléments. Les classes de présentation remplacent généralement ces méthodes à la place de la méthode getHorizontalScrollPositionDelta(). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Prend les valeurs suivantes :  
      <ul>
      <li> 
      <codeph>DOWN</codeph> Renvoie le delta de défilement provoquant la justification en bas du rectangle scrollRect avec le premier élément qui englobe ou qui se situe en dessous du bord inférieur du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>END</codeph> Renvoie le delta de défilement provoquant la justification en bas du rectangle scrollRect sur la zone de contenu.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Renvoie le delta de défilement provoquant la justification en haut du rectangle scrollRect sur la zone de contenu.
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> Renvoie le delta de défilement provoquant la justification en haut du rectangle scrollRect avec le premier élément qui englobe ou qui se situe en dessous du bord inférieur du rectangle scrollRect.
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      Renvoie le delta de défilement provoquant la justification en bas du rectangle scrollRect avec le premier élément qui englobe ou qui se situe au-dessus du bord supérieur du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>UP</codeph> Renvoie le delta de défilement provoquant la justification en haut du rectangle scrollRect avec le premier élément qui englobe ou qui se situe au-dessus du bord supérieur du rectangle scrollRect.
      </li>
           </ul>
     
      L’implémentation appelle les méthodes <codeph>getElementBoundsAboveScrollRect()</codeph> et <codeph>getElementBoundsBelowScrollRect()</codeph> pour déterminer les limites des éléments. Les classes de présentation remplacent généralement ces méthodes à la place de la méthode getVerticalScrollPositionDelta(). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      Les présentations respectant l’indicateur useVirtualLayout utilisent cette méthode lors de l’exécution de la méthode updateDisplayList() pour obtenir des éléments de présentation « en vue », c’est-à-dire </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément validé à l’index spécifié.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément à récupérer.
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Si elle est spécifiée, la largeur initiale de l’élément récemment créé ou recyclé. 
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Si elle est spécifiée, la largeur initiale de l’élément récemment créé ou recyclé. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Les présentations respectant l’indicateur <codeph>useVirtualLayout</codeph> utilisent cette méthode lors de l’exécution de la méthode updateDisplayList() pour obtenir des éléments de présentation « en vue », c’est-à-dire des éléments présents dans la propriété scrollRect du groupe. 
     
      <p>Si l’élément à renvoyer n’est pas déjà un enfant visible, c’est-à-dire s’il a été créé ou recyclé et que eltWidth ou eltHeight est spécifié, la taille initiale de l’élément est définie avec setLayoutBoundsSize() avant sa validation. Cela est important pour les composants, tels que le texte, qui est redistribué lorsque la mise en forme est justifiée en fonction de la largeur ou de la hauteur du groupe. </p>
      
      <p>L’élément de présentation renvoyé aura été validé.</p>
     
      <p>Cette méthode crée ou recycle et valide à la demande les éléments de présentation.</p>
     
      <p>Cette méthode n’est pas destinée à être appelée directement. Elle est appelée par les présentations qui prennent en charge la virtualisation.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      Définit les propriétés contentWidth et contentHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de <codeph>contentWidth</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de <codeph>contentHeight</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit les propriétés <codeph>contentWidth</codeph> et <codeph>contentHeight</codeph>. Cette méthode est destinée aux développeurs de classe de présentation, qui doivent l’appeler à partir de méthodes <codeph>updateDisplayList()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      Si la valeur est true, les opérations de mesure et de présentation sont réalisées lorsque la position ou la taille d’un enfant est modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée. Si la valeur est <codeph>false</codeph>, les opérations de mesure et de présentation sont réalisées une seule fois, lors de l’ajout des enfants au conteneur ou de leur suppression.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      Objet de présentation de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet de présentation de ce conteneur. Cet objet est responsable des opérations de mesure et de présentation des éléments visuels du conteneur.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.LayoutBase.xml"><linktext>LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
         
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext/></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
         
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      Définit le masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Définit le masque. Le masque est ajouté à la liste d’affichage. Le masque ne doit pas déjà être présent dans une liste d’affichage ni dans le tableau des éléments.  
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      Type de masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>Type de masque. <codeph/><codeph/><codeph/></p> 
     
      <p>Masquage d’écrêtage </p>
     
      <p>Lors d’un masquage en mode écrêtage, un masque d’écrêtage est réduit à 1 bit. Cela signifie qu’un masque n’affecte pas l’opacité d’un pixel dans le contenu source ; il ne modifie pas la valeur, si le pixel correspondant dans le masque possède une valeur alpha autre que zéro ou le rend complètement transparent, si la valeur alpha du pixel du masque est égale à zéro. </p>
     
      <p>Masquage alpha </p>
     
      <p>En mode alpha, l’opacité de chaque pixel du contenu source est multipliée par l’opacité de la région correspondante du masque. Par exemple, un pixel du contenu source d’une opacité de 1 qui est masqué par une région d’opacité de .5 produira une opacité de .5. Un pixel source d’une opacité de .8 masqué par une région d’une opacité de .5 affichera une opacité de .4. </p>
     
      <p/>
     
      <p/>
     
      <p> </p>
     
      <p> </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      Lorsque la valeur est true, l’indicateur mouseOpaque s’assure que toutes les limites de l’occurrence Group sont opaques pour tous les événements de souris (clics, survols, etc.).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsque la valeur est true, l’indicateur mouseOpaque s’assure que toutes les limites de l’occurrence Group sont opaques pour tous les événements de souris (clics, survols, etc.).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
        
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      Mode ResizeMode de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Mode ResizeMode de ce conteneur. Si le mode de redimensionnement est défini sur <codeph>ResizeMode.NORMAL</codeph>, le redimensionnement est effectué en plaçant les enfants à l’aide des nouvelles largeur et hauteur. Si le mode de redimensionnement mode est défini sur <codeph>ResizeMode.NOSCALE</codeph>, tous les enfants conservent leur largeur et leur hauteur sans mise à l’échelle et sont mis à l’échelle de façon à modifier la taille. 
     
     <p>La valeur par défaut est <codeph>ResizeMode.NOSCALE</codeph>, ce qui correspond à « noScale ». </p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  La classe SkinnableComponent définit la classe de base des composants dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><Exclude kind="style" name="errorColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Nom de la classe d’habillage à utiliser pour ce composant. L’habillage doit être une classe qui étend UIComponent.  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Nom de la classe d’habillage à utiliser pour ce composant lorsqu’une erreur de validation se produit.  
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="baseColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:baseColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SkinnableComponent définit la classe de base des composants dont l’habillage peut être configuré. Les habillages utilisés par une classe SkinnableComponent sont généralement des classes enfant de la classe Skin.
 
  <p>Associe une classe d’habillage à une classe de composant en définissant la propriété de style <codeph>skinClass</codeph> de la classe de composant. Vous pouvez définir la propriété <codeph>skinClass</codeph> en langage CSS, comme l’illustre l’exemple suivant :</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>L’exemple suivant définit la propriété <codeph>skinClass</codeph> en langage MXML :</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      Crée l’habillage du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’habillage du composant. Vous ne pouvez pas appeler cette méthode directement. Flex l’appelle automatiquement lors de l’appel des méthodes <codeph>createChildren()</codeph> ou <codeph>UIComponent.commitProperties()</codeph>. En règle générale, une sous-classe de SkinnableComponent ne remplace pas cette méthode.
     
      <p>Cette méthode instancie l’habillage du composant, ajoute l’habillage en tant qu’enfant du composant et résout toutes les associations de parties d’habillage.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      Supprime les références aux parties d’habillages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime les références aux parties d’habillages. Vous ne pouvez pas appeler cette méthode directement. Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>detachSkin()</codeph>.
     
      <p>En règle générale, les sous-classes de SkinnableComponent ne remplacent pas cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      Crée une occurrence d’une partie d’habillage dynamique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Occurrence de la partie ou null s’il est impossible de créer la partie. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une occurrence d’une partie d’habillage dynamique. Les parties d’habillage dynamiques doivent toujours être instanciées par cette méthode et non être instanciées directement par l’appel de la méthode <codeph>newInstance()</codeph> sur la fabrique. Cette méthode crée la partie, mais elle ne l’ajoute pas à la liste d’affichage. Le composant doit appeler la méthode <codeph>Group.addElement()</codeph> ou la méthode appropriée pour ajouter la partie d’habillage à la liste d’affichage. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      Détruit et supprime l’habillage de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Détruit et supprime l’habillage de ce composant. Vous ne pouvez pas appeler cette méthode directement. Flex l’appelle automatiquement lorsqu’un habillage est modifié lors de l’exécution. Cette méthode supprime l’habillage et efface toutes les associations de parties.
     
      <p>En règle générale, les sous-classes de SkinnableComponent ne remplacent pas cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      Recherchez les parties d’habillage dans la classe d’habillage et affectez-les aux propriétés du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Recherchez les parties d’habillage dans la classe d’habillage et affectez-les aux propriétés du composant. Vous ne pouvez pas appeler cette méthode directement. Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>attachSkin()</codeph>. En règle générale, une sous-classe de SkinnableComponent ne remplace pas cette méthode.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      Renvoie le nom de l’état à appliquer à l’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer à l’habillage.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie le nom de l’état à appliquer à l’habillage. Par exemple, un composant Button peut renvoyer la chaîne « up », « down », « over » ou « disabled » pour spécifier l’état.
     
      <p>Une sous-classe de SkinnableComponent doit remplacer cette méthode pour renvoyer une valeur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      Renvoie une occurrence spécifique d’une partie dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Occurrence de la partie ou null si la partie n’existe pas.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie dynamique.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la partie dynamique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une occurrence spécifique d’une partie dynamique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      Marque le composant de sorte que le nouvel état de l’habillage soit défini lors d’une actualisation d’écran ultérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Marque le composant de sorte que le nouvel état de l’habillage soit défini lors d’une actualisation d’écran ultérieure.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      Renvoie le nombre d’occurrences d’une partie dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Nombre d’occurrences de la partie dynamique.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie dynamique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le nombre d’occurrences d’une partie dynamique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      Appelée lorsqu’une partie d’habillage est ajoutée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Partie.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’une partie d’habillage est ajoutée. Vous ne pouvez pas appeler cette méthode directement. Dans le cas des parties statiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>attachSkin()</codeph>. Dans le cas des parties dynamiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>createDynamicPartInstance()</codeph>. 
     
      <p>Remplacez cette fonction pour associer un comportement à la partie. Si vous souhaitez remplacer le comportement pour une partie d’habillage héritée d’une classe de base, veillez à ne pas appeler la méthode <codeph>super.partAdded()</codeph>. Dans tous les autres cas, vous devez toujours appeler la méthode <codeph>super.partAdded()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      Appelée lorsqu’une occurrence de partie d’habillage est supprimée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Partie.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’une occurrence de partie d’habillage est supprimée. Vous ne pouvez pas appeler cette méthode directement. Dans le cas des parties statiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>detachSkin()</codeph>. Dans le cas des parties dynamiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>removeDynamicPartInstance()</codeph>. 
     
      <p>Remplacez cette fonction pour supprimer le comportement de la partie.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      Supprime une occurrence d’une partie dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Partie.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime une occurrence d’une partie dynamique. Vous devez appeler cette méthode avant de supprimer une partie dynamique. Cette méthode ne supprime pas la partie de la liste d’affichage.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Etat à utiliser pour faire correspondre les pseudo-sélecteurs CSS.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Etat à utiliser pour faire correspondre les pseudo-sélecteurs CSS. Ce remplacement renvoie l’état actuel de l’habillage et non l’état du composant.
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      Occurrence de la classe d’habillage de cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      Occurrence de la classe d’habillage de cette occurrence de composant. Il s’agit d’une propriété en lecture seule définie automatiquement lorsque Flex appelle la méthode <codeph>attachSkin()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  La couleur de l’arrière-plan de l’ensemble du cadre de délimitation de ce composant. Si ce style est <codeph>undefined</codeph> aucun arrière-plan n’est dessiné. Dans le cas contraire, cette couleur RVB est dessinée avec un niveau alpha déterminé par le style <codeph>backgroundAlpha</codeph>.
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  Le niveau alpha de la couleur définie par le style <codeph>backgroundColor</codeph>. Les valeurs possibles sont comprises entre 0.0 et 1.0.
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  <p><codeph/><codeph/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  Rapport de propriété en lecture seule si le texte a été tronqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Rapport de propriété en lecture seule si le texte a été tronqué. 
	 
	  <p>La troncature de texte signifie le remplacement du texte superflu à l’aide d’un indicateur de troncature, tel que « ... ». L’indicateur de troncature dépend des paramètres régionaux. Il n’est spécifié par la ressource « truncationIndicator » du groupe de ressources principal. </p>
	 
      <p>Si <codeph>maxDisplayedLines</codeph> est 0, aucune troncature ne se produit. Au lieu de cela, le texte est tout simplement écrêté s’il est supérieur aux limites du composant. </p>
     
      <p>Si <codeph>maxDisplayedLines</codeph> est un entier positif, le texte sera tronquée si nécessaire, pour réduire le nombre de lignes à cet entier. </p>
     
      <p>Si la valeur de <codeph>maxDisplayedLines</codeph> est -1, le texte sera tronqué afin d’afficher autant de lignes que possible dans la hauteur du composant. </p>
     
      <p>La troncature s’effectue uniquement si la valeur du style <codeph>lineBreak</codeph> est <codeph>"toFit"</codeph> ; la valeur de cette propriété est ignoré si <codeph>lineBreak</codeph> est <codeph>"explicit"</codeph>. </p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      Entier qui détermine si et où le texte est tronqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Entier qui détermine si et où le texte est tronqué. 
	 
	  <p>La troncature de texte signifie le remplacement du texte superflu à l’aide d’un indicateur de troncature, tel que « ... ». L’indicateur de troncature dépend des paramètres régionaux. Il n’est spécifié par la ressource « truncationIndicator » du groupe de ressources principal. </p>
     
      <p>Si la valeur est 0, aucune troncature se produit. Au lieu de cela, le texte est tout simplement écrêté s’il est supérieur aux limites du composant. </p>
     
      <p>Si la valeur est un entier positif, le texte sera tronquée si nécessaire, pour réduire le nombre de lignes à cet entier. </p>
     
      <p>Si la valeur est -1, le texte sera tronqué afin d’afficher autant de lignes que possible dans la hauteur du composant. </p>
     
      <p>La troncature s’effectue uniquement si la valeur du style <codeph>lineBreak</codeph> est <codeph>"toFit"</codeph> ; la valeur de cette propriété est ignoré si <codeph>lineBreak</codeph> est <codeph>"explicit"</codeph>. </p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      Texte affiché par ce composant de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte affiché par ce composant de texte. 
	 
      <p>La mise en forme de ce texte est contrôlée par des styles CSS. Les styles pris en charge dépendent de la sous-classe. </p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  Le composant ButtonBase est la classe de base de tous les composants de bouton Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat désactivé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat abaissé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat survolé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat relevé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes entre les événements <codeph>buttonDown</codeph> si l’utilisateur maintient le bouton de la souris enfoncé.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes d’attente entre le premier événement <codeph>buttonDown</codeph> et la première répétition des événements <codeph>buttonDown</codeph> à chaque intervalle <codeph>repeatInterval</codeph>.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’anneau de focus de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Rayon des angles de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      Partie d’habillage définissant l’étiquette du bouton. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    breakOpportunity="AUTO"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusColor=""
    fontFamily="Times New Roman"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant ButtonBase est la classe de base de tous les composants de bouton Spark. Button et ToggleButtonBase sont des sous-classes de ButtonBase. ToggleButton, CheckBox et RadioButton sont des sous-classes de ToggleButtonBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le contrôle ButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le contrôle ButtonBase. Si la valeur de la propriété <codeph>autoRepeat</codeph> est <codeph>true</codeph>, cet événement est redistribué en continu tant que le bouton demeure abaissé.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
        
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Remplacez cette méthode dans des sous-classes pour gérer l’événement de clic plutôt que d’ajouter un gestionnaire distinct.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      Remplacez cette méthode dans des sous-classes pour traiter l’événement de clic plutôt que d’ajouter un gestionnaire distinct. La méthode clickHandler n’est pas appelée si le bouton est désactivé. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      Cette méthode traite les événements de souris, appelle la méthode clickHandler lorsque cela est nécessaire et met à jour les propriétés hovered et mouseCaptured.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      Cette méthode traite les événements de souris, appelle la méthode <codeph>clickHandler</codeph> lorsque cela est nécessaire et met à jour les propriétés <codeph>hovered</codeph> et <codeph>mouseCaptured</codeph>.
      <p/>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      Indique si des événements buttonDown doivent être distribués de façon répétée si l’utilisateur maintient le bouton de sa souris enfoncé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si des événements <codeph>buttonDown</codeph> doivent être distribués de façon répétée si l’utilisateur maintient le bouton de sa souris enfoncé.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      La propriété content permet de transmettre un objet arbitraire à utiliser dans un habillage personnalisé du bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>content</codeph> permet de transmettre un objet arbitraire à utiliser dans un habillage personnalisé du bouton. Lorsqu’un habillage définit la partie facultative <codeph>labelDisplay</codeph>, une représentation de chaîne de la propriété <codeph>content</codeph> est déplacée vers la propriété <codeph>text</codeph> de cet habillage. L’habillage par défaut utilise ce mécanisme pour rendre la propriété <codeph>content</codeph> en tant qu’étiquette du bouton.  
     
      <p>La propriété <codeph>label</codeph> est une façade de type <codeph>String</codeph> de cette propriété. Cette propriété peut être liée et partage l’événement « contentChange » avec la propriété <codeph>label</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>label</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Indique si le pointeur de la souris survole le bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le pointeur de la souris survole le bouton. Utilisée pour déterminer l’état d’habillage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      Indique si l’utilisateur appuie sur une touche du clavier alors que le bouton a le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si l’utilisateur appuie sur une touche du clavier alors que le bouton a le focus. Utilisée pour déterminer l’état d’habillage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      Indique si le bouton de la souris est enfoncé et si le pointeur de la souris survolait le bouton au moment où l’événement MouseEvent.MOUSE_DOWN a été initialement distribué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le bouton de la souris est abaissé et si le pointeur de la souris survolait le bouton au moment où l’événement MouseEvent.MOUSE_DOWN a été initialement distribué. Utilisée pour déterminer l’état d’habillage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      Si la valeur est false, le bouton affiche son habillage d’état abaissé lorsque l’utilisateur clique dessus, mais passe à l’habillage d’état survolé dès que l’utilisateur déplace le pointeur à l’extérieur du bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>false</codeph>, le bouton affiche son habillage d’état abaissé lorsque l’utilisateur clique dessus, mais passe à l’habillage d’état survolé dès que l’utilisateur déplace le pointeur à l’extérieur du bouton. Si la valeur est <codeph>true</codeph>, le bouton affiche son habillage d’état abaissé lorsque l’utilisateur clique dessus, puis continue à afficher cet habillage, y compris si l’utilisateur déplace le pointeur à l’extérieur du bouton.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      Texte à afficher sur le contrôle ButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher sur le contrôle ButtonBase.
     
      <p>Si l’étiquette est plus large que le contrôle ButtonBase, elle est tronquée et se termine par des points de suspension (...). L’étiquette complète s’affiche sous forme d’info-bulle lorsque l’utilisateur vient survoler le contrôle. Si vous avez également défini une info-bulle à l’aide de la propriété <codeph>tooltip</codeph>, l’info-bulle s’affiche à la place du texte de l’étiquette.</p>
     
      <p>Il s’agit de la propriété ButtonBase par défaut.</p>
     
      <p>Cette propriété est une façade de type <codeph>String</codeph> de la propriété <codeph>content</codeph>. Cette propriété peut être liée et partage la distribution de l’événement « contentChange » avec la propriété <codeph>content</codeph>.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.xml#label/content"><linktext>content</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
       <codeph/><codeph/><codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext/></link><link href="spark.components.xml#DataGroup/overlay"><linktext/></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Constructeur. 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc>
          <codeph/> <codeph/>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
           
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
          
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
          <codeph/>
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
           
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  La classe TrackBase est une classe de base pour les composants comprenant un rail et un ou plusieurs boutons de curseur, par exemple Slider et ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  Durée en millisecondes de l’animation de glissement lorsque vous cliquez sur le rail pour déplacer un curseur. Ce style est utilisé pour les composants Slider et Scrollbar. Dans le cas des composants Slider, tout clic sur le rail lance une animation utilisant ce style, pendant le déplacement du curseur jusqu’à la position sur laquelle l’utilisateur a cliqué. Dans le cas des composants ScrollBar, ce style est utilisé uniquement lorsque l’utilisateur appuie sur la touche Maj et clique sur le rail, provoquant ainsi le déplacement du curseur vers la position sur laquelle l’utilisateur a cliqué. Si l’utilisateur clique sur le rail d’un composant ScrollBar sans appuyer sur Maj, le comportement de pagination est utilisé. Le style <codeph>smoothScrolling</codeph> doit également être défini pour le composant ScrollBar pour qu’une animation soit lancée lorsque l’utilisateur clique tout en maintenant la touche Maj enfoncée.
  
 <p>Cette durée correspond à une animation qui s’étend sur la distance complète du rail. La durée de l’animation est réduite proportionnellement pour les distances inférieures.</p>
   </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Etat désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Etat normal.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage définissant un bouton qui peut être déplacé le long du rail pour augmenter ou diminuer la propriété <codeph>value</codeph>. Toute modification apportée à la propriété <codeph>value</codeph> est automatiquement répercutée sur la position du bouton du curseur par rapport au rail.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage définissant un bouton qui, lorsqu’il est actionné, affecte à la propriété <codeph>value</codeph> la valeur correspondant à la position actuelle du bouton sur le rail.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
     <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TrackBase est une classe de base pour les composants comprenant un rail et un ou plusieurs boutons de curseur, par exemple Slider et ScrollBar. Elle déclare deux parties d’habillage obligatoires : <codeph>thumb</codeph> et <codeph>track</codeph>. La classe TrackBase fournit également le code permettant le déplacement du bouton de curseur, qui est partagé par les classes Slider et ScrollBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Slider"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="spark.components.supportClasses.xml#ScrollBar"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.SliderEvent_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  Distribué lorsque le curseur est relâché, ce qui signifie que l’utilisateur relâche le bouton de la souris après un événement thumbPress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.SliderEvent</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le curseur est relâché, ce qui signifie que l’utilisateur relâche le bouton de la souris après un événement <codeph>thumbPress</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.SliderEvent_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  Distribué lorsque le curseur est activé, ce qui signifie que l’utilisateur appuie sur le bouton de la souris alors que le pointeur survole le curseur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.SliderEvent</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le curseur est activé, ce qui signifie que l’utilisateur appuie sur le bouton de la souris alors que le pointeur survole le curseur.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le curseur, puis le déplace avec sa souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le curseur, puis le déplace avec sa souris. Cet événement est toujours précédé d’un événement <codeph>thumbPress</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Distribué avant que la valeur du contrôle ne change suite à l’interaction d’un utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant que la valeur du contrôle ne change suite à l’interaction d’un utilisateur.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la valeur du contrôle change suite à une interaction utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur du contrôle change suite à une interaction utilisateur.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      Conversion d’un emplacement en pixels x, y relatif à la piste en une valeur comprise entre des limites minimales et maximales. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Valeur comprise entre les valeurs minimum et maximum.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x de l’emplacement par rapport à l’origine de la piste. 
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée y de l’emplacement par rapport à l’origine de la piste. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Conversion d’un emplacement en pixels x, y relatif à la piste en une valeur comprise entre des limites minimales et maximales.   
     
      <p>Les sous-classes TrickBase doivent remplacer cette méthode et effectuer des conversions qui prennent leur propre géométrie en compte. Par exemple, un curseur vertical peut calculer une valeur comme suit :
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>Par défaut, cette méthode renvoie seulement <codeph>minimum</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:system_mouseWheelHandler"><apiName>system_mouseWheelHandler</apiName><shortdesc>
      Traite l’événement mouseWheel lorsque le composant a le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      Traite l’événement <codeph>mouseWheel</codeph> lorsque le composant a le focus. La valeur de déplacement du curseur correspond au delta de l’événement de souris multiplié par la valeur <codeph>stepSize</codeph>.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Définit les limites des parties d’habillage - généralement, le curseur - dont la géométrie n’est pas entièrement spécifiée par la mise en page de l’habillage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit les limites des parties d’habillage - généralement, le curseur - dont la géométrie n’est pas entièrement spécifiée par la mise en page de l’habillage. 
     
      <p>La plupart des sous-classes annulent cette méthode pour mettre à jour la taille, la position et la visibilité du curseur en fonction des propriétés <codeph>minimum</codeph>, <codeph>maximum</codeph> et <codeph>value</codeph>. </p>
     
      <p>N’a aucun effet par défaut. </p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  La classe Skin définit la classe de base des habillages utilisés par les composants dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Skin définit la classe de base des habillages utilisés par les composants dont l’habillage peut être configuré. La classe SkinnableComponent définit la classe de base des composants dont l’habillage peut être configuré.
 
  <p>En règle générale, les classes d’habillage sont écrites en langage MXML, comme l’illustre l’exemple suivant :</p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  La classe DropDownController gère la souris, le clavier et les interactions de focus pour un bouton d’ancrage et son déroulement associé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DropDownController gère la souris, le clavier et les interactions de focus pour un bouton d’ancrage et son déroulement associé. Cette classe est utilisée par les composants déroulants, tels que la commande DropDownList, pour gérer l’ouverture et la fermeture de la liste déroulante par l’interaction de l’utilisateur. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Fermez la liste déroulante D et distribuez un événement DropDownEvent.CLOSE. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>true</codeph>, engagez l’élément de données sélectionné. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fermez la liste déroulante et distribuez un événement <codeph>DropDownEvent.CLOSE</codeph>.  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Ouvrez la liste déroulante et distribuez l’événement DropdownEvent.OPEN. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ouvrez la liste déroulante et distribuez un événement <codeph>DropdownEvent.OPEN</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      Fermez la liste déroulante si elle n’est plus dans le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet événement pour l’événement <codeph>FOCUS_OUT</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fermez la liste déroulante si elle n’est plus dans le focus. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      Gère les interactions utilisateur de clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si la valeur <codeph>keyCode</codeph> a été reconnue et gérée.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>L’objet événement de l’événement clavier. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère les interactions utilisateur de clavier.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
	  Liste des objets d’affichage à considérer comme faisant partie de la zone active de la liste déroulante. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
	  Liste des objets d’affichage à considérer comme faisant partie de la zone active de la liste déroulante. Des clics de souris sur n’importe quel composant répertorié comme une inclusion n’ pas automatiquement la fermeture de la liste déroulante. 
	         
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Contient la valeur true si la liste déroulante est ouverte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient la valeur <codeph>true</codeph> si la liste déroulante est ouverte.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      Spécifie le délai, en millisecondes, à attendre pour ouvrir la liste déroulante lorsque le bouton d’ancrage est survolé par la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le délai, en millisecondes, à attendre pour ouvrir la liste déroulante lorsque le bouton d’ancrage est survolé par la souris. Si la valeur est définie sur <codeph>NaN</codeph>, alors la liste déroulante s’ouvre sur un clic, pas sur un survol.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      Référence à la partie d’habillage openButton du composant déroulant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      Référence à la partie d’habillage <codeph>openButton</codeph> du composant déroulant. 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
	  Référence à la classe SystemManager utilisée pour le suivi de la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
	  Une référence à la classe <codeph>SystemManager</codeph> utilisée pour le suivi de la souris. Si aucune classe n’est spécifiée, le contrôleur utilisera la classe systemManager associée à openButton. 
	         
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  ButtonBarHorizontalLayout est une présentation spécialement conçue pour les habillages Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarHorizontalLayout est une présentation spécialement conçue pour les habillages Spark ButtonBar. La présentation place les enfants horizontalement, de gauche à droite. La présentation définit la dimension des enfants de sorte qu’ils soient tous affichés à leur taille préférée. Si l’espace est suffisant, les dimensions de chaque enfant correspondent à sa taille préférée, à laquelle vient s’ajouter l’espace disponible restant, réparti uniformément entre les enfants. Si l’espace est insuffisant et ne permet pas d’afficher tous les enfants à leur taille préférée, les enfants dont la largeur est inférieure à la largeur moyenne sont définis à leur taille préférée et les autres éléments sont réduits d’autant. La hauteur de tous les enfants correspond à la hauteur du parent.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Espace horizontal entre les éléments de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace horizontal entre les éléments de présentation. Notez que l’écart n’est appliqué qu’entre les éléments de présentation ; aussi, si un seul élément est présent, l’écart est sans effet sur la présentation. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Slider"><apiName>Slider</apiName><shortdesc>
  La classe Slider permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Boolean">
<description>
  Lorsque la valeur est <codeph>true</codeph>, la valeur du curseur est validée lorsque l’utilisateur fait glisser ce dernier le long du rail et non lorsque le bouton du curseur est relâché.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’anneau de focus de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:Slider" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      Partie d’habillage définissant une astuce sur les données qui affiche une version formatée de la valeur actuelle. L’astuce sur les données apparaît pendant que l’utilisateur fait glisser le curseur. Il s’agit d’une partie d’habillage dynamique qui doit être de type IFactory.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Slider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Slider
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    showDataTip="true"
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    breakOpportunity="AUTO"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusColor
    fontFamily="Times New Roman"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Slider permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail. La valeur actuelle du curseur est déterminée par son emplacement relatif entre ses extrémités, ce qui correspond aux valeurs minimum et maximum du curseur. La classe Slider est une classe de base pour HSlider et VSlider. 
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Slider:Slider"><apiName>Slider</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Slider:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      Utilisée pour placer l’astuce sur les données lorsqu’elle est visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>L’occurrence <codeph>dataTip</codeph> pour la mise à jour et la position 
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Position initiale de l’occurrence <codeph>dataTip</codeph> dans l’habillage 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Utilisée pour placer l’astuce sur les données lorsqu’elle est visible. Les sous-classes doivent implémenter cette fonction. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Slider:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      Nombre de décimales à utiliser pour le texte de l’astuce sur les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de décimales à utiliser pour le texte de l’astuce sur les données. La valeur 0 arrondit toutes les valeurs à un nombre entier. Cette valeur est ignorée si une valeur est spécifiée pour <codeph>dataTipFormatFunction</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      Si la valeur est true, une astuce sur les données contenant la valeur actuelle du curseur s’affiche lors de l’interaction utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, une astuce sur les données contenant la valeur actuelle du curseur s’affiche lors de l’interaction utilisateur. Par ailleurs, la partie d’habillage <codeph>dataTipFactory</codeph> doit être définie dans l’habillage pour que l’astuce sur les données s’affiche. 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      Fonction de rappel qui formate le texte de l’astuce sur les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction de rappel qui formate le texte de l’astuce sur les données. La fonction accepte un seul nombre comme argument et retourne une chaîne formatée.
           <p>La fonction présente la signature suivante :</p>
      <pre>
      funcName(value:Number):Object
      </pre>
           <p>L’exemple ci-dessous ajoute le symbole du dollar avant le texte de l’astuce sur les données et formate le texte en utilisant la propriété <codeph>dataTipPrecision</codeph> d’un contrôle Slider appelé « slide » : </p>
           <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:maximum:get"><apiName>maximum</apiName><shortdesc>
      Nombre représentant la valeur maximale autorisée de value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre représentant la valeur maximale autorisée de <codeph>value</codeph>. Si la valeur de <codeph>minimum</codeph> ou <codeph>value</codeph> est supérieure à <codeph>maximum</codeph>, ces deux valeurs sont modifiées de manière à refléter la nouvelle valeur <codeph>maximum</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Slider:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Valeur du curseur lorsque le bouton de la souris est relâché. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur du curseur lorsque le bouton de la souris est relâché. Cette propriété contient également les valeurs temporaires définies pendant l’animation du curseur si la valeur du style <codeph>liveDragging</codeph> est true, la valeur réelle est uniquement définie lorsque l’animation se termine. 
     
      <p>Si le style <codeph>liveDragging</codeph> style est défini sur false, la valeur du curseur est uniquement définie lorsque l’utilisateur relâche le bouton de la souris. La valeur n’est pas mise à jour pendant le curseur est en cours de glissement. </p>
     
      <p>Cette propriété est mise à jour lorsque le curseur se déplace, même si <codeph>liveDragging</codeph> est false. </p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  Proxy de glissement par défaut utilisé lors des glissements effectués depuis un contrôle basé sur Spark List. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Proxy de glissement par défaut utilisé lors des glissements effectués depuis un contrôle basé sur Spark List. 
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
    
 
  <p><codeph/><codeph/> <codeph/> <codeph/></p> 
 
  <p><codeph/> <codeph/> </p>
 
  <p><codeph/> </p>
 
  <p><codeph/><codeph/><codeph/></p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p> </p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  La classe ListBase est la classe de base de tous les composants qui prennent en charge la sélection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    dataProvider="null"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ListBase est la classe de base de tous les composants qui prennent en charge la sélection. 
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Distribué suite à un changement de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué suite à un changement de focus.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué suite à un changement de sélection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué suite à un changement de sélection. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Distribué lorsque la sélection s’apprête à être modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection s’apprête à être modifiée. L’appel de la méthode <codeph>preventDefault()</codeph> sur l’événement empêche la modification de la sélection.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Ajuste l’index sélectionné de sorte qu’il tienne compte des éléments qui sont ajoutés à ce composant ou qui en sont supprimés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Nouvel index.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>La valeur est <codeph>true</codeph> si un élément a été ajouté au composant et <codeph>false</codeph> si un élément a été supprimé. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste l’index sélectionné de sorte qu’il tienne compte des éléments qui sont ajoutés à ce composant ou qui en sont supprimés. Cette méthode ajuste la valeur d’index sélectionnée et distribue un événement <codeph>change</codeph>. Elle ne distribue pas d’événement <codeph>changing</codeph> et n’autorise pas l’annulation de la sélection. En outre, elle n’appelle pas la méthode <codeph>itemSelected()</codeph>, car le même élément est sélectionné. Le seul élément modifié est l’index de l’élément. 
     
      <p>Un événement <codeph>change</codeph> est distribué lors de l’appel suivant de la méthode <codeph>commitProperties()</codeph>.</p>
     
      <p>L’événement <codeph>changing</codeph> n’est pas envoyé lorsque la propriété <codeph>selectedIndex</codeph> est ajustée.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      Appelé lorsqu’un élément a été ajouté à ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>L’index de l’élément en cours d’ajout.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsqu’un élément a été ajouté à ce composant. Les propriétés associées à sélection et caret sont ajustées en conséquence.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      Appelé lorsqu’un élément a été supprimé de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>L’index de l’élément en cours de suppression.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsqu’un élément a été supprimé de ce composant. Les propriétés associées à sélection et caret sont ajustées en conséquence.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      Appelée lorsqu’un élément est sélectionné ou désélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index d’élément sélectionné.
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si l’élément est sélectionné, <codeph>false</codeph> dans le cas contraire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’un élément est sélectionné ou désélectionné. Les sous-classes doivent remplacer cette méthode pour afficher la sélection.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      Appelée dans tous les cas, que l’élément soit ou non dans son état d’insertion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index d’élément mis à l’état d’insertion. 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si l’élément est à l’état d’insertion, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée dans tous les cas, que l’élément soit ou non dans son état d’insertion. Les sous-classes doivent remplacer cette méthode pour afficher le signe d’insertion. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      En fonction de l’élément de données, renvoie le texte correct normalement affiché par une fonctionnalité de rendu d’élément prenant en compte les propriétés labelField et labelFunction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne représentant le texte à afficher pour la fonctionnalité de rendu de l’élément transmise. 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de données. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      En fonction de l’élément de données, renvoie le texte correct normalement affiché par une fonctionnalité de rendu d’élément prenant en compte les propriétés <codeph>labelField</codeph> et <codeph>labelFunction</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      Constante statique représentant la valeur « no selection ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Constante statique représentant la valeur « no selection ».
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      Si la valeur est true et que l’utilisateur navigue à l’aide des touches de direction, le composant l’enveloppe dès qu’une extrémité est atteinte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph> et que l’utilisateur navigue à l’aide des touches de direction, le composant l’enveloppe dès qu’une extrémité est atteinte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Elément qui est actuellement le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Elément qui est actuellement le focus. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      Le nom du champ des éléments du fournisseur de données à afficher en tant qu’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nom du champ des éléments du fournisseur de données à afficher en tant qu’étiquette. La propriété <codeph>labelFunction</codeph> remplace cette propriété.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé. La propriété <codeph>labelFunction</codeph> remplace la propriété <codeph>labelField</codeph>.
     
      <p>Vous pouvez spécifier une valeur <codeph>labelFunction</codeph> recherchant les champs appropriés et renvoyant une chaîne affichable. La propriété <codeph>labelFunction</codeph> permet également de gérer le formatage et la localisation. </p>
     
      <p>La fonction label accepte un seul argument, en l’occurrence l’élément du fournisseur de données, et renvoie une chaîne.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Si la valeur est true, un élément de données doit toujours être sélectionné dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, un élément de données doit toujours être sélectionné dans le contrôle. Si la valeur est <codeph>true</codeph>, la propriété <codeph>selectedIndex</codeph> est toujours définie sur une valeur comprise entre 0 et (<codeph>dataProvider.length</codeph> -1), 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index de base zéro de l’élément sélectionné ou -1 si aucun élément n’est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index de base zéro de l’élément sélectionné ou -1 si aucun élément n’est sélectionné. La définition de la propriété <codeph>selectedIndex</codeph> désélectionne l’élément actuellement sélectionné et sélectionne l’élément présent à l’index spécifié.
     
      <p>La valeur est toujours comprise entre -1 et (<codeph>dataProvider.length</codeph> - 1). Si des éléments présents à un index inférieur à la valeur <codeph>selectedIndex</codeph> sont supprimés du composant, l’index sélectionné est réduit en conséquence.</p>
     
      <p>Si l’élément sélectionné est supprimé, l’index sélectionné est défini sur :</p>
     
      <ul>
        <li>-1 si la valeur <codeph>requiresSelection</codeph> = <codeph>false</codeph> ou s’il ne reste plus d’éléments ;</li>
        <li>0 si la valeur<codeph>requiresSelection</codeph> = <codeph>true</codeph> et qu’il reste au moins un élément.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Elément actuellement sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Elément actuellement sélectionné. Le fait de définir cette propriété désélectionne l’élément actuellement sélectionné et sélectionne l’élément nouvellement spécifié.
     
      <p>Si <codeph>selectedItem</codeph> correspond à un élément non présent dans ce composant, aucun élément n’est sélectionné et la valeur de <codeph>selectedItem</codeph> devient <codeph>undefined</codeph>.</p>
     
      <p>Si l’élément sélectionné est supprimé, l’élément sélectionné est défini sur :</p>
     
      <ul>
        <li><codeph>undefined</codeph> si la valeur<codeph>requiresSelection</codeph> = <codeph>false</codeph> ou s’il ne reste plus d’éléments ;</li>
        <li>le premier élément si la valeur <codeph>requiresSelection</codeph> = <codeph>true</codeph> et qu’il reste au moins un élément.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      Définit la valeur de la propriété useVirtualLayout de la mise en page associée à cette commande. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la valeur de la propriété <codeph>useVirtualLayout</codeph> de la mise en page associée à cette commande. Si la mise en page est remplacée ultérieurement et la valeur de cette propriété est <codeph>true</codeph>, la propriété <codeph>useVirtualLayout</codeph> de la nouvelle mise en page est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  La classe de base pour les composants habillables, tels que les Spark TextInput et TextArea, qui incluent une occurrence de RichEditableText dans leur habillage pour fournir des fonstionnalités d’affichage, de défilement, de sélection et de modification du texte riches. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’anneau de focus de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de la bordure de composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la bordure de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de la bordure de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.components:RichEditableText">
<description>
      Texte RichEditableText pouvant être présent dans chaque habillage affecté à ce composant.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe de base pour les composants habillables, tels que les Spark TextInput et TextArea, qui incluent une occurrence de RichEditableText dans leur habillage pour fournir des fonstionnalités d’affichage, de défilement, de sélection et de modification du texte riches. 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué au terme d’une opération utilisateur de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué au terme d’une opération utilisateur de modification.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Distribué avant une opération utilisateur de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant une opération utilisateur de modification. Vous pouvez modifier l’opération ou annuler l’événement pour empêcher le traitement de l’opération. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Distribué après modification, quelle qu’en soit la raison, des propriétés selectionAnchorPosition et/ou selectionActivePosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après modification, quelle qu’en soit la raison, des propriétés <codeph>selectionAnchorPosition</codeph> et/ou <codeph>selectionActivePosition</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.components.RichEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à ajouter. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.components.RichEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à insérer. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#insertText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.RichEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.RichEditableText#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.components.RichEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Position des caractères spécifiant la fin de la sélection qui reste fixe lorsque la sélection est étendue. 
     
      </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Position des caractères spécifiant la fin de la sélection qui se déplace lorsque la sélection est étendue. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#selectRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="spark.components.RichEditableText#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc conref="spark.components.RichEditableText#editable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#editable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.RichEditableText#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.RichEditableText#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="spark.components.RichEditableText#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="spark.components.RichEditableText#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.RichEditableText#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc conref="spark.components.RichEditableText#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc conref="spark.components.RichEditableText#selectionActivePosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectionActivePosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc conref="spark.components.RichEditableText#selectionAnchorPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectionAnchorPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc conref="spark.components.RichEditableText#selectionHighlighting">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.RichEditableText#selectionHighlighting">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc conref="spark.components.RichEditableText#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#text">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>