<?xml version="1.0"?>
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  PopUpAnchor コンポーネントは、DropDownList コンポーネントのように、レイアウト内でポップアップまたはドロップダウンするコントロールの位置を設定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpAnchor コンポーネントは、DropDownList コンポーネントのように、レイアウト内でポップアップまたはドロップダウンするコントロールの位置を設定するために使用されます。ポップアップコントロールまたはドロップダウンコントロールは PopUpManager によって表示リストに追加されるため、通常はレイアウトに加わりません。PopUpAnchor コンポーネントは、コンテナに追加されてレイアウトされる UIComponent です。このコンポーネントは、自身を基準にして、ポップアップコントロールまたはドロップダウンコントロールのサイズ設定と配置を行います。このコンポーネントには、視覚的な外観がありません。
 
  <p>PopUpAnchor コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      コンストラクター
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクター
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      popUp コントロールが配置されるか、表示されるか、updatePopUpTransform() が呼び出されると、呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>グローバル座標系での <codeph>popUp</codeph> コントロールの絶対位置です。  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>popUp</codeph> コントロールが配置されるか、表示されるか、<codeph>updatePopUpTransform()</codeph> が呼び出されると、呼び出されます。<codeph>popUp</codeph> コントロールの位置を変更するには、この関数をオーバーライドします。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      popUp コントロールの変換マトリックスを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>popUp</codeph> コントロールの変換マトリックスを更新します。通常、PopUpAnchor に対してエフェクトを実行するときには、この関数を呼び出します。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      popUp コントロールが開かれるときの、PopUpAnchor コンポーネントに対する相対的な位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>popUp</codeph> コントロールが開かれるときの、PopUpAnchor コンポーネントに対する相対的な位置です。有効な値は、<codeph>"left"、"right"、"above"、"below"、"center"</codeph> および <codeph>"topLeft"</codeph> です。
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      true の場合、popUp コントロールを PopUpManager に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      true の場合、<codeph>popUp</codeph> コントロールを PopUpManager に追加します。false の場合、削除します。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      PopUpAnchor が開かれたときに PopUpManager に追加する IFlexDisplayObject です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      PopUpAnchor が開かれたときに PopUpManager に追加する IFlexDisplayObject です。<codeph>popUp</codeph> コントロールが IFocusManagerContainer を実装する場合、<codeph>popUp</codeph> コントロールが独自の FocusManager を持つことになります。ユーザーが Tab キーを使用してコントロール間を移動する場合は、<codeph>popUp</codeph> コントロール内のコントロールだけにアクセスできます。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      true の場合、popUp コントロールの高さは PopUpAnchor の高さと同じ値に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      true の場合、<codeph>popUp</codeph> コントロールの高さは PopUpAnchor の高さと同じ値に設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      true の場合、popUp コントロールの幅は PopUpAnchor の幅と同じ値に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      true の場合、<codeph>popUp</codeph> コントロールの幅は PopUpAnchor の幅と同じ値に設定されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  List コントロールでは、アイテムを垂直方向に並べて表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:selectionColor">
  </description>
<default>0xA8C6EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  <codeph/>
 
  </description>
<default>spark.skins.spark.ListDropIndicator
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  <codeph>IFlexDisplayObject</codeph> 型にする必要があります。
 
  <p>このクラスで <codeph>ILayoutManagerClient</codeph> インターフェイスを実装する場合は、DragManager によってインスタンスが検証されます。</p>
 
  <p>このクラスで <codeph>IVisualElement</codeph> インターフェイスを実装する場合、インスタンスの <codeph>owner</codeph> プロパティはドラッグを開始した List に設定されます。</p>
 
  <p>AIR の DragManager はインスタンスのスナップショットを作成しますが、AIR 以外の DragManager はインスタンスを直接使用します。</p>
 
  </description>
<default>spark.components.supportClasses.ListItemDragProxy
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
 
   </description>
<default>0#CCCCCC
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      List 上にドラッグすると、レイアウトによってドロップインジケーターのサイズと位置が調整され、挿入位置の輪郭が示されます。
     
      <p><codeph/></p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      List をスクロールするために使用する、オプションの Scroller です。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    dragIndicator="ListItemDragProxy"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  List コントロールでは、アイテムを垂直方向に並べて表示します。その機能は、HTML の SELECT フォームエレメントによく似ています。一度にすべてのアイテムを表示できない場合は、垂直スクロールバーが表示され、ユーザーがリストのすべてのアイテムにアクセスできるようになります。オプションの水平スクロールバーは、リストアイテムが水平方向に収まらない場合に、ユーザーがアイテムを表示するために使用します。 <codeph>allowMultipleSelection</codeph> プロパティの値に応じて、ユーザーはリストから単一または複数のアイテムを選択できます。
 
  </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      ドラッグ &amp; ドロップ操作の一部として、選択されたアイテムを DragSource オブジェクトに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>データの追加先となる DragSource オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドラッグ &amp; ドロップ操作の一部として、選択されたアイテムを DragSource オブジェクトに追加します。 他のデータをドラッグソースに追加するには、このメソッドをオーバーライドします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      このコンポーネントに追加されるかこのコンポーネントから削除されるアイテムに応じて、選択されたインデックスを調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>新しいインデックスです。
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>アイテムがコンポーネントに追加された場合は <codeph>true</codeph>、アイテムが削除された場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントに追加されるかこのコンポーネントから削除されるアイテムに応じて、選択されたインデックスを調整します。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      検出されたキーストロークまたはキーストロークの組み合わせに基づいて選択範囲を調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>検出されたキーボードイベントです。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      検出されたキーストロークまたはキーストロークの組み合わせに基づいて選択範囲を調整します。キーストロークがレイアウトに送信されると、レイアウトの getNavigationDestinationIndex() メソッドにより、現在フォーカスがあるアイテムに基づいて、どのインデックスに移動するかが決定されます。インデックスが決定されると、単一選択、キャレットアイテム、および必要に応じて複数選択が、新しく選択されたアイテムを反映するように調整されます。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      ObjectUtil.copy() メソッドを呼び出してオブジェクトのディープコピーを作成し、UIDUtil.createUID() メソッドを呼び出してそのコピーの uid プロパティ（存在する場合）を新しい値に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>オブジェクトのコピーです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>コピーするアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>ObjectUtil.copy()</codeph> メソッドを呼び出してオブジェクトのディープコピーを作成し、そのコピーの <codeph>uid</codeph> プロパティ (存在する場合) を新しい値に置き換えます。これは、<codeph>UIDUtil.createUID()</codeph> メソッドを呼び出すことによって行われます。
     
      <p>このメソッドは、ドラッグ &amp; ドロップによるコピー作成で使用されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      <codeph/><codeph/> 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
	  <codeph/>
	 
	  </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext/></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc> 
	 
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
	  
	 
	  </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext/></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      データアイテムが表示されるようにスクロールする便利なメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>データアイテムのインデックスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データアイテムが表示されるようにスクロールする便利なメソッドです。指定したインデックスに位置するデータアイテムが完全に表示されていない場合、そのデータアイテムが表示されるように List がスクロールされます。データアイテムが既に表示されている場合は、スクロールされません。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:findKey"><apiName>findKey</apiName><shortdesc>
      eventCode パラメーターの文字で始まる次のアイテムをデータプロバイダー内で検索します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>一致するものが見つかった場合は <codeph>true</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/><apiDesc>キーボード上で押されたキーです。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>eventCode</codeph> パラメーターの文字で始まる次のアイテムをデータプロバイダー内で検索します。 このメソッドをオーバーライドすると、より高度な先読み検索を実行できます。 検索は、<codeph>selectedIndex</codeph> の位置から開始されます。データプロバイダーの末尾に達すると、先頭から再開されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:findString"><apiName>findString</apiName><shortdesc>
      ストリングに基づいてリスト内のアイテムを検索し、選択をそのアイテムに移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一致するものが見つかった場合は <codeph>true</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>str</apiItemName><apiType value="String"/><apiDesc>照合するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ストリングに基づいてリスト内のアイテムを検索し、選択をそのアイテムに移動します。 検索は、<codeph>selectedIndex</codeph> の位置から開始されます。データプロバイダーの末尾に達すると、先頭から再開されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      true の場合、複数選択が有効です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、複数選択が有効です。実行時に切り替えると、現在の選択はクリアされます。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      このコントロールの外にアイテムをドラッグし、他のコントロールにドロップできるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールの外にアイテムをドラッグし、他のコントロールにドロップできるかどうかを示すフラグです。 <codeph>true</codeph> の場合、コントロールのドラッグ操作は有効です。 <codeph>dropEnabled</codeph> プロパティも <codeph>true</codeph> の場合には、アイテムをドラッグし、このコントロール内にドロップしてアイテムの順序を変更することができます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      ドラッグ &amp; ドロップ操作でコントロールからアイテムを単にコピーするのではなく、移動できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグ &amp; ドロップ操作でコントロールからアイテムを単にコピーするのではなく、移動できるかどうかを示すフラグです。 このフラグが <codeph>true</codeph> であり、<codeph>dragEnabled</codeph> プロパティも <codeph>true</codeph> の場合は、アイテムを移動できます。 データプロバイダーからアイテムを削除できないか、削除しないことが望ましい場合が多いので、ドラッグ &amp; ドロップ中に MOVE 操作を許可しないようにすることをお勧めします。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      ドラッグしたアイテムをコントロールにドロップできるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグしたアイテムをコントロールにドロップできるかどうかを示すフラグです。
     
      <p>このプロパティを <codeph>true</codeph> に設定した場合、コントロールはすべてのデータ形式を受け入れ、ドラッグされたデータがデータプロバイダー内のデータの形式と一致するものと見なします。 ドラッグ対象のデータの形式を明示的に検査したい場合には、ドロップされるデータがリストクラスに受け入れられる方法をカスタマイズするために、1 つまたは複数のドラッグイベント（例えば <codeph>dragEnter</codeph> や <codeph>dragOver</codeph>）を処理して DragEvent の <codeph>preventDefault()</codeph> メソッドを呼び出す必要があります。</p>
     
      <p><codeph>dropEnabled</codeph> を <codeph>true</codeph> に設定すると、<codeph>showDropFeedback()</codeph> メソッドと <codeph>hideDropFeedback()</codeph> メソッドが自動的に呼び出されてドロップインジケーターが表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      現在選択されているアイテムのインデックスを表す int の Vector です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在選択されているアイテムのインデックスを表す int の Vector です。<codeph>allowMultipleSelection</codeph> を <codeph>false</codeph> に設定して複数選択を無効にしてある場合、このプロパティを設定すると、Vector の最初のインデックスに対応するデータアイテムが選択されます。  
     
      <p><codeph>allowMultipleSelection</codeph> を <codeph>true</codeph> に設定して複数選択を有効にした場合、このプロパティには、選択されたインデックスのリストが、選択されたのとは逆の順序で格納されます。つまり、Vector の最初の要素は、最後に選択されたアイテムに対応します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      現在選択されているアイテムを表す Object の Vector です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在選択されているアイテムを表す Object の Vector です。<codeph>allowMultipleSelection</codeph> を <codeph>false</codeph> に設定して複数選択を無効にしてある場合、このプロパティを設定すると、Vector の最初のアイテムに対応するデータアイテムが選択されます。  
     
      <p><codeph>allowMultipleSelection</codeph> を <codeph>true</codeph> に設定して複数選択を有効にした場合、このプロパティには、選択されたインデックスのリストが、選択されたのとは逆の順序で格納されます。つまり、Vector の最初の要素は、最後に選択されたアイテムに対応します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      このコントロールに関連付けられているレイアウトの useVirtualLayout プロパティの値を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      このコントロールに関連付けられているレイアウトの <codeph>useVirtualLayout</codeph> プロパティの値を設定します。レイアウトが後で置換されて、このプロパティの値が <codeph>true</codeph> の場合、新しいレイアウトの <codeph>useVirtualLayout</codeph> プロパティは <codeph>true</codeph> に設定されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
   
   <p><b/></p>
   </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      IDataRenderer インターフェイスによって定義された data プロパティの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      IDataRenderer インターフェイスによって定義された <codeph>data</codeph> プロパティの実装です。
      
      <p>このプロパティは Bindable です。これにより、「dataChange」イベントが送出されます。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  TextArea は、ユーザーが複数行のリッチフォーマットテキストを入力および編集するときに使用するテキスト入力コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><skinStates><SkinState name="disabled" owner="spark.components:TextArea" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:TextArea" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style.verticalScrollPolicy">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style.horizontalScrollPolicy">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      スキンに含まれるオプションの Scroller です。RichEditableText をスクロールするために使用します。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines=""
    textFlow="24"
    widthInChars=""
  
    <strong>Styles</strong>
    horizontalScrollPolicy="<i>No default</i>"
    symbolColor=""
    verticalScrollPolicy="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextArea は、ユーザーが複数行のリッチフォーマットテキストを入力および編集するときに使用するテキスト入力コントロールです。テキストをスクロールするための水平方向と垂直方向のスクロールバーを表示し、マウスホイールによる垂直スクロールをサポートします。
 
  <p>テキストのフォーマットを変更するためのユーザーインターフェイスはありませんが、プログラムを通じてテキストをフォーマットするために使用できる API が含まれています。例えば、クリックすると、選択したテキストが太字になるようなボタンを作成できます。</p>
 
  <p>Spark 版の TextArea では、Flash Player 10 の Flash Text Engine（FTE）をベースとして作成された Text Layout Framework（TLF）ライブラリが使用されます。これらのレイヤーを組み合わせることにより、国際化対応の高品質な文字体裁とレイアウト機能を備えたテキスト編集が可能になります。従来の MX 版の TextArea では、古い TextField クラスを使用してテキストが表示されます。</p>
 
  <p>Spark の TextArea と MX の TextArea コントロールの最も重要な違いは、次のとおりです。
  <ul>
    <li>Spark の TextArea では、文字体裁、国際言語のサポート、およびテキストレイアウトの機能が向上しています。</li>
    <li>Spark の TextArea にはリッチテキストのオブジェクト指向モデルがありますが、MX 版にはありません。</li>
    <li>Spark の TextArea では、大量のテキストを表示する機能が強化されています。</li>
    <li>Spark の TextArea では、MX 版とは異なる方法でフォントを埋め込む必要があります。フォントを埋め込む際に <codeph>embedAsCFF</codeph> 属性を使用する方法については、『Using Flex 』の「Using embedded fonts」を参照してください。<i/></li>
  </ul></p>
 
  <p>Spark の TextArea コンロールでは、リッチテキストの TLF オブジェクト指向モデルが使用されます。このモデルでは、区分、段落、スパン、ハイパーリンク、画像などのテキストレイアウト要素が ActionScript オブジェクトによって実行時に表現されます。これらのオブジェクトは、プログラムを通じてアクセスして操作できます。リッチテキストを表す TLF の中心的なオブジェクトは TextFlow です。TextArea コントロールに対してリッチテキストを指定するには、コントロールの <xref href="TextArea.html#textFlow">textFlow</xref> プロパティを TextFlow インスタンスに設定します。</p>
 
  <p>複数のフォーマットが混在するテキストを表示する必要がない場合は、TextArea の <codeph>text</codeph> プロパティをプレーンテキスト文字列に設定します。<codeph>text</codeph> プロパティと <codeph>textFlow</codeph> プロパティの相互作用（例えば、一方を設定して他方を取得する方法など）について詳しくは、各プロパティの説明を参照してください。</p>
 
  <p>次の例に示すように、コンパイル時に、TLF マークアップタグを TextArea タグ内に配置できます。
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  この例では、MXML コンパイラーによって TextArea の <codeph>content</codeph> プロパティが設定され、指定した <xref href="../../flashx/textLayout/elements/FlowElement.html">FlowElements</xref> から <xref href="../../flashx/textLayout/elements/TextFlow.html">TextFlow</xref> オブジェクトが作成されます。</p>
 
  <p>デフォルトのテキストフォーマットは、<xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> や <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref> などの CSS スタイルによって決定されます。TextFlow オブジェクトでフォーマット情報が指定されている場合は、CSS スタイルで指定されているデフォルトのフォーマットがオーバーライドされます。</p>
 
  <p>TextArea コンテンツの特性には、スタイルを使用して制御できるものが数多くあります。次に一般的な特性の一部を示します。</p>
 
  <ul><li>行の間隔は <codeph>lineHeight</codeph> スタイルを使用して制御します。</li>
  <li>段落の間隔は <codeph>paragraphSpaceBefore</codeph> スタイルと <codeph>paragraphSpaceAfter</codeph> スタイルを使用して制御します。</li>
  <li>テキストの整列や均等割り付けには、<codeph>textAlign</codeph> スタイルと <codeph>textAlignLast</codeph> スタイルを使用します。</li>
  <li>コントロールの境界線からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph>、および <codeph>paddingBottom</codeph> スタイルを使用します。</li>
  </ul>
 
  <p>デフォルトでは、コントロールの右端でテキストが折り返されます。テキストの量が TextArea に収まりきらない場合は、垂直スクロールバーが自動的に表示されます。<codeph>lineBreak</codeph> スタイルを <codeph>"explicit"</codeph> に設定すると、明示的に改行が指定されている位置でのみ行が折り返されます。これには、CR（<codeph>"¥r"</codeph>）、LF（<codeph>"¥n"</codeph>）または CR+LF（<codeph>"¥r¥n"</codeph>）を <codeph>text</codeph> で使用した場合、または <codeph>&lt;p></codeph> と <codeph>&lt;br/></codeph> を TLF マークアップで使用した場合と同じ効果があります。これらの場合、コントロールの幅を超えるテキスト行があるときは、水平スクロールバーが自動的に表示されます。</p>
 
  <p><codeph>widthInChars</codeph> プロパティおよび <codeph>heightInChars</codeph> プロパティを使用すると、フォントサイズに応じて伸縮する方式で TextArea の幅と高さを指定できます。また、幅や高さを明示的にピクセル単位で指定したり、パーセントで指定したり、<codeph>left</codeph> と <codeph>right</codeph> や <codeph>top</codeph> と <codeph>bottom</codeph> などの制約を使用することもできます。</p>
 
  <p><codeph>maxChars</codeph> プロパティを使用して、ユーザーが入力できる文字数を制限したり、<codeph>restrict</codeph> を使用して、ユーザーが入力できる文字を制限したりすることもできます。</p>
 
  <p>このコントロールにはスキンを適用できます。これらのスキンでは、RichEditableText コントロールを使用してテキストの表示と編集を行い、Scroller コントロールを使用してスクロールバーを表示します。RichEditableText には <codeph>textDisplay</codeph> としてアクセスでき、Scroller には <codeph>scroller</codeph> としてアクセスできます。</p>
 
  <p>Spark の TextArea では、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>"rtl"</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>"start"</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>"ltr"</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>"rtl"</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>"end"</codeph> に設定します。</p>
 
  <p>Spark の TextArea では、1 回の編集セッション内で取り消し / やり直し操作を何度でも実行できます。編集セッションは、コントロールがキーボードフォーカスを取得したときに開始され、コントロールがフォーカスを失ったときに終了します。</p>
 
  <p>TextArea コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 188 ピクセル、高さ 149 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 36 ピクセル、高さ 36 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>要求するフォーマットの名前を指定する String の Vector です。すべてのフォーマットを要求する場合は、<codeph>null</codeph> を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の固定されている端を指定する文字の位置です。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の移動可能な端を指定する文字の位置です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時にリッチテキストコンテンツを取得または設定するには、代わりに textFlow プロパティを使用してください。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時にリッチテキストコンテンツを取得または設定するには、代わりに <codeph>textFlow</codeph> プロパティを使用してください。リッチテキストコンテンツは Object ではなく TextFlow として厳密に型指定されているので、実行時のリッチテキストコンテンツの取得と設定には <codeph>textFlow</codeph> プロパティを使用することをお勧めします。TextFlow は、Text Layout Framework 内のリッチテキストコンテンツの正準表現です。
     
      <p><codeph>content</codeph> プロパティは、次のような MXML を記述できるように、TextArea のデフォルトプロパティになっています。
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      この場合は、コンテンツとして指定した String と SpanElement を使用して TextFlow が作成されます。</p>
     
      <p>このプロパティは Object として型指定されています。Object は、String、FlowElement、または String と FlowElement の配列に設定できます。上記の例では、2 つのエレメントで構成される配列がコンテンツになります。最初の配列エレメントは「Hello」という String です。2 番目の配列エレメントは、太字の「World」というテキストを含む SpanElement オブジェクトです。</p>
     
      <p>コンテンツの指定方法にかかわらず、コンテンツは TextFlow オブジェクトに変換されます。このプロパティの値を取得すると、変換後の TextFlow オブジェクトが取得されます。</p>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc conref="spark.components.RichEditableText#heightInLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#heightInLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc conref="spark.components.RichEditableText#textFlow">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#textFlow">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc conref="spark.components.RichEditableText#widthInChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.RichEditableText#widthInChars">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer2"><apiName>VideoPlayer2</apiName><shortdesc>
  VideoPlayer コントロールは、プログレッシブダウンロード、マルチビットレートストリーミング、およびストリーミングビデオをサポートするスキン可能ビデオプレーヤーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の再生状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="initializingAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
   
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  VideoPlayer の無効状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  VideoPlayer の再生状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="initializing" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
   
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer2" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer2" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Number">
<description>
  フルスクリーンモードで、ビデオ再生コントロールを非表示にするまでに、ユーザー操作がない状態で待機する時間（ミリ秒）です。
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer2" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      フルスクリーンモードの切り替えボタンに適用されるオプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      オプションのミュートボタンのスキンパーツです。ミュートボタンには、<codeph>muted</codeph> プロパティと <codeph>volume</codeph> プロパティの両方があります。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの一時停止ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの再生ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      オプションの全プレーヤーコントロールのスキンパーツです。このスキンは、プレーヤーがフルスクリーンモードのときに、ユーザーが何も操作を行わなかった場合に、何を非表示にするかを決定するために使用されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      オプションの再生または一時停止ボタンのスキンパーツです。ビデオが再生されると、selected プロパティが <codeph>true</codeph> に設定されます。ビデオが一時停止または停止されると、selected プロパティが <codeph>false</codeph> に設定されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      オプションのスクラブバー（タイムライン）のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの停止ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer2" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      オプションのボリュームコントロールのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoPlay="true"
    autoRewind="true"
    loop="false"
    scaleMode="letterbox"
    muted="false"
    source=""
    volume="1"
  
    <strong>Events</strong>
    close="<i>No default</i>"
    complete="<i>No default</i>"
    metadataReceived="<i>No default</i>"
    playheadUpdate="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoPlayer コントロールは、プログレッシブダウンロード、マルチビットレートストリーミング、およびストリーミングビデオをサポートするスキン可能ビデオプレーヤーです。FLV ファイルと F4v ファイルの再生がサポートされています。VideoPlayer コントロールには、ビデオ再生を制御するための機能を備えた UI が用意されています。
 
  <p><codeph/></p>
   <p>VideoPlayer コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 263 ピクセル、高さ 184 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext/></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer2_org.osmf.events.DurationChangeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.DurationChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer2_org.osmf.events.PlayheadChangeEvent.PLAYHEAD_CHANGE_playheadChange"><apiName>playheadChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.PlayheadChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/><codeph/>
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer2_org.osmf.events.PlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer2_flash.events.ProgressEvent_bytesDownloadedChange"><apiName>bytesDownloadedChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier>org.osmf.events.BytesDownloadedChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer2:VideoPlayer2"><apiName>VideoPlayer2</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer2:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>フォーマットされた時間の値です。
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>フォーマット対象となる時間の値（秒）です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>秒数
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer2:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer2:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>letterbox
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer2:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  IItemRenderer インターフェイスは、ホストコンポーネントと通信できるアイテムレンダラーを作成するためにクラスが実装する必要がある、API の基本セットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRenderer インターフェイスは、ホストコンポーネントと通信できるアイテムレンダラーを作成するためにクラスが実装する必要がある、API の基本セットを定義します。List コントロールや ButtonBar コントロールなど、ホストコンポーネントは IItemRendererOwner インターフェイスを実装する必要があります。 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph/>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      アイテムレンダラーで表示するストリングです。 
           <p>アイテムレンダラーのホストコンポーネントは <codeph>itemToLabel()</codeph> メソッドを使用して、アイテムレンダラーによって表示するストリングにデータアイテムを変換できます。 </p>
     
      <p>List や ButtonBar などのコントロールの場合、<codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティを使用して、ストリングを含むデータアイテムのフィールドを指定できます。それ以外の場合、ホストコンポーネントは <codeph>toString()</codeph> メソッドを使用して、ストリングにデータアイテムを変換できます。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、<codeph>true</codeph> が含まれます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、true を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、<codeph>true</codeph> を含みます。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  VideoPlayer コントロールは、プログレッシブダウンロード、マルチビットレートストリーミング、およびストリーミングビデオをサポートするスキン可能ビデオプレーヤーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><DefaultProperty name="source"/><skinStates><SkinState name="stopped" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の停止状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の再生状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の読み込み状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="stoppedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の停止状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の再生状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の読み込み状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disconnectedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の切断状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="connectionErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の接続エラー状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disconnected" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の切断状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の無効状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="connectionError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の接続エラー状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  フルスクリーンモードで、ビデオ再生コントロールを非表示にするまでに、ユーザー操作がない状態で待機する時間（ミリ秒）です。
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="videoElement" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.primitives:VideoElement">
<description>
      VideoElement を定義する、必須のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playheadTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      現在の playheadTime を表示する、オプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      フルスクリーンモードの切り替えボタンに適用されるオプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      オプションのミュートボタンのスキンパーツです。ミュートボタンには、<codeph>muted</codeph> プロパティと <codeph>volume</codeph> プロパティの両方があります。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの一時停止ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの再生ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      オプションの全プレーヤーコントロールのスキンパーツです。このスキンは、プレーヤーがフルスクリーンモードのときに、ユーザーが何も操作を行わなかった場合に、何を非表示にするかを決定するために使用されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      オプションの再生または一時停止ボタンのスキンパーツです。ビデオが再生されると、selected プロパティが <codeph>true</codeph> に設定されます。ビデオが一時停止または停止されると、selected プロパティが <codeph>false</codeph> に設定されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      オプションのスクラブバー（タイムライン）のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの停止ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="totalTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      totalTime を表示する、オプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      オプションのボリュームコントロールのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
  
    <strong>Properties</strong>
    autoPlay="true"
    autoRewind="false"
    enabled=""
    loop="false"
    maintainAspectRatio="true"
    muted="false"
    source=""
    volume=".75"
  
    <strong>Events</strong>
    close="<i>No default</i>"
    complete="<i>No default</i>"
    metadataReceived="<i>No default</i>"
    playheadUpdate="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoPlayer コントロールは、プログレッシブダウンロード、マルチビットレートストリーミング、およびストリーミングビデオをサポートするスキン可能ビデオプレーヤーです。FLV ファイルと F4v ファイルの再生がサポートされています。VideoPlayer コントロールには、ビデオ再生を制御するための機能を備えた UI が用意されています。
 
  <p><codeph>VideoElement</codeph> はクロムなしのバージョンです。</p>
   <p>VideoPlayer コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 263 ピクセル、高さ 184 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.primitives.xml#VideoElement"><linktext>spark.primitives.VideoElement</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  ビデオが読み込まれて表示準備が完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.READY</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビデオが読み込まれて表示準備が完了したときに送出されます。
   <p>このイベントは、<codeph>play()</codeph> メソッドまたは <codeph>load()</codeph> メソッドで新しい FLV が読み込まれた後、初めて VideoPlayer が応答可能な状態になったときに送出されます。読み込まれた FLV ごとに一度送出されます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  進捗状況はダウンロードしたバイト数で表されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  進捗状況はダウンロードしたバイト数で表されます。読み込みが開始してから、すべてのバイトが読み込まれて終了するまでの間、またはネットワークエラーが発生するまでの間、送出されます。load メソッドを呼び出してから、すべてのバイトが読み込まれて終了するまでの間、またはネットワークエラーが発生するまでの間、0.25 秒ごとに送出されます。このイベントを使用して、ロードされたバイトとバッファーのバイト数をチェックできます。 
   <p>HTTP プログレッシブダウンロードの場合のみ送出されます。進捗状況はダウンロードされたバイト数単位で表されます。イベントオブジェクトには、<codeph>bytesLoaded</codeph> プロパティと <codeph>bytesTotal</codeph> プロパティがあります。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
  ビデオが再生されている間、0.25 秒ごとに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビデオが再生されている間、0.25 秒ごとに送出されます。シークが行われている場合を除き、ビデオが一時停止または停止されている間、このイベントは送出されません。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
  FLV ファイルのメタデータに初めて到達したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  FLV ファイルのメタデータに初めて到達したときに送出されます。イベントオブジェクトには <codeph>info</codeph> プロパティがあります。このプロパティには、<codeph>NetStream.onMetaData</codeph> イベントコールバックによって受け取った info オブジェクトが含まれます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 プレーヤーが FLV ファイルの最後に到達して再生が完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 プレーヤーが FLV ファイルの最後に到達して再生が完了したときに送出されます。<codeph>stop()</codeph> メソッドまたは <codeph>pause()</codeph> メソッドを呼び出した場合、または対応するコントロールをクリックした場合、イベントは送出されません。 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_spark.events.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  タイムアウトになったか、close() メソッドを呼び出したか、または新しいビデオストリームを読み込んだことによって、NetConnection が閉じたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  タイムアウトになったか、<codeph>close()</codeph> メソッドを呼び出したか、または新しいビデオストリームを読み込んだことによって、<codeph>NetConnection</codeph> が閉じたときに送出されます。HTTP ではなく RTMP ストリームでのみ、このイベントが送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      秒で指定された時間の値を、playheadTimeDisplay および totalTimeDisplay に使用されるストリングの形式にフォーマットします。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>フォーマットされた時間の値です。
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>フォーマット対象となる時間の値（秒）です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      秒で指定された時間の値を、playheadTimeDisplay および totalTimeDisplay に使用されるストリングの形式にフォーマットします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.primitives.VideoElement#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンが読み込まれておらず、videoElement が存在しない場合。    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.primitives.VideoElement#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンがまだ読み込まれておらず、videoElement が存在しない場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.primitives.VideoElement#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンがまだ読み込まれておらず、videoElement が存在しない場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>秒数
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.primitives.VideoElement#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンがまだ読み込まれておらず、videoElement が存在しない場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.primitives.VideoElement#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.primitives.VideoElement#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.primitives.VideoElement#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.primitives.VideoElement#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc conref="spark.primitives.VideoElement#maintainAspectRatio">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#maintainAspectRatio">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.primitives.VideoElement#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playWhenHidden:get"><apiName>playWhenHidden</apiName><shortdesc conref="spark.primitives.VideoElement#playWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#playWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playheadTime:get"><apiName>playheadTime</apiName><shortdesc conref="spark.primitives.VideoElement#playheadTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#playheadTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.primitives.VideoElement#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.primitives.VideoElement#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:totalTime:get"><apiName>totalTime</apiName><shortdesc conref="spark.primitives.VideoElement#totalTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#totalTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.primitives.VideoElement#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.primitives.VideoElement#volume">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:enabled:set"><apiName>enabled</apiName><shortdesc>
      
     
      enabled を false に設定すると UI が無効になり、ビデオが再生中だった場合は、ビデオが一時停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
     
      enabled を <codeph>false</codeph> に設定すると UI が無効になり、ビデオが再生中だった場合は、ビデオが一時停止します。コンポーネントを再び有効にしても、ビデオの再生は再開されません。明示的に <codeph>play()</codeph> を呼び出す必要があります。
     
      <p>コンポーネントが無効になっている間に一時停止された場合でも、<codeph>play()</codeph> などのメソッドを呼び出せば、無効になっている間でもビデオの再生や他のアクションを実行できます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  ButtonBar コントロールは、共通の外観と操作性を持つ論理的に関連するボタンの水平方向のグループを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     最初のボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     最後のボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     中間のボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ButtonBar
   /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBar コントロールは、共通の外観と操作性を持つ論理的に関連するボタンの水平方向のグループを定義します。
   <p>通常、ボタンバーのプッシュボタンは、関連するボタンをグループ化して共通の外観と操作性を提供し、1 か所で <codeph>change</codeph> イベントのロジックを処理するために使用します。 </p>
   <p>ButtonBar コントロールは、その <codeph>dataProvider</codeph> プロパティの値に基づいて Button コントロールを作成します。 <codeph>dataProvider</codeph> プロパティを操作してデータアイテムを追加および削除するには、<codeph>addItem()</codeph> や <codeph>removeItem()</codeph> などのメソッドを使用します。ButtonBar コントロールは、<codeph>dataProvider</codeph> プロパティへの変更に基づいて、自動的に必要な子を追加または削除します。</p>
   <p>ButtonBar コントロールを使用すると ViewStack コンテナのアクティブな子を設定できます。次に例を示します。</p>
  
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash9" type="uint">
<description>
  アプリケーションの背景色です。この色は、アプリケーションのステージカラーおよび HTML 埋め込みタグの背景色として使用されます。
   
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      コンテナのコントロールバー領域の外観を定義するスキンパーツです。ApplicationSkin クラスのデフォルトの定義では、Application コンテナのコンテンツ領域の上部にコントロールバー領域が表示され、背景は灰色に設定されます。 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Application
    <strong>Properties</strong>
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderBaseColor="<i>No default</i>"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  HTTPService 呼び出しが失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  HTTPService 呼び出しが失敗したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Application:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      
      スキンに適用される状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>スキンに適用する状態の名前を指定する文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      
      スキンに適用される状態の名前を返します。例えば、Button コンポーネントは、状態を指定するために「up」、「down」、「over」、または「disabled」というストリングを返すことができます。
     
      <p>SkinnableComponent のサブクラスは、このメソッドをオーバーライドして値を返す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Application:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>detachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>removeDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツからビヘイビアーを削除するには、この関数をオーバーライドします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        アプリケーションのフレームレートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        アプリケーションのフレームレートを指定します。
     
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。 このプロパティは、HTML の <codeph>&lt;title></codeph> タグと同じ機能を提供します。
     
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。MXML コードに設定されている値は、SDK に用意されている HTML テンプレートを更新するツールで使用できるように設計されています。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      カスタムプログレスバーを定義する、SWC コンポーネントクラスまたは ActionScript コンポーネントクラスのパスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      カスタムプログレスバーを定義する、SWC コンポーネントクラスまたは ActionScript コンポーネントクラスのパスを指定します。SWC コンポーネントは、MXML ファイルが置かれているディレクトリ、または Flex Web アプリケーションの WEB-INF¥flex¥user_classes ディレクトリに置く必要があります。
     
      <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderBaseColor"><apiName>preloaderBaseColor</apiName><shortdesc>
      デフォルトのプリローダーコンポーネントで使用されるベースカラーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      デフォルトのプリローダーコンポーネントで使用されるベースカラーを指定します。このプロパティには、Spark のスキンによって使用される <codeph>baseColor</codeph> スタイルと同じ効果があります。通常、このプロパティは、Application コンテナの <codeph>baseColor</codeph> スタイルプロパティと同じ値に設定される必要があります。
        
      <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。 実質的なスタックオーバーフローの制限になります。
     
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。 設定できる最大許容値は 60 秒です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        true の場合、アプリケーションのプリローダーを表示することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        <codeph>true</codeph> の場合、アプリケーションのプリローダーを表示することを示します。
     
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     ステージの colorCorrection プロパティの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
    
     </apiDefaultValue></apiValueDef><apiDesc>
     ステージの <codeph>colorCorrection</codeph> プロパティの値です。このアプリケーションがステージの <codeph>colorCorrection</codeph> プロパティにアクセスできない場合、<codeph>colorCorrection</codeph> プロパティの値は <codeph>null</codeph> です。
     
     <p>メインアプリケーションのみが <codeph>colorCorrection</codeph> プロパティを設定できます。ネストされたアプリケーションがカラー補正プロパティを設定する必要がある場合は、メインアプリケーションのインスタンスを参照することによってプロパティを設定する必要があります。</p>
    
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Application コンテナのコントロールバー領域に含めるコンポーネントのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Application コンテナのコントロールバー領域に含めるコンポーネントのセットです。Application コンテナのコントロールバー領域の場所と外観は、spark.skins.spark.ApplicationSkin クラスによって決定されます。ApplicationSkin クラスのデフォルトの定義では、Application コンテナのコンテンツ領域の上部にコントロールバー領域が表示され、背景は灰色に設定されます。コントロールバーのデフォルトの外観を変更するカスタムスキンを作成します。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      コンテナのコントロールバー領域のレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのコントロールバー領域のレイアウトを定義します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
     
      <p><b/><codeph/></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      この Application に提供されるパラメーターを表す、名前と値のペアを含む Object です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この Application に提供されるパラメーターを表す、名前と値のペアを含む Object です。
     
      <p>for-in ループを使用すると、パラメーター Object からすべての名前と値を抽出できます。</p>
     
      <p>パラメーターは、Application の URL のクエリストリングと、FlashVars HTML パラメーターの値の 2 つから提供されます。HTML パラメーターはメイン Application にのみ影響します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      この Application の SWF ファイルがロードされた URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      この Application の SWF ファイルがロードされた URL です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      アプリケーションのソースを参照できる URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      アプリケーションのソースを参照できる URL です。このプロパティを設定すると、「ソースの表示」メニューアイテムがアプリケーションのデフォルトのコンテキストメニューに挿入されます。 このメニューアイテムを選択すると、新しいウィンドウに <codeph>viewSourceURL</codeph> が開きます。
     
      <p>次の例に示すように、<codeph>viewSourceURL</codeph> プロパティは、ActionScript ではなく MXML を使用して設定する必要があります。</p>
     
      <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label は、1 行または複数行のテキストを均一のフォーマットでレンダリングできる低レベルの UIComponent です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label は、1 行または複数行のテキストを均一のフォーマットでレンダリングできる低レベルの UIComponent です。表示するテキストは、TextBase から継承した <codeph>text</codeph> プロパティによって決定されます。テキストのフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> など、エレメントの CSS スタイルによって設定されます。
 
  <p>Flex 4 から導入された Label では、Flash Player 10 の新しい Flash Text Engine（FTE）が使用されるので、国際化対応の高品質な文字体裁がサポートされています。Label は高速で軽いので、アイテムレンダラーや Button スキンのラベルなど、少量の非インタラクティブテキストを数多くレンダリングする場合に特に適しています。</p>
 
  <p>必要な機能だけを提供するという理念に基づき、Spark アーキテクチャには 3 つのテキストプリミティブ（Label、RichText および RichEditableText）が用意されています。Label は最も高速で軽量ですが、機能は限られており、複雑なフォーマット設定、スクロール、選択、編集、ハイパーリンクはサポートされません。RichText と RichEditableText は、FTE ではなく Text Layout Framework（TLF）ライブラリをベースとして作成されます。RichText には、複雑なフォーマット設定を含む HTML などのテキストをレンダリングする機能が追加されていますが、インタラクティブ機能はサポートされません。RichEditableText は最も低速で重いですが、仮想化された TextLine を使用したスクロール、選択、編集、ハイパーリンク、URL からの画像のロードなどがすべてサポートされます。ニーズに合わせて、最も軽量なものを使用してください。</p>
 
  <p>spark.components.Label は、MX の従来の mx.controls.Label コントロールに似ています。最も重要な違いは、次のとおりです。
  <ul>
    <li>Spark の Label では、プレーヤーの新しいテキストエンジンである FTE が使用されますが、MX の Label では廃止された TextField クラスが使用されます。</li>
    <li>Spark の Label は、MX の Label と比較して、文字体裁や国際言語のサポート機能が向上しています。</li>
    <li>Spark の Label では複数行を表示できますが、MX の Label では表示できません。</li>
    <li>MX の Label では HTML の一部を表示できますが、Spark の Label では均一フォーマットのテキストしか表示できません。</li>
    <li>MX の Label では選択可能にするかどうかを指定できますが、この Label では指定できません。</li>
  </ul></p>
 
  <p>Spark·の·Label·では、CR（￼<codeph>"¥r"￼</codeph>）、LF（￼<codeph>"¥n"￼</codeph>）および·CR+LF（<codeph>￼"¥r¥n"</codeph>）の 3 つの文字シーケンスが明示的な改行として認識されます。</p>
 
  <p>Label の幅が指定されていない場合は、明示的な改行により各行の長さが決定され、最も長い行に合わせて Label の幅が決定されます。</p>
 
  <p><codeph>lineBreak</codeph> スタイルのデフォルト値は <codeph>"toFit"</codeph> なので、幅を指定すると、指定されたテキストがコンポーネントの境界の右端で折り返されます。コンポーネントの下部からテキストがはみ出す場合は、テキストが切り詰められます。</p>
 
  <p>この自動折り返しを無効にするには、<codeph>lineBreak</codeph> スタイルを <codeph>"explicit"</codeph> に設定します。この場合、<codeph>text</codeph> 内で明示的な改行が挿入されている場所でのみ行が折り返され、右端からはみ出す部分は切り詰められます。</p>
 
  <p>Label では、表示領域を超える量のテキストがある場合、テキストを自動的に切り詰めることができます。テキストを切り詰めるとは、余分なテキストを "..." などの切り詰めインジケーターに置き換えることです。継承プロパティ <codeph>maxDisplayedLines</codeph> および <codeph>isTruncated</codeph> の説明を参照してください。</p>
 
  <p>行の間隔は <codeph>lineHeight</codeph> スタイルを使用して制御できます。エレメントの境界内でテキストを水平方向または垂直方向に整列するには、<codeph>textAlign</codeph>、<codeph>textAlignLast</codeph> および <codeph>verticalAlign</codeph> スタイルを使用します。エレメントの端からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルを使用します。</p>
 
  <p>デフォルトでは、Label には背景がありませんが、<codeph>backgroundColor</codeph> スタイルと <codeph>backgroundAlpha</codeph> スタイルを使用すると背景を描画できます。境界線はサポートされません。境界線や複雑な背景を描画する必要がある場合は、Rect などの別のグラフィックエレメントを Label の背後で使用します。</p>
 
  <p>Label では、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語の段落のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>"rtl"</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>"start"</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>"ltr"</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>"rtl"</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>"end"</codeph> に設定します。</p>
 
  <p>Label では Flash Text Engine の TextBlock クラスを使用して 1 つまたは複数の TextLine オブジェクトが作成され、CSS スタイルで定義されたフォーマットで text String が静的に表示されます。パフォーマンス上の理由から、TextLine には個々の字形の情報は格納されません。詳しくは、flash.text.engine.TextLineValidity.STATIC を参照してください。</p>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Label:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
  RichEditableText は、リッチフォーマットテキストの表示、スクロール、選択および編集を行うための低レベルの UIComponent です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="baseColor"/><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  このコンポーネントの境界を表す矩形の背景色です。このスタイルが <codeph>undefined</codeph> の場合、背景は描画されません。それ以外の場合は、この RGB カラーが、<codeph>backgroundAlpha</codeph> スタイルによって決まるアルファレベルで描画されます。
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  <codeph>backgroundColor</codeph> スタイルによって定義されるカラーのアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnGap">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnCount">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>flash.text.engine:ITextSupport</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichEditableText は、リッチフォーマットテキストの表示、スクロール、選択および編集を行うための低レベルの UIComponent です。
 
  <p>リッチテキストには、クリック可能なハイパーリンク、埋め込み式のインライングラフィック、他の URL からロードされるグラフィックなどが含まれている場合があります。</p>
 
  <p>RichEditableText にはスクロールバーはありませんが、プログラムを通じてスクロールするための IViewport インターフェイスが実装されているので、スクロールバーを表示できる Scroller で制御できます。また、マウスホイールを使用した垂直スクロールもサポートされています。</p>
 
  <p>テキストのフォーマットを変更するためのユーザーインターフェイスはありません。ただし、プログラムを通じて変更を行うための API が用意されています。これらの API を使用すると、選択範囲を太字に変更する太字ボタンなどを作成することができます。</p>
 
  <p>このクラスは、Spark 版の TextInput と TextArea のスキンで使用されます。TextInput ではリッチテキストを処理する機能は公開されていませんが、TextArea では公開されています。デフォルトでは、RichEditableText の背景は透明で、境界線の描画はサポートされていません。</p>
 
  <p>Flex 4 から導入された RichEditableText では、新しい Text Layout Framework（TLF）ライブラリが使用されます。このライブラリは、Flash Player 10 の新しい Flash Text Engine（FTE）をベースとして作成されています。これらのレイヤーを組み合わせることにより、国際化対応の高品質な文字体裁とレイアウト機能を備えたテキスト編集が可能になります。</p>
 
  <p>必要な機能だけを提供するという理念に基づき、Spark アーキテクチャには 3 つのテキストプリミティブ（Label、RichText および RichEditableText）が用意されています。Label は TLF を使用せず FTE のみを使用するので、最も高速で軽いですが、機能は限られており、リッチテキスト、スクロール、選択、編集はサポートされません。RichText には、複雑なレイアウト設定を含むリッチテキストを表示する機能が追加されていますが、インタラクティブ機能はサポートされません。RichEditableText は最も低速で重いですが、TLF で実行できるほとんどの機能がサポートされます。ニーズに合わせて、最も高速なテキストプリミティブを使用してください。</p>
 
  <p>RichEditableText は、MX コンポーネントで使用される UITextField クラスに似ています。このクラスでは FTE および TLF は使用されず、Player に含まれる古い TextField クラスが拡張されていました。</p>
 
  <p>最も重要な違いは、次のとおりです。
  <ul>
    <li>RichEditableText では、文字体裁、国際言語のサポート、およびテキストレイアウトの機能が向上しています。</li>
    <li>RichEditableText には、リッチテキストのオブジェクト指向モデルがありますが、UITextField にはありません。</li>
    <li>RichEditableText では、大量のテキストを表示する機能を強化されています。</li>
    <li>RichEditableText では、UITextField とは異なる方法でフォントを埋め込む必要があります。フォントを埋め込む際に <codeph>embedAsCFF</codeph> 属性の使用する方法について詳しくは、マニュアルを参照してください。</li>
  </ul></p>
 
  <p>RichEditableText では、リッチテキストの TLF オブジェクト指向モデルが使用されます。このモデルでは、区分、段落、スパン、ハイパーリンク、画像などのテキストレイアウト要素が ActionScript オブジェクトによって実行時に表現されます。これらのオブジェクトは、プログラムを通じてアクセスして操作できます。リッチテキストを表す TLF の中心的なオブジェクトは TextFlow です。そのため、RichEditableText に対してリッチテキストを指定するには、RichEditableText の <codeph>textFlow</codeph> プロパティを TextFlow インスタンスに設定します。TLF マークアップをインポートするなどの方法で TextFlow を作成する方法については、<codeph>textFlow</codeph> プロパティの説明を参照してください。複数のフォーマットが混在するテキストを表示する必要がない場合は、<codeph>text</codeph> プロパティを「plain text」という String に設定します。<codeph>text</codeph> プロパティと <codeph>textFlow</codeph> プロパティの相互作用（例えば、一方を設定して他方を取得する方法など）について詳しくは、各プロパティの説明を参照してください。</p>
 
  <p>次の例に示すように、コンパイル時に、TLF マークアップタグを RichEditableText タグ内に配置できます。
  <pre>
  &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
  </pre>
  この例では、MXML コンパイラーによって、<codeph>content</codeph> プロパティが設定され、指定した FlowElement から TextFlow が自動的に作成されます。</p>
 
  <p>デフォルトのテキストフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルによって決定されます。TextFlow でフォーマット情報が指定されている場合は、CSS スタイルで指定されているデフォルトのフォーマットがオーバーライドされます。</p>
 
  <p>行の間隔は <codeph>lineHeight</codeph> スタイルで制御でき、段落の間隔は <codeph>paragraphSpaceBefore</codeph> スタイルと <codeph>paragraphSpaceAfter</codeph> スタイルで制御できます。テキストの整列や均等割り付けには、<codeph>textAlign</codeph> スタイルと <codeph>textAlignLast</codeph> スタイルを使用できます。コンポーネントの端からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルを使用します。</p>
 
  <p>デフォルトでは、RichEditableText のサイズは自動調整されます。テキストがないときは非常に小さく表示され、文字を入力するにつれて <codeph>maxWidth</codeph> の幅まで広くなり、Enter キーを押して改行すると高さが増えます。</p>
 
  <p><codeph>widthInChars</codeph> プロパティおよび <codeph>heightInChars</codeph> プロパティを使用すると、フォントサイズに応じて伸縮する方式で幅と高さを指定できるので便利です。また、幅や高さを明示的にピクセル単位で指定したり、パーセントで指定したり、<codeph>left</codeph> と <codeph>right</codeph> や <codeph>top</codeph> と <codeph>bottom</codeph> などの制約を使用することもできます。</p>
 
  <p>明示的な値、パーセント、<codeph>maxWidth</codeph>、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、コンポーネントの右端でテキストが折り返され、表示領域にテキストが収まりきらない場合は、テキストの垂直スクロールが可能になります。<codeph>lineBreak</codeph> スタイルを <codeph>"explicit"</codeph> に設定した場合は、CR（<codeph>"¥r"</codeph>）、LF（<codeph>"¥n"</codeph>）または CR+LF（<codeph>"¥r¥n"</codeph>）を <codeph>text</codeph> で使用する場合や、<codeph>&lt;p></codeph> と <codeph>&lt;br/></codeph> を TLF マークアップで使用する場合と同様に、明示的に改行が指定されている位置でのみ行が折り返されます。この場合、コントロールの幅を超える行があるときは、テキストの水平スクロールが可能になります。</p>
 
  <p><codeph>maxChars</codeph> プロパティを使用して、ユーザーが入力できる文字数を制限したり、<codeph>restrict</codeph> を使用して、ユーザーが入力できる文字を制限したりすることもできます。</p>
 
  <p><codeph>multiline</codeph> プロパティは、Enter キーを押したときの動作を決定します。<codeph>true</codeph> の場合、Enter キーを押すと新しい段落が始まります。<codeph>false</codeph> の場合、<codeph>FlexEvent.ENTER</codeph> イベントが送出されます。</p>
 
  <p>テキストの編集を許可しない場合は、<codeph>editable</codeph> プロパティを <codeph>false</codeph> に設定します。テキストの選択も許可しない場合は、<codeph>selectable</codeph> プロパティを <codeph>false</codeph> に設定します。</p>
 
  <p>RichEditableText では TLF が使用されるので、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>"rtl"</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>"start"</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>"ltr"</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>"rtl"</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>"end"</codeph> に設定します。</p>
 
  <p>また、RichEditableText では TLF が使用されるので、1 回の編集セッション内で取り消し / やり直し操作を何度でも実行できます。編集セッションは、コンポーネントがキーボードフォーカスを取得したときに開始され、フォーカスを失ったときに終了します。</p>
 
  <p>RichEditableText は TLF の TextContainerManager クラスを使用して、テキストの表示、スクロール、選択、編集を処理します。</p>
 
  </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  multiline プロパティが false の場合に、ユーザーが Enter キーを押すと送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>multiline</codeph> プロパティが false の場合に、ユーザーが Enter キーを押すと送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  ユーザーによる編集操作が完了した後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーによる編集操作が完了した後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  ユーザーによる編集操作が発生する前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーによる編集操作が発生する前に送出されます。操作を変更するか、またはイベントをキャンセルして操作が処理されないようにすることができます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  何らかの理由で selectionAnchorPosition プロパティおよび selectionActivePosition プロパティ、またはそのいずれかが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  何らかの理由で <codeph>selectionAnchorPosition</codeph> プロパティおよび <codeph>selectionActivePosition</codeph> プロパティ、またはそのいずれかが変更された後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
      ユーザーが末尾をクリックして入力したかのように、指定したテキストを RichEditableText の末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>追加するテキストです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ユーザーが末尾をクリックして入力したかのように、指定したテキストを RichEditableText の末尾に追加します。
     
      <p>続いて挿入ポイントが新しいテキストの後に設定されます。挿入ポイントが表示されるように、必要に応じてテキストがスクロールされます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
      指定された文字範囲のフォーマットを指定する TextLayoutFormat オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>要求するフォーマットの名前を指定する String の Vector です。すべてのフォーマットを要求する場合は、<codeph>null</codeph> を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の固定されている端を指定する文字の位置です。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の移動可能な端を指定する文字の位置です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された文字範囲のフォーマットを指定する TextLayoutFormat オブジェクトを返します。
     
      <p>範囲全体のフォーマット設定が一貫していない場合、その値は <codeph>undefined</codeph> になります。</p>
     
      <p>特定のフォーマットの名前を含む String の Vector を指定できます。指定しない場合は、すべてのフォーマットが計算されます。</p>
      
      <p>範囲を指定しない場合、選択された範囲が使用されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
      
      要求されたスクロール単位でスクロールする、ビューポートの現在の horizontalScrollPosition に追加する量を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>horizontalScrollPosition</codeph> に追加するピクセル数です。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>スクロールする量です。単位の値は、spark.core.NavigationUnit 定数の <codeph>LEFT</codeph>、<codeph>RIGHT</codeph>、<codeph>PAGE_LEFT</codeph>、<codeph>PAGE_RIGHT</codeph>、<codeph>HOME</codeph>、<codeph>END</codeph> のいずれかである必要があります。単一列でスクロールするには、<codeph>LEFT</codeph> または <codeph>RIGHT</codeph> を使用します。最初または最後の列にスクロールするには、<codeph>HOME</codeph> または <codeph>END</codeph> を使用します。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      要求されたスクロール単位でスクロールする、ビューポートの現在の <codeph>horizontalScrollPosition</codeph> に追加する量を返します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
      
      要求されたスクロール単位でスクロールする、ビューポートの現在の verticalScrollPosition に追加する量を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>verticalScrollPosition</codeph> に追加するピクセル数です。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>スクロールする量です。単位の値は、spark.core.NavigationUnit 定数の <codeph>UP</codeph>、<codeph>DOWN</codeph>、<codeph>PAGE_UP</codeph>、<codeph>PAGE_DOWN</codeph>、<codeph>HOME</codeph>、<codeph>END</codeph> のいずれかである必要があります。単一行でスクロールするには、<codeph>UP</codeph> または <codeph>DOWN</codeph> を使用します。最初または最後の行にスクロールするには、<codeph>HOME</codeph> または <codeph>END</codeph> を使用します。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      要求されたスクロール単位でスクロールする、ビューポートの現在の <codeph>verticalScrollPosition</codeph> に追加する量を返します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
      ユーザーが入力したかのように、指定したテキストを RichEditableText に挿入します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>挿入するテキストです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ユーザーが入力したかのように、指定したテキストを RichEditableText に挿入します。
     
      <p>範囲を選択した場合は、選択したテキストが新しいテキストに置き換えられます。挿入ポイントがある場合は、その位置に新しいテキストが挿入されます。</p>
     
      <p>続いて挿入ポイントが新しいテキストの後に設定されます。挿入ポイントが表示されるように、必要に応じてテキストがスクロールされます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
      すべてのテキストを選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      すべてのテキストを選択します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
      指定した文字範囲を選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>選択範囲が拡張されるときに固定して動かない選択範囲の端を指定する文字位置です。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>選択範囲が拡張されるときに移動する選択範囲の端を指定する文字位置です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定した文字範囲を選択します。
     
      <p>どちらかの位置が負の場合、テキスト範囲の選択が解除されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
      指定したフォーマットを指定した範囲に適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc>
      指定したフォーマットを指定した範囲に適用します。
     
      <p>サポートされるフォーマットは、TextFormatLayout のフォーマットです。<codeph>undefined</codeph> という値は適用されません。範囲を指定しない場合、選択された範囲が使用されます。</p>
     
      <p>次に例を示します。
      <pre>
      var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
      textLayoutFormat.fontSize = 12;
      textLayoutFormat.color = 0xFF0000;
      setFormatOfRange(textLayoutFormat);
      </pre>
      この例では、選択範囲の fontSize と color が設定されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに textFlow プロパティを使用してください。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに <codeph>textFlow</codeph> プロパティを使用してください。
     
      <p><codeph>content</codeph> プロパティは、次のような MXML を記述できるように、RichEditableText のデフォルトプロパティになっています。
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      この場合は、コンテンツとして指定した String と SpanElement を使用して TextFlow が作成されます。</p>
     
      <p>このプロパティは Object として型指定されています。Object は、String、FlowElement、または String と FlowElement の配列に設定できます。上記の例では、2 つのエレメントで構成される配列をコンテンツと指定しています。最初のエレメントは「Hello」という String で、2 番目のエレメントは太字の「World」というテキストを含む SpanElement です。</p>
     
      <p>指定方法にかかわらず、コンテンツは TextFlow オブジェクトに変換されます。このプロパティの値を取得すると、変換後の TextFlow オブジェクトが取得されます。</p>
     
      <p>リッチテキストコンテンツは Object ではなく TextFlow として厳密に型指定されているので、実行時のリッチテキストコンテンツの取得と設定には <codeph>textFlow</codeph> プロパティを使用することをお勧めします。TextFlow は、Text Layout Framework 内のリッチテキストコンテンツの正準表現です。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      テキストの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      テキストの高さです。
     
      <p>Text Layout Framework ではパフォーマンス向上のために TextLine が仮想化されるので、コンポーネント内にすべてのテキストを表示できない場合、この高さの初期値は予測値になります。テキストの最後までスクロールすると、すべての TextLine が作成されて、<codeph>contentHeight</codeph> が正確な値になります。</p>
     
      <p>テキストを縦にスクロールするには、<codeph>verticalScrollPosition</codeph> を 0 ～ <codeph>contentHeight - height</codeph> の範囲で変化させます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      テキストの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      テキストの幅です。
     
      <p>Text Layout Framework ではパフォーマンス向上のために TextLine が仮想化されるので、コンポーネント内にすべてのテキストを表示できない場合、この幅の初期値は予測値になります。テキストの最後までスクロールすると、すべての TextLine が作成されて、<codeph>contentWidth</codeph> が正確な値になります。</p>
     
      <p>テキストを横にスクロールするには、<codeph>horizontalScrollPosition</codeph> を 0 ～ <codeph>contentWidth - width</codeph> の範囲で変化させます。</p>  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
      このコントロール内のテキストをユーザーが編集できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロール内のテキストをユーザーが編集できるかどうかを示すフラグです。
     
      <p><codeph>true</codeph> の場合、このコントロールの境界にマウスカーソルを合わせると I 字形に変わります。<codeph>false</codeph> の場合、マウスカーソルは矢印のままです。</p>
     
      <p>このプロパティが <codeph>true</codeph> の場合、<codeph>selectable</codeph> プロパティは無視されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      行数で表したコントロールのデフォルトの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      行数で表したコントロールのデフォルトの高さです。
     
      <p><codeph>fontSize</codeph> や <codeph>lineHeight</codeph> など、コントロールのフォーマットスタイルは、行の高さをピクセル単位で計算するために使用されます。</p>
     
      <p>例えば、5 行のテキストを表示できるように RichEditableText の高さを設定する必要がある場合は、このプロパティを 5 に設定します。</p>
     
      <p>このプロパティが <codeph>NaN</codeph>（デフォルト）の場合、コンポーネントのデフォルトの高さは、表示されるテキストに基づいて決定されます。</p>
      
      <p>明示的な値、パーセント、または <codeph>top</codeph> および <codeph>bottom</codeph> 制約を使用して高さを指定すると、このプロパティは無視されます。</p>
     
      <p>RichEditableText の <codeph>measure()</codeph> メソッドは、<codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> を使用して、<codeph>measuredWidth</codeph> と <codeph>measuredHeight</codeph> を決定します。これらは、HTML の TextArea の <codeph>cols</codeph> と <codeph>rows</codeph> に似ています。</p>
     
      <p><codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> のデフォルト値は <codeph>NaN</codeph> なので、RichTextEditable のサイズはデフォルトで自動調整されます。テキストがない場合は非常に小さいサイズに設定され、文字を入力するにつれて幅が広がり、Enter キーを押して改行すると高さが増えます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      テキストを横にスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      テキストを横にスクロールするピクセル数です。
     
      <p>テキストを横にスクロールするには、<codeph>horizontalScrollPosition</codeph> を 0 ～ <codeph>contentWidth - width</codeph> の範囲で変化させます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      IME（入力メソッドエディター）のモードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      IME（入力メソッドエディター）のモードを指定します。 IME を使用することによって、ユーザーは中国語、日本語、および韓国語のテキストを入力できます。Flex では、コントロールにフォーカスが置かれたときに、IME を指定されたモードに設定し、コントロールからフォーカスが離れたときに、元のモードに戻します。
     
      <p>flash.system.IMEConversionMode クラスで、このプロパティの有効な値の定数を定義します。IME を指定しない場合は、<codeph>null</codeph> を指定します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
      ユーザーが複数行テキストを入力できるかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが複数行テキストを入力できるかどうかを決定します。
     
      <p><codeph>true</codeph> の場合、Enter キーを押すと新しい段落が始まります。<codeph>false</codeph> の場合、Enter キーを押してもテキストには影響しませんが、RichEditableText が <codeph>"enter"</codeph> イベントを送出します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
      コンテンツをマウスで選択できるかどうか（また、コントロールにキーボードフォーカスがあるときはキーボードで選択できるかどうか）を示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテンツをマウスで選択できるかどうか（また、コントロールにキーボードフォーカスがあるときはキーボードで選択できるかどうか）を示すフラグです。
     
      <p>テキストを選択可能にすると、コントロールからテキストをコピーできます。</p>
     
      <p>このプロパティは、<codeph>editable</codeph> プロパティが <codeph>true</codeph> の場合は無視されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（<codeph>text</codeph> String の先頭を基準とした相対位置）です。
     
      <p>アクティブな位置は、選択範囲の開始点または終了点のいずれかです。</p>
     
      <p>例えば、12 の位置から 8 の位置までをドラッグして選択すると、<codeph>selectionAnchorPosition</codeph> は 12 になり、<codeph>selectionActivePosition</codeph> は 8 になります。さらに左矢印キーを押すと、<codeph>selectionActivePosition</codeph> は 7 になります。</p>
     
      <p>値が -1 の場合は、設定されていないことを示します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（<codeph>text</codeph> String の先頭を基準とした相対位置）です。
     
      <p>アンカー位置は、選択範囲の開始点または終了点のいずれかです。</p>
     
      <p>例えば、12 の位置から 8 の位置までをドラッグして選択すると、<codeph>selectionAnchorPosition</codeph> は 12 になり、<codeph>selectionActivePosition</codeph> は 8 になります。さらに左矢印キーを押すと、<codeph>selectionActivePosition</codeph> は 7 になります。</p>
     
      <p>値が -1 の場合は、設定されていないことを示します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      テキストの選択範囲をハイライト表示するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
      
      </apiDefaultValue></apiValueDef><apiDesc>
      テキストの選択範囲をハイライト表示するかどうかを決定します。
      
      <p>有効な値は、spark.components.TextSelectionHighlighting クラスで指定されています。有効な値は、<codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>、<codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph>、および <codeph>TextSelectionHighlighting.ALWAYS</codeph> です。</p>
     
      <p><codeph>WHEN_FOCUSED</codeph> を指定すると、コンポーネントにキーボードフォーカスがあるときにのみ、テキストの選択範囲が表示されます。</p>
      
      <p><codeph>WHEN_ACTIVE</codeph> を指定すると、コンポーネントのウィンドウがアクティブなときには、コンポーネントにキーボードフォーカスがなくても常にテキストの選択範囲が表示されます。</p>
     
      <p><codeph>ALWAYS</codeph> を指定すると、コンポーネントにキーボードフォーカスがなくても、コンポーネントのウィンドウがアクティブでなくても、テキストの選択範囲が表示されます。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.components.TextSelectionHighlighting.xml"><linktext>mx.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
      このコンポーネントによって表示されるテキストのストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントによって表示されるテキストのストリングです。
     
      <p>このプロパティと <codeph>textFlow</codeph> プロパティの設定は相互に影響します。</p>
     
      <p><codeph>text</codeph> を <codeph>"Hello World"</codeph> などの String に設定して <codeph>textFlow</codeph> を取得すると、1 つの SpanElement を含む 1 つの ParagraphElement で構成される TextFlow が取得されます。</p>
     
      <p>テキストに CR（"¥r"）、LF（"¥n"）、または CR+LF（"¥r¥n"）という明示的な改行が含まれている場合は、それぞれに 1 つのスパンを含む複数の段落で構成された TextFlow がコンテンツになります。</p>
     
      <p><codeph>textFlow</codeph> を設定して、<codeph>text</codeph> を取得すると、各段落のテキストは 1 つの LF（"¥n"）で区切られます。</p>
     
      <p>このプロパティを設定すると、コントロールのスクロール位置とテキストの選択範囲を指定するプロパティにも影響します。<codeph>horizontalScrollPosition</codeph> と <codeph>verticalScrollPosition</codeph> は 0 にリセットされ、<codeph>selectionAnchorPosition</codeph> と <codeph>selectionActivePosition</codeph> は -1 に設定されて選択範囲がクリアされます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。
     
      <p>TextFlow は、Text Layout Framework（TLF）で最も重要なクラスです。このクラスは、リッチテキストコンテンツを表す FlowElements のツリーのルートです。</p>
     
      <p>通常、TLF マークアップから TextFlow を作成するには、<codeph>TextFlowUtil.importFromString()</codeph> メソッドまたは <codeph>TextFlowUtil.importFromXML()</codeph> メソッドを使用します。あるいは、（HTML のサブセットをインポートできる）TLF の TextConverter クラスを使用するか、<codeph>addChild()</codeph> などのメソッドを TextFlow に対して使用して TextFlow を作成することもできます。</p>
     
      <p>このプロパティと <codeph>text</codeph> プロパティの設定は相互に影響します。</p>
     
      <p><codeph>textFlow</codeph> を設定して、<codeph>text</codeph> を取得すると、各段落のテキストは 1 つの LF（"¥n"）で区切られます。</p>
     
      <p><codeph>text</codeph> を <codeph>"Hello World"</codeph> などの String に設定して <codeph>textFlow</codeph> を取得すると、1 つの SpanElement を含む 1 つの ParagraphElement で構成される TextFlow が取得されます。</p>
     
      <p>テキストに CR（"¥r"）、LF（"¥n"）、または CR+LF（"¥r¥n"）という明示的な改行が含まれている場合は、それぞれに 1 つのスパンを含む複数の段落で構成された TextFlow がコンテンツになります。</p>
     
      <p>このプロパティを設定すると、コントロールのスクロール位置とテキストの選択範囲を指定するプロパティにも影響します。<codeph>horizontalScrollPosition</codeph> と <codeph>verticalScrollPosition</codeph> は 0 にリセットされ、<codeph>selectionAnchorPosition</codeph> と <codeph>selectionActivePosition</codeph> は -1 に設定されて選択範囲がクリアされます。</p>
     
      <p>TextFlow オブジェクトを TLF マークアップに変えるには、<codeph>TextFlowUtil.export()</codeph> マークアップを使用します。</p>
     
      <p>1 つの TextFlow を複数の RichEditableText インスタンスで共有することはできません。別のインスタンスで同じテキストを表示するには、<codeph>TextFlowUtil.export()</codeph> と <codeph>TextFlowUtil.importFromXML()</codeph> を使用するか、<codeph>deepCopy()</codeph> メソッドを TextFlow に対して使用して、別の TextFlow を作成する必要があります。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      テキストを縦にスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      テキストを縦にスクロールするピクセル数です。
     
      <p>テキストを縦にスクロールするには、<codeph>verticalScrollPosition</codeph> を 0 ～ <codeph>contentHeight - height</codeph> の範囲で変化させます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      em 単位で測定されたコントロールのデフォルトの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      em 単位で測定されたコントロールのデフォルトの幅です。
     
      <p>em は活字の測定単位で、ポイントサイズと同じです。必ずしも「M」の文字の幅と正確に一致しているわけではありませんが、多くのフォントでは、「M」が約 1 em の幅になっています。コントロールの <codeph>fontSize</codeph> スタイルは、em 単位をピクセル数で計算するために使用されます。</p>
     
      <p>例えば、約 20 文字のテキストを表示できるように RichEditableText の幅を設定する必要がある場合は、このプロパティを 20 に設定します。</p>
     
      <p>このプロパティが <codeph>NaN</codeph>（デフォルト）の場合、コンポーネントのデフォルトの幅は、表示されるテキストに基づいて決定されます。</p>
     
      <p>明示的な値、パーセント、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、このプロパティは無視されます。</p>
     
      <p>RichEditableText の <codeph>measure()</codeph> メソッドは、<codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> を使用して、<codeph>measuredWidth</codeph> と <codeph>measuredHeight</codeph> を決定します。これらは、HTML の TextArea の <codeph>cols</codeph> と <codeph>rows</codeph> に似ています。</p>
     
      <p><codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> のデフォルト値は <codeph>NaN</codeph> なので、RichTextEditable のサイズはデフォルトで自動調整されます。テキストがない場合は非常に小さいサイズに設定され、文字を入力するにつれて幅が広がり、Enter キーを押して改行すると高さが増えます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Button コンポーネントは、使用頻度の高い四角形のボタンを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark" type="uint">
<description>
   
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Button コンポーネントは、使用頻度の高い四角形のボタンを表します。Button コンポーネントは、押すことができるような外観をしています。デフォルトスキンはテキストラベルです。
 
  <p>通常、ボタンはイベントリスナを使用して、ユーザーがコントロールを選択したときのアクションを実行します。 Button コントロールのマウスをクリックしたときに Button コントロールが有効である場合は、<codeph>click</codeph> イベントと <codeph>buttonDown</codeph> イベントが送出されます。 ボタンは、有効か無効かにかかわらず、<codeph>mouseMove</codeph>、<codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph>、<codeph>rollOut</codeph>、<codeph>mouseDown</codeph>、<codeph>mouseUp</codeph> などのイベントを必ず送出します。</p>
 
  <p>Button コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 21 ピクセル、高さ 21 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     フォーカスマネージャーの要求に従ってデフォルトボタンを反映させます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     フォーカスマネージャーの要求に従ってデフォルトボタンを反映させます。このプロパティは、通常、ボタンがコンテナまたはフォームでデフォルトボタンとして機能するときにフォーカスマネージャーによって設定されます。true に設定すると、<codeph>emphasized</codeph> スタイルがボタンの <codeph>styleName</codeph> プロパティの末尾に追加されます。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  CheckBox コンポーネントは、オプションのラベルと、チェックマークの表示と非表示の状態を保持する小さなボックスから構成されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:CheckBox/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CheckBox コンポーネントは、オプションのラベルと、チェックマークの表示と非表示の状態を保持する小さなボックスから構成されます。オプションのテキストラベルは、CheckBox の左、右、上、または下に配置できます。
 
  <p>ユーザーが CheckBox コンポーネントまたはそれに関連付けられたテキストをクリックすると、CheckBox コンポーネントの <codeph>selected</codeph> プロパティが、チェックマークありの場合は <codeph>true</codeph> に、チェックマークなしの場合は <codeph>false</codeph> に設定されます。</p>
 
 
  <p>CheckBox コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 18 ピクセル、高さ 18 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph/>
 
  <p><codeph/></p>
 
  <p/>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext/></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext/></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      <codeph/>
     
      <p><codeph/></p>
     
      <p/>
     </description>
	</SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      
     
      <p/>
     </description>
	</SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  <p><codeph/><codeph/></p>
  
  <p>TitleWindow コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、デフォルトの高さまたは明示的に指定した高さを持つ、コンテンツ領域内のすべての子を収容し、さらにタイトルバーと境界線、垂直方向の子同士の間隔、コンテナの上下のパディングをすべて収容できる十分な大きさです。 width は、最も幅の広い子のデフォルト幅または明示的な幅にコンテナの左右のパディングを加えた値、またはタイトルテキストの幅のうち、いずれか大きい方の値です。</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext/></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext/></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  ユーザーが閉じるボタンを選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが閉じるボタンを選択したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TitleWindow:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      
      
      スキンに適用される状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>スキンに適用する状態の名前を指定する文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      
      
      スキンに適用される状態の名前を返します。例えば、Button コンポーネントは、状態を指定するために「up」、「down」、「over」、または「disabled」というストリングを返すことができます。
     
      <p>SkinnableComponent のサブクラスは、このメソッドをオーバーライドして値を返す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  Group クラスは、ビジュアルエレメントの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Group クラスは、ビジュアルエレメントの基本コンテナクラスです。Group コンテナは、IUIComponent インターフェイスを実装する任意のコンポーネントと、IGraphicElement インターフェイスを実装する任意のコンポーネントを子として受け取ります。視覚的な子である、ビジュアルコンポーネントとグラフィックコンポーネントの両方を管理する場合に、このコンテナを使用します。 
 
  <p>パフォーマンスを向上させると共にアプリケーションのサイズを最小限に抑えるため、Group コンテナにはスキンを適用できません。スキンを適用するには、代わりに SkinnableContainer を使用します。</p>
 
  <p>メモ：コンポーネントや別の Group など、Group の内部に DisplayObject の子がある場合、スケールグリッドが正しく機能しないことがあります。子が GraphicElement であり、そのすべてが Group の DisplayObject を共有する場合は、スケールグリッドは正しく動作します。</p> 
 
  <p>子の GraphicElement で次のいずれかのプロパティを設定すると、GraphicElement は独自の DisplayObject を作成する必要があり、したがって Group でのスケールグリッドプロパティは否定されます。</p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。<codeph>event.element</codeph> は、削除されるビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。<codeph>event.element</codeph> は、追加されたビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      エレメントが変更されてその再描画が必要であることを、ホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントが変更されてその再描画が必要であることを、ホストコンポーネントに通知します。Group は、IGraphicElement に対して <codeph>validateDisplayList()</codeph> メソッドを呼び出して再描画することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      エレメントが変更されてプロパティの検証が必要であることを、ホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントが変更されてプロパティの検証が必要であることを、ホストコンポーネントに通知します。Group は、IGraphicElement に対して <codeph>validateProperties()</codeph> メソッドを呼び出してそのプロパティをコミットすることがきでます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      エレメントレイヤーが変更されたことをホストに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>サイズが変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントレイヤーが変更されたことをホストに通知します。Group は、共有された DisplayObject があるエレメントのシーケンスを再評価し、必要に応じて DisplayObject の再割り当てを行い、そのシーケンスを結果として再描画します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      エレメントサイズが変更されたことをホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>サイズが変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントサイズが変更されたことをホストコンポーネントに通知します。Group は、IGraphicElement に対して <codeph>validateSize()</codeph> メソッドを呼び出してそのサイズを検証することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      使用するブレンドモードを指定する BlendMode クラスの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      使用するブレンドモードを指定する BlendMode クラスの値です。内部的には、2 つの方法でビットマップを描画できます。ブレンドモードを有効にした場合、または外部クリッピングマスクを使用する場合には、ビットマップで塗りつぶされた四角形シェイプをベクターレンダーに追加することによってビットマップが描画されます。このプロパティを無効な値に設定しようとすると、Flash Player または Adobe AIR は値を <codeph>BlendMode.NORMAL</codeph> に設定します。 
     
      <p><codeph/><codeph/><codeph/></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      スケールグリッドの下座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      スケールグリッドの下座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     スケールグリッドの左座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     スケールグリッドの左座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     スケールグリッドの右座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     スケールグリッドの右座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     スケールグリッドの上座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     スケールグリッドの上座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      この Group のビジュアルコンテンツの子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      この Group のビジュアルコンテンツの子です。このメソッドは Flex が内部的に使用するものであり、開発者が直接使用することができません。
     
      <p>コンテンツアイテムは、IVisualElement オブジェクトのみである必要があります。ビジュアルエレメントは一度に 1 つのコンテナ内でのみ使用できるため、<codeph>mxmlContent</codeph> 配列は、複数の Group コンテナの間で共有されていない必要があります。</p>
     
      <p>コンテンツが配列である場合は、その配列を直接変更しないでください。代わりに、Group クラスによって定義されたメソッドを使用します。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  RadioButton コンポーネントを使用すると、一連の相互排他的な選択肢の中から 1 つだけをユーザーに選択させることができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    group=the automatically created default RadioButtonGroup
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButton コンポーネントを使用すると、一連の相互排他的な選択肢の中から 1 つだけをユーザーに選択させることができます。RadioButtonGroup は、同じ <codeph>groupName</codeph> プロパティを持つ複数の RadioButton コンポーネントで構成されます。RadioButton インスタンスを RadioButtonGroup にグループ化することはオプションですが、グループ化を行うと、例えば、単一のイベントハンドラーを個々の RadioButton ではなく、RadioButton グループで設定できます。
 
  <p>RadioButton グループでは、<codeph>&lt;s:RadioButtonGroup></codeph> タグで作成したグループを参照できます。ユーザーは、グループ内のメンバーを一度に 1 つのみ選択できます。 選択されていないグループメンバーを選択すると、同じグループ内でそれまで選択されていた RadioButton コンポーネントは選択解除されます。</p>
 
  <p>RadioButton コンポーネントには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コンポーネントのテキストラベル全体を表示できる幅</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 18 ピクセル、高さ 18 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      RadioButton コンポーネントは、RadioButtonGroup が有効になっていて、RadioButton 自体が有効になっている場合に有効になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      RadioButton コンポーネントは、RadioButtonGroup が有効になっていて、RadioButton 自体が有効になっている場合に有効になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      この RadioButton が属する RadioButtonGroup コンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      この RadioButton が属する RadioButtonGroup コンポーネントです。RadioButtonGroup に追加する RadioButton を作成するときは、すべてのボタンで <codeph>group</codeph> プロパティまたは <codeph>groupName</codeph> プロパティを使用する必要があります。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      この RadioButton コンポーネントが属するグループの名前を指定します。または、この RadioButton が RadioButtonGroup コンポーネントによって定義されたグループの一部の場合は、RadioButtonGroup コンポーネントの id プロパティの値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      この RadioButton コンポーネントが属するグループの名前を指定します。または、この RadioButton が RadioButtonGroup コンポーネントによって定義されたグループの一部の場合は、RadioButtonGroup コンポーネントの <codeph>id</codeph> プロパティの値を指定します。<codeph>groupName</codeph> プロパティが同じ値に設定されているラジオボタンはすべて、同じタブグループに追加されます。
     
      <p>RadioButtonGroup に追加するラジオボタンを作成するときは、すべてのボタンで <codeph>group</codeph> プロパティまたは <codeph>groupName</codeph> プロパティを使用することをお勧めします。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>group</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      （オプション）RadioButton コンポーネントに関連付けられるユーザー定義値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      （オプション）RadioButton コンポーネントに関連付けられるユーザー定義値です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput は、1 行のテキストを均一のフォーマットで入力および編集するときに使用するテキスト入力コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/><skinStates><SkinState name="disabled" owner="spark.components:TextInput" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:TextInput" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars=""
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput は、1 行のテキストを均一のフォーマットで入力および編集するときに使用するテキスト入力コントロールです。
 
  <p>Flex 4 から導入された Spark 版の TextInput では、新しい Text Layout Framework（TLF）ライブラリが使用されます。このライブラリは、Flash Player 10 の新しい Flash Text Engine（FTE）をベースとして作成されています。これらの機能を組み合わせることにより、国際化対応の高品質な文字体裁を使用したテキスト編集が可能になります。MX 版の TextInput では、古い TextField クラスを使用してテキストが表示されます。</p>
 
  <p><codeph>text</codeph> プロパティを使用すると、表示するテキストを設定したり、ユーザーが入力したテキストを取得したりできます。このプロパティは String なので、ユーザーが 123.45 のような数値を入力した場合は "123.45" として扱われます。</p>
 
  <p>テキストのフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルを使用して設定されます。</p>
 
  <p><codeph>widthInChars</codeph> プロパティを使用すると、フォントサイズに応じて伸縮する方式で幅を指定できるので便利です。また、幅を明示的にピクセル単位で指定したり、パーセントで指定したり、<codeph>left</codeph> と <codeph>right</codeph> などの制約を使用することもできます。通常は高さを明示的に指定する必要はありません。コントロールのデフォルトの高さは、1 行のテキストを十分に表示できるように設定されています。</p>
 
  <p><codeph>maxChars</codeph> プロパティを使用して、ユーザーが入力できる文字数を制限したり、<codeph>restrict</codeph> を使用して、ユーザーが入力できる文字を制限したりすることもできます。パスワード入力用にこのコントロールを使用するには、<codeph>displayAsPassword</codeph> プロパティを <codeph>true</codeph> に設定します。</p>
 
  <p>このコントロールは複数行のテキスト入力をサポートしないので、ユーザーが Enter キーを押すと、改行が挿入される代わりに、<codeph>FlexEvent.ENTER</codeph> イベントが送出されます。</p>
 
  <p>このコントロールには、スキンを適用できます。このスキンには、テキストの表示と編集を処理する RichEditableText インスタンスが含まれています。また、このスキンは境界線と背景の描画も処理します。RichEditableText には <codeph>textDisplay</codeph> オブジェクトとしてアクセスできます。</p>
 
  <p>RichEditableText では TLF が使用されるので、Spark 版の TextInput ではフランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>"rtl"</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>"start"</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>"ltr"</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>"rtl"</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>"end"</codeph> に設定します。</p>
 
  <p>また、Spark の TextInput では TLF が使用されるので、1 回の編集セッション内で取り消し / やり直し操作を何度でも実行できます。編集セッションは、コントロールがキーボードフォーカスを取得したときに開始され、コントロールがフォーカスを失ったときに終了します。</p>
 
  <p>TextInput コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 188 ピクセル、高さ 22 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 2 ピクセル、高さ 2 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  ユーザーが Enter キーを押したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが Enter キーを押したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      em 単位で測定されたコントロールのデフォルトの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
      em 単位で測定されたコントロールのデフォルトの幅です。
	 
	  <p>em は活字の測定単位で、ポイントサイズと同じです。必ずしも「M」の文字の幅と正確に一致しているわけではありませんが、多くのフォントでは、「M」が約 1 em の幅になっています。コントロールの <codeph>fontSize</codeph> スタイルは、em 単位をピクセル数で計算するために使用されます。</p>
	 
	  <p>例えば、約 20 文字のテキストを入力できるように TextInput の幅を設定する必要がある場合は、このプロパティを 20 に設定します。</p>
	 
	  <p>明示的な値、パーセント、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、このプロパティは無視されます。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  このアイテムレンダラーは、ButtonBar のデフォルトスキンである ButtonBarSkin クラスで使用されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      アイテムレンダラーで表示するストリングです。 
           <p>アイテムレンダラーのホストコンポーネントは <codeph>itemToLabel()</codeph> メソッドを使用して、アイテムレンダラーによって表示するストリングにデータアイテムを変換できます。 </p>
     
      <p>List や ButtonBar などのコントロールの場合、<codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティを使用して、ストリングを含むデータアイテムのフィールドを指定できます。それ以外の場合、ホストコンポーネントは <codeph>toString()</codeph> メソッドを使用して、ストリングにデータアイテムを変換できます。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、true を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、<codeph>true</codeph> を含みます。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  Panel クラスは、タイトルバー、キャプション、境界線、および子のコンテンツ領域を含むコンテナを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントのドロップシャドウの可視性を制御します。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      コンテナのコントロールバー領域の外観を定義するスキンパーツです。PanelSkin クラスのデフォルトの定義では、Panel コンテナのコンテンツ領域の下部にコントロールバー領域が表示され、背景は灰色に設定されます。 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      コンテナ内のタイトルテキストの外観を定義するスキンパーツです。
     
      </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Panel クラスは、タイトルバー、キャプション、境界線、および子のコンテンツ領域を含むコンテナを定義します。
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Panel:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      
      スキンに適用される状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>スキンに適用する状態の名前を指定する文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      
      スキンに適用される状態の名前を返します。例えば、Button コンポーネントは、状態を指定するために「up」、「down」、「over」、または「disabled」というストリングを返すことができます。
     
      <p>SkinnableComponent のサブクラスは、このメソッドをオーバーライドして値を返す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Panel:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>detachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>removeDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツからビヘイビアーを削除するには、この関数をオーバーライドします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Panel コンテナのコントロールバー領域に含めるコンポーネントのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Panel コンテナのコントロールバー領域に含めるコンポーネントのセットです。Panel コンテナのコントロールバー領域の場所と外観は、spark.skins.spark.PanelSkin クラスによって決定されます。PanelSkin クラスのデフォルトの定義では、Panel コンテナのコンテンツ領域の下部にコントロールバー領域が表示され、背景は灰色に設定されます。コントロールバーのデフォルトの外観を変更するカスタムスキンを作成します。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      コンテナのコントロールバー領域のレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのコントロールバー領域のレイアウトを定義します。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
     
      <p><b/><codeph/></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      タイトルバーに表示されるタイトルまたはキャプションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      タイトルバーに表示されるタイトルまたはキャプションです。 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  HGroup コンテナは、HorizontalLayout クラスを使用する Group コンテナのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  HGroup コンテナは、HorizontalLayout クラスを使用する Group コンテナのインスタンスです。<codeph>layout</codeph> プロパティを変更しないでください。代わりに、HGroup クラスのプロパティを使用して、HorizontalLayout クラスの特性を変更します。
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。<codeph>layout</codeph> プロパティを HorizontalLayout クラスのインスタンスに初期化します。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  NumericStepper コントロールを使用すると、一定の間隔で増減する数値を選択できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      ユーザーが NumericStepper コンポーネントの値を編集できるようにする、TextInput コントロールを定義するスキンパーツです。ユーザーが Enter キーを押すか、NumericStepper のフォーカスを外すか、または NumericStepper のステップを変えると、値が丸められてコミットされます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NumericStepper
 
    <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
 
    <strong>Styles</strong>
 
   alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundColor=""
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Times New Roman"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
 /&gt;
 </pre>

  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericStepper コントロールを使用すると、一定の間隔で増減する数値を選択できます。NumericStepper は Spinner コンポーネントと同じ機能を提供しますが、コンポーネントの値を、コントロールの矢印ボタンを使用して変更するのではなく直接編集できるように、TextInput コントロールを追加します。
 
  <p>NumericStepper コントロールは、単一行のテキスト入力フィールドと、使用できる値を表示するための 2 つの矢印ボタンから構成されます。上矢印キー、下矢印キーおよびマウスホイールを使用して値を変更することもできます。ユーザーが Enter キーを押すか、コンポーネントのフォーカスを外すか、あるいは矢印ボタンの操作または <codeph>changeValueByStep()</codeph> メソッドの呼び出しを通じて NumericStepper のステップを変えると、入力値がコミットされます。</p>
 
  <p>NumericStepper コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 53 ピクセル、高さ 23 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 40 ピクセル、高さ 40 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      コンストラクター
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクター
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      IME（Input Method Editor）のモードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      IME（Input Method Editor）のモードを指定します。 IME を使用することによって、ユーザーは中国語、日本語、および韓国語のテキストを入力できます。Flex では、コントロールにフォーカスが置かれたときに、IME を指定されたモードに設定し、コントロールからフォーカスが離れたときに、元のモードに戻します。
     
     <p>flash.system.IMEConversionMode クラスで、このプロパティの有効な値の定数を定義します。IME を指定しない場合は、<codeph>null</codeph> を指定します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      フィールドに入力できる最大の文字数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      フィールドに入力できる最大の文字数です。 値が 0 の場合は、文字をいくつでも入力できます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      スキンの textDisplay プロパティで表示される値を書式設定するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      スキンの <codeph>textDisplay</codeph> プロパティで表示される値を書式設定するコールバック関数です。この関数は、単一の数値を引数として受け取り、形式を設定したストリングを返します。
     
      <p>この関数のシグネチャは次のとおりです。</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      スキンの textDisplay フィールドで表示される値から数値を抽出するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      スキンの <codeph>textDisplay</codeph> フィールドで表示される値から数値を抽出するコールバック関数です。この関数は、単一のストリングを引数として受け取り、数値を返します。
     
      <p>この関数のシグネチャは次のとおりです。</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      value に設定可能な最大値を表す数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>value</codeph> に設定可能な最大値を表す数値です。<codeph>minimum</codeph> または <codeph>value</codeph> の値が <codeph>maximum</codeph> よりも大きい場合、その値は新しい <codeph>maximum</codeph> を反映するように変更されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  IItemRendererOwner インターフェイスは、アイテムレンダラーをサポートするためにクラスが実装する必要がある、API の基本セットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRendererOwner インターフェイスは、アイテムレンダラーをサポートするためにクラスが実装する必要がある、API の基本セットを定義します。IItemRendererOwner インターフェイスを実装するクラスは、アイテムレンダラーのホストコンポーネントと呼ばれます。
  
  <p>アイテムレンダラーを定義するクラスには、IItemRenderer インターフェイスを実装する必要があります。</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      アイテムレンダラーで表示するストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムレンダラーで表示するストリングです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>表示するデータアイテムです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムレンダラーで表示するストリングを返します。ストリングは、アイテムレンダラーの <codeph>labelText</codeph> プロパティに書き込まれます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      再使用のため、レンダラーを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>アイテムレンダラーです。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      再使用のため、レンダラーを更新します。
     
      <p/>    
           </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Spinner コンポーネントは一定の間隔で増減する値を選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのフォーカスリングのアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときに <codeph>value</codeph> プロパティを <codeph>stepSize</codeph> 分だけデクリメントするボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときに <codeph>value</codeph> プロパティを <codeph>stepSize</codeph> 分だけインクリメントするボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
 
    <strong>Styles</strong>
    focusColor=""
    symbolColor=""
      
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spinner コンポーネントは一定の間隔で増減する値を選択します。<codeph>stepSize</codeph> プロパティの現在の値に基づいて、現在の値を増減させる 2 つのボタンを使用します。
  
  <p>Spinner は、現在の値を増やすためのボタンと現在の値を減らすためのボタンという、2 つの必須ボタンで構成されます。ユーザーは、上矢印キーと下矢印キーおよびマウスホイールを使用して値を変更することもできます。ユーザーが Enter キーを押すか、コンポーネントのフォーカスを外すか、あるいは矢印ボタンの操作または <codeph>changeValueByStep()</codeph> メソッドの呼び出しを通じて Spinner のステップを変えると、入力値がコミットされます。</p>
 
  <p>Spinner コンポーネントのスケールは、<codeph>value</codeph> プロパティに対して許可される値のセットです。<codeph/><codeph/>次に実際の使用例を示します。</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  この場合、スケールは {-1,2,5,8,10} です。
 
  <p>Spinner コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 19 ピクセル、高さ 23 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 12 ピクセル、高さ 12 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  ユーザー操作の結果として Spinner コントロールの値が変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザー操作の結果として Spinner コントロールの値が変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Spinner:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      スキンに適用される状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>スキンに適用する状態の名前を指定する文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      スキンに適用される状態の名前を返します。例えば、Button コンポーネントは、状態を指定するために「up」、「down」、「over」、または「disabled」というストリングを返すことができます。
     
      <p>SkinnableComponent のサブクラスは、このメソッドをオーバーライドして値を返す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Spinner:protected:system_mouseWheelHandler"><apiName>system_mouseWheelHandler</apiName><shortdesc>
      コンポーネントにフォーカスがあるときに、mouseWheel イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc>
      コンポーネントにフォーカスがあるときに、<codeph>mouseWheel</codeph> イベントを処理します。スピナーは、マウスイベントのデルタに <codeph>stepSize</codeph> を乗算した分量だけ移動されます。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      現在の value が maximum 値または minimum 値である場合のステップに適用する、コントロールのビヘイビアーを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在の <codeph>value</codeph> が <codeph>maximum</codeph> 値または <codeph>minimum</codeph> 値である場合のステップに適用する、コントロールのビヘイビアーを決定します。<codeph>allowValueWrap</codeph> が <codeph>true</codeph> の場合は、<codeph>maximum</codeph> 値から <codeph>minimum</codeph> 値、または <codeph>minimum</codeph> 値から <codeph>maximum</codeph> 値に、<codeph>value</codeph> プロパティが折り返されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  SkinnableContainer クラスは、ビジュアルコンテンツを格納するスキン可能コンテナの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
 </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントの背景色です。
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの背景のアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      コンテンツの子がプッシュされてレイアウトされる Group·を定義する、必須のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    creationPolicy="auto"
    horizontalScrollPosition="null"
    layout="BasicLayout"
    verticalScrollPosition="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableContainer クラスは、ビジュアルコンテンツを格納するスキン可能コンテナの基本クラスです。SkinnableContainer コンテナは、IVisualElement インターフェイスを実装する任意のコンポーネントを子として受け取ります。すべての Spark コンポーネントと Halo コンポーネントは、GraphicElement クラスと同じように IVisualElement インターフェイスを実装します。つまり、コンテナは、Rect や Ellipse などのグラフィッククラスを子として使用できます。
 
  <p>パフォーマンスを向上させると共にアプリケーションのサイズを最小限に抑えるため、Group コンテナを使用できます。Group コンテナにはスキンを適用できません。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Group</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。<codeph>event.element</codeph> は、削除されるビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。<codeph>event.element</codeph> は、追加されたビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  このコンポーネントのコンテンツが作成された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコンポーネントのコンテンツが作成された後に送出されます。遅延インスタンス化の場合、コンポーネントの作成後長時間が経過してからコンポーネントのコンテンツが作成される可能性があります。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      creationPolicy プロパティが none ではない場合、コンテンツの子を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>creationPolicy</codeph> プロパティが <codeph>none</codeph> ではない場合、コンテンツの子を作成します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      このコンポーネントのコンテンツを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントのコンテンツを作成します。<codeph>creationPolicy</codeph> プロパティが <codeph>auto</codeph> または <codeph>all</codeph> である場合、この関数は Flex フレームワークによって自動的に呼び出されます。<codeph>creationPolicy</codeph> が <codeph>none</codeph> である場合、ユーザーがこのメソッドを呼び出してコンテンツを初期化します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      スキンパーツが追加されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      スキンパーツが追加されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>attachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>createDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツにビヘイビアーを追加するには、この関数をオーバーライドします。基本クラスから継承したスキンパーツのビヘイビアーをオーバーライドする場合は、<codeph>super.partAdded()</codeph> メソッドを呼び出さないようにします。それ以外の場合は、常に <codeph>super.partAdded()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>detachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>removeDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツからビヘイビアーを削除するには、この関数をオーバーライドします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      遅延コンテンツが作成されている場合は True です。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      遅延コンテンツが作成されている場合は True です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      コンテンツプロパティの初期値を作成するファクトリオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      コンテンツプロパティの初期値を作成するファクトリオブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText は、1 行または複数行のリッチフォーマットテキストや埋め込みイメージを表示する低レベルの UIComponent です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnGap">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#columnCount">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#verticalAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingTop">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paddingBottom">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineBreak">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText は、1 行または複数行のリッチフォーマットテキストや埋め込みイメージを表示する低レベルの UIComponent です。
 
  <p>パフォーマンス上の理由から、スクロール、選択、編集、クリック可能なハイパーリンク、URL からロードされる画像はサポートされません。これらの機能が必要な場合は、RichEditableText クラスの説明を参照してください。</p>
 
  <p>Flex 4 から導入された RichText では、新しい Text Layout Framework（TLF）ライブラリが使用されます。このライブラリは、Flash Player 10 の新しい Flash Text Engine（FTE）をベースとして作成されています。これらの機能を組み合わせることにより、国際化対応の高品質な文字体裁を使用したリッチテキストレイアウトが可能になります。</p>
 
  <p>必要な機能だけを提供するという理念に基づき、Spark アーキテクチャには 3 つのテキストプリミティブ（Label、RichText および RichEditableText）が用意されています。Label は TLF を使用せず FTE のみを使用するので、最も高速で軽いですが、機能は限られており、リッチテキスト、スクロール、選択、編集はサポートされません。RichText には、複雑なレイアウト設定を含むリッチテキストを表示する機能が追加されていますが、インタラクティブ機能はサポートされません。RichEditableText は最も低速で重いですが、TLF で実行できるほとんどの機能がサポートされます。ニーズに合わせて、最も高速なテキストプリミティブを使用してください。</p>
 
  <p>RichText は MX の mx.controls.Text コントロールに似ています。MX コントロールでは、テキストの表示に TLF ではなく、古い TextField クラスが使用されていました。</p>
 
  <p>最も重要な違いは、次のとおりです。
  <ul>
    <li>RichText では、文字体裁、国際言語のサポート、およびテキストレイアウトの機能が Text より向上しています。</li>
    <li>RichText には、表示内容のオブジェクト指向モデルがありますが、Text にはありません。</li>
    <li>Text は選択可能ですが、RichText は選択をサポートしていません。</li>
  </ul></p>
 
 
  <p>RichText では、リッチテキストの TLF オブジェクト指向モデルが使用されます。このモデルでは、区分、段落、スパン、画像などのテキストレイアウト要素が ActionScript オブジェクトによって実行時に表現されます。これらのオブジェクトは、プログラムを通じてアクセスして操作できます。リッチテキストを表す TLF の中心的なオブジェクトは TextFlow です。RichText の表示内容を指定するには、RichText の <codeph>textFlow</codeph> プロパティを TextFlow インスタンスに設定します。このインスタンスを作成する方法については、<codeph>textFlow</codeph> プロパティの説明を参照してください。TextBase から継承した <codeph>text</codeph> プロパティを設定することもできますが、TextFlow でリッチテキストを使用する必要がない場合は、代わりに Label を使用することをお勧めします。</p>
 
  <p>次の例に示すように、コンパイル時に、TLF マークアップタグを RichText タグ内に配置できます。
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  この例では、MXML コンパイラーによって、<codeph>content</codeph> プロパティが設定され、指定した FlowElement から TextFlow が自動的に作成されます。</p>
 
  <p>デフォルトのテキストフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルによって決定されます。TextFlow でフォーマット情報が指定されている場合は、CSS スタイルで指定されているデフォルトのフォーマットがオーバーライドされます。</p>
 
  <p>行の間隔は <codeph>lineHeight</codeph> スタイルで制御でき、段落の間隔は <codeph>paragraphSpaceBefore</codeph> スタイルと <codeph>paragraphSpaceAfter</codeph> スタイルで制御できます。テキストの整列や均等割り付けには、<codeph>textAlign</codeph> スタイルと <codeph>textAlignLast</codeph> スタイルを使用できます。コンポーネントの端からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルを使用します。</p>
 
  <p>RichText の幅が指定されていない場合は、明示的な改行により各行の長さが決定され、最も長い行に合わせて Label の幅が決定されます。</p>
 
  <p>幅を指定すると、コンポーネントの右端でテキストが折り返され、表示領域にテキストが収まりきらない場合は、テキストが切り詰められます。<codeph>lineBreak</codeph> スタイルを <codeph>"explicit"</codeph> に設定した場合は、CR（<codeph>"¥r"</codeph>）、LF（<codeph>"¥n"</codeph>）または CR+LF（<codeph>"¥r¥n"</codeph>）を <codeph>text</codeph> で使用する場合や、<codeph>&lt;p></codeph> と <codeph>&lt;br/></codeph> を TLF マークアップで使用する場合と同様に、明示的に改行が指定されている位置でのみ行が折り返されます。この場合、コントロールの幅を超えるテキストは切り詰められます。</p>
 
  <p>RichText では、表示領域を超える量のテキストがある場合、テキストを自動的に切り詰めることができます。テキストを切り詰めるとは、余分なテキストを "..." などの切り詰めインジケーターに置き換えることです。継承プロパティ <codeph>maxDisplayedLines</codeph> および <codeph>isTruncated</codeph> の説明を参照してください。</p>
 
  <p>デフォルトでは、RichText には背景がありませんが、<codeph>backgroundColor</codeph> スタイルと <codeph>backgroundAlpha</codeph> スタイルを使用すると背景を描画できます。境界線はサポートされません。境界線や複雑な背景を描画する必要がある場合は、Rect などの別のグラフィックエレメントを RichText の背後で使用します。</p>
 
  <p>RichText では TLF が使用されるので、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>"rtl"</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>"start"</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>"ltr"</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>"rtl"</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>"end"</codeph> に設定します。</p>
 
  <p>RichText では TLF の StringTextFlowFactory クラスと TextFlowTextLineFactory クラスを使用して 1 つまたは複数の TextLine オブジェクトが作成され、テキストが静的に表示されます。パフォーマンス上の理由から、TextLine には個々の字形の情報は格納されません。詳しくは、flash.text.engine.TextLineValidity.STATIC を参照してください。</p>
 
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
	  このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに textFlow プロパティを使用してください。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに <codeph>textFlow</codeph> プロパティを使用してください。
	 
	  <p><codeph>content</codeph> プロパティは、次のような MXML を記述できるように、RichText のデフォルトプロパティになっています。
	  <pre>
	  &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
	  </pre>
	  この場合は、コンテンツとして指定した String と SpanElement を使用して TextFlow が作成されます。</p>
	 
	  <p>このプロパティは Object として型指定されています。Object は、String、FlowElement、または String と FlowElement の配列に設定できます。上記の例では、2 つのエレメントで構成される配列をコンテンツと指定しています。最初のエレメントは「Hello」という String で、2 番目のエレメントは太字の「World」というテキストを含む SpanElement です。</p>
	 
	  <p>指定方法にかかわらず、コンテンツは TextFlow オブジェクトに変換されます。このプロパティの値を取得すると、変換後の TextFlow オブジェクトが取得されます。</p>
	 
	  <p>リッチテキストコンテンツは Object ではなく TextFlow として厳密に型指定されているので、実行時のリッチテキストコンテンツの取得と設定には <codeph>textFlow</codeph> プロパティを使用することをお勧めします。TextFlow は、Text Layout Framework 内のリッチテキストコンテンツの正準表現です。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。
     
      <p>TextFlow は、Text Layout Framework（TLF）で最も重要なクラスです。このクラスは、リッチテキストコンテンツを表す FlowElements のツリーのルートです。</p>
	 
	  <p>通常、TLF マークアップから TextFlow を作成するには、<codeph>TextFlowUtil.importFromString()</codeph> メソッドまたは <codeph>TextFlowUtil.importFromXML()</codeph> メソッドを使用します。あるいは、（HTML のサブセットをインポートできる）TLF の TextConverter クラスを使用するか、<codeph>addChild()</codeph> などのメソッドを TextFlow に対して使用して TextFlow を作成することもできます。</p>
     
	  <p>このプロパティと <codeph>text</codeph> プロパティの設定は相互に影響します。</p>
     
      <p><codeph>textFlow</codeph> を設定して、<codeph>text</codeph> を取得すると、各段落のテキストは 1 つの LF（"¥n"）で区切られます。</p>
     
      <p><codeph>text</codeph> を <codeph>"Hello World"</codeph> などの String に設定して <codeph>textFlow</codeph> を取得すると、1 つの SpanElement を含む 1 つの ParagraphElement で構成される TextFlow が取得されます。</p>
     
      <p>テキストに CR（"¥r"）、LF（"¥n"）、または CR+LF（"¥r¥n"）という明示的な改行が含まれている場合は、それぞれに 1 つのスパンを含む複数の段落で構成された TextFlow がコンテンツになります。</p>
     
	  <p>TextFlow オブジェクトを TLF マークアップに変えるには、<codeph>TextFlowUtil.export()</codeph> マークアップを使用します。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  SkinnableDataContainer クラスは、データアイテムの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash9" type="Number">
<description>
  フォーカス矩形のアウトラインの幅（ピクセル単位）を表します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントにフォーカスがある場合の、フォーカスリングのカラーです。
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのフォーカスリングのアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      データアイテムがプッシュ、レンダリング、およびレイアウトされる、スキンクラス内の DataGroup を定義する、必須のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    dataProvider="null"
    horizontalScrollPosition="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
    verticalScrollPosition="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableDataContainer クラスは、データアイテムの基本コンテナクラスです。SkinnableDataContainer クラスは、データアイテムを表示用のビジュアルエレメントに変換します。このコンテナは可視エレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。
 
  <p>SkinnableDataContainer クラスは、データアイテムまたは IVisualElement インターフェイスを実装して DisplayObject であるビジュアルエレメントを、子として受け取ります。データアイテムは、String オブジェクトや Number オブジェクトなどの単純なデータアイテムであることも、Object オブジェクトや XMLNode オブジェクトなどのより複雑なデータアイテムであることもあります。これらのコンテナはビジュアルエレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。</p>
 
  <p>アイテムレンダラーは、コンテナ内のデータアイテムの視覚的な表現を定義します。アイテムレンダラーは、コンテナによって表示できる形式にデータアイテムを変換します。データアイテムを適切にレンダリングするには、アイテムレンダラーを SkinnableDataContainer に渡す必要があります。</p>
 
  <p>データアイテムのコンテナは必要でも、スキンは必要ない場合は、DataGroup（スキンにはできません）を使用してパフォーマンスとアプリケーションのサイズを向上させることをお勧めします。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  レンダラーがコンテナから削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがコンテナから削除されたときに送出されます。<codeph>event.renderer</codeph> プロパティには、削除されたレンダラーが格納されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  レンダラーがコンテナに追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがコンテナに追加されたときに送出されます。<codeph>event.renderer</codeph> プロパティには、追加されたレンダラーが格納されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      指定されたデータアイテムを受け取り、アイテムレンダラーが表示するデータアイテムの String 表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>データアイテムの String 表現です。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>データアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたデータアイテムを受け取り、アイテムレンダラーが表示するデータアイテムの String 表現を返します。このメソッドは、データアイテムの <codeph>toString()</codeph> メソッドを使用して、データアイテムを String 表現に変換します。データアイテムが Null の場合は、空の文字列が返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      使用または再使用するためにアイテムレンダラーを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>更新するレンダラーです。 
     
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      使用または再使用するためにアイテムレンダラーを更新します。アイテムレンダラーが最初に作成されるとき、または仮想化のためにリサイクルされるときに、この SkinnableDataContainer インスタンスは、アイテムレンダラーの <codeph>label</codeph> プロパティと <codeph>owner</codeph> プロパティを設定できます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  ResizeMode クラスは、レイアウトシステムによって指定されたサイズでコンポーネントがその子をサイズ変更するために使用する、モードの列挙を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ResizeMode クラスは、レイアウトシステムによって指定されたサイズでコンポーネントがその子をサイズ変更するために使用する、モードの列挙を定義します。
 
  <p>コンポーネントは、それ自身のサイズ（<codeph>width</codeph> および <codeph>height</codeph>）を変更し、その子を適切に再レイアウトできます（これはデフォルトのサイズ変更モードです）。</p>
 
  <p>コンポーネントのもう 1 つのオプションは、そのスケールを変更する方法です。この場合、子を変更する必要はまったくありません。このオプションは、<codeph>Group</codeph> によってサポートされています。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NOSCALE"><apiName>NOSCALE</apiName><shortdesc>
      width と height を変更することによってサイズを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>width</codeph> と <codeph>height</codeph> を変更することによってサイズを変更します。
     
      <p>コンポーネントは常にそれ自体のサイズを設定してから、レイアウトまたはユーザーによって指定された実際のサイズでその子をレイアウトします。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      scaleX プロパティと scaleY プロパティを設定することによってサイズを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>scaleX</codeph> プロパティと <codeph>scaleY</codeph> プロパティを設定することによってサイズを変更します。
     
      <p>コンポーネントは常にそれ自体のサイズを設定してから、その測定されたサイズでその子をレイアウトします。スケールは、レイアウトまたはユーザーによって指定されたサイズに一致するように調整されます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Scroller コンポーネントは、ビューポートと呼ばれる単一のスクロール可能なコンポーネント、水平スクロールバーおよび垂直スクロールバーを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  どのような条件で垂直スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。ただし、プログラムで、その verticalScrollPosition プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの contentHeight がその height よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、Scroller コンポーネントの測定サイズに影響します。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
 </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  どのような条件で水平スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。ただし、プログラムで、その horizontalScrollPosition プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの contentWidth がその width よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、Scroller コンポーネントの測定サイズに影響します。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#whiteSpaceCollapse">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textRotation">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#tabStops">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphStartIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceBefore">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphSpaceAfter">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#paragraphEndIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#leadingModel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#firstBaselineOffset">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#breakOpportunity">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#blockProgression">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#typographicCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingRight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#trackingLeft">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textJustify">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textDecoration">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlpha">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlignLast">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textAlign">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#renderingMode">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#locale">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineThrough">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#lineHeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#ligatureLevel">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#kerning">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#justificationRule">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontWeight">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontStyle">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontSize">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontLookup">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#fontFamily">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#dominantBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#direction">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitWidth">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#digitCase">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#color">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#cffHinting">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="superscript,subscript,inherit" inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#baselineShift">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#alignmentBaseline">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Times New Roman"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Scroller コンポーネントは、ビューポートと呼ばれる単一のスクロール可能なコンポーネント、水平スクロールバーおよび垂直スクロールバーを表示します。ビューポートは、IViewport インターフェイスを実装する必要があります。ビューポートのスキンは Group クラスから派生している必要があります。
 
  <p>Spark の Group、DataGroup、および RichEditableText コンポーネントは、IViewport インターフェイスを実装し、Scroller コントロールの子として使用できます。次に例を示します。</p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
 
  <p>Image コントロールのサイズは、親の Group コンテナのサイズよりも大きく設定されます。デフォルトでは、親コンテナの境界線を超えて子が拡張されます。Scroller を使用すると、親コンテナの境界線を超える子の拡張は許可されず、親コンテナの境界線で子が切り詰められてスクロールバーが表示されます。</p>
 
  <p> </p>
 
  <p> </p>
 
  <p>IViewport インターフェイスは、IViewport インターフェイスを実装するコンポーネントのビューポートを定義します。ビューポートは、表示するコンテナの領域の矩形のサブセットであり全体は表示しません。<codeph/><codeph/><codeph/><codeph/></p>
 
  <p>スクロールバーには、コンテナのビューポートの明示的な設定を組み合わせることができます。ビューポートの最初の位置はビューポート設定によって決定されますが、その後スクロールバーを使用して移動できます。次に例を示します。 </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p><codeph/><codeph/><codeph/><codeph/></p>
 
  <p>Scroller のスキンレイアウトは変更できません。スクロールポリシーを処理するプライベートレイアウト実装に無条件に設定されます。<codeph/><codeph/></p>
 
  <p>Scroller コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      ビューポートが存在し、渡されたインデックスが 0 である場合は、そのビューポートを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックス位置が子リストに存在しない場合にスローされます。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたインデックス位置にあるエレメントです。
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>取得するエレメントのインデックスです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビューポートが存在し、渡されたインデックスが 0 である場合は、そのビューポートを返します。それ以外の場合は、RangeError をスローします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      渡されたエレメントがビューポートである場合は 0 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エレメントがこのオブジェクトの子ではない場合にスローされます。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>識別するエレメントのインデックス位置です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>識別するエレメントです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      渡されたエレメントがビューポートである場合は 0 を返します。それ以外の場合は、ArgumentError をスローします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      <p>使用可能な幅や高さに合わせてコンテンツの「再フロー」が行われる TextArea などのコンポーネントでは、このプロパティを使用すると、測定サイズを安定化する場合があります。デフォルトでは、TextArea の測定サイズは <codeph>widthInChars</codeph>プロパティと <codeph>heightInChars</codeph> プロパティによって定義されます。多くのアプリケーションでは、TextArea のスキンの Scroller によってスクロールバーが表示されたときでも測定サイズが変化しないように設計することをお勧めします。</p>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      ビューポートと Scroller の端の間の最小スペースです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
     </apiDefaultValue></apiValueDef><apiDesc>
      ビューポートと Scroller の端の間の最小スペースです。<codeph/><codeph/>ScrollBars は Scroller の端と同一面に配置されます。   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      ビューポイントがある場合は 1、それ以外の場合は 0 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      ビューポイントがある場合は 1、それ以外の場合は 0 を返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      スクロールされるビューポートコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      スクロールされるビューポートコンポーネントです。
     
      <p>
      <codeph>viewport</codeph> プロパティが設定されている場合、ビューポートの <codeph>clipAndEnableScrolling</codeph> プロパティが true に設定されてスクロールが有効になります。Scroller は、ビューポートの回転を直接サポートしていません。ビューポートのコンテンツは任意に変換できますが、ビューポート自体は変換できません。
     </p>
     
      このプロパティは Bindable です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:horizontalScrollBar:set"><apiName>horizontalScrollBar</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>spark.components:HScrollBar</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:verticalScrollBar:set"><apiName>verticalScrollBar</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>spark.components:VScrollBar</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  VGroup コンテナは、VerticalLayout クラスを使用する Group コンテナのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  VGroup コンテナは、VerticalLayout クラスを使用する Group コンテナのインスタンスです。<codeph>layout</codeph> プロパティを変更しないでください。代わりに、VGroup クラスのプロパティを使用して、VerticalLayout クラスの特性を変更します。
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。<codeph>layout</codeph> プロパティを VerticalLayout クラスのインスタンスに初期化します。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
    
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
       
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    restrict=""
 
    <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
   
 
  <p/>
 
  <p/>
 
  <p/>
 
  <p/>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry/>
        </row><row>
           <entry>最小サイズ</entry>
           <entry/>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ComboBoxSkin
                <p/></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext/></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:ComboBox:protected:findKey"><apiName>findKey</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      <codeph/> 
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
     
      <p> </p>
     
      <p>このコールバック関数には次のシグネチャが必要です。 </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector</pre>
     
      <p>例えば、「aRiz」は「Arizona」に一致しますが、「riz」は一致しません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
       
     
      <p>このコールバック関数には次のシグネチャが必要です。 </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p><codeph/></p>
     
      <p><codeph/> </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  NavigatorContent クラスは、ViewStack、TabNavigator、Accordion などの MX ナビゲーターコンテナで使用できる Spark コンテナを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  NavigatorContent クラスは、ViewStack、TabNavigator、Accordion などの MX ナビゲーターコンテナで使用できる Spark コンテナを定義します。
 
  <p>NavigatorContent コンテナは、MX ナビゲーターコンテナの外では使用しないでください。</p>
 
  <p>NavigatorContent コンテナの作成ポリシーは、親のナビゲーターコンテナの作成ポリシーに基づいています。 </p>
 
  <ul>
    <li>親の作成ポリシーが none に設定されている場合、NavigatorContent の作成ポリシーも none になります。</li>
    <li>親の作成ポリシーが all に設定されている場合、NavigatorContent の作成ポリシーも all になります。</li>
    <li>親の作成ポリシーが auto に設定されている場合、NavigatorContent の作成ポリシーは none になります。</li>
  </ul>
 
  <p>NavigatorContent コンテナでは、作成ポリシーのキューはサポートされません。</p>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのアイコンが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのアイコンが表示されます。</p>
     
      <p>SWF ファイルにアイコンを埋め込むには、次の @Embed() MXML コンパイラーディレクティブを使用します。</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>イメージには JPEG、GIF、PNG、SVG、または SWF ファイルを使用できます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのストリングが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのストリングが表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph/>
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext/></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      コンポーネントにキーボードフォーカスがなくても、コンポーネントのウィンドウがアクティブウィンドウでなくても、テキストの選択範囲が常に表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントにキーボードフォーカスがなくても、コンポーネントのウィンドウがアクティブウィンドウでなくても、テキストの選択範囲が常に表示されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      コンポーネントのウィンドウがアクティブなときには、コンポーネントにキーボードフォーカスがなくても常にテキストの選択範囲が表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントのウィンドウがアクティブなときには、コンポーネントにキーボードフォーカスがなくても常にテキストの選択範囲が表示されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      コンポーネントにキーボードフォーカスがあるときにのみ、テキストの選択範囲が表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントにキーボードフォーカスがあるときにのみ、テキストの選択範囲が表示されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  VSlider（垂直スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>
  VSlider（垂直スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 スライダートラックは上下に広がります。スライダーの現在の値は、スライダーの両終点の間におけるサムの相対位置によって決定されます。スライダーの両終点は、スライダーの最小値と最大値に対応します。
 
  <p>スライダーは、最小値から最大値までの範囲を無段階に移動できるか、または最小値から最大値までの範囲内で段階的にのみ移動できます。 データヒントを使用して現在の値を表示できます。</p>
 
  <p>VSlider コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 11 ピクセル、高さ 100 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 11 ピクセル、高さ 11 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  PopUpAnchor.popUpPosition プロパティの列挙型です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>PopUpAnchor.popUpPosition</codeph> プロパティの列挙型です。この型は、PopUpAnchor で固定される <codeph>popUp</codeph> コントロールの位置を定義します。この位置は、PopUpAnchor に対して相対的に決定されます。  
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      ターゲットの上に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの上に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      ターゲットの下に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの下に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      ターゲットの中心に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの中心に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      ターゲットの左側に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの左側に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      ターゲットの右側に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの右側に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      ターゲットの左上隅に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの左上隅に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  DataGroup クラスは、データアイテムの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGroup クラスは、データアイテムの基本コンテナクラスです。DataGroup クラスは、データアイテムを表示用のビジュアルエレメントに変換します。このコンテナは可視エレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。
 
  <p>DataGroup クラスは、データアイテムまたは IVisualElement インターフェイスを実装して DisplayObjects であるビジュアルエレメントを、子として受け取ります。データアイテムは、String オブジェクトや Number オブジェクトなどの単純なデータアイテムであることも、Object オブジェクトや XMLNode オブジェクトなどのより複雑なデータアイテムであることもあります。これらのコンテナはビジュアルエレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。</p>
 
  <p>アイテムレンダラーは、コンテナ内のデータアイテムの視覚的な表現を定義します。アイテムレンダラーは、コンテナによって表示できる形式にデータアイテムを変換します。データアイテムを適切にレンダリングするには、アイテムレンダラーを DataGroup コンテナに渡す必要があります。</p>
 
  <p>パフォーマンスを向上させると共にアプリケーションのサイズを最小限に抑えるため、DataGroup コンテナにはスキンを適用できません。スキンを適用するには、代わりに SkinnableDataContainer を使用します。 </p>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  レンダラーがこの dataGroup から削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがこの dataGroup から削除されたときに送出されます。<codeph>event.renderer</codeph> は、削除されたレンダラーです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  レンダラーがこの dataGroup に追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがこの dataGroup に追加されたときに送出されます。<codeph>event.renderer</codeph> は、追加されたレンダラーです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      
      アイテムレンダラーで表示するストリングを返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムレンダラーで表示するストリングです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>表示するデータアイテムです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      アイテムレンダラーで表示するストリングを返します。ストリングは、アイテムレンダラーの <codeph>labelText</codeph> プロパティに書き込まれます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      再使用のため、レンダラーを更新します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>アイテムレンダラーです。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      再使用のため、レンダラーを更新します。
     
      <p/>    
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      この DataGroup のデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      この DataGroup のデータプロバイダーです。IList である必要があります。
     
      <p>ArrayCollection、ArrayList、XMLListCollection など、Flex フレームワークには複数の IList の実装が含まれています。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      データアイテムで使用するアイテムレンダラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      データアイテムで使用するアイテムレンダラーです。クラスは、IDataRenderer インターフェイスを実装する必要があります。定義されている場合、<codeph>itemRendererFunction</codeph> プロパティはこのプロパティよりも優先されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      特定のアイテムでアイテムレンダラーの IFactory を返す関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      特定のアイテムでアイテムレンダラーの IFactory を返す関数です。次のサンプル関数に類似したアイテムレンダラー関数を定義する必要があります。
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      行または列の固定サイズが必要であるものの、特定の rowHeight または columnWidth の値が設定されていない場合、レイアウトは typicalItem の推奨サイズを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      行または列の固定サイズが必要であるものの、特定の <codeph>rowHeight</codeph> または <codeph>columnWidth</codeph> の値が設定されていない場合、レイアウトは <codeph>typicalItem</codeph> の推奨サイズを使用します。同様に、仮想レイアウトは、このアイテムを使用して、ビュー内にスクロールされていないレイアウトエレメントのサイズを定義します。
     
      <p>コンテナは、一般的なデータアイテムと、関連付けられたアイテムレンダラーを使用して、コンテナの子のデフォルトサイズを決定します。一般的なアイテムを定義することによって、コンテナは、それぞれの子を画面上に描画するときにそれらのサイズを決定する必要がなくなります。</p>
     
      <p>このプロパティを設定すると、レイアウトの <codeph>typicalLayoutElement</codeph> プロパティが設定されます。</p>
     
      <p>制限：<codeph>typicalItem</codeph> が IVisualItem である場合、さらにデータプロバイダーのメンバーではない必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  ToggleButton コンポーネントはトグルボタンを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButton コンポーネントはトグルボタンを定義します。このボタンをクリックすると、アップ状態とダウン状態が切り替わります。このボタンがアップ状態のときにボタンをクリックすると、ダウン状態に切り替わります。元のアップ状態に切り替えるには、ボタンをもう一度クリックする必要があります。
 
  <p>プログラムで <codeph>selected</codeph> プロパティを使用してこの状態を取得または設定できます。</p>
 
  <p>ToggleButton コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 21 ピクセル、高さ 21 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  HSlider（水平スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>
  HSlider（水平スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 HSlider コントロールの方向は水平です。スライダートラックは左右に広がります。スライダーの現在の値は、スライダーの両終点の間におけるサムの相対位置によって決定されます。スライダーの両終点は、スライダーの最小値と最大値に対応します。
 
  <p>スライダーは、最小値から最大値までの範囲を無段階に移動できるか、または最小値から最大値までの範囲内で段階的にのみ移動できます。 スライダーは、現在の値を表示するデータヒントを含むことができます。</p>
 
  <p>HSlider コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 100 ピクセル、高さ 11 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 100 ピクセル、高さ 100 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  HScrollBar（水平の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に水平に収まらない場合に、表示される部分のデータを制御できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HScrollBar
 
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  HScrollBar（水平の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に水平に収まらない場合に、表示される部分のデータを制御できます。
 
  <p>HScrollBar コントロールは単独のコントロールとしても使用できますが、通常はコンポーネントの他のグループに構成部分として組み込み、スクロール機能を実現します。</p>
 
  <p>HScrollBar コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 85 ピクセル、高さ 15 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 35 ピクセル、高さ 35 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      viewport が null でない場合、ビューポートをスクロールすることによって、ページアップまたはページダウン操作の水平スクロール位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>スクロールがページアップであるか（<codeph>true</codeph>）ページダウンであるか（<codeph>false</codeph>）を指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>viewport</codeph> が null でない場合、ビューポートをスクロールすることによって、ページアップまたはページダウン操作の水平スクロール位置を変更します。このメソッドは、<codeph>flash.ui.Keyboard.PAGE_UP</codeph> または <codeph>flash.ui.Keyboard.PAGE_DOWN</codeph> と共に <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> メソッドを呼び出すことによって、スクロールする量を計算します。その後、<codeph>setValue()</codeph> メソッドを呼び出して、<codeph>IViewport.horizontalScrollPosition</codeph> プロパティを適切な値に設定します。
     
      <p><codeph>viewport</codeph> が null の場合は、<codeph>changeValueByPage()</codeph> メソッドを呼び出すことによって、ページアップまたはページダウン操作のスクロール位置を変更します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBar/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBar.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      viewport が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の水平スクロール位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>スクロールが行アップであるか（<codeph>true</codeph>）行ダウンであるか（<codeph>false</codeph>）を指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>viewport</codeph> が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の水平スクロール位置を変更します。このメソッドは、<codeph>flash.ui.Keyboard.RIGHT</codeph> または <codeph>flash.ui.Keyboard.LEFT</codeph> と共に <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> メソッドを呼び出すことによって、スクロールする量を計算します。その後、<codeph>setValue()</codeph> メソッドを呼び出して、<codeph>IViewport.horizontalScrollPosition</codeph> プロパティを適切な値に設定します。
     
      <p><codeph>viewport</codeph> が null の場合は、<codeph>changeValueByStep()</codeph> メソッドを呼び出すことによって、行アップまたは行ダウン操作のスクロール位置を変更します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      value プロパティを更新し、viewport が null でない場合はその horizontalScrollPosition を value に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> プロパティの新しい値です。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> プロパティを更新し、viewport が null でない場合はその <codeph>horizontalScrollPosition</codeph> を <codeph>value</codeph> に設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      このスクロールバーによって制御されるビューポートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このスクロールバーによって制御されるビューポートです。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  RadioButtonGroup コンポーネントは、1 つの相互排他的コンポーネントとして機能する RadioButton コンポーネントのグループを定義します。RadioButton コンポーネントは一度に 1 つしか選択できません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButtonGroup コンポーネントは、1 つの相互排他的コンポーネントとして機能する RadioButton コンポーネントのグループを定義します。RadioButton コンポーネントは一度に 1 つしか選択できません。<codeph>&lt;s:RadioButtonGroup></codeph> タグを使用してグループの名前を定義する場合は、<codeph>id</codeph> プロパティを指定する必要があります。このグループに追加された <codeph>&lt;s:RadioButton></codeph> コンポーネントには、このグループ名が割り当てられます。
 
  <p>RadioButtonGroup コンポーネントは UIComponent ではなく EventDispatcher のサブクラスであり、IMXMLObject インターフェイスを実装します。他のすべての Flex のビジュアルコンポーネントは、IVisualElement インターフェイスを実装します。RadioButtonGroup コンポーネントの宣言は IVisualElement に割り当てられないので、<codeph>&lt;Declarations></codeph> タグ内に含める必要があります。</p> 
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  プログラムまたはユーザー操作のいずれかによって、値が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  プログラムまたはユーザー操作のいずれかによって、値が変更されたときに送出されます。
 
  <p>このイベントはプログラムによる変更によってトリガーされるため、<codeph>valueCommit</codeph> イベントハンドラーが値を変更し、別の <codeph>valueCommit</codeph> イベントを起動することがないようにする必要があります。 例えば、<codeph>valueCommit</codeph> イベントハンドラーの <codeph>selectedValue</codeph> プロパティや <codeph>selection</codeph> プロパティは変更しないでください。 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  ユーザーがグループ内の RadioButton コンポーネントを選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがグループ内の RadioButton コンポーネントを選択したときに送出されます。各 RadioButton コンポーネントについてハンドラーを設定することもできます。ユーザーがマウスでラジオボタンを操作した場合にのみ、このイベントが送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  このグループ内で選択された RadioButton コンポーネントの値が変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このグループ内で選択された RadioButton コンポーネントの値が変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>クラスが単純に EventDispatcher を継承する場合は、<codeph>document</codeph> パラメーターを使用しないでください。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      指定されたインデックス位置にある RadioButton コンポーネントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>インデックスが 0 ～ <codeph>numRadioButtons</codeph> - 1 の範囲内にある場合は、指定した RadioButton コンポーネントです。インデックスが無効の場合、<codeph>null</codeph> を返します。
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>RadioButtonGroup 内にある RadioButton の 0 から始まるインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にある RadioButton コンポーネントを返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      遅延インスタンス化をサポートする IMXMLObject.initialized() メソッドの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>このオブジェクトを作成した MXML ドキュメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>ドキュメントがこのオブジェクトを参照するために使用する識別子です。オブジェクトがドキュメントの deep プロパティである場合、<codeph>id</codeph> は null になります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      遅延インスタンス化をサポートする <codeph>IMXMLObject.initialized()</codeph> メソッドの実装です。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      選択が可能かどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      選択が可能かどうかを判別します。返される値は <codeph>RadioButtonGroup</codeph> で明示的に設定された値のみを反映し、個々の RadioButton で明示的に設定された値を反映しないことに注意してください。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      この RadioButtonGroup に属する RadioButton の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      この RadioButtonGroup に属する RadioButton の数です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      グループ内で選択されている RadioButton コンポーネントの value プロパティが設定されている場合は、value プロパティです。設定されていない場合は、選択した RadioButton の label プロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グループ内で選択されている RadioButton コンポーネントの <codeph>value</codeph> プロパティが設定されている場合は、value プロパティです。設定されていない場合は、選択した RadioButton の <codeph>label</codeph> プロパティです。RadioButton が選択されていない場合、このプロパティは <codeph>null</codeph> です。
     
      <p><codeph>selectedValue</codeph> を設定すると、<codeph>value</codeph> プロパティまたは <codeph>label</codeph> プロパティがこの値に一致する最初の RadioButton コンポーネントが選択されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      グループ内で現在選択されている RadioButton コンポーネントへの参照を格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グループ内で現在選択されている RadioButton コンポーネントへの参照を格納します。このプロパティには ActionScript からのみアクセスできます。MXML で設定することはできません。このプロパティを <codeph>null</codeph> に設定すると、現在選択されている RadioButton コンポーネントの選択が解除されます。変更イベントは送出されません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  VScrollBar（垂直の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に垂直に収まらない場合に、表示される部分のデータを制御できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VScrollBar
 
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  VScrollBar（垂直の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に垂直に収まらない場合に、表示される部分のデータを制御できます。
 
  <p>VScrollBar コントロールは単独のコントロールとしても使用できますが、通常は他のコンポーネントグループと組み合わせてスクロール機能を提供します。</p>
 
  <p>VScrollBar コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 15 ピクセル、高さ 85 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 15 ピクセル、高さ 15 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      viewport が null でない場合、ビューポートをスクロールすることによって、ページアップまたはページダウン操作の垂直スクロール位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>スクロールがページアップであるか（<codeph>true</codeph>）ページダウンであるか（<codeph>false</codeph>）を指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>viewport</codeph> が null でない場合、ビューポートをスクロールすることによって、ページアップまたはページダウン操作の垂直スクロール位置を変更します。このメソッドは、<codeph>flash.ui.Keyboard.PAGE_UP</codeph> または <codeph>flash.ui.Keyboard.PAGE_DOWN</codeph> と共に <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> メソッドを呼び出すことによって、スクロールする量を計算します。その後、<codeph>setValue()</codeph> メソッドを呼び出して、<codeph>IViewport.verticalScrollPosition</codeph> プロパティを適切な値に設定します。
     
      <p><codeph>viewport</codeph> が null の場合は、<codeph>changeValueByPage()</codeph> メソッドを呼び出すことによって、ページアップまたはページダウン操作の垂直スクロール位置を変更します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBar/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBar.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      viewport が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の垂直スクロール位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>スクロールが行アップであるか（<codeph>true</codeph>）行ダウンであるか（<codeph>false</codeph>）を指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>viewport</codeph> が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の垂直スクロール位置を変更します。このメソッドは、<codeph>flash.ui.Keyboard.RIGHT</codeph> または <codeph>flash.ui.Keyboard.LEFT</codeph> と共に <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> メソッドを呼び出すことによって、スクロールする量を計算します。その後、<codeph>setValue()</codeph> メソッドを呼び出して、<codeph>IViewport.verticalScrollPosition</codeph> プロパティを適切な値に設定します。
     
      <p><codeph>viewport</codeph> が null の場合は、<codeph>changeValueByStep()</codeph> メソッドを呼び出すことによって、行アップまたは行ダウン操作の垂直スクロール位置を変更します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      value プロパティを更新し、さらに viewport が null でない場合はその verticalScrollPosition を value に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> プロパティの新しい値です。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      value プロパティを更新し、<codeph>viewport</codeph> が null でない場合はその <codeph>verticalScrollPosition</codeph> を <codeph>value</codeph> に設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      このスクロールバーによって制御されるビューポートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      このスクロールバーによって制御されるビューポートです。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  
 
  <p><codeph>VideoPlayer</codeph> はスキン可能なバージョンです。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.VideoPlayer.xml"><linktext>mx.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.DurationChangeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.DurationChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.PlayheadChangeEvent.PLAYHEAD_CHANGE_playheadChange"><apiName>playheadChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.PlayheadChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 <codeph/><codeph/>
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.PlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_flash.events.ProgressEvent_bytesDownloadedChange"><apiName>bytesDownloadedChange</apiName><shortdesc>
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent</apiEventType><adobeApiEventClassifier>org.osmf.events.BytesDownloadedChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      再生ヘッドを移動せずに再生を一時停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      再生ヘッドを移動せずに再生を一時停止します。再生がすでに一時停止または停止状態にある場合は、このメソッドを呼び出しても何も実行されません。  
           <p>再生を再開するには、<codeph>play()</codeph> メソッドを呼び出します。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      ビデオを再生します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ビデオを再生します。ビデオが一時停止状態、停止状態、または既に再生状態であるときに呼び出すことができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      ビデオの指定の秒までシークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>秒数
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビデオの指定の秒までシークします。ビデオが再生中である場合、その時点から再生を継続します。ビデオが一時停止している場合、その時点までシークし、一時停止のままになります。ビデオ停止している場合、その時点までシークし、一時停止状態になります。ライブストリームには影響しません。
           <p>時間が 0 未満または NaN である場合、例外をスローします。時間がストリームの末尾を超過している場合、またはこれまでダウンロードしたファイルの量を超過している場合、シークを試行し、失敗は回復されます。</p>
     
      <p><codeph>playheadTime</codeph> プロパティの値は、seek メソッドを呼び出した直後やシークを発生させるために <codeph>playheadTime</codeph> を設定した直後には、想定した値が反映されていないことがあります。プログレッシブダウンロードの場合はキーフレームへのシークしか実行できないため、シークすると、指定した時間以降にある最初のキーフレームの時間に移動します</p>
      
      <p><b>注意：</b>ストリーミングの場合のシークでは、ソース FLV ファイル内の目的の位置にキーフレームがない場合でも、ちょうどその指定した時間に移動します。</p>
           <p>シークは非同期であるため、シークメソッドの呼び出しや <codeph>playheadTime</codeph> プロパティの設定を行っても、<codeph>playheadTime</codeph> はすぐには更新されません。シークの完了後に時間を取得するには、<codeph>seek</codeph> イベントを監視する必要があります。このイベントは、<codeph>playheadTime</codeph> プロパティが更新されるまで開始しません。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      ビデオ再生を停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ビデオ再生を停止します。<codeph>autoRewind</codeph> が <codeph>true</codeph> に設定されている場合、最初のフレームまで巻き戻しされます。ビデオが既に停止していた場合、効果はありません。再生を再開するには、<codeph>play()</codeph> を呼び出します。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      source プロパティが設定されたときに、ビデオの再生をすぐに開始するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>source</codeph> プロパティが設定されたときに、ビデオの再生をすぐに開始するかどうかを指定します。 <codeph>true</codeph> の場合、ただちにビデオファイルのバッファリングと再生が始まります。
           <p><codeph>autoPlay</codeph> が <codeph>false</codeph> に設定されている場合でも、<codeph>initialize()</codeph> メソッドを呼び出した後でビデオのロードが始まります。 Flash Media Server の場合は、この操作によってストリームが作成され、表示する最初のフレームがロードされます。HTTP ダウンロードの場合は、ストリームのダウンロードが開始され、最初のフレームが表示されます。</p>
     
      <codeph/><codeph/><codeph/>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      stop() メソッドが呼び出された、またはストリームの最後に到達したために再生が停止したときに、FLV ファイルを最初のフレームまで巻き戻すかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>stop()</codeph> メソッドが呼び出された、またはストリームの最後に到達したために再生が停止したときに、FLV ファイルを最初のフレームまで巻き戻すかどうかを指定します。
           <p>このプロパティは、ライブストリーミングビデオには効果がありません。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      再生が完了した後でメディアを再び再生する必要があるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      再生が完了した後でメディアを再び再生する必要があるかどうかを示します。<codeph>loop</codeph> プロパティは <codeph>autoRewind</codeph> プロパティより優先されるので、loop が <codeph>true</codeph> に設定されている場合、<codeph>autoRewind</codeph> プロパティは無視されます。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      ビデオをミュートするには true に設定し、ビデオをミュート解除するには false に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ビデオをミュートするには <codeph>true</codeph> に設定し、ビデオをミュート解除するには <codeph>false</codeph> に設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/><codeph/><codeph/>
     
      <p/>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      ビデオが再生中であるか、再生試行中である場合は true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ビデオが再生中であるか、再生試行中である場合は true を返します。
      
      <p/> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>letterbox
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/><codeph/><codeph/><codeph/><codeph/>
     
      <p/>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      プログレッシブダウンロードの場合、ソースは、再生するビデオファイルを指定するパスまたは URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      プログレッシブダウンロードの場合、ソースは、再生するビデオファイルを指定するパスまたは URL です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      基になる Flash Player の flash.media.Video オブジェクトです。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/></apiValueDef><apiDesc>
      基になる Flash Player の flash.media.Video オブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      ボリュームレベルです。0 から 1 の範囲の値で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ボリュームレベルです。0 から 1 の範囲の値で指定します。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  DropDownList コントロールには、ユーザーが 1 つの値を選択できるドロップダウンリストが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:TextBase">
<description>
      プロンプトまたは選択されたアイテムのテキストを保持する、オプションのスキンパーツです。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownList コントロールには、ユーザーが 1 つの値を選択できるドロップダウンリストが含まれています。その機能は、HTML の SELECT フォームエレメントによく似ています。
   <p>DropDownList コントロールは、アンカーボタン、プロンプト領域、およびドロップダウンリストで構成されます。ドロップダウンリストを開いたり閉じたりするには、アンカーボタンを使用します。プロンプト領域には、プロンプトのストリングまたはドロップダウンリストで選択されているアイテムが表示されます。</p>
   <p>ドロップダウンリストが開いているときは次のようになります。</p>
  <ul>
    <li>アンカーボタンをクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>ドロップダウンリストの外側をクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>データアイテムをクリックすると、そのアイテムが選択されて、ドロップダウンリストが閉じます。</li>
    <li><codeph>requireSelection</codeph> プロパティが <codeph>false</codeph> の場合、Ctrl キーを押しながらデータアイテムをクリックすると、アイテムの選択が解除されて、ドロップダウンリストが閉じます。</li>
  </ul>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      DropDownList コントロールのプロンプトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      DropDownList コントロールのプロンプトです。このプロンプトは、<codeph>selectedIndex</codeph> = -1 のときに DropDownList に表示されるストリングです。通常は、「1 つ選択してください...」のようなストリングになります。ドロップダウンリストでアイテムを選択すると、プロンプトは選択したアイテムのテキストに置き換わります。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components:DropDownListBase" playerVersion="Flash10">
<description>
  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントのドロップシャドウの可視性を制御します。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      ドロップダウンリスト領域を定義するスキンパーツです。 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart><SkinPart name="openButton" owner="spark.components:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      アンカーボタンを定義するスキンパーツです。  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
   <pre>
  &lt;s:DropDownListBase 
    <strong>Properties</strong>
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  その機能は、HTML の SELECT フォームエレメントによく似ています。
   <p> 
  </p>
   <p>ドロップダウンリストが開いているときは次のようになります。</p>
  <ul>
    <li>アンカーボタンをクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>ドロップダウンリストの外側をクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>データアイテムをクリックすると、そのアイテムが選択されて、ドロップダウンリストが閉じます。</li>
    <li><codeph>requireSelection</codeph> プロパティが <codeph>false</codeph> の場合、Ctrl キーを押しながらデータアイテムをクリックすると、アイテムの選択が解除されて、ドロップダウンリストが閉じます。</li>
  </ul>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  ユーザーがアンカーボタンをクリックしてドロップダウンリストを表示したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがアンカーボタンをクリックしてドロップダウンリストを表示したときに送出されます。これは、ユーザーが Ctrl キーを押しながら下矢印キーを押して dropDown を開いた場合にも送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  次に示すユーザーの操作などによってドロップダウンリストが閉じたときに送出されます。ドロップダウンリストのアイテムを選択する。ドロップダウンリストの外側をクリックする。ドロップダウンリストが表示されているときにアンカーボタンをクリックする。
  
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  次に示すユーザーの操作などによってドロップダウンリストが閉じたときに送出されます。
  <ul>
      <li>ドロップダウンリストのアイテムを選択する。</li>
      <li>ドロップダウンリストの外側をクリックする。</li>
      <li>ドロップダウンリストが表示されているときにアンカーボタンをクリックする。</li>
  </ul>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      ドロップダウンリストを閉じて、DropDownEvent.CLOSE イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> の場合は、選択されたデータアイテムをコミットします。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドロップダウンリストを閉じて、<codeph>DropDownEvent.CLOSE</codeph> イベントを送出します。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DropDownListBase:protected:findKey"><apiName>findKey</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="spark.components:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      ドロップダウンリストを開いて、DropdownEvent.OPEN イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ドロップダウンリストを開いて、<codeph>DropdownEvent.OPEN</codeph> イベントを送出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      マウス、キーボード、およびフォーカスに関するすべてのユーザー操作を処理する DropDownController クラスのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      マウス、キーボード、およびフォーカスに関するすべてのユーザー操作を処理する DropDownController クラスのインスタンスです。コンストラクターで DropDownController インスタンスが作成された後、Flex は <codeph>initializeDropDownController()</codeph> メソッドを呼び出します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Border"><apiName>Border</apiName><shortdesc>
  Border クラスは、コンテナの境界線と背景の塗りの外観を制御する一連の CSS スタイルを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Border" playerVersion="Flash10" type="Boolean">
<description>
  <codeph>true</codeph> の場合、コンテナのドロップシャドウが表示されます。
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Border" playerVersion="Flash10" type="Number">
<description>
  境界線の角丸の半径です。
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:Border" playerVersion="Flash10" type="Number">
<description>
  境界線の太さです。 
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Border" playerVersion="Flash10" type="Boolean">
<description>
  境界線を表示するかどうかを決定します。<codeph>false</codeph> の場合、<codeph>borderStroke</codeph> プロパティを使用して設定された境界線以外の境界線は表示されません。 
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:Border" playerVersion="Flash10" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は、<codeph>solid</codeph> と <codeph>inset</codeph> です。
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Border" playerVersion="Flash10" type="uint">
<description>
  境界線の色です。 
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Border" playerVersion="Flash10" type="Number">
<description>
  <codeph>borderColor</codeph> スタイルで定義されているカラーのアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:Border" playerVersion="Flash10" type="String">
<description>
  次元内を背景イメージでどのように埋めるかを決定します。MXML でこのプロパティの値を設定する場合は、（「repeat」などの）文字列を使用します。ActionScript でこのプロパティの値を設定する場合は、（<codeph>BitmapFillMode.CLIP</codeph> などの）定数を使用します。 
 
  <p><codeph>BitmapFillMode.CLIP</codeph>（「clip」）に設定すると、画像は領域の端で終了します。</p>
 
  <p><codeph>BitmapFillMode.REPEAT</codeph>（「repeat」）に設定すると、領域全体を埋めるように画像が繰り返し表示されます。</p>
   <p><codeph>BitmapFillMode.SCALE</codeph>（「scale」）に設定すると、領域全体を埋めるように画像が伸縮されます。</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:Border" playerVersion="Flash10" type="Object">
<description>
  コンテナの背景イメージです。<codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> は同時に設定できます。背景色の前面に背景イメージを表示します。 デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:Border&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;mx:Border
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Border クラスは、コンテナの境界線と背景の塗りの外観を制御する一連の CSS スタイルを定義します。 
   <p><b/></p>
  
  <p>Border コントロールには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>112 × 112 ピクセル</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>制限なし</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderExample.mxml"><swfblock conref="examples/BorderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderSkin"><linktext>spark.skins.spark.BorderSkin</linktext></link></related-links><apiConstructor id="spark.components:Border:Border"><apiName>Border</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Border:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      Border の背景を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Border の背景を定義します。このプロパティを設定すると、<codeph>backgroundAlpha</codeph>、<codeph>backgroundColor</codeph>、<codeph>backgroundImage</codeph> および <codeph>backgroundImageFillMode</codeph> スタイルがオーバーライドされます。
     
      <p>次の例では、<codeph>backgroundFill</codeph> プロパティを使用して背景色を赤に設定しています。</p>
           <pre>
      &lt;s:Border cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="100"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:Border> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Border:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このプロパティを設定すると、<codeph>borderAlpha</codeph>、<codeph>borderColor</codeph>、<codeph>borderStyle</codeph>、<codeph>borderVisible</codeph> および <codeph>borderWeight</codeph> スタイルがオーバーライドされます。  
     
      <p>次の例では、<codeph>borderStroke</codeph> プロパティを設定しています。</p>
           <pre>
      &lt;s:Border cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:Border> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  TileGroup コンテナは、TileLayout クラスを使用する Group コンテナのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileGroup コンテナは、TileLayout クラスを使用する Group コンテナのインスタンスです。<codeph>layout</codeph> プロパティを変更しないでください。代わりに、TileGroup クラスのプロパティを使用して、TileLayout クラスの特性を変更します。
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。<codeph>layout</codeph> プロパティを TileLayout クラスのインスタンスに初期化します。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>