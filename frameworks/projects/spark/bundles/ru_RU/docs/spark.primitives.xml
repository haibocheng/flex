<?xml version="1.0"?>
<apiPackage id="spark.primitives"><apiName>spark.primitives</apiName><apiDetail/><apiClassifier id="spark.primitives:Graphic"><apiName>Graphic</apiName><shortdesc>
  Элемент управления Graphic отображает ряд графических команд рисования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="property" name="tabEnabled"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="layout"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusEnabled"/><Exclude kind="method" name="setFocus"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Graphic&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Graphic
    <b>Properties</b>
    version
    viewHeight
    viewWidth
    &nbsp;
  /&gt;
  </pre>
 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления Graphic отображает ряд графических команд рисования.
 
  <p>Класс Graphic является корневым тегом для всех графических элементов. Этот тег является корневым для любого документа FXG. Он используется только в документе FXG.</p>
  
  <p>Для определения графического содержимого необходимо добавить к массиву графических элементов ряд тегов элемента, например, &lt;Rect>, &lt;Path> и &lt;Ellipse>.</p>
 
  <p>Элементы управления Graphic не имеют фоновых изображений и границ, и невозможно выполнить фокусировку на них.</p>
  
  <p>При добавлении в контейнер, элемент Graphic будет размещен по правилам контейнера. Графические изображения элемента управления Graphic принимают размеры и размещаются относительно левого верхнего угла этого элемента управления.</p>
  
  <p>Элемент Graphic может дополнительно содержать элемент &lt;Group>.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.graphics.Group.xml"><linktext>mx.graphics.Group</linktext></link></related-links><apiConstructor id="spark.primitives:Graphic:Graphic"><apiName>Graphic</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:Graphic:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.primitives:Graphic:version"><apiName>version</apiName><shortdesc>
        Определяет целевую версию FXG для данного тега Graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>1.0</apiData><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Определяет целевую версию FXG для данного тега Graphic.  
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Graphic:viewHeight:get"><apiName>viewHeight</apiName><shortdesc>
      Определяет вертикальное пространство, которое графика занимает в макете.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Определяет вертикальное пространство, которое графика занимает в макете. При установке этого значения содержимое не масштабируется. Однако содержимое масштабируется, если указано значение свойства <codeph>height</codeph>. 
      
      <p>Существует два способа использования этих возможностей: 1) Задать <codeph>viewHeight</codeph> значение большее, чем собственный размер содержимого. Этот способ применяется для размещения графических элементов в области большей, чем их визуальные размеры. 2) Задать <codeph>viewHeight</codeph> значение меньшее, чем собственный размер содержимого. Этот способ применяется, если графический элемент имеет дополнительные элементы оформления или его границы выходят за пределы графического элемента. В этом случае необходимо убедиться, что усечение в макете не применяется.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Graphic:viewWidth:get"><apiName>viewWidth</apiName><shortdesc>
      Определяет горизонтальное пространство, которое графика занимает в макете.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Определяет горизонтальное пространство, которое графика занимает в макете. При установке этого значения содержимое не масштабируется. Однако содержимое масштабируется, если указано значение свойства <codeph>width</codeph>. 
      
      <p>Существует два способа использования этих возможностей: 1) Задать <codeph>viewWidth</codeph> значение большее, чем собственный размер содержимого. Этот способ применяется для размещения графических элементов в области большей, чем их визуальные размеры. 2) Задать <codeph> viewWidth</codeph> значение меньшее, чем собственный размер содержимого. Этот способ применяется, если графический элемент имеет дополнительные элементы оформления или его границы выходят за пределы графического элемента. В этом случае необходимо убедиться, что усечение в макете не применяется.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.primitives:VideoElement"><apiName>VideoElement</apiName><shortdesc>
  Класс VideoElement представляет собой видеопроигрыватель без дополнительных элементов оформления, который поддерживает последовательную загрузку, множественную скорость передачи и потоковое видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс VideoElement представляет собой видеопроигрыватель без дополнительных элементов оформления, который поддерживает последовательную загрузку, множественную скорость передачи и потоковое видео.
 
  <p><codeph>VideoPlayer</codeph> является версией с возможностью изменения оформления.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.components.VideoPlayer.xml"><linktext>mx.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.primitives:VideoElement_spark.events.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  Отправляется, как только видеозапись загружена и готова к отображению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.READY</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, как только видеозапись загружена и готова к отображению.
   <p>Это событие передается при первом входе VideoPlayer в управляемое состояние после загрузки нового FLV-файла с помощью метода <codeph>play()</codeph> или <codeph>load()</codeph>. Передается один раз для каждого загруженного FLV-файла.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.primitives:VideoElement_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Показывает ход загрузки, отображая число загруженных байтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Показывает ход загрузки, отображая число загруженных байтов. Отправляется при запуске, когда начинается загрузка, и при завершении, когда загружены все байты или произошла сетевая ошибка. Отправляется каждые 0,25 секунды при вызове загрузки и заканчивается после загрузки всех байтов или появлении сетевой ошибки. Используйте данное событие для проверки загруженных байтов или количества байтов в буфере. 
   <p>Отправляется только при последовательной загрузке HTTP. Показывает ход загрузки количеством загруженных байтов. Объект события имеет свойства <codeph>bytesLoaded</codeph> и <codeph>bytesTotal</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.primitives:VideoElement_spark.events.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
  Отправляется каждые 0,25 секунды в течение воспроизведения видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется каждые 0,25 секунды в течение воспроизведения видео. Событие не отправляется, когда видео приостановлено или остановлено до тех пор, пока не произойдет переход.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.primitives:VideoElement_spark.events.VideoEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
  Первый раз отправляется при достижении метаданных FLV-файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Первый раз отправляется при достижении метаданных FLV-файла. Объект события имеет свойство <codeph>info</codeph>, содержащее информацию об объекте, полученную обратным вызовом события <codeph>NetStream.onMetaData</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.primitives:VideoElement_spark.events.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 Отправляется, когда воспроизведение завершается по достижении конца FLV-файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Отправляется, когда воспроизведение завершается по достижении конца FLV-файла. Компонент не отправляет событие, если вызван метод <codeph>stop()</codeph> или <codeph>pause()</codeph> или выбран соответствующий элемент управления. 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.primitives:VideoElement_spark.events.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Передается при закрытии NetConnection либо в результате тайм-аута, вызова метода close() или вследствие загрузки нового видеопотока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при закрытии <codeph>NetConnection</codeph> либо в результате тайм-аута, вызова метода <codeph>close()</codeph> или вследствие загрузки нового видеопотока. Данное событие отправляется только с потоками RTMP, но не с HTTP.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.primitives:VideoElement:VideoElement"><apiName>VideoElement</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:VideoElement:pause"><apiName>pause</apiName><shortdesc>
      Приостановка воспроизведения без перемещения точки воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Приостановка воспроизведения без перемещения точки воспроизведения. Если воспроизведение уже приостановлено или остановлено, метод не действует.  
           <p>Для повторного запуска воспроизведения следует выполнить вызов метода <codeph>play()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:VideoElement:play"><apiName>play</apiName><shortdesc>
      Вызывает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вызывает воспроизведение видео. Вызов возможен, если воспроизведение видеозаписи приостановлено, остановлено или в данный момент выполняется.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:VideoElement:seek"><apiName>seek</apiName><shortdesc>
      Переход к указанной секунде видеозаписи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>seconds;
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Переход к указанной секунде видеозаписи. Если видео воспроизводится, то воспроизведение продолжается с этого момента. Если видео приостановлено, то осуществляется переход к данному моменту и видео остается приостановленным. Если видео остановлено, то выполняется переход к данному моменту и вход в состояние приостановки воспроизведения. Неприменимо для потокового воспроизведения.
           <p>Если время меньше 0 или NaN, выдает исключение. Если время превышает окончание потока или продолжительность загруженного файла, то будет предпринята попытка перехода, а при неудачной попытке произойдет восстановление.</p>
     
      <p>Свойство <codeph>playheadTime</codeph>может не иметь ожидаемого значения немедленно после вызова одного из методов перехода или установки свойства <codeph>playheadTime</codeph>. При использовании последовательной загрузки можно перейти только в ключевой кадр. Поэтому переход перемещает пользователя в первый ближайший ключевой кадр к указанному времени.</p>
      
      <p><b>Примечание.</b> При потоковом воспроизведении переход осуществляется точно на указанное время, даже если исходный FLV-файл не имеет ключевых кадров.</p>
           <p>Процесс перехода асинхронный, то есть при вызове метода перехода или установке значения для свойства <codeph>playheadTime</codeph>, значение свойства <codeph>playheadTime</codeph> обновляется с задержкой. Для получения значения времени после завершения перехода программа прослушивает событие <codeph>seek</codeph>, которое не будет запущено до завершения обновления свойства <codeph>playheadTime</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:VideoElement:stop"><apiName>stop</apiName><shortdesc>
      Останавливает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Останавливает воспроизведение видео. Если для свойства <codeph>autoRewind</codeph> установлено значение <codeph>true</codeph>, то производится перемотка видео к первому кадру. Не оказывает влияния на проигрыватель, если воспроизведение уже остановлено. Для продолжения воспроизведения вызовите метод <codeph>play()</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="spark.primitives.xml#VideoElement/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.primitives.xml#VideoElement/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.primitives:VideoElement:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      Указывает, должно воспроизведение видео начаться немедленно после установки свойства source или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, должно воспроизведение видео начаться немедленно после установки свойства <codeph>source</codeph> или нет. Если <codeph>true</codeph>, видеофайл буферизуется и воспроизводится немедленно.
           <p>Даже если <codeph>autoPlay</codeph> установлено как <codeph>false</codeph>, в компоненте Flex видео начинает загружаться после вызова метода <codeph>initialize()</codeph>. При использовании Flash Media Server это означает создание потока и загрузку первого кадра для отображения. В случае загрузки http в компоненте Flex начинается загрузка потока и показ первого кадра.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      Указывает, когда следует перемотать файл FLV на первый кадр при остановке воспроизведения: в результате выполнения вызова метода stop() или при достижении конца потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, следует ли перемотать файл FLV на первый кадр при остановке воспроизведения – в результате выполнения вызова метода <codeph>stop()</codeph> или при достижении конца потока.
           <p>Это свойство не влияет на потоковое видео в реальном времени.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:loop:get"><apiName>loop</apiName><shortdesc>
      Указывает на то, следует ли повторить воспроизведение с носителя после его завершения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает на то, следует ли повторить воспроизведение с носителя после его завершения. Свойство <codeph>loop</codeph> имеет приоритет перед свойством <codeph>autoRewind</codeph>, поэтому если свойство loop установлено на значение <codeph>true</codeph>, свойство <codeph>autoRewind</codeph> игнорируется. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc>
      Указывает, должен ли элемент управления поддерживать первоначальный коэффициент сжатия при изменении размеров видео или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, должен ли элемент управления поддерживать первоначальный коэффициент сжатия при изменении размеров видео или нет.
     
      <p>Если не указаны ширина, высота или какие-либо ограничения для VideoElement, это свойство не оказывает влияния.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:muted:get"><apiName>muted</apiName><shortdesc>
      Для отключения звука видеозаписи установите true; для включения звука – false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Для отключения звука видеозаписи установите <codeph>true</codeph>; для включения звука – <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:playWhenHidden:get"><apiName>playWhenHidden</apiName><shortdesc>
      Управляет продолжением воспроизведения видео, когда оно скрыто.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Управляет продолжением воспроизведения видео, когда оно скрыто. Видео скрыто, когда свойство <codeph>visible</codeph> установлено на <codeph>false</codeph> или же когда видео удалено из списка отображения. Если установлено значение <codeph>false</codeph>, воспроизведение видео будет приостановлено, пока оно будет скрыто. Если установлено значение <codeph>true</codeph>, воспроизведение видео будет продолжено, даже когда оно скрыто. Значение по умолчанию равно <codeph>false</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Положение воспроизведения, измеренное в секундах с начала воспроизведения видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Положение воспроизведения, измеренное в секундах с начала воспроизведения видео. Объект события для многих событий VideoPlay включает положение воспроизведения таким образом, что можно определить положение в видеофайле, где произошло это событие.
     
      <p>Установка этого свойства как значения в секундах, запускает операцию поиска. Если видео воспроизводится в текущий момент, оно продолжает воспроизводиться из нового положения воспроизведения. Если видео приостановлено, оно осуществляет поиск нового положения воспроизведения и остается приостановленным. Если видео остановлено, оно осуществляет поиск нового положения воспроизведения и переходит в приостановленное состояние. Установка этого свойства не влияет на видеопотоки в реальном времени.</p>
           <p>Если новое положение воспроизведения меньше 0 или NaN, элемент управления выдает исключение. Если новое положение воспроизведения находится за пределами видео, или его загруженного фрагмента, элемент управления по-прежнему предпринимает попытку поиска.</p>
           <p>Для FLV-файла настройка свойства <codeph>playheadTime</codeph> осуществляет поиск ключевого кадра, самого близкого к указанному положению. Ключевые кадры указываются при кодировании FLV-файла. Поиск по точному времени невозможен, если в этом положении отсутствует ключевой кадр.</p>
           <p>Это свойство выдает исключение при отсутствии подключенного потока. Для определения безопасного момента вызова этого метода следует использовать событие <codeph>stateChange</codeph> и свойство <codeph>connected</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:playing:get"><apiName>playing</apiName><shortdesc>
      Возвращает значение true, если видео воспроизводится или осуществляется попытка воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Возвращает значение true, если видео воспроизводится или осуществляется попытка воспроизведения.
      
      <p>Возможно, видео в настоящее время не воспроизводится, а например, осуществляется перемещение или буферизация, но при этом происходит попытка воспроизведения.</p> 
           </apiDesc></apiValueDetail><related-links><link href="spark.primitives.xml#VideoElement/play()"><linktext>play()</linktext></link><link href="spark.primitives.xml#VideoElement/pause()"><linktext>pause()</linktext></link><link href="spark.primitives.xml#VideoElement/stop()"><linktext>stop()</linktext></link><link href="spark.primitives.xml#VideoElement/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.primitives:VideoElement:source:get"><apiName>source</apiName><shortdesc>
      Для последовательной загрузки источником является путь или URL-адрес, указывающий на видеофайл для воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Для последовательной загрузки источником является путь или URL-адрес, указывающий на видеофайл для воспроизведения. Для потокового видео (потоковое, потоковое видео в реальном времени или видео с разной скоростью передачи) свойством источника является объект StreamingVideoSource.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:totalTime:get"><apiName>totalTime</apiName><shortdesc>
      Общее время передачи видеоканала.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Общее время передачи видеоканала. Значение «-1» означает, что свойство не было передано методу <codeph>play()</codeph> либо не удалось автоматически определить общее время, или определение еще в процессе.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      Основной объект флэш-проигрывателя flash.media.Video
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/></apiValueDef><apiDesc>
      Основной объект флэш-проигрывателя flash.media.Video
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:volume:get"><apiName>volume</apiName><shortdesc>
      Уровень громкости, указанный как значение между 0 и 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Уровень громкости, указанный как значение между 0 и 1.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:VideoElement:enabled:set"><apiName>enabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.primitives:Rect"><apiName>Rect</apiName><shortdesc>
  Класс Rect представляет собой заполненный графический элемент, который рисует прямоугольник.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><includeExamples>examples/RectExample.mxml
  
  
  </includeExamples></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.primitives.supportClasses:FilledElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Rect представляет собой заполненный графический элемент, который рисует прямоугольник. Углы этого прямоугольника могут быть скруглены. Метод <codeph>drawElementent()</codeph> вызывает методы <codeph>Graphics.drawRect()</codeph> и <codeph>Graphics.drawRoundRect()</codeph>.
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links><apiConstructor id="spark.primitives:Rect:Rect"><apiName>Rect</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:Rect:protected:draw"><apiName>draw</apiName><shortdesc>
      
      Нарисуйте элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/></apiParam></apiOperationDef><apiDesc>
      
      Нарисуйте элемент. Это второй из трех шагов в процессе рисования. Переопределите этот метод для выполнения рисования. Обводка (и при необходимости заливка) устанавливаются в методе <codeph>beginDraw()</codeph>. Данное переопределение должно содержать вызов только таких методов рисования, как <codeph>moveTo()</codeph>, <codeph>curveTo()</codeph> и <codeph>drawRect()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Rect:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Rect:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.primitives:Rect:bottomLeftRadiusX:get"><apiName>bottomLeftRadiusX</apiName><shortdesc>
      Радиус x нижнего левого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус x нижнего левого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:bottomLeftRadiusY:get"><apiName>bottomLeftRadiusY</apiName><shortdesc>
      Радиус y нижнего левого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус y нижнего левого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:bottomRightRadiusX:get"><apiName>bottomRightRadiusX</apiName><shortdesc>
      Радиус x нижнего правого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус x нижнего правого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:bottomRightRadiusY:get"><apiName>bottomRightRadiusY</apiName><shortdesc>
      Радиус y нижнего правого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус y нижнего правого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:radiusX:get"><apiName>radiusX</apiName><shortdesc>
      Заданный по умолчанию радиус скругления для оси x на всех углах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Заданный по умолчанию радиус скругления для оси x на всех углах. Свойства <codeph>topLeftRadiusX</codeph>, <codeph>topRightRadiusX</codeph>, <codeph>bottomLeftRadiusX</codeph> и <codeph>bottomRightRadiusX</codeph> имеют приоритет над этим свойством.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:radiusY:get"><apiName>radiusY</apiName><shortdesc>
      Заданный по умолчанию радиус скругления для оси y на всех углах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Заданный по умолчанию радиус скругления для оси y на всех углах. Свойства <codeph>topLeftRadiusY</codeph>, <codeph>topRightRadiusY</codeph>, <codeph>bottomLeftRadiusY</codeph> и <codeph>bottomRightRadiusY</codeph> имеют приоритет над этим свойством.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:topLeftRadiusX:get"><apiName>topLeftRadiusX</apiName><shortdesc>
      Радиус x верхнего левого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус x верхнего левого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:topLeftRadiusY:get"><apiName>topLeftRadiusY</apiName><shortdesc>
      Радиус y верхнего левого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус y верхнего левого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:topRightRadiusX:get"><apiName>topRightRadiusX</apiName><shortdesc>
      Радиус x верхнего правого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус x верхнего правого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Rect:topRightRadiusY:get"><apiName>topRightRadiusY</apiName><shortdesc>
      Радиус y верхнего правого угла прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Радиус y верхнего правого угла прямоугольника.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.primitives:RectangularDropShadow"><apiName>RectangularDropShadow</apiName><shortdesc>
      Этот класс позволяет оптимизировать отображение теней в общих случаях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      <p>Этот класс позволяет оптимизировать отображение теней в общих случаях. Если тень применяется к прямоугольному объекту, грани которого попадают на границы пикселей, вместо непосредственного вызова фильтра DropShadowFilter используется этот класс.</p>
     
      <p>Этот класс принимает первые четыре параметра, передаваемые в фильтр DropShadowFilter: <codeph>alpha</codeph>, <codeph>angle</codeph>, <codeph>color</codeph> и <codeph>distance</codeph>. Кроме того, этот класс принимает радиусы угла для каждого из четырех углов прямоугольного объекта, для которого выполняется преобразование тени.</p>
     
      <p>После установки этих 8 значений указанный класс выполняет предварительное вычисление тени в виде растрового изображения за пределами экрана. При вызове метода <codeph>drawShadow()</codeph> фрагменты предварительно вычисленной тени копируются в передаваемый объект Graphics.</p>
      
      </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filters.DropShadowFilter.xml"><linktext>flash.filters.DropShadowFilter</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>flash.display.DisplayObject</linktext></link></related-links><apiConstructor id="spark.primitives:RectangularDropShadow:RectangularDropShadow"><apiName>RectangularDropShadow</apiName><shortdesc>
          Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Конструктор.
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.primitives:RectangularDropShadow:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.filters.DropShadowFilter#alpha">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.filters.DropShadowFilter#alpha">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:angle:get"><apiName>angle</apiName><shortdesc conref="flash.filters.DropShadowFilter#angle">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.filters.DropShadowFilter#angle">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:blRadius:get"><apiName>blRadius</apiName><shortdesc>
          Радиус нижнего левого закругленного угла прямоугольника, для которого выполняется преобразование тени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
          Радиус нижнего левого закругленного угла прямоугольника, для которого выполняется преобразование тени. Может быть нулем для прямоугольников с незакругленными углами.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:blurX:get"><apiName>blurX</apiName><shortdesc>
          Степень размытия по горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>4
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Степень размытия по горизонтали.
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:blurY:get"><apiName>blurY</apiName><shortdesc>
          Степень размытия по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>4
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Степень размытия по вертикали.
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:brRadius:get"><apiName>brRadius</apiName><shortdesc>
          Радиус нижнего правого закругленного угла прямоугольника, для которого выполняется преобразование тени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
          Радиус нижнего правого закругленного угла прямоугольника, для которого выполняется преобразование тени. Может быть нулем для прямоугольников с незакругленными углами.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:color:get"><apiName>color</apiName><shortdesc conref="flash.filters.DropShadowFilter#color">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.filters.DropShadowFilter#color">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:distance:get"><apiName>distance</apiName><shortdesc conref="flash.filters.DropShadowFilter#distance">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.filters.DropShadowFilter#distance">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:tlRadius:get"><apiName>tlRadius</apiName><shortdesc>
          Радиус верхнего левого закругленного угла прямоугольника, для которого выполняется преобразование тени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
          Радиус верхнего левого закругленного угла прямоугольника, для которого выполняется преобразование тени. Может быть нулем для прямоугольников с незакругленными углами.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:RectangularDropShadow:trRadius:get"><apiName>trRadius</apiName><shortdesc>
          Радиус верхнего правого закругленного угла прямоугольника, для которого выполняется преобразование тени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
          Радиус верхнего правого закругленного угла прямоугольника, для которого выполняется преобразование тени. Может быть нулем для прямоугольников с незакругленными углами.
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.primitives:Line"><apiName>Line</apiName><shortdesc>
  Класс Line является графическим элементом, который рисует линию между двумя точками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.primitives.supportClasses:StrokedElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Line является графическим элементом, который рисует линию между двумя точками.
  
  <p>Обводка по умолчанию для линии не определена; поэтому, если обводка не задана, то линия невидима.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.graphics.Stroke.xml"><linktext>mx.graphics.Stroke</linktext></link></related-links><apiConstructor id="spark.primitives:Line:Line"><apiName>Line</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:Line:protected:canSkipMeasurement"><apiName>canSkipMeasurement</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Line:protected:draw"><apiName>draw</apiName><shortdesc>
     
      Нарисуйте элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/></apiParam></apiOperationDef><apiDesc>
     
      Нарисуйте элемент. Это второй из трех шагов в процессе рисования. Переопределите этот метод для выполнения рисования. Обводка (и при необходимости заливка) устанавливаются в методе <codeph>beginDraw()</codeph>. Данное переопределение должно содержать вызов только таких методов рисования, как <codeph>moveTo()</codeph>, <codeph>curveTo()</codeph> и <codeph>drawRect()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Line:protected:measure"><apiName>measure</apiName><shortdesc>
      
      Вычисляет размер элемента по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вычисляет размер элемента по умолчанию. Это усовершенствованный метод, который можно отменить при создании подкласса GraphicElement.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>measure()</codeph> вызывается программой Flex при добавлении элемента к группе с использованием метода <codeph>addElement()</codeph> и при вызове метода <codeph>invalidateSize()</codeph> элемента. </p>
     
      <p>По умолчанию задается явная высота и явная ширина элемента, вызов метода <codeph>measure()</codeph> в программе Flex не осуществляется даже в случае явного вызова метода <codeph>invalidateSize()</codeph>. Для отмены такого поведения требуется отменить метод <codeph>skipMeasure()</codeph>.</p>
     
      <p>Для переопределения этого метода необходимо настроить свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> для определения размера по умолчанию. Можно дополнительно задать свойства <codeph>measuredX</codeph> и <codeph>measuredY</codeph> для определения по размеров границ по умолчанию верхнего левого угла относительно исходного положения элемента.</p>
     
      <p>Концептуальное отличие метода <codeph>measure()</codeph> для элемента заключается в предоставлении его собственных естественных или свойственных ему размеров в качестве значений по умолчанию. Поэтому свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> должны определяться на основе таких факторов, как перечисленные ниже.</p>
      <ul>
         <li>Объем текста, который должен быть отображен в компоненте.</li>
         <li>Размер изображения JPEG, отображаемого в компоненте.</li>
      </ul>
     
      <p>В некоторых случаях встроенный метод для определения значений по умолчанию отсутствует. Например, для простого элемента GreenCircle можно просто установить значение свойств measuredWidth = 100 и measuredHeight = 100 в методе <codeph>measure()</codeph> для предоставления приемлемого размера по умолчанию. В других случаях, например, для элемента TextArea, соответствующее вычисление (например, поиск требуемого значения ширины и высоты, при которых будет отображен весь текст, а элемент будет иметь соотношение размеров, присущее золотому сечению) может занять слишком много времени и поэтому не является целесообразным.</p>
     
      <p>В реализации метода <codeph>measure()</codeph> по умолчанию для свойств <codeph>measuredWidth</codeph>, <codeph>measuredHeight</codeph>, <codeph>measuredX</codeph> и <codeph>measuredY</codeph> устанавливается значение, равное <codeph>0</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.primitives:Line:xFrom:get"><apiName>xFrom</apiName><shortdesc>
     Начальное положение линии по оси x.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Начальное положение линии по оси x.
    
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Line:xTo:get"><apiName>xTo</apiName><shortdesc>
     Конечное положение линии по оси x.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Конечное положение линии по оси x.
    
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Line:yFrom:get"><apiName>yFrom</apiName><shortdesc>
     Начальное положение линии по оси y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Начальное положение линии по оси y.
    
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Line:yTo:get"><apiName>yTo</apiName><shortdesc>
     Конечное положение линии по оси y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Конечное положение линии по оси y.
    
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.primitives:BitmapImage"><apiName>BitmapImage</apiName><shortdesc>
  Элемент BitmapImage определяет регион прямоугольной формы в координатном пространстве своего вышестоящего элемента, заполненный растровыми данными из исходного файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.primitives.supportClasses:GraphicElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент BitmapImage определяет регион прямоугольной формы в координатном пространстве своего вышестоящего элемента, заполненный растровыми данными из исходного файла.
  
  </apiDesc><example conref="BitmapImageExample.mxml"><swfblock conref="examples/BitmapImageExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.primitives:BitmapImage:BitmapImage"><apiName>BitmapImage</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:BitmapImage:protected:measure"><apiName>measure</apiName><shortdesc>
      
      Вычисляет размер элемента по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вычисляет размер элемента по умолчанию. Это усовершенствованный метод, который можно отменить при создании подкласса GraphicElement.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>measure()</codeph> вызывается программой Flex при добавлении элемента к группе с использованием метода <codeph>addElement()</codeph> и при вызове метода <codeph>invalidateSize()</codeph> элемента. </p>
     
      <p>По умолчанию задается явная высота и явная ширина элемента, вызов метода <codeph>measure()</codeph> в программе Flex не осуществляется даже в случае явного вызова метода <codeph>invalidateSize()</codeph>. Для отмены такого поведения требуется отменить метод <codeph>skipMeasure()</codeph>.</p>
     
      <p>Для переопределения этого метода необходимо настроить свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> для определения размера по умолчанию. Можно дополнительно задать свойства <codeph>measuredX</codeph> и <codeph>measuredY</codeph> для определения по размеров границ по умолчанию верхнего левого угла относительно исходного положения элемента.</p>
     
      <p>Концептуальное отличие метода <codeph>measure()</codeph> для элемента заключается в предоставлении его собственных естественных или свойственных ему размеров в качестве значений по умолчанию. Поэтому свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> должны определяться на основе таких факторов, как перечисленные ниже.</p>
      <ul>
         <li>Объем текста, который должен быть отображен в компоненте.</li>
         <li>Размер изображения JPEG, отображаемого в компоненте.</li>
      </ul>
     
      <p>В некоторых случаях встроенный метод для определения значений по умолчанию отсутствует. Например, для простого элемента GreenCircle можно просто установить значение свойств measuredWidth = 100 и measuredHeight = 100 в методе <codeph>measure()</codeph> для предоставления приемлемого размера по умолчанию. В других случаях, например, для элемента TextArea, соответствующее вычисление (например, поиск требуемого значения ширины и высоты, при которых будет отображен весь текст, а элемент будет иметь соотношение размеров, присущее золотому сечению) может занять слишком много времени и поэтому не является целесообразным.</p>
     
      <p>В реализации метода <codeph>measure()</codeph> по умолчанию для свойств <codeph>measuredWidth</codeph>, <codeph>measuredHeight</codeph>, <codeph>measuredX</codeph> и <codeph>measuredY</codeph> устанавливается значение, равное <codeph>0</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:BitmapImage:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      Обеспечивает отображение элемента и/или определение размеров и положения его содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает отображение элемента и/или определение размеров и положения его содержимого. Это усовершенствованный метод, который можно отменить при создании подкласса GraphicElement.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>updateDisplayList()</codeph> вызывается программой Flex при добавлении компонента к группе с использованием метода <codeph>addElement()</codeph>, а также при вызове метода <codeph>invalidateDisplayList()</codeph> элемента. </p>
     
      <p>Именно в этом методе необходимо осуществить программируемое отображение с использованием методов элемента displayObject, например, <codeph>graphics.drawRect()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.primitives:BitmapImage:fillMode:get"><apiName>fillMode</apiName><shortdesc>
      fillMode определяет, каким образом растровое изображение заполняет область определенного размера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapFillMode.SCALE&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc>
      fillMode определяет, каким образом растровое изображение заполняет область определенного размера. При установке значения этого свойства в теге необходимо использовать строку (например, repeat). Если установлено значение этого свойства в ActionScript, то необходимо использовать константу (например, <codeph>BitmapFillMode.CLIP</codeph>). Если установлено значение <codeph>BitmapFillMode.CLIP</codeph> («Фрагмент»), то растровое изображение ограничивается пределами области. Если установлено значение <codeph>BitmapFillMode.REPEAT</codeph> («Повтор»), то растровое изображение копируется для заполнения области. Если установлено значение <codeph>BitmapFillMode.SCALE</codeph> («Масштаб»), растровое изображение растягивается для заполнения области.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:BitmapImage:source:get"><apiName>source</apiName><shortdesc>
      Источник, используемый для растровой заливки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Источник, используемый для растровой заливки. Заливка может выполняться на основе различных графических источников, включая следующие. 
      <ul>
       <li>Растровое изображение или экземпляр BitmapData.</li>
       <li>Класс, представляющий подкласс DisplayObject. BitmapFill реализует класс и выполняет его растровую визуализацию.</li>
       <li>Экземпляр DisplayObject. BitmapFill копирует его в растровое изображение для заливки.</li>
      </ul>
      
      <p>В качестве источника может быть файл изображения типа PNG, GIF или JPG.</p>
      
      <p>Для определения изображения как источника, следует использовать директиву @Embed, как показано в следующем примере:
      <pre>
      source="@Embed('&lt;i>image_location&lt;/i>')"
      </pre>
      </p>
      
      <p>Местоположением изображения может служить URL-ссылка или ссылка на файл. Если это ссылка на файл, ее местоположение определяется местоположением компилируемого файла.</p>
     
      <p> Если BitmapImage создал экземпляр BitmapData, то затем он удалит BitmapData при первом изменении источника.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.Bitmap.xml"><linktext>flash.display.Bitmap</linktext></link><link href="" invalidHref="flash.display.BitmapData.xml"><linktext>flash.display.BitmapData</linktext></link><link href="" invalidHref="mx.graphics.BitmapFill.xml"><linktext>mx.graphics.BitmapFill</linktext></link></related-links></apiValue><apiValue id="spark.primitives:BitmapImage:smooth:set"><apiName>smooth</apiName><shortdesc conref="flash.display.GraphicsBitmapFill#smooth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.display.GraphicsBitmapFill#smooth">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.primitives:Path"><apiName>Path</apiName><shortdesc>
  Класс Path является заполненным графическим элементом, рисующим ряд сегментов пути.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.primitives.supportClasses:FilledElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Path является заполненным графическим элементом, рисующим ряд сегментов пути. В векторной графике путь представляет собой ряд точек, соединенных прямыми или изогнутыми отрезками. Линии формируют изображение. В программе Flex для определения сложной векторной фигуры, созданной из нескольких отрезков, используется класс Path.  
 
  <p>Как правило, первый элемент определения пути является сегментом Move, служащий для задания начальной позиции пера. После этого для рисования линий графики используются сеггменты Line, CubicBezier и QuadraticBezier. При использовании этих классов необходимо указывать только x и y координаты конечной точки линии; x и y координаты начальной точки определены текущей позицией пера.</p>
  
  <p>После рисования отрезка, текущей позицией пера становятся x и y координаты конечной точки линии. В определении пути для изменения положения пера могут использоваться несколько сегментов Move.</p>
  
  <p>Синтаксис, используемый классом Path для определения фигуры, совпадает с синтаксисом пути SVG, что упрощает преобразование пути SVG во Flex пути.</p>
  
  </apiDesc><example conref="ArrowExample.mxml"><swfblock conref="examples/ArrowExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.primitives:Path:Path"><apiName>Path</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:Path:protected:draw"><apiName>draw</apiName><shortdesc>
     
      Нарисуйте элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/></apiParam></apiOperationDef><apiDesc>
     
      Нарисуйте элемент. Это второй из трех шагов в процессе рисования. Переопределите этот метод для выполнения рисования. Обводка (и при необходимости заливка) устанавливаются в методе <codeph>beginDraw()</codeph>. Данное переопределение должно содержать вызов только таких методов рисования, как <codeph>moveTo()</codeph>, <codeph>curveTo()</codeph> и <codeph>drawRect()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Path:protected:endDraw"><apiName>endDraw</apiName><shortdesc>
     
      
      Завершите процесс рисования для этого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>Графический элемент для завершения рисования.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      Завершите процесс рисования для этого элемента. Это последний из этих трех шагов в процессе рисования. На этом этапе выполнение заливок завершено.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Path:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Path:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Path:protected:invalidateDisplayObjectSharing"><apiName>invalidateDisplayObjectSharing</apiName><shortdesc>
      
      Служебный метод, сообщающий хосту об изменениях элемента и необходимости в обновлении его слоя.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Служебный метод, сообщающий хосту об изменениях элемента и необходимости в обновлении его слоя.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Path:protected:measure"><apiName>measure</apiName><shortdesc>
      
      Вычисляет размер элемента по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вычисляет размер элемента по умолчанию. Это усовершенствованный метод, который можно отменить при создании подкласса GraphicElement.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>measure()</codeph> вызывается программой Flex при добавлении элемента к группе с использованием метода <codeph>addElement()</codeph> и при вызове метода <codeph>invalidateSize()</codeph> элемента. </p>
     
      <p>По умолчанию задается явная высота и явная ширина элемента, вызов метода <codeph>measure()</codeph> в программе Flex не осуществляется даже в случае явного вызова метода <codeph>invalidateSize()</codeph>. Для отмены такого поведения требуется отменить метод <codeph>skipMeasure()</codeph>.</p>
     
      <p>Для переопределения этого метода необходимо настроить свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> для определения размера по умолчанию. Можно дополнительно задать свойства <codeph>measuredX</codeph> и <codeph>measuredY</codeph> для определения по размеров границ по умолчанию верхнего левого угла относительно исходного положения элемента.</p>
     
      <p>Концептуальное отличие метода <codeph>measure()</codeph> для элемента заключается в предоставлении его собственных естественных или свойственных ему размеров в качестве значений по умолчанию. Поэтому свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> должны определяться на основе таких факторов, как перечисленные ниже.</p>
      <ul>
         <li>Объем текста, который должен быть отображен в компоненте.</li>
         <li>Размер изображения JPEG, отображаемого в компоненте.</li>
      </ul>
     
      <p>В некоторых случаях встроенный метод для определения значений по умолчанию отсутствует. Например, для простого элемента GreenCircle можно просто установить значение свойств measuredWidth = 100 и measuredHeight = 100 в методе <codeph>measure()</codeph> для предоставления приемлемого размера по умолчанию. В других случаях, например, для элемента TextArea, соответствующее вычисление (например, поиск требуемого значения ширины и высоты, при которых будет отображен весь текст, а элемент будет иметь соотношение размеров, присущее золотому сечению) может занять слишком много времени и поэтому не является целесообразным.</p>
     
      <p>В реализации метода <codeph>measure()</codeph> по умолчанию для свойств <codeph>measuredWidth</codeph>, <codeph>measuredHeight</codeph>, <codeph>measuredX</codeph> и <codeph>measuredY</codeph> устанавливается значение, равное <codeph>0</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.primitives:Path:data:set"><apiName>data</apiName><shortdesc>
      Строка, содержащая компактное представление отрезков пути.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Строка, содержащая компактное представление отрезков пути. Это альтернативный способ установки свойства сегментов. Установка этого свойства переопределяет все значения, сохраненные в массиве свойств сегментов.
     
      <p>Значением является строка, разделенная пробелами, описывающая каждый сегмент пути. Каждый ввод сегмента имеет одиночный символ, который обозначает тип сегмента и два или больше его параметра.</p>
     
      <p>Если команда сегмента содержит заглавные буквы, то параметрами являются абсолютные значения. Если команда сегмента содержит строчные буквы, то параметрами являются относительные значения.</p>
     
      <p>В следующей таблице показан синтаксис для сегментов:
      
      
      <adobetable class="innertable">
        
        
        
        
        
        
        
        
      <tgroup cols="4"><thead><row><entry>Тип сегмента</entry><entry>Команда</entry><entry>Параметры</entry><entry>Пример</entry></row></thead><tbody><row>
          <entry>Переместить</entry>
          <entry>M/m</entry>
          <entry>x y</entry>
          <entry><codeph>M 10 20</codeph> – перемещение линии в координаты 10, 20.</entry>
        </row><row>
          <entry>Строка</entry>
          <entry>L/l</entry>
          <entry>x y</entry>
          <entry><codeph>L 50 30</codeph> – линия с координатами 50, 30.</entry>
        </row><row>
          <entry>Горизонтальная линия</entry>
          <entry>H/h</entry>
          <entry>x</entry>
          <entry><codeph>H 40</codeph> = горизонтальная линия с координатой 40.</entry>
        </row><row>
          <entry>Вертикальная линия</entry>
          <entry>V/v</entry>
          <entry>y</entry>
          <entry><codeph>V 100</codeph> – вертикальная линия с координатой 100.</entry>
        </row><row>
          <entry>QuadraticBezier</entry>
          <entry>Q/q</entry>
          <entry>controlX controlY x y</entry>
          <entry><codeph>Q 110 45 90 30</codeph> – кривая с координатами 90, 30, с контрольной точкой в координатах 110, 45.</entry>
        </row><row>
          <entry>CubicBezier</entry>
          <entry>C/c</entry>
          <entry>control1X control1Y control2X control2Y x y</entry>
          <entry><codeph>C 45 50 20 30 10 20</codeph> – кривая с координатами 10, 20, с первой контрольной точкой в координатах 45, 50 и второй контрольной точкой в координатах 20, 30.</entry>
        </row><row>
          <entry>Замкнуть путь</entry>
          <entry>Z/z</entry>
          <entry>Нет данных</entry>
          <entry>Замыкает путь.</entry>
        </row></tbody></tgroup></adobetable>
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.primitives:Path:winding:set"><apiName>winding</apiName><shortdesc>
      Необходимо выполнение правил пересечения или перекрывания сегментов пути.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>evenOdd
      </apiDefaultValue></apiValueDef><apiDesc>
      Необходимо выполнение правил пересечения или перекрывания сегментов пути. Возможными значениями являются GraphicsPathWinding. EVEN_ODD и GraphicsPathWinding. NON_ZERO
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.GraphicPathWinding.xml"><linktext>flash.display.GraphicPathWinding</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.primitives:Ellipse"><apiName>Ellipse</apiName><shortdesc>
  Класс Ellipse является заполненным графическим элементом, рисующим эллипс.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.primitives.supportClasses:FilledElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Ellipse является заполненным графическим элементом, рисующим эллипс. Для рисования эллипса данный класс вызывает метод <codeph>Graphics.drawEllipse()</codeph>.
  
  </apiDesc><example conref="EllipseExample.mxml"><swfblock conref="examples/EllipseExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links><apiConstructor id="spark.primitives:Ellipse:Ellipse"><apiName>Ellipse</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.primitives:Ellipse:protected:draw"><apiName>draw</apiName><shortdesc>
      
      Нарисуйте элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/></apiParam></apiOperationDef><apiDesc>
      
      Нарисуйте элемент. Это второй из трех шагов в процессе рисования. Переопределите этот метод для выполнения рисования. Обводка (и при необходимости заливка) устанавливаются в методе <codeph>beginDraw()</codeph>. Данное переопределение должно содержать вызов только таких методов рисования, как <codeph>moveTo()</codeph>, <codeph>curveTo()</codeph> и <codeph>drawRect()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Ellipse:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.primitives:Ellipse:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>